file_diff,commit_time,file_diff_id
"@@ -38,7 +38,7 @@ enum ServletContainerSetting {
     final String resource;
     final String icon;
 
-    ServletContainerSetting(final String baseId, final String type, final String resource, final String icon) {
+    ServletContainerSetting(String baseId, String type, String resource, String icon) {
         this.baseId = baseId;
         this.type = type;
         this.resource = resource;",2018-06-26T18:10:17Z,104
"@@ -72,23 +72,23 @@ class JpaPreview extends PreviewContent<JpaStatistic> {
                 .primaryAction(resources.constants().gotoDeployment(), () -> placeManager.revealPlace(placeRequest))
                 .build();
 
-        openedSessions = new Utilization(resources.constants().opened(), resources.constants().sessions(),
+        openedSessions = new Utilization(resources.constants().opened(), Names.SESSIONS,
                 environment.isStandalone(), false);
-        closedSessions = new Utilization(resources.constants().closed(), resources.constants().sessions(),
+        closedSessions = new Utilization(resources.constants().closed(), Names.SESSIONS,
                 environment.isStandalone(), false);
 
         getHeaderContainer().appendChild(refresh = refreshLink(() -> update(jpaStatistic)));
         previewBuilder()
                 .add(noStatistics)
-                .add(header = h(2).textContent(resources.constants().sessions()).asElement())
+                .add(header = h(2).textContent(Names.SESSIONS).asElement())
                 .add(openedSessions)
                 .add(closedSessions);
 
         Elements.setVisible(noStatistics.asElement(), false);
     }
 
     @Override
-    public void update(final JpaStatistic jpaStatistics) {
+    public void update(JpaStatistic jpaStatistics) {
         Operation operation = new Operation.Builder(jpaStatistics.getAddress(), READ_RESOURCE_OPERATION)
                 .param(INCLUDE_RUNTIME, true)
                 .param(RECURSIVE, true)
@@ -97,7 +97,7 @@ public void update(final JpaStatistic jpaStatistics) {
     }
 
     @SuppressWarnings(""HardCodedStringLiteral"")
-    private void internalUpdate(final JpaStatistic statistic) {
+    private void internalUpdate(JpaStatistic statistic) {
         boolean statisticsEnabled = statistic.isStatisticsEnabled();
 
         Elements.setVisible(noStatistics.asElement(), !statisticsEnabled);",2018-06-26T18:10:17Z,105
"@@ -24,22 +24,23 @@
 
 class LogFile extends ModelNode {
 
+    // TODO Move to ModelDescriptionConstants
     private static final String FILE_NAME = ""file-name"";
     private static final String FILE_SIZE = ""file-size"";
     private static final String LAST_MODIFIED_DATE = ""last-modified-date"";
     private static final String LAST_MODIFIED_TIMESTAMP = ""last-modified-timestamp"";
 
-    LogFile(final ModelNode node) {
+    LogFile(ModelNode node) {
         set(node);
     }
 
-    LogFile(final String name, final ModelNode node) {
+    LogFile(String name, ModelNode node) {
         set(node);
         get(FILE_NAME).set(name);
     }
 
     public String getFilename() {
-        return get(FILE_NAME).asString(); //NON-NLS
+        return get(FILE_NAME).asString();
     }
 
     public Date getLastModifiedDate() {",2018-06-26T18:10:17Z,74
"@@ -19,13 +19,7 @@
 import java.util.List;
 
 import javax.inject.Inject;
-import javax.inject.Provider;
 
-import com.google.gwt.safehtml.shared.SafeHtml;
-import com.google.web.bindery.event.shared.EventBus;
-import elemental2.dom.HTMLElement;
-import org.jboss.hal.ballroom.dialog.Dialog;
-import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.config.Environment;
 import org.jboss.hal.core.deployment.DeploymentResource;
 import org.jboss.hal.core.finder.ColumnActionFactory;
@@ -35,33 +29,21 @@
 import org.jboss.hal.core.finder.ItemAction;
 import org.jboss.hal.core.finder.ItemActionFactory;
 import org.jboss.hal.core.finder.ItemDisplay;
-import org.jboss.hal.core.mbui.form.OperationFormBuilder;
 import org.jboss.hal.core.mvp.Places;
 import org.jboss.hal.core.runtime.server.ServerActions;
 import org.jboss.hal.dmr.Composite;
 import org.jboss.hal.dmr.CompositeResult;
-import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Operation;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
-import org.jboss.hal.flow.Progress;
-import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.StatementContext;
-import org.jboss.hal.meta.processing.MetadataProcessor;
-import org.jboss.hal.meta.security.Constraint;
 import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
 import org.jboss.hal.spi.AsyncColumn;
-import org.jboss.hal.spi.Footer;
-import org.jboss.hal.spi.Message;
-import org.jboss.hal.spi.MessageEvent;
 import org.jboss.hal.spi.Requires;
 
-import static org.jboss.gwt.elemento.core.Elements.div;
-import static org.jboss.gwt.elemento.core.Elements.p;
-import static org.jboss.hal.ballroom.dialog.Dialog.Size.MEDIUM;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_DEPLOYMENT_ADDRESS;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_DEPLOYMENT_TEMPLATE;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_SUBDEPLOYMENT_TEMPLATE;
@@ -71,51 +53,16 @@
 @Requires(WEB_DEPLOYMENT_ADDRESS)
 public class DeploymentColumn extends FinderColumn<DeploymentResource> {
 
-    /**
-     * The regular Dialogs in DialogFactory uses button with a simple Callback that closes the dialog, even when
-     * the form contains errors as ""required fields"" not set. This custom dialog uses a
-     * <code>Dialog.ResultCallback</code>
-     * that returns a boolean, thus the dialog is closed only if there are no form errors.
-     */
-    private static Dialog buildConfirmation(Resources resources, String title, SafeHtml question, HTMLElement element,
-            Dialog.ResultCallback confirm) {
-        HTMLElement content;
-        if (element != null) {
-            content = div()
-                    .add(p().innerHtml(question))
-                    .add(element)
-                    .asElement();
-        } else {
-            content = p().innerHtml(question).asElement();
-        }
-
-        return new Dialog.Builder(title)
-                .primary(resources.constants().invalidate(), confirm)
-                .secondary(resources.constants().cancel(), null)
-                .size(MEDIUM)
-                .add(content)
-                .build();
-    }
-
-    private Dispatcher dispatcher;
-    private EventBus eventBus;
-    private Resources resources;
-    private Provider<Progress> progress;
-    private MetadataProcessor metadataProcessor;
-
     @Inject
     public DeploymentColumn(Finder finder,
             FinderPathFactory finderPathFactory,
             ColumnActionFactory columnActionFactory,
             ItemActionFactory itemActionFactory,
             Dispatcher dispatcher,
-            EventBus eventBus,
             Places places,
-            MetadataProcessor metadataProcessor,
             StatementContext statementContext,
             Environment environment,
             ServerActions serverActions,
-            @Footer Provider<Progress> progress,
             Resources resources) {
 
         super(new Builder<DeploymentResource>(finder, Ids.UNDERTOW_RUNTIME_DEPLOYMENT, Names.DEPLOYMENT)
@@ -142,91 +89,33 @@ public DeploymentColumn(Finder finder,
                         callback.onSuccess(deployments);
                     });
                 })
-                .onPreview(item -> new DeploymentPreview(item, finderPathFactory, places, resources, environment,
-                        dispatcher, statementContext, serverActions))
-                .useFirstActionAsBreadcrumbHandler()
-                .withFilter()
-                .showCount()
-        );
-
-        this.dispatcher = dispatcher;
-        this.eventBus = eventBus;
-        this.resources = resources;
-        this.progress = progress;
-        this.metadataProcessor = metadataProcessor;
-
-        setItemRenderer(item -> new ItemDisplay<DeploymentResource>() {
-            @Override
-            public String getId() {
-                return Ids.asId(item.getPath());
-            }
-
-            @Override
-            public String getTitle() {
-                return item.getPath();
-            }
-
-            @Override
-            public List<ItemAction<DeploymentResource>> actions() {
-                List<ItemAction<DeploymentResource>> actions = new ArrayList<>();
-                actions.add(itemActionFactory.view(places.selectedProfile(NameTokens.UNDERTOW_RUNTIME_DEPLOYMENT_VIEW)
-                        .with(DEPLOYMENT, item.getDeployment())
-                        .with(SUBDEPLOYMENT, item.getSubdeployment())
-                        .build()));
-                actions.add(new ItemAction.Builder<DeploymentResource>()
-                        .title(resources.constants().invalidateSession())
-                        .constraint(Constraint.executable(WEB_DEPLOYMENT_TEMPLATE, INVALIDATE_SESSION_OPERATION))
-                        .handler(itm -> invalidateSession(itm))
-                        .build());
-                return actions;
-            }
-        });
-    }
-
-    private void invalidateSession(DeploymentResource item) {
-        metadataProcessor.lookup(WEB_DEPLOYMENT_TEMPLATE, progress.get(),
-                new MetadataProcessor.MetadataCallback() {
+                .itemRenderer(item -> new ItemDisplay<DeploymentResource>() {
                     @Override
-                    public void onMetadata(Metadata metadata) {
-                        String id = Ids.build(INVALIDATE_SESSION_OPERATION, Ids.FORM);
-                        Form<ModelNode> form = new OperationFormBuilder<>(id, metadata, INVALIDATE_SESSION_OPERATION)
-                                .build();
+                    public String getId() {
+                        return Ids.asId(item.getPath());
+                    }
 
-                        // uses a custom dialog that only closes a dialog if there are no form errors
-                        Dialog dialog = buildConfirmation(resources,
-                                resources.messages().invalidateSessionTitle(),
-                                resources.messages().invalidateSessionQuestion(),
-                                form.asElement(), () -> {
-                                    boolean formOk = form.save();
-                                    if (formOk) {
-                                        String sessionId = form.<String>getFormItem(SESSION_ID).getValue();
-                                        Operation operation = new Operation.Builder(item.getAddress(),
-                                                INVALIDATE_SESSION_OPERATION)
-                                                .param(SESSION_ID, sessionId)
-                                                .build();
-                                        dispatcher.execute(operation, result -> {
-                                            if (result.asBoolean()) {
-                                                MessageEvent.fire(eventBus, Message.success(
-                                                        resources.messages().invalidateSessionSuccess(sessionId)));
-                                            } else {
-                                                MessageEvent.fire(eventBus, Message.warning(
-                                                        resources.messages().invalidateSessionNotExist(sessionId)));
-                                            }
-                                        }, (operation1, failure) -> MessageEvent.fire(eventBus, Message.error(
-                                                resources.messages().invalidateSessionError(sessionId, failure))));
-                                    }
-                                    return formOk;
-                                });
-                        dialog.show();
-                        form.edit(new ModelNode());
+                    @Override
+                    public String getTitle() {
+                        return item.getPath();
                     }
 
                     @Override
-                    public void onError(Throwable error) {
-                        MessageEvent
-                                .fire(eventBus,
-                                        Message.error(resources.messages().metadataError(), error.getMessage()));
+                    public List<ItemAction<DeploymentResource>> actions() {
+                        List<ItemAction<DeploymentResource>> actions = new ArrayList<>();
+                        actions.add(itemActionFactory.view(
+                                places.selectedProfile(NameTokens.UNDERTOW_RUNTIME_DEPLOYMENT_VIEW)
+                                        .with(DEPLOYMENT, item.getDeployment())
+                                        .with(SUBDEPLOYMENT, item.getSubdeployment())
+                                        .build()));
+                        return actions;
                     }
-                });
+                })
+                .onPreview(item -> new DeploymentPreview(item, finderPathFactory, places, resources, environment,
+                        dispatcher, statementContext, serverActions))
+                .useFirstActionAsBreadcrumbHandler()
+                .withFilter()
+                .showCount()
+        );
     }
 }",2018-06-26T18:10:17Z,72
"@@ -15,49 +15,74 @@
  */
 package org.jboss.hal.client.runtime.subsystem.undertow;
 
+import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 import javax.inject.Inject;
+import javax.inject.Provider;
 
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.client.annotations.NameToken;
 import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
 import com.gwtplatform.mvp.client.proxy.ProxyPlace;
 import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
+import org.jboss.hal.ballroom.dialog.DialogFactory;
+import org.jboss.hal.core.SuccessfulOutcome;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderPath;
 import org.jboss.hal.core.finder.FinderPathFactory;
 import org.jboss.hal.core.mvp.ApplicationFinderPresenter;
 import org.jboss.hal.core.mvp.HalView;
 import org.jboss.hal.core.mvp.HasPresenter;
 import org.jboss.hal.core.mvp.SupportsExpertMode;
+import org.jboss.hal.dmr.Composite;
+import org.jboss.hal.dmr.CompositeResult;
+import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.NamedNode;
 import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.Property;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.flow.FlowContext;
+import org.jboss.hal.flow.Progress;
+import org.jboss.hal.flow.Task;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Footer;
+import org.jboss.hal.spi.Message;
+import org.jboss.hal.spi.MessageEvent;
 import org.jboss.hal.spi.Requires;
+import org.jetbrains.annotations.NotNull;
+import rx.Completable;
 
+import static java.util.stream.Collectors.toList;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_DEPLOYMENT_ADDRESS;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_DEPLOYMENT_TEMPLATE;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_SUBDEPLOYMENT_ADDRESS;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_SUBDEPLOYMENT_TEMPLATE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
 import static org.jboss.hal.dmr.ModelNodeHelper.failSafePropertyList;
+import static org.jboss.hal.flow.Flow.series;
 
 public class DeploymentPresenter
         extends ApplicationFinderPresenter<DeploymentPresenter.MyView, DeploymentPresenter.MyProxy>
         implements SupportsExpertMode {
 
+    private static final String SERVLETS = ""servlets"";
+    private static final String WEBSOCKETS = ""websockets"";
+    private static final String SESSION_IDS = ""session-ids"";
+    private static final String SESSIONS = ""sessions"";
+
     private final Dispatcher dispatcher;
     private final FinderPathFactory finderPathFactory;
     private final StatementContext statementContext;
     private final Resources resources;
+    private final Provider<Progress> progress;
     private String deploymentName;
     private String subdeploymentName;
 
@@ -70,12 +95,14 @@ public DeploymentPresenter(
             Dispatcher dispatcher,
             FinderPathFactory finderPathFactory,
             StatementContext statementContext,
-            Resources resources) {
+            Resources resources,
+            @Footer Provider<Progress> progress) {
         super(eventBus, view, myProxy, finder);
         this.dispatcher = dispatcher;
         this.finderPathFactory = finderPathFactory;
         this.statementContext = statementContext;
         this.resources = resources;
+        this.progress = progress;
     }
 
     @Override
@@ -107,26 +134,123 @@ public FinderPath finderPath() {
 
     @Override
     protected void reload() {
-        ResourceAddress address;
-        if (subdeploymentName == null) {
-            address = WEB_DEPLOYMENT_TEMPLATE.resolve(statementContext, deploymentName);
-        } else {
-            address = WEB_SUBDEPLOYMENT_TEMPLATE.resolve(statementContext, deploymentName, subdeploymentName);
-        }
-        Operation operation = new Operation.Builder(address, READ_RESOURCE_OPERATION)
+        ResourceAddress address = deploymentAddress();
+
+        // task 1: read sessions ids, servlets and websockets
+        Operation readResourceOp = new Operation.Builder(address, READ_RESOURCE_OPERATION)
                 .param(INCLUDE_RUNTIME, true)
                 .param(RECURSIVE, true)
                 .build();
-        dispatcher.execute(operation, result -> {
-            getView().updateServlets(asNamedNodes(failSafePropertyList(result, SERVLET)));
-            getView().updateWebsockets(asNamedNodes(failSafePropertyList(result, WEBSOCKET)));
-        });
+        Operation listSessionsOp = new Operation.Builder(address, LIST_SESSIONS).build();
+        Task<FlowContext> task1 = context -> dispatcher.execute(new Composite(readResourceOp, listSessionsOp))
+                .doOnSuccess((CompositeResult result) -> {
+                    ModelNode readResourceResult = result.step(0).get(RESULT);
+                    List<NamedNode> servlets = asNamedNodes(failSafePropertyList(readResourceResult, SERVLET));
+                    List<NamedNode> websockets = asNamedNodes(failSafePropertyList(readResourceResult, WEBSOCKET));
+
+                    // sorted session ids (important for step 2!)
+                    ModelNode listSessionsResult = result.step(1).get(RESULT);
+                    List<String> sessionIds = listSessionsResult.isDefined()
+                            ? listSessionsResult.asList().stream().map(ModelNode::asString).sorted().collect(toList())
+                            : Collections.emptyList();
+
+                    context.set(SERVLETS, servlets);
+                    context.set(WEBSOCKETS, websockets);
+                    context.set(SESSION_IDS, sessionIds);
+                })
+                .toCompletable();
+
+        // task 2: read session creation and last access times
+        Task<FlowContext> task2 = context -> {
+            List<String> sessionIds = context.get(SESSION_IDS);
+            if (sessionIds.isEmpty()) {
+                context.set(SESSIONS, Collections.emptyList());
+                return Completable.complete();
+            } else {
+                List<Operation> operations = new ArrayList<>();
+                for (String id : sessionIds) {
+                    operations.add(new Operation.Builder(address, GET_SESSION_CREATION_TIME)
+                            .param(SESSION_ID, id)
+                            .build());
+                    operations.add(new Operation.Builder(address, GET_SESSION_LAST_ACCESSED_TIME)
+                            .param(SESSION_ID, id)
+                            .build());
+                }
+                return dispatcher.execute(new Composite(operations))
+                        .doOnSuccess((CompositeResult result) -> {
+                            int i = 0;
+                            List<Session> sessions = new ArrayList<>();
+                            for (String sessionId : sessionIds) {
+                                ModelNode modelNode = new ModelNode();
+                                if (result.step(i).isDefined() && result.step(i).get(RESULT).isDefined()) {
+                                    modelNode.get(CREATION_TIME).set(result.step(i).get(RESULT));
+                                }
+                                if (result.step(i + 1).isDefined() && result.step(i + 1).get(RESULT).isDefined()) {
+                                    modelNode.get(LAST_ACCESSED_TIME).set(result.step(i + 1).get(RESULT));
+                                }
+                                sessions.add(new Session(sessionId, modelNode));
+                                i++;
+                            }
+                            context.set(SESSIONS, sessions);
+                        })
+                        .toCompletable();
+            }
+        };
+
+        series(new FlowContext(progress.get()), task1, task2)
+                .subscribe(new SuccessfulOutcome<FlowContext>(getEventBus(), resources) {
+                    @Override
+                    public void onSuccess(FlowContext context) {
+                        List<Session> sessions = context.get(SESSIONS);
+                        List<NamedNode> servlets = context.get(SERVLETS);
+                        List<NamedNode> websockets = context.get(WEBSOCKETS);
+
+                        getView().updateSessions(sessions);
+                        getView().updateServlets(servlets);
+                        getView().updateWebsockets(websockets);
+                    }
+                });
     }
 
     StatementContext getStatementContext() {
         return statementContext;
     }
 
+    void invalidateSession(Session session) {
+        DialogFactory.showConfirmation(resources.constants().invalidateSession(),
+                resources.messages().invalidateSessionQuestion(), () -> {
+                    Operation operation = new Operation.Builder(deploymentAddress(), INVALIDATE_SESSION)
+                            .param(SESSION_ID, session.getSessionId())
+                            .build();
+                    dispatcher.execute(operation,
+                            result -> {
+                                MessageEvent.fire(getEventBus(), Message.success(
+                                        resources.messages().invalidateSessionSuccess()));
+                                reload();
+                            },
+                            (op, failure) -> MessageEvent.fire(getEventBus(),
+                                    Message.error(resources.messages().invalidateSessionError(failure))));
+                });
+    }
+
+    void listSessionAttributes(Session session) {
+        Operation operation = new Operation.Builder(deploymentAddress(), LIST_SESSION_ATTRIBUTES)
+                .param(SESSION_ID, session.getSessionId())
+                .build();
+        dispatcher.execute(operation, result -> getView().updateSessionAttributes(result.asPropertyList()));
+    }
+
+    @NotNull
+    private ResourceAddress deploymentAddress() {
+        ResourceAddress address;
+        if (subdeploymentName == null) {
+            address = WEB_DEPLOYMENT_TEMPLATE.resolve(statementContext, deploymentName);
+        } else {
+            address = WEB_SUBDEPLOYMENT_TEMPLATE.resolve(statementContext, deploymentName, subdeploymentName);
+        }
+        return address;
+    }
+
 
     // @formatter:off
     @ProxyCodeSplit
@@ -136,6 +260,8 @@ public interface MyProxy extends ProxyPlace<DeploymentPresenter> {
     }
 
     public interface MyView extends HalView, HasPresenter<DeploymentPresenter> {
+        void updateSessions(List<Session> sessions);
+        void updateSessionAttributes(List<Property> attributes);
         void updateServlets(List<NamedNode> model);
         void updateWebsockets(List<NamedNode> model);
     }",2018-06-26T18:10:17Z,79
"@@ -132,7 +132,7 @@ class DeploymentPreview extends PreviewContent<DeploymentResource> {
                 .build();
         registerAttachable(sessions);
         sessionsElement = section()
-                .add(h(2, resources.constants().sessions()))
+                .add(h(2, Names.SESSIONS))
                 .add(sessions)
                 .asElement();
 ",2018-06-26T18:10:17Z,25
"@@ -20,35 +20,43 @@
 import javax.inject.Inject;
 
 import elemental2.dom.HTMLElement;
+import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.hal.ballroom.Format;
 import org.jboss.hal.ballroom.VerticalNavigation;
 import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.table.Scope;
 import org.jboss.hal.ballroom.table.Table;
 import org.jboss.hal.core.mbui.form.ModelNodeForm;
 import org.jboss.hal.core.mbui.table.ModelNodeTable;
 import org.jboss.hal.core.mvp.HalViewImpl;
 import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.Property;
 import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.security.Constraint;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
 
-import static org.jboss.gwt.elemento.core.Elements.h;
-import static org.jboss.gwt.elemento.core.Elements.p;
-import static org.jboss.gwt.elemento.core.Elements.section;
+import static org.jboss.gwt.elemento.core.Elements.*;
+import static org.jboss.gwt.elemento.core.Elements.table;
 import static org.jboss.hal.ballroom.LayoutBuilder.column;
 import static org.jboss.hal.ballroom.LayoutBuilder.row;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_DEPLOYMENT_SERVLET_TEMPLATE;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_DEPLOYMENT_TEMPLATE;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_DEPLOYMENT_WEBSOCKETS_TEMPLATE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
-import static org.jboss.hal.resources.CSS.pfIcon;
+import static org.jboss.hal.resources.CSS.*;
+import static org.jboss.hal.resources.CSS.table;
 import static org.jboss.hal.resources.Ids.FORM;
+import static org.jboss.hal.resources.Ids.SESSION;
 import static org.jboss.hal.resources.Ids.UNDERTOW_RUNTIME;
 
 public class DeploymentView extends HalViewImpl implements DeploymentPresenter.MyView {
 
+    private final Table<Session> sessionTable;
+    private final HTMLElement attributesElement;
+    private final HTMLElement attributesTableBody;
     private final Table<NamedNode> servletsTable;
     private final Form<NamedNode> servletsForm;
     private final Table<NamedNode> websocketsTable;
@@ -57,8 +65,40 @@ public class DeploymentView extends HalViewImpl implements DeploymentPresenter.M
     private DeploymentPresenter presenter;
 
     @Inject
-    @SuppressWarnings({""ConstantConditions"", ""HardCodedStringLiteral""})
-    public DeploymentView(final MetadataRegistry metadataRegistry, final Resources resources) {
+    public DeploymentView(MetadataRegistry metadataRegistry, Resources resources) {
+
+        // ------------------------------------------------------ sessions
+
+        String id = Ids.build(UNDERTOW, DEPLOYMENT, SESSION);
+        sessionTable = new ModelNodeTable.Builder<Session>(id, Metadata.empty())
+                .button(resources.constants().reload(), table -> presenter.reload(),
+                        Constraint.executable(WEB_DEPLOYMENT_TEMPLATE, LIST_SESSIONS))
+                .button(resources.constants().invalidateSession(),
+                        table -> presenter.invalidateSession(table.selectedRow()), Scope.SELECTED,
+                        Constraint.executable(WEB_DEPLOYMENT_TEMPLATE, INVALIDATE_SESSION))
+                .column(SESSION_ID, Names.SESSION_ID, (cell, type, row, meta) -> row.getName())
+                .column(CREATION_TIME, resources.constants().creationTime(),
+                        (cell, type, row, meta) -> Format.shortDateTime(row.getCreationTime()))
+                .column(LAST_ACCESSED_TIME, resources.constants().lastAccessedTime(),
+                        (cell, type, row, meta) -> Format.shortDateTime(row.getLastAccessTime()))
+                .build();
+
+        attributesElement = div().css(marginTopLarge)
+                .add(h(2, resources.constants().attributes()))
+                .add(table().css(table, tableStriped, attributes)
+                        .add(thead()
+                                .add(tr()
+                                        .add(th().textContent(Names.NAME))
+                                        .add(th().textContent(Names.VALUE))))
+                        .add(attributesTableBody = tbody().asElement()))
+                .asElement();
+        Elements.setVisible(attributesElement, false);
+
+        HTMLElement sessionSection = section()
+                .add(h(1).textContent(Names.SESSIONS))
+                .add(sessionTable)
+                .add(attributesElement)
+                .asElement();
 
         // ------------------------------------------------------ servlets
 
@@ -108,14 +148,17 @@ public DeploymentView(final MetadataRegistry metadataRegistry, final Resources r
                 .add(websocketsForm)
                 .asElement();
 
+        // ------------------------------------------------------ navigation & root
+
         navigation = new VerticalNavigation();
-        navigation.addPrimary(Ids.build(UNDERTOW, DEPLOYMENT, SERVLET, Ids.ITEM), Names.SERVLET, pfIcon(""enterprise""),
-                servletSection);
+        navigation.addPrimary(Ids.build(UNDERTOW, DEPLOYMENT, SESSION, Ids.ITEM), Names.SESSIONS,
+                pfIcon(""users""), sessionSection);
+        navigation.addPrimary(Ids.build(UNDERTOW, DEPLOYMENT, SERVLET, Ids.ITEM), Names.SERVLET,
+                fontAwesome(""code""), servletSection);
         navigation.addPrimary(Ids.build(UNDERTOW, DEPLOYMENT, WEBSOCKET, Ids.ITEM), Names.WEBSOCKETS,
-                pfIcon(""replicator""),
-                websocketSection);
+                fontAwesome(""exchange""), websocketSection);
 
-        registerAttachable(navigation, servletsTable, servletsForm, websocketsTable, websocketsForm);
+        registerAttachable(navigation, sessionTable, servletsTable, servletsForm, websocketsTable, websocketsForm);
 
         initElement(row()
                 .add(column()
@@ -126,23 +169,48 @@ public DeploymentView(final MetadataRegistry metadataRegistry, final Resources r
     @SuppressWarnings(""ConstantConditions"")
     public void attach() {
         super.attach();
+        sessionTable.onSelectionChange(table -> {
+            if (table.hasSelection()) {
+                presenter.listSessionAttributes(table.selectedRow());
+            } else {
+                Elements.setVisible(attributesElement, false);
+            }
+        });
         servletsTable.bindForm(servletsForm);
         websocketsTable.bindForm(websocketsForm);
     }
 
     @Override
-    public void setPresenter(final DeploymentPresenter presenter) {
+    public void setPresenter(DeploymentPresenter presenter) {
         this.presenter = presenter;
     }
 
     @Override
-    public void updateServlets(final List<NamedNode> model) {
+    public void updateSessions(List<Session> sessions) {
+        sessionTable.update(sessions);
+        Elements.setVisible(attributesElement, sessionTable.hasSelection());
+    }
+
+    @Override
+    public void updateSessionAttributes(List<Property> attributes) {
+        Elements.removeChildrenFrom(attributesTableBody);
+        for (Property attribute : attributes) {
+            attributesTableBody.appendChild(tr()
+                    .add(td().textContent(attribute.getName()))
+                    .add(td().textContent(attribute.getValue().asString()))
+                    .asElement());
+        }
+        Elements.setVisible(attributesElement, !attributes.isEmpty());
+    }
+
+    @Override
+    public void updateServlets(List<NamedNode> model) {
         servletsForm.clear();
         servletsTable.update(model);
     }
 
     @Override
-    public void updateWebsockets(final List<NamedNode> model) {
+    public void updateWebsockets(List<NamedNode> model) {
         websocketsForm.clear();
         websocketsTable.update(model);
     }",2018-06-26T18:10:17Z,62
"@@ -0,0 +1,44 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.runtime.subsystem.undertow;
+
+import java.util.Date;
+
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.NamedNode;
+
+import static org.jboss.hal.dmr.ModelDescriptionConstants.CREATION_TIME;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.LAST_ACCESSED_TIME;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafeDate;
+
+class Session extends NamedNode {
+
+    Session(String sessionId, ModelNode modelNode) {
+        super(sessionId, modelNode);
+    }
+
+    String getSessionId() {
+        return getName();
+    }
+
+    Date getCreationTime() {
+        return failSafeDate(this, CREATION_TIME);
+    }
+
+    Date getLastAccessTime() {
+        return failSafeDate(this, LAST_ACCESSED_TIME);
+    }
+}",2018-06-26T18:10:17Z,106
"@@ -23,6 +23,7 @@
 import com.google.gwt.i18n.shared.DateTimeFormat;
 import com.google.gwt.i18n.shared.DateTimeFormat.PredefinedFormat;
 import org.jboss.hal.resources.Constants;
+import org.jboss.hal.resources.Names;
 
 public final class Format {
 
@@ -36,19 +37,19 @@ public final class Format {
 
 
     public static String timestamp(Date date) {
-        return TIMESTAMP.format(date);
+        return date != null ? TIMESTAMP.format(date) : Names.NOT_AVAILABLE;
     }
 
     public static String time(Date date) {
-        return TIME_MEDIUM.format(date);
+        return date != null ? TIME_MEDIUM.format(date) : Names.NOT_AVAILABLE;
     }
 
     public static String shortDateTime(Date date) {
-        return DATE_TIME_SHORT.format(date);
+        return date != null ? DATE_TIME_SHORT.format(date) : Names.NOT_AVAILABLE;
     }
 
     public static String mediumDateTime(Date date) {
-        return DATE_TIME_MEDIUM.format(date);
+        return date != null ? DATE_TIME_MEDIUM.format(date) : Names.NOT_AVAILABLE;
     }
 
     public static String humanReadableFileSize(long size) {",2018-06-26T18:10:17Z,107
"@@ -85,9 +85,7 @@ public void attach() {
         applySecurity();
     }
 
-    /**
-     * Shortcut for {@code super.select(data, NamedNode::getName)}
-     */
+    /** Shortcut for {@code super.select(data, NamedNode::getName)} */
     public void select(T data) {
         if (!identifierChecked) {
             checkIdentifier(data);
@@ -96,24 +94,21 @@ public void select(T data) {
     }
 
     @Override
-    public void select(final T data, final Function<T, String> identifier) {
+    public void select(T data, Function<T, String> identifier) {
         super.select(data, identifier);
         applySecurity();
     }
 
-    /**
-     * Shortcut for {@code super.update(data, NamedNode::getName)}
-     */
-    public void update(final Iterable<T> data) {
+    /** Shortcut for {@code super.update(data, NamedNode::getName)} */
+    public void update(Iterable<T> data) {
         if (!identifierChecked) {
             checkIdentifier(Iterables.isEmpty(data) ? null : data.iterator().next());
         }
         update(data, RESET, identifier);
     }
 
     @Override
-    public void update(final Iterable<T> data, final RefreshMode mode, final Function<T, String> identifier) {
-
+    public void update(Iterable<T> data, RefreshMode mode, Function<T, String> identifier) {
         super.update(data, mode, identifier);
         applySecurity();
     }
@@ -171,7 +166,7 @@ public static class Builder<T extends ModelNode> extends GenericOptionsBuilder<B
         private final ColumnFactory columnFactory;
 
         @JsIgnore
-        public Builder(@NonNls final String id, final Metadata metadata) {
+        public Builder(@NonNls String id, Metadata metadata) {
             this.id = id;
             this.metadata = metadata;
             this.columnFactory = new ColumnFactory();
@@ -213,18 +208,7 @@ protected Builder<T> that() {
             return this;
         }
 
-        @Override
-        protected void validate() {
-            super.validate();
-            if (!metadata.getDescription().hasDefined(ATTRIBUTES)) {
-                throw new IllegalStateException(
-                        ""No attributes found in resource description\n"" + metadata.getDescription());
-            }
-        }
-
-        /**
-         * Creates and returns the table.
-         */
+        /** Creates and returns the table. */
         @EsReturn(""Table"")
         public ModelNodeTable<T> build() {
             return new ModelNodeTable<>(this);
@@ -246,7 +230,7 @@ public ModelNodeTable<T> build() {
          */
         @JsMethod(name = ""add"")
         @EsReturn(""TableBuilder"")
-        public Builder<T> jsAdd(final String type,
+        public Builder<T> jsAdd(String type,
                 @EsParam(""AddressTemplate|string"") Object template,
                 @EsParam(""string[]"") String[] attributes,
                 @EsParam(""function(name: string, address: ResourceAddress)"") AddCallback callback) {",2018-06-26T18:10:17Z,108
"@@ -179,6 +179,7 @@ public interface ModelDescriptionConstants {
     String CRAWLER_SESSION_MANAGEMENT = ""crawler-session-management"";
     String CREATE = ""create"";
     String CREATE_TIME = ""create-time"";
+    String CREATION_TIME = ""creation-time"";
     String CREDENTIAL_REFERENCE = ""credential-reference"";
     String CREDENTIAL_STORE = ""credential-store"";
     String CURRENT_THREAD_COUNT = ""current-thread-count"";
@@ -310,6 +311,8 @@ public interface ModelDescriptionConstants {
     String FULL_REPLACE_DEPLOYMENT = ""full-replace-deployment"";
     String GENERATE_CERTIFICATE_SIGNING_REQUEST = ""generate-certificate-signing-request"";
     String GENERATE_KEY_PAIR = ""generate-key-pair"";
+    String GET_SESSION_CREATION_TIME = ""get-session-creation-time"";
+    String GET_SESSION_LAST_ACCESSED_TIME = ""get-session-last-accessed-time"";
     String GLOBAL_MODULES = ""global-modules"";
     String GROUP = ""group"";
     String GROUPS_ATTRIBUTE = ""groups-attribute"";
@@ -368,7 +371,7 @@ public interface ModelDescriptionConstants {
     String INSTANCE_ID = ""instance-id"";
     String INTERFACE = ""interface"";
     String INTERNAL = ""internal"";
-    String INVALIDATE_SESSION_OPERATION = ""invalidate-session"";
+    String INVALIDATE_SESSION = ""invalidate-session"";
     String INVALIDATION = ""invalidation"";
     String INVOCATIONS = ""invocations"";
     String IO = ""io"";
@@ -414,6 +417,7 @@ public interface ModelDescriptionConstants {
     String KILL = ""kill"";
     String KILL_SERVERS = ""kill-servers"";
     String LARGEST_THREAD_COUNT = ""largest-thread-count"";
+    String LAST_ACCESSED_TIME = ""last-accessed-time"";
     String LAST_CONNECTED = ""last-connected"";
     String LAST_UPDATED_TIME = ""last-updated-time"";
     String LAUNCH_TYPE = ""launch-type"";
@@ -428,6 +432,8 @@ public interface ModelDescriptionConstants {
     String LIST_CHANGES_OPERATION = ""list-changes"";
     String LIST_MESSAGES = ""list-messages"";
     String LIST_REMOVE_OPERATION = ""list-remove"";
+    String LIST_SESSION_ATTRIBUTES = ""list-session-attributes"";
+    String LIST_SESSIONS = ""list-sessions"";
     String LISTENER = ""listener"";
     String LIVE_ONLY = ""live-only"";
     String LOAD = ""load"";",2018-06-26T18:10:17Z,109
"@@ -110,7 +110,15 @@ public static Date failSafeDate(ModelNode modelNode, String path) {
         ModelNode attribute = failSafeGet(modelNode, path);
         if (attribute.isDefined()) {
             try {
-                return ISO_8601.parse(attribute.asString());
+                String date = attribute.asString();
+                if (date.indexOf('[') != -1 && date.endsWith(""]"")) {
+                    // Strip zone ID which comes from using
+                    // java.time.format.DateTimeFormatter.ISO_ZONED_DATE_TIME instead of
+                    // java.time.format.DateTimeFormatter.ISO_DATE_TIME
+                    // see https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_ZONED_DATE_TIME
+                    date = date.substring(0, date.indexOf('['));
+                }
+                return ISO_8601.parse(date);
             } catch (IllegalArgumentException ignore) { }
         }
         return null;",2018-06-26T18:10:17Z,110
"@@ -101,6 +101,8 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String copyToClipboard();
     String count();
     String counter();
+
+    String creationTime();
     String currentPage();
     String custom();
 
@@ -309,8 +311,11 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String kill();
 
     String largest();
-    String lastPage();
+
+    String lastAccessedTime();
     String lastModified();
+
+    String lastPage();
     String load();
     String loading();
     String loadingPleaseWait();
@@ -493,8 +498,6 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String serverUrlCustom();
     String serverUrlManagementModel();
     String sessionTime();
-    String sessions();
-    String sessionsCreated();
     String sessionsAvgAliveTime();
     String sessionsMaxAliveTime();
     String setIdentityPasswordTitle();",2018-06-26T18:10:17Z,100
"@@ -635,6 +635,7 @@ public interface Ids {
     String SERVER_STATUS_SYSTEM_PROPERTIES_ITEM = ""server-runtime-system-properties-item"";
     String SERVER_URL_FORM = ""server-url-form"";
     String SERVER_URL_STORAGE = ""hal-local-storage-server-url"";
+    String SESSION = ""session"";
     String SETTINGS_FORM = ""settings-form"";
     String SOCKET_BINDING_GROUP = ""socket-binding-group"";
     String SOCKET_BINDING_GROUP_ADD = ""socket-binding-group-add"";",2018-06-26T18:10:17Z,111
"@@ -253,11 +253,9 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     String invalidJNDIName();
     String invalidLength();
     String invalidRange(long value, long min, long max);
-    String invalidateSessionTitle();
     SafeHtml invalidateSessionQuestion();
-    SafeHtml invalidateSessionSuccess(String sessionId);
-    SafeHtml invalidateSessionError(String sessionId, String cause);
-    SafeHtml invalidateSessionNotExist(String sessionId);
+    SafeHtml invalidateSessionSuccess();
+    SafeHtml invalidateSessionError(String cause);
 
     String jdbcDriverColumnFilterDescription();
     SafeHtml jdbcDriverDeploymentHint();
@@ -318,6 +316,7 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
 
     SafeHtml nearCacheUndefined();
     SafeHtml newContentSuccess(String deployment, String file);
+
     String noBootErrors();
     SafeHtml noChanges();
     SafeHtml noContent();",2018-06-26T18:10:17Z,94
"@@ -308,6 +308,7 @@ public interface Names {
     String SERVER_GROUPS = ""Server Groups"";
     String SERVLET = ""Servlet"";
     String SERVLET_CONTAINER = ""Servlet Container"";
+    String SESSION_ID = ""Session ID"";
     String SESSIONS = ""Sessions"";
     String SHARED_STORE_COLOCATED = ""Shared Store Colocated"";
     String SHARED_STORE_MASTER = ""Shared Store Master"";",2018-06-26T18:10:17Z,112
"@@ -78,6 +78,7 @@ copy=Copy
 copyToClipboard=Copy to clipboard
 count=Count
 counter=Counter
+creationTime=Creation Time
 currentPage=Current Page
 custom=Custom
 data=Data
@@ -276,8 +277,9 @@ jndiNames=JNDI Names
 jndiTree=JNDI Tree
 kill=Kill
 largest=Largest
-lastPage=Last Page
+lastAccessedTime=Last Accessed Time
 lastModified=Last Modified
+lastPage=Last Page
 load=Load
 loading=Loading
 loadingPleaseWait=Loading, please wait...
@@ -451,10 +453,8 @@ serverGroupScopedRole=Server Group Scoped Role
 serverName=Server Name
 serverUrlCustom=Custom URL specified by the user. Use the server drop down to change or reset the URL.
 serverUrlManagementModel=URL read from the management model. If this does not reflect the public URL, you can specify a custom URL using the server drop down.
-sessions=Sessions
 sessionsAvgAliveTime=Session Average Alive Time
 sessionsMaxAliveTime=Session Maximum Alive Time
-sessionsCreated=Sessions Created
 sessionTime=Session Time
 setIdentityPasswordTitle=Set password for an identity
 setSecret=Set secret",2018-06-26T18:10:17Z,100
"@@ -214,11 +214,9 @@ includeAllHelpText=Configure if all authenticated users should be automatically
 initError=Failed to initialize Key Manager <strong>{0}</strong>. Cause: {1}.
 initSuccess=The Key Manager <strong>{0}</strong> was successfully initialized.
 invalidLength=Invalid length, it must be exactly 16 characters.
-invalidateSessionTitle=Invalidate session
-invalidateSessionQuestion=Invalidates a session related to a web application.
-invalidateSessionSuccess=Session <strong>{0}</strong> successfully invalidated.
-invalidateSessionError=Session <strong>{0}</strong> was not invalidated. Cause: {1}
-invalidateSessionNotExist=Session <strong>{0}</strong> doesn''t exist.
+invalidateSessionQuestion=Do you really want to invalidate the selected session?
+invalidateSessionSuccess=Session successfully invalidated.
+invalidateSessionError=Session was not invalidated. Cause: {0}
 invalidExtensionJson=The URL could not be parsed as JSON. Please make sure the extension metadata contains valid JSON.
 invalidExtensionMetadata=The extension metadata is missing required attributes. See <a target=""_blank"" href=""{0}"">{0}</a> for more details.
 invalidFormat=Invalid format",2018-06-26T18:10:17Z,94
"@@ -63,11 +63,9 @@ identityPasswordScramDigest=Uma senha do tipo scram digest.
 identityPasswordSimpleDigest=Uma senha do tipo simple digest.
 initError=Falha ao inicializar o Key Manager <strong>{0}</strong>. Causa: {1}.
 initSuccess=O Key Manager <strong>{0}</strong> foi inicializado com sucesso.
-invalidateSessionTitle=Invalidar sess\u00e3o
 invalidateSessionQuestion=Invalida uma sess\u00e3o relacionada a uma aplica\u00e7\u00e3o web.
-invalidateSessionSuccess=Sess\u00e3o <strong>{0}</strong> invalidada com sucesso.
-invalidateSessionError=Sess\u00e3o <strong>{0}</strong> n\u00e3o foi invalidaa. Causa: {1}
-invalidateSessionNotExist=Sess\u00e3o <strong>{0}</strong> n\u00e3o existe.
+invalidateSessionSuccess=Sess\u00e3o invalidada com sucesso.
+invalidateSessionError=Sess\u00e3o n\u00e3o foi invalidaa. Causa: {0}
 importCertificateError=Falha ao importar o certificado com alias <strong>{0}</strong> do caminho <strong>{1}</strong> em <strong>{2}</strong>. Causa: {3}.
 importCertificateSuccess=O certificado com alias <strong>{0}</strong> foi importado com sucesso do caminho <strong>{1}</strong> em <strong>{2}</strong>.
 jdbcDriverColumnFilterDescription=Filtrar por: Nome do driver ou tipo de instala\u00e7\u00e3o",2018-06-26T18:10:17Z,94
"@@ -316,7 +316,6 @@ public Completable call(FlowContext context) {
                             READ_CHILDREN_RESOURCES_OPERATION)
                             .param(CHILD_TYPE, DEPLOYMENT)
                             .param(INCLUDE_RUNTIME, true)
-                            .param(RECURSIVE, true)
                             .build();
                     completable = dispatcher.execute(operation).doOnSuccess(result -> {
                         Map<String, Deployment> deploymentsByName = result.asPropertyList().stream()",2017-11-07T01:56:08Z,86
"@@ -47,7 +47,10 @@ public static ResourceAddress from(String address) {
         }
         String safeAddress = address.startsWith(""/"") ? address.substring(1) : address;
         ResourceAddress ra = new ResourceAddress();
-        Map<String, String> segments = Splitter.on('/').withKeyValueSeparator('=').split(safeAddress);
+        Map<String, String> segments = Splitter.on('/')
+                .omitEmptyStrings()
+                .withKeyValueSeparator('=')
+                .split(safeAddress);
         for (Map.Entry<String, String> entry : segments.entrySet()) {
             ra.add(entry.getKey(), entry.getValue());
         }",2017-11-07T01:56:08Z,17
"@@ -16,6 +16,7 @@
 package org.jboss.hal.core.modelbrowser;
 
 import java.util.List;
+import java.util.Optional;
 
 import com.google.gwt.safehtml.shared.SafeHtmlBuilder;
 import elemental2.dom.HTMLElement;
@@ -30,10 +31,17 @@
 import org.jboss.hal.ballroom.table.Scope;
 import org.jboss.hal.ballroom.table.Table;
 import org.jboss.hal.ballroom.tree.Node;
+import org.jboss.hal.config.Environment;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Operation;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.flow.Progress;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.processing.MetadataProcessor;
+import org.jboss.hal.meta.security.AuthorisationDecision;
+import org.jboss.hal.meta.security.Constraint;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
@@ -43,31 +51,37 @@
 
 import static java.util.stream.Collectors.toList;
 import static org.jboss.gwt.elemento.core.Elements.h;
+import static org.jboss.hal.core.modelbrowser.ModelBrowser.asGenericTemplate;
 import static org.jboss.hal.core.modelbrowser.ReadChildren.uniqueId;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.ADD;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.CHILD_TYPE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.READ_CHILDREN_NAMES_OPERATION;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.REMOVE;
 
 /** Panel which holds the children of the selected resource. */
 class ChildrenPanel implements HasElements, Attachable {
 
     @NonNls private static final Logger logger = LoggerFactory.getLogger(ChildrenPanel.class);
 
+    private final Environment environment;
     private final Dispatcher dispatcher;
+    private final MetadataProcessor metadataProcessor;
     private final ElementsBuilder builder;
     private final HTMLElement header;
     private final Table<String> table;
     private Node<Context> parent;
 
-    ChildrenPanel(ModelBrowser modelBrowser, Dispatcher dispatcher, Resources resources) {
+    ChildrenPanel(ModelBrowser modelBrowser, Environment environment, Dispatcher dispatcher,
+            MetadataProcessor metadataProcessor, Resources resources) {
+        this.environment = environment;
         this.dispatcher = dispatcher;
+        this.metadataProcessor = metadataProcessor;
 
-        //noinspection HardCodedStringLiteral
         Options<String> options = new OptionsBuilder<String>()
                 .column(""resource"", Names.RESOURCE, (cell, type, row, meta) -> row)
                 .column(new InlineAction<>(resources.constants().view(), row -> modelBrowser.tree.openNode(parent.id,
                         () -> modelBrowser.select(uniqueId(parent, row), false))))
                 .button(resources.constants().add(), table -> modelBrowser.add(parent, table.getRows()))
-
                 .button(resources.constants().remove(), table -> {
                             ResourceAddress fq = parent.data.getAddress()
                                     .getParent()
@@ -117,6 +131,25 @@ void update(Node<Context> node, ResourceAddress address) {
             if (node.data.hasSingletons()) {
                 logger.debug(""Read {} / {} singletons"", names.size(), node.data.getSingletons().size());
             }
+
+            AddressTemplate template = asGenericTemplate(node, address);
+            metadataProcessor.lookup(template, Progress.NOOP,
+                    new MetadataProcessor.MetadataCallback() {
+                        @Override
+                        public void onMetadata(Metadata metadata) {
+                            table.enableButton(0, AuthorisationDecision.from(environment,
+                                    constraint -> Optional.of(metadata.getSecurityContext()))
+                                    .isAllowed(Constraint.executable(template, ADD)));
+                            table.enableButton(1, AuthorisationDecision.from(environment,
+                                    constraint -> Optional.of(metadata.getSecurityContext()))
+                                    .isAllowed(Constraint.executable(template, REMOVE)));
+                        }
+
+                        @Override
+                        public void onError(Throwable error) {
+                            logger.warn(""Unable to enable / disable table buttons for {}"", address);
+                        }
+                    });
         });
     }
 ",2018-02-27T15:44:08Z,113
"@@ -37,6 +37,7 @@
 import org.jboss.hal.ballroom.tree.SelectionContext;
 import org.jboss.hal.ballroom.tree.Tree;
 import org.jboss.hal.ballroom.wizard.Wizard;
+import org.jboss.hal.config.Environment;
 import org.jboss.hal.core.CrudOperations;
 import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
 import org.jboss.hal.core.mbui.dialog.NameItem;
@@ -126,6 +127,7 @@ public ModelBrowser(CrudOperations crud,
             MetadataProcessor metadataProcessor,
             @Footer Provider<Progress> progress,
             Dispatcher dispatcher,
+            Environment environment,
             EventBus eventBus,
             Resources resources) {
         this.crud = crud;
@@ -165,7 +167,7 @@ public ModelBrowser(CrudOperations crud,
         }
         resourcePanel.hide();
 
-        childrenPanel = new ChildrenPanel(this, dispatcher, resources);
+        childrenPanel = new ChildrenPanel(this, environment, dispatcher, metadataProcessor, resources);
         for (HTMLElement element : childrenPanel.asElements()) {
             content.appendChild(element);
         }
@@ -281,7 +283,7 @@ public void onSuccess(FlowContext context) {
         }
     }
 
-    private void refresh(final Node<Context> node) {
+    private void refresh(Node<Context> node) {
         if (node != null) {
             updateNode(node);
             tree.refreshNode(node.id);
@@ -340,14 +342,14 @@ private void showResourceView(Node<Context> node, ResourceAddress address) {
         AddressTemplate template = asGenericTemplate(parent, address);
         metadataProcessor.lookup(template, progress.get(), new SuccessfulMetadataCallback(eventBus, resources) {
             @Override
-            public void onMetadata(final Metadata metadata) {
+            public void onMetadata(Metadata metadata) {
                 resourcePanel.update(node, node.data.getAddress(), metadata);
                 resourcePanel.show();
             }
         });
     }
 
-    void add(final Node<Context> parent, final List<String> children) {
+    void add(Node<Context> parent, List<String> children) {
         if (parent.data.hasSingletons()) {
             if (parent.data.getSingletons().size() == children.size()) {
                 MessageEvent.fire(eventBus, Message.warning(resources.messages().allSingletonsExist()));
@@ -453,7 +455,7 @@ void reset(ResourceAddress address, Form<ModelNode> form, Metadata metadata) {
         crud.reset(address.lastName(), address.lastValue(), address, form, metadata,
                 new FinishReset<ModelNode>(form) {
                     @Override
-                    public void afterReset(final Form<ModelNode> form) {
+                    public void afterReset(Form<ModelNode> form) {
                         refresh(tree.getSelected());
                     }
                 });
@@ -469,7 +471,7 @@ public void afterReset(final Form<ModelNode> form) {
      *
      * @param surroundingHeight the sum of the height of all surrounding elements
      */
-    public void setSurroundingHeight(final int surroundingHeight) {
+    public void setSurroundingHeight(int surroundingHeight) {
         this.surroundingHeight = surroundingHeight;
         adjustHeight();
     }
@@ -518,7 +520,7 @@ public void setRoot(ResourceAddress root, boolean updateBreadcrumb) {
                 });
     }
 
-    public void select(final String id, final boolean closeSelected) {
+    public void select(String id, boolean closeSelected) {
         tree.selectNode(id, closeSelected);
     }
 ",2018-02-27T15:44:08Z,114
"@@ -54,8 +54,8 @@ public class AuthorisationDecision {
 
     // ------------------------------------------------------ factory methods
 
-    public static AuthorisationDecision from(final Environment environment,
-            final SecurityContextRegistry securityContextRegistry) {
+    public static AuthorisationDecision from(Environment environment,
+            SecurityContextRegistry securityContextRegistry) {
         return new AuthorisationDecision(environment, constraint -> {
             if (securityContextRegistry.contains(constraint.getTemplate())) {
                 return Optional.of(securityContextRegistry.lookup(constraint.getTemplate()));
@@ -64,11 +64,11 @@ public static AuthorisationDecision from(final Environment environment,
         });
     }
 
-    public static AuthorisationDecision from(final Environment environment, final SecurityContext securityContext) {
+    public static AuthorisationDecision from(Environment environment, SecurityContext securityContext) {
         return new AuthorisationDecision(environment, constraint -> Optional.of(securityContext));
     }
 
-    public static AuthorisationDecision from(final Environment environment, final SecurityContextResolver resolver) {
+    public static AuthorisationDecision from(Environment environment, SecurityContextResolver resolver) {
         return new AuthorisationDecision(environment, resolver);
     }
 
@@ -80,7 +80,7 @@ public static AuthorisationDecision from(final Environment environment, final Se
     private final Environment environment;
     private final SecurityContextResolver resolver;
 
-    private AuthorisationDecision(final Environment environment, final SecurityContextResolver resolver) {
+    private AuthorisationDecision(Environment environment, SecurityContextResolver resolver) {
         this.environment = environment;
         this.resolver = resolver;
     }",2018-02-27T15:44:08Z,115
"@@ -15,6 +15,7 @@
  */
 package org.jboss.hal.client.configuration.subsystem.elytron;
 
+import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.function.Consumer;
@@ -32,7 +33,9 @@
 import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.ballroom.form.Form.FinishRemove;
 import org.jboss.hal.ballroom.form.Form.FinishReset;
+import org.jboss.hal.ballroom.form.FormItem;
 import org.jboss.hal.ballroom.form.TextBoxItem;
+import org.jboss.hal.ballroom.form.ValidationResult;
 import org.jboss.hal.client.configuration.PathsAutoComplete;
 import org.jboss.hal.core.ComplexAttributeOperations;
 import org.jboss.hal.core.CrudOperations;
@@ -70,6 +73,7 @@
 public class OtherSettingsPresenter extends MbuiPresenter<OtherSettingsPresenter.MyView, OtherSettingsPresenter.MyProxy>
         implements SupportsExpertMode {
 
+    private static final List<String> FILE_BASED_CS = asList(""JCEKS"", ""JKS"", ""PKCS12"");
     private final CrudOperations crud;
     private final ComplexAttributeOperations ca;
     private final FinderPathFactory finderPathFactory;
@@ -197,19 +201,36 @@ void reload(String resource, Consumer<List<NamedNode>> callback) {
 
     void addCredentialStore() {
         Metadata metadata = metadataRegistry.lookup(CREDENTIAL_STORE_TEMPLATE);
+        SafeHtml typeHelp = SafeHtmlUtils.fromString(
+                metadata.getDescription().get(ATTRIBUTES).get(TYPE).get(DESCRIPTION).asString());
         Metadata crMetadata = metadata.forComplexAttribute(CREDENTIAL_REFERENCE, true);
         crMetadata.copyComplexAttributeAttributes(asList(STORE, ALIAS, TYPE, CLEAR_TEXT), metadata);
+        TextBoxItem typeItem = new TextBoxItem(""type-"", resources.constants().type());
 
         String id = Ids.build(Ids.ELYTRON_CREDENTIAL_STORE, Ids.ADD);
         NameItem nameItem = new NameItem();
         ModelNodeForm<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata)
                 .addOnly()
                 .unboundFormItem(nameItem, 0)
-                .include(CREATE, RELATIVE_TO, STORE, ALIAS, TYPE, CLEAR_TEXT)
+                .include(CREATE, LOCATION, RELATIVE_TO, STORE, ALIAS, TYPE, CLEAR_TEXT)
+                .unboundFormItem(typeItem, 3, typeHelp)
                 .unsorted()
                 .build();
         form.getFormItem(RELATIVE_TO).registerSuggestHandler(new PathsAutoComplete());
         form.addFormValidation(new RequireAtLeastOneAttributeValidation<>(asList(STORE, CLEAR_TEXT), resources));
+        form.addFormValidation(form1 -> {
+            ValidationResult result = ValidationResult.OK;
+            String typeValue = typeItem.getValue();
+            FormItem<String> locationAttr = form1.getFormItem(LOCATION);
+            boolean invalidLocation = locationAttr.isEmpty() &&
+                    (typeItem.isEmpty() || Collections.binarySearch(FILE_BASED_CS, typeValue) > -1);
+            if (invalidLocation) {
+                form1.getFormItem(LOCATION).showError(resources.constants().requiredField());
+                result = ValidationResult.invalid(resources.messages().locationRequired());
+            }
+            return result;
+        });
+
 
         new AddResourceDialog(resources.messages().addResourceTitle(Names.CREDENTIAL_STORE), form, (name, model) -> {
             if (model != null) {
@@ -218,6 +239,9 @@ void addCredentialStore() {
                 move(model, TYPE, CREDENTIAL_REFERENCE + ""/"" + TYPE);
                 move(model, CLEAR_TEXT, CREDENTIAL_REFERENCE + ""/"" + CLEAR_TEXT);
             }
+            if (!typeItem.isEmpty()) {
+                model.get(TYPE).set(typeItem.getValue());
+            }
             ResourceAddress address = CREDENTIAL_STORE_TEMPLATE.resolve(statementContext, nameItem.getValue());
             crud.add(Names.CREDENTIAL_STORE, name, address, model, (n, a) ->
                     reload(CREDENTIAL_STORE, nodes ->",2018-04-13T21:12:43Z,116
"@@ -233,6 +233,7 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml lastOperationFailed();
     SafeHtml listHint();
     SafeHtml loadContentError();
+    String locationRequired();
     SafeHtml logFileError(String name);
     String logfileColumnFilterDescription();
     String logFilePreview(int lines);",2018-04-13T21:12:43Z,94
"@@ -201,6 +201,7 @@ lastOperationException=Unable to execute last operation
 lastOperationFailed=Last operation failed
 listHint=Press <abbr class=""key"" title=""RETURN"">&crarr;</abbr> to add new items and <abbr class=""key"" title=""BACKSPACE"">&#x232B</abbr> to remove them.
 loadContentError=Unable to read content and deployment information.
+locationRequired=Location attribute is required when type is empty or type is JCEKS, JKS, PKCS12.
 logFileError=Error loading log file <strong>{0}</strong>.
 logfileColumnFilterDescription=Filter by: file name or last modified date
 logFilePreview=The last {0} lines of the log file.",2018-04-13T21:12:43Z,94
"@@ -1,6 +1,6 @@
 {
   ""name"": ""org.jboss.hal.npm"",
-  ""version"": ""3.3.0"",
+  ""version"": ""3.3.1"",
   ""lockfileVersion"": 1,
   ""requires"": true,
   ""dependencies"": {",2021-01-13T11:50:39Z,117
"@@ -15,17 +15,27 @@
  */
 package org.jboss.hal.client.runtime.subsystem.ejb;
 
+import java.util.ArrayList;
+import java.util.Date;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
+import java.util.stream.Collectors;
 
 import javax.inject.Inject;
 
 import elemental2.dom.HTMLElement;
 import org.jboss.gwt.elemento.core.Elements;
-import org.jboss.gwt.elemento.core.IsElement;
+import org.jboss.hal.ballroom.Format;
+import org.jboss.hal.ballroom.Tabs;
 import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.table.Table;
 import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.core.mbui.table.ModelNodeTable;
 import org.jboss.hal.core.mvp.HalViewImpl;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.ModelNodeHelper;
+import org.jboss.hal.dmr.Property;
 import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.resources.CSS;
@@ -36,12 +46,22 @@
 import static org.jboss.hal.ballroom.LayoutBuilder.column;
 import static org.jboss.hal.ballroom.LayoutBuilder.row;
 import static org.jboss.hal.client.runtime.subsystem.ejb.AddressTemplates.ejbDeploymentTemplate;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.ATTRIBUTES;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.NAME;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.NEXT_TIMEOUT;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.TIMERS;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.TIME_REMAINING;
 
 public class EjbView extends HalViewImpl implements EjbPresenter.MyView {
 
     private final HTMLElement header;
     private final HTMLElement lead;
     private final Map<EjbNode.Type, Form<EjbNode>> forms;
+    private final Table<ModelNode> timersTable;
+    private final Table<ModelNode> methodsTable;
+    private final Table<ModelNode> removeMethodsTable;
+    private final Form<ModelNode> scheduleForm;
+    private final Tabs tabs;
 
     @Inject
     public EjbView(MetadataRegistry metadataRegistry) {
@@ -52,11 +72,52 @@ public EjbView(MetadataRegistry metadataRegistry) {
             forms.put(type, form);
         }
 
+        /**
+         *  ""methods"" is present in every bean type
+         *  ""timers"" is present in every type except STATEFUL
+         *  ""remove-methods"" is present only in STATEFUL
+         *  the metadata are the same regardless of type
+         */
+        Metadata methodsMetadata = metadataRegistry.lookup(ejbDeploymentTemplate(EjbNode.Type.MDB)).forComplexAttribute(""methods"");
+        Metadata removeMethodsMetadata = metadataRegistry.lookup(ejbDeploymentTemplate(EjbNode.Type.STATEFUL)).forComplexAttribute(""remove-methods"");
+        Metadata timersMetadata = metadataRegistry.lookup(ejbDeploymentTemplate(EjbNode.Type.MDB)).forComplexAttribute(""timers"");
+        Metadata scheduleMetadata = timersMetadata.forComplexAttribute(""schedule"");
+
+        // methods come in a property list, we need to add an identifier to the table
+        methodsMetadata.getDescription().get(ATTRIBUTES).get(NAME);
+
+        methodsTable = new ModelNodeTable.Builder<>(""ejb-bean-methods-table"", methodsMetadata)
+                .columns(""name"",""execution-time"", ""invocations"", ""wait-time"")
+                .build();
+
+        removeMethodsTable = new ModelNodeTable.Builder<>(""ejb-bean-remove-methods-table"", removeMethodsMetadata)
+                .columns(""bean-method"", ""retain-if-exception"")
+                .build();
+
+        timersTable = new ModelNodeTable.Builder<>(""ejb-bean-timers-table"", timersMetadata)
+                .columns(""info"", ""time-remaining"", ""next-timeout"", ""calendar-timer"", ""persistent"")
+                .build();
+
+        HTMLElement scheduleHeader = h(4).element();
+        scheduleHeader.textContent = ""Schedule"";
+
+        scheduleForm = new ModelNodeForm.Builder<>(""host-system-property-form"", scheduleMetadata)
+                .readOnly()
+                .build();
+
+        tabs = new Tabs(Ids.build(""ejb"", Ids.TAB_CONTAINER));
+        tabs.add(Ids.build(""ejb-attributes"", Ids.TAB), ""Attributes"", forms.values().stream().map(Form::element).collect(Collectors.toList()));
+        tabs.add(Ids.build(""ejb-methods"", Ids.TAB), ""Methods"", methodsTable.element());
+        tabs.add(Ids.build(""ejb-remove-methods"", Ids.TAB), ""Remove Methods"", removeMethodsTable.element());
+        tabs.add(Ids.build(""ejb-timers"", Ids.TAB), ""Timers"", timersTable.element(), scheduleHeader, scheduleForm.element());
+
+        registerAttachable(methodsTable, removeMethodsTable, timersTable, scheduleForm);
+
         initElement(row()
                 .add(column()
                         .add(header = h(1).element())
                         .add(lead = p().css(CSS.lead).element())
-                        .addAll(forms.values().toArray(new IsElement[0]))));
+                        .add(tabs)));
     }
 
     private Form<EjbNode> ejbForm(EjbNode.Type type, MetadataRegistry metadataRegistry) {
@@ -74,5 +135,43 @@ public void update(EjbNode ejb) {
         lead.textContent = ejb.type.type;
         forms.get(ejb.type).view(ejb);
         forms.forEach((type, form) -> Elements.setVisible(form.element(), type == ejb.type));
+
+        timersTable.update(formatTimers(ModelNodeHelper.failSafeList(ejb, TIMERS)));
+        methodsTable.update(flattenMethods(ModelNodeHelper.failSafePropertyList(ejb, ""methods"")));
+        removeMethodsTable.update(ModelNodeHelper.failSafeList(ejb, ""remove-methods""));
+    }
+
+    @Override
+    public void attach() {
+        super.attach();
+
+        timersTable.onSelectionChange(table -> {
+            if (table.hasSelection()) {
+                scheduleForm.view(table.selectedRow().get(""schedule""));
+            } else {
+                scheduleForm.clear();
+            }
+        });
+    }
+
+    private List<ModelNode> formatTimers(List<ModelNode> timers) {
+        for (ModelNode timer : timers) {
+            String nextTimeout = Format.mediumDateTime(new Date(timer.get(NEXT_TIMEOUT).asLong()));
+            String timeRemaining = Format.humanReadableDuration(timer.get(TIME_REMAINING).asLong());
+            timer.get(NEXT_TIMEOUT).set(nextTimeout);
+            timer.get(TIME_REMAINING).set(timeRemaining);
+        }
+        return timers;
+    }
+
+    // add method name to the model
+    private List<ModelNode> flattenMethods(List<Property> methods) {
+        List<ModelNode> flatMethods = new ArrayList<>();
+        for (Property method : methods) {
+            ModelNode flatMethod = method.getValue();
+            flatMethod.get(NAME).set(method.getName());
+            flatMethods.add(flatMethod);
+        }
+        return flatMethods;
     }
 }",2020-06-22T16:05:14Z,118
"@@ -176,6 +176,8 @@
 import org.jboss.hal.client.runtime.subsystem.logging.Templated_LogFileView;
 import org.jboss.hal.client.runtime.subsystem.messaging.JmsQueuePresenter;
 import org.jboss.hal.client.runtime.subsystem.messaging.JmsQueueView;
+import org.jboss.hal.client.runtime.subsystem.microprofile.health.MicroProfileHealthPresenter;
+import org.jboss.hal.client.runtime.subsystem.microprofile.health.MicroProfileHealthView;
 import org.jboss.hal.client.skeleton.FooterPresenter;
 import org.jboss.hal.client.skeleton.HeaderPresenter;
 import org.jboss.hal.client.skeleton.Templated_FooterView;
@@ -505,6 +507,11 @@ protected void configure() {
                 Mbui_MicroProfileConfigView.class,
                 MicroProfileConfigPresenter.MyProxy.class);
 
+        bindPresenter(MicroProfileHealthPresenter.class,
+                MicroProfileHealthPresenter.MyView.class,
+                MicroProfileHealthView.class,
+                MicroProfileHealthPresenter.MyProxy.class);
+
         bindPresenter(ModclusterPresenter.class,
                 ModclusterPresenter.MyView.class,
                 Mbui_ModclusterView.class,",2018-11-06T17:46:56Z,44
"@@ -28,6 +28,7 @@
 import org.jboss.hal.client.runtime.server.ServerRuntimePreview;
 import org.jboss.hal.client.runtime.subsystem.batch.BatchPreview;
 import org.jboss.hal.client.runtime.subsystem.ejb.ThreadPoolPreview;
+import org.jboss.hal.client.runtime.subsystem.microprofile.health.MicroprofileHealthPreview;
 import org.jboss.hal.client.runtime.subsystem.transaction.TransactionsPreview;
 import org.jboss.hal.client.runtime.subsystem.undertow.UndertowPreview;
 import org.jboss.hal.client.runtime.subsystem.webservice.WebservicesPreview;
@@ -111,6 +112,9 @@ public SubsystemColumn(Finder finder,
                 if (!ManagementModel.supportsListLogFiles(serverVersion)) {
                     existingSubsystems.remove(LOGGING);
                 }
+                if (existingSubsystems.containsKey(MICROPROFILE_HEALTH_SMALLRYE)) {
+                    customPreviews.put(MICROPROFILE_HEALTH_SMALLRYE, new MicroprofileHealthPreview(dispatcher, statementContext, resources));
+                }
 
                 // add server runtime as first item
                 List<SubsystemMetadata> items = new ArrayList<>();",2018-11-06T17:46:56Z,119
"@@ -0,0 +1,24 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.runtime.subsystem.microprofile.health;
+
+import org.jboss.hal.meta.AddressTemplate;
+
+public interface AddressTemplates {
+
+    String MICROPROFILE_HEALTH_ADDRESS = ""/subsystem=microprofile-health-smallrye"";
+    AddressTemplate MICROPROFILE_HEALTH_TEMPLATE = AddressTemplate.of(MICROPROFILE_HEALTH_ADDRESS);
+}",2018-11-06T17:46:56Z,120
"@@ -0,0 +1,25 @@
+/*
+ * Copyright 2015-2018 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.runtime.subsystem.microprofile.health;
+
+import com.google.gwt.resources.client.ClientBundle;
+import com.google.gwt.resources.client.TextResource;
+
+public interface MicroProfileHealthCheckResource extends ClientBundle {
+
+    @Source(""microprofile-health-checks.base64"")
+    TextResource checksOperationDescription();
+}",2018-11-06T17:46:56Z,121
"@@ -0,0 +1,115 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.runtime.subsystem.microprofile.health;
+
+import javax.inject.Inject;
+
+import com.google.web.bindery.event.shared.EventBus;
+import com.gwtplatform.mvp.client.annotations.NameToken;
+import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
+import com.gwtplatform.mvp.client.proxy.ProxyPlace;
+import org.jboss.hal.core.finder.Finder;
+import org.jboss.hal.core.finder.FinderPath;
+import org.jboss.hal.core.finder.FinderPathFactory;
+import org.jboss.hal.core.mvp.ApplicationFinderPresenter;
+import org.jboss.hal.core.mvp.HalView;
+import org.jboss.hal.core.mvp.HasPresenter;
+import org.jboss.hal.core.mvp.SupportsExpertMode;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.meta.token.NameTokens;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Requires;
+
+import static org.jboss.hal.client.runtime.subsystem.microprofile.health.AddressTemplates.MICROPROFILE_HEALTH_ADDRESS;
+import static org.jboss.hal.client.runtime.subsystem.microprofile.health.AddressTemplates.MICROPROFILE_HEALTH_TEMPLATE;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.CHECK;
+import static org.jboss.hal.resources.Ids.MICROPROFILE_HEALTH;
+
+public class MicroProfileHealthPresenter
+        extends ApplicationFinderPresenter<MicroProfileHealthPresenter.MyView, MicroProfileHealthPresenter.MyProxy>
+        implements SupportsExpertMode {
+
+    private final Dispatcher dispatcher;
+    private final FinderPathFactory finderPathFactory;
+    private final StatementContext statementContext;
+    private final Resources resources;
+
+    @Inject
+    public MicroProfileHealthPresenter(
+            EventBus eventBus,
+            MyView view,
+            MyProxy myProxy,
+            Finder finder,
+            Dispatcher dispatcher,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext,
+            Resources resources) {
+        super(eventBus, view, myProxy, finder);
+        this.dispatcher = dispatcher;
+        this.finderPathFactory = finderPathFactory;
+        this.statementContext = statementContext;
+        this.resources = resources;
+    }
+
+    @Override
+    protected void onBind() {
+        super.onBind();
+        getView().setPresenter(this);
+    }
+
+    @Override
+    public ResourceAddress resourceAddress() {
+        return MICROPROFILE_HEALTH_TEMPLATE.resolve(statementContext);
+    }
+
+    @Override
+    public FinderPath finderPath() {
+        return finderPathFactory.runtimeServerPath()
+                .append(Ids.RUNTIME_SUBSYSTEM, MICROPROFILE_HEALTH,
+                        resources.constants().monitor(), Names.MICROPROFILE_HEALTH);
+    }
+
+    @Override
+    protected void reload() {
+        ResourceAddress address = MICROPROFILE_HEALTH_TEMPLATE.resolve(statementContext);
+        Operation operation = new Operation.Builder(address, CHECK)
+                .build();
+        dispatcher.execute(operation, result -> getView().update(result));
+    }
+
+    StatementContext getStatementContext() {
+        return statementContext;
+    }
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @Requires(MICROPROFILE_HEALTH_ADDRESS)
+    @NameToken(NameTokens.MICROPROFILE_HEALTH)
+    public interface MyProxy extends ProxyPlace<MicroProfileHealthPresenter> {
+    }
+
+    public interface MyView extends HalView, HasPresenter<MicroProfileHealthPresenter> {
+        void update(ModelNode model);
+    }
+    // @formatter:on
+}",2018-11-06T17:46:56Z,122
"@@ -0,0 +1,110 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.runtime.subsystem.microprofile.health;
+
+import javax.inject.Inject;
+
+import elemental2.dom.HTMLElement;
+import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.hal.ballroom.Alert;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.table.Table;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.core.mbui.table.ModelNodeTable;
+import org.jboss.hal.core.mvp.HalViewImpl;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.resources.Icons;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
+
+import static org.jboss.gwt.elemento.core.Elements.h;
+import static org.jboss.gwt.elemento.core.Elements.p;
+import static org.jboss.gwt.elemento.core.Elements.section;
+import static org.jboss.hal.ballroom.LayoutBuilder.column;
+import static org.jboss.hal.ballroom.LayoutBuilder.row;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.resources.Ids.FORM;
+import static org.jboss.hal.resources.Ids.MICROPROFILE_HEALTH;
+import static org.jboss.hal.resources.Ids.TABLE;
+
+public class MicroProfileHealthView extends HalViewImpl implements MicroProfileHealthPresenter.MyView {
+
+    private final Table<ModelNode> checkTable;
+    private final Form<ModelNode> checkForm;
+    private MicroProfileHealthPresenter presenter;
+    private Alert outcomeUp;
+    private Alert outcomeDown;
+
+    @Inject
+    public MicroProfileHealthView(Resources resources, MicroProfileHealthCheckResource mpCheckResource) {
+
+        this.outcomeUp = new Alert(Icons.OK, resources.messages().microprofileHealthOutcome(UP));
+        this.outcomeDown = new Alert(Icons.ERROR, resources.messages().microprofileHealthOutcome(DOWN));
+
+        Metadata metadata = Metadata.staticDescription(mpCheckResource.checksOperationDescription());
+
+        checkTable = new ModelNodeTable.Builder<>(Ids.build(MICROPROFILE_HEALTH, TABLE), metadata)
+                .button(resources.constants().refresh(), table -> presenter.reload())
+                .column(Names.NAME, (cell, type, row, meta) -> row.get(NAME).asString())
+                .column(Names.STATE, (cell, type, row, meta) -> row.get(STATE).asString())
+                .build();
+
+        checkForm = new ModelNodeForm.Builder<>(Ids.build(MICROPROFILE_HEALTH, FORM), metadata)
+                .includeRuntime()
+                .readOnly()
+                .unsorted()
+                .build();
+
+        HTMLElement section = section()
+                .add(h(1).textContent(Names.MICROPROFILE_HEALTH))
+                .add(outcomeUp)
+                .add(outcomeDown)
+                .add(p().textContent(metadata.getDescription().getDescription()))
+                .add(checkTable)
+                .add(checkForm)
+                .asElement();
+
+        registerAttachable(checkTable, checkForm);
+
+        initElement(row()
+                .add(column()
+                        .addAll(section)));
+    }
+
+    @Override
+    public void attach() {
+        super.attach();
+        checkTable.bindForm(checkForm);
+    }
+
+    @Override
+    public void setPresenter(MicroProfileHealthPresenter presenter) {
+        this.presenter = presenter;
+    }
+
+    @Override
+    public void update(ModelNode result) {
+        checkForm.clear();
+
+        String outcome = result.get(OUTCOME).asString();
+        Elements.setVisible(outcomeUp.asElement(), UP.equals(outcome));
+        Elements.setVisible(outcomeDown.asElement(), DOWN.equals(outcome));
+        checkTable.update(result.get(CHECKS).asList());
+    }
+
+}",2018-11-06T17:46:56Z,123
"@@ -0,0 +1,166 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.runtime.subsystem.microprofile.health;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import elemental2.dom.HTMLElement;
+import elemental2.dom.HTMLHeadingElement;
+import elemental2.dom.HTMLLIElement;
+import elemental2.dom.HTMLUListElement;
+import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.gwt.elemento.core.builder.HtmlContentBuilder;
+import org.jboss.hal.ballroom.Alert;
+import org.jboss.hal.core.finder.PreviewContent;
+import org.jboss.hal.core.subsystem.SubsystemMetadata;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.resources.CSS;
+import org.jboss.hal.resources.Icons;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
+
+import static org.jboss.gwt.elemento.core.Elements.*;
+import static org.jboss.hal.client.runtime.subsystem.microprofile.health.AddressTemplates.MICROPROFILE_HEALTH_TEMPLATE;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.resources.CSS.key;
+import static org.jboss.hal.resources.CSS.listGroup;
+import static org.jboss.hal.resources.CSS.listGroupItem;
+import static org.jboss.hal.resources.Names.STATE;
+
+public class MicroprofileHealthPreview extends PreviewContent<SubsystemMetadata> {
+
+    private Dispatcher dispatcher;
+    private StatementContext statementContext;
+    private Resources resources;
+    private Alert outcomeUp;
+    private Alert outcomeDown;
+
+    private HTMLHeadingElement header;
+    private final List<HTMLElement> elements = new ArrayList<>();
+    private HTMLElement section = section().id(Ids.uniqueId()).asElement();
+
+    public MicroprofileHealthPreview(Dispatcher dispatcher, StatementContext statementContext, Resources resources) {
+        super(Names.MICROPROFILE_HEALTH);
+        this.dispatcher = dispatcher;
+        this.statementContext = statementContext;
+        this.resources = resources;
+
+        this.outcomeUp = new Alert(Icons.OK, resources.messages().microprofileHealthOutcome(UP));
+        this.outcomeDown = new Alert(Icons.ERROR, resources.messages().microprofileHealthOutcome(DOWN));
+
+        header = h(1).add(span().textContent(Names.MICROPROFILE_HEALTH)).asElement();
+        header.appendChild(refreshLink(() -> update(null)));
+
+        update(null);
+    }
+
+    @Override
+    public void update(SubsystemMetadata item) {
+        ResourceAddress addressWeb = MICROPROFILE_HEALTH_TEMPLATE.resolve(statementContext);
+        Operation operation = new Operation.Builder(addressWeb, CHECK).build();
+
+        // clear the previous state and remove the DOM children to populate with new values
+        elements.clear();
+        Elements.removeChildrenFrom(section);
+
+        dispatcher.execute(operation, result -> {
+            String outcome = result.get(OUTCOME).asString();
+            if (UP.equals(outcome)) {
+                section.appendChild(outcomeUp.asElement());
+            } else {
+                section.appendChild(outcomeDown.asElement());
+            }
+            section.appendChild(p().textContent(resources.messages().microprofileHealthPreviewDescription()).asElement());
+
+            List<ModelNode> checks = new ArrayList<>();
+            ModelNode modelChecks = result.get(CHECKS);
+            int max = 10;
+            if (modelChecks.isDefined()) {
+                checks = modelChecks.asList();
+                if (checks.size() < 10) {
+                    max = checks.size();
+                }
+            }
+            // checks may return an empty list
+            if (!checks.isEmpty()) {
+                // show the first 10 checks in the preview pane
+                for (int i = 0; i < max; i++) {
+                    ModelNode check = checks.get(i);
+                    String name = check.get(NAME).asString();
+                    String state = check.get(""state"").asString();
+                    section.appendChild(h(2, name).asElement());
+
+                    Map<String, String> dataMap = new HashMap<>();
+                    if (check.hasDefined(""data"")) {
+                        check.get(""data"").asPropertyList().forEach(data -> {
+                            String key = data.getName();
+                            String val = data.getValue().asString();
+                            dataMap.put(key, val);
+                        });
+                    }
+                    HTMLElement checkElement = checkElement(state, dataMap);
+                    section.appendChild(checkElement);
+                }
+            } else {
+                section.appendChild(p().textContent(resources.messages().microprofileHealthNoChecks()).asElement());
+            }
+            elements.add(section);
+        });
+    }
+
+    private HTMLElement checkElement(String state, Map<String, String> data) {
+
+        HTMLLIElement liState = li().css(listGroupItem)
+                .add(span().css(key).textContent(STATE))
+                .add(span().css(CSS.value).textContent(state).asElement())
+                .asElement();
+
+        HtmlContentBuilder<HTMLUListElement> ulBuilder = ul().css(listGroup)
+                .add(liState);
+
+        if (!data.isEmpty()) {
+            HTMLElement dataValue;
+            HTMLLIElement liData = li().css(listGroupItem)
+                    .add(span().css(key).textContent(""Data""))
+                    .add(dataValue = span().css(CSS.value).asElement())
+                    .asElement();
+            dataValue.style.whiteSpace = ""pre"";
+
+            StringBuilder dataString = new StringBuilder();
+            data.forEach((key, value) -> dataString.append(key).append("" \u21D2 "").append(value).append(""\n""));
+            dataValue.textContent = dataString.toString();
+
+            ulBuilder.add(liData);
+        }
+        return ulBuilder.asElement();
+    }
+
+    @Override
+    public Iterable<HTMLElement> asElements() {
+        List<HTMLElement> coll = new ArrayList<>();
+        coll.add(header);
+        coll.addAll(elements);
+        return coll;
+    }
+}",2018-11-06T17:46:56Z,124
"@@ -0,0 +1 @@
+bwAAAAMAB2NvbW1lbnRzAHFUaGlzIGZpbGUgaXMgbm90IHVzZWQhIEl0J3MganVzdCBoZXJlIHRvIGdlbmVyYXRlIHRoZSBiYXNlNjQgZW5jb2RlZCB2ZXJzaW9uIHVzaW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9oYWwvZG1yLmNtZAALZGVzY3JpcHRpb25zAENDaGVjayB0aGUgaGVhbHRoaW5lc3Mgb2YgdGhlIGFwcGxpY2F0aW9uIHNlcnZlciBhbmQgaXRzIGRlcGxveW1lbnRzAAphdHRyaWJ1dGVzbwAAAAMABG5hbWVvAAAACAAEdHlwZXRzAAtkZXNjcmlwdGlvbnMAFlRoZSBoZWFsdGggY2hlY2sgbmFtZS4ACHJlcXVpcmVkWgEACG5pbGxhYmxlWgAACm1pbi1sZW5ndGhKAAAAAAAAAAEACm1heC1sZW5ndGhKAAAAAH////8AC2FjY2Vzcy10eXBlcwAJcmVhZC1vbmx5AAdzdG9yYWdlcwAHcnVudGltZQAFc3RhdGVvAAAACAAEdHlwZXRzAAtkZXNjcmlwdGlvbnMAHlRoZSBzdGF0ZSBvZiB0aGUgaGVhbHRoIGNoZWNrLgAIcmVxdWlyZWRaAQAIbmlsbGFibGVaAAAKbWluLWxlbmd0aEoAAAAAAAAAAQAKbWF4LWxlbmd0aEoAAAAAf////wALYWNjZXNzLXR5cGVzAAlyZWFkLW9ubHkAB3N0b3JhZ2VzAAdydW50aW1lAARkYXRhbwAAAAcABHR5cGV0bwALZGVzY3JpcHRpb25zABZUaGUgaGVhbHRoIGNoZWNrIGRhdGEuAAhyZXF1aXJlZFoBAAhuaWxsYWJsZVoAAAp2YWx1ZS10eXBldHMAC2FjY2Vzcy10eXBlcwAJcmVhZC1vbmx5AAdzdG9yYWdlcwAHcnVudGltZQ==",2018-11-06T17:46:56Z,125
"@@ -0,0 +1,35 @@
+{
+    ""comment"" => ""This file is not used! It's just here to generate the base64 encoded version using https://github.com/hal/dmr.cmd"",
+    ""description"" => ""Check the healthiness of the application server and its deployments"",
+    ""attributes"" => {
+        ""name"" => {
+            ""type"" => STRING,
+            ""description"" => ""The health check name."",
+            ""required"" => true,
+            ""nillable"" => false,
+            ""min-length"" => 1L,
+            ""max-length"" => 2147483647L,
+            ""access-type"" => ""read-only"",
+            ""storage"" => ""runtime""
+        },
+        ""state"" => {
+            ""type"" => STRING,
+            ""description"" => ""The state of the health check."",
+            ""required"" => true,
+            ""nillable"" => false,
+            ""min-length"" => 1L,
+            ""max-length"" => 2147483647L,
+            ""access-type"" => ""read-only"",
+            ""storage"" => ""runtime""
+        },
+        ""data"" => {
+            ""type"" => OBJECT,
+            ""description"" => ""The health check data."",
+            ""required"" => true,
+            ""nillable"" => false,
+            ""value-type"" => STRING,
+            ""access-type"" => ""read-only"",
+            ""storage"" => ""runtime""
+        }
+    }
+}",2018-11-06T17:46:56Z,126
"@@ -75,6 +75,7 @@ public class LabelBuilder {
             .put(""mcp"", ""MCP"")
             .put(""mdb"", ""MDB"")
             .put(""mbean"", ""MBean"")
+            .put(""microprofile"", ""MicroProfile"")
             .put(""oauth2"", ""OAuth 2"")
             .put(""otp"", ""OTP"")
             .put(""rdn"", ""RDN"")",2018-11-06T17:46:56Z,83
"@@ -242,6 +242,9 @@ public Subsystems(Resources resources) {
                 .nextColumn(Ids.MESSAGING_SERVER_RUNTIME)
                 .preview(resources.previews().runtimeMessagingServer())
                 .build());
+        addRuntime(new SubsystemMetadata.Builder(MICROPROFILE_HEALTH_SMALLRYE, Names.MICROPROFILE_HEALTH)
+                .token(NameTokens.MICROPROFILE_HEALTH)
+                .build());
         addRuntime(new SubsystemMetadata.Builder(TRANSACTIONS, Names.TRANSACTION)
                 .token(NameTokens.TRANSACTIONS_RUNTIME)
                 .build());",2018-11-06T17:46:56Z,37
"@@ -128,6 +128,8 @@ public interface ModelDescriptionConstants {
     String CHANGE_MESSAGE_PRIORITY = ""change-message-priority"";
     String CHANGE_MESSAGES_PRIORITY = ""change-messages-priority"";
     String CHANNEL = ""channel"";
+    String CHECK = ""check"";
+    String CHECKS = ""checks"";
     String CHILD_TYPE = ""child-type"";
     String CHILDREN = ""children"";
     String CLASS = ""class"";
@@ -248,6 +250,7 @@ public interface ModelDescriptionConstants {
     String DIVERT = ""divert"";
     String DOMAIN_UUID = ""domain-uuid"";
     String DOMAIN_ROLLOUT = ""domain-rollout"";
+    String DOWN = ""DOWN"";
     String DRIVER_CLASS = ""driver-class"";
     String DRIVER_CLASS_NAME = ""driver-class-name"";
     String DRIVER_DATASOURCE_CLASS_NAME = ""driver-datasource-class-name"";
@@ -508,6 +511,7 @@ public interface ModelDescriptionConstants {
     String METADATA = ""metadata"";
     String METRIC = ""metric"";
     String MICROPROFILE_CONFIG_SMALLRYE = ""microprofile-config-smallrye"";
+    String MICROPROFILE_HEALTH_SMALLRYE = ""microprofile-health-smallrye"";
     String MIME_MAPPING = ""mime-mapping"";
     String MIN = ""min"";
     String MIN_POOL_SIZE = ""min-pool-size"";
@@ -840,6 +844,7 @@ public interface ModelDescriptionConstants {
     String START_SERVERS = ""start-servers"";
     String START_TIME = ""start-time"";
     String STARTED = ""started"";
+    String STATE = ""state"";
     String STATE_TRANSFER = ""state-transfer"";
     String STATIC_CONNECTORS = ""static-connectors"";
     String STATISTICS_ENABLED = ""statistics-enabled"";
@@ -913,6 +918,7 @@ public interface ModelDescriptionConstants {
     String UNREGISTERED = ""unregistered"";
     String UPDATE_ACCOUNT = ""update-account"";
     String UPDATE_AUTO_START_WITH_SERVER_STATUS = ""update-auto-start-with-server-status"";
+    String UP = ""UP"";
     String UPTIME = ""uptime"";
     String URL = ""url"";
     String USE_RECURSIVE_SEARCH = ""use-recursive-search"";",2018-11-06T17:46:56Z,109
"@@ -86,6 +86,7 @@ public interface NameTokens {
     String MESSAGING_SERVER_DESTINATION = ""messaging-server-destination"";
     String MESSAGING_SERVER_HA_POLICY = ""messaging-server-ha-policy"";
     String MICROPROFILE_CONFIG = ""micro-profile-config"";
+    String MICROPROFILE_HEALTH = ""micro-profile-health"";
     String MODCLUSTER = ModelDescriptionConstants.MODCLUSTER;
     String MODEL_BROWSER = ""model-browser"";
     String PATCHING = ""patching"";",2018-11-06T17:46:56Z,46
"@@ -546,6 +546,7 @@ public interface Ids {
     String MESSAGING_SERVER_RUNTIME = ""msg-server-r"";
     String MESSAGING_SERVER_RUNTIME_REFRESH = ""msg-server-r-refresh"";
     String MESSAGING_SERVER_SETTINGS = ""msg-server-settings"";
+    String MICROPROFILE_HEALTH = ""microprofile-health"";
     String MODCLUSTER_PROXY = ""modcluster-proxy"";
     String MODCLUSTER_PROXY_ADD = ""modcluster-proxy-add"";
     String MODCLUSTER_PROXY_REFRESH = ""modcluster-proxy-refresh"";",2018-11-06T17:46:56Z,111
"@@ -317,6 +317,9 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml mappingHint();
     String membershipColumnFilterDescription();
     SafeHtml metadataError();
+    String microprofileHealthNoChecks();
+    SafeHtml microprofileHealthOutcome(String outcome);
+    String microprofileHealthPreviewDescription();
     String modifyResourceTitle(String type);
     SafeHtml modifyResourceSuccess(String type, String name);
     SafeHtml modifySingleResourceSuccess(String type);",2018-11-06T17:46:56Z,94
"@@ -219,7 +219,6 @@ public interface Names {
     String MASTER = ""Master"";
     String MAXIMUM_PERMISSIONS = ""Maximum Permissions"";
     String MB = ""MB"";
-    String MICROPROFILE_CONFIG = ""Microprofile Config"";
     String MECHANISM_CONFIGURATION = ""Mechanism Configuration"";
     String MECHANISM_CONFIGURATIONS = ""Mechanism Configurations"";
     String MECHANISM_REALM_CONFIGURATION = ""Mechanism Realm Configuration"";
@@ -228,6 +227,8 @@ public interface Names {
     String MESSAGE_DRIVEN_BEAN = ""Message Driven Bean"";
     String MESSAGING = ""Messaging"";
     String MESSAGING_REMOTE_ACTIVEMQ = ""Remote ActiveMQ"";
+    String MICROPROFILE_CONFIG = ""Microprofile Config"";
+    String MICROPROFILE_HEALTH = ""MicroProfile Health"";
     String MIME_MAPPING = ""Mime Mapping"";
     String MINIMUM_PERMISSIONS = ""Minimum Permissions"";
     String MISSING_DEPENDENCIES = ""Missing Dependencies"";
@@ -346,6 +347,7 @@ public interface Names {
     String STORES = ""Stores"";
     String STRING_TABLE = ""String Table"";
     String STACK = ""Stack"";
+    String STATE = ""State"";
     String STATEFUL_SESSION_BEAN = ""Stateful Session Bean"";
     String STATELESS_SESSION_BEAN = ""Stateless Session Bean"";
     String SUB_RESOURCE_LOCATORS = ""Sub Resource Locators"";",2018-11-06T17:46:56Z,112
"@@ -274,6 +274,9 @@ manyMessages=The queue contains <strong>{0, number}</strong> messages. Reading a
 mappingHint=Add new mappings as <em>from=to</em> pairs. Press <abbr class=""key"" title=""RETURN"">&crarr;</abbr> to add and <abbr class=""key"" title=""BACKSPACE"">&#x232B</abbr> to remove them.
 membershipColumnFilterDescription=Filter by: Principal or includes/excludes
 metadataError=Error while reading metadata.
+microprofileHealthNoChecks=There are no health checks to show.
+microprofileHealthOutcome=The health check outcome is {0}.
+microprofileHealthPreviewDescription=This preview pane shows the first 10 checks, to see more checks, click on the ""View"" button.
 modifyResourceSuccess={0} <strong>{1}</strong> successfully modified.
 modifyResourceTitle=Edit {0}
 modifySingleResourceSuccess=<strong>{0}</strong> successfully modified.",2018-11-06T17:46:56Z,94
"@@ -15,7 +15,7 @@ addSuccess=O {0} <strong>{1}</strong> foi adicionado com \u00EAxito a <strong>{2
 addressLabel=<p>Endere\u00E7o\: <strong>{0}</strong></p>
 allContentAlreadyDeployedToServerGroup=Todo o conte\u00FAdo j\u00E1 foi implantado no grupo de servidores <strong>{0}</strong>.
 allMailServersExist=Todos os servidores de e-mail j\u00E1 existem.
-allSingletonsExist=Todos os recursos singleton j\u00E1 foram adicionados. 
+allSingletonsExist=Todos os recursos singleton j\u00E1 foram adicionados.
 allThreadPoolsExist=Os pools de threads de longa e curta dura\u00E7\u00E3o j\u00E1 est\u00E3o atribu\u00EDdos ao gerenciador de trabalho (distribu\u00EDdo).
 alternativesHelp=Mutuamente exclusivos para {0}
 assignmentExcludeSuccess={0} {1} exclu\u00EDdo com \u00EAxito.
@@ -196,9 +196,9 @@ generateKeyPairSuccess=O par de chaves com alias <strong>{0}</strong> foi gerado
 getMetadataError=Ocorreu um erro ao recuperar os metadados para <strong>{0}</strong>. Causa\: {1}
 getMetadataSuccess=Os metadados para <strong>{0}</strong> foram recuperados com \u00EAxito.
 goTo=Ir para {0}
-homepagePatchingDomainStepIntro=Aplicar uma corre\u00E7\u00E3o {0} ao host selecionado.  
-homepagePatchingStandaloneStepIntro=Aplicar uma corre\u00E7\u00E3o {0} ao servidor. 
-homepagePatchingSubHeader=Gerenciar as corre\u00E7\u00F5es {0} 
+homepagePatchingDomainStepIntro=Aplicar uma corre\u00E7\u00E3o {0} ao host selecionado.
+homepagePatchingStandaloneStepIntro=Aplicar uma corre\u00E7\u00E3o {0} ao servidor.
+homepagePatchingSubHeader=Gerenciar as corre\u00E7\u00F5es {0}
 hostAdminMode=O host <strong>{0}</strong> est\u00E1 em execu\u00E7\u00E3o no modo somente administrador.
 hostColumnFilterDescription=Filtrar por\: nome de host, dc/hc (tipo de controlador host), ativado/desativado
 hostControllerTimeout=O controlador host <strong>{0}</strong> atingiu um tempo limite. Verifique os arquivos de log.
@@ -270,6 +270,9 @@ manyMessages=A fila cont\u00E9m <strong>{0, number}</strong> mensagens. Ler toda
 mappingHint=Adicione novos mapeamentos como pares <em>from\=to</em>. Pressione <abbr class\=""key"" title\=""RETURN"">&crarr;</abbr> para adicion\u00E1-los e <abbr class\=""key"" title\=""BACKSPACE"">&\#x232B</abbr> para remov\u00EA-los.
 membershipColumnFilterDescription=Filtrar por\: principal ou inclui/exclui
 metadataError=Erro ao ler metadados.
+microprofileHealthNoChecks=N\u00e3o existem verifica\u00e7\u00f5es de bom funcionamento (health checks) para mostrar.
+microprofileHealthOutcome=O resultado da verifica\u00e7\u00e3o de bom funcionamento (health check) \u00e9 {0}.
+microprofileHealthPreviewDescription=Esta antevis\u00e3o mostra as primeiras 10 verifica\u00e7\u00f5es, para ver mais verifica\u00e7\u00f5es clique no bot\u00e3o ""Visualizar"".
 modifyResourceSuccess={0} <strong>{1}</strong> modificado com \u00EAxito.
 modifyResourceTitle=Editar {0}
 modifySingleResourceSuccess=<strong>{0}</strong> modificado com \u00EAxito.
@@ -539,7 +542,7 @@ tourAccessControlUsers=Adicione e atribua fun\u00E7\u00F5es a <strong>usu\u00E1r
 tourDomainConfiguration=Lista de <strong>perfis</strong> dispon\u00EDveis no dom\u00EDnio gerenciado. Diferentes grupos de servidores podem usar diferentes perfis dependendo dos recursos necess\u00E1rios.
 tourDomainConfigurationSubsystem=Visualize e modifique a configura\u00E7\u00E3o de cada <strong>subsistema</strong> inclu\u00EDdo no perfil selecionado. Por exemplo, adicione uma fonte de dados, configure um provedor de mensagens ou configure seguran\u00E7a de aplicativo.
 tourDomainDeploymentsAddActions=Adicione uma implanta\u00E7\u00E3o a um grupo de servidores fazendo upload de uma <strong>nova implanta\u00E7\u00E3o</strong>, escolhendo uma implanta\u00E7\u00E3o existente a partir do <strong>reposit\u00F3rio de conte\u00FAdo</strong> ou criando uma <strong>implanta\u00E7\u00E3o n\u00E3o gerenciada</strong> para ser gerenciada fora do EAP.
-tourDomainDeploymentsBrowseBy=Adicione implantações e atribua-as a grupos de servidores a partir do <strong>Repositório de conteúdo</strong>, em que todo o conteúdo de implantação está listado.<br/><br/>Adicione e ative implantações a partir de <strong>Grupos de servidores</strong> para aquelas implantações que foram atribuídas a um ou mais grupos de servidores.
+tourDomainDeploymentsBrowseBy=Adicione implanta\u00e7\u00f5es e atribua-as a grupos de servidores a partir do <strong>Reposit\u00f3rio de conte\u00fado</strong>, em que todo o conte\u00fado de implanta\u00e7\u00e3o est\u00e1 listado.<br/><br/>Adicione e ative implanta\u00e7\u00f5es a partir de <strong>Grupos de servidores</strong> para aquelas implanta\u00e7\u00f5es que foram atribu\u00eddas a um ou mais grupos de servidores.
 tourDomainHomeConfiguration=Manuseie a <strong>Configura\u00E7\u00E3o</strong> de perfis e subsistemas dispon\u00EDveis que oferecem um determinado conjunto de recursos, como fontes de dados ou mensagens.
 tourDomainHomeDeployments=Adicione, remova e atribua <strong>Implanta\u00E7\u00F5es</strong> a grupos de servidores.
 tourDomainHomeRuntime=Visualize informa\u00E7\u00F5es de <strong>Tempo de execu\u00E7\u00E3o</strong>, como status do servidor, uso do JVM e logs do servidor. Em um dom\u00EDnio gerenciado, configure hosts e grupos de servidores.",2018-11-06T17:46:56Z,94
"@@ -96,7 +96,9 @@
 import org.jboss.hal.client.configuration.subsystem.messaging.Mbui_ConnectionView;
 import org.jboss.hal.client.configuration.subsystem.messaging.Mbui_DestinationView;
 import org.jboss.hal.client.configuration.subsystem.messaging.Mbui_MessagingSubsystemView;
+import org.jboss.hal.client.configuration.subsystem.messaging.Mbui_RemoteActiveMQView;
 import org.jboss.hal.client.configuration.subsystem.messaging.MessagingSubsystemPresenter;
+import org.jboss.hal.client.configuration.subsystem.messaging.RemoteActiveMQPresenter;
 import org.jboss.hal.client.configuration.subsystem.microprofile.Mbui_MicroProfileConfigView;
 import org.jboss.hal.client.configuration.subsystem.microprofile.MicroProfileConfigPresenter;
 import org.jboss.hal.client.configuration.subsystem.modcluster.Mbui_ModclusterView;
@@ -518,6 +520,11 @@ protected void configure() {
                 MailSessionView.class,
                 MailSessionPresenter.MyProxy.class);
 
+        bindPresenter(RemoteActiveMQPresenter.class,
+                RemoteActiveMQPresenter.MyView.class,
+                Mbui_RemoteActiveMQView.class,
+                RemoteActiveMQPresenter.MyProxy.class);
+
         bindPresenter(MessagingSubsystemPresenter.class,
                 MessagingSubsystemPresenter.MyView.class,
                 Mbui_MessagingSubsystemView.class,",2018-10-18T15:29:42Z,44
"@@ -23,6 +23,26 @@ interface AddressTemplates {
 
     String MESSAGING_SUBSYSTEM_ADDRESS = ""/{selected.profile}/subsystem=messaging-activemq"";
     AddressTemplate MESSAGING_SUBSYSTEM_TEMPLATE = AddressTemplate.of(MESSAGING_SUBSYSTEM_ADDRESS);
+    AddressTemplate SOCKET_BINDING_TEMPLATE = AddressTemplate.of(""/socket-binding-group=*/socket-binding=*"");
+
+    String CONNECTOR_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/connector=*"";
+    String IN_VM_CONNECTOR_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/in-vm-connector=*"";
+    String HTTP_CONNECTOR_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/http-connector=*"";
+    String REMOTE_CONNECTOR_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/remote-connector=*"";
+    String DISCOVERY_GROUP_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/discovery-group=*"";
+    String CONNECTION_FACTORY_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/connection-factory=*"";
+    String POOLED_CONNECTION_FACTORY_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/pooled-connection-factory=*"";
+    String EXTERNAL_JMS_QUEUE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/external-jms-queue=*"";
+    String EXTERNAL_JMS_TOPIC_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/external-jms-topic=*"";
+    AddressTemplate CONNECTOR_REMOTE_TEMPLATE = AddressTemplate.of(CONNECTOR_REMOTE_ADDRESS);
+    AddressTemplate IN_VM_CONNECTOR_REMOTE_TEMPLATE = AddressTemplate.of(IN_VM_CONNECTOR_REMOTE_ADDRESS);
+    AddressTemplate HTTP_CONNECTOR_REMOTE_TEMPLATE = AddressTemplate.of(HTTP_CONNECTOR_REMOTE_ADDRESS);
+    AddressTemplate REMOTE_CONNECTOR_REMOTE_TEMPLATE = AddressTemplate.of(REMOTE_CONNECTOR_REMOTE_ADDRESS);
+    AddressTemplate DISCOVERY_GROUP_REMOTE_TEMPLATE = AddressTemplate.of(DISCOVERY_GROUP_REMOTE_ADDRESS);
+    AddressTemplate CONNECTION_FACTORY_REMOTE_TEMPLATE = AddressTemplate.of(CONNECTION_FACTORY_REMOTE_ADDRESS);
+    AddressTemplate POOLED_CONNECTION_FACTORY_REMOTE_TEMPLATE = AddressTemplate.of(POOLED_CONNECTION_FACTORY_REMOTE_ADDRESS);
+    AddressTemplate EXTERNAL_JMS_QUEUE_TEMPLATE = AddressTemplate.of(EXTERNAL_JMS_QUEUE_ADDRESS);
+    AddressTemplate EXTERNAL_JMS_TOPIC_TEMPLATE = AddressTemplate.of(EXTERNAL_JMS_TOPIC_ADDRESS);
 
     String SERVER_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/server=*"";
     String SELECTED_SERVER_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/server="" + SELECTION_EXPRESSION;",2018-10-18T15:29:42Z,127
"@@ -49,6 +49,12 @@ public MessagingCategoryColumn(Finder finder,
                         .action(itemActionFactory.view(places.selectedProfile(NameTokens.MESSAGING).build()))
                         .onPreview(new MessagingSubsystemPreview(crud, resources))
                         .build(),
+                new StaticItem.Builder(resources.constants().remoteActiveMQServer())
+                        .id(Ids.MESSAGING_REMOTE_ACTIVEMQ)
+                        .action(itemActionFactory.view(places.selectedProfile(NameTokens.MESSAGING_REMOTE_ACTIVEMQ).build()))
+                        .onPreview(new PreviewContent<>(Names.MESSAGING_REMOTE_ACTIVEMQ,
+                                resources.previews().configurationMessagingRemoteActiveMQ()))
+                        .build(),
                 new StaticItem.Builder(Names.SERVER)
                         .nextColumn(Ids.MESSAGING_SERVER_CONFIGURATION)
                         .onPreview(new PreviewContent<>(Names.SERVER,",2018-10-18T15:29:42Z,128
"@@ -0,0 +1,229 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.messaging;
+
+import java.util.List;
+import java.util.Map;
+
+import javax.inject.Inject;
+
+import com.google.web.bindery.event.shared.EventBus;
+import com.gwtplatform.mvp.client.annotations.NameToken;
+import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
+import com.gwtplatform.mvp.client.proxy.ProxyPlace;
+import org.jboss.hal.ballroom.autocomplete.ReadChildrenAutoComplete;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.core.CrudOperations;
+import org.jboss.hal.core.finder.Finder;
+import org.jboss.hal.core.finder.FinderPath;
+import org.jboss.hal.core.finder.FinderPathFactory;
+import org.jboss.hal.core.mbui.MbuiPresenter;
+import org.jboss.hal.core.mbui.MbuiView;
+import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
+import org.jboss.hal.core.mbui.dialog.NameItem;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.core.mvp.SupportsExpertMode;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.MetadataRegistry;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.meta.token.NameTokens;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Requires;
+
+import static java.util.Arrays.asList;
+import static org.jboss.hal.client.configuration.subsystem.messaging.AddressTemplates.*;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
+
+public class RemoteActiveMQPresenter
+        extends MbuiPresenter<RemoteActiveMQPresenter.MyView, RemoteActiveMQPresenter.MyProxy>
+        implements SupportsExpertMode {
+
+    private MetadataRegistry metadataRegistry;
+    private final Dispatcher dispatcher;
+    private CrudOperations crud;
+    private FinderPathFactory finderPathFactory;
+    protected final StatementContext statementContext;
+    private Resources resources;
+
+    @Inject
+    public RemoteActiveMQPresenter(
+            EventBus eventBus,
+            RemoteActiveMQPresenter.MyView view,
+            RemoteActiveMQPresenter.MyProxy myProxy,
+            Finder finder,
+            MetadataRegistry metadataRegistry,
+            Dispatcher dispatcher,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext,
+            Resources resources) {
+        super(eventBus, view, myProxy, finder);
+        this.metadataRegistry = metadataRegistry;
+        this.dispatcher = dispatcher;
+        this.crud = crud;
+        this.finderPathFactory = finderPathFactory;
+        this.statementContext = statementContext;
+        this.resources = resources;
+    }
+
+    @Override
+    protected void onBind() {
+        super.onBind();
+        getView().setPresenter(this);
+    }
+
+    @Override
+    public ResourceAddress resourceAddress() {
+        return MESSAGING_SUBSYSTEM_TEMPLATE.resolve(statementContext);
+    }
+
+    @Override
+    public FinderPath finderPath() {
+        return finderPathFactory.configurationSubsystemPath(MESSAGING_ACTIVEMQ)
+                .append(Ids.MESSAGING_CATEGORY, Ids.MESSAGING_REMOTE_ACTIVEMQ,
+                        resources.constants().category(), Names.CONNECTIONS);
+    }
+
+    @Override
+    protected void reload() {
+        ResourceAddress address = MESSAGING_SUBSYSTEM_TEMPLATE.resolve(statementContext);
+        crud.readChildren(address, asList(CONNECTOR, IN_VM_CONNECTOR, HTTP_CONNECTOR, REMOTE_CONNECTOR, DISCOVERY_GROUP,
+                CONNECTION_FACTORY, POOLED_CONNECTION_FACTORY, EXTERNAL_JMS_QUEUE, EXTERNAL_JMS_TOPIC),
+                result -> {
+                    int i = 0;
+                    getView().updateConnector(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateInVmConnector(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateHttpConnector(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateRemoteConnector(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateDiscoveryGroup(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateConnectionFactory(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updatePooledConnectionFactory(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateExternalQueue(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateExternalTopic(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                });
+    }
+
+    void addHttpConnector() {
+        Metadata metadata = metadataRegistry.lookup(HTTP_CONNECTOR_REMOTE_TEMPLATE);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(HTTP_CONNECTOR, Ids.ADD), metadata)
+                .unboundFormItem(new NameItem(), 0)
+                .fromRequestProperties()
+                .requiredOnly()
+                .build();
+        form.getFormItem(SOCKET_BINDING).registerSuggestHandler(
+                new ReadChildrenAutoComplete(dispatcher, statementContext,
+                        AddressTemplate.of(""/socket-binding-group=*/socket-binding=*"")));
+
+        new AddResourceDialog(Names.HTTP_CONNECTOR, form, (name, model) -> {
+            crud.add(Names.HTTP_CONNECTOR, name, HTTP_CONNECTOR_REMOTE_TEMPLATE, model, (n, a) -> reload());
+        }).show();
+    }
+
+    void addRemoteConnector() {
+        Metadata metadata = metadataRegistry.lookup(REMOTE_CONNECTOR_REMOTE_TEMPLATE);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(REMOTE_CONNECTOR, Ids.ADD), metadata)
+                .unboundFormItem(new NameItem(), 0)
+                .fromRequestProperties()
+                .requiredOnly()
+                .build();
+        form.getFormItem(SOCKET_BINDING).registerSuggestHandler(
+                new ReadChildrenAutoComplete(dispatcher, statementContext,
+                        AddressTemplate.of(""/socket-binding-group=*/socket-binding=*"")));
+
+        new AddResourceDialog(Names.REMOTE_CONNECTOR, form, (name, model) -> {
+            crud.add(Names.REMOTE_CONNECTOR, name, REMOTE_CONNECTOR_REMOTE_TEMPLATE, model, (n, a) -> reload());
+        }).show();
+    }
+
+    void addConnectionFactory(RemoteActiveMQSubResource ssr) {
+        Metadata metadata = metadataRegistry.lookup(ssr.template);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(ssr.baseId, Ids.ADD), metadata)
+                .unboundFormItem(new NameItem(), 0)
+                .fromRequestProperties()
+                .include(ENTRIES, DISCOVERY_GROUP, CONNECTORS)
+                .unsorted()
+                .build();
+
+        List<AddressTemplate> connectors = asList(CONNECTOR_REMOTE_TEMPLATE, IN_VM_CONNECTOR_REMOTE_TEMPLATE,
+                HTTP_CONNECTOR_REMOTE_TEMPLATE, REMOTE_CONNECTOR_REMOTE_TEMPLATE);
+
+        form.getFormItem(CONNECTORS).registerSuggestHandler(
+                new ReadChildrenAutoComplete(dispatcher, statementContext, connectors));
+        form.getFormItem(DISCOVERY_GROUP).registerSuggestHandler(
+                new ReadChildrenAutoComplete(dispatcher, statementContext, DISCOVERY_GROUP_REMOTE_TEMPLATE));
+
+        new AddResourceDialog(resources.messages().addResourceTitle(ssr.type), form, (name, model) -> {
+            ResourceAddress address = ssr.template.resolve(statementContext, name);
+            crud.add(ssr.type, name, address, model, (n, a) -> reload());
+        }).show();
+    }
+
+    ResourceAddress pooledConnectionFactoryAddress(String resource) {
+        return resource != null ? POOLED_CONNECTION_FACTORY_REMOTE_TEMPLATE.resolve(statementContext, resource) : null;
+    }
+
+
+    void add(RemoteActiveMQSubResource ssr) {
+        ssr.add(metadataRegistry, statementContext, crud, resources, (n, a) -> reload());
+    }
+
+    void save(RemoteActiveMQSubResource ssr, Form<NamedNode> form, Map<String, Object> changedValues) {
+        ssr.save(form, changedValues, metadataRegistry, statementContext, crud, this::reload);
+    }
+
+    void reset(RemoteActiveMQSubResource ssr, Form<NamedNode> form) {
+        ssr.reset(form, metadataRegistry, statementContext, crud, new Form.FinishReset<NamedNode>(form) {
+            @Override
+            public void afterReset(final Form<NamedNode> form) {
+                reload();
+            }
+        });
+    }
+
+    void remove(RemoteActiveMQSubResource ssr, NamedNode item) {
+        ssr.remove(item, statementContext, crud, this::reload);
+    }
+    // @formatter:off
+    @ProxyCodeSplit
+    @Requires({CONNECTOR_REMOTE_ADDRESS, IN_VM_CONNECTOR_REMOTE_ADDRESS, HTTP_CONNECTOR_REMOTE_ADDRESS,
+            REMOTE_CONNECTOR_REMOTE_ADDRESS, DISCOVERY_GROUP_REMOTE_ADDRESS, CONNECTION_FACTORY_REMOTE_ADDRESS,
+            POOLED_CONNECTION_FACTORY_REMOTE_ADDRESS, EXTERNAL_JMS_QUEUE_ADDRESS, EXTERNAL_JMS_TOPIC_ADDRESS
+    })
+    @NameToken(NameTokens.MESSAGING_REMOTE_ACTIVEMQ)
+    public interface MyProxy extends ProxyPlace<RemoteActiveMQPresenter> {
+    }
+
+    public interface MyView extends MbuiView<RemoteActiveMQPresenter> {
+        void updateConnector(List<NamedNode> connectors);
+        void updateInVmConnector(List<NamedNode> inVmConnectors);
+        void updateHttpConnector(List<NamedNode> httpConnectors);
+        void updateRemoteConnector(List<NamedNode> remoteConnectors);
+        void updateDiscoveryGroup(List<NamedNode> connectorServices);
+        void updateConnectionFactory(List<NamedNode> connectionFactories);
+        void updatePooledConnectionFactory(List<NamedNode> pooledConnectionFactories);
+        void updateExternalQueue(List<NamedNode> nodes);
+        void updateExternalTopic(List<NamedNode> nodes);
+    }
+    // @formatter:on
+}",2018-10-18T15:29:42Z,129
"@@ -0,0 +1,111 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.messaging;
+
+import java.util.Map;
+
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.core.CrudOperations;
+import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
+import org.jboss.hal.dmr.ModelDescriptionConstants;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.MetadataRegistry;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Callback;
+
+import static org.jboss.hal.dmr.ModelDescriptionConstants.EXTERNAL_JMS_QUEUE;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.EXTERNAL_JMS_TOPIC;
+
+enum RemoteActiveMQSubResource {
+
+    CONNECTION_FACTORY(Ids.MESSAGING_CONNECTION_FACTORY, Names.CONNECTION_FACTORY,
+            ModelDescriptionConstants.CONNECTION_FACTORY, AddressTemplates.CONNECTION_FACTORY_REMOTE_TEMPLATE),
+
+    CONNECTOR(Ids.MESSAGING_CONNECTOR, Names.GENERIC_CONNECTOR,
+            ModelDescriptionConstants.CONNECTOR, AddressTemplates.CONNECTOR_REMOTE_TEMPLATE),
+
+    DISCOVERY_GROUP(Ids.MESSAGING_DISCOVERY_GROUP, Names.DISCOVERY_GROUP,
+            ModelDescriptionConstants.DISCOVERY_GROUP, AddressTemplates.DISCOVERY_GROUP_REMOTE_TEMPLATE),
+
+    EXTERNAL_QUEUE(EXTERNAL_JMS_QUEUE, Names.EXTERNAL_JMS_QUEUE,
+            EXTERNAL_JMS_QUEUE, AddressTemplates.EXTERNAL_JMS_QUEUE_TEMPLATE),
+
+    EXTERNAL_TOPIC(EXTERNAL_JMS_TOPIC, Names.EXTERNAL_JMS_TOPIC,
+            EXTERNAL_JMS_TOPIC, AddressTemplates.EXTERNAL_JMS_TOPIC_TEMPLATE),
+
+    HTTP_CONNECTOR(Ids.MESSAGING_HTTP_CONNECTOR, Names.HTTP_CONNECTOR,
+            ModelDescriptionConstants.HTTP_CONNECTOR, AddressTemplates.HTTP_CONNECTOR_REMOTE_TEMPLATE),
+
+    IN_VM_CONNECTOR(Ids.MESSAGING_IN_VM_CONNECTOR, Names.IN_VM_CONNECTOR,
+            ModelDescriptionConstants.IN_VM_CONNECTOR, AddressTemplates.IN_VM_CONNECTOR_REMOTE_TEMPLATE),
+
+    POOLED_CONNECTION_FACTORY(Ids.MESSAGING_POOLED_CONNECTION_FACTORY, Names.POOLED_CONNECTION_FACTORY,
+            ModelDescriptionConstants.POOLED_CONNECTION_FACTORY, AddressTemplates.POOLED_CONNECTION_FACTORY_REMOTE_TEMPLATE),
+
+    REMOTE_CONNECTOR(Ids.MESSAGING_REMOTE_CONNECTOR, Names.REMOTE_CONNECTOR,
+            ModelDescriptionConstants.REMOTE_CONNECTOR, AddressTemplates.REMOTE_CONNECTOR_REMOTE_TEMPLATE);
+
+
+    final String baseId;
+    final String type;
+    final String resource;
+    final AddressTemplate template;
+
+    RemoteActiveMQSubResource(final String baseId, final String type, final String resource, final AddressTemplate template) {
+        this.baseId = baseId;
+        this.type = type;
+        this.resource = resource;
+        this.template = template;
+    }
+
+    void add(MetadataRegistry metadataRegistry, StatementContext statementContext,
+            CrudOperations crud, Resources resources, CrudOperations.AddCallback callback) {
+        Metadata metadata = metadataRegistry.lookup(template);
+        new AddResourceDialog(Ids.build(baseId, Ids.ADD), resources.messages().addResourceTitle(type), metadata,
+                (name, model) -> {
+                    ResourceAddress address = template.resolve(statementContext, name);
+                    crud.add(type, name, address, model, callback);
+                }).show();
+    }
+
+    void save(Form<NamedNode> form, Map<String, Object> changedValues, MetadataRegistry metadataRegistry,
+            StatementContext statementContext, CrudOperations crud, Callback callback) {
+        String name = form.getModel().getName();
+        ResourceAddress address = template.resolve(statementContext, name);
+        Metadata metadata = metadataRegistry.lookup(template);
+        crud.save(type, name, address, changedValues, metadata, callback);
+    }
+
+    void reset(Form<NamedNode> form, MetadataRegistry metadataRegistry, StatementContext statementContext,
+            CrudOperations crud, Callback callback) {
+        String name = form.getModel().getName();
+        ResourceAddress address = template.resolve(statementContext, name);
+        Metadata metadata = metadataRegistry.lookup(template);
+        crud.reset(type, name, address, form, metadata, callback);
+    }
+
+    void remove(NamedNode item, StatementContext statementContext, CrudOperations crud, Callback callback) {
+        String name = item.getName();
+        ResourceAddress address = template.resolve(statementContext, name);
+        crud.remove(type, name, address, callback);
+    }
+}",2018-10-18T15:29:42Z,130
"@@ -0,0 +1,250 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.messaging;
+
+import java.util.List;
+
+import javax.annotation.PostConstruct;
+
+import elemental2.dom.HTMLElement;
+import org.jboss.hal.ballroom.Tabs;
+import org.jboss.hal.ballroom.VerticalNavigation;
+import org.jboss.hal.ballroom.autocomplete.ReadChildrenAutoComplete;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.table.Scope;
+import org.jboss.hal.ballroom.table.Table;
+import org.jboss.hal.core.elytron.CredentialReference;
+import org.jboss.hal.core.mbui.MbuiContext;
+import org.jboss.hal.core.mbui.MbuiViewImpl;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.core.mbui.form.RequireAtLeastOneAttributeValidation;
+import org.jboss.hal.core.mbui.table.ModelNodeTable;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.security.Constraint;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.spi.MbuiElement;
+import org.jboss.hal.spi.MbuiView;
+
+import static java.util.Arrays.asList;
+import static org.jboss.gwt.elemento.core.Elements.h;
+import static org.jboss.gwt.elemento.core.Elements.p;
+import static org.jboss.gwt.elemento.core.Elements.section;
+import static org.jboss.hal.client.configuration.subsystem.messaging.AddressTemplates.*;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafeGet;
+import static org.jboss.hal.resources.CSS.pfIcon;
+import static org.jboss.hal.resources.Ids.MESSAGING_REMOTE_ACTIVEMQ;
+
+@MbuiView
+public abstract class RemoteActiveMQView extends MbuiViewImpl<RemoteActiveMQPresenter>
+        implements RemoteActiveMQPresenter.MyView {
+
+    public static RemoteActiveMQView create(MbuiContext mbuiContext) {
+        return new Mbui_RemoteActiveMQView(mbuiContext);
+    }
+
+    @MbuiElement(""msg-remote-connection-vertical-navigation"") VerticalNavigation navigation;
+    @MbuiElement(""msg-remote-connector-table"") Table<NamedNode> connectorTable;
+    @MbuiElement(""msg-remote-connector-form"") Form<NamedNode> connectorForm;
+    @MbuiElement(""msg-remote-in-vm-connector-table"") Table<NamedNode> inVmConnectorTable;
+    @MbuiElement(""msg-remote-in-vm-connector-form"") Form<NamedNode> inVmConnectorForm;
+    @MbuiElement(""msg-remote-http-connector-table"") Table<NamedNode> httpConnectorTable;
+    @MbuiElement(""msg-remote-http-connector-form"") Form<NamedNode> httpConnectorForm;
+    @MbuiElement(""msg-remote-remote-connector-table"") Table<NamedNode> remoteConnectorTable;
+    @MbuiElement(""msg-remote-remote-connector-form"") Form<NamedNode> remoteConnectorForm;
+    @MbuiElement(""msg-remote-discovery-group-table"") Table<NamedNode> discoveryGroupTable;
+    @MbuiElement(""msg-remote-discovery-group-form"") Form<NamedNode> discoveryGroupForm;
+    @MbuiElement(""msg-remote-connection-factory-table"") Table<NamedNode> connectionFactoryTable;
+    @MbuiElement(""msg-remote-connection-factory-form"") Form<NamedNode> connectionFactoryForm;
+    @MbuiElement(""msg-remote-external-queue-table"") Table<NamedNode> externalQueueTable;
+    @MbuiElement(""msg-remote-external-queue-form"") Form<NamedNode> externalQueueForm;
+    @MbuiElement(""msg-remote-external-topic-table"") Table<NamedNode> externalTopicTable;
+    @MbuiElement(""msg-remote-external-topic-form"") Form<NamedNode> externalTopicForm;
+    private Table<NamedNode> pooledConnectionFactoryTable;
+    private Form<NamedNode> pooledConnectionFactoryForm;
+    private CredentialReference cr;
+    private Form<ModelNode> crForm;
+
+    RemoteActiveMQView(MbuiContext mbuiContext) {
+        super(mbuiContext);
+        cr = new CredentialReference(mbuiContext.eventBus(), mbuiContext.dispatcher(), mbuiContext.ca(),
+                mbuiContext.resources());
+    }
+
+    @PostConstruct
+    void init() {
+        Metadata metadata = mbuiContext.metadataRegistry().lookup(POOLED_CONNECTION_FACTORY_REMOTE_TEMPLATE);
+        crForm = cr.form(Ids.MESSAGING_REMOTE_ACTIVEMQ, metadata, CREDENTIAL_REFERENCE, PASSWORD,
+                () -> pooledConnectionFactoryForm.<String>getFormItem(PASSWORD).getValue(),
+                () -> presenter.pooledConnectionFactoryAddress(
+                        pooledConnectionFactoryTable.hasSelection() ? pooledConnectionFactoryTable.selectedRow()
+                                .getName() : null),
+                () -> presenter.reload());
+        crForm.addFormValidation(
+                new RequireAtLeastOneAttributeValidation<>(asList(STORE, CLEAR_TEXT), mbuiContext.resources()));
+
+        pooledConnectionFactoryTable = new ModelNodeTable.Builder<NamedNode>(
+                Ids.build(MESSAGING_REMOTE_ACTIVEMQ, POOLED_CONNECTION_FACTORY, Ids.TABLE), metadata)
+                .button(mbuiContext.resources().constants().add(),
+                        table -> presenter.addConnectionFactory(RemoteActiveMQSubResource.POOLED_CONNECTION_FACTORY),
+                        Constraint.executable(POOLED_CONNECTION_FACTORY_TEMPLATE, ADD))
+                .button(mbuiContext.resources().constants().remove(),
+                        table -> presenter.remove(RemoteActiveMQSubResource.POOLED_CONNECTION_FACTORY, table.selectedRow()),
+                        Scope.SELECTED,
+                        Constraint.executable(POOLED_CONNECTION_FACTORY_TEMPLATE, REMOVE))
+                .column(NAME, (cell, type, row, meta) -> row.getName())
+                .build();
+
+        pooledConnectionFactoryForm = new ModelNodeForm.Builder<NamedNode>(
+                Ids.build(Ids.MESSAGING_POOLED_CONNECTION_FACTORY, Ids.FORM), metadata)
+                .onSave((form, changedValues) -> presenter
+                        .save(RemoteActiveMQSubResource.POOLED_CONNECTION_FACTORY, form, changedValues))
+                .prepareReset(form -> presenter.reset(RemoteActiveMQSubResource.POOLED_CONNECTION_FACTORY, form))
+                .build();
+        pooledConnectionFactoryForm.addFormValidation(
+                new CredentialReference.AlternativeValidation<>(PASSWORD, () -> crForm.getModel(),
+                        mbuiContext.resources()));
+
+        Tabs tabs = new Tabs(Ids.build(Ids.MESSAGING_REMOTE_ACTIVEMQ, POOLED_CONNECTION_FACTORY, Ids.TAB_CONTAINER));
+        tabs.add(Ids.build(Ids.MESSAGING_REMOTE_ACTIVEMQ, POOLED_CONNECTION_FACTORY, ATTRIBUTES, Ids.TAB),
+                mbuiContext.resources().constants().attributes(), pooledConnectionFactoryForm.asElement());
+        tabs.add(Ids.build(Ids.MESSAGING_REMOTE_ACTIVEMQ, POOLED_CONNECTION_FACTORY, CREDENTIAL_REFERENCE, Ids.TAB),
+                Names.CREDENTIAL_REFERENCE, crForm.asElement());
+
+        HTMLElement htmlSection = section()
+                .add(h(1).textContent(Names.POOLED_CONNECTION_FACTORY))
+                .add(p().textContent(metadata.getDescription().getDescription()))
+                .add(pooledConnectionFactoryTable)
+                .add(tabs)
+                .asElement();
+
+        registerAttachable(pooledConnectionFactoryTable, pooledConnectionFactoryForm, crForm);
+
+        String primId = Ids.build(MESSAGING_REMOTE_ACTIVEMQ, POOLED_CONNECTION_FACTORY, Ids.ITEM);
+        navigation.insertPrimary(primId, null, Names.POOLED_CONNECTION_FACTORY, pfIcon(""replicator""), htmlSection);
+
+    }
+
+    @Override
+    public void attach() {
+        super.attach();
+
+        pooledConnectionFactoryTable.bindForm(pooledConnectionFactoryForm);
+        pooledConnectionFactoryTable.onSelectionChange(t -> {
+            if (t.hasSelection()) {
+                crForm.view(failSafeGet(t.selectedRow(), CREDENTIAL_REFERENCE));
+            }
+        });
+    }
+
+    @Override
+    public void setPresenter(RemoteActiveMQPresenter presenter) {
+        super.setPresenter(presenter);
+
+        // register the suggestion handlers here rather than in a @PostConstruct method
+        // they need a valid presenter reference!
+        List<AddressTemplate> connectors = asList(CONNECTOR_REMOTE_TEMPLATE, IN_VM_CONNECTOR_REMOTE_TEMPLATE,
+                HTTP_CONNECTOR_REMOTE_TEMPLATE, REMOTE_CONNECTOR_REMOTE_TEMPLATE);
+
+        connectionFactoryForm.getFormItem(CONNECTORS).registerSuggestHandler(
+                new ReadChildrenAutoComplete(mbuiContext.dispatcher(), presenter.statementContext, connectors));
+        connectionFactoryForm.getFormItem(DISCOVERY_GROUP).registerSuggestHandler(
+                new ReadChildrenAutoComplete(mbuiContext.dispatcher(), presenter.statementContext,
+                        DISCOVERY_GROUP_REMOTE_TEMPLATE));
+
+        pooledConnectionFactoryForm.getFormItem(CONNECTORS).registerSuggestHandler(
+                new ReadChildrenAutoComplete(mbuiContext.dispatcher(), presenter.statementContext, connectors));
+        pooledConnectionFactoryForm.getFormItem(DISCOVERY_GROUP).registerSuggestHandler(
+                new ReadChildrenAutoComplete(mbuiContext.dispatcher(), presenter.statementContext,
+                        DISCOVERY_GROUP_REMOTE_TEMPLATE));
+
+
+        connectorForm.getFormItem(SOCKET_BINDING).registerSuggestHandler(new ReadChildrenAutoComplete(
+                mbuiContext.dispatcher(), statementContext(), SOCKET_BINDING_TEMPLATE));
+
+        discoveryGroupForm.getFormItem(SOCKET_BINDING).registerSuggestHandler(new ReadChildrenAutoComplete(
+                mbuiContext.dispatcher(), statementContext(), SOCKET_BINDING_TEMPLATE));
+
+        remoteConnectorForm.getFormItem(SOCKET_BINDING).registerSuggestHandler(new ReadChildrenAutoComplete(
+                mbuiContext.dispatcher(), statementContext(), SOCKET_BINDING_TEMPLATE));
+
+        httpConnectorForm.getFormItem(SOCKET_BINDING).registerSuggestHandler(new ReadChildrenAutoComplete(
+                mbuiContext.dispatcher(), statementContext(), SOCKET_BINDING_TEMPLATE));
+    }
+
+    @Override
+    public void updateConnector(List<NamedNode> connectors) {
+        connectorForm.clear();
+        connectorTable.update(connectors);
+        navigation.updateBadge(""msg-remote-connector-item"", connectors.size());
+    }
+
+    @Override
+    public void updateInVmConnector(List<NamedNode> inVmConnectors) {
+        inVmConnectorForm.clear();
+        inVmConnectorTable.update(inVmConnectors);
+        navigation.updateBadge(""msg-remote-in-vm-connector-item"", inVmConnectors.size());
+    }
+
+    @Override
+    public void updateHttpConnector(List<NamedNode> httpConnectors) {
+        httpConnectorForm.clear();
+        httpConnectorTable.update(httpConnectors);
+        navigation.updateBadge(""msg-remote-http-connector-item"", httpConnectors.size());
+    }
+
+    @Override
+    public void updateRemoteConnector(List<NamedNode> remoteConnectors) {
+        remoteConnectorForm.clear();
+        remoteConnectorTable.update(remoteConnectors);
+        navigation.updateBadge(""msg-remote-remote-connector-item"", remoteConnectors.size());
+    }
+
+    @Override
+    public void updateDiscoveryGroup(List<NamedNode> nodes) {
+        discoveryGroupForm.clear();
+        discoveryGroupTable.update(nodes);
+    }
+
+    @Override
+    public void updateConnectionFactory(List<NamedNode> connectionFactories) {
+        connectionFactoryForm.clear();
+        connectionFactoryTable.update(connectionFactories);
+    }
+
+    @Override
+    public void updatePooledConnectionFactory(List<NamedNode> pooledConnectionFactories) {
+        crForm.clear();
+        pooledConnectionFactoryForm.clear();
+        pooledConnectionFactoryTable.update(pooledConnectionFactories);
+    }
+
+    @Override
+    public void updateExternalQueue(List<NamedNode> nodes) {
+        externalQueueForm.clear();
+        externalQueueTable.update(nodes);
+    }
+
+    @Override
+    public void updateExternalTopic(List<NamedNode> nodes) {
+        externalTopicForm.clear();
+        externalTopicTable.update(nodes);
+    }
+}",2018-10-18T15:29:42Z,131
"@@ -0,0 +1,207 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<?xml-model href=""https://raw.githubusercontent.com/hal/hal.next/develop/spi/src/main/resources/org/jboss/hal/spi/MbuiView.rng"" schematypens=""http://relaxng.org/ns/structure/1.0""?>
+<!--
+  ~ Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<view>
+    <vertical-navigation id=""msg-remote-connection-vertical-navigation"">
+
+        <item id=""msg-remote-connector-group-item"" title=""Connector"" icon=""fa fa-link"">
+            <sub-item id=""msg-remote-connector-item"" title=""Generic"">
+                <metadata address=""/{selected.profile}/subsystem=messaging-activemq/connector=*"">
+                    <h1>Generic Connector</h1>
+                    <p>${metadata.getDescription().getDescription()}</p>
+                    <table id=""msg-remote-connector-table"" title=""Generic Connector"" form-ref=""msg-remote-connector-form"">
+                        <actions>
+                            <action title=""${mbuiContext.resources().constants().add()}""
+                                    handler=""${presenter.add(RemoteActiveMQSubResource.CONNECTOR)}"" constraint=""add""/>
+                            <action title=""${mbuiContext.resources().constants().remove()}""
+                                    handler=""${presenter.remove(RemoteActiveMQSubResource.CONNECTOR, table.selectedRow())}""
+                                    scope=""selected"" constraint=""remove""/>
+                        </actions>
+                        <columns>
+                            <column name=""name"" value=""${row.getName()}""/>
+                        </columns>
+                    </table>
+                    <form id=""msg-remote-connector-form"" title=""Generic Connector""
+                          on-save=""${presenter.save(RemoteActiveMQSubResource.CONNECTOR, form, changedValues)}""
+                          prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.CONNECTOR, form)}""/>
+
+                </metadata>
+            </sub-item>
+            <sub-item id=""msg-remote-in-vm-connector-item"" title=""In VM"">
+                <metadata address=""/{selected.profile}/subsystem=messaging-activemq/in-vm-connector=*"">
+                    <h1>In VM Connector</h1>
+                    <p>${metadata.getDescription().getDescription()}</p>
+                    <table id=""msg-remote-in-vm-connector-table"" title=""In VM Connector""
+                           form-ref=""msg-remote-in-vm-connector-form"">
+                        <actions>
+                            <action title=""${mbuiContext.resources().constants().add()}""
+                                    handler=""${presenter.add(RemoteActiveMQSubResource.IN_VM_CONNECTOR)}"" constraint=""add""/>
+                            <action title=""${mbuiContext.resources().constants().remove()}""
+                                    handler=""${presenter.remove(RemoteActiveMQSubResource.IN_VM_CONNECTOR, table.selectedRow())}""
+                                    scope=""selected"" constraint=""remove""/>
+                        </actions>
+                        <columns>
+                            <column name=""name"" value=""${row.getName()}""/>
+                            <column name=""server-id""/>
+                        </columns>
+                    </table>
+                    <form id=""msg-remote-in-vm-connector-form"" title=""In VM Connector""
+                          on-save=""${presenter.save(RemoteActiveMQSubResource.IN_VM_CONNECTOR, form, changedValues)}""
+                          prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.IN_VM_CONNECTOR, form)}""/>
+                </metadata>
+            </sub-item>
+            <sub-item id=""msg-remote-http-connector-item"" title=""HTTP"">
+                <metadata address=""/{selected.profile}/subsystem=messaging-activemq/http-connector=*"">
+                    <h1>HTTP Connector</h1>
+                    <p>${metadata.getDescription().getDescription()}</p>
+                    <table id=""msg-remote-http-connector-table"" title=""HTTP Connector""
+                           form-ref=""msg-remote-http-connector-form"">
+                        <actions>
+                            <action title=""${mbuiContext.resources().constants().add()}""
+                                    handler=""${presenter.addHttpConnector()}"" constraint=""add""/>
+                            <action title=""${mbuiContext.resources().constants().remove()}""
+                                    handler=""${presenter.remove(RemoteActiveMQSubResource.HTTP_CONNECTOR, table.selectedRow())}""
+                                    scope=""selected"" constraint=""remove""/>
+                        </actions>
+                        <columns>
+                            <column name=""name"" value=""${row.getName()}""/>
+                        </columns>
+                    </table>
+                    <form id=""msg-remote-http-connector-form"" title=""HTTP Connector""
+                          on-save=""${presenter.save(RemoteActiveMQSubResource.HTTP_CONNECTOR, form, changedValues)}""
+                          prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.HTTP_CONNECTOR, form)}""/>
+                </metadata>
+            </sub-item>
+            <sub-item id=""msg-remote-remote-connector-item"" title=""Remote"">
+                <metadata address=""/{selected.profile}/subsystem=messaging-activemq/remote-connector=*"">
+                    <h1>Remote Connector</h1>
+                    <p>${metadata.getDescription().getDescription()}</p>
+                    <table id=""msg-remote-remote-connector-table"" title=""Remote Connector""
+                           form-ref=""msg-remote-remote-connector-form"">
+                        <actions>
+                            <action title=""${mbuiContext.resources().constants().add()}""
+                                    handler=""${presenter.addRemoteConnector()}""
+                                    constraint=""add""/>
+                            <action title=""${mbuiContext.resources().constants().remove()}""
+                                    handler=""${presenter.remove(RemoteActiveMQSubResource.REMOTE_CONNECTOR, table.selectedRow())}""
+                                    scope=""selected"" constraint=""remove""/>
+                        </actions>
+                        <columns>
+                            <column name=""name"" value=""${row.getName()}""/>
+                        </columns>
+                    </table>
+                    <form id=""msg-remote-remote-connector-form"" title=""Remote Connector""
+                          on-save=""${presenter.save(RemoteActiveMQSubResource.REMOTE_CONNECTOR, form, changedValues)}""
+                          prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.REMOTE_CONNECTOR, form)}"" />
+                </metadata>
+            </sub-item>
+        </item>
+
+        <item id=""msg-remote-discovery-group-item"" title=""Discovery Group"" icon=""pficon pficon-service"">
+            <metadata address=""/{selected.profile}/subsystem=messaging-activemq/discovery-group=*"">
+                <h1>Discovery Group</h1>
+                <p>${metadata.getDescription().getDescription()}</p>
+                <table id=""msg-remote-discovery-group-table"" title=""Discovery Group""
+                       form-ref=""msg-remote-discovery-group-form"">
+                    <actions>
+                        <action title=""${mbuiContext.resources().constants().add()}""
+                                handler=""${presenter.add(RemoteActiveMQSubResource.DISCOVERY_GROUP)}"" constraint=""add""/>
+                        <action title=""${mbuiContext.resources().constants().remove()}""
+                                handler=""${presenter.remove(RemoteActiveMQSubResource.DISCOVERY_GROUP, table.selectedRow())}""
+                                scope=""selected"" constraint=""remove""/>
+                    </actions>
+                    <columns>
+                        <column name=""name"" value=""${row.getName()}""/>
+                    </columns>
+                </table>
+                <form id=""msg-remote-discovery-group-form"" title=""Discovery Group""
+                      on-save=""${presenter.save(RemoteActiveMQSubResource.DISCOVERY_GROUP, form, changedValues)}""
+                      prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.DISCOVERY_GROUP, form)}"" />
+            </metadata>
+        </item>
+
+        <item id=""msg-remote-connection-factory-item"" title=""Connection Factory"" icon=""fa fa-cubes"">
+            <metadata address=""/{selected.profile}/subsystem=messaging-activemq/connection-factory=*"">
+                <h1>Connection Factory</h1>
+                <p>${metadata.getDescription().getDescription()}</p>
+                <table id=""msg-remote-connection-factory-table"" title=""Connection Factory""
+                       form-ref=""msg-remote-connection-factory-form"">
+                    <actions>
+                        <action title=""${mbuiContext.resources().constants().add()}""
+                                handler=""${presenter.addConnectionFactory(RemoteActiveMQSubResource.CONNECTION_FACTORY)}"" constraint=""add""/>
+                        <action title=""${mbuiContext.resources().constants().remove()}""
+                                handler=""${presenter.remove(RemoteActiveMQSubResource.CONNECTION_FACTORY, table.selectedRow())}""
+                                scope=""selected"" constraint=""remove""/>
+                    </actions>
+                    <columns>
+                        <column name=""name"" value=""${row.getName()}""/>
+                    </columns>
+                </table>
+                <form id=""msg-remote-connection-factory-form"" title=""Connection Factory""
+                      on-save=""${presenter.save(RemoteActiveMQSubResource.CONNECTION_FACTORY, form, changedValues)}""
+                      prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.CONNECTION_FACTORY, form)}""/>
+            </metadata>
+        </item>
+
+        <item id=""msg-remote-external-queue-item"" title=""External JMS Queue"" icon=""fa fa-long-arrow-right"">
+            <metadata address=""/{selected.profile}/subsystem=messaging-activemq/external-jms-queue=*"">
+                <h1>External JMS Queue</h1>
+                <p>${metadata.getDescription().getDescription()}</p>
+                <table id=""msg-remote-external-queue-table"" title=""External JMS Queue""
+                       form-ref=""msg-remote-external-queue-form"">
+                    <actions>
+                        <action title=""${mbuiContext.resources().constants().add()}""
+                                handler=""${presenter.add(RemoteActiveMQSubResource.EXTERNAL_QUEUE)}"" constraint=""add""/>
+                        <action title=""${mbuiContext.resources().constants().remove()}""
+                                handler=""${presenter.remove(RemoteActiveMQSubResource.EXTERNAL_QUEUE, table.selectedRow())}""
+                                scope=""selected"" constraint=""remove""/>
+                    </actions>
+                    <columns>
+                        <column name=""name"" value=""${row.getName()}""/>
+                    </columns>
+                </table>
+                <form id=""msg-remote-external-queue-form"" title=""External JMS Queue""
+                      on-save=""${presenter.save(RemoteActiveMQSubResource.EXTERNAL_QUEUE, form, changedValues)}""
+                      prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.EXTERNAL_QUEUE, form)}""/>
+            </metadata>
+        </item>
+
+        <item id=""msg-remote-external-topic-item"" title=""External JMS Topic"" icon=""fa fa-arrows"">
+            <metadata address=""/{selected.profile}/subsystem=messaging-activemq/external-jms-topic=*"">
+                <h1>External JMS Topic</h1>
+                <p>${metadata.getDescription().getDescription()}</p>
+                <table id=""msg-remote-external-topic-table"" title=""External JMS Topic""
+                       form-ref=""msg-remote-external-topic-form"">
+                    <actions>
+                        <action title=""${mbuiContext.resources().constants().add()}""
+                                handler=""${presenter.add(RemoteActiveMQSubResource.EXTERNAL_TOPIC)}"" constraint=""add""/>
+                        <action title=""${mbuiContext.resources().constants().remove()}""
+                                handler=""${presenter.remove(RemoteActiveMQSubResource.EXTERNAL_TOPIC, table.selectedRow())}""
+                                scope=""selected"" constraint=""remove""/>
+                    </actions>
+                    <columns>
+                        <column name=""name"" value=""${row.getName()}""/>
+                    </columns>
+                </table>
+                <form id=""msg-remote-external-topic-form"" title=""External JMS Topic""
+                      on-save=""${presenter.save(RemoteActiveMQSubResource.EXTERNAL_TOPIC, form, changedValues)}""
+                      prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.EXTERNAL_TOPIC, form)}""/>
+            </metadata>
+        </item>
+
+    </vertical-navigation>
+</view>
\ No newline at end of file",2018-10-18T15:29:42Z,132
"@@ -80,7 +80,7 @@ public void attach() {
             } else {
                 if (!Strings.isNullOrEmpty(stringValue)) {
                     try {
-                        Long value = Long.parseLong(stringValue);
+                        Long value = Long.parseLong(stringValue.trim());
                         modifyValue(value);
                         logger.debug(""modified value to {}"", value);
                     } catch (NumberFormatException ignored) {
@@ -177,10 +177,12 @@ class NumberValidation implements FormItemValidation<Long> {
 
         @Override
         public ValidationResult validate(Long value) {
-            if (!isExpressionValue() && !isEmpty()) {
+            // use the inputElement.value instead of isEmpty because the isEmpty evaluates the getValue() method
+            // the attach method already bind numbers only values, so this validation would always returns numbers only
+            if (!isExpressionValue() && inputElement.value != null) {
                 try {
                     //noinspection ResultOfMethodCallIgnored
-                    Long.parseLong(inputElement.value);
+                    Long.parseLong(inputElement.value.trim());
                     return ValidationResult.OK;
                 } catch (NumberFormatException e) {
                     return ValidationResult.invalid(CONSTANTS.notANumber());",2018-10-18T15:29:42Z,133
"@@ -294,6 +294,8 @@ public interface ModelDescriptionConstants {
     String EXPRESSION = ""expression"";
     String EXPRESSIONS_ALLOWED = ""expressions-allowed"";
     String EXTENSION_POINT = ""extension-point"";
+    String EXTERNAL_JMS_QUEUE = ""external-jms-queue"";
+    String EXTERNAL_JMS_TOPIC = ""external-jms-topic"";
     String FAILED = ""failed"";
     String FAILED_OPERATION = ""failed-operation"";
     String FAILED_SERVICES = ""failed-services"";",2018-10-18T15:29:42Z,109
"@@ -79,6 +79,7 @@ public interface NameTokens {
     String MANAGEMENT_INTERFACE = ""management-interface"";
     String MANAGEMENT_OPERATIONS = ""management-operations"";
     String MESSAGING = ""messaging"";
+    String MESSAGING_REMOTE_ACTIVEMQ = ""msg-remote-activemq"";
     String MESSAGING_SERVER = ""messaging-server"";
     String MESSAGING_SERVER_CONNECTION = ""messaging-server-connection"";
     String MESSAGING_SERVER_CLUSTERING = ""messaging-server-clustering"";",2018-10-18T15:29:42Z,46
"@@ -462,6 +462,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String reloadCRL();
     String reloadRequired();
     String reloadStandaloneTooltip();
+    String remoteActiveMQServer();
     String remoteAddress();
     String remove();
     String removeAlias();",2018-10-18T15:29:42Z,100
"@@ -493,6 +493,7 @@ public interface Ids {
     String MESSAGING_CORE_QUEUE = ""messaging-core-queue"";
     String MESSAGING_DISCOVERY_GROUP = ""messaging-discovery-group"";
     String MESSAGING_DIVERT = ""messaging-divert"";
+    String MESSAGING_REMOTE_ACTIVEMQ = ""msg-remote-activemq"";
     String MESSAGING_GLOBAL_SETTINGS = ""messaging-global-settings"";
     String MESSAGING_GROUPING_HANDLER = ""messaging-grouping-handler"";
     String MESSAGING_HA_CHOOSE_STRATEGY = ""messaging-ha-choose-strategy"";",2018-10-18T15:29:42Z,111
"@@ -116,6 +116,8 @@ public interface Names {
     String EXPIRATION = ""Expiration"";
     String EXTENSION = ""Extension"";
     String EXTENSIONS = ""Extensions"";
+    String EXTERNAL_JMS_QUEUE = ""External JMS Queue"";
+    String EXTERNAL_JMS_TOPIC = ""External JMS Topic"";
 
     String FACTORIES_TRANSFORMERS = ""Factories / Transformers"";
     String FILE = ""File"";
@@ -225,6 +227,7 @@ public interface Names {
     String MEMORY = ""Memory"";
     String MESSAGE_DRIVEN_BEAN = ""Message Driven Bean"";
     String MESSAGING = ""Messaging"";
+    String MESSAGING_REMOTE_ACTIVEMQ = ""Remote ActiveMQ"";
     String MIME_MAPPING = ""Mime Mapping"";
     String MINIMUM_PERMISSIONS = ""Minimum Permissions"";
     String MISSING_DEPENDENCIES = ""Missing Dependencies"";",2018-10-18T15:29:42Z,112
"@@ -154,6 +154,9 @@ public interface Previews extends ClientBundleWithLookup {
     @Source(""previews/configuration/messaging-destinations.html"")
     ExternalTextResource configurationMessagingDestinations();
 
+    @Source(""previews/configuration/messaging-remote-activemq.html"")
+    ExternalTextResource configurationMessagingRemoteActiveMQ();
+
     @Source(""previews/configuration/messaging-ha-policy.html"")
     ExternalTextResource configurationMessagingHaPolicy();
 ",2018-10-18T15:29:42Z,134
"@@ -420,6 +420,7 @@ reloadCRL=Reload CRL
 reloadRequired=Reload Required
 reloadStandaloneTooltip=The server configuration has changed. Click here to reload the server.
 remoteAddress=Remote Address
+remoteActiveMQServer=Remote ActiveMQ Server
 remove=Remove
 removeAlias=Remove Alias
 removeIdentity=Remove identity",2018-10-18T15:29:42Z,100
"@@ -418,6 +418,7 @@ reloadCRL=Recarregar CRL
 reloadRequired=Recarregamento necess\u00E1rio
 reloadStandaloneTooltip=A configura\u00E7\u00E3o do servidor foi alterada. Clique aqui para recarregar o servidor.
 remoteAddress=Endere\u00E7o remoto
+remoteActiveMQServer=Servidor ActiveMQ Remoto
 remove=Remover
 removeAlias=Remover alias
 removeContent=Remover Conte\u00FAdo",2018-10-18T15:29:42Z,100
"@@ -0,0 +1,26 @@
+<p>Contains the configuration for discover groups, connector, connection factory, queues and topics to a remote ActiveMQ Artemis server:</p>
+
+<h2>Connectors</h2>
+<p>A connector defines how to connect to a remote ActiveMQ Artemis server.</p>
+
+<p>For more information about connectors, see the
+    <a target=""_blank"" href=""https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.1/html/configuring_messaging/acceptors_and_connectors"">Connectors documentation</a>.
+</p>
+
+<h2>Discovery Groups</h2>
+<p>A discovery group defines how connector information is received from a broadcast endpoint, for example, a UDP multicast address or JGroup channel.</p>
+<p>A discovery group maintains a list of connectors, one for each broadcast by a different server. As it receives broadcasts on the broadcast endpoint from a particular server, it updates its entry in the list for that server. If it has not received a broadcast from a particular server for a length of time it will remove that server’s entry from its list.</p>
+
+
+<h2>Connection Factories</h2>
+<p>By default, the ${build.shortName} messaging subsystem provides the <code>InVmConnectionFactory</code> and
+    <code>RemoteConnectionFactory</code> connection factories, as well as the
+    <code>activemq-ra</code> pooled connection factory.
+</p>
+
+<p>Pooled connection factories allow you to configure the inbound and outbound connectors of the remote ActiveMQ Artemis resource adapter. For more information on configuring a pooled-connection-factory to connect to a remote ActiveMQ Artemis server, see
+    <a target=""_blank"" href=""https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.1/html/configuring_messaging/resource_adapters#use_provided_amq_adapter"">Using the Integrated Resource Adapter for Remote Connections</a>.
+</p>
+
+<h2>External Queue / Topic</h2>
+<p>The queues and topics that exists in the remote ActiveMQ Artemis server.</p>",2018-10-18T15:29:42Z,135
"@@ -42,6 +42,8 @@
 import org.jboss.hal.client.configuration.subsystem.deploymentscanner.Mbui_DeploymentScannerView_Provider;
 import org.jboss.hal.client.configuration.subsystem.ee.EEPresenter;
 import org.jboss.hal.client.configuration.subsystem.ee.EEView;
+import org.jboss.hal.client.configuration.subsystem.ejb.EjbPresenter;
+import org.jboss.hal.client.configuration.subsystem.ejb.Mbui_EjbView_Provider;
 import org.jboss.hal.client.configuration.subsystem.iiop.IiopPresenter;
 import org.jboss.hal.client.configuration.subsystem.iiop.Mbui_IiopView_Provider;
 import org.jboss.hal.client.configuration.subsystem.io.IOPresenter;
@@ -175,6 +177,11 @@ protected void configure() {
                 Mbui_DeploymentScannerView_Provider.class,
                 DeploymentScannerPresenter.MyProxy.class);
 
+        bindTemplatedPresenter(EjbPresenter.class,
+                EjbPresenter.MyView.class,
+                Mbui_EjbView_Provider.class,
+                EjbPresenter.MyProxy.class);
+
         bindPresenter(EEPresenter.class,
                 EEPresenter.MyView.class,
                 EEView.class,
@@ -194,7 +201,7 @@ protected void configure() {
                 IiopPresenter.MyView.class,
                 Mbui_IiopView_Provider.class,
                 IiopPresenter.MyProxy.class);
-
+        
         bindTemplatedPresenter(IOPresenter.class,
                 IOPresenter.MyView.class,
                 Mbui_IOView_Provider.class,",2016-09-15T20:25:46Z,44
"@@ -0,0 +1,64 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.ejb;
+
+import org.jboss.hal.meta.AddressTemplate;
+
+/**
+ * @author Claudio Miranda
+ */
+public interface AddressTemplates {
+
+    // Container
+    String EJB_SUBSYSTEM_ADDRESS = ""/{selected.profile}/subsystem=ejb3"";
+    String THREAD_POOL_ADDRESS = EJB_SUBSYSTEM_ADDRESS + ""/thread-pool=*"";
+    String REMOTING_PROFILE_ADDRESS = EJB_SUBSYSTEM_ADDRESS + ""/remoting-profile=*"";
+    
+    // bean pools
+    String BEAN_POOL_ADDRESS = EJB_SUBSYSTEM_ADDRESS + ""/strict-max-bean-instance-pool=*"";
+    
+    // state management
+    String CACHE_ADDRESS = EJB_SUBSYSTEM_ADDRESS + ""/cache=*"";
+    String PASSIVATION_ADDRESS = EJB_SUBSYSTEM_ADDRESS + ""/passivation-store=*"";
+    
+    // Services 
+    String SERVICE_ASYNC_ADDRESS = EJB_SUBSYSTEM_ADDRESS + ""/service=async"";
+    String SERVICE_IIOP_ADDRESS = EJB_SUBSYSTEM_ADDRESS + ""/service=iiop"";
+    String SERVICE_REMOTE_ADDRESS = EJB_SUBSYSTEM_ADDRESS + ""/service=remote"";
+    String SERVICE_TIMER_ADDRESS = EJB_SUBSYSTEM_ADDRESS + ""/service=timer-service"";
+
+    String MDB_DELIVERY_GROUP_ADDRESS = EJB_SUBSYSTEM_ADDRESS + ""/mdb-delivery-group=*"";
+    
+    String APP_SEC_DOMAIN_ADDRESS = EJB_SUBSYSTEM_ADDRESS + ""/application-security-domain=*"";
+
+    AddressTemplate EJB_SUBSYSTEM_TEMPLATE = AddressTemplate.of(EJB_SUBSYSTEM_ADDRESS);
+    AddressTemplate THREAD_POOL_TEMPLATE = AddressTemplate.of(THREAD_POOL_ADDRESS);
+    AddressTemplate REMOTING_PROFILE_TEMPLATE = AddressTemplate.of(REMOTING_PROFILE_ADDRESS);
+    
+    AddressTemplate BEAN_POOL_TEMPLATE = AddressTemplate.of(BEAN_POOL_ADDRESS);
+    
+    AddressTemplate CACHE_TEMPLATE = AddressTemplate.of(CACHE_ADDRESS);
+    AddressTemplate PASSIVATION_TEMPLATE = AddressTemplate.of(PASSIVATION_ADDRESS);
+    
+    AddressTemplate SERVICE_ASYNC_TEMPLATE = AddressTemplate.of(SERVICE_ASYNC_ADDRESS);
+    AddressTemplate SERVICE_IIOP_TEMPLATE = AddressTemplate.of(SERVICE_IIOP_ADDRESS);
+    AddressTemplate SERVICE_REMOTE_TEMPLATE = AddressTemplate.of(SERVICE_REMOTE_ADDRESS);
+    AddressTemplate SERVICE_TIMER_TEMPLATE = AddressTemplate.of(SERVICE_TIMER_ADDRESS);
+    
+    AddressTemplate MDB_DELIVERY_GROUP_TEMPLATE = AddressTemplate.of(MDB_DELIVERY_GROUP_ADDRESS);
+    
+    AddressTemplate APP_SEC_DOMAIN_TEMPLATE = AddressTemplate.of(APP_SEC_DOMAIN_ADDRESS);
+}",2016-09-15T20:25:46Z,136
"@@ -0,0 +1,137 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.ejb;
+
+import java.util.List;
+import javax.inject.Inject;
+
+import com.google.web.bindery.event.shared.EventBus;
+import com.gwtplatform.mvp.client.annotations.NameToken;
+import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
+import com.gwtplatform.mvp.client.proxy.ProxyPlace;
+import org.jboss.hal.core.finder.Finder;
+import org.jboss.hal.core.finder.FinderPath;
+import org.jboss.hal.core.finder.FinderPathFactory;
+import org.jboss.hal.core.mbui.MbuiPresenter;
+import org.jboss.hal.core.mbui.MbuiView;
+import org.jboss.hal.core.mvp.HasVerticalNavigation;
+import org.jboss.hal.dmr.ModelDescriptionConstants;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.dmr.model.NamedNode;
+import org.jboss.hal.dmr.model.Operation;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.meta.token.NameTokens;
+import org.jboss.hal.spi.Requires;
+
+import static org.jboss.hal.client.configuration.subsystem.ejb.AddressTemplates.*;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.READ_RESOURCE_OPERATION;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.RECURSIVE;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.SERVICE;
+import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafePropertyList;
+
+/**
+ * @author Claudio Miranda
+ */
+public class EjbPresenter extends MbuiPresenter<EjbPresenter.MyView, EjbPresenter.MyProxy> {
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @NameToken(NameTokens.EJB3)
+    @Requires({EJB_SUBSYSTEM_ADDRESS})
+    public interface MyProxy extends ProxyPlace<EjbPresenter> {}
+
+    public interface MyView extends MbuiView<EjbPresenter>, HasVerticalNavigation {
+        void updateConfiguration(ModelNode conf);
+        void updateThreadPool(List<NamedNode> items);
+        void updateRemotingProfile(List<NamedNode> items);
+        
+        void updateBeanPool(List<NamedNode> items);
+        
+        void updateCache(List<NamedNode> items);
+        void updatePassivation(List<NamedNode> items);
+        
+        void updateServiceAsync(ModelNode node);
+        void updateServiceIiop(ModelNode node);
+        void updateServiceRemote(ModelNode node);
+        void updateServiceTimer(ModelNode node);
+        
+        void updateMdbDeliveryGroup(List<NamedNode> items);
+        
+        void updateApplicationSecurityDomain(List<NamedNode> items);
+    }
+    // @formatter:on
+
+    private final FinderPathFactory finderPathFactory;
+    private final StatementContext statementContext;
+    private final Dispatcher dispatcher;
+
+    @Inject
+    public EjbPresenter(final EventBus eventBus,
+            final MyView view,
+            final MyProxy proxy,
+            final Finder finder,
+            final FinderPathFactory finderPathFactory,
+            final StatementContext statementContext,
+            final Dispatcher dispatcher) {
+        super(eventBus, view, proxy, finder);
+        this.finderPathFactory = finderPathFactory;
+        this.statementContext = statementContext;
+        this.dispatcher = dispatcher;
+    }
+
+    @Override
+    protected void onBind() {
+        super.onBind();
+        getView().setPresenter(this);
+    }
+
+    @Override
+    protected FinderPath finderPath() {
+        return finderPathFactory.subsystemPath(ModelDescriptionConstants.EJB3);
+    }
+
+    @Override
+    protected void reload() {
+        Operation operation = new Operation.Builder(READ_RESOURCE_OPERATION,
+                EJB_SUBSYSTEM_TEMPLATE.resolve(statementContext))
+                .param(RECURSIVE, true)
+                .build();
+        dispatcher.execute(operation, result -> {
+            // @formatter:off
+            getView().updateConfiguration(result);
+            
+            getView().updateThreadPool(asNamedNodes(failSafePropertyList(result, THREAD_POOL_TEMPLATE.lastKey())));
+            getView().updateRemotingProfile(asNamedNodes(failSafePropertyList(result, REMOTING_PROFILE_TEMPLATE.lastKey())));
+            
+            getView().updateBeanPool(asNamedNodes(failSafePropertyList(result, BEAN_POOL_TEMPLATE.lastKey())));
+            
+            getView().updateCache(asNamedNodes(failSafePropertyList(result, CACHE_TEMPLATE.lastKey())));
+            getView().updatePassivation(asNamedNodes(failSafePropertyList(result, PASSIVATION_TEMPLATE.lastKey())));
+            
+            getView().updateServiceAsync(result.get(SERVICE).get(SERVICE_ASYNC_TEMPLATE.lastValue()));
+            getView().updateServiceIiop(result.get(SERVICE).get(SERVICE_IIOP_TEMPLATE.lastValue()));
+            getView().updateServiceRemote(result.get(SERVICE).get(SERVICE_REMOTE_TEMPLATE.lastValue()));
+            getView().updateServiceTimer(result.get(SERVICE).get(SERVICE_TIMER_TEMPLATE.lastValue()));
+            
+            getView().updateMdbDeliveryGroup(asNamedNodes(failSafePropertyList(result, MDB_DELIVERY_GROUP_TEMPLATE.lastKey())));
+            
+            getView().updateApplicationSecurityDomain(asNamedNodes(failSafePropertyList(result, APP_SEC_DOMAIN_TEMPLATE.lastKey())));
+            // @formatter:on
+        });
+    }
+}",2016-09-15T20:25:46Z,137
"@@ -0,0 +1,155 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.ejb;
+
+import java.util.List;
+
+import org.jboss.hal.ballroom.VerticalNavigation;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.table.Api.RefreshMode;
+import org.jboss.hal.ballroom.table.DataTable;
+import org.jboss.hal.core.mbui.MbuiContext;
+import org.jboss.hal.core.mbui.MbuiViewImpl;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.model.NamedNode;
+import org.jboss.hal.spi.MbuiElement;
+import org.jboss.hal.spi.MbuiView;
+
+/**
+ * @author Claudio Miranda
+ */
+@MbuiView
+@SuppressWarnings({""DuplicateStringLiteralInspection"", ""HardCodedStringLiteral"", ""WeakerAccess""})
+public abstract class EjbView extends MbuiViewImpl<EjbPresenter> implements EjbPresenter.MyView {
+
+    // ------------------------------------------------------ initialization
+
+    public static EjbView create(final MbuiContext mbuiContext) {
+        return new Mbui_EjbView(mbuiContext);
+    }
+
+    @MbuiElement(""ejb-vertical-navigation"") VerticalNavigation navigation;
+    
+    @MbuiElement(""configuration-form"") Form<ModelNode> configurationForm;
+    
+    @MbuiElement(""thread-pool-table"") DataTable<NamedNode> threadPoolTable;
+    @MbuiElement(""thread-pool-form"") Form<NamedNode> threadPoolForm;
+    
+    @MbuiElement(""remoting-profile-table"") DataTable<NamedNode> remotingProfileTable;
+    @MbuiElement(""remoting-profile-form"") Form<NamedNode> remotingProfileForm;
+    
+    @MbuiElement(""bean-pool-table"") DataTable<NamedNode> beanPoolTable;
+    @MbuiElement(""bean-pool-form"") Form<NamedNode> beanPoolForm;
+    
+    @MbuiElement(""cache-table"") DataTable<NamedNode> cacheTable;
+    @MbuiElement(""cache-form"") Form<NamedNode> cacheForm;
+
+    @MbuiElement(""passivation-table"") DataTable<NamedNode> passivationTable;
+    @MbuiElement(""passivation-form"") Form<NamedNode> passivationForm;
+
+    @MbuiElement(""service-async-form"") Form<ModelNode> serviceAsyncForm;
+    @MbuiElement(""service-iiop-form"") Form<ModelNode> serviceIiopForm;
+    @MbuiElement(""service-remote-form"") Form<ModelNode> serviceRemoteForm;
+    @MbuiElement(""service-timer-form"") Form<ModelNode> serviceTimerForm;
+
+    @MbuiElement(""mdb-delivery-group-table"") DataTable<NamedNode> mdbDeliveryGroupTable;
+    @MbuiElement(""mdb-delivery-group-form"") Form<NamedNode> mdbDeliveryGroupForm;
+
+    @MbuiElement(""app-security-domain-table"") DataTable<NamedNode> appSecurityDomainTable;
+    @MbuiElement(""app-security-domain-form"") Form<NamedNode> appSecurityDomainForm;
+
+
+    EjbView(final MbuiContext mbuiContext) {
+        super(mbuiContext);
+    }
+
+
+    // ------------------------------------------------------ form and table updates from DMR
+
+    @Override
+    public void updateConfiguration(ModelNode configuration) {
+        configurationForm.view(configuration);
+    }
+
+    @Override
+    public void updateThreadPool(final List<NamedNode> items) {
+        threadPoolTable.api().clear().add(items).refresh(RefreshMode.RESET);
+        threadPoolForm.clear();
+    }
+
+    @Override
+    public void updateRemotingProfile(final List<NamedNode> items) {
+        remotingProfileTable.api().clear().add(items).refresh(RefreshMode.RESET);
+        remotingProfileForm.clear();
+    }
+
+    @Override
+    public void updateBeanPool(final List<NamedNode> items) {
+        beanPoolTable.api().clear().add(items).refresh(RefreshMode.RESET);
+        beanPoolForm.clear();
+    }
+
+    @Override
+    public void updateCache(final List<NamedNode> items) {
+        cacheTable.api().clear().add(items).refresh(RefreshMode.RESET);
+        cacheForm.clear();
+    }
+
+    @Override
+    public void updatePassivation(final List<NamedNode> items) {
+        passivationTable.api().clear().add(items).refresh(RefreshMode.RESET);
+        passivationForm.clear();
+    }
+
+    @Override
+    public void updateServiceAsync(ModelNode node) {
+        serviceAsyncForm.view(node);
+    }
+
+    @Override
+    public void updateServiceIiop(ModelNode node) {
+        serviceIiopForm.view(node);
+    }
+    
+    @Override
+    public void updateServiceRemote(ModelNode node) {
+        serviceRemoteForm.view(node);
+    }
+
+    @Override
+    public void updateServiceTimer(ModelNode node) {
+        serviceTimerForm.view(node);
+    }
+
+    @Override
+    public void updateMdbDeliveryGroup(List<NamedNode> items) {
+        mdbDeliveryGroupTable.api().clear().add(items).refresh(RefreshMode.RESET);
+        mdbDeliveryGroupForm.clear();
+    }
+
+    @Override
+    public void updateApplicationSecurityDomain(List<NamedNode> items) {
+        appSecurityDomainTable.api().clear().add(items).refresh(RefreshMode.RESET);
+        appSecurityDomainForm.clear();
+    }
+
+    // ------------------------------------------------------ view / mbui contract
+
+    @Override
+    public VerticalNavigation getVerticalNavigation() {
+        return navigation;
+    }
+}",2016-09-15T20:25:46Z,138
"@@ -173,7 +173,7 @@
 //noinspection CssUnknownTarget
 @navbar-pf-alt-bg-img:  url(""../img/bg-navbar-pf-alt.svg"");
 
-
+@nav-pf-vertical-width: 230px;
 
 /*
  * HAL",2016-09-15T20:25:46Z,139
"@@ -0,0 +1,295 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<?xml-model href=""https://raw.githubusercontent.com/hal/hal.next/develop/spi/src/main/resources/org/jboss/hal/spi/MbuiView.rng"" schematypens=""http://relaxng.org/ns/structure/1.0""?>
+<!--
+  ~ Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<view>
+    <vertical-navigation id=""ejb-vertical-navigation"">
+
+        <item id=""container-item"" title=""Container"" icon=""fa fa-cogs"">
+            
+            <sub-item id=""configuration-item"" title=""Container"">
+                <metadata address=""/{selected.profile}/subsystem=ejb3"">
+                    <h1>Container</h1>
+                    <p>{{metadata.getDescription().getDescription()}}</p>
+                    <form id=""configuration-form"" title=""Container"" auto-save=""true"" />
+                </metadata>
+            </sub-item>
+            
+            
+            <sub-item id=""thread-pool-item"" title=""Thread Pool"">
+                <metadata address=""/{selected.profile}/subsystem=ejb3/thread-pool=*"">
+                    <h1>Thread Pool</h1>
+                    <p>{{metadata.getDescription().getDescription()}}</p>
+                    <table id=""thread-pool-table"" title=""Thread Pool"" form-ref=""thread-pool-form"">
+                        <actions>
+                            <action handler-ref=""add-resource"">
+                            </action>
+                            <action handler-ref=""remove-resource"" scope=""selected""
+                                    name-resolver=""{{api.selectedRow().getName()}}""/>
+                        </actions>
+                        <columns>
+                            <column name=""name"" value=""{{row.getName()}}""/>
+                        </columns>
+                    </table>
+                    <form id=""thread-pool-form"" title=""Thread Pool"" auto-save=""true""
+                          name-resolver=""{{form.getModel().getName()}}"">
+                    </form>
+                </metadata>
+            </sub-item>
+            
+            <sub-item id=""remoting-profile-item"" title=""Remoting Profile"">
+                <metadata address=""/{selected.profile}/subsystem=ejb3/remoting-profile=*"">
+                    <h1>Remoting Profile</h1>
+                    <p>{{metadata.getDescription().getDescription()}}</p>
+                    <table id=""remoting-profile-table"" title=""Remoting Profile"" form-ref=""remoting-profile-form"">
+                        <actions>
+                            <action handler-ref=""add-resource"">
+                            </action>
+                            <action handler-ref=""remove-resource"" scope=""selected""
+                                    name-resolver=""{{api.selectedRow().getName()}}""/>
+                        </actions>
+                        <columns>
+                            <column name=""name"" value=""{{row.getName()}}""/>
+                        </columns>
+                    </table>
+                    <form id=""remoting-profile-form"" title=""Remoting Profile"" auto-save=""true""
+                          name-resolver=""{{form.getModel().getName()}}"">
+                    </form>
+                </metadata>
+            </sub-item>
+        </item>
+        
+        <item id=""bean-pool-item"" title=""Bean Pool"" icon=""pficon pficon-repository"">
+            <metadata address=""/{selected.profile}/subsystem=ejb3/strict-max-bean-instance-pool=*"">
+                <h1>Bean Pool</h1>
+                <p>{{metadata.getDescription().getDescription()}}</p>
+                <table id=""bean-pool-table"" title=""Bean Pool"" form-ref=""bean-pool-form"">
+                    <actions>
+                        <action handler-ref=""add-resource"">
+                        </action>
+                        <action handler-ref=""remove-resource"" scope=""selected""
+                                name-resolver=""{{api.selectedRow().getName()}}""/>
+                    </actions>
+                    <columns>
+                        <column name=""name"" value=""{{row.getName()}}""/>
+                    </columns>
+                </table>
+                <form id=""bean-pool-form"" title=""Bean Pool"" auto-save=""true""
+                      name-resolver=""{{form.getModel().getName()}}"">
+                </form>
+            </metadata>
+        </item>
+
+        <item id=""state-item"" title=""State Management"" icon=""fa fa-list-ul"">
+
+            <sub-item id=""cache-item"" title=""Cache"">
+                <metadata address=""/{selected.profile}/subsystem=ejb3/cache=*"">
+                    <h1>Cache</h1>
+                    <p>{{metadata.getDescription().getDescription()}}</p>
+                    <table id=""cache-table"" title=""Cache"" form-ref=""cache-form"">
+                        <actions>
+                            <action handler-ref=""add-resource"">
+                            </action>
+                            <action handler-ref=""remove-resource"" scope=""selected""
+                                    name-resolver=""{{api.selectedRow().getName()}}""/>
+                        </actions>
+                        <columns>
+                            <column name=""name"" value=""{{row.getName()}}""/>
+                        </columns>
+                    </table>
+                    <form id=""cache-form"" title=""Cache"" auto-save=""true""
+                          name-resolver=""{{form.getModel().getName()}}"">
+                    </form>
+                </metadata>
+            </sub-item>
+
+
+            <sub-item id=""passivation-item"" title=""Passivation"">
+                <metadata address=""/{selected.profile}/subsystem=ejb3/passivation-store=*"">
+                    <h1>Passivation</h1>
+                    <p>{{metadata.getDescription().getDescription()}}</p>
+                    <table id=""passivation-table"" title=""Passivation"" form-ref=""passivation-form"">
+                        <actions>
+                            <action handler-ref=""add-resource"">
+                                <attributes>
+                                    <attribute name=""bean-cache"" />
+                                    <attribute name=""cache-container"" >
+                                        <suggest-handler>
+                                            <templates>
+                                                <template address=""/{selected.profile}/subsystem=infinispan/cache-container=*""/>
+                                            </templates>
+                                        </suggest-handler>
+                                    </attribute>
+                                    <attribute name=""max-size"" />
+                                </attributes>
+                            </action>
+                            <action handler-ref=""remove-resource"" scope=""selected""
+                                    name-resolver=""{{api.selectedRow().getName()}}""/>
+                        </actions>
+                        <columns>
+                            <column name=""name"" value=""{{row.getName()}}""/>
+                        </columns>
+                    </table>
+                    <form id=""passivation-form"" title=""Passivation"" auto-save=""true""
+                          name-resolver=""{{form.getModel().getName()}}"">
+                    </form>
+                </metadata>
+            </sub-item>
+
+        </item>
+
+        <item id=""service-item"" title=""Services"" icon=""pficon pficon-service"">
+
+            <sub-item id=""service-async-item"" title=""Async"">
+                <metadata address=""/{selected.profile}/subsystem=ejb3/service=async"">
+                    <h1>Async</h1>
+                    <p>{{metadata.getDescription().getDescription()}}</p>
+                    <form id=""service-async-form"" title=""Async"" auto-save=""true"">
+                        <attributes>
+                            <attribute name=""thread-pool-name"">
+                                <suggest-handler>
+                                    <templates>
+                                    <!-- @formatter:off -->
+                                    <template address=""/{selected.profile}/subsystem=ejb3/thread-pool=*""/>
+                                    <!-- @formatter:on -->
+                                    </templates>
+                                </suggest-handler>
+                            </attribute>
+                        </attributes>
+                    </form>
+                </metadata>
+            </sub-item>
+            <sub-item id=""service-iiop-item"" title=""IIOP"">
+                <metadata address=""/{selected.profile}/subsystem=ejb3/service=iiop"">
+                    <h1>IIOP</h1>
+                    <p>{{metadata.getDescription().getDescription()}}</p>
+                    <form id=""service-iiop-form"" title=""IIOP"" auto-save=""true""/>
+                </metadata>
+            </sub-item>
+            <sub-item id=""service-remote-item"" title=""Remote"">
+                <metadata address=""/{selected.profile}/subsystem=ejb3/service=remote"">
+                    <h1>Remote</h1>
+                    <p>{{metadata.getDescription().getDescription()}}</p>
+                    <form id=""service-remote-form"" title=""Remote"" auto-save=""true"" >
+                        <attributes>
+                            <attribute name=""cluster"">
+                                <suggest-handler>
+                                    <templates>
+                                    <!-- @formatter:off -->
+                                    <template address=""/{selected.profile}/subsystem=infinispan/cache-container=*""/>
+                                    <!-- @formatter:on -->
+                                    </templates>
+                                </suggest-handler>
+                            </attribute>
+                            <attribute name=""connector-ref"">
+                                <suggest-handler>
+                                    <templates>
+                                    <!-- @formatter:off -->
+                                    <template address=""/{selected.profile}/subsystem=remoting/http-connector=*""/>
+                                    <!-- @formatter:on -->
+                                    </templates>
+                                </suggest-handler>
+                            </attribute>
+                            <attribute name=""thread-pool-name"">
+                                <suggest-handler>
+                                    <templates>
+                                    <!-- @formatter:off -->
+                                    <template address=""/{selected.profile}/subsystem=ejb3/thread-pool=*""/>
+                                    <!-- @formatter:on -->
+                                    </templates>
+                                </suggest-handler>
+                            </attribute>
+                            <attribute name=""execute-in-worker"" />
+                        </attributes>
+                    </form>
+                </metadata>
+            </sub-item>
+            <sub-item id=""service-timer-item"" title=""Timer"">
+                <metadata address=""/{selected.profile}/subsystem=ejb3/service=timer-service"">
+                    <h1>Timer</h1>
+                    <p>{{metadata.getDescription().getDescription()}}</p>
+                    <form id=""service-timer-form"" title=""Timer"" auto-save=""true"">
+                        <attributes>
+                            <attribute name=""default-data-store"">
+                                <suggest-handler>
+                                    <templates>
+                                    <!-- @formatter:off -->
+                                    <template address=""/{selected.profile}/subsystem=ejb3/service=timer-service/database-data-store=*""/>
+                                    <template address=""/{selected.profile}/subsystem=ejb3/service=timer-service/file-data-store=*""/>
+                                    <!-- @formatter:on -->
+                                    </templates>
+                                </suggest-handler>
+                            </attribute>
+                            <attribute name=""thread-pool-name"">
+                                <suggest-handler>
+                                    <templates>
+                                    <!-- @formatter:off -->
+                                    <template address=""/{selected.profile}/subsystem=ejb3/thread-pool=*""/>
+                                    <!-- @formatter:on -->
+                                    </templates>
+                                </suggest-handler>
+                            </attribute>
+                        </attributes>
+                    </form>
+                </metadata>
+            </sub-item>
+        </item>
+        
+        <item id=""mdb-delivery-group-item"" title=""MDB Delivery"" icon=""fa fa-inbox"">
+
+            <metadata address=""/{selected.profile}/subsystem=ejb3/mdb-delivery-group=*"">
+                <h1>MDB Delivery Group</h1>
+                <p>{{metadata.getDescription().getDescription()}}</p>
+                <table id=""mdb-delivery-group-table"" title=""MDB Delivery Group"" form-ref=""mdb-delivery-group-form"">
+                    <actions>
+                        <action handler-ref=""add-resource"">
+                        </action>
+                        <action handler-ref=""remove-resource"" scope=""selected""
+                                name-resolver=""{{api.selectedRow().getName()}}""/>
+                    </actions>
+                    <columns>
+                        <column name=""name"" value=""{{row.getName()}}""/>
+                    </columns>
+                </table>
+                <form id=""mdb-delivery-group-form"" title=""MDB Delivery Group"" auto-save=""true""
+                      name-resolver=""{{form.getModel().getName()}}"">
+                </form>
+            </metadata>
+        </item>        
+
+        <item id=""app-security-domain-item"" title=""Security Domain"" icon=""fa fa-link"">
+            <metadata address=""/{selected.profile}/subsystem=ejb3/application-security-domain=*"">
+                <h1>Application Security Domain</h1>
+                <p>{{metadata.getDescription().getDescription()}}</p>
+                <table id=""app-security-domain-table"" title=""Application Security Domain"" form-ref=""app-security-domain-form"">
+                    <actions>
+                        <action handler-ref=""add-resource"">
+                        </action>
+                        <action handler-ref=""remove-resource"" scope=""selected""
+                                name-resolver=""{{api.selectedRow().getName()}}""/>
+                    </actions>
+                    <columns>
+                        <column name=""name"" value=""{{row.getName()}}""/>
+                    </columns>
+                </table>
+                <form id=""app-security-domain-form"" title=""Application Security Domain"" auto-save=""true""
+                      name-resolver=""{{form.getModel().getName()}}"">
+                </form>
+            </metadata>
+        </item>        
+        
+    </vertical-navigation>
+</view>
\ No newline at end of file",2016-09-15T20:25:46Z,140
"@@ -38,6 +38,11 @@ public boolean test(final Property property) {
                 (p.getValue().hasDefined(REQUIRED) && p.getValue().get(REQUIRED).asBoolean()) ||
                         (p.getValue().hasDefined(NILLABLE) && !p.getValue().get(NILLABLE).asBoolean()));
 
+        // do not include ""deprecated"" attribute
+        if (property.getValue().hasDefined(DEPRECATED)) {
+            return false;
+        }
+
         if (builder.addOnly) {
             // if builder.includes is empty include either all or only required properties
             // otherwise include required properties plus the ones defined in builder.includes",2016-09-15T20:25:46Z,26
"@@ -45,7 +45,7 @@ public Subsystems(Resources resources) {
         add(new SubsystemMetadata(DATASOURCES, Names.DATASOURCES_DRIVERS, null, null, Ids.DATA_SOURCE_DRIVER, true, resources.previews().configurationDatasourcesDrivers()));
         add(new SubsystemMetadata(DEPLOYMENT_SCANNER, ""Deployment Scanners"", null, NameTokens.DEPLOYMENT_SCANNERS, null, true, resources.previews().configurationDeploymentScanner()));
         add(new SubsystemMetadata(EE, ""EE"", null, NameTokens.EE, null, true, resources.previews().configurationEe()));
-        add(new SubsystemMetadata(EJB3, ""EJB3"", null, NameTokens.EJB3, null, false));
+        add(new SubsystemMetadata(EJB3, ""EJB3"", null, NameTokens.EJB3, null, true));
         add(new SubsystemMetadata(IIOP_OPENJDK, ""IIOP"", ""OpenJDK"", NameTokens.IIOP, null, true));
         add(new SubsystemMetadata(INFINISPAN, ""Infinispan"", null, null, null, false));
         add(new SubsystemMetadata(IO, ""IO"", null, NameTokens.IO, null, true, resources.previews().configurationIo()));",2016-09-15T20:25:46Z,37
"@@ -78,6 +78,7 @@ public interface ModelDescriptionConstants {
     String DEPLOYMENT = ""deployment"";
     String DEPLOYMENT_NAME = ""deployment-name"";
     String DEPLOYMENT_SCANNER = ""deployment-scanner"";
+    String DEPRECATED = ""deprecated"";
     String DESCRIPTION = ""description"";
     String DISABLED = ""disabled"";
     String DRIVER_CLASS = ""driver-class"";
@@ -187,6 +188,7 @@ public interface ModelDescriptionConstants {
     String READ_RESOURCE_OPERATION = ""read-resource"";
     String READ_WRITE = ""read-write"";
     String REALM = ""realm"";
+    String REASON = ""reason"";
     String RELATIVE_TO = ""relative-to"";
     String REMOTING = ""remoting"";
     String REMOVE = ""remove"";",2016-09-15T20:25:46Z,109
"@@ -23,10 +23,7 @@
 import org.jboss.hal.dmr.Property;
 
 import static java.util.stream.Collectors.toList;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.DESCRIPTION;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.NILLABLE;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.OPERATIONS;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.REQUIRED;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 
 /**
  * Represents the result of a read-resource-description operation for one specific resource.
@@ -77,4 +74,16 @@ public Property findAttribute(final String path, final String name) {
         }
         return null;
     }
+    
+    public boolean isDeprecated() {
+        return hasDefined(DEPRECATED);
+    }
+    
+    public String getDeprecatedMessage() {
+        String message = """";
+        if (hasDefined(DEPRECATED)) {
+            message = get(DEPRECATED).get(REASON).asString();
+        }
+        return message;
+    }
 }",2016-09-15T20:25:46Z,24
"@@ -1,6 +1,6 @@
 {
   ""name"": ""org.jboss.hal.npm"",
-  ""version"": ""3.2.11"",
+  ""version"": ""3.3.0"",
   ""lockfileVersion"": 1,
   ""requires"": true,
   ""dependencies"": {",2020-10-23T10:47:23Z,117
"@@ -16,6 +16,7 @@
 package org.jboss.hal.client.configuration.subsystem.datasource;
 
 import java.util.Map;
+import java.util.function.Supplier;
 
 import org.jboss.hal.core.datasource.DataSource;
 import org.jboss.hal.core.datasource.JdbcDriver;
@@ -45,15 +46,15 @@ enum Vendor {
 
     private final String id;
     private final Vendor vendor;
-    private final DataSource dataSource;
-    private final JdbcDriver driver;
+    private final Supplier<DataSource> dataSource;
+    private final Supplier<JdbcDriver> driver;
     private final Map<String, String> xaProperties;
 
-    DataSourceTemplate(String id, Vendor vendor, DataSource dataSource, JdbcDriver driver) {
+    DataSourceTemplate(String id, Vendor vendor, Supplier<DataSource> dataSource, Supplier<JdbcDriver> driver) {
         this(id, vendor, dataSource, driver, emptyMap());
     }
 
-    DataSourceTemplate(String id, Vendor vendor, DataSource dataSource, JdbcDriver driver,
+    DataSourceTemplate(String id, Vendor vendor, Supplier<DataSource> dataSource, Supplier<JdbcDriver> driver,
             Map<String, String> xaProperties) {
         this.id = id;
         this.vendor = vendor;
@@ -90,19 +91,19 @@ public int hashCode() {
     public String toString() {
         StringBuilder builder = new StringBuilder();
         builder.append(vendor.label).append("" "");
-        if (dataSource.isXa()) {
+        if (!xaProperties.isEmpty()) {
             builder.append(""XA "");
         }
         builder.append(""Datasource"");
         return builder.toString();
     }
 
     public DataSource getDataSource() {
-        return dataSource;
+        return dataSource.get();
     }
 
     public JdbcDriver getDriver() {
-        return driver;
+        return driver.get();
     }
 
     public String getId() {",2017-11-16T11:34:12Z,80
"@@ -20,6 +20,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.function.Supplier;
 
 import com.google.common.collect.ImmutableMap;
 import org.jboss.hal.core.datasource.DataSource;
@@ -49,279 +50,328 @@ public class DataSourceTemplates implements Iterable<DataSourceTemplate> {
     private final List<DataSourceTemplate> pool;
 
     public DataSourceTemplates() {
-        DataSource dataSource;
-        DataSource xaDataSource;
-        JdbcDriver driver;
         List<DataSourceTemplate> setup = new ArrayList<>();
 
 
         // ------------------------------------------------------ H2
-        // Driver
-        driver = new JdbcDriver(H2);
-        driver.get(DRIVER_MODULE_NAME).set(""com.h2database.h2"");
-        driver.get(DRIVER_CLASS_NAME).set(""org.h2.Driver"");
-        driver.get(DRIVER_XA_DATASOURCE_CLASS_NAME).set(""org.h2.jdbcx.JdbcDataSource"");
-
-        // DS
-        dataSource = new DataSource(""H2DS"", false);
-        dataSource.get(POOL_NAME).set(""H2DS_Pool"");
-        dataSource.get(JNDI_NAME).set(""java:/H2DS"");
-        dataSource.get(DRIVER_NAME).set(H2);
-        dataSource.get(CONNECTION_URL).set(""jdbc:h2:mem:test;DB_CLOSE_DELAY=-1"");
-        dataSource.get(USER_NAME).set(SA);
-        dataSource.get(PASSWORD).set(SA);
-        dataSource.get(BACKGROUND_VALIDATION).set(false);
-        setup.add(new DataSourceTemplate(H2, DataSourceTemplate.Vendor.H2, dataSource, driver));
-
-        // XA DS
-        xaDataSource = new DataSource(""H2XADS"", true);
-        xaDataSource.get(POOL_NAME).set(""H2XADS_Pool"");
-        xaDataSource.get(JNDI_NAME).set(""java:/H2XADS"");
-        xaDataSource.get(DRIVER_NAME).set(H2);
-        xaDataSource.get(USER_NAME).set(SA);
-        xaDataSource.get(PASSWORD).set(SA);
-        xaDataSource.get(BACKGROUND_VALIDATION).set(false);
-        setup.add(new DataSourceTemplate(""h2-xa"", DataSourceTemplate.Vendor.H2, xaDataSource, driver,
+
+        Supplier<JdbcDriver> h2Driver = () -> {
+            JdbcDriver driver = new JdbcDriver(H2);
+            driver.get(DRIVER_MODULE_NAME).set(""com.h2database.h2"");
+            driver.get(DRIVER_CLASS_NAME).set(""org.h2.Driver"");
+            driver.get(DRIVER_XA_DATASOURCE_CLASS_NAME).set(""org.h2.jdbcx.JdbcDataSource"");
+            return driver;
+        };
+        setup.add(new DataSourceTemplate(H2, DataSourceTemplate.Vendor.H2,
+                () -> {
+                    DataSource dataSource = new DataSource(""H2DS"", false);
+                    dataSource.get(POOL_NAME).set(""H2DS_Pool"");
+                    dataSource.get(JNDI_NAME).set(""java:/H2DS"");
+                    dataSource.get(DRIVER_NAME).set(H2);
+                    dataSource.get(CONNECTION_URL).set(""jdbc:h2:mem:test;DB_CLOSE_DELAY=-1"");
+                    dataSource.get(USER_NAME).set(SA);
+                    dataSource.get(PASSWORD).set(SA);
+                    dataSource.get(BACKGROUND_VALIDATION).set(false);
+                    return dataSource;
+                },
+                h2Driver));
+        setup.add(new DataSourceTemplate(""h2-xa"", DataSourceTemplate.Vendor.H2,
+                () -> {
+                    DataSource dataSource = new DataSource(""H2DS"", false);
+                    dataSource.get(POOL_NAME).set(""H2DS_Pool"");
+                    dataSource.get(JNDI_NAME).set(""java:/H2DS"");
+                    dataSource.get(DRIVER_NAME).set(H2);
+                    dataSource.get(CONNECTION_URL).set(""jdbc:h2:mem:test;DB_CLOSE_DELAY=-1"");
+                    dataSource.get(USER_NAME).set(SA);
+                    dataSource.get(PASSWORD).set(SA);
+                    dataSource.get(BACKGROUND_VALIDATION).set(false);
+                    return dataSource;
+                },
+                h2Driver,
                 properties(""URL"", ""jdbc:h2:mem:test"")));
 
 
         // ------------------------------------------------------ PostgreSQL
-        // Driver
-        driver = new JdbcDriver(POSTGRESQL);
-        driver.get(DRIVER_MODULE_NAME).set(""org.postgresql"");
-        driver.get(DRIVER_CLASS_NAME).set(""org.postgresql.Driver"");
-        driver.get(DRIVER_XA_DATASOURCE_CLASS_NAME).set(""org.postgresql.xa.PGXADataSource"");
-
-        // DS
-        dataSource = new DataSource(""PostgresDS"", false);
-        dataSource.get(POOL_NAME).set(""PostgresDS_Pool"");
-        dataSource.get(JNDI_NAME).set(""java:/PostgresDS"");
-        dataSource.get(DRIVER_NAME).set(POSTGRESQL);
-        dataSource.get(CONNECTION_URL).set(""jdbc:postgresql://localhost:5432/postgresdb"");
-        dataSource.get(USER_NAME).set(ADMIN);
-        dataSource.get(PASSWORD).set(ADMIN);
-        dataSource.get(BACKGROUND_VALIDATION).set(true);
-        dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker"");
-        dataSource.get(EXCEPTION_SORTER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter"");
-        setup.add(new DataSourceTemplate(POSTGRESQL, POSTGRE_SQL, dataSource, driver));
-
-        // XA DS
-        xaDataSource = new DataSource(""PostgresXADS"", true);
-        xaDataSource.get(POOL_NAME).set(""PostgresXADS_Pool"");
-        xaDataSource.get(JNDI_NAME).set(""java:/PostgresXADS"");
-        xaDataSource.get(DRIVER_NAME).set(POSTGRESQL);
-        xaDataSource.get(USER_NAME).set(ADMIN);
-        xaDataSource.get(PASSWORD).set(ADMIN);
-        xaDataSource.get(BACKGROUND_VALIDATION).set(true);
-        xaDataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker"");
-        xaDataSource.get(EXCEPTION_SORTER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter"");
-        setup.add(new DataSourceTemplate(""postgresql-xa"", POSTGRE_SQL, xaDataSource, driver,
+
+        Supplier<JdbcDriver> postgresDriver = () -> {
+            JdbcDriver driver = new JdbcDriver(POSTGRESQL);
+            driver.get(DRIVER_MODULE_NAME).set(""org.postgresql"");
+            driver.get(DRIVER_CLASS_NAME).set(""org.postgresql.Driver"");
+            driver.get(DRIVER_XA_DATASOURCE_CLASS_NAME).set(""org.postgresql.xa.PGXADataSource"");
+            return driver;
+        };
+        setup.add(new DataSourceTemplate(POSTGRESQL, POSTGRE_SQL,
+                () -> {
+                    DataSource dataSource = new DataSource(""PostgresDS"", false);
+                    dataSource.get(POOL_NAME).set(""PostgresDS_Pool"");
+                    dataSource.get(JNDI_NAME).set(""java:/PostgresDS"");
+                    dataSource.get(DRIVER_NAME).set(POSTGRESQL);
+                    dataSource.get(CONNECTION_URL).set(""jdbc:postgresql://localhost:5432/postgresdb"");
+                    dataSource.get(USER_NAME).set(ADMIN);
+                    dataSource.get(PASSWORD).set(ADMIN);
+                    dataSource.get(BACKGROUND_VALIDATION).set(true);
+                    dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker"");
+                    dataSource.get(EXCEPTION_SORTER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter"");
+                    return dataSource;
+                },
+                postgresDriver));
+        setup.add(new DataSourceTemplate(""postgresql-xa"", POSTGRE_SQL,
+                () -> {
+                    DataSource dataSource = new DataSource(""PostgresXADS"", true);
+                    dataSource.get(POOL_NAME).set(""PostgresXADS_Pool"");
+                    dataSource.get(JNDI_NAME).set(""java:/PostgresXADS"");
+                    dataSource.get(DRIVER_NAME).set(POSTGRESQL);
+                    dataSource.get(USER_NAME).set(ADMIN);
+                    dataSource.get(PASSWORD).set(ADMIN);
+                    dataSource.get(BACKGROUND_VALIDATION).set(true);
+                    dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker"");
+                    dataSource.get(EXCEPTION_SORTER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter"");
+                    return dataSource;
+                },
+                postgresDriver,
                 properties(SERVER_NAME, ""servername"", ""PortNumber"", ""5432"", DATABASE_NAME, ""postgresdb"")));
 
 
         // ------------------------------------------------------ MySQL
-        // Driver
-        driver = new JdbcDriver(MYSQL);
-        driver.get(DRIVER_MODULE_NAME).set(""com.mysql"");
-        driver.get(DRIVER_CLASS_NAME).set(""com.mysql.jdbc.Driver"");
-        driver.get(DRIVER_XA_DATASOURCE_CLASS_NAME).set(""com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"");
-
-        // DS
-        dataSource = new DataSource(""MySqlDS"", false);
-        dataSource.get(POOL_NAME).set(""MySqlDS_Pool"");
-        dataSource.get(JNDI_NAME).set(""java:/MySqlDS"");
-        dataSource.get(DRIVER_NAME).set(MYSQL);
-        dataSource.get(CONNECTION_URL).set(""jdbc:mysql://localhost:3306/mysqldb"");
-        dataSource.get(USER_NAME).set(ADMIN);
-        dataSource.get(PASSWORD).set(ADMIN);
-        dataSource.get(BACKGROUND_VALIDATION).set(true);
-        dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.mysql.MySQLValidConnectionChecker"");
-        dataSource.get(EXCEPTION_SORTER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.mysql.MySQLExceptionSorter"");
-        setup.add(new DataSourceTemplate(MYSQL, DataSourceTemplate.Vendor.MYSQL, dataSource, driver));
-
-        // XA DS
-        xaDataSource = new DataSource(""MysqlXADS"", true);
-        xaDataSource.get(POOL_NAME).set(""MysqlXADS_Pool"");
-        xaDataSource.get(JNDI_NAME).set(""java:/MysqlXADS"");
-        xaDataSource.get(DRIVER_NAME).set(MYSQL);
-        xaDataSource.get(USER_NAME).set(ADMIN);
-        xaDataSource.get(PASSWORD).set(ADMIN);
-        xaDataSource.get(BACKGROUND_VALIDATION).set(true);
-        xaDataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.mysql.MySQLValidConnectionChecker"");
-        xaDataSource.get(EXCEPTION_SORTER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.mysql.MySQLExceptionSorter"");
-        setup.add(new DataSourceTemplate(""mysql-xa"", DataSourceTemplate.Vendor.MYSQL, xaDataSource, driver,
+
+        Supplier<JdbcDriver> mySqlDriver = () -> {
+            JdbcDriver driver = new JdbcDriver(MYSQL);
+            driver.get(DRIVER_MODULE_NAME).set(""com.mysql"");
+            driver.get(DRIVER_CLASS_NAME).set(""com.mysql.jdbc.Driver"");
+            driver.get(DRIVER_XA_DATASOURCE_CLASS_NAME).set(""com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"");
+            return driver;
+        };
+        setup.add(new DataSourceTemplate(MYSQL, DataSourceTemplate.Vendor.MYSQL,
+                () -> {
+                    DataSource dataSource = new DataSource(""MySqlDS"", false);
+                    dataSource.get(POOL_NAME).set(""MySqlDS_Pool"");
+                    dataSource.get(JNDI_NAME).set(""java:/MySqlDS"");
+                    dataSource.get(DRIVER_NAME).set(MYSQL);
+                    dataSource.get(CONNECTION_URL).set(""jdbc:mysql://localhost:3306/mysqldb"");
+                    dataSource.get(USER_NAME).set(ADMIN);
+                    dataSource.get(PASSWORD).set(ADMIN);
+                    dataSource.get(BACKGROUND_VALIDATION).set(true);
+                    dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.mysql.MySQLValidConnectionChecker"");
+                    dataSource.get(EXCEPTION_SORTER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.mysql.MySQLExceptionSorter"");
+                    return dataSource;
+                },
+                mySqlDriver));
+        setup.add(new DataSourceTemplate(""mysql-xa"", DataSourceTemplate.Vendor.MYSQL,
+                () -> {
+                    DataSource dataSource = new DataSource(""MysqlXADS"", true);
+                    dataSource.get(POOL_NAME).set(""MysqlXADS_Pool"");
+                    dataSource.get(JNDI_NAME).set(""java:/MysqlXADS"");
+                    dataSource.get(DRIVER_NAME).set(MYSQL);
+                    dataSource.get(USER_NAME).set(ADMIN);
+                    dataSource.get(PASSWORD).set(ADMIN);
+                    dataSource.get(BACKGROUND_VALIDATION).set(true);
+                    dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.mysql.MySQLValidConnectionChecker"");
+                    dataSource.get(EXCEPTION_SORTER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.mysql.MySQLExceptionSorter"");
+                    return dataSource;
+                },
+                mySqlDriver,
                 properties(SERVER_NAME, LOCALHOST, DATABASE_NAME, ""mysqldb"")));
 
 
         // ------------------------------------------------------ Oracle
-        // Driver
-        driver = new JdbcDriver(ORACLE);
-        driver.get(DRIVER_MODULE_NAME).set(""com.oracle"");
-        driver.get(DRIVER_CLASS_NAME).set(""oracle.jdbc.driver.OracleDriver"");
-        driver.get(DRIVER_XA_DATASOURCE_CLASS_NAME).set(""oracle.jdbc.xa.client.OracleXADataSource"");
-
-        // DS
-        dataSource = new DataSource(""OracleDS"", false);
-        dataSource.get(POOL_NAME).set(""OracleDS_Pool"");
-        dataSource.get(JNDI_NAME).set(""java:/OracleDS"");
-        dataSource.get(DRIVER_NAME).set(ORACLE);
-        dataSource.get(CONNECTION_URL).set(""jdbc:oracle:thin:@localhost:1521:orcalesid"");
-        dataSource.get(USER_NAME).set(ADMIN);
-        dataSource.get(PASSWORD).set(ADMIN);
-        dataSource.get(BACKGROUND_VALIDATION).set(true);
-        dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.oracle.OracleValidConnectionChecker"");
-        dataSource.get(EXCEPTION_SORTER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.oracle.OracleExceptionSorter"");
-        dataSource.get(STALE_CONNECTION_CHECKER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.oracle.OracleStaleConnectionChecker"");
-        setup.add(new DataSourceTemplate(ORACLE, DataSourceTemplate.Vendor.ORACLE, dataSource, driver));
-
-        // XA DS
-        xaDataSource = new DataSource(""XAOracleDS"", true);
-        xaDataSource.get(POOL_NAME).set(""XAOracleDS_Pool"");
-        xaDataSource.get(JNDI_NAME).set(""java:/XAOracleDS"");
-        xaDataSource.get(DRIVER_NAME).set(ORACLE);
-        xaDataSource.get(USER_NAME).set(ADMIN);
-        xaDataSource.get(PASSWORD).set(ADMIN);
-        xaDataSource.get(BACKGROUND_VALIDATION).set(true);
-        xaDataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.oracle.OracleValidConnectionChecker"");
-        xaDataSource.get(EXCEPTION_SORTER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.oracle.OracleExceptionSorter"");
-        xaDataSource.get(STALE_CONNECTION_CHECKER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.oracle.OracleStaleConnectionChecker"");
-        xaDataSource.get(NO_TX_SEPARATE_POOL).set(true);
-        xaDataSource.get(SAME_RM_OVERRIDE).set(false);
-        setup.add(new DataSourceTemplate(""oracle-xa"", DataSourceTemplate.Vendor.ORACLE, xaDataSource, driver,
+
+        Supplier<JdbcDriver> oracleDriver = () -> {
+            JdbcDriver driver = new JdbcDriver(ORACLE);
+            driver.get(DRIVER_MODULE_NAME).set(""com.oracle"");
+            driver.get(DRIVER_CLASS_NAME).set(""oracle.jdbc.driver.OracleDriver"");
+            driver.get(DRIVER_XA_DATASOURCE_CLASS_NAME).set(""oracle.jdbc.xa.client.OracleXADataSource"");
+            return driver;
+        };
+        setup.add(new DataSourceTemplate(ORACLE, DataSourceTemplate.Vendor.ORACLE,
+                () -> {
+                    DataSource dataSource = new DataSource(""OracleDS"", false);
+                    dataSource.get(POOL_NAME).set(""OracleDS_Pool"");
+                    dataSource.get(JNDI_NAME).set(""java:/OracleDS"");
+                    dataSource.get(DRIVER_NAME).set(ORACLE);
+                    dataSource.get(CONNECTION_URL).set(""jdbc:oracle:thin:@localhost:1521:orcalesid"");
+                    dataSource.get(USER_NAME).set(ADMIN);
+                    dataSource.get(PASSWORD).set(ADMIN);
+                    dataSource.get(BACKGROUND_VALIDATION).set(true);
+                    dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.oracle.OracleValidConnectionChecker"");
+                    dataSource.get(EXCEPTION_SORTER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.oracle.OracleExceptionSorter"");
+                    dataSource.get(STALE_CONNECTION_CHECKER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.oracle.OracleStaleConnectionChecker"");
+                    return dataSource;
+                },
+                oracleDriver));
+        setup.add(new DataSourceTemplate(""oracle-xa"", DataSourceTemplate.Vendor.ORACLE,
+                () -> {
+                    DataSource dataSource = new DataSource(""XAOracleDS"", true);
+                    dataSource.get(POOL_NAME).set(""XAOracleDS_Pool"");
+                    dataSource.get(JNDI_NAME).set(""java:/XAOracleDS"");
+                    dataSource.get(DRIVER_NAME).set(ORACLE);
+                    dataSource.get(USER_NAME).set(ADMIN);
+                    dataSource.get(PASSWORD).set(ADMIN);
+                    dataSource.get(BACKGROUND_VALIDATION).set(true);
+                    dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.oracle.OracleValidConnectionChecker"");
+                    dataSource.get(EXCEPTION_SORTER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.oracle.OracleExceptionSorter"");
+                    dataSource.get(STALE_CONNECTION_CHECKER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.oracle.OracleStaleConnectionChecker"");
+                    dataSource.get(NO_TX_SEPARATE_POOL).set(true);
+                    dataSource.get(SAME_RM_OVERRIDE).set(false);
+                    return dataSource;
+                },
+                oracleDriver,
                 properties(""URL"", ""jdbc:oracle:oci8:@tc"")));
 
 
         // ------------------------------------------------------ Microsoft SQL Server
-        // Driver
-        driver = new JdbcDriver(SQLSERVER);
-        driver.get(DRIVER_MODULE_NAME).set(""com.microsoft"");
-        driver.get(DRIVER_CLASS_NAME).set(""com.microsoft.sqlserver.jdbc.SQLServerDriver"");
-        driver.get(DRIVER_XA_DATASOURCE_CLASS_NAME).set(""com.microsoft.sqlserver.jdbc.SQLServerXADataSource"");
-
-        // DS
-        dataSource = new DataSource(""MSSQLDS"", false);
-        dataSource.get(POOL_NAME).set(""MSSQLDS_Pool"");
-        dataSource.get(JNDI_NAME).set(""java:/MSSQLDS"");
-        dataSource.get(DRIVER_NAME).set(SQLSERVER);
-        dataSource.get(CONNECTION_URL).set(""jdbc:microsoft:sqlserver://localhost:1433;DatabaseName=MyDatabase"");
-        dataSource.get(USER_NAME).set(ADMIN);
-        dataSource.get(PASSWORD).set(ADMIN);
-        dataSource.get(BACKGROUND_VALIDATION).set(true);
-        dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.mssql.MSSQLValidConnectionChecker"");
-        setup.add(new DataSourceTemplate(SQLSERVER, SQL_SERVER, dataSource, driver));
-
-        // XA DS
-        xaDataSource = new DataSource(""MSSQLXADS"", true);
-        xaDataSource.get(POOL_NAME).set(""MSSQLXADS_Pool"");
-        xaDataSource.get(JNDI_NAME).set(""java:/MSSQLXADS"");
-        xaDataSource.get(DRIVER_NAME).set(SQLSERVER);
-        xaDataSource.get(USER_NAME).set(ADMIN);
-        xaDataSource.get(PASSWORD).set(ADMIN);
-        xaDataSource.get(BACKGROUND_VALIDATION).set(true);
-        xaDataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.mssql.MSSQLValidConnectionChecker"");
-        xaDataSource.get(SAME_RM_OVERRIDE).set(false);
-        setup.add(new DataSourceTemplate(""sqlserver-xa"", SQL_SERVER, xaDataSource, driver,
+
+        Supplier<JdbcDriver> msSqlDriver = () -> {
+            JdbcDriver driver = new JdbcDriver(SQLSERVER);
+            driver.get(DRIVER_MODULE_NAME).set(""com.microsoft"");
+            driver.get(DRIVER_CLASS_NAME).set(""com.microsoft.sqlserver.jdbc.SQLServerDriver"");
+            driver.get(DRIVER_XA_DATASOURCE_CLASS_NAME).set(""com.microsoft.sqlserver.jdbc.SQLServerXADataSource"");
+            return driver;
+        };
+        setup.add(new DataSourceTemplate(SQLSERVER, SQL_SERVER,
+                () -> {
+                    DataSource dataSource = new DataSource(""MSSQLDS"", false);
+                    dataSource.get(POOL_NAME).set(""MSSQLDS_Pool"");
+                    dataSource.get(JNDI_NAME).set(""java:/MSSQLDS"");
+                    dataSource.get(DRIVER_NAME).set(SQLSERVER);
+                    dataSource.get(CONNECTION_URL)
+                            .set(""jdbc:microsoft:sqlserver://localhost:1433;DatabaseName=MyDatabase"");
+                    dataSource.get(USER_NAME).set(ADMIN);
+                    dataSource.get(PASSWORD).set(ADMIN);
+                    dataSource.get(BACKGROUND_VALIDATION).set(true);
+                    dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.mssql.MSSQLValidConnectionChecker"");
+                    return dataSource;
+                },
+                msSqlDriver));
+        setup.add(new DataSourceTemplate(""sqlserver-xa"", SQL_SERVER,
+                () -> {
+                    DataSource dataSource = new DataSource(""MSSQLXADS"", true);
+                    dataSource.get(POOL_NAME).set(""MSSQLXADS_Pool"");
+                    dataSource.get(JNDI_NAME).set(""java:/MSSQLXADS"");
+                    dataSource.get(DRIVER_NAME).set(SQLSERVER);
+                    dataSource.get(USER_NAME).set(ADMIN);
+                    dataSource.get(PASSWORD).set(ADMIN);
+                    dataSource.get(BACKGROUND_VALIDATION).set(true);
+                    dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.mssql.MSSQLValidConnectionChecker"");
+                    dataSource.get(SAME_RM_OVERRIDE).set(false);
+                    return dataSource;
+                },
+                msSqlDriver,
                 properties(SERVER_NAME, LOCALHOST, DATABASE_NAME, ""mssqldb"", ""SelectMethod"", ""cursor"")));
 
 
         // ------------------------------------------------------ DB2
-        // Driver
-        driver = new JdbcDriver(""ibmdb2"");
-        driver.get(DRIVER_MODULE_NAME).set(""com.ibm"");
-        driver.get(DRIVER_CLASS_NAME).set(""COM.ibm.db2.jdbc.app.DB2Driver"");
-        driver.get(DRIVER_XA_DATASOURCE_CLASS_NAME).set(""COM.ibm.db2.jdbc.DB2XADataSource"");
-
-        // DS
-        dataSource = new DataSource(""DB2DS"", false);
-        dataSource.get(POOL_NAME).set(""DB2DS_Pool"");
-        dataSource.get(JNDI_NAME).set(""java:/DB2DS"");
-        dataSource.get(DRIVER_NAME).set(""ibmdb2"");
-        dataSource.get(CONNECTION_URL).set(""jdbc:db2:yourdatabase"");
-        dataSource.get(USER_NAME).set(ADMIN);
-        dataSource.get(PASSWORD).set(ADMIN);
-        dataSource.get(BACKGROUND_VALIDATION).set(true);
-        dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.db2.DB2ValidConnectionChecker"");
-        dataSource.get(EXCEPTION_SORTER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.db2.DB2ExceptionSorter"");
-        dataSource.get(STALE_CONNECTION_CHECKER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.db2.DB2StaleConnectionChecker"");
-        dataSource.get(MIN_POOL_SIZE).set(0);
-        dataSource.get(MAX_POOL_SIZE).set(50);
-        setup.add(new DataSourceTemplate(""db2"", DB2, dataSource, driver));
-
-        // XA DS
-        xaDataSource = new DataSource(""DB2XADS"", true);
-        xaDataSource.get(POOL_NAME).set(""DB2XADS_Pool"");
-        xaDataSource.get(JNDI_NAME).set(""java:/DB2XADS"");
-        xaDataSource.get(DRIVER_NAME).set(""ibmdb2"");
-        xaDataSource.get(USER_NAME).set(ADMIN);
-        xaDataSource.get(PASSWORD).set(ADMIN);
-        xaDataSource.get(BACKGROUND_VALIDATION).set(true);
-        xaDataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.db2.DB2ValidConnectionChecker"");
-        xaDataSource.get(EXCEPTION_SORTER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.db2.DB2ExceptionSorter"");
-        xaDataSource.get(STALE_CONNECTION_CHECKER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.db2.DB2StaleConnectionChecker"");
-        xaDataSource.get(RECOVERY_PLUGIN_CLASS_NAME).set(""org.jboss.jca.core.recovery.ConfigurableRecoveryPlugin"");
-        // TODO Add missing recovery plugin properties
-        xaDataSource.get(SAME_RM_OVERRIDE).set(false);
-        setup.add(new DataSourceTemplate(""db2-xa"", DB2, xaDataSource, driver,
+
+        Supplier<JdbcDriver> db2Driver = () -> {
+            JdbcDriver driver = new JdbcDriver(""ibmdb2"");
+            driver.get(DRIVER_MODULE_NAME).set(""com.ibm"");
+            driver.get(DRIVER_CLASS_NAME).set(""COM.ibm.db2.jdbc.app.DB2Driver"");
+            driver.get(DRIVER_XA_DATASOURCE_CLASS_NAME).set(""COM.ibm.db2.jdbc.DB2XADataSource"");
+            return driver;
+        };
+        setup.add(new DataSourceTemplate(""db2"", DB2,
+                () -> {
+                    DataSource dataSource = new DataSource(""DB2DS"", false);
+                    dataSource.get(POOL_NAME).set(""DB2DS_Pool"");
+                    dataSource.get(JNDI_NAME).set(""java:/DB2DS"");
+                    dataSource.get(DRIVER_NAME).set(""ibmdb2"");
+                    dataSource.get(CONNECTION_URL).set(""jdbc:db2:yourdatabase"");
+                    dataSource.get(USER_NAME).set(ADMIN);
+                    dataSource.get(PASSWORD).set(ADMIN);
+                    dataSource.get(BACKGROUND_VALIDATION).set(true);
+                    dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.db2.DB2ValidConnectionChecker"");
+                    dataSource.get(EXCEPTION_SORTER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.db2.DB2ExceptionSorter"");
+                    dataSource.get(STALE_CONNECTION_CHECKER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.db2.DB2StaleConnectionChecker"");
+                    dataSource.get(MIN_POOL_SIZE).set(0);
+                    dataSource.get(MAX_POOL_SIZE).set(50);
+                    return dataSource;
+                },
+                db2Driver));
+        setup.add(new DataSourceTemplate(""db2-xa"", DB2,
+                () -> {
+                    DataSource dataSource = new DataSource(""DB2XADS"", true);
+                    dataSource.get(POOL_NAME).set(""DB2XADS_Pool"");
+                    dataSource.get(JNDI_NAME).set(""java:/DB2XADS"");
+                    dataSource.get(DRIVER_NAME).set(""ibmdb2"");
+                    dataSource.get(USER_NAME).set(ADMIN);
+                    dataSource.get(PASSWORD).set(ADMIN);
+                    dataSource.get(BACKGROUND_VALIDATION).set(true);
+                    dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.db2.DB2ValidConnectionChecker"");
+                    dataSource.get(EXCEPTION_SORTER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.db2.DB2ExceptionSorter"");
+                    dataSource.get(STALE_CONNECTION_CHECKER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.db2.DB2StaleConnectionChecker"");
+                    dataSource.get(RECOVERY_PLUGIN_CLASS_NAME)
+                            .set(""org.jboss.jca.core.recovery.ConfigurableRecoveryPlugin"");
+                    // TODO Add missing recovery plugin properties
+                    dataSource.get(SAME_RM_OVERRIDE).set(false);
+                    return dataSource;
+                },
+                db2Driver,
                 properties(SERVER_NAME, LOCALHOST, DATABASE_NAME, ""ibmdb2db"", ""PortNumber"", ""446"")));
 
 
         // ------------------------------------------------------ Sybase
-        // Driver
-        driver = new JdbcDriver(SYBASE);
-        driver.get(DRIVER_MODULE_NAME).set(""com.sybase"");
-        driver.get(DRIVER_CLASS_NAME).set(""com.sybase.jdbc.SybDriver"");
-        driver.get(DRIVER_XA_DATASOURCE_CLASS_NAME).set(""com.sybase.jdbc4.jdbc.SybXADataSource"");
-
-        // DS
-        dataSource = new DataSource(""SybaseDB"", false);
-        dataSource.get(POOL_NAME).set(""SybaseDB_Pool"");
-        dataSource.get(JNDI_NAME).set(""java:/SybaseDB"");
-        dataSource.get(DRIVER_NAME).set(SYBASE);
-        dataSource.get(CONNECTION_URL).set(""jdbc:sybase:Tds:localhost:5000/mydatabase?JCONNECT_VERSION=6"");
-        dataSource.get(USER_NAME).set(ADMIN);
-        dataSource.get(PASSWORD).set(ADMIN);
-        dataSource.get(BACKGROUND_VALIDATION).set(true);
-        dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.sybase.SybaseValidConnectionChecker"");
-        dataSource.get(EXCEPTION_SORTER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.sybase.SybaseExceptionSorter"");
-        setup.add(new DataSourceTemplate(SYBASE, DataSourceTemplate.Vendor.SYBASE, dataSource, driver));
-
-        // XA DS
-        xaDataSource = new DataSource(""SybaseXADS"", true);
-        xaDataSource.get(POOL_NAME).set(""SybaseXADS_Pool"");
-        xaDataSource.get(JNDI_NAME).set(""java:/SybaseXADS"");
-        xaDataSource.get(DRIVER_NAME).set(SYBASE);
-        xaDataSource.get(USER_NAME).set(ADMIN);
-        xaDataSource.get(PASSWORD).set(ADMIN);
-        xaDataSource.get(BACKGROUND_VALIDATION).set(true);
-        xaDataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.sybase.SybaseValidConnectionChecker"");
-        xaDataSource.get(EXCEPTION_SORTER_CLASS_NAME)
-                .set(""org.jboss.jca.adapters.jdbc.extensions.sybase.SybaseExceptionSorter"");
-        setup.add(new DataSourceTemplate(""sybase-xa"", DataSourceTemplate.Vendor.SYBASE, xaDataSource, driver,
+
+        Supplier<JdbcDriver> sybaseDriver = () -> {
+            JdbcDriver driver = new JdbcDriver(SYBASE);
+            driver.get(DRIVER_MODULE_NAME).set(""com.sybase"");
+            driver.get(DRIVER_CLASS_NAME).set(""com.sybase.jdbc.SybDriver"");
+            driver.get(DRIVER_XA_DATASOURCE_CLASS_NAME).set(""com.sybase.jdbc4.jdbc.SybXADataSource"");
+            return driver;
+        };
+        setup.add(new DataSourceTemplate(SYBASE, DataSourceTemplate.Vendor.SYBASE,
+                () -> {
+                    DataSource dataSource = new DataSource(""SybaseDB"", false);
+                    dataSource.get(POOL_NAME).set(""SybaseDB_Pool"");
+                    dataSource.get(JNDI_NAME).set(""java:/SybaseDB"");
+                    dataSource.get(DRIVER_NAME).set(SYBASE);
+                    dataSource.get(CONNECTION_URL).set(""jdbc:sybase:Tds:localhost:5000/mydatabase?JCONNECT_VERSION=6"");
+                    dataSource.get(USER_NAME).set(ADMIN);
+                    dataSource.get(PASSWORD).set(ADMIN);
+                    dataSource.get(BACKGROUND_VALIDATION).set(true);
+                    dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.sybase.SybaseValidConnectionChecker"");
+                    dataSource.get(EXCEPTION_SORTER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.sybase.SybaseExceptionSorter"");
+                    return dataSource;
+                },
+                sybaseDriver));
+        setup.add(new DataSourceTemplate(""sybase-xa"", DataSourceTemplate.Vendor.SYBASE,
+                () -> {
+                    DataSource dataSource = new DataSource(""SybaseXADS"", true);
+                    dataSource.get(POOL_NAME).set(""SybaseXADS_Pool"");
+                    dataSource.get(JNDI_NAME).set(""java:/SybaseXADS"");
+                    dataSource.get(DRIVER_NAME).set(SYBASE);
+                    dataSource.get(USER_NAME).set(ADMIN);
+                    dataSource.get(PASSWORD).set(ADMIN);
+                    dataSource.get(BACKGROUND_VALIDATION).set(true);
+                    dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.sybase.SybaseValidConnectionChecker"");
+                    dataSource.get(EXCEPTION_SORTER_CLASS_NAME)
+                            .set(""org.jboss.jca.adapters.jdbc.extensions.sybase.SybaseExceptionSorter"");
+                    return dataSource;
+                },
+                sybaseDriver,
                 properties(""NetworkProtocol"", ""Tds"", SERVER_NAME, LOCALHOST, ""PortNumber"", ""4100"", DATABASE_NAME,
                         ""mydatabase"")));
 ",2017-11-16T11:34:12Z,80
"@@ -75,8 +75,8 @@ protected void onShow(Context context) {
         nameItem.setUndefined(false);
 
         nameItem.setEnabled(!context.isCreated());
-        form.getFormItem(JNDI_NAME).setEnabled(!context.isCreated());
         form.edit(context.dataSource);
+        form.getFormItem(JNDI_NAME).setEnabled(!context.isCreated());
     }
 
     @Override",2017-11-16T11:34:12Z,141
"@@ -22,7 +22,7 @@
 /**
  * @author Harald Pehl
  */
-interface AddressTemplates {
+public interface AddressTemplates {
 
     String DATA_SOURCE_ADDRESS = ""/{selected.profile}/subsystem=datasources/data-source=*"";
     String XA_DATA_SOURCE_ADDRESS = ""/{selected.profile}/subsystem=datasources/xa-data-source=*"";",2016-12-16T20:49:51Z,142
"@@ -22,7 +22,6 @@
 import javax.inject.Provider;
 
 import com.google.gwt.safehtml.shared.SafeHtml;
-import com.google.gwt.safehtml.shared.SafeHtmlUtils;
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
 import elemental.dom.Element;
@@ -31,16 +30,7 @@
 import org.jboss.gwt.flow.FunctionContext;
 import org.jboss.gwt.flow.Outcome;
 import org.jboss.gwt.flow.Progress;
-import org.jboss.hal.ballroom.wizard.Wizard;
-import org.jboss.hal.client.configuration.subsystem.datasource.wizard.ChooseTemplateStep;
-import org.jboss.hal.client.configuration.subsystem.datasource.wizard.ConnectionStep;
-import org.jboss.hal.client.configuration.subsystem.datasource.wizard.Context;
-import org.jboss.hal.client.configuration.subsystem.datasource.wizard.DriverStep;
-import org.jboss.hal.client.configuration.subsystem.datasource.wizard.NamesStep;
-import org.jboss.hal.client.configuration.subsystem.datasource.wizard.PropertiesStep;
-import org.jboss.hal.client.configuration.subsystem.datasource.wizard.ReviewStep;
-import org.jboss.hal.client.configuration.subsystem.datasource.wizard.State;
-import org.jboss.hal.client.configuration.subsystem.datasource.wizard.TestStep;
+import org.jboss.hal.client.configuration.subsystem.datasource.wizard.DataSourceWizard;
 import org.jboss.hal.config.Environment;
 import org.jboss.hal.core.CrudOperations;
 import org.jboss.hal.core.datasource.DataSource;
@@ -62,8 +52,6 @@
 import org.jboss.hal.dmr.model.NamedNode;
 import org.jboss.hal.dmr.model.Operation;
 import org.jboss.hal.dmr.model.ResourceAddress;
-import org.jboss.hal.meta.AddressTemplate;
-import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.token.NameTokens;
@@ -80,7 +68,6 @@
 import static java.util.Comparator.comparing;
 import static java.util.stream.Collectors.toList;
 import static org.jboss.hal.client.configuration.subsystem.datasource.AddressTemplates.*;
-import static org.jboss.hal.client.configuration.subsystem.datasource.wizard.State.*;
 import static org.jboss.hal.core.finder.FinderColumn.RefreshMode.RESTORE_SELECTION;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.resources.CSS.pfIcon;
@@ -94,10 +81,6 @@
 @Requires({DATA_SOURCE_ADDRESS, XA_DATA_SOURCE_ADDRESS, JDBC_DRIVER_ADDRESS})
 public class DataSourceColumn extends FinderColumn<DataSource> {
 
-    private static final String WIZARD_TITLE = ""wizard-title"";
-    private static final String WIZARD_TEXT = ""wizard-text"";
-    private static final String WIZARD_ERROR = ""wizard-error"";
-
     private final MetadataRegistry metadataRegistry;
     private final Dispatcher dispatcher;
     private final CrudOperations crud;
@@ -225,6 +208,15 @@ public List<ItemAction<DataSource>> actions() {
     }
 
     private void prepareWizard(final boolean xa) {
+        Function<FunctionContext> readDataSources =
+                control -> crud.readChildren(DATA_SOURCE_SUBSYSTEM_TEMPLATE, xa ? XA_DATA_SOURCE : DATA_SOURCE,
+                        children -> {
+                            List<DataSource> dataSources = children.stream()
+                                    .map(property -> new DataSource(property, xa)).collect(toList());
+                            control.getContext().set(DATASOURCES, dataSources);
+                            control.proceed();
+                        });
+
         Outcome<FunctionContext> outcome = new Outcome<FunctionContext>() {
             @Override
             public void onFailure(final FunctionContext context) {
@@ -239,15 +231,6 @@ public void onSuccess(final FunctionContext context) {
             }
         };
 
-        Function<FunctionContext> readDataSources =
-                control -> crud.readChildren(DATA_SOURCE_SUBSYSTEM_TEMPLATE, xa ? XA_DATA_SOURCE : DATA_SOURCE,
-                        children -> {
-                            List<DataSource> dataSources = children.stream()
-                                    .map(property -> new DataSource(property, xa)).collect(toList());
-                            control.getContext().set(DATASOURCES, dataSources);
-                            control.proceed();
-                        });
-
         new Async<FunctionContext>(progress.get()).waterfall(new FunctionContext(), outcome,
                 readDataSources,
                 new JdbcDriverFunctions.ReadConfiguration(crud),
@@ -258,123 +241,9 @@ public void onSuccess(final FunctionContext context) {
     }
 
     private void showWizard(List<DataSource> dataSources, List<JdbcDriver> drivers, final boolean xa) {
-
-        Wizard.Builder<Context, State> builder = new Wizard.Builder<Context, State>(
-                resources.messages().addResourceTitle(xa ? Names.XA_DATASOURCE : Names.DATASOURCE),
-                new Context(xa))
-
-                .onBack((context, currentState) -> {
-                    State previous = null;
-                    switch (currentState) {
-                        case CHOOSE_TEMPLATE:
-                            break;
-                        case NAMES:
-                            previous = CHOOSE_TEMPLATE;
-                            break;
-                        case DRIVER:
-                            previous = NAMES;
-                            break;
-                        case XA_PROPERTIES:
-                            previous = DRIVER;
-                            break;
-                        case CONNECTION:
-                            previous = context.isXa() ? XA_PROPERTIES : DRIVER;
-                            break;
-                        case TEST:
-                            previous = CONNECTION;
-                            break;
-                        case REVIEW:
-                            previous = TEST;
-                            break;
-                    }
-                    return previous;
-                })
-
-                .onNext((context, currentState) -> {
-                    State next = null;
-                    switch (currentState) {
-                        case CHOOSE_TEMPLATE:
-                            next = NAMES;
-                            break;
-                        case NAMES:
-                            next = DRIVER;
-                            break;
-                        case DRIVER:
-                            next = context.isXa() ? XA_PROPERTIES : CONNECTION;
-                            break;
-                        case XA_PROPERTIES:
-                            next = CONNECTION;
-                            break;
-                        case CONNECTION:
-                            next = TEST;
-                            break;
-                        case TEST:
-                            next = REVIEW;
-                            break;
-                        case REVIEW:
-                            break;
-                    }
-                    return next;
-                })
-
-                .stayOpenAfterFinish()
-                .onCancel(context -> {
-                    if (context.isCreated()) {
-                        // cleanup
-                        DataSource dataSource = context.getDataSource();
-                        ResourceAddress address = dataSource.isXa()
-                                ? XA_DATA_SOURCE_TEMPLATE.resolve(statementContext, dataSource.getName())
-                                : DATA_SOURCE_TEMPLATE.resolve(statementContext, dataSource.getName());
-                        Operation operation = new Operation.Builder(REMOVE, address).build();
-                        dispatcher.execute(operation,
-                                result -> refresh(RESTORE_SELECTION),
-                                (op, failure) -> MessageEvent.fire(eventBus, Message.error(resources.messages()
-                                        .testConnectionCancelError(dataSource.getName()), failure)));
-                    }
-                })
-                .onFinish((wizard, context) -> {
-                    DataSource dataSource = context.getDataSource();
-                    if (!context.isCreated()) {
-                        ResourceAddress address = dataSource.isXa()
-                                ? XA_DATA_SOURCE_TEMPLATE.resolve(statementContext, dataSource.getName())
-                                : DATA_SOURCE_TEMPLATE.resolve(statementContext, dataSource.getName());
-                        Operation operation = new Operation.Builder(ADD, address).payload(dataSource).build();
-                        dispatcher.execute(operation,
-                                result -> {
-                                    refresh(Ids.dataSourceConfiguration(dataSource.getName(), dataSource.isXa()));
-                                    wizard.showSuccess(resources.constants().operationSuccessful(),
-                                            resources.messages()
-                                                    .addResourceSuccess(Names.DATASOURCE, dataSource.getName()),
-                                            resources.messages().view(Names.DATASOURCE),
-                                            cxt -> { /* nothing to do, datasource is already selected */ });
-                                },
-                                (op, failure) -> wizard.showError(resources.constants().operationFailed(),
-                                        resources.messages().dataSourceAddError(), failure));
-                    } else {
-                        refresh(Ids.dataSourceConfiguration(dataSource.getName(), dataSource.isXa()));
-                        wizard.showSuccess(resources.constants().operationSuccessful(),
-                                resources.messages()
-                                        .addResourceSuccess(Names.DATASOURCE, dataSource.getName()),
-                                resources.messages().view(Names.DATASOURCE),
-                                cxt -> { /* nothing to do, datasource is already selected */ });
-                    }
-                });
-
-        AddressTemplate dataSourceTemplate = xa ? XA_DATA_SOURCE_TEMPLATE : DATA_SOURCE_TEMPLATE;
-        Metadata dataSourceMetadata = metadataRegistry.lookup(dataSourceTemplate);
-        Metadata driverMetadata = metadataRegistry.lookup(JDBC_DRIVER_TEMPLATE);
-
-        builder.addStep(CHOOSE_TEMPLATE, new ChooseTemplateStep(templates, resources, xa));
-        builder.addStep(NAMES, new NamesStep(dataSources, dataSourceMetadata, resources, xa));
-        builder.addStep(DRIVER, new DriverStep(drivers, driverMetadata, resources));
-        if (xa) {
-            builder.addStep(XA_PROPERTIES, new PropertiesStep(resources));
-        }
-        builder.addStep(CONNECTION, new ConnectionStep(dataSourceMetadata, resources, xa));
-        builder.addStep(TEST, new TestStep(this, resources, xa, environment.isStandalone()));
-        builder.addStep(REVIEW, new ReviewStep(dataSourceMetadata, resources, xa));
-
-        builder.build().show();
+        DataSourceWizard wizard = new DataSourceWizard(this, metadataRegistry, dispatcher, eventBus,
+                statementContext, environment, progress, resources, templates, dataSources, drivers, xa);
+        wizard.show();
     }
 
     private ResourceAddress dataSourceAddress(DataSource dataSource) {
@@ -402,81 +271,6 @@ private void setEnabled(ResourceAddress address, boolean enabled, SafeHtml messa
         });
     }
 
-    public void testConnectionFromWizard(Wizard<Context, State> wizard) {
-        Context context = wizard.getContext();
-        DataSource dataSource = context.getDataSource();
-
-        List<Function<FunctionContext>> functions = new ArrayList<>();
-        if (!context.isCreated()) {
-            // add data source
-            functions.add(control -> {
-                ResourceAddress address = dataSource.isXa()
-                        ? XA_DATA_SOURCE_TEMPLATE.resolve(statementContext, dataSource.getName())
-                        : DATA_SOURCE_TEMPLATE.resolve(statementContext, dataSource.getName());
-                Operation operation = new Operation.Builder(ADD, address).payload(dataSource).build();
-                dispatcher.executeInFunction(control, operation,
-                        result -> {
-                            context.setCreated(true);
-                            control.proceed();
-                        },
-                        (op, failure) -> {
-                            control.getContext().set(WIZARD_TITLE, resources.constants().testConnectionError());
-                            control.getContext().set(WIZARD_TEXT, resources.messages().dataSourceAddError());
-                            control.getContext().set(WIZARD_ERROR, failure);
-                            control.abort();
-                        });
-            });
-        }
-
-        // check running server(s)
-        functions.add(new TopologyFunctions.RunningServersQuery(
-                environment, dispatcher, new ModelNode().set(PROFILE_NAME, statementContext.selectedProfile())));
-
-        // test connection
-        functions.add(control -> {
-            List<Server> servers = control.getContext().get(TopologyFunctions.RUNNING_SERVERS);
-            if (!servers.isEmpty()) {
-                Server server = servers.get(0);
-                ResourceAddress address = server.getServerAddress().add(SUBSYSTEM, DATASOURCES)
-                        .add(DATA_SOURCE, dataSource.getName());
-                Operation operation = new Operation.Builder(TEST_CONNECTION_IN_POOL, address).build();
-                dispatcher.executeInFunction(control, operation,
-                        result -> control.proceed(),
-                        (op, failure) -> {
-                            control.getContext().set(WIZARD_TITLE, resources.constants().testConnectionError());
-                            control.getContext()
-                                    .set(WIZARD_TEXT, resources.messages().testConnectionError(dataSource.getName()));
-                            control.getContext().set(WIZARD_ERROR, failure);
-                            control.abort();
-                        });
-
-            } else {
-                control.getContext().set(WIZARD_TITLE, resources.constants().testConnectionError());
-                control.getContext()
-                        .set(WIZARD_TEXT, SafeHtmlUtils.fromString(resources.constants().noRunningServers()));
-                control.abort();
-            }
-        });
-
-        Outcome<FunctionContext> outcome = new Outcome<FunctionContext>() {
-            @Override
-            public void onFailure(final FunctionContext context) {
-                String title = context.get(WIZARD_TITLE);
-                SafeHtml text = context.get(WIZARD_TEXT);
-                String error = context.get(WIZARD_ERROR);
-                wizard.showError(title, text, error, false);
-            }
-
-            @Override
-            public void onSuccess(final FunctionContext context) {
-                wizard.showSuccess(resources.constants().testConnectionSuccess(),
-                        resources.messages().testConnectionSuccess(dataSource.getName()), false);
-            }
-        };
-        new Async<FunctionContext>(progress.get()).waterfall(new FunctionContext(), outcome,
-                functions.toArray(new Function[functions.size()]));
-    }
-
     private void testConnection(final DataSource dataSource) {
         TopologyFunctions.RunningServersQuery runningServers = new TopologyFunctions.RunningServersQuery(
                 environment, dispatcher, new ModelNode().set(PROFILE_NAME, statementContext.selectedProfile()));",2016-12-16T20:49:51Z,80
"@@ -35,11 +35,11 @@
 /**
  * @author Harald Pehl
  */
-public class ChooseTemplateStep extends WizardStep<Context, State> {
+class ChooseTemplateStep extends WizardStep<Context, State> {
 
     private final Element root;
 
-    public ChooseTemplateStep(final DataSourceTemplates templates,
+    ChooseTemplateStep(final DataSourceTemplates templates,
             final Resources resources, final boolean xa) {
         super(Ids.DATA_SOURCE_CHOOSE_TEMPLATE_STEP, resources.constants().chooseTemplate());
 ",2016-12-16T20:49:51Z,143
"@@ -30,26 +30,30 @@
 import static org.jboss.hal.dmr.ModelDescriptionConstants.CONNECTION_URL;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.PASSWORD;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.SECURITY_DOMAIN;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.USER_NAME;
 
 /**
  * @author Harald Pehl
  */
-public class ConnectionStep extends WizardStep<Context, State> {
+class ConnectionStep extends WizardStep<Context, State> {
 
     private final ModelNodeForm<DataSource> form;
 
-    public ConnectionStep(final Metadata metadata, final Resources resources, final boolean xa) {
+    ConnectionStep(final Metadata metadata, final Resources resources, final boolean xa) {
         super(Ids.DATA_SOURCE_CONNECTION_STEP, resources.constants().connection());
 
         List<String> attributes = new ArrayList<>();
         if (!xa) {
             attributes.add(CONNECTION_URL);
         }
-        attributes.addAll(asList(""user-name"", PASSWORD, SECURITY_DOMAIN)); //NON-NLS
+        attributes.addAll(asList(USER_NAME, PASSWORD, SECURITY_DOMAIN));
         form = new ModelNodeForm.Builder<DataSource>(Ids.DATA_SOURCE_CONNECTION_FORM, metadata)
                 .include(attributes)
                 .unsorted()
-                .onSave((form, changedValues) -> wizard().getContext().dataSource = form.getModel())
+                .onSave((form, changedValues) -> {
+                    changedValues.forEach((k, v) -> wizard().getContext().recordChange(k, v));
+                    wizard().getContext().dataSource = form.getModel();
+                })
                 .build();
     }
 ",2016-12-16T20:49:51Z,144
"@@ -15,23 +15,28 @@
  */
 package org.jboss.hal.client.configuration.subsystem.datasource.wizard;
 
-import org.jboss.hal.core.datasource.DataSource;
+import java.util.HashMap;
+import java.util.Map;
+
 import org.jboss.hal.client.configuration.subsystem.datasource.DataSourceTemplate;
+import org.jboss.hal.core.datasource.DataSource;
 import org.jboss.hal.core.datasource.JdbcDriver;
 
 /**
  * @author Harald Pehl
  */
-public class Context {
+class Context {
 
     private final boolean xa;
+    private final Map<String, Object> changedValues;
     private boolean created;
     DataSourceTemplate template;
     DataSource dataSource;
     JdbcDriver driver;
 
-    public Context(boolean xa) {
+    Context(boolean xa) {
         this.xa = xa;
+        this.changedValues = new HashMap<>();
     }
 
     void custom() {
@@ -44,19 +49,31 @@ void useTemplate() {
         driver = template.getDriver();
     }
 
-    public boolean isXa() {
+    void recordChange(String name, Object value) {
+        changedValues.put(name, value);
+    }
+
+    boolean isXa() {
         return xa;
     }
 
-    public DataSource getDataSource() {
+    DataSource getDataSource() {
         return dataSource;
     }
 
-    public boolean isCreated() {
+    boolean isCreated() {
         return created;
     }
 
-    public void setCreated(final boolean created) {
+    void setCreated(final boolean created) {
         this.created = created;
     }
+
+    boolean hasChanges() {
+        return isCreated() && !changedValues.isEmpty();
+    }
+
+    Map<String, Object> changes() {
+        return changedValues;
+    }
 }",2016-12-16T20:49:51Z,145
"@@ -0,0 +1,202 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.datasource.wizard;
+
+import java.util.List;
+import javax.inject.Provider;
+
+import com.google.web.bindery.event.shared.EventBus;
+import org.jboss.gwt.flow.Progress;
+import org.jboss.hal.ballroom.wizard.Wizard;
+import org.jboss.hal.client.configuration.subsystem.datasource.DataSourceColumn;
+import org.jboss.hal.client.configuration.subsystem.datasource.DataSourceTemplates;
+import org.jboss.hal.config.Environment;
+import org.jboss.hal.core.datasource.DataSource;
+import org.jboss.hal.core.datasource.JdbcDriver;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.dmr.model.Composite;
+import org.jboss.hal.dmr.model.CompositeResult;
+import org.jboss.hal.dmr.model.Operation;
+import org.jboss.hal.dmr.model.OperationFactory;
+import org.jboss.hal.dmr.model.ResourceAddress;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.MetadataRegistry;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Message;
+import org.jboss.hal.spi.MessageEvent;
+
+import static org.jboss.hal.client.configuration.subsystem.datasource.AddressTemplates.DATA_SOURCE_TEMPLATE;
+import static org.jboss.hal.client.configuration.subsystem.datasource.AddressTemplates.JDBC_DRIVER_TEMPLATE;
+import static org.jboss.hal.client.configuration.subsystem.datasource.AddressTemplates.XA_DATA_SOURCE_TEMPLATE;
+import static org.jboss.hal.client.configuration.subsystem.datasource.wizard.State.*;
+import static org.jboss.hal.core.finder.FinderColumn.RefreshMode.RESTORE_SELECTION;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.ADD;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.REMOVE;
+
+/**
+ * @author Harald Pehl
+ */
+public class DataSourceWizard {
+
+    private final DataSourceColumn column;
+    private final Resources resources;
+    private final Wizard<Context, State> wizard;
+
+    public DataSourceWizard(final DataSourceColumn column,
+            final MetadataRegistry metadataRegistry,
+            final Dispatcher dispatcher,
+            final EventBus eventBus,
+            final StatementContext statementContext,
+            final Environment environment,
+            final Provider<Progress> progress,
+            final Resources resources,
+            final DataSourceTemplates templates,
+            final List<DataSource> dataSources,
+            final List<JdbcDriver> drivers,
+            final boolean xa) {
+        this.column = column;
+        this.resources = resources;
+
+        Wizard.Builder<Context, State> builder = new Wizard.Builder<Context, State>(
+                resources.messages().addResourceTitle(xa ? Names.XA_DATASOURCE : Names.DATASOURCE), new Context(xa))
+
+                .onBack((context, currentState) -> {
+                    State previous = null;
+                    switch (currentState) {
+                        case CHOOSE_TEMPLATE:
+                            break;
+                        case NAMES:
+                            previous = CHOOSE_TEMPLATE;
+                            break;
+                        case DRIVER:
+                            previous = NAMES;
+                            break;
+                        case XA_PROPERTIES:
+                            previous = DRIVER;
+                            break;
+                        case CONNECTION:
+                            previous = context.isXa() ? XA_PROPERTIES : DRIVER;
+                            break;
+                        case TEST:
+                            previous = CONNECTION;
+                            break;
+                        case REVIEW:
+                            previous = TEST;
+                            break;
+                    }
+                    return previous;
+                })
+
+                .onNext((context, currentState) -> {
+                    State next = null;
+                    switch (currentState) {
+                        case CHOOSE_TEMPLATE:
+                            next = NAMES;
+                            break;
+                        case NAMES:
+                            next = DRIVER;
+                            break;
+                        case DRIVER:
+                            next = context.isXa() ? XA_PROPERTIES : CONNECTION;
+                            break;
+                        case XA_PROPERTIES:
+                            next = CONNECTION;
+                            break;
+                        case CONNECTION:
+                            next = TEST;
+                            break;
+                        case TEST:
+                            next = REVIEW;
+                            break;
+                        case REVIEW:
+                            break;
+                    }
+                    return next;
+                })
+
+                .stayOpenAfterFinish()
+
+                .onCancel(context -> {
+                    if (context.isCreated()) {
+                        // cleanup
+                        DataSource dataSource = context.getDataSource();
+                        ResourceAddress address = dataSource.isXa()
+                                ? XA_DATA_SOURCE_TEMPLATE.resolve(statementContext, dataSource.getName())
+                                : DATA_SOURCE_TEMPLATE.resolve(statementContext, dataSource.getName());
+                        Operation operation = new Operation.Builder(REMOVE, address).build();
+                        dispatcher.execute(operation,
+                                result -> column.refresh(RESTORE_SELECTION),
+                                (op, failure) -> MessageEvent.fire(eventBus, Message.error(resources.messages()
+                                        .testConnectionCancelError(dataSource.getName()), failure)));
+                    }
+                })
+
+                .onFinish((wizard, context) -> {
+                    DataSource dataSource = context.getDataSource();
+                    ResourceAddress address = dataSource.isXa()
+                            ? XA_DATA_SOURCE_TEMPLATE.resolve(statementContext, dataSource.getName())
+                            : DATA_SOURCE_TEMPLATE.resolve(statementContext, dataSource.getName());
+                    if (!context.isCreated()) {
+                        Operation operation = new Operation.Builder(ADD, address).payload(dataSource).build();
+                        dispatcher.execute(operation,
+                                result -> success(dataSource),
+                                (op, failure) -> wizard.showError(resources.constants().operationFailed(),
+                                        resources.messages().dataSourceAddError(), failure));
+                    } else {
+                        if (context.hasChanges()) {
+                            Composite operations = new OperationFactory().fromChangeSet(address, context.changes());
+                            dispatcher.execute(operations,
+                                    (CompositeResult result) -> success(dataSource),
+                                    (op, failure) -> wizard.showError(resources.constants().operationFailed(),
+                                            resources.messages().dataSourceAddError(), failure));
+                        } else {
+                            success(dataSource);
+                        }
+                    }
+                });
+
+        AddressTemplate dataSourceTemplate = xa ? XA_DATA_SOURCE_TEMPLATE : DATA_SOURCE_TEMPLATE;
+        Metadata dataSourceMetadata = metadataRegistry.lookup(dataSourceTemplate);
+        Metadata driverMetadata = metadataRegistry.lookup(JDBC_DRIVER_TEMPLATE);
+
+        builder.addStep(CHOOSE_TEMPLATE, new ChooseTemplateStep(templates, resources, xa));
+        builder.addStep(NAMES, new NamesStep(dataSources, dataSourceMetadata, resources, xa));
+        builder.addStep(DRIVER, new DriverStep(drivers, driverMetadata, resources));
+        if (xa) {
+            builder.addStep(XA_PROPERTIES, new PropertiesStep(resources));
+        }
+        builder.addStep(CONNECTION, new ConnectionStep(dataSourceMetadata, resources, xa));
+        builder.addStep(TEST, new TestStep(dispatcher, statementContext, environment, progress, resources));
+        builder.addStep(REVIEW, new ReviewStep(dataSourceMetadata, resources, xa));
+
+        this.wizard = builder.build();
+    }
+
+    public void show() {wizard.show();}
+
+    private void success(DataSource dataSource) {
+        column.refresh(Ids.dataSourceConfiguration(dataSource.getName(), dataSource.isXa()));
+        wizard.showSuccess(resources.constants().operationSuccessful(),
+                resources.messages()
+                        .addResourceSuccess(Names.DATASOURCE, dataSource.getName()),
+                resources.messages().view(Names.DATASOURCE),
+                cxt -> { /* nothing to do, datasource is already selected */ });
+    }
+}",2016-12-16T20:49:51Z,146
"@@ -22,8 +22,6 @@
 import com.google.common.collect.Maps;
 import elemental.dom.Element;
 import org.jboss.hal.ballroom.autocomplete.StaticAutoComplete;
-import org.jboss.hal.ballroom.form.FormItem;
-import org.jboss.hal.ballroom.form.SuggestHandler;
 import org.jboss.hal.ballroom.wizard.WizardStep;
 import org.jboss.hal.core.datasource.JdbcDriver;
 import org.jboss.hal.core.mbui.form.ModelNodeForm;
@@ -38,29 +36,25 @@
 /**
  * @author Harald Pehl
  */
-public class DriverStep extends WizardStep<Context, State> {
+class DriverStep extends WizardStep<Context, State> {
 
-    private final Map<String, JdbcDriver> drivers;
     private final ModelNodeForm<JdbcDriver> form;
-    private final FormItem<String> nameItem;
-    private SuggestHandler suggestHandler;
 
-    public DriverStep(final List<JdbcDriver> drivers, final Metadata metadata, final Resources resources) {
-        super(Ids.DATA_SOURCE_DRIVER_STEP, resources.constants().jdbcDriver());
+    DriverStep(final List<JdbcDriver> drivers,
+            final Metadata metadata,
+            final Resources resources) {
 
-        this.drivers = Maps.uniqueIndex(drivers, JdbcDriver::getName);
-        this.form = new ModelNodeForm.Builder<JdbcDriver>(Ids.DATA_SOURCE_DRIVER_FORM,
-                adjustMetadata(metadata))
-                .include(DRIVER_NAME, DRIVER_MODULE_NAME, DRIVER_CLASS_NAME, DRIVER_MAJOR_VERSION,
-                        DRIVER_MINOR_VERSION)
+        super(Ids.DATA_SOURCE_DRIVER_STEP, resources.constants().jdbcDriver());
+        Map<String, JdbcDriver> driversByName = Maps.uniqueIndex(drivers, JdbcDriver::getName);
+        this.form = new ModelNodeForm.Builder<JdbcDriver>(Ids.DATA_SOURCE_DRIVER_FORM, adjustMetadata(metadata))
+                .include(DRIVER_NAME, DRIVER_MODULE_NAME, DRIVER_CLASS_NAME, DRIVER_MAJOR_VERSION, DRIVER_MINOR_VERSION)
                 .unsorted()
                 .onSave((form, changedValues) -> wizard().getContext().driver = form.getModel())
                 .build();
-        this.nameItem = form.getFormItem(DRIVER_NAME);
 
-        if (!this.drivers.isEmpty()) {
-            this.suggestHandler = new StaticAutoComplete(new ArrayList<>(this.drivers.keySet()));
-            nameItem.registerSuggestHandler(suggestHandler);
+        if (!driversByName.isEmpty()) {
+            form.getFormItem(DRIVER_NAME)
+                    .registerSuggestHandler(new StaticAutoComplete(new ArrayList<>(driversByName.keySet())));
         }
         registerAttachable(form);
     }
@@ -95,6 +89,10 @@ protected boolean onNext(final Context context) {
         if (valid) {
             JdbcDriver driver = form.getModel();
             context.dataSource.setDriver(driver);
+            if (context.isCreated()) {
+                context.recordChange(DRIVER_NAME, driver.getName());
+                context.recordChange(DRIVER_CLASS, driver.get(DRIVER_CLASS_NAME).asString());
+            }
         }
         return valid;
     }",2016-12-16T20:49:51Z,147
"@@ -35,11 +35,11 @@
 /**
  * @author Harald Pehl
  */
-public class NamesStep extends WizardStep<Context, State> {
+class NamesStep extends WizardStep<Context, State> {
 
     private final ModelNodeForm<DataSource> form;
 
-    public NamesStep(final List<DataSource> existingDataSources, final Metadata metadata, final Resources resources,
+    NamesStep(final List<DataSource> existingDataSources, final Metadata metadata, final Resources resources,
             final boolean xa) {
         super(Ids.DATA_SOURCE_NAMES_STEP, resources.constants().attributes());
 ",2016-12-16T20:49:51Z,141
"@@ -25,11 +25,11 @@
 /**
  * @author Harald Pehl
  */
-public class PropertiesStep extends WizardStep<Context, State> {
+class PropertiesStep extends WizardStep<Context, State> {
 
     private final Element root;
 
-    public PropertiesStep(final Resources resources) {
+    PropertiesStep(final Resources resources) {
         super(Ids.DATA_SOURCE_PROPERTIES_STEP, resources.constants().xaProperties());
         root = new Elements.Builder().p().textContent(Names.NYI).end().build();
     }",2016-12-16T20:49:51Z,148
"@@ -29,20 +29,16 @@
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Resources;
 
-import static org.jboss.hal.dmr.ModelDescriptionConstants.CONNECTION_URL;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.DRIVER_NAME;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.JNDI_NAME;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.NAME;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.PASSWORD;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 
 /**
  * @author Harald Pehl
  */
-public class ReviewStep extends WizardStep<Context, State> {
+class ReviewStep extends WizardStep<Context, State> {
 
     private final ModelNodeForm<DataSource> form;
 
-    public ReviewStep(final Metadata metadata, final Resources resources, final boolean xa) {
+    ReviewStep(final Metadata metadata, final Resources resources, final boolean xa) {
         super(Ids.DATA_SOURCE_REVIEW_STEP, resources.constants().review());
 
         List<String> attributes = new ArrayList<>();",2016-12-16T20:49:51Z,63
"@@ -18,6 +18,6 @@
 /**
  * @author Harald Pehl
  */
-public enum State {
+enum State {
     CHOOSE_TEMPLATE, NAMES, DRIVER, XA_PROPERTIES, CONNECTION, TEST, REVIEW
 }",2016-12-16T20:49:51Z,149
"@@ -15,15 +15,36 @@
  */
 package org.jboss.hal.client.configuration.subsystem.datasource.wizard;
 
+import java.util.ArrayList;
+import java.util.List;
+import javax.inject.Provider;
+
 import com.google.gwt.safehtml.shared.SafeHtml;
+import com.google.gwt.safehtml.shared.SafeHtmlUtils;
 import elemental.dom.Element;
 import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.gwt.flow.Async;
+import org.jboss.gwt.flow.Function;
+import org.jboss.gwt.flow.FunctionContext;
+import org.jboss.gwt.flow.Outcome;
+import org.jboss.gwt.flow.Progress;
 import org.jboss.hal.ballroom.wizard.WizardStep;
-import org.jboss.hal.client.configuration.subsystem.datasource.DataSourceColumn;
+import org.jboss.hal.config.Environment;
+import org.jboss.hal.core.datasource.DataSource;
+import org.jboss.hal.core.runtime.TopologyFunctions;
+import org.jboss.hal.core.runtime.server.Server;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.dmr.model.Operation;
+import org.jboss.hal.dmr.model.ResourceAddress;
+import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Resources;
 
 import static org.jboss.gwt.elemento.core.EventType.click;
+import static org.jboss.hal.client.configuration.subsystem.datasource.AddressTemplates.DATA_SOURCE_TEMPLATE;
+import static org.jboss.hal.client.configuration.subsystem.datasource.AddressTemplates.XA_DATA_SOURCE_TEMPLATE;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.resources.CSS.blankSlatePf;
 import static org.jboss.hal.resources.CSS.btn;
 import static org.jboss.hal.resources.CSS.btnLg;
@@ -32,16 +53,34 @@
 /**
  * @author Harald Pehl
  */
-public class TestStep extends WizardStep<Context, State> {
+class TestStep extends WizardStep<Context, State> {
+
+    private static final String WIZARD_TITLE = ""wizard-title"";
+    private static final String WIZARD_TEXT = ""wizard-text"";
+    private static final String WIZARD_ERROR = ""wizard-error"";
 
+    private final Dispatcher dispatcher;
+    private final StatementContext statementContext;
+    private final Environment environment;
+    private final Provider<Progress> progress;
+    private final Resources resources;
     private final Element root;
 
-    public TestStep(final DataSourceColumn column, final Resources resources, final boolean xa,
-            final boolean standalone) {
+    TestStep(final Dispatcher dispatcher,
+            final StatementContext statementContext,
+            final Environment environment,
+            final Provider<Progress> progress,
+            final Resources resources) {
+
         super(Ids.DATA_SOURCE_TEST_STEP, resources.constants().testConnection());
+        this.dispatcher = dispatcher;
+        this.statementContext = statementContext;
+        this.environment = environment;
+        this.progress = progress;
+        this.resources = resources;
 
         String testConnection = resources.constants().testConnection();
-        SafeHtml description = standalone
+        SafeHtml description = environment.isStandalone()
                 ? resources.messages().testConnectionStandalone(testConnection)
                 : resources.messages().testConnectionDomain(testConnection);
         // @formatter:off
@@ -50,7 +89,7 @@ public TestStep(final DataSourceColumn column, final Resources resources, final
                 .div().innerHtml(description).end()
                 .div().css(blankSlatePf)
                     .button(resources.constants().testConnection()).css(btn, btnLg, btnPrimary)
-                        .on(click, event -> column.testConnectionFromWizard(wizard()))
+                        .on(click, event -> testConnection())
                     .end()
                 .end()
             .end()
@@ -62,4 +101,79 @@ public TestStep(final DataSourceColumn column, final Resources resources, final
     public Element asElement() {
         return root;
     }
+
+    private void testConnection() {
+        Context context = wizard().getContext();
+        DataSource dataSource = context.getDataSource();
+
+        List<Function<FunctionContext>> functions = new ArrayList<>();
+        if (!context.isCreated()) {
+            // add data source
+            functions.add(control -> {
+                ResourceAddress address = dataSource.isXa()
+                        ? XA_DATA_SOURCE_TEMPLATE.resolve(statementContext, dataSource.getName())
+                        : DATA_SOURCE_TEMPLATE.resolve(statementContext, dataSource.getName());
+                Operation operation = new Operation.Builder(ADD, address).payload(dataSource).build();
+                dispatcher.executeInFunction(control, operation,
+                        result -> {
+                            context.setCreated(true);
+                            control.proceed();
+                        },
+                        (op, failure) -> {
+                            control.getContext().set(WIZARD_TITLE, resources.constants().testConnectionError());
+                            control.getContext().set(WIZARD_TEXT, resources.messages().dataSourceAddError());
+                            control.getContext().set(WIZARD_ERROR, failure);
+                            control.abort();
+                        });
+            });
+        }
+
+        // check running server(s)
+        functions.add(new TopologyFunctions.RunningServersQuery(
+                environment, dispatcher, new ModelNode().set(PROFILE_NAME, statementContext.selectedProfile())));
+
+        // test connection
+        functions.add(control -> {
+            List<Server> servers = control.getContext().get(TopologyFunctions.RUNNING_SERVERS);
+            if (!servers.isEmpty()) {
+                Server server = servers.get(0);
+                ResourceAddress address = server.getServerAddress().add(SUBSYSTEM, DATASOURCES)
+                        .add(DATA_SOURCE, dataSource.getName());
+                Operation operation = new Operation.Builder(TEST_CONNECTION_IN_POOL, address).build();
+                dispatcher.executeInFunction(control, operation,
+                        result -> control.proceed(),
+                        (op, failure) -> {
+                            control.getContext().set(WIZARD_TITLE, resources.constants().testConnectionError());
+                            control.getContext()
+                                    .set(WIZARD_TEXT, resources.messages().testConnectionError(dataSource.getName()));
+                            control.getContext().set(WIZARD_ERROR, failure);
+                            control.abort();
+                        });
+
+            } else {
+                control.getContext().set(WIZARD_TITLE, resources.constants().testConnectionError());
+                control.getContext()
+                        .set(WIZARD_TEXT, SafeHtmlUtils.fromString(resources.constants().noRunningServers()));
+                control.abort();
+            }
+        });
+
+        Outcome<FunctionContext> outcome = new Outcome<FunctionContext>() {
+            @Override
+            public void onFailure(final FunctionContext context) {
+                String title = context.get(WIZARD_TITLE);
+                SafeHtml text = context.get(WIZARD_TEXT);
+                String error = context.get(WIZARD_ERROR);
+                wizard().showError(title, text, error, false);
+            }
+
+            @Override
+            public void onSuccess(final FunctionContext context) {
+                wizard().showSuccess(resources.constants().testConnectionSuccess(),
+                        resources.messages().testConnectionSuccess(dataSource.getName()), false);
+            }
+        };
+        new Async<FunctionContext>(progress.get()).waterfall(new FunctionContext(), outcome,
+                functions.toArray(new Function[functions.size()]));
+    }
 }",2016-12-16T20:49:51Z,150
"@@ -315,6 +315,7 @@ public interface ModelDescriptionConstants {
 
     String UNIT = ""unit"";
     String URL = ""url"";
+    String USER_NAME = ""user-name"";
     String USERNAME = ""username"";
 
     String VALUE = ""value"";",2016-12-16T20:49:51Z,109
"@@ -80,6 +80,10 @@ public Completable call(FlowContext context) {
                 .param(INCLUDE_RUNTIME, true)
                 .build());
         ops.add(new Operation.Builder(ResourceAddress.root(), WHOAMI).param(VERBOSE, true).build());
+        ops.add(new Operation.Builder(ResourceAddress.root(), READ_CHILDREN_RESOURCES_OPERATION)
+                .param(CHILD_TYPE, CORE_SERVICE)
+                .param(RECURSIVE, false)
+                .build());
 
         return dispatcher.execute(new Composite(ops))
                 .doOnSuccess((CompositeResult result) -> {
@@ -140,6 +144,9 @@ public Completable call(FlowContext context) {
                     }
                     user.setAuthenticated(true);
                     logger.debug(""User info: {} {}"", user.getName(), user.getRoles());
+
+                    ModelNode step = result.step(2).get(RESULT);
+                    environment.setPatchingEnabled(step.get(PATCHING).isDefined());
                 })
                 .toCompletable();
     }",2020-07-24T09:19:59Z,75
"@@ -48,6 +48,7 @@ public HomepageView(Environment environment, AccessControl ac, Resources resourc
         boolean ssoEnabled = environment.isSingleSignOn();
         boolean community = environment.getHalBuild() == Build.COMMUNITY;
         boolean su = ac.isSuperUserOrAdministrator();
+        boolean patchable = environment.isPatchingEnabled();
         String name = environment.getInstanceInfo().productName();
 
         Iterable<HomepageSection> sections;
@@ -210,11 +211,13 @@ public HomepageView(Environment environment, AccessControl ac, Resources resourc
                                 resources.constants().homepagePatchingDomainStep2(),
                                 resources.constants().homepagePatchingStepApply()), true));
             }
-            patching = new HomepageModule(places,
-                    Ids.HOMEPAGE_PATCHING_MODULE, NameTokens.PATCHING, Names.PATCHING,
-                    resources.messages().homepagePatchingSubHeader(name),
-                    resources.images().patching(),
-                    sections).element();
+            if (patchable) {
+                patching = new HomepageModule(places,
+                        Ids.HOMEPAGE_PATCHING_MODULE, NameTokens.PATCHING, Names.PATCHING,
+                        resources.messages().homepagePatchingSubHeader(name),
+                        resources.images().patching(),
+                        sections).element();
+            }
         }
 
         help = new HomepageHelp(environment, resources).element();
@@ -228,8 +231,11 @@ public HomepageView(Environment environment, AccessControl ac, Resources resourc
             root.appendChild(div().css(eapHomeRow)
                     .add(runtime)
                     .add(accessControl).element());
+            if (patchable) {
+                root.appendChild(div().css(eapHomeRow)
+                        .add(patching).element());
+            }
             root.appendChild(div().css(eapHomeRow)
-                    .add(patching)
                     .add(help).element());
         } else {
             root.appendChild(div().css(eapHomeRow)",2020-07-24T09:19:59Z,7
"@@ -119,7 +119,7 @@ public class HeaderView extends HalViewImpl implements HeaderPresenter.MyView {
     private List<HandlerRegistration> breadcrumbHandlers;
 
     @Inject
-    public HeaderView(Places places, AccessControl ac, Resources resources) {
+    public HeaderView(Environment environment, Places places, AccessControl ac, Resources resources) {
         this.places = places;
         this.resources = resources;
 
@@ -273,6 +273,11 @@ public HeaderView(Places places, AccessControl ac, Resources resources) {
             topLevelCategories.removeChild(patching);
             topLevelCategories.removeChild(accessControl);
         }
+
+        if (!environment.isPatchingEnabled() && topLevelCategories.contains(patching)) {
+            topLevelCategories.removeChild(patching);
+        }
+
         String accessControlNameToken = ac.isSingleSignOn() ? NameTokens.ACCESS_CONTROL_SSO : NameTokens.ACCESS_CONTROL;
 
         // @formatter:off",2020-07-24T09:19:59Z,98
"@@ -45,6 +45,7 @@ public abstract class AbstractEnvironment implements Environment {
     private Version managementVersion;
     private AccessControlProvider accessControlProvider;
     private boolean sso;
+    private boolean patchingEnabled;
 
     AbstractEnvironment(String halVersion, String halBuild, List<String> locales) {
         this.halVersion = org.jboss.hal.config.Version.parseVersion(halVersion);
@@ -178,6 +179,16 @@ public boolean isProductionMode() {
         return productionMode;
     }
 
+    @Override
+    public boolean isPatchingEnabled() {
+        return patchingEnabled;
+    }
+
+    @Override
+    public void setPatchingEnabled(boolean enabled) {
+        this.patchingEnabled = enabled;
+    }
+
     @Override
     public String toString() {
         return ""Environment(HAL "" + halVersion + "", "" + instanceInfo + "", management version "" + managementVersion +",2020-07-24T09:19:59Z,151
"@@ -102,4 +102,8 @@ public interface Environment {
 
     /** @return whether HAL is run in production mode */
     boolean isProductionMode();
+
+    void setPatchingEnabled(boolean enabled);
+
+    boolean isPatchingEnabled();
 }",2020-07-24T09:19:59Z,152
"@@ -27,25 +27,22 @@ public interface AddressTemplates {
 
     String WEB_SUBSYSTEM_ADDRESS = ""/{selected.host}/{selected.server}"" + WEB_ADDRESS;
     String WEB_SERVER_ADDRESS = WEB_SUBSYSTEM_ADDRESS + SERVER_ADDRESS;
-    String AJP_LISTENER_ADDRESS = WEB_SUBSYSTEM_ADDRESS + SERVER_ADDRESS + ""/ajp-listener=*"";
-    String HTTP_LISTENER_ADDRESS = WEB_SUBSYSTEM_ADDRESS + SERVER_ADDRESS + ""/http-listener=*"";
-    String HTTPS_LISTENER_ADDRESS = WEB_SUBSYSTEM_ADDRESS + SERVER_ADDRESS + ""/https-listener=*"";
 
+    String MODCLUSTER_ADDRESS = WEB_SUBSYSTEM_ADDRESS + ""/configuration=filter/mod-cluster=*"";
     String MODCLUSTER_BALANCER_ADDRESS = WEB_SUBSYSTEM_ADDRESS + ""/configuration=filter/mod-cluster=*/balancer=*"";
     String MODCLUSTER_BALANCER_NODE_ADDRESS = WEB_SUBSYSTEM_ADDRESS + ""/configuration=filter/mod-cluster=*/balancer=*/node=*"";
     String MODCLUSTER_BALANCER_NODE_CONTEXT_ADDRESS = WEB_SUBSYSTEM_ADDRESS + ""/configuration=filter/mod-cluster=*/balancer=*/node=*/context=*"";
 
+
     String WEB_DEPLOYMENT_ADDRESS = DEPLOYMENT_ADDRESS + WEB_ADDRESS + SERVER_ADDRESS;
     String WEB_SUBDEPLOYMENT_ADDRESS = SUBDEPLOYMENT_ADDRESS + WEB_ADDRESS + SERVER_ADDRESS;
 
+    AddressTemplate AJP_LISTENER_TEMPLATE = AddressTemplate.of(WEB_SERVER_ADDRESS + ""/ajp-listener=*"");
+    AddressTemplate MODCLUSTER_TEMPLATE = AddressTemplate.of(MODCLUSTER_ADDRESS);
     AddressTemplate MODCLUSTER_BALANCER_TEMPLATE = AddressTemplate.of(MODCLUSTER_BALANCER_ADDRESS);
     AddressTemplate MODCLUSTER_BALANCER_NODE_TEMPLATE = AddressTemplate.of(MODCLUSTER_BALANCER_NODE_ADDRESS);
     AddressTemplate MODCLUSTER_BALANCER_NODE_CONTEXT_TEMPLATE = AddressTemplate.of(MODCLUSTER_BALANCER_NODE_CONTEXT_ADDRESS);
 
-    AddressTemplate AJP_LISTENER_TEMPLATE = AddressTemplate.of(AJP_LISTENER_ADDRESS);
-    AddressTemplate HTTP_LISTENER_TEMPLATE = AddressTemplate.of(HTTP_LISTENER_ADDRESS);
-    AddressTemplate HTTPS_LISTENER_TEMPLATE = AddressTemplate.of(HTTPS_LISTENER_ADDRESS);
-
     AddressTemplate WEB_SUBSYSTEM_TEMPLATE = AddressTemplate.of(WEB_SUBSYSTEM_ADDRESS);
     AddressTemplate WEB_SERVER_TEMPLATE = AddressTemplate.of(WEB_SERVER_ADDRESS);
 ",2017-08-23T19:36:28Z,11
"@@ -18,47 +18,60 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Optional;
-import java.util.logging.Logger;
 import javax.inject.Inject;
 
-import com.gwtplatform.mvp.client.proxy.PlaceManager;
-import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
+import com.google.web.bindery.event.shared.EventBus;
+import org.jboss.hal.ballroom.dialog.DialogFactory;
 import org.jboss.hal.core.finder.ColumnActionFactory;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderColumn;
 import org.jboss.hal.core.finder.FinderSegment;
+import org.jboss.hal.core.finder.ItemAction;
 import org.jboss.hal.core.finder.ItemDisplay;
-import org.jboss.hal.core.mvp.Places;
 import org.jboss.hal.dmr.Composite;
 import org.jboss.hal.dmr.CompositeResult;
 import org.jboss.hal.dmr.NamedNode;
 import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.Property;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.meta.security.Constraint;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
 import org.jboss.hal.spi.AsyncColumn;
+import org.jboss.hal.spi.Message;
+import org.jboss.hal.spi.MessageEvent;
 
 import static java.util.stream.StreamSupport.stream;
+import static org.jboss.hal.client.runtime.subsystem.web.AddressTemplates.AJP_LISTENER_TEMPLATE;
+import static org.jboss.hal.client.runtime.subsystem.web.AddressTemplates.WEB_SERVER_ADDRESS;
 import static org.jboss.hal.client.runtime.subsystem.web.AddressTemplates.WEB_SERVER_TEMPLATE;
 import static org.jboss.hal.core.Strings.substringAfterLast;
+import static org.jboss.hal.core.finder.FinderColumn.RefreshMode.RESTORE_SELECTION;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
 
 @AsyncColumn(Ids.UNDERTOW_RUNTIME_LISTENER)
 public class ListenerColumn extends FinderColumn<NamedNode> {
 
-    static Logger _log = Logger.getLogger(""org.jboss"");
+    final static String HAL_LISTENER_TYPE = ""hal-listener-type"";
+    final static String HAL_WEB_SERVER = ""hal-web-server"";
 
+    private Dispatcher dispatcher;
+    private Resources resources;
+    private EventBus eventBus;
+    private StatementContext statementContext;
 
     @Inject
-    public ListenerColumn(Finder finder,
-            ColumnActionFactory columnActionFactory,
-            PlaceManager placeManager,
-            Places places,
-            Dispatcher dispatcher,
-            StatementContext statementContext) {
+    public ListenerColumn(final Finder finder,
+            final ColumnActionFactory columnActionFactory,
+            final Dispatcher dispatcher,
+            final Resources resources,
+            final EventBus eventBus,
+            final StatementContext statementContext) {
 
         super(new Builder<NamedNode>(finder, Ids.UNDERTOW_RUNTIME_LISTENER, Names.LISTENER)
                 .columnAction(columnActionFactory.refresh(Ids.UNDERTOW_LISTENER_REFRESH))
@@ -89,34 +102,83 @@ public ListenerColumn(Finder finder,
 
                         dispatcher.execute(new Composite(opAjp, opHttp, opHttps), (CompositeResult result) -> {
 
+                            List<Property> ajpProps = result.step(0).get(RESULT).asPropertyList();
+                            List<Property> httpProps = result.step(1).get(RESULT).asPropertyList();
+                            List<Property> httpsProps = result.step(2).get(RESULT).asPropertyList();
+                            // add the listener type and undertow server to the result, because the preview pane
+                            // contains a link to refresh the values, that it call a :read-resource operation
+                            // and the listener-type and undertow server is part of the resource address.
+                            ajpProps.forEach(p -> {
+                                p.getValue().get(HAL_LISTENER_TYPE).set(AJP_LISTENER);
+                                p.getValue().get(HAL_WEB_SERVER).set(server);
+                            });
+                            httpProps.forEach(p -> {
+                                p.getValue().get(HAL_LISTENER_TYPE).set(HTTP_LISTENER);
+                                p.getValue().get(HAL_WEB_SERVER).set(server);
+                            });
+                            httpsProps.forEach(p -> {
+                                p.getValue().get(HAL_LISTENER_TYPE).set(HTTPS_LISTENER);
+                                p.getValue().get(HAL_WEB_SERVER).set(server);
+                            });
+
                             List<NamedNode> listeners = new ArrayList<>();
-                            listeners.addAll(asNamedNodes(result.step(0).get(RESULT).asPropertyList()));
-                            listeners.addAll(asNamedNodes(result.step(1).get(RESULT).asPropertyList()));
-                            listeners.addAll(asNamedNodes(result.step(2).get(RESULT).asPropertyList()));
+                            listeners.addAll(asNamedNodes(ajpProps));
+                            listeners.addAll(asNamedNodes(httpProps));
+                            listeners.addAll(asNamedNodes(httpsProps));
 
                             callback.onSuccess(listeners);
                         });
                     }
 
                 })
-                .onBreadcrumbItem((item, context) -> {
-                    PlaceRequest current = placeManager.getCurrentPlaceRequest();
-                    PlaceRequest place = places.replaceParameter(current, Ids.UNDERTOW_RUNTIME_LISTENER, item.getName()).build();
-                    placeManager.revealPlace(place);
-                })
-                .itemRenderer(item -> new ItemDisplay<NamedNode>() {
-                    @Override
-                    public String getId() {
-                        return Ids.webListener(item.getName());
-                    }
-
-                    @Override
-                    public String getTitle() {
-                        return item.getName();
-                    }
+                .onPreview(server -> new ListenerPreview(dispatcher, statementContext, server)));
+        this.dispatcher = dispatcher;
+        this.resources = resources;
+        this.eventBus = eventBus;
+        this.statementContext = statementContext;
+
+        setItemRenderer(item -> new ItemDisplay<NamedNode>() {
+            @Override
+            public String getId() {
+                return Ids.webListener(item.getName());
+            }
+
+            @Override
+            public String getTitle() {
+                return item.getName();
+            }
+
+            @Override
+            public List<ItemAction<NamedNode>> actions() {
+                List<ItemAction<NamedNode>> actions = new ArrayList<>();
+                actions.add(new ItemAction.Builder<NamedNode>()
+                        .title(resources.constants().reset())
+                        .constraint(Constraint.executable(AJP_LISTENER_TEMPLATE, RESET_STATISTICS_OPERATION))
+                        .handler(item1 -> resetStatistics(item))
+                        .build());
+                return actions;
+            }
+        });
+    }
 
-                })
-                .onPreview(ListenerPreview::new)
-        );
+    private void resetStatistics(final NamedNode item) {
+
+        DialogFactory.showConfirmation(resources.messages().resetStatisticsTitle(),
+                resources.messages().resetStatisticsQuestion(item.getName()), () -> {
+
+                    String listenerType = item.asModelNode().get(HAL_LISTENER_TYPE).asString();
+                    String webserver = item.asModelNode().get(HAL_WEB_SERVER).asString();
+                    ResourceAddress address = AddressTemplate
+                            .of(WEB_SERVER_ADDRESS + ""/"" + listenerType + ""="" + item.getName())
+                            .resolve(statementContext, webserver);
+                    Operation operation = new Operation.Builder(address, RESET_STATISTICS_OPERATION).build();
+                    dispatcher.execute(operation, result -> {
+                        refresh(RESTORE_SELECTION);
+                        MessageEvent.fire(eventBus,
+                                Message.success(resources.messages().resetStatisticsSuccess(item.getName())));
+                    });
+                });
     }
+
+
 }",2017-08-23T19:36:28Z,58
"@@ -18,13 +18,50 @@
 import org.jboss.hal.core.finder.PreviewAttributes;
 import org.jboss.hal.core.finder.PreviewContent;
 import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.StatementContext;
 
 import static java.util.Arrays.asList;
+import static org.jboss.hal.client.runtime.subsystem.web.AddressTemplates.WEB_SERVER_ADDRESS;
+import static org.jboss.hal.client.runtime.subsystem.web.ListenerColumn.HAL_LISTENER_TYPE;
+import static org.jboss.hal.client.runtime.subsystem.web.ListenerColumn.HAL_WEB_SERVER;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.INCLUDE_RUNTIME;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.READ_RESOURCE_OPERATION;
 
 class ListenerPreview extends PreviewContent<NamedNode> {
 
-    ListenerPreview(NamedNode server) {
+    private Dispatcher dispatcher;
+    private StatementContext statementContext;
+    private PreviewAttributes<NamedNode> previewAttributes;
+
+    ListenerPreview(final Dispatcher dispatcher, final StatementContext statementContext,
+            NamedNode server) {
         super(server.getName());
-        previewBuilder().addAll(new PreviewAttributes<>(server, asList(""bytes-received"", ""bytes-sent"", ""error-count"", ""processing-time"", ""max-processing-time"", ""request-count"")));
+        this.dispatcher = dispatcher;
+        this.statementContext = statementContext;
+        previewAttributes = new PreviewAttributes<>(server, asList(""bytes-received"", ""bytes-sent"", ""error-count"",
+                ""processing-time"", ""max-processing-time"", ""request-count""));
+        getHeaderContainer().appendChild(refreshLink(() -> update(server)));
+        previewBuilder().addAll(previewAttributes);
+    }
+
+    @Override
+    public void update(final NamedNode item) {
+        // the HAL_LISTENER_TYPE and HAL_WEB_SERVER is added to the model in ListenerColumn class.
+        String listenerType = item.asModelNode().get(HAL_LISTENER_TYPE).asString();
+        String webserver = item.asModelNode().get(HAL_WEB_SERVER).asString();
+        ResourceAddress address = AddressTemplate.of(WEB_SERVER_ADDRESS + ""/"" + listenerType + ""="" + item.getName())
+                .resolve(statementContext, webserver);
+        Operation operation = new Operation.Builder(address, READ_RESOURCE_OPERATION)
+                .param(INCLUDE_RUNTIME, true)
+                .build();
+        dispatcher.execute(operation, result -> {
+            NamedNode n = new NamedNode(result);
+            previewAttributes.refresh(n);
+        });
+
     }
 }",2017-08-23T19:36:28Z,13
"@@ -0,0 +1,98 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.runtime.subsystem.web;
+
+import java.util.Optional;
+import java.util.logging.Logger;
+import javax.inject.Inject;
+
+import org.jboss.hal.core.finder.ColumnActionFactory;
+import org.jboss.hal.core.finder.Finder;
+import org.jboss.hal.core.finder.FinderColumn;
+import org.jboss.hal.core.finder.FinderSegment;
+import org.jboss.hal.core.finder.ItemDisplay;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.spi.AsyncColumn;
+
+import static java.util.stream.StreamSupport.stream;
+import static org.jboss.hal.client.runtime.subsystem.web.AddressTemplates.MODCLUSTER_TEMPLATE;
+import static org.jboss.hal.core.Strings.substringAfterLast;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
+
+@AsyncColumn(Ids.UNDERTOW_RUNTIME_MODCLUSTER_BALANCER)
+public class ModclusterBalancerColumn extends FinderColumn<NamedNode> {
+
+    static Logger _log = Logger.getLogger(""org.jboss"");
+
+
+    @Inject
+    public ModclusterBalancerColumn(Finder finder,
+            ColumnActionFactory columnActionFactory,
+            Dispatcher dispatcher,
+            StatementContext statementContext) {
+
+        super(new Builder<NamedNode>(finder, Ids.UNDERTOW_RUNTIME_MODCLUSTER_BALANCER, Names.BALANCER)
+                .columnAction(columnActionFactory.refresh(Ids.UNDERTOW_MODCLUSTER_BALANCER_REFRESH))
+                .itemsProvider((context, callback) -> {
+
+                    Optional<String> optional = stream(context.getPath().spliterator(), false)
+                            .filter(segment -> Ids.UNDERTOW_RUNTIME_MODCLUSTER.equals(segment.getColumnId()))
+                            .findAny()
+                            .map(FinderSegment::getItemId);
+                    if (optional.isPresent()) {
+                        // Extract the server name from the item id ""undertow-server-<server name>""
+                        String modcluster = substringAfterLast(optional.get(), ""undertow-modcluster"" + ""-"");
+                        ResourceAddress address = MODCLUSTER_TEMPLATE.resolve(statementContext, modcluster);
+                        Operation operation = new Operation.Builder(address, READ_CHILDREN_RESOURCES_OPERATION)
+                                .param(CHILD_TYPE, BALANCER)
+                                .param(INCLUDE_RUNTIME, true)
+                                .build();
+                        dispatcher.execute(operation, result -> {
+                            callback.onSuccess(asNamedNodes(result.asPropertyList()));
+                        });
+                    }
+
+
+                })
+                .itemRenderer(item -> new ItemDisplay<NamedNode>() {
+                    @Override
+                    public String getId() {
+                        return Ids.build(UNDERTOW, MODCLUSTER, BALANCER, item.getName());
+                    }
+
+                    @Override
+                    public String getTitle() {
+                        return item.getName();
+                    }
+
+                    @Override
+                    public String nextColumn() {
+                        return Ids.UNDERTOW_RUNTIME_MODCLUSTER_BALANCER_NODE;
+                    }
+                })
+                .onPreview(ModclusterBalancerPreview::new)
+        );
+
+
+    }
+}",2017-08-23T19:36:28Z,77
"@@ -0,0 +1,98 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.runtime.subsystem.web;
+
+import java.util.Iterator;
+import java.util.logging.Logger;
+import javax.inject.Inject;
+
+import org.jboss.hal.core.finder.ColumnActionFactory;
+import org.jboss.hal.core.finder.Finder;
+import org.jboss.hal.core.finder.FinderColumn;
+import org.jboss.hal.core.finder.FinderSegment;
+import org.jboss.hal.core.finder.ItemDisplay;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.spi.AsyncColumn;
+
+import static org.jboss.hal.client.runtime.subsystem.web.AddressTemplates.MODCLUSTER_BALANCER_TEMPLATE;
+import static org.jboss.hal.core.Strings.substringAfterLast;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
+
+@AsyncColumn(Ids.UNDERTOW_RUNTIME_MODCLUSTER_BALANCER_NODE)
+public class ModclusterBalancerNodeColumn extends FinderColumn<NamedNode> {
+
+    static Logger _log = Logger.getLogger(""org.jboss"");
+
+
+    @Inject
+    public ModclusterBalancerNodeColumn(Finder finder,
+            ColumnActionFactory columnActionFactory,
+            Dispatcher dispatcher,
+            StatementContext statementContext) {
+
+        super(new Builder<NamedNode>(finder, Ids.UNDERTOW_RUNTIME_MODCLUSTER_BALANCER_NODE, Names.NODE)
+                .columnAction(columnActionFactory.refresh(Ids.UNDERTOW_MODCLUSTER_BALANCER_NODE_REFRESH))
+                .itemsProvider((context, callback) -> {
+
+                    String modcluster = """";
+                    String balancer = """";
+                    for (Iterator<FinderSegment> iter = context.getPath().iterator(); iter.hasNext(); ) {
+                        FinderSegment finderSegment = iter.next();
+                        if (""undertow-runtime-modcluster"".equals(finderSegment.getColumnId())) {
+                            modcluster = substringAfterLast(finderSegment.getItemId(), ""undertow-modcluster-"");
+                        }
+                        if (""undertow-runtime-modcluster-balancer"".equals(finderSegment.getColumnId())) {
+                            balancer = substringAfterLast(finderSegment.getItemId(), ""undertow-modcluster-balancer-"");
+                        }
+                    }
+                    ;
+                    ResourceAddress address = MODCLUSTER_BALANCER_TEMPLATE.resolve(statementContext, modcluster,
+                            balancer);
+                    Operation operation = new Operation.Builder(address, READ_CHILDREN_RESOURCES_OPERATION)
+                            .param(CHILD_TYPE, NODE)
+                            .param(INCLUDE_RUNTIME, true)
+                            .build();
+                    dispatcher.execute(operation, result -> callback.onSuccess(asNamedNodes(result.asPropertyList())));
+
+
+                })
+                .itemRenderer(item -> new ItemDisplay<NamedNode>() {
+                    @Override
+                    public String getId() {
+                        return Ids.build(UNDERTOW, MODCLUSTER, BALANCER, NODE, item.getName());
+                    }
+
+                    @Override
+                    public String getTitle() {
+                        return item.getName();
+                    }
+
+                    /*@Override
+                    public String nextColumn() {
+                        return Ids.UNDERTOW_RUNTIME_MODCLUSTER_BALANCER_NODE_CONTEXT;
+                    }*/
+                })
+                .onPreview(ModclusterBalancerNodePreview::new)
+        );
+    }
+}",2017-08-23T19:36:28Z,41
"@@ -0,0 +1,101 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.runtime.subsystem.web;
+
+import java.util.Iterator;
+import java.util.logging.Logger;
+import javax.inject.Inject;
+
+import org.jboss.hal.core.finder.ColumnActionFactory;
+import org.jboss.hal.core.finder.Finder;
+import org.jboss.hal.core.finder.FinderColumn;
+import org.jboss.hal.core.finder.FinderSegment;
+import org.jboss.hal.core.finder.ItemDisplay;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.spi.AsyncColumn;
+
+import static org.jboss.hal.client.runtime.subsystem.web.AddressTemplates.MODCLUSTER_BALANCER_NODE_TEMPLATE;
+import static org.jboss.hal.core.Strings.substringAfterLast;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
+
+@AsyncColumn(Ids.UNDERTOW_RUNTIME_MODCLUSTER_BALANCER_NODE_CONTEXT)
+public class ModclusterBalancerNodeContextColumn extends FinderColumn<NamedNode> {
+
+    static Logger _log = Logger.getLogger(""org.jboss"");
+
+
+    @Inject
+    public ModclusterBalancerNodeContextColumn(Finder finder,
+            ColumnActionFactory columnActionFactory,
+            Dispatcher dispatcher,
+            StatementContext statementContext) {
+
+        super(new Builder<NamedNode>(finder, Ids.UNDERTOW_RUNTIME_MODCLUSTER_BALANCER_NODE_CONTEXT, Names.CONTEXT)
+                .columnAction(columnActionFactory.refresh(Ids.UNDERTOW_MODCLUSTER_BALANCER_NODE_CONTEXT_REFRESH))
+                .itemsProvider((context, callback) -> {
+
+                    String modcluster = """";
+                    String balancer = """";
+                    String node = """";
+                    for (Iterator<FinderSegment> iter = context.getPath().iterator(); iter.hasNext(); ) {
+                        FinderSegment finderSegment = iter.next();
+                        if (""undertow-runtime-modcluster"".equals(finderSegment.getColumnId())) {
+                            modcluster = substringAfterLast(finderSegment.getItemId(), ""undertow-modcluster-"");
+                        }
+                        if (""undertow-runtime-modcluster-balancer"".equals(finderSegment.getColumnId())) {
+                            balancer = substringAfterLast(finderSegment.getItemId(), ""undertow-modcluster-balancer-"");
+                        }
+                        if (""undertow-runtime-modcluster-balancer-node"".equals(finderSegment.getColumnId())) {
+                            node = substringAfterLast(finderSegment.getItemId(), ""undertow-modcluster-balancer-node-"");
+                            _log.info(""  node item id: "" + finderSegment.getItemId() );
+                        }
+                    }
+                    ResourceAddress address = MODCLUSTER_BALANCER_NODE_TEMPLATE.resolve(statementContext, modcluster,
+                            balancer, node);
+                    Operation operation = new Operation.Builder(address, READ_CHILDREN_RESOURCES_OPERATION)
+                            .param(CHILD_TYPE, CONTEXT)
+                            .param(INCLUDE_RUNTIME, true)
+                            .build();
+                    _log.info("" operation: "" + operation);
+
+                    dispatcher.execute(operation, result -> {
+                        _log.info("" result: "" + result);
+                        callback.onSuccess(asNamedNodes(result.asPropertyList()));
+                    });
+                })
+                .itemRenderer(item -> new ItemDisplay<NamedNode>() {
+                    @Override
+                    public String getId() {
+                        return Ids.build(UNDERTOW, MODCLUSTER, BALANCER, NODE, CONTEXT, item.getName());
+                    }
+
+                    @Override
+                    public String getTitle() {
+                        return item.getName();
+                    }
+
+                })
+                .onPreview(ModclusterBalancerNodeContextPreview::new)
+        );
+    }
+}",2017-08-23T19:36:28Z,52
"@@ -0,0 +1,30 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.runtime.subsystem.web;
+
+import org.jboss.hal.core.finder.PreviewAttributes;
+import org.jboss.hal.core.finder.PreviewContent;
+import org.jboss.hal.dmr.NamedNode;
+
+import static java.util.Arrays.asList;
+
+class ModclusterBalancerNodeContextPreview extends PreviewContent<NamedNode> {
+
+    ModclusterBalancerNodeContextPreview(NamedNode modcluster) {
+        super(modcluster.getName());
+        previewBuilder().addAll(new PreviewAttributes<>(modcluster, asList(""requests"", ""status"")));
+    }
+}",2017-08-23T19:36:28Z,31
"@@ -0,0 +1,32 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.runtime.subsystem.web;
+
+import org.jboss.hal.core.finder.PreviewAttributes;
+import org.jboss.hal.core.finder.PreviewContent;
+import org.jboss.hal.dmr.NamedNode;
+
+import static java.util.Arrays.asList;
+
+class ModclusterBalancerNodePreview extends PreviewContent<NamedNode> {
+
+    ModclusterBalancerNodePreview(NamedNode modcluster) {
+        super(modcluster.getName());
+        previewBuilder().addAll(new PreviewAttributes<>(modcluster, asList(""aliases"", ""cache-connections"", ""elected"",
+                ""flush-packets"", ""load"", ""load-balancing-group"", ""max-connections"", ""open-connections"", ""ping"",
+                ""queue-new-requests"", ""read"", ""request-queue-size"", ""status"", ""timeout"", ""ttl"", ""uri"", ""written"")));
+    }
+}",2017-08-23T19:36:28Z,27
"@@ -0,0 +1,37 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.runtime.subsystem.web;
+
+import org.jboss.hal.core.finder.PreviewAttributes;
+import org.jboss.hal.core.finder.PreviewContent;
+import org.jboss.hal.dmr.NamedNode;
+
+import static java.util.Arrays.asList;
+
+class ModclusterBalancerPreview extends PreviewContent<NamedNode> {
+
+    ModclusterBalancerPreview(NamedNode modcluster) {
+        super(modcluster.getName());
+        previewBuilder().addAll(new PreviewAttributes<>(modcluster, asList(
+                ""load-balancing-group"",
+                ""sticky-session"",
+                ""sticky-session-cookie"",
+                ""sticky-session-force"",
+                ""sticky-session-path"",
+                ""sticky-session-remove"",
+                ""wait-worker"")));
+    }
+}",2017-08-23T19:36:28Z,57
"@@ -0,0 +1,81 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.runtime.subsystem.web;
+
+import java.util.logging.Logger;
+import javax.inject.Inject;
+
+import org.jboss.hal.core.finder.ColumnActionFactory;
+import org.jboss.hal.core.finder.Finder;
+import org.jboss.hal.core.finder.FinderColumn;
+import org.jboss.hal.core.finder.ItemDisplay;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.spi.AsyncColumn;
+
+import static org.jboss.hal.client.runtime.subsystem.web.AddressTemplates.WEB_SUBSYSTEM_TEMPLATE;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
+
+@AsyncColumn(Ids.UNDERTOW_RUNTIME_MODCLUSTER)
+public class ModclusterColumn extends FinderColumn<NamedNode> {
+
+    static Logger _log = Logger.getLogger(""org.jboss"");
+
+
+    @Inject
+    public ModclusterColumn(Finder finder,
+            ColumnActionFactory columnActionFactory,
+            Dispatcher dispatcher,
+            StatementContext statementContext) {
+
+        super(new Builder<NamedNode>(finder, Ids.UNDERTOW_RUNTIME_MODCLUSTER, Names.MODCLUSTER)
+                .columnAction(columnActionFactory.refresh(Ids.UNDERTOW_MODCLUSTER_REFRESH))
+                .itemsProvider((context, callback) -> {
+                    ResourceAddress address = WEB_SUBSYSTEM_TEMPLATE.append(""/configuration=filter"").resolve(statementContext);
+                    Operation operation = new Operation.Builder(address, READ_CHILDREN_RESOURCES_OPERATION)
+                            .param(CHILD_TYPE, ""mod-cluster"")
+                            .param(INCLUDE_RUNTIME, true)
+                            .build();
+                    dispatcher.execute(operation, result -> callback.onSuccess(asNamedNodes(result.asPropertyList())));
+                })
+                .itemRenderer(item -> new ItemDisplay<NamedNode>() {
+                    @Override
+                    public String getId() {
+                        return Ids.build(UNDERTOW, MODCLUSTER, item.getName());
+                    }
+
+                    @Override
+                    public String getTitle() {
+                        return item.getName();
+                    }
+
+                    @Override
+                    public String nextColumn() {
+                        return Ids.UNDERTOW_RUNTIME_MODCLUSTER_BALANCER;
+                    }
+                })
+                .onPreview(ModclusterPreview::new)
+        );
+
+
+    }
+}",2017-08-23T19:36:28Z,103
"@@ -0,0 +1,47 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.runtime.subsystem.web;
+
+import java.util.logging.Logger;
+
+import org.jboss.hal.core.finder.PreviewAttributes;
+import org.jboss.hal.core.finder.PreviewContent;
+import org.jboss.hal.dmr.NamedNode;
+
+import static java.util.Arrays.asList;
+
+class ModclusterPreview extends PreviewContent<NamedNode> {
+
+    static Logger _log = Logger.getLogger(""org.jboss"");
+
+
+    ModclusterPreview(NamedNode modcluster) {
+        super(modcluster.getName());
+        previewBuilder().addAll(new PreviewAttributes<>(modcluster, asList(
+                ""advertise-frequency"",
+                ""advertise-path"",
+                ""advertise-protocol"",
+                ""advertise-socket-binding"",
+                ""broken-node-timeout"",
+                ""enable-http2"",
+                ""failover-strategy"",
+                ""health-check-interval"",
+                ""max-request-time"",
+                ""max-retries"",
+                ""request-queue-size"",
+                ""worker"")));
+    }
+}",2017-08-23T19:36:28Z,70
"@@ -35,6 +35,7 @@ public class LabelBuilder {
     private static final String QUOTE = ""'"";
     @SuppressWarnings(""HardCodedStringLiteral"")
     private final ImmutableMap<String, String> SPECIALS = ImmutableMap.<String, String>builder()
+            .put(""ajp"", ""AJP"")
             .put(""dn"", ""DN"")
             .put(""ee"", ""EE"")
             .put(""ejb3"", ""EJB3"")
@@ -60,6 +61,7 @@ public class LabelBuilder {
             .put(""sql"", ""SQL"")
             .put(""ssl"", ""SSL"")
             .put(""tcp"", ""TCP"")
+            .put(""ttl"", ""TTL"")
             .put(""uri"", ""URI"")
             .put(""url"", ""URL"")
             .put(""wsdl"", ""WSDL"")",2017-08-23T19:36:28Z,83
"@@ -93,6 +93,7 @@ public interface ModelDescriptionConstants {
     String BACKUP = ""backup"";
     String BACKUP_FOR = ""backup-for"";
     String BACKUPS = ""backups"";
+    String BALANCER = ""balancer"";
     String BASE_ROLE = ""base-role"";
     String BATCH_JBERET = ""batch-jberet"";
     String BATCH_SIZE = ""batch-size"";
@@ -154,6 +155,7 @@ public interface ModelDescriptionConstants {
     String CONSTANT_ROLE_MAPPER = ""constant-role-mapper"";
     String CONSUMER_COUNT = ""consumer-count"";
     String CONTENT = ""content"";
+    String CONTEXT = ""context"";
     String CONTEXT_ROOT = ""context-root"";
     String CONTEXT_SERVICE = ""context-service"";
     String CORE_POOL_SIZE = ""core-pool-size"";
@@ -419,6 +421,7 @@ public interface ModelDescriptionConstants {
     String NEXT_TIMEOUT = ""next-timeout"";
     String NILLABLE = ""nillable"";
     String NO_TX_SEPARATE_POOL = ""no-tx-separate-pool"";
+    String NODE = ""node"";
     String NON_DURABLE_MESSAGE_COUNT = ""non-durable-message-count"";
     String NON_DURABLE_SUBSCRIPTION_COUNT = ""non-durable-subscription-count"";
     String NONE = ""none"";
@@ -540,6 +543,7 @@ public interface ModelDescriptionConstants {
     String REQUIRED = ""required"";
     String REQUIRES = ""requires"";
     String RESET_CONFIGURATION = ""reset-configuration"";
+    String RESET_STATISTICS_OPERATION = ""reset-statistics"";
     String RESOLVE_EXPRESSION = ""resolve-expression"";
     String RESOLVE_EXPRESSION_ON_DOMAIN = ""resolve-expression-on-domain"";
     String RESOURCE_ADAPTER = ""resource-adapter"";",2017-08-23T19:36:28Z,109
"@@ -662,11 +662,19 @@ public interface Ids {
     String UNDERTOW_HOST_MAIN_PAGE = build(UNDERTOW_HOST, ""main"", PAGE_SUFFIX);
     String UNDERTOW_HOST_SINGLE_SIGN_ON = build(UNDERTOW_HOST, ""single-sign-on"");
     String UNDERTOW_HOST_TABLE = build(UNDERTOW_HOST, TABLE_SUFFIX);
+    String UNDERTOW_MODCLUSTER_BALANCER_NODE_CONTEXT_REFRESH = build(""modcluster"", ""balancer"", ""node"", ""context"",
+            REFRESH_SUFFIX);
+    String UNDERTOW_MODCLUSTER_BALANCER_NODE_REFRESH = build(""modcluster"", ""balancer"", ""node"", REFRESH_SUFFIX);
+    String UNDERTOW_MODCLUSTER_BALANCER_REFRESH = build(""modcluster"", ""balancer"", REFRESH_SUFFIX);
+    String UNDERTOW_MODCLUSTER_REFRESH = build(""modcluster"", REFRESH_SUFFIX);
     String UNDERTOW_RESPONSE_HEADER_ADD = build(""undertow-response-header"", ADD_SUFFIX);
     String UNDERTOW_RUNTIME = ""undertow-runtime"";
     String UNDERTOW_RUNTIME_DEPLOYMENT = ""undertow-runtime-deployment"";
     String UNDERTOW_RUNTIME_LISTENER = ""undertow-runtime-listener"";
     String UNDERTOW_RUNTIME_MODCLUSTER = ""undertow-runtime-modcluster"";
+    String UNDERTOW_RUNTIME_MODCLUSTER_BALANCER = ""undertow-runtime-modcluster-balancer"";
+    String UNDERTOW_RUNTIME_MODCLUSTER_BALANCER_NODE = ""undertow-runtime-modcluster-balancer-node"";
+    String UNDERTOW_RUNTIME_MODCLUSTER_BALANCER_NODE_CONTEXT = ""undertow-runtime-modcluster-balancer-node-context"";
     String UNDERTOW_RUNTIME_SERVER = ""undertow-runtime-server"";
     String UNDERTOW_SERVER = ""undertow-server"";
     String UNDERTOW_SERVER_ADD = build(UNDERTOW_SERVER, ADD_SUFFIX);",2017-08-23T19:36:28Z,111
"@@ -311,6 +311,9 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     String requires(String requires);
     String resetConfirmationTitle(String type);
     SafeHtml resetConfirmationQuestion(String name);
+    String resetStatisticsTitle();
+    SafeHtml resetStatisticsQuestion(String connector);
+    SafeHtml  resetStatisticsSuccess(String connector);
     SafeHtml resetResourceSuccess(String type, String name);
     SafeHtml resetSingletonConfirmationQuestion();
     SafeHtml resetSingletonSuccess(String type);",2017-08-23T19:36:28Z,94
"@@ -38,6 +38,7 @@ public interface Names {
     String BACKUP_FOR = ""Backup For"";
     String BACKUP = ""Backup"";
     String BACKUPS = ""Backups"";
+    String BALANCER = ""Balancer"";
     String BATCH = ""Batch"";
     String BATCH_STATUS = ""Batch Status"";
     String BINARY_JDBC = ""Binary JDBC"";
@@ -66,6 +67,7 @@ public interface Names {
     String CONNECTIONS = ""Connections"";
     String CONNECTOR_SERVICE = ""Connector Service"";
     String CONTENT = ""Content"";
+    String CONTEXT = ""Context"";
     String CONTEXT_ROOT = ""Context Root"";
     String CONTEXT_ROOTS = ""Context Roots"";
     String COOKIES = ""Cookies"";
@@ -200,6 +202,7 @@ public interface Names {
 
     String NAME = ""Name"";
     String NEW_ITEM_TEMPLATE = ""New Item Template"";
+    String NODE = ""Node"";
     String NOT_AVAILABLE = ""n/a"";
     String NYI = ""not yet implemented"";
 ",2017-08-23T19:36:28Z,112
"@@ -257,6 +257,9 @@ requires=Requires {0}
 resetConfirmationTitle=Reset {0}
 resetConfirmationQuestion=Do you really want to reset <strong>{0}</strong>? All non-required attributes will be undefined or reset to its default value (if any).
 resetResourceSuccess={0} <strong>{1}</strong> successfully reset.
+resetStatisticsTitle=Reset statistics
+resetStatisticsQuestion=Do you really want to reset statistics for connector <strong>{0}</strong> ?
+resetStatisticsSuccess=Statistics for connector <strong>{0}</strong> successfully reset.
 resetSingletonConfirmationQuestion=Do you really want to reset the resource? All non-required attributes will be undefined or reset to its default value (if any).
 resetSingletonSuccess=<strong>{0}</strong> successfully reset.
 resourceAdapterProvidedBy=The resource adapter is provided by {0} <code>{1}</code>.",2017-08-23T19:36:28Z,94
"@@ -21,4 +21,7 @@ patchRestartHostControllerQuestion=<p>O servidor de controle <strong>{0}</strong
 patchRestartDomainControllerQuestion=<p>O servidor de controle de dom\u00ednio <strong>{0}</strong> precisa ser reiniciado. Uma corre\u00e7\u00e3o n\u00e3o pode ser adicionada ou removida antes do servidor de controle ser reiniciado.</p><p>Voc\u00ea tem certeza de que quer reiniciar o servi\u00e7o de controle <strong>{0}</strong></p> ? <p>O console de gerenciamento web ficar\u00e1 indispon\u00edvel at\u00e9 que o servidor de controle de dom\u00ednio (Domain Controller) seja iniciado corretamente.</p>
 patchRestartStandaloneQuestion=<p>O servidor precisa ser reiniciado. Uma corre\u00e7\u00e3o n\u00e3o pode ser adicionada ou removida antes do servidor reiniciado.</p><p>Voc\u00ea tem certeza de que quer reiniciar o servidor ?</p><p>O console de gerenciamento web ficar\u00e1 indispon\u00edvel at\u00e9 que o servidor seja iniciado corretamente.</p>
 patchStopAllServersQuestion=<p>A aplica\u00e7\u00e3o da corre\u00e7\u00e3o ir\u00e1 substituir arquivos da instala\u00e7\u00e3o, para evitar conflitos e problemas para as aplica\u00e7\u00f5es instaladas e em funcionamento nos servidores \u00e9 altamente recomend\u00e1vel que pare todos os servidores em funcionamento sob o controlador <strong>{1}</strong>.</p><p>Voc\u00ea quer parar os seguintes servidores <strong>{0}</strong> do servi\u00e7o de controle (Host Controller) <strong>{1}</strong> ?</p><p>Cada servidor ser\u00e1 parado imediatamente.</p>
+resetStatisticsTitle=Limpar estat\u00edsticas
+resetStatisticsQuestion=Voc\u00ea realmente que limpar as estat\u00edsticas para o conector <strong>{0}</strong> ?
+resetStatisticsSuccess=As estat\u00edsticas do conector <strong>{0}</strong> foram reiniciadas com sucesso.
 undertowStatisticsDisabled=As estat\u00edsticas n\u00e3o est\u00e3o habilitadas para o subsistema Web (Undertow) do perfil <strong>{0}</strong>. Voc\u00ea pode habilit\u00e1-lo ao clicar no bot\u00e3o abaixo. Esta a\u00e7\u00e3o ir\u00e1 modificar o atributo <code>statistics-enabled</code> para <code>true</code> para o perfil <strong>{0}</strong> e todos os servidores associados a este perfil.
\ No newline at end of file",2017-08-23T19:36:28Z,94
"@@ -26,6 +26,9 @@
 import org.jboss.hal.meta.processing.MetadataProcessor;
 import org.jboss.hal.meta.resource.RequiredResources;
 import org.jboss.hal.spi.Footer;
+import org.jetbrains.annotations.NonNls;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Registry for finder columns. Manages both sync and async columns behind a split point.
@@ -42,6 +45,8 @@ interface LookupCallback {
     }
 
 
+    @NonNls private static final Logger logger = LoggerFactory.getLogger(ColumnRegistry.class);
+
     private final MetadataProcessor metadataProcessor;
     private final RequiredResources requiredResources;
     private final Provider<Progress> progress;
@@ -68,19 +73,16 @@ public void registerColumn(String id, AsyncProvider column) {
         asyncColumns.put(id, column);
     }
 
-    @SuppressWarnings(""unchecked"")
     void lookup(String id, LookupCallback callback) {
         if (resolvedColumns.containsKey(id)) {
             callback.found(resolvedColumns.get(id));
 
-        } else if (columns.containsKey(id)) {
-            FinderColumn column = columns.get(id);
-            if (requiredResources.getResources(id).isEmpty()) {
-                resolve(id, column);
-                callback.found(column);
-
-            } else {
-                // process the required resource attached to this column
+        } else {
+            logger.debug(""Try to lookup column '{}'"", id);
+            if (!requiredResources.getResources(id).isEmpty()) {
+                // first of all process the required resources attached to this column
+                logger.debug(""Column '{}' has the following required resources attached to it: {}"", id,
+                        requiredResources.getResources(id));
                 metadataProcessor.process(id, progress.get(), new AsyncCallback<Void>() {
                     @Override
                     public void onFailure(final Throwable throwable) {
@@ -91,13 +93,28 @@ public void onFailure(final Throwable throwable) {
 
                     @Override
                     public void onSuccess(final Void aVoid) {
-                        resolve(id, column);
-                        callback.found(column);
+                        lookupInternal(id, callback);
                     }
                 });
+
+            } else {
+                logger.debug(""No required resources attached to column '{}'"", id);
+                lookupInternal(id, callback);
             }
+        }
+    }
+
+    @SuppressWarnings(""unchecked"")
+    private void lookupInternal(String id, LookupCallback callback) {
+        if (columns.containsKey(id)) {
+            // this is a regular column: we're ready to go
+            FinderColumn column = columns.get(id);
+            resolve(id, column);
+            callback.found(column);
 
         } else if (asyncColumns.containsKey(id)) {
+            // the column sits behind a split point: load it asynchronously
+            logger.debug(""Load async column '{}'"", id);
             AsyncProvider<FinderColumn> asyncProvider = asyncColumns.get(id);
             asyncProvider.get(new AsyncCallback<FinderColumn>() {
                 @Override
@@ -107,9 +124,8 @@ public void onFailure(final Throwable throwable) {
 
                 @Override
                 public void onSuccess(final FinderColumn column) {
-                    asyncColumns.remove(id);
-                    columns.put(id, column);
-                    lookup(id, callback);
+                    resolve(id, column);
+                    callback.found(column);
                 }
             });
 
@@ -120,7 +136,9 @@ public void onSuccess(final FinderColumn column) {
     }
 
     private void resolve(String id, FinderColumn column) {
+        logger.info(""Successfully resolved column '{}'"", id);
         columns.remove(id);
+        asyncColumns.remove(id);
         resolvedColumns.put(id, column);
     }
 }",2016-07-29T08:09:51Z,153
"@@ -294,10 +294,15 @@ protected void prepare(State state) {
             case EDITING:
                 // change restricted and enabled state
                 for (FormItem formItem : getBoundFormItems()) {
-                    formItem.setRestricted(!securityContext.isReadable(formItem.getName()));
+                    String name = formItem.getName();
+                    int pos = name.indexOf('.');
+                    if (pos > 0) {
+                        name = name.substring(0,pos);
+                    }
+                    formItem.setRestricted(!securityContext.isReadable(name));
                     // don't touch disabled form items
                     if (formItem.isEnabled()) {
-                        formItem.setEnabled(securityContext.isWritable(formItem.getName()));
+                        formItem.setEnabled(securityContext.isWritable(name));
                     }
                 }
                 break;",2020-02-20T19:51:17Z,60
"@@ -46,6 +46,7 @@
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.ModelNodeHelper;
 import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.Property;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.flow.FlowContext;
@@ -82,10 +83,7 @@
 import static org.jboss.hal.ballroom.Skeleton.applicationOffset;
 import static org.jboss.hal.core.modelbrowser.SingletonState.CHOOSE;
 import static org.jboss.hal.core.modelbrowser.SingletonState.CREATE;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.ADD;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.PROFILE;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.READ_RESOURCE_OPERATION;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.SERVER_GROUP;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.flow.Flow.series;
 import static org.jboss.hal.meta.StatementContext.Expression.SELECTED_GROUP;
 import static org.jboss.hal.meta.StatementContext.Expression.SELECTED_PROFILE;
@@ -401,6 +399,7 @@ void add(Node<Context> parent, List<String> children) {
             metadataProcessor.lookup(template, progress.get(), new SuccessfulMetadataCallback(eventBus, resources) {
                 @Override
                 public void onMetadata(Metadata metadata) {
+                    flattenDescription(metadata.getDescription().get(OPERATIONS).get(ADD).get(REQUEST_PROPERTIES));
                     String title = new LabelBuilder().label(parent.text);
                     NameItem nameItem = new NameItem();
                     String id = Ids.build(parent.id, ""add"");
@@ -412,15 +411,46 @@ public void onMetadata(Metadata metadata) {
 
                     AddResourceDialog dialog = new AddResourceDialog(
                             resources.messages().addResourceTitle(title),
-                            form, (name1, model) ->
-                            crud.add(title, nameItem.getValue(), fqAddress(parent, nameItem.getValue()),
-                                    model, (n, a) -> refresh(parent)));
+                            form, (name1, model) -> {
+                                unflattenModel(model);
+                                crud.add(title, nameItem.getValue(), fqAddress(parent, nameItem.getValue()),
+                                    model, (n, a) -> refresh(parent));
+                            });
                     dialog.show();
                 }
             });
         }
     }
 
+    private void flattenDescription(ModelNode model) {
+        for (Property p : model.asPropertyList()) {
+            if (p.getValue().get(TYPE).asString().equalsIgnoreCase(OBJECT) && !p.getValue().get(VALUE_TYPE).asString().equalsIgnoreCase(STRING)) {
+
+                model.remove(p.getName());
+
+                for (Property nested : p.getValue().get(VALUE_TYPE).asPropertyList()) {
+                    model.get(p.getName() + ""."" + nested.getName()).set(nested.getValue());
+                }
+            }
+        }
+    }
+
+    private void unflattenModel(ModelNode model) {
+        if (!model.isDefined()) {
+            return;
+        }
+        for (Property p : model.asPropertyList()) {
+            if (p.getName().indexOf('.') < 0) {
+                continue;
+            }
+
+            String[] split = p.getName().split(""\\."");
+
+            model.remove(p.getName());
+            model.get(split[0]).get(split[1]).set(p.getValue());
+        }
+    }
+
     static AddressTemplate asGenericTemplate(Node<Context> node, ResourceAddress address) {
         return AddressTemplate.of(address, (name, value, first, last, index, size) -> {
             String segment;",2020-02-20T19:51:17Z,114
"@@ -26,7 +26,9 @@
 import org.jboss.hal.ballroom.tree.Node;
 import org.jboss.hal.core.mbui.form.ModelNodeForm;
 import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.ModelType;
 import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.Property;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.Metadata;
@@ -35,9 +37,7 @@
 
 import static org.jboss.gwt.elemento.core.Elements.p;
 import static org.jboss.hal.core.modelbrowser.ModelBrowser.PLACE_HOLDER_ELEMENT;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.ATTRIBUTES;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.INCLUDE_RUNTIME;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.READ_RESOURCE_OPERATION;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.resources.CSS.lead;
 
 /**
@@ -103,6 +103,8 @@ void update(Node<Context> node, ResourceAddress address, Metadata metadata) {
                     .param(INCLUDE_RUNTIME, true)
                     .build();
             dispatcher.execute(operation, result -> {
+                flattenDescription(metadata.getDescription().get(ATTRIBUTES));
+                flattenModel(result);
                 ModelNodeForm<ModelNode> form = new ModelNodeForm.Builder<>(
                         Ids.build(Ids.MODEL_BROWSER, node.id, Ids.FORM), metadata)
                         .includeRuntime()
@@ -134,4 +136,30 @@ void hide() {
             Elements.setVisible(element, false);
         }
     }
+
+    private void flattenDescription(ModelNode model) {
+        for (Property p : model.asPropertyList()) {
+            if (p.getValue().get(TYPE).asString().equalsIgnoreCase(OBJECT) && !p.getValue().get(VALUE_TYPE).asString().equalsIgnoreCase(STRING)) {
+
+                model.remove(p.getName());
+
+                for (Property nested : p.getValue().get(VALUE_TYPE).asPropertyList()) {
+                    model.get(p.getName() + ""."" + nested.getName()).set(nested.getValue());
+                }
+            }
+        }
+    }
+
+    private void flattenModel(ModelNode model) {
+        for (Property p : model.asPropertyList()) {
+            if (p.getValue().getType() == ModelType.OBJECT) {
+
+                model.remove(p.getName());
+
+                for (Property nested : p.getValue().asPropertyList()) {
+                    model.get(p.getName() + ""."" + nested.getName()).set(nested.getValue());
+                }
+            }
+        }
+    }
 }",2020-02-20T19:51:17Z,154
"@@ -36,6 +36,11 @@ h2.underline {
   padding-bottom: @hal-footer-height;
 }
 
+.link {
+  color: #0088ce;
+  text-decoration: none;
+}
+
 .margin-bottom-5 {
   margin-bottom: 5px;
 }",2018-08-01T10:39:38Z,155
"@@ -53,6 +53,7 @@
 import org.jboss.hal.dmr.Operation;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.js.Browser;
 import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.security.AuthorisationDecision;
@@ -284,8 +285,9 @@ class BrowseContentElement implements IsElement, Attachable {
                                 .add(unsupportedFileType)))
                 .asElement();
 
+        boolean supported = !(Browser.isEdge() || Browser.isIE());
         AuthorisationDecision ad = AuthorisationDecision.from(environment, metadata.getSecurityContext());
-        if (ad.isAllowed(Constraint.executable(CONTENT_TEMPLATE, ADD_CONTENT))) {
+        if (supported && ad.isAllowed(Constraint.executable(CONTENT_TEMPLATE, ADD_CONTENT))) {
             addContentButton = Optional.of(button().css(btn, btnDefault)
                     .on(click, event -> addContent())
                     .title(resources.constants().newContent())",2018-08-01T10:39:38Z,156
"@@ -19,7 +19,7 @@
 
 public class UploadContentStep extends UploadStep {
 
-    public UploadContentStep(final Resources resources) {
+    public UploadContentStep(Resources resources) {
         super(resources.constants().uploadContent(), resources.messages().noContent());
     }
 }",2018-08-01T10:39:38Z,157
"@@ -45,7 +45,7 @@ public class UploadElement implements IsElement<HTMLElement> {
     private HTMLInputElement fileInput;
     private HTMLElement labelElement;
 
-    public UploadElement(final SafeHtml noFilesError) {
+    public UploadElement(SafeHtml noFilesError) {
         HTMLElement iconElement, dragElement;
 
         this.alert = new Alert(Icons.ERROR, noFilesError);
@@ -60,9 +60,9 @@ public UploadElement(final SafeHtml noFilesError) {
                         .asElement())
                 .add(labelElement = label()
                         .apply(l -> l.htmlFor = Ids.UPLOAD_FILE_INPUT)
-                        .add(a().css(clickable)
-                                .textContent(CONSTANTS.chooseFile())
-                                .add(dragElement = span().textContent("" "" + CONSTANTS.orDragItHere()).asElement()))
+                        .css(clickable, link)
+                        .textContent(CONSTANTS.chooseFile())
+                        .add(dragElement = span().textContent("" "" + CONSTANTS.orDragItHere()).asElement())
                         .asElement())
                 .asElement();
 ",2018-08-01T10:39:38Z,20
"@@ -23,7 +23,7 @@ abstract class UploadStep extends WizardStep<UploadContext, UploadState> {
 
     private final UploadElement uploadElement;
 
-    UploadStep(final String title, final SafeHtml onError) {
+    UploadStep(String title, SafeHtml onError) {
         super(title);
         this.uploadElement = new UploadElement(onError);
     }
@@ -34,17 +34,17 @@ public HTMLElement asElement() {
     }
 
     @Override
-    public void reset(final UploadContext context) {
+    public void reset(UploadContext context) {
         context.file = null;
     }
 
     @Override
-    protected void onShow(final UploadContext context) {
+    protected void onShow(UploadContext context) {
         uploadElement.reset();
     }
 
     @Override
-    protected boolean onNext(final UploadContext context) {
+    protected boolean onNext(UploadContext context) {
         if (uploadElement.validate()) {
             context.file = uploadElement.getFiles().item(0);
             return true;",2018-08-01T10:39:38Z,158
"@@ -197,6 +197,7 @@ public interface CSS {
     String langJava = ""lang-java"";
     String last = ""last"";
     String lead = ""lead"";
+    String link = ""link"";
     String listGroup = ""list-group"";
     String listGroupItem = ""list-group-item"";
     String listGroupItemValue = ""list-group-item-value"";",2018-08-01T10:39:38Z,159
"@@ -112,18 +112,6 @@
     </dependencies>
 
     <build>
-        <resources>
-            <resource>
-                <directory>src/main/java</directory>
-                <includes>
-                    <include>**/*.html</include>
-                </includes>
-            </resource>
-            <resource>
-                <directory>src/main/resources</directory>
-            </resource>
-        </resources>
-
         <plugins>
             <plugin>
                 <groupId>com.github.eirslett</groupId>",2015-07-30T12:02:23Z,160
"@@ -24,21 +24,20 @@
 import com.gwtplatform.mvp.client.annotations.DefaultPlace;
 import com.gwtplatform.mvp.client.annotations.ErrorPlace;
 import com.gwtplatform.mvp.client.annotations.UnauthorizedPlace;
-import com.gwtplatform.mvp.client.gin.AbstractPresenterModule;
 import com.gwtplatform.mvp.client.gin.DefaultModule;
 import com.gwtplatform.mvp.shared.proxy.RouteTokenFormatter;
 import org.jboss.hal.client.homepage.HomepagePresenter;
-import org.jboss.hal.client.homepage.HomepageView;
-import org.jboss.hal.client.widget.FooterPresenter;
-import org.jboss.hal.client.widget.FooterView;
-import org.jboss.hal.client.widget.HeaderPresenter;
-import org.jboss.hal.client.widget.HeaderView;
-import org.jboss.hal.client.widget.Templated_HeaderView_Provider;
+import org.jboss.hal.client.homepage.Templated_HomepageView_Provider;
+import org.jboss.hal.client.skeleton.FooterPresenter;
+import org.jboss.hal.client.skeleton.HeaderPresenter;
+import org.jboss.hal.client.skeleton.Templated_FooterView_Provider;
+import org.jboss.hal.client.skeleton.Templated_HeaderView_Provider;
 import org.jboss.hal.core.HalPlaceManager;
+import org.jboss.hal.core.gin.AbstractTemplatedPresenterModule;
 import org.jboss.hal.spi.GinModule;
 
 @GinModule
-public class ApplicationModule extends AbstractPresenterModule {
+public class ApplicationModule extends AbstractTemplatedPresenterModule {
 
     @Override
     protected void configure() {
@@ -52,23 +51,22 @@ protected void configure() {
         bindConstant().annotatedWith(ErrorPlace.class).to(NameTokens.Homepage);
         bindConstant().annotatedWith(UnauthorizedPlace.class).to(NameTokens.Homepage);
 
-        bind(HeaderView.class).toProvider(Templated_HeaderView_Provider.class);
-        bindSingletonPresenterWidget(HeaderPresenter.class,
+        bindTemplatedSingletonPresenterWidget(HeaderPresenter.class,
                 HeaderPresenter.MyView.class,
-                HeaderView.class);
+                Templated_HeaderView_Provider.class);
 
-        bindSingletonPresenterWidget(FooterPresenter.class,
+        bindTemplatedSingletonPresenterWidget(FooterPresenter.class,
                 FooterPresenter.MyView.class,
-                FooterView.class);
+                Templated_FooterView_Provider.class);
 
         bindPresenter(ApplicationPresenter.class,
                 ApplicationPresenter.MyView.class,
                 ApplicationView.class,
                 ApplicationPresenter.MyProxy.class);
 
-        bindPresenter(HomepagePresenter.class,
+        bindTemplatedPresenter(HomepagePresenter.class,
                 HomepagePresenter.MyView.class,
-                HomepageView.class,
+                Templated_HomepageView_Provider.class,
                 HomepagePresenter.MyProxy.class);
     }
 }",2015-07-30T12:02:23Z,44
"@@ -32,19 +32,20 @@
 import com.gwtplatform.mvp.client.presenter.slots.PermanentSlot;
 import com.gwtplatform.mvp.client.proxy.Proxy;
 import com.gwtplatform.mvp.client.proxy.RevealContentHandler;
-import org.jboss.hal.client.widget.FooterPresenter;
-import org.jboss.hal.client.widget.HeaderPresenter;
+import org.jboss.hal.client.skeleton.FooterPresenter;
+import org.jboss.hal.client.skeleton.HeaderPresenter;
 
 /**
  * @author Harald Pehl
  */
 public class ApplicationPresenter extends Presenter<ApplicationPresenter.MyView, ApplicationPresenter.MyProxy> {
 
+    // @formatter:off
     @ProxyStandard
     interface MyProxy extends Proxy<ApplicationPresenter> {}
 
-
     interface MyView extends View {}
+    // @formatter:on
 
 
     @ContentSlot",2015-07-30T12:02:23Z,28
"@@ -27,7 +27,9 @@
 import elemental.dom.Element;
 import elemental.html.DivElement;
 import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.hal.resources.HalIds;
 
+import javax.inject.Inject;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -42,9 +44,10 @@ public class ApplicationView extends ViewImpl implements ApplicationPresenter.My
     private final DivElement rootContainer;
     private boolean initialized;
 
-    public ApplicationView() {
+    @Inject
+    public ApplicationView(HalIds ids) {
         slots = new HashMap<>();
-        rootContainer = new Elements.Builder().div().css(""container-fluid root-container"").end().build();
+        rootContainer = new Elements.Builder().div().id(ids.root_container()).css(""container-fluid"").end().build();
         initWidget(Elements.asWidget(rootContainer));
     }
 ",2015-07-30T12:02:23Z,76
"@@ -1,24 +0,0 @@
-<!DOCTYPE html>
-<html>
-<head lang=""en"">
-    <meta charset=""UTF-8"">
-    <title>Homepage</title>
-    <meta http-equiv=""X-UA-Compatible"" content=""IE=9"">
-    <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
-    <link href=""../../../../../../webapp/patternfly/dist/css/patternfly.min.css"" rel=""stylesheet"">
-    <link href=""../../../../../../webapp/css/hal.min.css"" rel=""stylesheet"">
-    <script src=""../../../../../../webapp/patternfly/components/jquery/jquery.min.js""></script>
-    <script src=""../../../../../../webapp/patternfly/components/bootstrap/dist/js/bootstrap.min.js""></script>
-    <script src=""../../../../../../webapp/patternfly/dist/js/patternfly.min.js""></script>
-</head>
-<body>
-<div data-field=""content"" class=""container-fluid"">
-    <div class=""row"">
-        <div class=""col-md-12"">
-            <h1>Welcome to HAL.Next</h1>
-            <p>This page will contain some static info boxes, text and related links.</p>
-        </div>
-    </div>
-</div>
-</body>
-</html>",2015-07-30T12:02:23Z,7
"@@ -38,12 +38,15 @@
  */
 public class HomepagePresenter extends Presenter<HomepagePresenter.MyView, HomepagePresenter.MyProxy> {
 
+    // @formatter:off
     @NoGatekeeper
     @ProxyStandard
     @NameToken(NameTokens.Homepage)
     public interface MyProxy extends ProxyPlace<HomepagePresenter> {}
 
     public interface MyView extends View {}
+    // @formatter:on
+
 
     @Inject
     public HomepagePresenter(final EventBus eventBus,",2015-07-30T12:02:23Z,7
"@@ -22,27 +22,24 @@
 package org.jboss.hal.client.homepage;
 
 import com.gwtplatform.mvp.client.ViewImpl;
-import elemental.dom.Element;
 import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.gwt.elemento.core.IsElement;
+import org.jboss.gwt.elemento.core.Templated;
+
+import javax.annotation.PostConstruct;
 
 /**
  * @author Harald Pehl
  */
-public class HomepageView extends ViewImpl implements HomepagePresenter.MyView {
+@Templated(""Homepage.html#homepage"")
+public abstract class HomepageView extends ViewImpl implements HomepagePresenter.MyView, IsElement {
 
-    public HomepageView() {
-        // @formatter:off
-        Element element = new Elements.Builder()
-            .div().css(""row"")
-                .div().css(""col-md-12"")
-                    .h(1).innerText(""Homepage"").end()
-                    .h(2).innerText(""Lorem ipsum"").end()
-                    .p().innerText(""dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua."").end()
-                .end()
-            .end()
-        .build();
-        // @formatter:on
+    public static HomepageView create() {
+        return new Templated_HomepageView();
+    }
 
-        initWidget(Elements.asWidget(element));
+    @PostConstruct
+    void init() {
+        initWidget(Elements.asWidget(asElement()));
     }
 }",2015-07-30T12:02:23Z,7
"@@ -19,7 +19,7 @@
  * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
  */
-package org.jboss.hal.client.widget;
+package org.jboss.hal.client.skeleton;
 
 import com.google.gwt.user.client.Window;
 import com.google.web.bindery.event.shared.EventBus;
@@ -35,10 +35,11 @@
  */
 public class FooterPresenter extends PresenterWidget<FooterPresenter.MyView> {
 
+    // @formatter:off
     public interface MyView extends View, HasPresenter<FooterPresenter> {
-
         void update(Environment environment);
     }
+    // @formatter:on
 
 
     private final Environment environment;
@@ -58,10 +59,6 @@ protected void onBind() {
         getView().update(environment);
     }
 
-    @Override
-    public void onReset() {
-    }
-
     public void onShowVersion() {
         Window.alert(""Show version not yet implemented"");
     }",2015-07-30T12:02:23Z,102
"@@ -0,0 +1,109 @@
+/*
+ * JBoss, Home of Professional Open Source.
+ * Copyright 2010, Red Hat, Inc., and individual contributors
+ * as indicated by the @author tags. See the copyright.txt file in the
+ * distribution for a full listing of individual contributors.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.jboss.hal.client.skeleton;
+
+import com.gwtplatform.mvp.client.ViewImpl;
+import elemental.dom.Element;
+import org.jboss.gwt.elemento.core.DataElement;
+import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.gwt.elemento.core.EventHandler;
+import org.jboss.gwt.elemento.core.IsElement;
+import org.jboss.gwt.elemento.core.Templated;
+import org.jboss.hal.ballroom.ProgressElement;
+import org.jboss.hal.config.Environment;
+import org.jboss.hal.core.registry.UIRegistry;
+import org.jboss.hal.resources.I18n;
+
+import javax.annotation.PostConstruct;
+
+import static org.jboss.gwt.elemento.core.EventType.click;
+
+/**
+ * @author Harald Pehl
+ */
+@Templated(""MainLayout.html#footer"")
+public abstract class FooterView extends ViewImpl implements FooterPresenter.MyView, IsElement {
+
+    // @formatter:off
+    public static FooterView create(final UIRegistry uiRegistry, final I18n i18n) {
+        return new Templated_FooterView(uiRegistry, i18n);
+    }
+
+    public abstract UIRegistry uiRegistry();
+    public abstract I18n i18n();
+    // @formatter:on
+
+
+    private FooterPresenter presenter;
+
+    @DataElement ProgressElement progress = new ProgressElement();
+    @DataElement Element halVersion;
+    @DataElement Element updateAvailable;
+
+    @PostConstruct
+    void init() {
+        Element root = asElement();
+
+        uiRegistry().register(progress);
+
+        Elements.setVisible(updateAvailable, false);
+        Elements.dataElement(root, ""tools"").setInnerText(i18n().constants().tools());
+        Elements.dataElement(root, ""modelBrowser"").setInnerText(i18n().constants().model_browser());
+        Elements.dataElement(root, ""settings"").setInnerText(i18n().constants().settings());
+
+        initWidget(Elements.asWidget(root));
+    }
+
+    @Override
+    public void setPresenter(final FooterPresenter presenter) {
+        this.presenter = presenter;
+    }
+
+    public void update(Environment environment) {
+        halVersion.setInnerText(environment.getHalVersion().toString());
+        if (environment.halUpdateAvailable()) {
+            halVersion.setTitle(i18n().messages().update_available(environment.getHalVersion().toString(),
+                    environment.getLatestHalVersion().toString()));
+            Elements.setVisible(updateAvailable, true);
+        }
+    }
+
+    @EventHandler(element = ""showVersion"", on = click)
+    void onShowVersion() {
+        presenter.onShowVersion();
+    }
+
+    @EventHandler(element = ""modelBrowser"", on = click)
+    void onModelBrowser() {
+        presenter.onModelBrowser();
+    }
+
+    @EventHandler(element = ""expressionResolver"", on = click)
+    void onExpressionResolver() {
+        presenter.onExpressionResolver();
+    }
+
+    @EventHandler(element = ""settings"", on = click)
+    void onSettings() {
+        presenter.onSettings();
+    }
+}",2015-07-30T12:02:23Z,38
"@@ -19,7 +19,7 @@
  * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
  */
-package org.jboss.hal.client.widget;
+package org.jboss.hal.client.skeleton;
 
 import com.google.gwt.user.client.Window;
 import com.google.web.bindery.event.shared.EventBus;
@@ -43,18 +43,18 @@
  */
 public class HeaderPresenter extends PresenterWidget<HeaderPresenter.MyView> implements MessageEvent.MessageHandler {
 
+    // @formatter:off
     public interface MyView extends View, HasPresenter<HeaderPresenter> {
-
         void update(Environment environment, Endpoints endpoints, User user);
-
         void select(String nameToken);
-
         void showMessage(Message.Level level, String message);
-
         void updateMessageCount(int messages);
     }
+    // @formatter:on
+
 
     static class MessageHolder {
+
         final Message.Level level;
         final String message;
         boolean new_;
@@ -94,13 +94,13 @@ protected void onBind() {
         addRegisteredHandler(MessageEvent.getType(), this);
         getView().setPresenter(this);
         getView().update(environment, endpoints, user);
+        getView().updateMessageCount(messages.size());
     }
 
     @Override
     protected void onReset() {
         super.onReset();
         getView().select(placeManager.getCurrentPlaceRequest().getNameToken());
-        getView().updateMessageCount(messages.size());
     }
 
     public void navigateTo(final String place) {",2015-07-30T12:02:23Z,95
"@@ -19,7 +19,7 @@
  * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
  */
-package org.jboss.hal.client.widget;
+package org.jboss.hal.client.skeleton;
 
 import com.google.common.base.Joiner;
 import com.google.gwt.user.client.Window;
@@ -74,7 +74,7 @@ public static HeaderView create(final I18n i18n, final HalIds ids) {
     @DataElement Element connectedTo;
 
     @PostConstruct
-    public void init() {
+    void init() {
         Element root = asElement();
 
         Id.set(messagesLabel, ids().header_messages());",2015-07-30T12:02:23Z,98
"@@ -1,129 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source.
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * as indicated by the @author tags. See the copyright.txt file in the
- * distribution for a full listing of individual contributors.
- *
- * This is free software; you can redistribute it and/or modify it
- * under the terms of the GNU Lesser General Public License as
- * published by the Free Software Foundation; either version 2.1 of
- * the License, or (at your option) any later version.
- *
- * This software is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this software; if not, write to the Free
- * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
- * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
- */
-package org.jboss.hal.client.widget;
-
-import com.gwtplatform.mvp.client.ViewImpl;
-import elemental.dom.Element;
-import elemental.html.SpanElement;
-import org.jboss.gwt.elemento.core.Elements;
-import org.jboss.hal.ballroom.Id;
-import org.jboss.hal.ballroom.ProgressElement;
-import org.jboss.hal.config.Environment;
-import org.jboss.hal.core.registry.UIRegistry;
-import org.jboss.hal.resources.HalIds;
-import org.jboss.hal.resources.I18n;
-
-import javax.inject.Inject;
-
-import static org.jboss.gwt.elemento.core.EventType.click;
-
-/**
- * @author Harald Pehl
- */
-public class FooterView extends ViewImpl implements FooterPresenter.MyView {
-
-    private final UIRegistry uiRegistry;
-    private final I18n i18n;
-    private final HalIds ids;
-
-    private FooterPresenter presenter;
-
-    private SpanElement halVersion;
-    private Element updateAvailable;
-
-    @Inject
-    public FooterView(final UIRegistry uiRegistry,
-            final I18n i18n,
-            final HalIds ids) {
-        this.uiRegistry = uiRegistry;
-        this.i18n = i18n;
-        this.ids = ids;
-
-        initWidget(Elements.asWidget(init()));
-    }
-
-    private Element init() {
-        ProgressElement progressElement = new ProgressElement();
-        uiRegistry.register(progressElement);
-
-        // @formatter:off
-        Elements.Builder builder = new Elements.Builder()
-            .start(""footer"").css(""footer"")
-                .start(""nav"").css(""navbar navbar-footer navbar-fixed-bottom"")
-                    .add(progressElement.asElement()).css(""footer-progress"")
-                    .ul().css(""nav navbar-nav footer-tools"")
-                        .li()
-                            .a().css(""clickable"").on(click, event -> presenter.onShowVersion())
-                                .start(""i"")
-                                    .css(""fa fa-bell-o"")
-                                    .attr(""title"", i18n.constants().update_available())
-                                    .rememberAs(""updateAvailable"")
-                                .end()
-                                .span().rememberAs(""halVersion"").end()
-                            .end()
-                        .end()
-                        .li().css(""dropdown"")
-                            .a().css(""clickable dropdown-toggle"").data(""toggle"", ""dropdown"")
-                                .span().css(""fa fa-wrench"").end()
-                                .span().innerText(i18n.constants().tools()).end()
-                                .start(""b"").css(""caret"").end()
-                            .end()
-                            .ul().css(""dropdown-menu dropdown"")
-                                .li().a().css(""clickable"").on(click, event -> presenter.onModelBrowser())
-                                    .innerText(i18n.constants().model_browser())
-                                .end().end()
-                                .li().a().css(""clickable"").on(click, event -> presenter.onExpressionResolver())
-                                    .innerText(i18n.constants().expression_resolver())
-                                .end().end()
-                            .end()
-                        .end()
-                        .li().a().css(""clickable"").on(click, event -> presenter.onSettings())
-                            .span().css(""pficon pficon-settings"").end()
-                            .span().innerText(i18n.constants().settings()).end()
-                        .end().end()
-                    .end()
-                .end()
-            .end();
-        // @formatter:on
-
-        halVersion = builder.referenceFor(""halVersion"");
-        updateAvailable = builder.referenceFor(""updateAvailable"");
-        Id.set(halVersion, ids.footer_version());
-        Elements.setVisible(updateAvailable, false);
-
-        return builder.build();
-    }
-
-    @Override
-    public void setPresenter(final FooterPresenter presenter) {
-        this.presenter = presenter;
-    }
-
-    public void update(Environment environment) {
-        halVersion.setInnerText(environment.getHalVersion().toString());
-        if (environment.halUpdateAvailable()) {
-            halVersion.setTitle(i18n.messages().update_available(environment.getHalVersion().toString(),
-                    environment.getLatestHalVersion().toString()));
-            Elements.setVisible(updateAvailable, true);
-        }
-    }
-}",2015-07-30T12:02:23Z,38
"@@ -1,126 +0,0 @@
-<!DOCTYPE html>
-<html>
-<head lang=""en"">
-    <meta charset=""UTF-8"">
-    <title>HAL Management Console</title>
-    <meta http-equiv=""X-UA-Compatible"" content=""IE=9"">
-    <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
-    <link href=""../../../../../../resources/org/jboss/hal/public/patternfly/dist/css/patternfly.min.css"" rel=""stylesheet"">
-    <link href=""../../../../../../resources/org/jboss/hal/public/css/hal.min.css"" rel=""stylesheet"">
-    <script src=""../../../../../../resources/org/jboss/hal/public/patternfly/components/jquery/dist/jquery.min.js""></script>
-    <script src=""../../../../../../resources/org/jboss/hal/public/patternfly/components/bootstrap/dist/js/bootstrap.min.js""></script>
-    <script src=""../../../../../../resources/org/jboss/hal/public/patternfly/dist/js/patternfly.min.js""></script>
-</head>
-<body>
-<nav data-element=""header"" class=""navbar navbar-default navbar-pf navbar-fixed-top"" role=""navigation"">
-    <div class=""navbar-header"">
-        <button type=""button"" class=""navbar-toggle"" data-toggle=""collapse"" data-target="".hal-header-collapse"">
-            <span class=""sr-only"">Toggle navigation</span>
-            <span class=""icon-bar""></span><span class=""icon-bar""></span><span class=""icon-bar""></span>
-        </button>
-        <a data-element=""logoLink"" class=""navbar-brand logo clickable"">
-            <span data-element=""logoFirst"" class=""logo-text logo-text-first"">Wild</span><span data-element=""logoLast"" class=""logo-text logo-text-last"">Fly</span>
-        </a>
-    </div>
-    <div class=""collapse navbar-collapse hal-header-collapse"">
-        <ul class=""nav navbar-nav navbar-utility"">
-            <li>
-                <a data-element=""messages"" class=""clickable"">
-                    <i class=""fa fa-align-left""></i><span data-element=""messagesLabel"">Messages (23)</span>
-                </a>
-            </li>
-            <li class=""dropdown"">
-                <a class=""clickable dropdown-toggle"" data-toggle=""dropdown"">
-                    <i class=""pficon pficon-user""></i><span data-element=""userName"">John Doe</span><b class=""caret""></b>
-                </a>
-                <ul class=""dropdown-menu"">
-                    <li data-element=""roles"" class=""static"">Active Roles: Administrator</li>
-                    <li class=""divider""></li>
-                    <li><a data-element=""logout"" class=""clickable"">Logout</a></li>
-                </ul>
-            </li>
-            <li class=""dropdown"">
-                <a class=""clickable dropdown-toggle"" data-toggle=""dropdown"">
-                    <i class=""fa fa-globe""></i><b class=""caret""></b>
-                </a>
-                <ul class=""dropdown-menu"">
-                    <li data-element=""connectedTo"" class=""static"">Connected to localhost</li>
-                    <li class=""divider""></li>
-                    <li><a data-element=""reconnect"" class=""clickable"">Connect to different server</a></li>
-                </ul>
-            </li>
-        </ul>
-        <ul class=""nav navbar-nav navbar-primary"">
-            <li class=""active""><a data-element=""homepage"" class=""active"">Homepage</a></li>
-            <li><a data-element=""deployments"" class=""clickable"">Deployments</a></li>
-            <li><a data-element=""configuration"" class=""clickable"">Configuration</a></li>
-            <li><a data-element=""runtime"" class=""clickable"">Runtime</a></li>
-            <li><a data-element=""accessControl"" class=""clickable"">Access Control</a></li>
-        </ul>
-    </div>
-</nav>
-
-<div class=""container-fluid"">
-    <div class=""row"">
-        <div class=""col-md-12"">
-            <h1>Main Layout</h1>
-
-            <h2>Lorem ipsum</h2>
-            <p>dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p>
-
-            <p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.</p>
-
-            <p>Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.</p>
-
-            <p>Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.</p>
-
-            <p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis.</p>
-
-            <p>At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, At accusam aliquyam diam diam dolore dolores duo eirmod eos erat, et nonumy sed tempor et et invidunt justo labore Stet clita ea et gubergren, kasd magna no rebum. sanctus sea sed takimata ut vero voluptua. est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat.</p>
-
-            <p>Consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus.</p>
-
-            <p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p>
-
-            <p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.</p>
-
-            <p>Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.</p>
-
-            <p>Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.</p>
-
-            <p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis.</p>
-
-            <p>At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, At accusam aliquyam diam diam dolore dolores duo eirmod eos erat, et nonumy sed tempor et et invidunt justo labore Stet clita ea et gubergren, kasd magna no rebum. sanctus sea sed takimata ut vero voluptua. est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat.</p>
-
-            <p>Consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus.</p>
-        </div>
-    </div>
-</div>
-<footer class=""footer"">
-    <nav class=""navbar navbar-footer navbar-fixed-bottom"">
-        <progress class=""footer-progress""></progress>
-        <ul class=""nav navbar-nav footer-tools"">
-            <li>
-                <a href=""#""><span>0.8.15</span><i class=""fa fa-bell""></i></a>
-            </li>
-            <li class=""dropdown"">
-                <a href=""#"" class=""dropdown-toggle"" data-toggle=""dropdown"">
-                    <span class=""fa fa-wrench""></span>Tools <b class=""caret""></b>
-                </a>
-                <ul class=""dropdown-menu dropdown"">
-                    <li>
-                        <a href=""#"">Management Model</a>
-                    </li>
-                    <li>
-                        <a href=""#"">Expression Resolver</a>
-                    </li>
-                </ul>
-            </li>
-            <li>
-                <a href=""#""><span class=""pficon pficon-settings""></span>Settings</a>
-            </li>
-        </ul>
-    </nav>
-</footer>
-</body>
-</html>",2015-07-30T12:02:23Z,161
"@@ -0,0 +1,24 @@
+<!DOCTYPE html>
+<html>
+<head lang=""en"">
+    <meta charset=""UTF-8"">
+    <title>Homepage</title>
+    <meta http-equiv=""X-UA-Compatible"" content=""IE=9"">
+    <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
+    <link href=""../../public/patternfly/dist/css/patternfly.min.css"" rel=""stylesheet"">
+    <link href=""../../public/css/hal.min.css"" rel=""stylesheet"">
+    <script src=""../../public/patternfly/components/jquery/dist/jquery.min.js""></script>
+    <script src=""../../public/patternfly/components/bootstrap/dist/js/bootstrap.min.js""></script>
+    <script src=""../../public/patternfly/dist/js/patternfly.min.js""></script>
+</head>
+<body>
+<div class=""container-fluid"">
+    <div data-element=""homepage"" class=""row"">
+        <div class=""col-md-12"">
+            <h1>Welcome to HAL.Next</h1>
+            <p>This page will contain some static info boxes, text and related links.</p>
+        </div>
+    </div>
+</div>
+</body>
+</html>",2015-07-30T12:02:23Z,7
"@@ -0,0 +1,102 @@
+<!DOCTYPE html>
+<html>
+<head lang=""en"">
+    <meta charset=""UTF-8"">
+    <title>HAL Management Console</title>
+    <meta http-equiv=""X-UA-Compatible"" content=""IE=9"">
+    <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
+    <link href=""../../public/patternfly/dist/css/patternfly.min.css"" rel=""stylesheet"">
+    <link href=""../../public/css/hal.min.css"" rel=""stylesheet"">
+    <script src=""../../public/patternfly/components/jquery/dist/jquery.min.js""></script>
+    <script src=""../../public/patternfly/components/bootstrap/dist/js/bootstrap.min.js""></script>
+    <script src=""../../public/patternfly/dist/js/patternfly.min.js""></script>
+</head>
+<body>
+<nav data-element=""header"" class=""navbar navbar-default navbar-pf navbar-fixed-top"" role=""navigation"">
+    <div class=""navbar-header"">
+        <button type=""button"" class=""navbar-toggle"" data-toggle=""collapse"" data-target="".hal-header-collapse"">
+            <span class=""sr-only"">Toggle navigation</span>
+            <span class=""icon-bar""></span><span class=""icon-bar""></span><span class=""icon-bar""></span>
+        </button>
+        <a data-element=""logoLink"" class=""navbar-brand logo clickable"">
+            <span data-element=""logoFirst"" class=""logo-text logo-text-first"">Wild</span><span data-element=""logoLast"" class=""logo-text logo-text-last"">Fly</span>
+        </a>
+    </div>
+    <div class=""collapse navbar-collapse hal-header-collapse"">
+        <ul class=""nav navbar-nav navbar-utility"">
+            <li>
+                <a data-element=""messages"" class=""clickable"">
+                    <i class=""fa fa-align-left""></i><span data-element=""messagesLabel"">Messages (23)</span>
+                </a>
+            </li>
+            <li class=""dropdown"">
+                <a class=""clickable dropdown-toggle"" data-toggle=""dropdown"">
+                    <i class=""pficon pficon-user""></i><span data-element=""userName"">John Doe</span><b class=""caret""></b>
+                </a>
+                <ul class=""dropdown-menu"">
+                    <li data-element=""roles"" class=""static"">Active Roles: Administrator</li>
+                    <li class=""divider""></li>
+                    <li><a data-element=""logout"" class=""clickable"">Logout</a></li>
+                </ul>
+            </li>
+            <li class=""dropdown"">
+                <a class=""clickable dropdown-toggle"" data-toggle=""dropdown"">
+                    <i class=""fa fa-globe""></i><b class=""caret""></b>
+                </a>
+                <ul class=""dropdown-menu"">
+                    <li data-element=""connectedTo"" class=""static"">Connected to localhost</li>
+                    <li class=""divider""></li>
+                    <li><a data-element=""reconnect"" class=""clickable"">Connect to different server</a></li>
+                </ul>
+            </li>
+        </ul>
+        <ul class=""nav navbar-nav navbar-primary"">
+            <li class=""active""><a data-element=""homepage"" class=""active"">Homepage</a></li>
+            <li><a data-element=""deployments"" class=""clickable"">Deployments</a></li>
+            <li><a data-element=""configuration"" class=""clickable"">Configuration</a></li>
+            <li><a data-element=""runtime"" class=""clickable"">Runtime</a></li>
+            <li><a data-element=""accessControl"" class=""clickable"">Access Control</a></li>
+        </ul>
+    </div>
+</nav>
+
+<div class=""container-fluid"">
+    <!-- Main content starts with this row -->
+    <div class=""row"">
+        <div class=""col-md-12"">
+            <h1>Main Content</h1>
+            <p>This is a placeholder for the main content</p>
+        </div>
+    </div>
+</div>
+
+<footer data-element=""footer"" class=""footer"">
+    <nav class=""navbar navbar-footer navbar-fixed-bottom"">
+        <div data-element=""progress""></div>
+        <ul class=""nav navbar-nav footer-tools"">
+            <li>
+                <a data-element=""showVersion"" class=""clickable"">
+                    <span data-element=""halVersion"">0.8.15</span><i data-element=""updateAvailable"" class=""fa fa-bell""></i>
+                </a>
+            </li>
+            <li class=""dropdown"">
+                <a href=""#"" class=""dropdown-toggle"" data-toggle=""dropdown"">
+                    <span class=""fa fa-wrench""></span><span data-element=""tools"">Tools</span> <b class=""caret""></b>
+                </a>
+                <ul class=""dropdown-menu dropdown"">
+                    <li>
+                        <a data-element=""modelBrowser"" class=""clickable"">Management Model</a>
+                    </li>
+                    <li>
+                        <a data-element=""expressionResolver"" class=""clickable"">Expression Resolver</a>
+                    </li>
+                </ul>
+            </li>
+            <li>
+                <a data-element=""settings"" class=""clickable""><span class=""pficon pficon-settings""></span>Settings</a>
+            </li>
+        </ul>
+    </nav>
+</footer>
+</body>
+</html>",2015-07-30T12:02:23Z,162
"@@ -0,0 +1,56 @@
+/*
+ * JBoss, Home of Professional Open Source.
+ * Copyright 2010, Red Hat, Inc., and individual contributors
+ * as indicated by the @author tags. See the copyright.txt file in the
+ * distribution for a full listing of individual contributors.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.jboss.hal.core.gin;
+
+import com.google.inject.Provider;
+import com.google.inject.Singleton;
+import com.gwtplatform.mvp.client.Presenter;
+import com.gwtplatform.mvp.client.PresenterWidget;
+import com.gwtplatform.mvp.client.View;
+import com.gwtplatform.mvp.client.gin.AbstractPresenterModule;
+import com.gwtplatform.mvp.client.proxy.Proxy;
+
+/**
+ * @author Harald Pehl
+ */
+public abstract class AbstractTemplatedPresenterModule extends AbstractPresenterModule {
+
+    protected <P extends PresenterWidget<?>, V extends View> void bindTemplatedSingletonPresenterWidget(
+            Class<P> presenterImpl, Class<V> view, Class<? extends Provider<? extends V>> viewProvider) {
+        bind(presenterImpl).in(Singleton.class);
+        bind(view).toProvider(viewProvider).in(Singleton.class);
+    }
+
+    protected <P extends PresenterWidget<?>, V extends View> void bindTemplatedPresenterWidget(
+            Class<P> presenterImpl, Class<V> view, Class<? extends Provider<? extends V>> viewProvider) {
+        bind(presenterImpl);
+        bind(view).toProvider(viewProvider);
+    }
+
+    protected <P extends Presenter<?, ?>, V extends View, Proxy_ extends Proxy<P>> void bindTemplatedPresenter(
+            Class<P> presenterImpl, Class<V> view, Class<? extends Provider<? extends V>> viewProvider,
+            Class<Proxy_> proxy) {
+        bind(presenterImpl).in(Singleton.class);
+        bind(view).toProvider(viewProvider).in(Singleton.class);
+        bind(proxy).asEagerSingleton();
+    }
+}",2015-07-30T12:02:23Z,163
"@@ -42,8 +42,8 @@
     <properties>
         <apt-tools.version>0.0.1</apt-tools.version>
         <auto-service.version>1.0-rc2</auto-service.version>
-        <circuit.version>0.1.4-SNAPSHOT</circuit.version>
-        <elemento.version>0.0.2</elemento.version>
+        <circuit.version>0.1.4</circuit.version>
+        <elemento.version>0.0.5</elemento.version>
         <flow.version>0.0.1</flow.version>
         <gin.version>2.1.2</gin.version>
         <guava.version>18.0</guava.version>",2015-07-30T12:02:23Z,164
"@@ -27,7 +27,7 @@ public interface HalIds extends Constants {
     String header_messages();
     String header_roles();
     String header_username();
-    String footer_version();
+    String root_container();
     String tlc_access_control();
     String tlc_configuration();
     String tlc_deployments();",2015-07-30T12:02:23Z,165
"@@ -1,8 +1,8 @@
-footer_version=footer-version
 header_connected_to=header-connected-to
 header_messages=header-messages
 header_roles=header-roles
 header_username=header-username
+root_container=hal-root-container
 tlc_access_control=tlc-access-control
 tlc_configuration=tlc-configuration
 tlc_deployments=tlc-deployments",2015-07-30T12:02:23Z,166
"@@ -15,8 +15,8 @@
  */
 package org.jboss.hal.ballroom.autocomplete;
 
-import elemental.events.Event;
-import elemental2.dom.Element;
+import elemental2.dom.HTMLInputElement;
+import elemental2.dom.KeyboardEvent;
 import jsinterop.annotations.JsConstructor;
 import jsinterop.annotations.JsMethod;
 import jsinterop.annotations.JsType;
@@ -89,29 +89,23 @@ public void detach() {
     }
 
     @Override
+    @SuppressWarnings(""HardCodedStringLiteral"")
     public void showAll() {
-        Element element = document.getElementById(formItem().getId(EDITING));
+        HTMLInputElement element = (HTMLInputElement) document.getElementById(formItem().getId(EDITING));
         setTimeout((o) -> {
             element.blur();
-            triggerEvent(element, Event.KEYUP, """", 0); // to reset 'last_val' in autoComplete.js
-            triggerEvent(element, Event.KEYUP, SHOW_ALL_VALUE, SHOW_ALL_VALUE.charAt(0));
+            KeyboardEvent event = new KeyboardEvent(""keyup"");
+            triggerEvent(element, event, """", 0); // to reset 'last_val' in autoComplete.js
+            triggerEvent(element, event, SHOW_ALL_VALUE, SHOW_ALL_VALUE.charAt(0));
             element.focus();
         }, 351); // timeout must be > 350, which is used in autoComplete.js
     }
 
-    private native void triggerEvent(Element element, String type, String key, int keyCode) /*-{
+    private native void triggerEvent(HTMLInputElement element, KeyboardEvent event, String key, int keyCode) /*-{
         element.value = key;
-        if ($doc.createEvent) {
-            event = new Event(type);
-            event.keyCode = keyCode;
-            event.which = keyCode;
-            element.dispatchEvent(event);
-        } else {
-            event = $doc.createEventObject();
-            event.keyCode = keyCode;
-            event.which = keyCode;
-            element.fireEvent(""on"" + type, event);
-        }
+        event.keyCode = keyCode;
+        event.which = keyCode;
+        element.dispatchEvent(event);
     }-*/;
 
     @Override",2017-06-29T06:58:06Z,167
"@@ -272,7 +272,7 @@ public void onSuccess(final FunctionContext functionContext) {
                                     refresh(Ids.content(name));
                                     wzd.showSuccess(resources.constants().uploadSuccessful(),
                                             resources.messages().uploadSuccessful(name),
-                                            resources.messages().view(Names.DEPLOYMENT),
+                                            resources.messages().view(Names.CONTENT),
                                             cxt -> { /* nothing to do, content is already selected */ });
                                 }
                             }, functions);",2017-03-10T14:21:48Z,48
"@@ -18,8 +18,10 @@
 import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
 import elemental.dom.Element;
 import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.hal.ballroom.LabelBuilder;
 import org.jboss.hal.core.finder.FinderPath;
 import org.jboss.hal.core.finder.PreviewAttributes;
+import org.jboss.hal.core.finder.PreviewAttributes.PreviewAttribute;
 import org.jboss.hal.core.finder.PreviewContent;
 import org.jboss.hal.core.mvp.Places;
 import org.jboss.hal.meta.token.NameTokens;
@@ -33,8 +35,11 @@
 import static org.jboss.hal.dmr.ModelDescriptionConstants.MANAGED;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.NAME;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.RUNTIME_NAME;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafeBoolean;
 import static org.jboss.hal.resources.CSS.clickable;
 import static org.jboss.hal.resources.CSS.marginLeft5;
+import static org.jboss.hal.resources.CSS.marginRight5;
+import static org.jboss.hal.resources.Icons.flag;
 
 /**
  * @author Harald Pehl
@@ -59,8 +64,24 @@ class ContentPreview extends PreviewContent<Content> {
         this.places = places;
         this.resources = resources;
 
-        attributes = new PreviewAttributes<>(content,
-                asList(NAME, RUNTIME_NAME, MANAGED, EXPLODED)).end();
+        LabelBuilder labelBuilder = new LabelBuilder();
+        attributes = new PreviewAttributes<>(content, asList(NAME, RUNTIME_NAME));
+        attributes.append(model -> {
+            String label = String.join("", "", labelBuilder.label(MANAGED), labelBuilder.label(EXPLODED));
+            // @formatter:off
+            Elements.Builder builder = new Elements.Builder()
+                .span()
+                    .title(labelBuilder.label(MANAGED))
+                    .css(flag(failSafeBoolean(model, MANAGED)), marginRight5)
+                .end()
+                .span()
+                    .title(labelBuilder.label(EXPLODED))
+                    .css(flag(failSafeBoolean(model, EXPLODED)))
+                .end();
+            // @formatter:on
+            return new PreviewAttribute(label, builder.elements());
+        });
+        attributes.end();
         previewBuilder().addAll(attributes);
 
         // @formatter:off",2017-03-10T14:21:48Z,48
"@@ -32,9 +32,9 @@
  *
  * @author Harald Pehl
  */
-public class Deployment extends Content {
+class Deployment extends Content {
 
-    public enum Status {
+    enum Status {
         OK, FAILED, STOPPED, UNDEFINED
     }
 
@@ -55,7 +55,7 @@ static void parseSubsystems(ModelNode node, List<Subsystem> subsystems) {
     private final List<Subdeployment> subdeployments;
     private final List<Subsystem> subsystems;
 
-    public Deployment(final Server referenceServer, final ModelNode node) {
+    Deployment(final Server referenceServer, final ModelNode node) {
         super(node);
         this.referenceServer = referenceServer;
         this.subdeployments = new ArrayList<>();
@@ -108,15 +108,15 @@ public String toString() {
         return builder.toString();
     }
 
-    public boolean isStandalone() {
+    boolean isStandalone() {
         return referenceServer.isStandalone();
     }
 
-    public Server getReferenceServer() {
+    Server getReferenceServer() {
         return referenceServer;
     }
 
-    public boolean isEnabled() {
+    boolean isEnabled() {
         ModelNode enabled = get(ENABLED);
         //noinspection SimplifiableConditionalExpression
         return enabled.isDefined() ? enabled.asBoolean() : false;
@@ -130,31 +130,42 @@ public Status getStatus() {
         return ModelNodeHelper.asEnumValue(this, STATUS, Status::valueOf, Status.UNDEFINED);
     }
 
-    public String getEnabledTime() {
-        ModelNode node = get(""enabled-time"");
+    String getEnabledTime() {
+        ModelNode node = get(ENABLED_TIME);
         if (node.isDefined()) {
             return Format.shortDateTime(new Date(node.asLong()));
         }
         return null;
     }
 
-    public String getDisabledTime() {
-        ModelNode node = get(""disabled-time"");
+    String getDisabledTime() {
+        ModelNode node = get(DISABLED_TIME);
         if (node.isDefined()) {
             return Format.shortDateTime(new Date(node.asLong()));
         }
         return null;
     }
 
-    public boolean hasSubdeployments() {
+    boolean hasSubdeployments() {
         return !subdeployments.isEmpty();
     }
 
-    public List<Subdeployment> getSubdeployments() {
+    List<Subdeployment> getSubdeployments() {
         return subdeployments;
     }
 
-    public List<Subsystem> getSubsystems() {
-        return subsystems;
+    boolean hasSubsystem(String name) {
+        return subsystems.stream().anyMatch(subsystem -> name.equals(subsystem.getName()));
+    }
+
+    boolean hasNestedSubsystem(String name) {
+        for (Subdeployment subdeployment : subdeployments) {
+            for (Subsystem subsystem : subdeployment.getSubsystems()) {
+                if (name.equals(subsystem.getName())) {
+                    return true;
+                }
+            }
+        }
+        return false;
     }
 }",2017-03-10T14:21:48Z,65
"@@ -0,0 +1,108 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.deployment;
+
+import com.google.gwt.safehtml.shared.SafeHtml;
+import com.google.gwt.safehtml.shared.SafeHtmlBuilder;
+import elemental.dom.Element;
+import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.hal.ballroom.LabelBuilder;
+import org.jboss.hal.core.finder.PreviewAttributes;
+import org.jboss.hal.core.finder.PreviewAttributes.PreviewAttribute;
+import org.jboss.hal.core.finder.PreviewContent;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.resources.Names;
+
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafeBoolean;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafeGet;
+import static org.jboss.hal.resources.CSS.marginRight5;
+import static org.jboss.hal.resources.Icons.flag;
+
+/**
+ * @author Harald Pehl
+ */
+abstract class DeploymentPreview<T extends ModelNode> extends PreviewContent<T> {
+
+    private final LabelBuilder labelBuilder;
+
+    DeploymentPreview(final String header) {
+        super(header);
+        this.labelBuilder = new LabelBuilder();
+    }
+
+    /**
+     * Adds the (e)nabled, (m)anaged and (e)xploded and flags to the specified preview attributes.
+     */
+    void eme(PreviewAttributes<T> attributes) {
+        attributes.append(model -> {
+            String label = String.join("", "",
+                    labelBuilder.label(ENABLED), labelBuilder.label(MANAGED), labelBuilder.label(EXPLODED));
+            // @formatter:off
+            Elements.Builder builder = new Elements.Builder()
+                .span()
+                    .title(labelBuilder.label(ENABLED))
+                    .css(flag(failSafeBoolean(model, ENABLED)), marginRight5)
+                .end()
+                .span()
+                    .title(labelBuilder.label(MANAGED))
+                    .css(flag(failSafeBoolean(model, MANAGED)), marginRight5)
+                .end()
+                .span()
+                    .title(labelBuilder.label(EXPLODED))
+                    .css(flag(failSafeBoolean(model, EXPLODED)))
+                .end();
+            // @formatter:on
+            return new PreviewAttribute(label, builder.elements());
+        });
+    }
+
+    void status(PreviewAttributes<T> attributes, Deployment deployment) {
+        attributes.append(model -> new PreviewAttribute(labelBuilder.label(STATUS), deployment.getStatus().name()));
+    }
+
+    void subDeployments(Deployment deployment) {
+        previewBuilder().h(2).textContent(Names.SUBDEPLOYMENTS).end().ul();
+        deployment.getSubdeployments().forEach(
+                subdeployment -> previewBuilder().li().textContent(subdeployment.getName()).end());
+        previewBuilder().end();
+    }
+
+    void contextRoot(PreviewAttributes<T> attributes, Deployment deployment) {
+        if (deployment.hasSubsystem(UNDERTOW)) {
+            ModelNode contextRoot = failSafeGet(deployment, String.join(""/"", SUBSYSTEM, UNDERTOW, CONTEXT_ROOT));
+            if (contextRoot.isDefined()) {
+                attributes.append(model -> new PreviewAttribute(Names.CONTEXT_ROOT, contextRoot.asString()));
+            }
+
+        } else if (deployment.hasNestedSubsystem(UNDERTOW)) {
+            Elements.Builder builder = new Elements.Builder().ul();
+            for (Subdeployment subdeployment : deployment.getSubdeployments()) {
+                ModelNode contextRoot = failSafeGet(subdeployment, String.join(""/"", SUBSYSTEM, UNDERTOW, CONTEXT_ROOT));
+                if (contextRoot.isDefined()) {
+                    SafeHtml safeHtml = new SafeHtmlBuilder()
+                            .appendEscaped(subdeployment.getName() + "" "")
+                            .appendHtmlConstant(""&rarr;"") //NON-NLS
+                            .appendEscaped("" "" + contextRoot.asString())
+                            .toSafeHtml();
+                    builder.li().innerHtml(safeHtml).end();
+                }
+            }
+            Element element = builder.end().build(); // </ul>
+            attributes.append(model -> new PreviewAttribute(Names.CONTEXT_ROOTS, element));
+        }
+    }
+}",2017-03-10T14:21:48Z,65
"@@ -22,7 +22,6 @@
 import org.jboss.hal.core.finder.FinderPath;
 import org.jboss.hal.core.finder.PreviewAttributes;
 import org.jboss.hal.core.finder.PreviewAttributes.PreviewAttribute;
-import org.jboss.hal.core.finder.PreviewContent;
 import org.jboss.hal.core.mvp.Places;
 import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.resources.Icons;
@@ -33,12 +32,14 @@
 import static java.util.Arrays.asList;
 import static org.jboss.hal.client.deployment.StandaloneDeploymentPreview.LAST_DISABLED_AT;
 import static org.jboss.hal.client.deployment.StandaloneDeploymentPreview.LAST_ENABLED_AT;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.NAME;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.RUNTIME_NAME;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.STATUS;
 
 /**
  * @author Harald Pehl
  */
-class ServerGroupDeploymentPreview extends PreviewContent<ServerGroupDeployment> {
+class ServerGroupDeploymentPreview extends DeploymentPreview<ServerGroupDeployment> {
 
     ServerGroupDeploymentPreview(final ServerGroupDeploymentColumn column, final ServerGroupDeployment sgd,
             final Places places, final Resources resources) {
@@ -73,6 +74,9 @@ class ServerGroupDeploymentPreview extends PreviewContent<ServerGroupDeployment>
         // main attributes
         PreviewAttributes<ServerGroupDeployment> attributes = new PreviewAttributes<>(sgd,
                 asList(NAME, RUNTIME_NAME));
+        if (deployment != null) {
+            contextRoot(attributes, deployment);
+        }
         attributes.append(model -> {
             PlaceRequest placeRequest = places.finderPlace(NameTokens.DEPLOYMENTS, new FinderPath()
                     .append(Ids.DEPLOYMENT_BROWSE_BY, Ids.asId(resources.constants().contentRepository()))
@@ -81,12 +85,9 @@ class ServerGroupDeploymentPreview extends PreviewContent<ServerGroupDeployment>
             return new PreviewAttribute(resources.constants().providedBy(), model.getName(),
                     places.historyToken(placeRequest));
         });
-        attributes.append(MANAGED);
-        attributes.append(EXPLODED);
-        attributes.append(ENABLED);
+        eme(attributes);
         if (deployment != null) {
-            attributes.append(model -> new PreviewAttribute(new LabelBuilder().label(STATUS),
-                    deployment.getStatus().name()));
+            status(attributes, deployment);
             attributes.append(model -> new PreviewAttribute(LAST_ENABLED_AT, deployment.getEnabledTime()));
             attributes.append(model -> new PreviewAttribute(LAST_DISABLED_AT, deployment.getDisabledTime()));
         }
@@ -95,10 +96,7 @@ class ServerGroupDeploymentPreview extends PreviewContent<ServerGroupDeployment>
 
         // sub-deployments
         if (deployment != null && deployment.hasSubdeployments()) {
-            previewBuilder().h(2).textContent(Names.SUBDEPLOYMENTS).end().ul();
-            deployment.getSubdeployments().forEach(
-                    subdeployment -> previewBuilder().li().textContent(subdeployment.getName()).end());
-            previewBuilder().end();
+            subDeployments(deployment);
         }
 
         // reference server",2017-03-10T14:21:48Z,33
"@@ -115,6 +115,7 @@ public StandaloneDeploymentColumn(final Finder finder,
                             ResourceAddress.root())
                             .param(CHILD_TYPE, DEPLOYMENT)
                             .param(INCLUDE_RUNTIME, true)
+                            .param(RECURSIVE_DEPTH, 2)
                             .build();
                     dispatcher.execute(operation, result -> {
                         List<Deployment> deployments = result.asPropertyList().stream()",2017-03-10T14:21:48Z,82
"@@ -16,21 +16,20 @@
 package org.jboss.hal.client.deployment;
 
 import org.jboss.hal.ballroom.Alert;
-import org.jboss.hal.ballroom.LabelBuilder;
 import org.jboss.hal.client.deployment.Deployment.Status;
 import org.jboss.hal.core.finder.PreviewAttributes;
 import org.jboss.hal.core.finder.PreviewAttributes.PreviewAttribute;
-import org.jboss.hal.core.finder.PreviewContent;
 import org.jboss.hal.resources.Icons;
 import org.jboss.hal.resources.Resources;
 
 import static java.util.Arrays.asList;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.NAME;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.RUNTIME_NAME;
 
 /**
  * @author Harald Pehl
  */
-class StandaloneDeploymentPreview extends PreviewContent<Deployment> {
+class StandaloneDeploymentPreview extends DeploymentPreview<Deployment> {
 
     static final String LAST_ENABLED_AT = ""Last enabled at"";
     static final String LAST_DISABLED_AT = ""Last disabled at"";
@@ -59,14 +58,17 @@ class StandaloneDeploymentPreview extends PreviewContent<Deployment> {
         }
 
         PreviewAttributes<Deployment> attributes = new PreviewAttributes<>(deployment, asList(NAME, RUNTIME_NAME));
-        attributes.append(MANAGED);
-        attributes.append(EXPLODED);
-        attributes.append(ENABLED);
-        attributes.append(model -> new PreviewAttribute(new LabelBuilder().label(STATUS),
-                deployment.getStatus().name()));
+        contextRoot(attributes, deployment);
+        eme(attributes);
+        status(attributes, deployment);
         attributes.append(model -> new PreviewAttribute(LAST_ENABLED_AT, deployment.getEnabledTime()));
         attributes.append(model -> new PreviewAttribute(LAST_DISABLED_AT, deployment.getDisabledTime()));
         attributes.end();
         previewBuilder().addAll(attributes);
+
+        // sub-deployments
+        if (deployment.hasSubdeployments()) {
+            subDeployments(deployment);
+        }
     }
 }",2017-03-10T14:21:48Z,36
"@@ -15,23 +15,23 @@
  */
 package org.jboss.hal.client.deployment;
 
-import org.jboss.hal.dmr.ModelNode;
-
 import java.util.ArrayList;
 import java.util.List;
 
+import org.jboss.hal.dmr.ModelNode;
+
 import static org.jboss.hal.dmr.ModelDescriptionConstants.SUBSYSTEM;
 
 /**
  * @author Harald Pehl
  */
-public class Subdeployment extends ModelNode {
+class Subdeployment extends ModelNode {
 
     private final Deployment parent;
     private final String name;
     private final List<Subsystem> subsystems;
 
-    public Subdeployment(final Deployment parent, final String name, final ModelNode node) {
+    Subdeployment(final Deployment parent, final String name, final ModelNode node) {
         this.parent = parent;
         this.name = name;
         this.subsystems = new ArrayList<>();
@@ -55,7 +55,11 @@ public Deployment getParent() {
         return parent;
     }
 
-    public List<Subsystem> getSubsystems() {
+    List<Subsystem> getSubsystems() {
         return subsystems;
     }
+
+    boolean hasSubsystem(String name) {
+        return subsystems.stream().anyMatch(subsystem -> name.equals(subsystem.getName()));
+    }
 }",2017-03-10T14:21:48Z,69
"@@ -127,9 +127,7 @@ public String asString(final List<String> value) {
             ""spec-name"",
             ""spec-vendor"",
             ""spec-version"",
-            ""management-spec-version"",
-            START_TIME,
-            UPTIME
+            ""management-spec-version""
     };
 
     private static final String[] BOOTSTRAP_ATTRIBUTES = {
@@ -152,6 +150,8 @@ public ServerStatusView(final MetadataRegistry metadataRegistry, final Resources
                 .viewOnly()
                 .includeRuntime()
                 .include(MAIN_ATTRIBUTES)
+                .unboundFormItem(new TextBoxItem(START_TIME, new LabelBuilder().label(START_TIME)))
+                .unboundFormItem(new TextBoxItem(UPTIME, new LabelBuilder().label(UPTIME)))
                 .unsorted()
                 .build();
 
@@ -236,17 +236,18 @@ public void update(final ModelNode modelNode) {
         headerElement.setTextContent(modelNode.get(NAME).asString());
 
         mainAttributes.view(modelNode);
-        mainAttributes.getFormItem(START_TIME)
-                .setText(Format.shortDateTime(new Date(modelNode.get(START_TIME).asLong())));
-        mainAttributes.getFormItem(UPTIME).setText(Format.humanReadableDuration(modelNode.get(UPTIME).asLong()));
+        mainAttributes.<String>getFormItem(START_TIME)
+                .setValue(Format.shortDateTime(new Date(modelNode.get(START_TIME).asLong())));
+        mainAttributes.<String>getFormItem(UPTIME)
+                .setValue(Format.humanReadableDuration(modelNode.get(UPTIME).asLong()));
 
         bootstrapAttributes.view(modelNode);
-        bootstrapAttributes.getFormItem(BOOT_CLASS_PATH)
-                .setText(pathWithNewLines(modelNode.get(BOOT_CLASS_PATH).asString(), pathSeparator));
-        bootstrapAttributes.getFormItem(CLASS_PATH)
-                .setText(pathWithNewLines(modelNode.get(CLASS_PATH).asString(), pathSeparator));
-        bootstrapAttributes.getFormItem(LIBRARY_PATH)
-                .setText(pathWithNewLines(modelNode.get(LIBRARY_PATH).asString(), pathSeparator));
+        bootstrapAttributes.<String>getFormItem(BOOT_CLASS_PATH)
+                .setValue(pathWithNewLines(modelNode.get(BOOT_CLASS_PATH).asString(), pathSeparator));
+        bootstrapAttributes.<String>getFormItem(CLASS_PATH)
+                .setValue(pathWithNewLines(modelNode.get(CLASS_PATH).asString(), pathSeparator));
+        bootstrapAttributes.<String>getFormItem(LIBRARY_PATH)
+                .setValue(pathWithNewLines(modelNode.get(LIBRARY_PATH).asString(), pathSeparator));
 
         systemProperties.update(sp, Property::getName);
     }",2017-03-10T14:21:48Z,66
"@@ -1,4 +1,3 @@
-
 .finder, .finder > .finder-column, .finder > .finder-preview {
   display: flex;
 }
@@ -233,6 +232,11 @@
         margin-left: 10px;
         .text-overflow();
         width: 70%;
+
+        ul {
+          list-style: none;
+          padding-left: 0;
+        }
       }
     }
   }",2017-03-10T14:21:48Z,168
"@@ -310,20 +310,6 @@ public void setName(final String name) {
         appearances.values().forEach(a -> a.setName(name));
     }
 
-    @Override
-    @Deprecated
-    public String getText() {
-        // TODO Remove 'extends HasText' from FormItem
-        throw new UnsupportedOperationException(""Use getExpressionValue() instead"");
-    }
-
-    @Override
-    @Deprecated
-    public void setText(final String text) {
-        // TODO Remove 'extends HasText' from FormItem
-        throw new UnsupportedOperationException(""Use setExpressionValue() instead"");
-    }
-
 
     // ------------------------------------------------------ validation
 ",2017-03-10T14:21:48Z,64
"@@ -18,7 +18,6 @@
 import com.google.gwt.user.client.ui.Focusable;
 import com.google.gwt.user.client.ui.HasEnabled;
 import com.google.gwt.user.client.ui.HasName;
-import com.google.gwt.user.client.ui.HasText;
 import com.google.gwt.user.client.ui.HasValue;
 import elemental.dom.Element;
 import org.jboss.hal.ballroom.Attachable;
@@ -28,8 +27,7 @@
 /**
  * @author Harald Pehl
  */
-public interface FormItem<T> extends Attachable, HasEnabled, Focusable, HasName, HasValue<T>,
-        HasText /* for expression support */ {
+public interface FormItem<T> extends Attachable, HasEnabled, Focusable, HasName, HasValue<T> {
 
     Element asElement(Form.State state);
 ",2017-03-10T14:21:48Z,169
"@@ -49,28 +49,41 @@ public static class PreviewAttribute {
         final String value;
         final SafeHtml htmlValue;
         final String href;
+        final Element element;
+        final Iterable<Element> elements;
 
         public PreviewAttribute(final String label, final String value) {
-            this(label, value, null, null);
+            this(label, value, null, null, null, null);
         }
 
         public PreviewAttribute(final String label, final String value, final String href) {
-            this(label, value, null, href);
+            this(label, value, null, href, null, null);
         }
 
         public PreviewAttribute(final String label, final SafeHtml value) {
-            this(label, null, value, null);
+            this(label, null, value, null, null, null);
         }
 
         public PreviewAttribute(final String label, final SafeHtml value, final String href) {
-            this(label, null, value, href);
+            this(label, null, value, href, null, null);
         }
 
-        private PreviewAttribute(final String label, final String value, final SafeHtml htmlValue, final String href) {
+        public PreviewAttribute(final String label, final Iterable<Element> elements) {
+            this(label, null, null, null, elements, null);
+        }
+
+        public PreviewAttribute(final String label, final Element element) {
+            this(label, null, null, null, null, element);
+        }
+
+        private PreviewAttribute(final String label, final String value, final SafeHtml htmlValue, final String href,
+                final Iterable<Element> elements, final Element element) {
             this.label = label;
             this.value = value;
             this.htmlValue = htmlValue;
             this.href = href;
+            this.element = element;
+            this.elements = elements;
         }
 
         private boolean isUndefined() {
@@ -145,24 +158,34 @@ public PreviewAttributes<T> append(final PreviewAttributeFunction<T> function) {
         // @formatter:off
         builder.li().rememberAs(id).css(listGroupItem)
             .span().rememberAs(labelId).css(key).textContent(previewAttribute.label).end();
-            if (previewAttribute.href != null) {
-                builder.a(previewAttribute.href);
-            }
-            builder.span().rememberAs(valueId).css(CSS.value);
-            if (previewAttribute.isUndefined()) {
-                builder.textContent(Names.NOT_AVAILABLE);
-            }
-            else if (previewAttribute.htmlValue != null) {
-                builder.innerHtml(previewAttribute.htmlValue);
+            if (previewAttribute.elements != null || previewAttribute.element != null) {
+                builder.span().rememberAs(valueId).css(CSS.value);
+                if (previewAttribute.elements != null) {
+                    builder.addAll(previewAttribute.elements);
+                } else {
+                    builder.add(previewAttribute.element);
+                }
+                builder.end();
             } else {
-                builder.textContent(previewAttribute.value);
-                if (previewAttribute.value.length() > 15) {
-                    builder.title(previewAttribute.value);
+                if (previewAttribute.href != null) {
+                    builder.a(previewAttribute.href);
+                }
+                builder.span().rememberAs(valueId).css(CSS.value);
+                if (previewAttribute.isUndefined()) {
+                    builder.textContent(Names.NOT_AVAILABLE);
+                }
+                else if (previewAttribute.htmlValue != null) {
+                    builder.innerHtml(previewAttribute.htmlValue);
+                } else {
+                    builder.textContent(previewAttribute.value);
+                    if (previewAttribute.value.length() > 15) {
+                        builder.title(previewAttribute.value);
+                    }
+                }
+                builder.end(); // </span>
+                if (previewAttribute.href != null) {
+                    builder.end(); // </a>
                 }
-            }
-            builder.end(); // </span>
-            if (previewAttribute.href != null) {
-                builder.end(); // </a>
             }
         builder.end(); // </li>
         // @formatter:on
@@ -186,7 +209,18 @@ public void refresh(T model) {
             PreviewAttribute previewAttribute = function.labelValue(model);
 
             builder.referenceFor(labelId).setTextContent(previewAttribute.label);
-            builder.referenceFor(valueId).setTextContent(previewAttribute.value);
+            Element span = builder.referenceFor(valueId);
+            if (previewAttribute.elements != null) {
+                Elements.removeChildrenFrom(span);
+                previewAttribute.elements.forEach(span::appendChild);
+            } else if (previewAttribute.element != null) {
+                Elements.removeChildrenFrom(span);
+                span.appendChild(previewAttribute.element);
+            } else if (previewAttribute.htmlValue != null) {
+                span.setInnerHTML(previewAttribute.htmlValue.asString());
+            } else if (previewAttribute.value != null) {
+                span.setTextContent(previewAttribute.value);
+            }
         }
     }
 ",2017-03-10T14:21:48Z,170
"@@ -413,16 +413,6 @@ public String getName() {
         return name;
     }
 
-    @Override
-    public String getText() {
-        return null;
-    }
-
-    @Override
-    public void setText(final String s) {
-
-    }
-
     @Override
     public String getValue() {
         return null;",2017-03-10T14:21:48Z,171
"@@ -104,6 +104,7 @@ public interface ModelDescriptionConstants {
     String CONNECTOR_NAME = ""connector-name"";
     String CONNECTOR_SERVICE = ""connector-service"";
     String CONTENT = ""content"";
+    String CONTEXT_ROOT = ""context-root"";
     String CONTEXT_SERVICE = ""context-service"";
     String CRAWLER_SESSION_MANAGEMENT = ""crawler-session-management"";
     String CUSTOM = ""custom"";
@@ -123,6 +124,7 @@ public interface ModelDescriptionConstants {
     String DEPRECATED = ""deprecated"";
     String DESCRIPTION = ""description"";
     String DISABLED = ""disabled"";
+    String DISABLED_TIME = ""disabled-time"";
     String DISCOVERY_GROUP = ""discovery-group"";
     String DIVERT = ""divert"";
     String DRIVER_CLASS = ""driver-class"";
@@ -139,6 +141,7 @@ public interface ModelDescriptionConstants {
     String EJB3 = ""ejb3"";
     String ENDPOINT_CONFIG = ""endpoint-config"";
     String ENABLED = ""enabled"";
+    String ENABLED_TIME = ""enabled-time"";
     String EVICTION = ""eviction"";
     String EXCEPTIONS = ""exceptions"";
     String EXCLUDE = ""exclude"";",2017-03-10T14:21:48Z,109
"@@ -78,6 +78,11 @@ public static ModelNode failSafeGet(final ModelNode modelNode, final String path
         return undefined;
     }
 
+    public static boolean failSafeBoolean(final ModelNode modelNode, final String path) {
+        ModelNode attribute = failSafeGet(modelNode, path);
+        return attribute.isDefined() && attribute.asBoolean();
+    }
+
     public static List<ModelNode> failSafeList(final ModelNode modelNode, final String path) {
         ModelNode result = failSafeGet(modelNode, path);
         return result.isDefined() ? result.asList() : Collections.emptyList();",2017-03-10T14:21:48Z,110
"@@ -37,7 +37,7 @@
         <apt-tools.version>0.0.3</apt-tools.version>
         <auto-service.version>1.0-rc2</auto-service.version>
         <compile-testing.version>0.10</compile-testing.version>
-        <elemento.version>0.2.10</elemento.version>
+        <elemento.version>0.2.12</elemento.version>
         <flow.version>0.1.0</flow.version>
         <gin.version>2.1.2</gin.version>
         <guava.version>20.0</guava.version>",2017-03-10T14:21:48Z,164
"@@ -27,42 +27,53 @@
  */
 public interface Icons {
 
-    String OK = pfIcon(ok);
+    // ------------------------------------------------------ icon css classes
+
+    String CHECK = fontAwesome(""check"");
+    String DISABLED = pfIcon(disabledCircleO);
+    String ERROR = pfIcon(errorCircleO);
     String INFO = pfIcon(info);
+    String NOT = fontAwesome(""times"");
+    String OK = pfIcon(ok);
     String PAUSE = fontAwesome(pauseCircle) + "" "" + blue;
-    String WARNING = pfIcon(warningTriangleO);
-    String DISABLED = pfIcon(disabledCircleO);
     String STOPPED = fontAwesome(stopCircleO) + "" "" + grey;
-    String ERROR = pfIcon(errorCircleO);
+    String WARNING = pfIcon(warningTriangleO);
     String UNKNOWN = fontAwesome(questionsCircleO);
 
-    static Element ok() {
+    static String flag(boolean value) {
+        return value ? CHECK : NOT;
+    }
+
+
+    // ------------------------------------------------------ icon elements
+
+    static Element disabled() {
         Element icon = Browser.getDocument().createSpanElement();
-        icon.setClassName(OK);
+        icon.setClassName(DISABLED);
         return icon;
     }
 
-    static Element info() {
+    static Element error() {
         Element icon = Browser.getDocument().createSpanElement();
-        icon.setClassName(INFO);
+        icon.setClassName(ERROR);
         return icon;
     }
 
-    static Element pause() {
+    static Element info() {
         Element icon = Browser.getDocument().createSpanElement();
-        icon.setClassName(PAUSE);
+        icon.setClassName(INFO);
         return icon;
     }
 
-    static Element warning() {
+    static Element ok() {
         Element icon = Browser.getDocument().createSpanElement();
-        icon.setClassName(WARNING);
+        icon.setClassName(OK);
         return icon;
     }
 
-    static Element disabled() {
+    static Element pause() {
         Element icon = Browser.getDocument().createSpanElement();
-        icon.setClassName(DISABLED);
+        icon.setClassName(PAUSE);
         return icon;
     }
 
@@ -72,9 +83,9 @@ static Element stopped() {
         return icon;
     }
 
-    static Element error() {
+    static Element warning() {
         Element icon = Browser.getDocument().createSpanElement();
-        icon.setClassName(ERROR);
+        icon.setClassName(WARNING);
         return icon;
     }
 ",2017-03-10T14:21:48Z,172
"@@ -59,6 +59,9 @@ public interface Names {
     String CONNECTION_DEFINITION = ""Connection Definition"";
     String CONNECTIONS = ""Connections"";
     String CONNECTOR_SERVICE = ""Connector Service"";
+    String CONTENT = ""Content"";
+    String CONTEXT_ROOT = ""Context Root"";
+    String CONTEXT_ROOTS = ""Context Roots"";
     String COOKIES = ""Cookies"";
     String CORE_QUEUE = ""Core Queue"";
     String CRAWLER = ""Crawler"";
@@ -81,7 +84,6 @@ public interface Names {
     String ENTITY_CACHE = ""Entity Cache"";
     String EVICTION = ""Eviction"";
     String EXPIRATION = ""Expiration"";
-    String EXPRESSION_PLACEHOLDER = ""${key:default}"";
 
     String FILE = ""File"";
     String FILTER = ""Filter"";",2017-03-10T14:21:48Z,112
"@@ -24,177 +24,177 @@ interface AddressTemplates {
 
     // @formatter:off
 
-    public static final String ELYTRON_SUBSYSTEM = ""{selected.profile}/subsystem=elytron"";
-    public static final AddressTemplate ELYTRON_SUBSYSTEM_ADDRESS = AddressTemplate.of(ELYTRON_SUBSYSTEM);
+    String ELYTRON_SUBSYSTEM = ""{selected.profile}/subsystem=elytron"";
+    AddressTemplate ELYTRON_SUBSYSTEM_ADDRESS = AddressTemplate.of(ELYTRON_SUBSYSTEM);
 
     // ========== security realms, realm mappers
 
-    public static final String PROPERTIES_REALM = ELYTRON_SUBSYSTEM + ""/properties-realm=*"";
-    public static final String FILESYSTEM_REALM = ELYTRON_SUBSYSTEM + ""/filesystem-realm=*"";
-    public static final String CACHING_REALM = ELYTRON_SUBSYSTEM + ""/caching-realm=*"";
-    public static final String JDBC_REALM = ELYTRON_SUBSYSTEM + ""/jdbc-realm=*"";
-    public static final String LDAP_REALM = ELYTRON_SUBSYSTEM + ""/ldap-realm=*"";
-    public static final String KEYSTORE_REALM = ELYTRON_SUBSYSTEM + ""/key-store-realm=*"";
-    public static final String AGGREGATE_REALM = ELYTRON_SUBSYSTEM + ""/aggregate-realm=*"";
-    public static final String CUSTOM_MODIFIABLE_REALM = ELYTRON_SUBSYSTEM + ""/custom-modifiable-realm=*"";
-    public static final String CUSTOM_REALM = ELYTRON_SUBSYSTEM + ""/custom-realm=*"";
-    public static final String IDENTITY_REALM = ELYTRON_SUBSYSTEM + ""/identity-realm=*"";
-    public static final String TOKEN_REALM = ELYTRON_SUBSYSTEM + ""/token-realm=*"";
-
-    public static final String MAPPED_REGEX_REALM_MAPPER = ELYTRON_SUBSYSTEM + ""/mapped-regex-realm-mapper=*"";
-    public static final String SIMPLE_REGEX_REALM_MAPPER = ELYTRON_SUBSYSTEM + ""/simple-regex-realm-mapper=*"";
-    public static final String CUSTOM_REALM_MAPPER = ELYTRON_SUBSYSTEM + ""/custom-realm-mapper=*"";
-    public static final String CONSTANT_REALM_MAPPER = ELYTRON_SUBSYSTEM + ""/constant-realm-mapper=*"";
-
-    public static final AddressTemplate PROPERTIES_REALM_ADDRESS = AddressTemplate.of(PROPERTIES_REALM);
-    public static final AddressTemplate FILESYSTEM_REALM_ADDRESS = AddressTemplate.of(FILESYSTEM_REALM);
-    public static final AddressTemplate CACHING_REALM_ADDRESS = AddressTemplate.of(CACHING_REALM);
-    public static final AddressTemplate JDBC_REALM_ADDRESS = AddressTemplate.of(JDBC_REALM);
-    public static final AddressTemplate LDAP_REALM_ADDRESS = AddressTemplate.of(LDAP_REALM);
-    public static final AddressTemplate KEYSTORE_REALM_ADDRESS = AddressTemplate.of(KEYSTORE_REALM);
-    public static final AddressTemplate AGGREGATE_REALM_ADDRESS = AddressTemplate.of(AGGREGATE_REALM);
-    public static final AddressTemplate CUSTOM_MODIFIABLE_REALM_ADDRESS = AddressTemplate.of(CUSTOM_MODIFIABLE_REALM);
-    public static final AddressTemplate CUSTOM_REALM_ADDRESS = AddressTemplate.of(CUSTOM_REALM);
-    public static final AddressTemplate IDENTITY_REALM_ADDRESS = AddressTemplate.of(IDENTITY_REALM);
-    public static final AddressTemplate TOKEN_REALM_ADDRESS = AddressTemplate.of(TOKEN_REALM);
-
-    public static final AddressTemplate MAPPED_REGEX_REALM_MAPPER_ADDRESS = AddressTemplate.of(MAPPED_REGEX_REALM_MAPPER);
-    public static final AddressTemplate SIMPLE_REGEX_REALM_MAPPER_ADDRESS = AddressTemplate.of(SIMPLE_REGEX_REALM_MAPPER);
-    public static final AddressTemplate CUSTOM_REALM_MAPPER_ADDRESS = AddressTemplate.of(CUSTOM_REALM_MAPPER);
-    public static final AddressTemplate CONSTANT_REALM_MAPPER_ADDRESS = AddressTemplate.of(CONSTANT_REALM_MAPPER);
+    String PROPERTIES_REALM = ELYTRON_SUBSYSTEM + ""/properties-realm=*"";
+    String FILESYSTEM_REALM = ELYTRON_SUBSYSTEM + ""/filesystem-realm=*"";
+    String CACHING_REALM = ELYTRON_SUBSYSTEM + ""/caching-realm=*"";
+    String JDBC_REALM = ELYTRON_SUBSYSTEM + ""/jdbc-realm=*"";
+    String LDAP_REALM = ELYTRON_SUBSYSTEM + ""/ldap-realm=*"";
+    String KEYSTORE_REALM = ELYTRON_SUBSYSTEM + ""/key-store-realm=*"";
+    String AGGREGATE_REALM = ELYTRON_SUBSYSTEM + ""/aggregate-realm=*"";
+    String CUSTOM_MODIFIABLE_REALM = ELYTRON_SUBSYSTEM + ""/custom-modifiable-realm=*"";
+    String CUSTOM_REALM = ELYTRON_SUBSYSTEM + ""/custom-realm=*"";
+    String IDENTITY_REALM = ELYTRON_SUBSYSTEM + ""/identity-realm=*"";
+    String TOKEN_REALM = ELYTRON_SUBSYSTEM + ""/token-realm=*"";
+
+    String MAPPED_REGEX_REALM_MAPPER = ELYTRON_SUBSYSTEM + ""/mapped-regex-realm-mapper=*"";
+    String SIMPLE_REGEX_REALM_MAPPER = ELYTRON_SUBSYSTEM + ""/simple-regex-realm-mapper=*"";
+    String CUSTOM_REALM_MAPPER = ELYTRON_SUBSYSTEM + ""/custom-realm-mapper=*"";
+    String CONSTANT_REALM_MAPPER = ELYTRON_SUBSYSTEM + ""/constant-realm-mapper=*"";
+
+    AddressTemplate PROPERTIES_REALM_ADDRESS = AddressTemplate.of(PROPERTIES_REALM);
+    AddressTemplate FILESYSTEM_REALM_ADDRESS = AddressTemplate.of(FILESYSTEM_REALM);
+    AddressTemplate CACHING_REALM_ADDRESS = AddressTemplate.of(CACHING_REALM);
+    AddressTemplate JDBC_REALM_ADDRESS = AddressTemplate.of(JDBC_REALM);
+    AddressTemplate LDAP_REALM_ADDRESS = AddressTemplate.of(LDAP_REALM);
+    AddressTemplate KEYSTORE_REALM_ADDRESS = AddressTemplate.of(KEYSTORE_REALM);
+    AddressTemplate AGGREGATE_REALM_ADDRESS = AddressTemplate.of(AGGREGATE_REALM);
+    AddressTemplate CUSTOM_MODIFIABLE_REALM_ADDRESS = AddressTemplate.of(CUSTOM_MODIFIABLE_REALM);
+    AddressTemplate CUSTOM_REALM_ADDRESS = AddressTemplate.of(CUSTOM_REALM);
+    AddressTemplate IDENTITY_REALM_ADDRESS = AddressTemplate.of(IDENTITY_REALM);
+    AddressTemplate TOKEN_REALM_ADDRESS = AddressTemplate.of(TOKEN_REALM);
+
+    AddressTemplate MAPPED_REGEX_REALM_MAPPER_ADDRESS = AddressTemplate.of(MAPPED_REGEX_REALM_MAPPER);
+    AddressTemplate SIMPLE_REGEX_REALM_MAPPER_ADDRESS = AddressTemplate.of(SIMPLE_REGEX_REALM_MAPPER);
+    AddressTemplate CUSTOM_REALM_MAPPER_ADDRESS = AddressTemplate.of(CUSTOM_REALM_MAPPER);
+    AddressTemplate CONSTANT_REALM_MAPPER_ADDRESS = AddressTemplate.of(CONSTANT_REALM_MAPPER);
 
     // ============== factories
 
-    public static final String AGGREGATE_HTTP_SERVER_MECHANISM_FACTORY = ELYTRON_SUBSYSTEM + ""/aggregate-http-server-mechanism-factory=*"";
-    public static final String AGGREGATE_SASL_SERVER_FACTORY = ELYTRON_SUBSYSTEM + ""/aggregate-sasl-server-factory=*"";
-    public static final String CONFIGURABLE_HTTP_SERVER_MECHANISM_FACTORY = ELYTRON_SUBSYSTEM + ""/configurable-http-server-mechanism-factory=*"";
-    public static final String CONFIGURABLE_SASL_SERVER_FACTORY = ELYTRON_SUBSYSTEM + ""/configurable-sasl-server-factory=*"";
-    public static final String CUSTOM_CREDENTIAL_SECURITY_FACTORY = ELYTRON_SUBSYSTEM + ""/custom-credential-security-factory=*"";
-    public static final String HTTP_AUTHENTICATION_FACTORY = ELYTRON_SUBSYSTEM + ""/http-authentication-factory=*"";
-    public static final String KERBEROS_SECURITY_FACTORY = ELYTRON_SUBSYSTEM + ""/kerberos-security-factory=*"";
-    public static final String MECHANISM_PROVIDER_FILTERING_SASL_SERVER_FACTORY = ELYTRON_SUBSYSTEM + ""/mechanism-provider-filtering-sasl-server-factory=*"";
-    public static final String PROVIDER_HTTP_SERVER_MECHANISM_FACTORY = ELYTRON_SUBSYSTEM + ""/provider-http-server-mechanism-factory=*"";
-    public static final String PROVIDER_SASL_SERVER_FACTORY = ELYTRON_SUBSYSTEM + ""/provider-sasl-server-factory=*"";
-    public static final String SASL_AUTHENTICATION_FACTORY = ELYTRON_SUBSYSTEM + ""/sasl-authentication-factory=*"";
-    public static final String SERVICE_LOADER_HTTP_SERVER_MECHANISM_FACTORY = ELYTRON_SUBSYSTEM + ""/service-loader-http-server-mechanism-factory=*"";
-    public static final String SERVICE_LOADER_SASL_SERVER_FACTORY = ELYTRON_SUBSYSTEM + ""/service-loader-sasl-server-factory=*"";
-
-    public static final String AGGREGATE_TRANSFORMER = ELYTRON_SUBSYSTEM + ""/aggregate-principal-transformer=*"";
-    public static final String CHAINED_TRANSFORMER = ELYTRON_SUBSYSTEM + ""/chained-principal-transformer=*"";
-    public static final String CONSTANT_TRANSFORMER = ELYTRON_SUBSYSTEM + ""/constant-principal-transformer=*"";
-    public static final String CUSTOM_TRANSFORMER = ELYTRON_SUBSYSTEM + ""/custom-principal-transformer=*"";
-    public static final String REGEX_VALIDATING_TRANSFORMER = ELYTRON_SUBSYSTEM + ""/regex-validating-principal-transformer=*"";
-    public static final String REGEX_TRANSFORMER = ELYTRON_SUBSYSTEM + ""/regex-principal-transformer=*"";
-
-    public static final AddressTemplate AGGREGATE_HTTP_SERVER_MECHANISM_FACTORY_ADDRESS = AddressTemplate.of(AGGREGATE_HTTP_SERVER_MECHANISM_FACTORY);
-    public static final AddressTemplate AGGREGATE_SASL_SERVER_FACTORY_ADDRESS = AddressTemplate.of(AGGREGATE_SASL_SERVER_FACTORY);
-    public static final AddressTemplate CONFIGURABLE_HTTP_SERVER_MECHANISM_FACTORY_ADDRESS = AddressTemplate.of(CONFIGURABLE_HTTP_SERVER_MECHANISM_FACTORY);
-    public static final AddressTemplate CONFIGURABLE_SASL_SERVER_FACTORY_ADDRESS = AddressTemplate.of(CONFIGURABLE_SASL_SERVER_FACTORY);
-    public static final AddressTemplate CUSTOM_CREDENTIAL_SECURITY_FACTORY_ADDRESS = AddressTemplate.of(CUSTOM_CREDENTIAL_SECURITY_FACTORY);
-    public static final AddressTemplate HTTP_AUTHENTICATION_FACTORY_ADDRESS = AddressTemplate.of(HTTP_AUTHENTICATION_FACTORY);
-    public static final AddressTemplate KERBEROS_SECURITY_FACTORY_ADDRESS = AddressTemplate.of(KERBEROS_SECURITY_FACTORY);
-    public static final AddressTemplate MECHANISM_PROVIDER_FILTERING_SASL_SERVER_FACTORY_ADDRESS = AddressTemplate.of(MECHANISM_PROVIDER_FILTERING_SASL_SERVER_FACTORY);
-    public static final AddressTemplate PROVIDER_HTTP_SERVER_MECHANISM_FACTORY_ADDRESS = AddressTemplate.of(PROVIDER_HTTP_SERVER_MECHANISM_FACTORY);
-    public static final AddressTemplate PROVIDER_SASL_SERVER_FACTORY_ADDRESS = AddressTemplate.of(PROVIDER_SASL_SERVER_FACTORY);
-    public static final AddressTemplate SASL_AUTHENTICATION_FACTORY_ADDRESS = AddressTemplate.of(SASL_AUTHENTICATION_FACTORY);
-    public static final AddressTemplate SERVICE_LOADER_HTTP_SERVER_MECHANISM_FACTORY_ADDRESS = AddressTemplate.of(SERVICE_LOADER_HTTP_SERVER_MECHANISM_FACTORY);
-    public static final AddressTemplate SERVICE_LOADER_SASL_SERVER_FACTORY_ADDRESS = AddressTemplate.of(SERVICE_LOADER_SASL_SERVER_FACTORY);
-
-    public static final AddressTemplate AGGREGATE_TRANSFORMER_ADDRESS = AddressTemplate.of(AGGREGATE_TRANSFORMER);
-    public static final AddressTemplate CHAINED_TRANSFORMER_ADDRESS = AddressTemplate.of(CHAINED_TRANSFORMER);
-    public static final AddressTemplate CONSTANT_TRANSFORMER_ADDRESS = AddressTemplate.of(CONSTANT_TRANSFORMER);
-    public static final AddressTemplate CUSTOM_TRANSFORMER_ADDRESS = AddressTemplate.of(CUSTOM_TRANSFORMER);
-    public static final AddressTemplate REGEX_VALIDATING_TRANSFORMER_ADDRESS = AddressTemplate.of(REGEX_VALIDATING_TRANSFORMER);
-    public static final AddressTemplate REGEX_TRANSFORMER_ADDRESS = AddressTemplate.of(REGEX_TRANSFORMER);
+    String AGGREGATE_HTTP_SERVER_MECHANISM_FACTORY = ELYTRON_SUBSYSTEM + ""/aggregate-http-server-mechanism-factory=*"";
+    String AGGREGATE_SASL_SERVER_FACTORY = ELYTRON_SUBSYSTEM + ""/aggregate-sasl-server-factory=*"";
+    String CONFIGURABLE_HTTP_SERVER_MECHANISM_FACTORY = ELYTRON_SUBSYSTEM + ""/configurable-http-server-mechanism-factory=*"";
+    String CONFIGURABLE_SASL_SERVER_FACTORY = ELYTRON_SUBSYSTEM + ""/configurable-sasl-server-factory=*"";
+    String CUSTOM_CREDENTIAL_SECURITY_FACTORY = ELYTRON_SUBSYSTEM + ""/custom-credential-security-factory=*"";
+    String HTTP_AUTHENTICATION_FACTORY = ELYTRON_SUBSYSTEM + ""/http-authentication-factory=*"";
+    String KERBEROS_SECURITY_FACTORY = ELYTRON_SUBSYSTEM + ""/kerberos-security-factory=*"";
+    String MECHANISM_PROVIDER_FILTERING_SASL_SERVER_FACTORY = ELYTRON_SUBSYSTEM + ""/mechanism-provider-filtering-sasl-server-factory=*"";
+    String PROVIDER_HTTP_SERVER_MECHANISM_FACTORY = ELYTRON_SUBSYSTEM + ""/provider-http-server-mechanism-factory=*"";
+    String PROVIDER_SASL_SERVER_FACTORY = ELYTRON_SUBSYSTEM + ""/provider-sasl-server-factory=*"";
+    String SASL_AUTHENTICATION_FACTORY = ELYTRON_SUBSYSTEM + ""/sasl-authentication-factory=*"";
+    String SERVICE_LOADER_HTTP_SERVER_MECHANISM_FACTORY = ELYTRON_SUBSYSTEM + ""/service-loader-http-server-mechanism-factory=*"";
+    String SERVICE_LOADER_SASL_SERVER_FACTORY = ELYTRON_SUBSYSTEM + ""/service-loader-sasl-server-factory=*"";
+
+    String AGGREGATE_TRANSFORMER = ELYTRON_SUBSYSTEM + ""/aggregate-principal-transformer=*"";
+    String CHAINED_TRANSFORMER = ELYTRON_SUBSYSTEM + ""/chained-principal-transformer=*"";
+    String CONSTANT_TRANSFORMER = ELYTRON_SUBSYSTEM + ""/constant-principal-transformer=*"";
+    String CUSTOM_TRANSFORMER = ELYTRON_SUBSYSTEM + ""/custom-principal-transformer=*"";
+    String REGEX_VALIDATING_TRANSFORMER = ELYTRON_SUBSYSTEM + ""/regex-validating-principal-transformer=*"";
+    String REGEX_TRANSFORMER = ELYTRON_SUBSYSTEM + ""/regex-principal-transformer=*"";
+
+    AddressTemplate AGGREGATE_HTTP_SERVER_MECHANISM_FACTORY_ADDRESS = AddressTemplate.of(AGGREGATE_HTTP_SERVER_MECHANISM_FACTORY);
+    AddressTemplate AGGREGATE_SASL_SERVER_FACTORY_ADDRESS = AddressTemplate.of(AGGREGATE_SASL_SERVER_FACTORY);
+    AddressTemplate CONFIGURABLE_HTTP_SERVER_MECHANISM_FACTORY_ADDRESS = AddressTemplate.of(CONFIGURABLE_HTTP_SERVER_MECHANISM_FACTORY);
+    AddressTemplate CONFIGURABLE_SASL_SERVER_FACTORY_ADDRESS = AddressTemplate.of(CONFIGURABLE_SASL_SERVER_FACTORY);
+    AddressTemplate CUSTOM_CREDENTIAL_SECURITY_FACTORY_ADDRESS = AddressTemplate.of(CUSTOM_CREDENTIAL_SECURITY_FACTORY);
+    AddressTemplate HTTP_AUTHENTICATION_FACTORY_ADDRESS = AddressTemplate.of(HTTP_AUTHENTICATION_FACTORY);
+    AddressTemplate KERBEROS_SECURITY_FACTORY_ADDRESS = AddressTemplate.of(KERBEROS_SECURITY_FACTORY);
+    AddressTemplate MECHANISM_PROVIDER_FILTERING_SASL_SERVER_FACTORY_ADDRESS = AddressTemplate.of(MECHANISM_PROVIDER_FILTERING_SASL_SERVER_FACTORY);
+    AddressTemplate PROVIDER_HTTP_SERVER_MECHANISM_FACTORY_ADDRESS = AddressTemplate.of(PROVIDER_HTTP_SERVER_MECHANISM_FACTORY);
+    AddressTemplate PROVIDER_SASL_SERVER_FACTORY_ADDRESS = AddressTemplate.of(PROVIDER_SASL_SERVER_FACTORY);
+    AddressTemplate SASL_AUTHENTICATION_FACTORY_ADDRESS = AddressTemplate.of(SASL_AUTHENTICATION_FACTORY);
+    AddressTemplate SERVICE_LOADER_HTTP_SERVER_MECHANISM_FACTORY_ADDRESS = AddressTemplate.of(SERVICE_LOADER_HTTP_SERVER_MECHANISM_FACTORY);
+    AddressTemplate SERVICE_LOADER_SASL_SERVER_FACTORY_ADDRESS = AddressTemplate.of(SERVICE_LOADER_SASL_SERVER_FACTORY);
+
+    AddressTemplate AGGREGATE_TRANSFORMER_ADDRESS = AddressTemplate.of(AGGREGATE_TRANSFORMER);
+    AddressTemplate CHAINED_TRANSFORMER_ADDRESS = AddressTemplate.of(CHAINED_TRANSFORMER);
+    AddressTemplate CONSTANT_TRANSFORMER_ADDRESS = AddressTemplate.of(CONSTANT_TRANSFORMER);
+    AddressTemplate CUSTOM_TRANSFORMER_ADDRESS = AddressTemplate.of(CUSTOM_TRANSFORMER);
+    AddressTemplate REGEX_VALIDATING_TRANSFORMER_ADDRESS = AddressTemplate.of(REGEX_VALIDATING_TRANSFORMER);
+    AddressTemplate REGEX_TRANSFORMER_ADDRESS = AddressTemplate.of(REGEX_TRANSFORMER);
 
 
     // ======== role mappers, permission mappers, decoders
 
-    public static final String ADD_PREFIX_ROLE_MAPPER = ELYTRON_SUBSYSTEM + ""/add-prefix-role-mapper=*"";
-    public static final String ADD_SUFFIX_ROLE_MAPPER = ELYTRON_SUBSYSTEM + ""/add-suffix-role-mapper=*"";
-    public static final String AGGREGATE_ROLE_MAPPER = ELYTRON_SUBSYSTEM + ""/aggregate-role-mapper=*"";
-    public static final String CONSTANT_ROLE_MAPPER = ELYTRON_SUBSYSTEM + ""/constant-role-mapper=*"";
-    public static final String CUSTOM_ROLE_MAPPER = ELYTRON_SUBSYSTEM + ""/custom-role-mapper=*"";
-    public static final String LOGICAL_ROLE_MAPPER = ELYTRON_SUBSYSTEM + ""/logical-role-mapper=*"";
-
-    public static final String SIMPLE_PERMISSION_MAPPER = ELYTRON_SUBSYSTEM + ""/simple-permission-mapper=*"";
-    public static final String LOGICAL_PERMISSION_MAPPER = ELYTRON_SUBSYSTEM + ""/logical-permission-mapper=*"";
-    public static final String CUSTOM_PERMISSION_MAPPER = ELYTRON_SUBSYSTEM + ""/custom-permission-mapper=*"";
-    public static final String CONSTANT_PERMISSION_MAPPER = ELYTRON_SUBSYSTEM + ""/constant-permission-mapper=*"";
-
-    public static final String AGGREGATE_PRINCIPAL_DECODER = ELYTRON_SUBSYSTEM + ""/aggregate-principal-decoder=*"";
-    public static final String CONCATENATING_PRINCIPAL_DECODER = ELYTRON_SUBSYSTEM + ""/concatenating-principal-decoder=*"";
-    public static final String CONSTANT_PRINCIPAL_DECODER = ELYTRON_SUBSYSTEM + ""/constant-principal-decoder=*"";
-    public static final String CUSTOM_PRINCIPAL_DECODER = ELYTRON_SUBSYSTEM + ""/custom-principal-decoder=*"";
-    public static final String X500_PRINCIPAL_DECODER = ELYTRON_SUBSYSTEM + ""/x500-attribute-principal-decoder=*"";
-    public static final String CUSTOM_ROLE_DECODER = ELYTRON_SUBSYSTEM + ""/custom-role-decoder=*"";
-    public static final String SIMPLE_ROLE_DECODER = ELYTRON_SUBSYSTEM + ""/simple-role-decoder=*"";
-
-    public static final AddressTemplate ADD_PREFIX_ROLE_MAPPER_ADDRESS = AddressTemplate.of(ADD_PREFIX_ROLE_MAPPER);
-    public static final AddressTemplate ADD_SUFFIX_ROLE_MAPPER_ADDRESS = AddressTemplate.of(ADD_SUFFIX_ROLE_MAPPER);
-    public static final AddressTemplate AGGREGATE_ROLE_MAPPER_ADDRESS = AddressTemplate.of(AGGREGATE_ROLE_MAPPER);
-    public static final AddressTemplate CONSTANT_ROLE_MAPPER_ADDRESS = AddressTemplate.of(CONSTANT_ROLE_MAPPER);
-    public static final AddressTemplate CUSTOM_ROLE_MAPPER_ADDRESS = AddressTemplate.of(CUSTOM_ROLE_MAPPER);
-    public static final AddressTemplate LOGICAL_ROLE_MAPPER_ADDRESS = AddressTemplate.of(LOGICAL_ROLE_MAPPER);
-
-    public static final AddressTemplate SIMPLE_PERMISSION_MAPPER_ADDRESS = AddressTemplate.of(SIMPLE_PERMISSION_MAPPER);
-    public static final AddressTemplate LOGICAL_PERMISSION_MAPPER_ADDRESS = AddressTemplate.of(LOGICAL_PERMISSION_MAPPER);
-    public static final AddressTemplate CUSTOM_PERMISSION_MAPPER_ADDRESS = AddressTemplate.of(CUSTOM_PERMISSION_MAPPER);
-    public static final AddressTemplate CONSTANT_PERMISSION_MAPPER_ADDRESS = AddressTemplate.of(CONSTANT_PERMISSION_MAPPER);
-
-    public static final AddressTemplate AGGREGATE_PRINCIPAL_DECODER_ADDRESS = AddressTemplate.of(AGGREGATE_PRINCIPAL_DECODER);
-    public static final AddressTemplate CONCATENATING_PRINCIPAL_DECODER_ADDRESS = AddressTemplate.of(CONCATENATING_PRINCIPAL_DECODER);
-    public static final AddressTemplate CONSTANT_PRINCIPAL_DECODER_ADDRESS = AddressTemplate.of(CONSTANT_PRINCIPAL_DECODER);
-    public static final AddressTemplate CUSTOM_PRINCIPAL_DECODER_ADDRESS = AddressTemplate.of(CUSTOM_PRINCIPAL_DECODER);
-    public static final AddressTemplate X500_PRINCIPAL_DECODER_ADDRESS = AddressTemplate.of(X500_PRINCIPAL_DECODER);
-    public static final AddressTemplate CUSTOM_ROLE_DECODER_ADDRESS = AddressTemplate.of(CUSTOM_ROLE_DECODER);
-    public static final AddressTemplate SIMPLE_ROLE_DECODER_ADDRESS = AddressTemplate.of(SIMPLE_ROLE_DECODER);
+    String ADD_PREFIX_ROLE_MAPPER = ELYTRON_SUBSYSTEM + ""/add-prefix-role-mapper=*"";
+    String ADD_SUFFIX_ROLE_MAPPER = ELYTRON_SUBSYSTEM + ""/add-suffix-role-mapper=*"";
+    String AGGREGATE_ROLE_MAPPER = ELYTRON_SUBSYSTEM + ""/aggregate-role-mapper=*"";
+    String CONSTANT_ROLE_MAPPER = ELYTRON_SUBSYSTEM + ""/constant-role-mapper=*"";
+    String CUSTOM_ROLE_MAPPER = ELYTRON_SUBSYSTEM + ""/custom-role-mapper=*"";
+    String LOGICAL_ROLE_MAPPER = ELYTRON_SUBSYSTEM + ""/logical-role-mapper=*"";
+
+    String SIMPLE_PERMISSION_MAPPER = ELYTRON_SUBSYSTEM + ""/simple-permission-mapper=*"";
+    String LOGICAL_PERMISSION_MAPPER = ELYTRON_SUBSYSTEM + ""/logical-permission-mapper=*"";
+    String CUSTOM_PERMISSION_MAPPER = ELYTRON_SUBSYSTEM + ""/custom-permission-mapper=*"";
+    String CONSTANT_PERMISSION_MAPPER = ELYTRON_SUBSYSTEM + ""/constant-permission-mapper=*"";
+
+    String AGGREGATE_PRINCIPAL_DECODER = ELYTRON_SUBSYSTEM + ""/aggregate-principal-decoder=*"";
+    String CONCATENATING_PRINCIPAL_DECODER = ELYTRON_SUBSYSTEM + ""/concatenating-principal-decoder=*"";
+    String CONSTANT_PRINCIPAL_DECODER = ELYTRON_SUBSYSTEM + ""/constant-principal-decoder=*"";
+    String CUSTOM_PRINCIPAL_DECODER = ELYTRON_SUBSYSTEM + ""/custom-principal-decoder=*"";
+    String X500_PRINCIPAL_DECODER = ELYTRON_SUBSYSTEM + ""/x500-attribute-principal-decoder=*"";
+    String CUSTOM_ROLE_DECODER = ELYTRON_SUBSYSTEM + ""/custom-role-decoder=*"";
+    String SIMPLE_ROLE_DECODER = ELYTRON_SUBSYSTEM + ""/simple-role-decoder=*"";
+
+    AddressTemplate ADD_PREFIX_ROLE_MAPPER_ADDRESS = AddressTemplate.of(ADD_PREFIX_ROLE_MAPPER);
+    AddressTemplate ADD_SUFFIX_ROLE_MAPPER_ADDRESS = AddressTemplate.of(ADD_SUFFIX_ROLE_MAPPER);
+    AddressTemplate AGGREGATE_ROLE_MAPPER_ADDRESS = AddressTemplate.of(AGGREGATE_ROLE_MAPPER);
+    AddressTemplate CONSTANT_ROLE_MAPPER_ADDRESS = AddressTemplate.of(CONSTANT_ROLE_MAPPER);
+    AddressTemplate CUSTOM_ROLE_MAPPER_ADDRESS = AddressTemplate.of(CUSTOM_ROLE_MAPPER);
+    AddressTemplate LOGICAL_ROLE_MAPPER_ADDRESS = AddressTemplate.of(LOGICAL_ROLE_MAPPER);
+
+    AddressTemplate SIMPLE_PERMISSION_MAPPER_ADDRESS = AddressTemplate.of(SIMPLE_PERMISSION_MAPPER);
+    AddressTemplate LOGICAL_PERMISSION_MAPPER_ADDRESS = AddressTemplate.of(LOGICAL_PERMISSION_MAPPER);
+    AddressTemplate CUSTOM_PERMISSION_MAPPER_ADDRESS = AddressTemplate.of(CUSTOM_PERMISSION_MAPPER);
+    AddressTemplate CONSTANT_PERMISSION_MAPPER_ADDRESS = AddressTemplate.of(CONSTANT_PERMISSION_MAPPER);
+
+    AddressTemplate AGGREGATE_PRINCIPAL_DECODER_ADDRESS = AddressTemplate.of(AGGREGATE_PRINCIPAL_DECODER);
+    AddressTemplate CONCATENATING_PRINCIPAL_DECODER_ADDRESS = AddressTemplate.of(CONCATENATING_PRINCIPAL_DECODER);
+    AddressTemplate CONSTANT_PRINCIPAL_DECODER_ADDRESS = AddressTemplate.of(CONSTANT_PRINCIPAL_DECODER);
+    AddressTemplate CUSTOM_PRINCIPAL_DECODER_ADDRESS = AddressTemplate.of(CUSTOM_PRINCIPAL_DECODER);
+    AddressTemplate X500_PRINCIPAL_DECODER_ADDRESS = AddressTemplate.of(X500_PRINCIPAL_DECODER);
+    AddressTemplate CUSTOM_ROLE_DECODER_ADDRESS = AddressTemplate.of(CUSTOM_ROLE_DECODER);
+    AddressTemplate SIMPLE_ROLE_DECODER_ADDRESS = AddressTemplate.of(SIMPLE_ROLE_DECODER);
 
     // ======== other settings: authentication, stores, dir-context, SSL, logs
 
-    public static final String KEY_STORE = ELYTRON_SUBSYSTEM + ""/key-store=*"";
-    public static final String KEY_MANAGER = ELYTRON_SUBSYSTEM + ""/key-manager=*"";
-    public static final String SERVER_SSL_CONTEXT = ELYTRON_SUBSYSTEM + ""/server-ssl-context=*"";
-    public static final String CLIENT_SSL_CONTEXT = ELYTRON_SUBSYSTEM + ""/client-ssl-context=*"";
-    public static final String TRUST_MANAGER = ELYTRON_SUBSYSTEM + ""/trust-manager=*"";
-    public static final String CREDENTIAL_STORE = ELYTRON_SUBSYSTEM + ""/credential-store=*"";
-    public static final String FILTERING_KEY_STORE = ELYTRON_SUBSYSTEM + ""/filtering-key-store=*"";
-    public static final String LDAP_KEY_STORE = ELYTRON_SUBSYSTEM + ""/ldap-key-store=*"";
-    public static final String PROVIDER_LOADER = ELYTRON_SUBSYSTEM + ""/provider-loader=*"";
-    public static final String AGGREGATE_PROVIDERS = ELYTRON_SUBSYSTEM + ""/aggregate-providers=*"";
-    public static final String SECURITY_DOMAIN = ELYTRON_SUBSYSTEM + ""/security-domain=*"";
-    public static final String DIR_CONTEXT = ELYTRON_SUBSYSTEM + ""/dir-context=*"";
-    public static final String AUTHENTICATION_CONTEXT = ELYTRON_SUBSYSTEM + ""/authentication-context=*"";
-    public static final String AUTHENTICATION_CONF = ELYTRON_SUBSYSTEM + ""/authentication-configuration=*"";
-    public static final String FILE_AUDIT_LOG = ELYTRON_SUBSYSTEM + ""/file-audit-log=*"";
-    public static final String SIZE_FILE_AUDIT_LOG = ELYTRON_SUBSYSTEM + ""/size-rotating-file-audit-log=*"";
-    public static final String PERIODIC_FILE_AUDIT_LOG = ELYTRON_SUBSYSTEM + ""/periodic-rotating-file-audit-log=*"";
-    public static final String SYSLOG_AUDIT_LOG = ELYTRON_SUBSYSTEM + ""/syslog-audit-log=*"";
-    public static final String POLICY = ELYTRON_SUBSYSTEM + ""/policy=*"";
-    public static final String AGGREGATE_SECURITY_EVENT_LISTENER = ELYTRON_SUBSYSTEM + ""/aggregate-security-event-listener=*"";
-
-    public static final AddressTemplate KEY_STORE_ADDRESS = AddressTemplate.of(KEY_STORE);
-    public static final AddressTemplate KEY_MANAGER_ADDRESS = AddressTemplate.of(KEY_MANAGER);
-    public static final AddressTemplate SERVER_SSL_CONTEXT_ADDRESS = AddressTemplate.of(SERVER_SSL_CONTEXT);
-    public static final AddressTemplate CLIENT_SSL_CONTEXT_ADDRESS = AddressTemplate.of(CLIENT_SSL_CONTEXT);
-    public static final AddressTemplate TRUST_MANAGER_ADDRESS = AddressTemplate.of(TRUST_MANAGER);
-    public static final AddressTemplate CREDENTIAL_STORE_ADDRESS = AddressTemplate.of(CREDENTIAL_STORE);
-    public static final AddressTemplate FILTERING_KEY_STORE_ADDRESS = AddressTemplate.of(FILTERING_KEY_STORE);
-    public static final AddressTemplate LDAP_KEY_STORE_ADDRESS = AddressTemplate.of(LDAP_KEY_STORE);
-    public static final AddressTemplate PROVIDER_LOADER_ADDRESS = AddressTemplate.of(PROVIDER_LOADER);
-    public static final AddressTemplate AGGREGATE_PROVIDERS_ADDRESS = AddressTemplate.of(AGGREGATE_PROVIDERS);
-
-    public static final AddressTemplate SECURITY_DOMAIN_ADDRESS = AddressTemplate.of(SECURITY_DOMAIN);
-    public static final AddressTemplate DIR_CONTEXT_ADDRESS = AddressTemplate.of(DIR_CONTEXT);
-    public static final AddressTemplate AUTHENTICATION_CONTEXT_ADDRESS = AddressTemplate.of(AUTHENTICATION_CONTEXT);
-    public static final AddressTemplate AUTHENTICATION_CONF_ADDRESS = AddressTemplate.of(AUTHENTICATION_CONF);
-
-    public static final AddressTemplate FILE_AUDIT_LOG_ADDRESS = AddressTemplate.of(FILE_AUDIT_LOG);
-    public static final AddressTemplate SIZE_FILE_AUDIT_LOG_ADDRESS = AddressTemplate.of(SIZE_FILE_AUDIT_LOG);
-    public static final AddressTemplate PERIODIC_FILE_AUDIT_LOG_ADDRESS = AddressTemplate.of(PERIODIC_FILE_AUDIT_LOG);
-    public static final AddressTemplate SYSLOG_AUDIT_LOG_ADDRESS = AddressTemplate.of(SYSLOG_AUDIT_LOG);
-    public static final AddressTemplate POLICY_ADDRESS = AddressTemplate.of(POLICY);
-    public static final AddressTemplate AGGREGATE_SECURITY_EVENT_LISTENER_ADDRESS = AddressTemplate.of(AGGREGATE_SECURITY_EVENT_LISTENER);
+    String KEY_STORE = ELYTRON_SUBSYSTEM + ""/key-store=*"";
+    String KEY_MANAGER = ELYTRON_SUBSYSTEM + ""/key-manager=*"";
+    String SERVER_SSL_CONTEXT = ELYTRON_SUBSYSTEM + ""/server-ssl-context=*"";
+    String CLIENT_SSL_CONTEXT = ELYTRON_SUBSYSTEM + ""/client-ssl-context=*"";
+    String TRUST_MANAGER = ELYTRON_SUBSYSTEM + ""/trust-manager=*"";
+    String CREDENTIAL_STORE = ELYTRON_SUBSYSTEM + ""/credential-store=*"";
+    String FILTERING_KEY_STORE = ELYTRON_SUBSYSTEM + ""/filtering-key-store=*"";
+    String LDAP_KEY_STORE = ELYTRON_SUBSYSTEM + ""/ldap-key-store=*"";
+    String PROVIDER_LOADER = ELYTRON_SUBSYSTEM + ""/provider-loader=*"";
+    String AGGREGATE_PROVIDERS = ELYTRON_SUBSYSTEM + ""/aggregate-providers=*"";
+    String SECURITY_DOMAIN = ELYTRON_SUBSYSTEM + ""/security-domain=*"";
+    String DIR_CONTEXT = ELYTRON_SUBSYSTEM + ""/dir-context=*"";
+    String AUTHENTICATION_CONTEXT = ELYTRON_SUBSYSTEM + ""/authentication-context=*"";
+    String AUTHENTICATION_CONF = ELYTRON_SUBSYSTEM + ""/authentication-configuration=*"";
+    String FILE_AUDIT_LOG = ELYTRON_SUBSYSTEM + ""/file-audit-log=*"";
+    String SIZE_FILE_AUDIT_LOG = ELYTRON_SUBSYSTEM + ""/size-rotating-file-audit-log=*"";
+    String PERIODIC_FILE_AUDIT_LOG = ELYTRON_SUBSYSTEM + ""/periodic-rotating-file-audit-log=*"";
+    String SYSLOG_AUDIT_LOG = ELYTRON_SUBSYSTEM + ""/syslog-audit-log=*"";
+    String POLICY = ELYTRON_SUBSYSTEM + ""/policy=*"";
+    String AGGREGATE_SECURITY_EVENT_LISTENER = ELYTRON_SUBSYSTEM + ""/aggregate-security-event-listener=*"";
+
+    AddressTemplate KEY_STORE_ADDRESS = AddressTemplate.of(KEY_STORE);
+    AddressTemplate KEY_MANAGER_ADDRESS = AddressTemplate.of(KEY_MANAGER);
+    AddressTemplate SERVER_SSL_CONTEXT_ADDRESS = AddressTemplate.of(SERVER_SSL_CONTEXT);
+    AddressTemplate CLIENT_SSL_CONTEXT_ADDRESS = AddressTemplate.of(CLIENT_SSL_CONTEXT);
+    AddressTemplate TRUST_MANAGER_ADDRESS = AddressTemplate.of(TRUST_MANAGER);
+    AddressTemplate CREDENTIAL_STORE_ADDRESS = AddressTemplate.of(CREDENTIAL_STORE);
+    AddressTemplate FILTERING_KEY_STORE_ADDRESS = AddressTemplate.of(FILTERING_KEY_STORE);
+    AddressTemplate LDAP_KEY_STORE_ADDRESS = AddressTemplate.of(LDAP_KEY_STORE);
+    AddressTemplate PROVIDER_LOADER_ADDRESS = AddressTemplate.of(PROVIDER_LOADER);
+    AddressTemplate AGGREGATE_PROVIDERS_ADDRESS = AddressTemplate.of(AGGREGATE_PROVIDERS);
+
+    AddressTemplate SECURITY_DOMAIN_ADDRESS = AddressTemplate.of(SECURITY_DOMAIN);
+    AddressTemplate DIR_CONTEXT_ADDRESS = AddressTemplate.of(DIR_CONTEXT);
+    AddressTemplate AUTHENTICATION_CONTEXT_ADDRESS = AddressTemplate.of(AUTHENTICATION_CONTEXT);
+    AddressTemplate AUTHENTICATION_CONF_ADDRESS = AddressTemplate.of(AUTHENTICATION_CONF);
+
+    AddressTemplate FILE_AUDIT_LOG_ADDRESS = AddressTemplate.of(FILE_AUDIT_LOG);
+    AddressTemplate SIZE_FILE_AUDIT_LOG_ADDRESS = AddressTemplate.of(SIZE_FILE_AUDIT_LOG);
+    AddressTemplate PERIODIC_FILE_AUDIT_LOG_ADDRESS = AddressTemplate.of(PERIODIC_FILE_AUDIT_LOG);
+    AddressTemplate SYSLOG_AUDIT_LOG_ADDRESS = AddressTemplate.of(SYSLOG_AUDIT_LOG);
+    AddressTemplate POLICY_ADDRESS = AddressTemplate.of(POLICY);
+    AddressTemplate AGGREGATE_SECURITY_EVENT_LISTENER_ADDRESS = AddressTemplate.of(AGGREGATE_SECURITY_EVENT_LISTENER);
 
     // @formatter:on
 }",2017-06-30T16:31:03Z,173
"@@ -0,0 +1,123 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.elytron;
+
+import java.util.List;
+
+import elemental2.dom.HTMLElement;
+import org.jboss.gwt.elemento.core.IsElement;
+import org.jboss.hal.ballroom.Attachable;
+import org.jboss.hal.ballroom.Tabs;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.table.Table;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.core.mbui.table.ModelNodeTable;
+import org.jboss.hal.core.mbui.table.TableButtonFactory;
+import org.jboss.hal.core.mvp.HasPresenter;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
+
+import static java.util.Arrays.asList;
+import static org.jboss.gwt.elemento.core.Elements.h;
+import static org.jboss.gwt.elemento.core.Elements.p;
+import static org.jboss.gwt.elemento.core.Elements.section;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafeGet;
+
+public class LdapKeyStoreElement implements IsElement<HTMLElement>, Attachable, HasPresenter<OtherSettingsPresenter> {
+
+    private final Metadata metadata;
+    private final Table<NamedNode> table;
+    private final Form<NamedNode> attributes;
+    private final Form<ModelNode> newItemTemplate;
+    private final HTMLElement root;
+    private OtherSettingsPresenter presenter;
+
+    public LdapKeyStoreElement(final Metadata metadata, final TableButtonFactory tableButtonFactory,
+            final Resources resources) {
+        this.metadata = metadata;
+
+        this.table = new ModelNodeTable.Builder<NamedNode>(Ids.ELYTRON_LDAP_KEY_STORE_TABLE,
+                metadata)
+                .button(tableButtonFactory.add(Ids.ELYTRON_LDAP_KEY_STORE_ADD, Names.LDAP_KEY_STORE,
+                        metadata.getTemplate(), asList(DIR_CONTEXT, SEARCH_PATH),
+                        (n, a) -> presenter.reloadLdapKeyStores()))
+                .button(tableButtonFactory.remove(Names.LDAP_KEY_STORE, metadata.getTemplate(),
+                        (table) -> table.selectedRow().getName(), () -> presenter.reloadLdapKeyStores()))
+                .column(NAME, (cell, type, row, meta) -> row.getName())
+                .build();
+
+        this.attributes = new ModelNodeForm.Builder<NamedNode>(Ids.ELYTRON_LDAP_KEY_STORE_ATTRIBUTES_FORM, metadata)
+                .onSave(((form, changedValues) -> presenter.saveLdapKeyStore(form.getModel().getName(), changedValues)))
+                .build();
+        Metadata nitMetadata = metadata.forComplexAttribute(NEW_ITEM_TEMPLATE, false);
+        this.newItemTemplate = new ModelNodeForm.Builder<>(Ids.ELYTRON_LDAP_KEY_STORE_NEW_ITEM_TEMPLATE_FORM,
+                nitMetadata)
+                .include(NEW_ITEM_PATH, NEW_ITEM_RDN, NEW_ITEM_ATTRIBUTES)
+                .unsorted()
+                .customFormItem(NEW_ITEM_ATTRIBUTES, (attributeDescription) -> new NewItemAttributesItem())
+                .onSave((form, changedValues) -> presenter.saveNewItemTemplate(table.selectedRow().getName(),
+                        changedValues))
+                .build();
+
+        Tabs tabs = new Tabs();
+        tabs.add(Ids.ELYTRON_LDAP_KEY_STORE_ATTRIBUTES_TAB, resources.constants().attribute(), attributes.asElement());
+        tabs.add(Ids.ELYTRON_LDAP_KEY_STORE_NEW_ITEM_TEMPLATE_TAB, Names.NEW_ITEM_TEMPLATE,
+                newItemTemplate.asElement());
+
+        this.root = section()
+                .add(h(1).textContent(Names.LDAP_KEY_STORES))
+                .add(p().textContent(metadata.getDescription().getDescription()))
+                .addAll(table, tabs)
+                .asElement();
+    }
+
+    @Override
+    public HTMLElement asElement() {
+        return root;
+    }
+
+    @Override
+    public void attach() {
+        table.attach();
+        attributes.attach();
+        newItemTemplate.attach();
+
+        table.bindForm(attributes);
+        table.onSelectionChange(table -> {
+            if (table.hasSelection()) {
+                newItemTemplate.view(failSafeGet(table.selectedRow(), NEW_ITEM_TEMPLATE));
+            } else {
+                newItemTemplate.clear();
+            }
+        });
+    }
+
+    @Override
+    public void setPresenter(final OtherSettingsPresenter presenter) {
+        this.presenter = presenter;
+    }
+
+    void update(List<NamedNode> nodes) {
+        attributes.clear();
+        newItemTemplate.clear();
+        table.update(nodes);
+    }
+}",2017-06-30T16:31:03Z,174
"@@ -21,6 +21,7 @@
 import com.google.common.base.Splitter;
 import com.google.gwt.core.client.GWT;
 import com.google.gwt.regexp.shared.RegExp;
+import elemental2.dom.HTMLElement;
 import org.jboss.hal.ballroom.LabelBuilder;
 import org.jboss.hal.ballroom.form.ModelNodeItem;
 import org.jboss.hal.ballroom.form.TagsItem;
@@ -29,19 +30,22 @@
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.resources.Messages;
 
+import static elemental2.dom.DomGlobal.document;
 import static java.util.Collections.emptyList;
 import static java.util.stream.Collectors.joining;
 import static java.util.stream.Collectors.toList;
 import static org.jboss.hal.ballroom.form.Decoration.*;
+import static org.jboss.hal.ballroom.form.Form.State.READONLY;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.NAME;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.VALUE;
 
 class NewItemAttributesItem extends TagsItem<ModelNode> implements ModelNodeItem {
 
     private static class MapMapping implements TagsMapping<ModelNode> {
 
+        private static final String VALUE_SEPARATOR = "":"";
         private static final RegExp REGEX = RegExp.compile(
-                ""^([\\w\\-\\.\\/]+)=([\\w\\-\\.\\/\\|]+)$""); //NON-NLS
+                ""^([\\w\\-\\.\\/]+)=([\\w\\-\\.\\/"" + VALUE_SEPARATOR + ""]+)$""); //NON-NLS
 
         @Override
         public Validator validator() {
@@ -59,8 +63,8 @@ public ModelNode parse(final String cst) {
                         .split(cst)
                         .forEach((key, value) -> {
                             ModelNode kv = new ModelNode();
-                            kv.get(NAME, key);
-                            for (String v : value.split(""\\|"")) {
+                            kv.get(NAME).set(key);
+                            for (String v : value.split(VALUE_SEPARATOR)) {
                                 kv.get(VALUE).add(v);
                             }
                             result.add(kv);
@@ -78,7 +82,7 @@ public List<String> tags(final ModelNode value) {
             return value.asList().stream()
                     .map(kv -> kv.get(NAME).asString() + ""="" + kv.get(VALUE).asList().stream()
                             .map(ModelNode::asString)
-                            .collect(joining(""|"")))
+                            .collect(joining(VALUE_SEPARATOR)))
                     .collect(toList());
         }
 
@@ -88,10 +92,10 @@ public String asString(final ModelNode value) {
                 return """";
             }
             return value.asList().stream()
-                    .map(kv -> kv.get(NAME).asString() + ""="" + kv.get(VALUE).asList().stream()
+                    .map(kv -> kv.get(NAME).asString() + "" \u21D2 "" + kv.get(VALUE).asList().stream()
                             .map(ModelNode::asString)
-                            .collect(joining(""|"")))
-                    .collect(joining("", ""));
+                            .collect(joining(VALUE_SEPARATOR)))
+                    .collect(joining(""\n""));
         }
     }
 
@@ -104,6 +108,13 @@ public String asString(final ModelNode value) {
                 EnumSet.of(DEFAULT, DEPRECATED, ENABLED, INVALID, REQUIRED, RESTRICTED), new MapMapping());
     }
 
+    @Override
+    public void attach() {
+        super.attach();
+        HTMLElement element = (HTMLElement) document.getElementById(getId(READONLY));
+        element.style.whiteSpace = ""pre"";
+    }
+
     @Override
     public boolean isEmpty() {
         return getValue() == null || !getValue().isDefined();",2017-06-30T16:31:03Z,15
"@@ -27,6 +27,7 @@
 import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
 import com.gwtplatform.mvp.client.proxy.ProxyPlace;
 import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.core.ComplexAttributeOperations;
 import org.jboss.hal.core.CrudOperations;
 import org.jboss.hal.core.OperationFactory;
 import org.jboss.hal.core.finder.Finder;
@@ -39,12 +40,14 @@
 import org.jboss.hal.core.mvp.SupportsExpertMode;
 import org.jboss.hal.dmr.Composite;
 import org.jboss.hal.dmr.CompositeResult;
+import org.jboss.hal.dmr.ModelDescriptionConstants;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.NamedNode;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.resources.Ids;
@@ -58,6 +61,7 @@
 import static java.util.Arrays.asList;
 import static org.jboss.hal.client.configuration.subsystem.elytron.AddressTemplates.*;
 import static org.jboss.hal.client.configuration.subsystem.elytron.ResourceView.HAL_INDEX;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.NEW_ITEM_TEMPLATE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.RESULT;
 import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
 
@@ -105,8 +109,10 @@ public interface MyView extends MbuiView<OtherSettingsPresenter> {
 
     private Dispatcher dispatcher;
     private final CrudOperations crud;
+    private final ComplexAttributeOperations ca;
     private final FinderPathFactory finderPathFactory;
     private final StatementContext statementContext;
+    private final MetadataRegistry metadataRegistry;
     private final Resources resources;
 
     @Inject
@@ -116,14 +122,18 @@ public OtherSettingsPresenter(final EventBus eventBus,
             final Finder finder,
             final Dispatcher dispatcher,
             final CrudOperations crud,
+            final ComplexAttributeOperations ca,
             final FinderPathFactory finderPathFactory,
             final StatementContext statementContext,
+            final MetadataRegistry metadataRegistry,
             final Resources resources) {
         super(eventBus, view, proxy, finder);
         this.dispatcher = dispatcher;
         this.crud = crud;
+        this.ca = ca;
         this.finderPathFactory = finderPathFactory;
         this.statementContext = statementContext;
+        this.metadataRegistry = metadataRegistry;
         this.resources = resources;
     }
 
@@ -267,4 +277,21 @@ public void launchAddDialog(Function<String, String> resourceNameFunction, Strin
         dialog.show();
     }
 
+
+    // ------------------------------------------------------ LDAP key store
+
+    void reloadLdapKeyStores() {
+        crud.readChildren(AddressTemplates.ELYTRON_SUBSYSTEM_ADDRESS, ModelDescriptionConstants.LDAP_KEY_STORE,
+                children -> getView().updateLdapKeyStore(asNamedNodes(children)));
+    }
+
+    void saveLdapKeyStore(final String name, final Map<String, Object> changedValues) {
+        crud.save(Names.LDAP_KEY_STORE, name, AddressTemplates.LDAP_KEY_STORE_ADDRESS, changedValues,
+                this::reloadLdapKeyStores);
+    }
+
+    void saveNewItemTemplate(final String ldapKeyStore, final Map<String, Object> changedValues) {
+        ca.save(ldapKeyStore, NEW_ITEM_TEMPLATE, AddressTemplates.LDAP_KEY_STORE_ADDRESS, changedValues,
+                this::reloadLdapKeyStores);
+    }
 }",2017-06-30T16:31:03Z,116
"@@ -25,11 +25,12 @@
 import org.jboss.hal.core.mbui.table.TableButtonFactory;
 import org.jboss.hal.core.mvp.HalViewImpl;
 import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
 
-import static java.util.Collections.singletonList;
 import static org.jboss.hal.ballroom.LayoutBuilder.column;
 import static org.jboss.hal.ballroom.LayoutBuilder.row;
 import static org.jboss.hal.client.configuration.subsystem.elytron.AddressTemplates.*;
@@ -43,7 +44,7 @@ public class OtherSettingsView extends HalViewImpl implements OtherSettingsPrese
     private ResourceView credentialStoreView;
     private ResourceView filteringKeyStoreView;
     private ResourceView keystoreView;
-    private ResourceView ldapKeyStoreView;
+    private LdapKeyStoreElement ldapKeyStoreElement;
 
     // ssl
     private ResourceView aggregateProvidersView;
@@ -121,16 +122,20 @@ public class OtherSettingsView extends HalViewImpl implements OtherSettingsPrese
                 .addComplexAttributeAsTab(""credential-reference"")
                 .create();
 
-        NewItemAttributesItem newItemAttributes = new NewItemAttributesItem();
-        ldapKeyStoreView = new ResourceView.Builder(tableButtonFactory, primaryIdStores,
-                Ids.ELYTRON_LDAP_KEY_STORE, ""LDAP Key Store"", LDAP_KEY_STORE_ADDRESS, this,
-                () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .addComplexAttributeAsTab(""new-item-template"", singletonList(newItemAttributes))
-                .create();
+        // NewItemAttributesItem newItemAttributes = new NewItemAttributesItem();
+        Metadata metadata = metadataRegistry.lookup(AddressTemplates.LDAP_KEY_STORE_ADDRESS);
+        ldapKeyStoreElement = new LdapKeyStoreElement(metadata, tableButtonFactory, resources);
+                // new ResourceView.Builder(tableButtonFactory, primaryIdStores,
+                // Ids.ELYTRON_LDAP_KEY_STORE, ""LDAP Key Store"", LDAP_KEY_STORE_ADDRESS, this,
+                // () -> presenter.reload())
+                // .setNavigation(navigation)
+                // .setMetadataRegistry(metadataRegistry)
+                // .setTableAddCallback((name, address) -> presenter.reload())
+                // .build()
+                // .addComplexAttributeAsTab(""new-item-template"", singletonList(newItemAttributes))
+                // .create();
+        navigation.addSecondary(primaryIdStores, Ids.ELYTRON_LDAP_KEY_STORE, Names.LDAP_KEY_STORE,
+                ldapKeyStoreElement.asElement());
 
         aggregateProvidersView = new ResourceView.Builder(tableButtonFactory, primaryIdSsl,
                 Ids.ELYTRON_AGGREGATE_PROVIDERS, ""Aggregate Providers"", AGGREGATE_PROVIDERS_ADDRESS, this,
@@ -314,7 +319,7 @@ public void attach() {
         credentialStoreView.bindTableToForm();
         filteringKeyStoreView.bindTableToForm();
         keystoreView.bindTableToForm();
-        ldapKeyStoreView.bindTableToForm();
+        ldapKeyStoreElement.attach();
         aggregateProvidersView.bindTableToForm();
         clientSslContextView.bindTableToForm();
         keyManagerView.bindTableToForm();
@@ -370,7 +375,7 @@ public void updateFilteringKeyStore(final List<NamedNode> model) {
 
     @Override
     public void updateLdapKeyStore(final List<NamedNode> model) {
-        ldapKeyStoreView.update(model);
+        ldapKeyStoreElement.update(model);
     }
 
 
@@ -441,7 +446,7 @@ public void setPresenter(final OtherSettingsPresenter presenter) {
         credentialStoreView.setPresenter(presenter);
         filteringKeyStoreView.setPresenter(presenter);
         keystoreView.setPresenter(presenter);
-        ldapKeyStoreView.setPresenter(presenter);
+        ldapKeyStoreElement.setPresenter(presenter);
         aggregateProvidersView.setPresenter(presenter);
         clientSslContextView.setPresenter(presenter);
         keyManagerView.setPresenter(presenter);",2017-06-30T16:31:03Z,175
"@@ -0,0 +1,129 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.core;
+
+import java.util.Map;
+import javax.inject.Inject;
+import javax.inject.Provider;
+
+import com.google.web.bindery.event.shared.EventBus;
+import jsinterop.annotations.JsIgnore;
+import org.jboss.gwt.flow.Progress;
+import org.jboss.hal.ballroom.LabelBuilder;
+import org.jboss.hal.dmr.Composite;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.meta.processing.MetadataProcessor;
+import org.jboss.hal.meta.processing.SuccessfulMetadataCallback;
+import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Callback;
+import org.jboss.hal.spi.Footer;
+
+/**
+ * Class to create, read, update and delete complex attributes. This class mirrors some of the methods from {@link
+ * CrudOperations}.
+ */
+public class ComplexAttributeOperations {
+
+    private final EventBus eventBus;
+    private final Dispatcher dispatcher;
+    private final MetadataProcessor metadataProcessor;
+    private final Provider<Progress> progress;
+    private final StatementContext statementContext;
+    private final CrudOperations crud;
+    private final Resources resources;
+    private final LabelBuilder labelBuilder;
+
+    @Inject
+    public ComplexAttributeOperations(final EventBus eventBus,
+            final Dispatcher dispatcher,
+            final MetadataProcessor metadataProcessor,
+            @Footer final Provider<Progress> progress,
+            final StatementContext statementContext,
+            final CrudOperations crud,
+            final Resources resources) {
+        this.eventBus = eventBus;
+        this.dispatcher = dispatcher;
+        this.metadataProcessor = metadataProcessor;
+        this.progress = progress;
+        this.statementContext = statementContext;
+        this.crud = crud;
+        this.resources = resources;
+        this.labelBuilder = new LabelBuilder();
+    }
+
+
+    // ------------------------------------------------------ (u)pdate using address
+
+    /**
+     * Write the changed values to the complex attribute. After the complex attribute has been saved a standard success
+     * message is fired and the specified callback is executed.
+     * <p>
+     * If the change set is empty, a warning message is fired and the specified callback is executed.
+     *
+     * @param resource         the resource name
+     * @param complexAttribute the name of the complex attribute
+     * @param template         the address template which is resolved against the current statement context and the
+     *                         resource name to get the resource address for the operation
+     * @param changedValues    the changed values / payload for the operation
+     * @param callback         the callback executed after the resource has been saved
+     */
+    @JsIgnore
+    public void save(String resource, String complexAttribute, final AddressTemplate template,
+            final Map<String, Object> changedValues, final Callback callback) {
+        metadataProcessor.lookup(template, progress.get(), new SuccessfulMetadataCallback(eventBus, resources) {
+            @Override
+            public void onMetadata(final Metadata metadata) {
+                ResourceAddress address = template.resolve(statementContext, resource);
+                Metadata caMeta = metadata.forComplexAttribute(complexAttribute);
+                save(complexAttribute, address, changedValues, caMeta, callback);
+            }
+        });
+    }
+
+
+    // ------------------------------------------------------ (u)pdate using address
+
+    /**
+     * Write the changed values to the complex attribute. After the complex attribute has been saved a standard success
+     * message is fired and the specified callback is executed.
+     * <p>
+     * If the change set is empty, a warning message is fired and the specified callback is executed.
+     *
+     * @param complexAttribute the name of the complex attribute
+     * @param address          the fq address for the operation
+     * @param changedValues    the changed values / payload for the operation
+     * @param metadata         the metadata for the complex attribute
+     * @param callback         the callback executed after the resource has been saved
+     */
+    @JsIgnore
+    public void save(String complexAttribute, final ResourceAddress address, final Map<String, Object> changedValues,
+            final Metadata metadata, final Callback callback) {
+        Composite operations = operationFactory(complexAttribute).fromChangeSet(address, changedValues, metadata);
+        crud.save(operations, resources.messages().modifySingleResourceSuccess(labelBuilder.label(complexAttribute)),
+                callback);
+    }
+
+
+    // ------------------------------------------------------ helper methods
+
+    private OperationFactory operationFactory(String complexAttribute) {
+        return new OperationFactory(name -> complexAttribute + ""."" + name);
+    }
+}",2017-06-30T16:31:03Z,176
"@@ -50,6 +50,7 @@ protected void configure() {
         bind(AccessControl.class).in(Singleton.class);
         bind(ColumnRegistry.class).in(Singleton.class);
         bind(ColumnActionFactory.class).in(Singleton.class);
+        bind(ComplexAttributeOperations.class).in(Singleton.class);
         bind(CrudOperations.class).in(Singleton.class);
         bind(ExpressionResolver.class).asEagerSingleton(); // to register the event handler
         bind(ExtensionRegistry.class).asEagerSingleton(); // to register the event handler",2017-06-30T16:31:03Z,177
"@@ -61,6 +61,13 @@ public OperationFactory() {
         this(null);
     }
 
+    /**
+     * Creates a new instance with the specified name function. Use this constructor if you want to create change sets
+     * for complex attributes and need to adopt the {@code NAME} parameters of the DMR operations.
+     *
+     * @param nameFn function which is applied to the {@code NAME} parameter of the operations created by this
+     *               class.
+     */
     public OperationFactory(final Function<String, String> nameFn) {
         this.nameFn = nameFn;
     }
@@ -174,10 +181,10 @@ public Composite fromChangeSet(final ResourceAddress address, final Map<String,
      * Turns a change-set into a operation containing {@linkplain org.jboss.hal.dmr.ModelDescriptionConstants#WRITE_ATTRIBUTE_OPERATION
      * write-attribute} operation.
      *
-     * @param address   the fq address used for the operations
-     * @param changeSet the changed values
+     * @param address              the fq address used for the operations
+     * @param changeSet            the changed values
      * @param complexAttributeName the complex attribute name
-     * @param metadata  the metadata which should contain the attribute definitions of the change-set
+     * @param metadata             the metadata which should contain the attribute definitions of the change-set
      */
     public Composite fromChangeSet(final ResourceAddress address, final Map<String, Object> changeSet,
             String complexAttributeName, final Metadata metadata) {
@@ -195,9 +202,9 @@ public Composite fromChangeSet(final ResourceAddress address, final Map<String,
         });
 
         Operation operation = new Operation.Builder(address, WRITE_ATTRIBUTE_OPERATION)
-                            .param(NAME, complexAttributeName)
-                            .param(VALUE, payload)
-                            .build();
+                .param(NAME, complexAttributeName)
+                .param(VALUE, payload)
+                .build();
 
         return new Composite(operation);
     }
@@ -206,10 +213,10 @@ public Composite fromChangeSet(final ResourceAddress address, final Map<String,
      * Turns a change-set into a operation containing {@linkplain org.jboss.hal.dmr.ModelDescriptionConstants#LIST_ADD_OPERATION
      * list-add} operation.
      *
-     * @param address   the fq address used for the operations
-     * @param changeSet the changed values
+     * @param address              the fq address used for the operations
+     * @param changeSet            the changed values
      * @param complexAttributeName the complex attribute name
-     * @param metadata  the metadata which should contain the attribute definitions of the change-set
+     * @param metadata             the metadata which should contain the attribute definitions of the change-set
      */
     public Composite fromListChangeSet(final ResourceAddress address, final Map<String, Object> changeSet,
             String complexAttributeName, final Metadata metadata) {
@@ -227,9 +234,9 @@ public Composite fromListChangeSet(final ResourceAddress address, final Map<Stri
         });
 
         Operation operation = new Operation.Builder(address, LIST_ADD_OPERATION)
-                            .param(NAME, complexAttributeName)
-                            .param(VALUE, payload)
-                            .build();
+                .param(NAME, complexAttributeName)
+                .param(VALUE, payload)
+                .build();
 
         return new Composite(operation);
     }
@@ -238,16 +245,16 @@ public Composite fromListChangeSet(final ResourceAddress address, final Map<Stri
      * Turns a change-set into a operation containing {@linkplain org.jboss.hal.dmr.ModelDescriptionConstants#LIST_ADD_OPERATION
      * list-add} operation.
      *
-     * @param address   the fq address used for the operations
+     * @param address              the fq address used for the operations
      * @param complexAttributeName the complex attribute name
      */
     public Composite fromListChangeSet(final ResourceAddress address, final ModelNode payload,
             String complexAttributeName) {
 
         Operation operation = new Operation.Builder(address, LIST_ADD_OPERATION)
-                            .param(NAME, complexAttributeName)
-                            .param(VALUE, payload)
-                            .build();
+                .param(NAME, complexAttributeName)
+                .param(VALUE, payload)
+                .build();
 
         return new Composite(operation);
     }
@@ -366,10 +373,9 @@ private ModelNode asValueNode(String name, Object value, ResourceDescription res
         ModelNode valueNode = new ModelNode();
 
         String _attributesPath;
-        if (complexAttribute != null)
+        if (complexAttribute != null) {
             _attributesPath = ATTRIBUTES + ""/"" + complexAttribute + ""/"" + VALUE_TYPE;
-        else
-            _attributesPath = ATTRIBUTES;
+        } else { _attributesPath = ATTRIBUTES; }
 
         Property attribute = resourceDescription.findAttribute(_attributesPath, name);
         if (attribute != null) {
@@ -379,10 +385,10 @@ private ModelNode asValueNode(String name, Object value, ResourceDescription res
                     attributeDescription.get(EXPRESSIONS_ALLOWED).asBoolean() &&
                     Expression.isExpression(stringValue)) {
                 valueNode.setExpression(stringValue);
+
             } else {
                 ModelType type = attributeDescription.get(TYPE).asType();
                 try {
-
                     switch (type) {
                         case BIG_DECIMAL:
                             valueNode.set(BigDecimal.valueOf(Double.parseDouble(stringValue)));
@@ -406,40 +412,44 @@ private ModelNode asValueNode(String name, Object value, ResourceDescription res
                             valueNode.set(Long.valueOf(stringValue).intValue());
                             break;
                         case LIST: {
-                            ModelType valueType = attributeDescription.hasDefined(VALUE_TYPE)
-                                    ? attributeDescription.get(VALUE_TYPE).asType()
-                                    : ModelType.UNDEFINED;
-                            if (valueType == ModelType.STRING) {
-                                valueNode.clear();
-                                List l = (List) value;
-                                for (Object o : l) { valueNode.add(String.valueOf(o)); }
-                            } else {
-                                valueNode = null;
-                                logger.error(""Unsupported value type {} for attribute {} of type {}"", valueType, name,
-                                        type);
+                            ModelNode valueType = attributeDescription.get(VALUE_TYPE);
+                            switch (valueType.getType()) {
+                                case STRING:
+                                    valueNode.clear();
+                                    List l = (List) value;
+                                    for (Object o : l) { valueNode.add(String.valueOf(o)); }
+                                    break;
+                                case OBJECT:
+                                    valueNode = (ModelNode) value;
+                                    break;
+                                default:
+                                    valueNode = null;
+                                    logger.error(""Unsupported value type {} for attribute {} of type {}"",
+                                            valueType, name, type);
+                                    break;
                             }
                             break;
                         }
                         case LONG:
                             valueNode.set(Long.parseLong(stringValue));
                             break;
                         case OBJECT:
-
-                            ModelType valueType = attributeDescription.get(VALUE_TYPE).getType();
-
-                            boolean stringValueType = valueType.equals(ModelType.TYPE)
-                                    && attributeDescription.get(VALUE_TYPE).asType().equals(ModelType.STRING);
-
-                            if (stringValueType) {
-                                Map map = (Map) value;
-                                for (Object k : map.keySet()) {
-                                    valueNode.get(String.valueOf(k)).set(String.valueOf(map.get(k)));
-                                }
-                            } else if (valueType.equals(ModelType.OBJECT)) {
-                                valueNode = (ModelNode) value;
-                            } else {
-                                logger.error(""Unsupported value type {} for attribute {} of type {}"", valueType, name,
-                                        type);
+                            ModelNode valueType = attributeDescription.get(VALUE_TYPE);
+                            switch (valueType.getType()) {
+                                case STRING:
+                                    Map map = (Map) value;
+                                    for (Object k : map.keySet()) {
+                                        valueNode.get(String.valueOf(k)).set(String.valueOf(map.get(k)));
+                                    }
+                                    break;
+                                case OBJECT:
+                                    valueNode = (ModelNode) value;
+                                    break;
+                                default:
+                                    valueNode = null;
+                                    logger.error(""Unsupported value type {} for attribute {} of type {}"",
+                                            valueType, name, type);
+                                    break;
                             }
                             break;
                         case STRING:",2017-06-30T16:31:03Z,21
"@@ -16,7 +16,6 @@
 package org.jboss.hal.core.mbui.dialog;
 
 import java.util.Collections;
-import java.util.Map;
 import javax.annotation.Nullable;
 
 import com.google.common.collect.Iterables;
@@ -29,8 +28,6 @@
 import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.resources.Constants;
 
-import static org.jboss.hal.dmr.ModelDescriptionConstants.NAME;
-
 /**
  * @author Harald Pehl
  */
@@ -53,6 +50,7 @@ public interface Callback {
 
     private static final Constants CONSTANTS = GWT.create(Constants.class);
 
+    private NameItem nameItem;
     private Form<ModelNode> form;
     private Dialog dialog;
 
@@ -67,11 +65,12 @@ public AddResourceDialog(final String id, final String title, final Metadata met
     public AddResourceDialog(final String id, final String title, final Metadata metadata,
             final Iterable<String> attributes, final Callback callback) {
 
+        nameItem = new NameItem();
         ModelNodeForm.Builder<ModelNode> formBuilder = new ModelNodeForm.Builder<>(id, metadata)
-                .unboundFormItem(new NameItem(), 0)
+                .unboundFormItem(nameItem, 0)
                 .fromRequestProperties()
                 .requiredOnly()
-                .onSave((f, changedValues) -> saveForm(callback, changedValues, form.getModel()));
+                .onSave((f, changedValues) -> saveForm(callback, form.getModel()));
 
         if (!Iterables.isEmpty(attributes)) {
             formBuilder.include(attributes).unsorted();
@@ -85,7 +84,7 @@ public AddResourceDialog(final String id, final String title, final Metadata met
      * Callback#onAdd(String, ModelNode)}.
      */
     public AddResourceDialog(final String title, final Form<ModelNode> form, final Callback callback) {
-        form.setSaveCallback((f, changedValues) -> saveForm(callback, changedValues, form.getModel()));
+        form.setSaveCallback((f, changedValues) -> saveForm(callback, form.getModel()));
         init(title, form);
     }
 
@@ -100,9 +99,8 @@ private void init(final String title, final Form<ModelNode> form) {
         this.dialog.registerAttachable(form);
     }
 
-    private void saveForm(final Callback callback, final Map<String, Object> changedValues,
-            final ModelNode model) {
-        String name = String.valueOf(changedValues.remove(NAME));
+    private void saveForm(final Callback callback, final ModelNode model) {
+        String name = nameItem != null ? nameItem.getValue() : null;
         callback.onAdd(name, model);
     }
 ",2017-06-30T16:31:03Z,178
"@@ -137,6 +137,7 @@ public interface ModelDescriptionConstants {
     String DISABLED = ""disabled"";
     String DISABLED_TIME = ""disabled-time"";
     String DISCOVERY_GROUP = ""discovery-group"";
+    String DIR_CONTEXT = ""dir-context"";
     String DIVERT = ""divert"";
     String DRIVER_CLASS = ""driver-class"";
     String DRIVER_CLASS_NAME = ""driver-class-name"";
@@ -240,6 +241,7 @@ public interface ModelDescriptionConstants {
     String KILL = ""kill"";
 
     String LAUNCH_TYPE = ""launch-type"";
+    String LDAP_KEY_STORE = ""ldap-key-store"";
     String LEVEL = ""level"";
     String LICENSE = ""license"";
     String LINES = ""lines"";
@@ -284,6 +286,10 @@ public interface ModelDescriptionConstants {
     String MULTICAST_PORT = ""multicast-port"";
 
     String NAME = ""name"";
+    String NEW_ITEM_ATTRIBUTES = ""new-item-attributes"";
+    String NEW_ITEM_PATH = ""new-item-path"";
+    String NEW_ITEM_RDN = ""new-item-rdn"";
+    String NEW_ITEM_TEMPLATE = ""new-item-template"";
     String NILLABLE = ""nillable"";
     String NONE = ""none"";
     String NOT = ""not"";
@@ -388,7 +394,7 @@ public interface ModelDescriptionConstants {
 
     String SASL_PROTOCOL = ""sasl-protocol"";
     String SCRIPT = ""script"";
-    //String SECURITY = ""security-elytron"";
+    String SEARCH_PATH = ""search-path"";
     String SECURE_SOCKET_BINDING = ""secure-socket-binding"";
     String SECURITY = ""security"";
     String SECURITY_DOMAIN = ""security-domain"";",2017-06-30T16:31:03Z,109
"@@ -78,6 +78,11 @@ public Metadata(final AddressTemplate template, final Supplier<SecurityContext>
         this.capabilities = capabilities;
     }
 
+    @JsIgnore
+    public Metadata forComplexAttribute(String name) {
+        return forComplexAttribute(name, false);
+    }
+
     @JsIgnore
     public Metadata forComplexAttribute(String name, boolean prefixComplexAttribute) {
         ModelNode payload = new ModelNode();
@@ -86,17 +91,16 @@ public Metadata forComplexAttribute(String name, boolean prefixComplexAttribute)
         Property complexAttribute = description.findAttribute(ATTRIBUTES, name);
         if (complexAttribute != null && complexAttribute.getValue().hasDefined(VALUE_TYPE)) {
             complexAttribute.getValue().get(VALUE_TYPE).asPropertyList().forEach(nestedProperty -> {
-                // The nested name must *always* use the dot notation,
+                // The nested name is *always* just the nested property name,
                 // since it's used when building the DMR operations
-                String nestedName = name + ""."" + nestedProperty.getName();
-                // The name which is used for the label can be prefixed with the complex attribute name
-                // (if prefixComplexAttribute == true), is stored as an artificial attribute and
-                // picked up by LabelBuilder.label(Property)
-                String label = prefixComplexAttribute
-                        ? name + ""-"" + nestedProperty.getName()
-                        : nestedProperty.getName();
+                String nestedName = nestedProperty.getName();
                 ModelNode nestedDescription = nestedProperty.getValue();
-                nestedDescription.get(HAL_LABEL).set(label);
+                // The name which is used for the label can be prefixed with the complex attribute name.
+                // If prefixComplexAttribute == true), it is stored as an artificial attribute and picked
+                // up by LabelBuilder.label(Property)
+                if (prefixComplexAttribute) {
+                    nestedDescription.get(HAL_LABEL).set(name + ""-"" + nestedProperty.getName());
+                }
                 payload.get(ATTRIBUTES).get(nestedName).set(nestedDescription);
             });
         }",2017-06-30T16:31:03Z,179
"@@ -179,81 +179,72 @@ public interface Ids {
     String EJB_APPLICATION_SECURITY_DOMAIN_TABLE = build(EJB_APPLICATION_SECURITY_DOMAIN, TABLE_SUFFIX);
 
     String ELYTRON = ""elytron"";
+    String ELYTRON_AGGREGATE_HTTP_SERVER_MECHANISM_FACTORY = build(ELYTRON, ""aggregate-http-server-mechanism-factory"");
+    String ELYTRON_AGGREGATE_PRINCIPAL_TRANSFORMER = build(ELYTRON, ""aggregate-principal-transformer"");
+    String ELYTRON_AGGREGATE_PROVIDERS = build(ELYTRON, ""aggregate-providers"");
     String ELYTRON_AGGREGATE_REALM = build(ELYTRON, ""aggregate-realm"");
+    String ELYTRON_AGGREGATE_SASL_SERVER_FACTORY = build(ELYTRON, ""aggregate-sasl-server-factory"");
+    String ELYTRON_AGGREGATE_SECURITY_EVENT_LISTENER = build(ELYTRON, ""aggregate-security-event-listener"");
+    String ELYTRON_AUTHENTICATION_CONFIGURATION = build(ELYTRON, ""authentication-configuration"");
+    String ELYTRON_AUTHENTICATION_CONTEXT = build(ELYTRON, ""authentication-context"");
     String ELYTRON_CACHING_REALM = build(ELYTRON, ""caching-realm"");
+    String ELYTRON_CHAINED_PRINCIPAL_TRANSFORMER = build(ELYTRON, ""chained-principal-transformer"");
+    String ELYTRON_CLIENT_SSL_CONTEXT = build(ELYTRON, ""client-ssl-context"");
+    String ELYTRON_CONFIGURABLE_HTTP_SERVER_MECHANISM_FACTORY = build(ELYTRON,
+            ""configurable-http-server-mechanism-factory"");
+    String ELYTRON_CONFIGURABLE_SASL_SERVER_FACTORY = build(ELYTRON, ""configurable-sasl-server-factory"");
+    String ELYTRON_CONSTANT_PRINCIPAL_TRANSFORMER = build(ELYTRON, ""constant-principal-transformer"");
+    String ELYTRON_CONSTANT_REALM_MAPPER = build(ELYTRON, ""constant-realm-mapper"");
+    String ELYTRON_CREDENTIAL_STORE = build(ELYTRON, ""credential-store"");
+    String ELYTRON_CUSTOM_CREDENTIAL_SECURITY_FACTORY = build(ELYTRON, ""custom-credential-security-factory"");
     String ELYTRON_CUSTOM_MODIFIABLE_REALM = build(ELYTRON, ""custom-modifiable-realm"");
+    String ELYTRON_CUSTOM_PRINCIPAL_TRANSFORMER = build(ELYTRON, ""custom-principal-transformer"");
     String ELYTRON_CUSTOM_REALM = build(ELYTRON, ""custom-realm"");
+    String ELYTRON_CUSTOM_REALM_MAPPER = build(ELYTRON, ""custom-realm-mapper"");
+    String ELYTRON_DIR_CONTEXT = build(ELYTRON, ""dir-context"");
     String ELYTRON_FILESYSTEM_REALM = build(ELYTRON, ""filesystem-realm"");
+    String ELYTRON_FILTERING_KEY_STORE = build(ELYTRON, ""filtering-key-store"");
+    String ELYTRON_HTTP_AUTHENTICATION_FACTORY = build(ELYTRON, ""http-authentication-factory"");
     String ELYTRON_IDENTITY_REALM = build(ELYTRON, ""identity-realm"");
     String ELYTRON_JDBC_REALM = build(ELYTRON, ""jdbc-realm"");
+    String ELYTRON_KERBEROS_SECURITY_FACTORY = build(ELYTRON, ""kerberos-security-factory"");
+    String ELYTRON_KEY_MANAGER = build(ELYTRON, ""key-manager"");
+    String ELYTRON_KEY_STORE = build(ELYTRON, ""key-store"");
     String ELYTRON_KEYSTORE_REALM = build(ELYTRON, ""keystore-realm"");
+    String ELYTRON_LDAP_KEY_STORE = build(ELYTRON, ""ldap-key-store"");
+    String ELYTRON_LDAP_KEY_STORE_ADD = build(ELYTRON_LDAP_KEY_STORE, ADD_SUFFIX);
+    String ELYTRON_LDAP_KEY_STORE_ATTRIBUTES_FORM = build(ELYTRON_LDAP_KEY_STORE, ""attributes"", FORM_SUFFIX);
+    String ELYTRON_LDAP_KEY_STORE_ATTRIBUTES_TAB = build(ELYTRON_LDAP_KEY_STORE, ""attributes"", TAB_SUFFIX);
+    String ELYTRON_LDAP_KEY_STORE_NEW_ITEM_TEMPLATE_FORM = build(ELYTRON_LDAP_KEY_STORE, ""new-item-template"",
+            FORM_SUFFIX);
+    String ELYTRON_LDAP_KEY_STORE_NEW_ITEM_TEMPLATE_TAB = build(ELYTRON_LDAP_KEY_STORE, ""new-item-template"",
+            TAB_SUFFIX);
+    String ELYTRON_LDAP_KEY_STORE_TABLE = build(ELYTRON_LDAP_KEY_STORE, FORM_SUFFIX);
     String ELYTRON_LDAP_REALM = build(ELYTRON, ""ldap-realm"");
-    String ELYTRON_PROPERTIES_REALM = build(ELYTRON, ""properties-realm"");
-    String ELYTRON_TOKEN_REALM = build(ELYTRON, ""token-realm"");
-    String ELYTRON_CONSTANT_REALM_MAPPER = build(ELYTRON, ""constant-realm-mapper"");
-    String ELYTRON_CUSTOM_REALM_MAPPER = build(ELYTRON, ""custom-realm-mapper"");
     String ELYTRON_MAPPED_REGEX_REALM_MAPPER = build(ELYTRON, ""mapped-regex-realm-mapper"");
-    String ELYTRON_SIMPLE_REGEX_REALM_MAPPER = build(ELYTRON, ""single-regex-realm-mapper"");
-
-    String ELYTRON_CREDENTIAL_STORE = build(ELYTRON, ""credential-store"");
-    String ELYTRON_FILTERING_KEY_STORE = build(ELYTRON, ""filtering-key-store"");
-    String ELYTRON_KEY_STORE = build(ELYTRON, ""key-store"");
-    String ELYTRON_LDAP_KEY_STORE = build(ELYTRON, ""ldap-key-store"");
-    String ELYTRON_AGGREGATE_PROVIDERS = build(ELYTRON,""aggregate-providers"");
-    String ELYTRON_CLIENT_SSL_CONTEXT = build(ELYTRON, ""client-ssl-context"");
-    String ELYTRON_KEY_MANAGER = build(ELYTRON, ""key-manager"");
+    String ELYTRON_MECHANISM_PROVIDER_FILTERING_SASL_SERVER_FACTORY = build(ELYTRON,
+            ""mechanism-provider-filtering-sasl-server-factory"");
+    String ELYTRON_POLICY = build(ELYTRON, ""policy"");
+    String ELYTRON_PROPERTIES_REALM = build(ELYTRON, ""properties-realm"");
+    String ELYTRON_PROVIDER_HTTP_SERVER_MECHANISM_FACTORY = build(ELYTRON, ""provider-http-server-mechanism-factory"");
     String ELYTRON_PROVIDER_LOADER = build(ELYTRON, ""provider-loader"");
-    String ELYTRON_SERVER_SSL_CONTEXT = build(ELYTRON, ""server-ssl-context"");
+    String ELYTRON_PROVIDER_SASL_SERVER_FACTORY = build(ELYTRON, ""provider-sasl-server-factory"");
+    String ELYTRON_REGEX_PRINCIPAL_TRANSFORMER = build(ELYTRON, ""regex-principal-transformer"");
+    String ELYTRON_REGEX_VALIDATING_PRINCIPAL_TRANSFORMER = build(ELYTRON, ""regex-validating-principal-transformer"");
+    String ELYTRON_SASL_AUTHENTICATION_FACTORY = build(ELYTRON, ""sasl-authentication-factory"");
     String ELYTRON_SECURITY_DOMAIN = build(ELYTRON, ""security-domain"");
+    String ELYTRON_SERVER_SSL_CONTEXT = build(ELYTRON, ""server-ssl-context"");
+    String ELYTRON_SERVICE_LOADER_HTTP_SERVER_MECHANISM_FACTORY = build(ELYTRON,
+            ""service-loader-http-server-mechanism-factory"");
+    String ELYTRON_SERVICE_LOADER_SASL_SERVER_FACTORY = build(ELYTRON, ""service-loader-sasl-server-factory"");
+    String ELYTRON_SIMPLE_REGEX_REALM_MAPPER = build(ELYTRON, ""single-regex-realm-mapper"");
+    String ELYTRON_TOKEN_REALM = build(ELYTRON, ""token-realm"");
     String ELYTRON_TRUST_MANAGER = build(ELYTRON, ""trust-manager"");
-    String ELYTRON_AUTHENTICATION_CONTEXT = build(ELYTRON, ""authentication-context"");
-    String ELYTRON_AUTHENTICATION_CONFIGURATION = build(ELYTRON, ""authentication-configuration"");
-    String ELYTRON_DIR_CONTEXT = build(ELYTRON, ""dir-context"");
-    String ELYTRON_POLICY = build(ELYTRON, ""policy"");
-    String ELYTRON_AGGREGATE_SECURITY_EVENT_LISTENER = build(ELYTRON, ""aggregate-security-event-listener"");
 
-    String ELYTRON_AGGREGATE_HTTP_SERVER_MECHANISM_FACTORY  = build(ELYTRON, ""aggregate-http-server-mechanism-factory"");
-    String ELYTRON_AGGREGATE_SASL_SERVER_FACTORY  = build(ELYTRON, ""aggregate-sasl-server-factory"");
-    String ELYTRON_CONFIGURABLE_HTTP_SERVER_MECHANISM_FACTORY  = build(ELYTRON, ""configurable-http-server-mechanism-factory"");
-    String ELYTRON_CONFIGURABLE_SASL_SERVER_FACTORY  = build(ELYTRON, ""configurable-sasl-server-factory"");
-    String ELYTRON_CUSTOM_CREDENTIAL_SECURITY_FACTORY  = build(ELYTRON, ""custom-credential-security-factory"");
-    String ELYTRON_HTTP_AUTHENTICATION_FACTORY  = build(ELYTRON, ""http-authentication-factory"");
-    String ELYTRON_KERBEROS_SECURITY_FACTORY  = build(ELYTRON, ""kerberos-security-factory"");
-    String ELYTRON_MECHANISM_PROVIDER_FILTERING_SASL_SERVER_FACTORY  = build(ELYTRON, ""mechanism-provider-filtering-sasl-server-factory"");
-    String ELYTRON_PROVIDER_HTTP_SERVER_MECHANISM_FACTORY  = build(ELYTRON, ""provider-http-server-mechanism-factory"");
-    String ELYTRON_PROVIDER_SASL_SERVER_FACTORY  = build(ELYTRON, ""provider-sasl-server-factory"");
-    String ELYTRON_SASL_AUTHENTICATION_FACTORY  = build(ELYTRON, ""sasl-authentication-factory"");
-    String ELYTRON_SERVICE_LOADER_HTTP_SERVER_MECHANISM_FACTORY  = build(ELYTRON, ""service-loader-http-server-mechanism-factory"");
-    String ELYTRON_SERVICE_LOADER_SASL_SERVER_FACTORY  = build(ELYTRON, ""service-loader-sasl-server-factory"");
-    String ELYTRON_AGGREGATE_PRINCIPAL_TRANSFORMER  = build(ELYTRON, ""aggregate-principal-transformer"");
-    String ELYTRON_CHAINED_PRINCIPAL_TRANSFORMER  = build(ELYTRON, ""chained-principal-transformer"");
-    String ELYTRON_CONSTANT_PRINCIPAL_TRANSFORMER  = build(ELYTRON, ""constant-principal-transformer"");
-    String ELYTRON_CUSTOM_PRINCIPAL_TRANSFORMER  = build(ELYTRON, ""custom-principal-transformer"");
-    String ELYTRON_REGEX_PRINCIPAL_TRANSFORMER  = build(ELYTRON, ""regex-principal-transformer"");
-    String ELYTRON_REGEX_VALIDATING_PRINCIPAL_TRANSFORMER  = build(ELYTRON, ""regex-validating-principal-transformer"");
-
-    String ELYTRON_ADD_PREFIX_ROLE_MAPPER  = build(ELYTRON, ""add-prefix-role-mapper"");
-    String ELYTRON_ADD_SUFFIX_ROLE_MAPPER  = build(ELYTRON, ""add-suffix-role-mapper"");
-    String ELYTRON_AGGREGATE_PRINCIPAL_DECODER  = build(ELYTRON, ""aggregate-principal-decoder"");
-    String ELYTRON_AGGREGATE_ROLE_MAPPER  = build(ELYTRON, ""aggregate-role-mapper"");
-    String ELYTRON_CONCATENATING_PRINCIPAL_DECODER  = build(ELYTRON, ""concatenating-principal-decoder"");
-    String ELYTRON_CONSTANT_PERMISSION_MAPPER  = build(ELYTRON, ""constant-permission-mapper"");
-    String ELYTRON_CONSTANT_PRINCIPAL_DECODER = build(ELYTRON, ""constant-principal-decoder"");
-    String ELYTRON_CONSTANT_ROLE_MAPPER  = build(ELYTRON, ""constant-role-mapper"");
-    String ELYTRON_CUSTOM_PERMISSION_MAPPER  = build(ELYTRON, ""custom-permission-mapper"");
-    String ELYTRON_CUSTOM_PRINCIPAL_DECODER  = build(ELYTRON, ""custom-principal-decoder"");
-    String ELYTRON_CUSTOM_ROLE_DECODER = build(ELYTRON, ""custom-role-decoder"");
-    String ELYTRON_CUSTOM_ROLE_MAPPER  = build(ELYTRON, ""custom-role-mapper"");
-    String ELYTRON_LOGICAL_PERMISSION_MAPPER  = build(ELYTRON, ""logical-permission-mapper"");
-    String ELYTRON_LOGICAL_ROLE_MAPPER  = build(ELYTRON, ""logical-role-mapper"");
-    String ELYTRON_SIMPLE_PERMISSION_MAPPER  = build(ELYTRON, ""simple-permission-mapper"");
-    String ELYTRON_SIMPLE_ROLE_DECODER  = build(ELYTRON, ""simple-role-decoder"");
-    String ELYTRON_X500_ATTRIBUTE_PRINCIPAL_DECODER  = build(ELYTRON, ""x500-attribute-principal-decoder"");
-
-    String ELYTRON_FILE_AUDIT_LOG  = build(ELYTRON, ""file-audit-log"");
-    String ELYTRON_SIZE_AUDIT_LOG  = build(ELYTRON, ""size-rotating-file-audit-log"");
-    String ELYTRON_PERIODIC_AUDIT_LOG  = build(ELYTRON, ""periodic-rotating-file-audit-log"");
-    String ELYTRON_SYSLOG_AUDIT_LOG  = build(ELYTRON, ""syslog-audit-log"");
+    String ELYTRON_FILE_AUDIT_LOG = build(ELYTRON, ""file-audit-log"");
+    String ELYTRON_SIZE_AUDIT_LOG = build(ELYTRON, ""size-rotating-file-audit-log"");
+    String ELYTRON_PERIODIC_AUDIT_LOG = build(ELYTRON, ""periodic-rotating-file-audit-log"");
+    String ELYTRON_SYSLOG_AUDIT_LOG = build(ELYTRON, ""syslog-audit-log"");
 
     String ENDPOINT = ""endpoint"";
     String ENDPOINT_ADD = build(ENDPOINT, ""add"");",2017-06-30T16:31:03Z,111
"@@ -147,6 +147,8 @@ public interface Names {
     String JMS_TOPIC = ""JMS Topic"";
     String JSP = ""JSP"";
 
+    String LDAP_KEY_STORE = ""LDAP Key Store"";
+    String LDAP_KEY_STORES = ""LDAP Key Stores"";
     String LISTENER = ""Listener"";
     String LIVE_ONLY = ""Live Only"";
     String LOCAL_CACHE = ""Local Cache"";
@@ -175,6 +177,7 @@ public interface Names {
     String MODULE = ""Module"";
 
     String NAME = ""Name"";
+    String NEW_ITEM_TEMPLATE = ""New Item Template"";
     String NOT_AVAILABLE = ""n/a"";
     String NYI = ""not yet implemented"";
 ",2017-06-30T16:31:03Z,112
"@@ -134,7 +134,7 @@ modifyResourceTitle=Edit {0}
 modifySingleResourceSuccess=<strong>{0}</strong> successfully modified.
 moreThanOneCacheStore=There&#39;s more than one store defined for this cache.
 moreThanOneCacheStoreDetails=Only the first one will be available in regular mode. Use the expert mode to review and remove the other cache stores.
-newItemAttributesHint=Add new mappings as <em>name=value1|value2|...</em> pairs. Press <abbr class=""key"" title=""RETURN"">&crarr;</abbr> to add and <abbr class=""key"" title=""BACKSPACE"">&#x232B</abbr> to remove them.
+newItemAttributesHint=Add new mappings as <em>name=value1:value2</em> pairs. Press <abbr class=""key"" title=""RETURN"">&crarr;</abbr> to add and <abbr class=""key"" title=""BACKSPACE"">&#x232B</abbr> to remove them.
 noBootErrors=No boot errors found.
 noChanges=No changes were made. Resource was not saved.
 noContent=No content specified. Please select a file to upload.",2017-06-30T16:31:03Z,94
"@@ -35,7 +35,10 @@
 import org.jboss.hal.core.finder.FinderContext;
 import org.jboss.hal.core.finder.FinderContextEvent;
 import org.jboss.hal.core.finder.FinderContextEvent.FinderContextHandler;
+import org.jboss.hal.core.modelbrowser.ModelBrowserAddressEvent;
+import org.jboss.hal.core.modelbrowser.ModelBrowserAddressEvent.ModelBrowserAddressHandler;
 import org.jboss.hal.core.mvp.HasPresenter;
+import org.jboss.hal.dmr.model.ResourceAddress;
 import org.jboss.hal.spi.Message;
 import org.jboss.hal.spi.MessageEvent;
 import org.jboss.hal.spi.MessageEvent.MessageHandler;
@@ -48,7 +51,7 @@
  * @author Harald Pehl
  */
 public class HeaderPresenter extends PresenterWidget<HeaderPresenter.MyView>
-        implements IsElement, MessageHandler, FinderContextHandler {
+        implements IsElement, MessageHandler, FinderContextHandler, ModelBrowserAddressHandler {
 
     // @formatter:off
     public interface MyView extends View, IsElement, HasPresenter<HeaderPresenter> {
@@ -57,8 +60,9 @@ public interface MyView extends View, IsElement, HasPresenter<HeaderPresenter> {
         void showMessage(Message message);
         void tlcMode();
         void applicationMode();
-        void updatePath(FinderContext finderContext);
+        void updateBack(FinderContext finderContext);
         void updateBreadcrumb(FinderContext finderContext);
+        void updateBreadcrumb(ResourceAddress address);
     }
     // @formatter:on
 
@@ -92,6 +96,7 @@ protected void onBind() {
         super.onBind();
         registerHandler(getEventBus().addHandler(MessageEvent.getType(), this));
         registerHandler(getEventBus().addHandler(FinderContextEvent.getType(), this));
+        registerHandler(getEventBus().addHandler(ModelBrowserAddressEvent.getType(), this));
         getView().setPresenter(this);
         getView().update(environment, endpoints, user);
     }
@@ -131,10 +136,15 @@ public void onMessage(final MessageEvent event) {
 
     @Override
     public void onFinderContext(final FinderContextEvent event) {
-        getView().updatePath(event.getFinderContext());
+        getView().updateBack(event.getFinderContext());
         getView().updateBreadcrumb(event.getFinderContext());
     }
 
+    @Override
+    public void onModelBrowserAddress(final ModelBrowserAddressEvent event) {
+        getView().updateBreadcrumb(event.getAddress());
+    }
+
     public void tlcMode() {
         getView().tlcMode();
     }",2016-02-23T16:33:10Z,95
"@@ -39,8 +39,11 @@
 import org.jboss.hal.core.finder.Breadcrumb;
 import org.jboss.hal.core.finder.FinderContext;
 import org.jboss.hal.core.finder.FinderPath;
+import org.jboss.hal.dmr.Property;
+import org.jboss.hal.dmr.model.ResourceAddress;
 import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
 import org.jboss.hal.spi.Message;
 import org.slf4j.Logger;
@@ -204,7 +207,7 @@ public void applicationMode() {
     }
 
     @Override
-    public void updatePath(final FinderContext finderContext) {
+    public void updateBack(final FinderContext finderContext) {
         String token = finderContext.getToken();
         if (token != null) {
             String historyToken = historyToken(token, finderContext.getPath());
@@ -249,6 +252,33 @@ public void updateBreadcrumb(final FinderContext finderContext) {
         }
     }
 
+    @Override
+    public void updateBreadcrumb(final ResourceAddress address) {
+        while (breadcrumbs.getLastChild() != null && breadcrumbs.getChildren().getLength() > 1) {
+            breadcrumbs.removeChild(breadcrumbs.getLastChild());
+        }
+
+        if (address == null) {
+            // deselection
+            breadcrumbs.appendChild(
+                    new Elements.Builder().li().innerText(resources().constants().nothingSelected()).build());
+
+        } else {
+            if (address == ResourceAddress.ROOT) {
+                breadcrumbs.appendChild(new Elements.Builder().li().innerText(Names.MANAGEMENT_MODEL).build());
+
+            } else {
+                for (Property property : address.asPropertyList()) {
+                    Element li = new Elements.Builder().li()
+                            .span().css(key).innerText(property.getName()).end()
+                            .span().css(value).innerText(property.getValue().asString()).end()
+                            .end().build();
+                    breadcrumbs.appendChild(li);
+                }
+            }
+        }
+    }
+
     @EventHandler(element = ""logoLink"", on = click)
     void onLogo() {
         presenter.goTo(NameTokens.HOMEPAGE);",2016-02-23T16:33:10Z,98
"@@ -19,12 +19,14 @@
  * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
  */
-package org.jboss.hal.core.mbui.form;
+package org.jboss.hal.ballroom;
 
 import com.google.common.base.Joiner;
 import com.google.gwt.core.client.GWT;
-import org.jboss.hal.ballroom.form.FormItem;
+import com.google.gwt.safehtml.shared.SafeHtml;
+import com.google.gwt.safehtml.shared.SafeHtmlBuilder;
 import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.Property;
 import org.jboss.hal.resources.Constants;
 import org.jboss.hal.resources.Messages;
 import org.jboss.hal.resources.Names;
@@ -34,9 +36,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.jboss.hal.core.mbui.form.HelpTextBuilder.RestartMode.*;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.DESCRIPTION;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.UNIT;
+import static org.jboss.hal.ballroom.HelpTextBuilder.RestartMode.*;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.dmr.dispatch.ProcessStateProcessor.RESTART_REQUIRED;
 
 /**
@@ -47,7 +48,7 @@
  * TODO Add info about capabilities & requirements
  * TODO Add info about ""requires""
  */
-class HelpTextBuilder {
+public class HelpTextBuilder {
 
     enum RestartMode {
         ALL_SERVICES(CONSTANTS.restartAllServices()),
@@ -72,39 +73,43 @@ public String description() {
     private static final Messages MESSAGES = GWT.create(Messages.class);
     private static final Logger logger = LoggerFactory.getLogger(HelpTextBuilder.class);
 
-    String helpText(FormItem formItem, ModelNode description) {
-        StringBuilder help = new StringBuilder();
-        String desc = description.get(DESCRIPTION).asString();
+    public SafeHtml helpText(Property property) {
+        SafeHtmlBuilder help = new SafeHtmlBuilder();
+        ModelNode attribute = property.getValue();
+        String desc = attribute.get(DESCRIPTION).asString();
+        boolean required = attribute.hasDefined(NILLABLE) && !attribute.get(NILLABLE).asBoolean();
+        boolean supportsExpression = attribute.hasDefined(EXPRESSIONS_ALLOWED) && attribute.get(EXPRESSIONS_ALLOWED)
+                .asBoolean();
         if (!desc.endsWith(""."")) {
             desc = desc + ""."";
         }
-        help.append(desc);
+        help.appendEscaped(desc);
 
-        RestartMode restartMode = restartRequired(description);
+        RestartMode restartMode = restartRequired(attribute);
         if (restartMode == UNKNOWN) {
-            logger.warn(""Unknown restart mode in attribute description for '{}': '{}'"", formItem.getName(), //NON-NLS
-                    description.get(RESTART_REQUIRED).asString());
+            logger.warn(""Unknown restart mode in attribute description for '{}': '{}'"", property.getName(), //NON-NLS
+                    attribute.get(RESTART_REQUIRED).asString());
         }
         boolean showRestartHelp = (restartMode == ALL_SERVICES || restartMode == JVM || restartMode == RESOURCE_SERVICES);
 
         List<String> textModules = new ArrayList<>();
-        if (formItem.isRequired()) {
+        if (required) {
             textModules.add(CONSTANTS.requiredField());
         }
-        if (formItem.supportsExpressions()) {
+        if (supportsExpression) {
             textModules.add(CONSTANTS.supportsExpressions());
         }
-        if (description.hasDefined(UNIT)) {
-            textModules.add(MESSAGES.unit(description.get(UNIT).asString().toLowerCase()));
+        if (attribute.hasDefined(UNIT)) {
+            textModules.add(MESSAGES.unit(attribute.get(UNIT).asString().toLowerCase()));
         }
         if (showRestartHelp) {
             textModules.add(restartMode.description());
         }
         if (!textModules.isEmpty()) {
-            help.append("" "").append(Joiner.on("". "").join(textModules)).append(""."");
+            help.appendHtmlConstant(""<br/>"").appendEscaped(Joiner.on("". "").join(textModules)).append('.');
         }
 
-        return help.toString();
+        return help.toSafeHtml();
     }
 
     @SuppressWarnings(""HardCodedStringLiteral"")",2016-02-23T16:33:10Z,53
"@@ -25,6 +25,7 @@
 import com.google.common.collect.Lists;
 import com.google.gwt.core.client.GWT;
 import com.google.gwt.core.client.Scheduler;
+import com.google.gwt.safehtml.shared.SafeHtml;
 import elemental.client.Browser;
 import elemental.dom.Element;
 import elemental.events.EventListener;
@@ -35,7 +36,6 @@
 import elemental.html.UListElement;
 import org.jboss.gwt.elemento.core.Elements;
 import org.jboss.gwt.elemento.core.LazyElement;
-import org.jboss.hal.ballroom.Attachable;
 import org.jboss.hal.ballroom.IdBuilder;
 import org.jboss.hal.meta.security.SecurityContext;
 import org.jboss.hal.meta.security.SecurityContextAware;
@@ -74,7 +74,7 @@ public class DefaultForm<T> extends LazyElement implements Form<T>, SecurityCont
     private final DataMapping<T> dataMapping;
     private final LinkedHashMap<State, Element> panels;
     private final LinkedHashMap<String, FormItem> formItems;
-    private final LinkedHashMap<String, String> helpTexts;
+    private final LinkedHashMap<String, SafeHtml> helpTexts;
     private final List<FormValidation> formValidations;
 
     private T model;
@@ -120,7 +120,7 @@ protected void addFormItem(FormItem formItem, FormItem... formItems) {
         }
     }
 
-    protected void addHelp(String label, String description) {
+    protected void addHelp(String label, SafeHtml description) {
         helpTexts.put(label, description);
     }
 ",2016-02-23T16:33:10Z,64
"@@ -22,6 +22,7 @@
 package org.jboss.hal.ballroom.form;
 
 import com.google.gwt.core.client.GWT;
+import com.google.gwt.safehtml.shared.SafeHtml;
 import elemental.dom.Element;
 import elemental.events.EventListener;
 import org.jboss.gwt.elemento.core.Elements;
@@ -35,7 +36,6 @@
 import java.util.LinkedHashMap;
 import java.util.Map;
 
-import static com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant;
 import static org.jboss.gwt.elemento.core.EventType.click;
 import static org.jboss.hal.ballroom.form.Form.Operation.EDIT;
 import static org.jboss.hal.ballroom.form.Form.Operation.RESET;
@@ -51,7 +51,7 @@ class FormLinks<T> implements IsElement {
     private static final Constants CONSTANTS = GWT.create(Constants.class);
 
     private final StateMachine stateMachine;
-    private final LinkedHashMap<String, String> helpTexts;
+    private final LinkedHashMap<String, SafeHtml> helpTexts;
 
     private final Element root;
     private Element editLink;
@@ -60,7 +60,7 @@ class FormLinks<T> implements IsElement {
 
     FormLinks(final String formId,
             final StateMachine stateMachine,
-            final LinkedHashMap<String, String> helpTexts,
+            final LinkedHashMap<String, SafeHtml> helpTexts,
             final EventListener onEdit,
             final EventListener onReset) {
 
@@ -108,7 +108,7 @@ class FormLinks<T> implements IsElement {
                     .end()
                 .end().build();
             // @formatter:on
-            for (Map.Entry<String, String> entry : helpTexts.entrySet()) {
+            for (Map.Entry<String, SafeHtml> entry : helpTexts.entrySet()) {
                 helpContent.appendChild(help(entry.getKey(), entry.getValue()));
             }
             links.appendChild(helpLink);
@@ -129,7 +129,7 @@ private Element link(String text, String css, EventListener onclick) {
         // @formatter:on
     }
 
-    private Element help(String label, String description) {
+    private Element help(String label, SafeHtml description) {
         // @formatter:off
         return new Elements.Builder()
             .div().css(formGroup)
@@ -138,7 +138,7 @@ private Element help(String label, String description) {
                 .end()
                 .div().css(column(inputColumns))
                     .p().css(formControlStatic)
-                        .innerHtml(fromSafeConstant(description))
+                        .innerHtml(description)
                     .end()
                 .end()
             .end().build();",2016-02-23T16:33:10Z,180
"@@ -49,11 +49,11 @@
 /**
  * @author Harald Pehl
  */
-public class DefaultFormItemProvider implements FormItemProvider {
+class DefaultFormItemProvider implements FormItemProvider {
 
     private final LabelBuilder labelBuilder;
 
-    public DefaultFormItemProvider() {labelBuilder = new LabelBuilder();}
+    DefaultFormItemProvider() {labelBuilder = new LabelBuilder();}
 
     @Override
     public FormItem<?> createFrom(final Property attributeDescription) {
@@ -62,8 +62,9 @@ public FormItem<?> createFrom(final Property attributeDescription) {
         String name = attributeDescription.getName();
         String label = labelBuilder.label(attributeDescription);
         ModelNode modelNode = attributeDescription.getValue();
-        boolean required = !modelNode.get(NILLABLE).asBoolean(true);
-        boolean expressionAllowed = modelNode.get(EXPRESSION_ALLOWED).asBoolean(false);
+        boolean required = modelNode.hasDefined(NILLABLE) && !modelNode.get(NILLABLE).asBoolean();
+        boolean expressionAllowed = modelNode.hasDefined(EXPRESSIONS_ALLOWED) && modelNode.get(EXPRESSIONS_ALLOWED)
+                .asBoolean();
         boolean runtime = modelNode.hasDefined(STORAGE) && RUNTIME.equals(modelNode.get(STORAGE).asString());
         boolean readOnly = modelNode.hasDefined(ACCESS_TYPE) && READ_ONLY.equals(modelNode.get(ACCESS_TYPE).asString());
         String unit = modelNode.hasDefined(UNIT) ? modelNode.get(UNIT).asString() : null;",2016-02-23T16:33:10Z,101
"@@ -24,6 +24,9 @@
 import com.google.common.base.Joiner;
 import com.google.common.collect.FluentIterable;
 import com.google.common.collect.Lists;
+import com.google.gwt.safehtml.shared.SafeHtml;
+import org.jboss.hal.ballroom.HelpTextBuilder;
+import org.jboss.hal.ballroom.LabelBuilder;
 import org.jboss.hal.ballroom.form.AddOnlyStateMachine;
 import org.jboss.hal.ballroom.form.DataMapping;
 import org.jboss.hal.ballroom.form.DefaultForm;
@@ -32,7 +35,6 @@
 import org.jboss.hal.ballroom.form.FormItemProvider;
 import org.jboss.hal.ballroom.form.StateMachine;
 import org.jboss.hal.ballroom.form.ViewOnlyStateMachine;
-import org.jboss.hal.ballroom.LabelBuilder;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.ModelNodeHelper;
 import org.jboss.hal.dmr.Property;
@@ -254,7 +256,7 @@ private ModelNodeForm(final Builder<T> builder) {
             if (formItem != null) {
                 addFormItem(formItem);
                 if (attribute.hasDefined(DESCRIPTION)) {
-                    String helpText = helpTextBuilder.helpText(formItem, attribute);
+                    SafeHtml helpText = helpTextBuilder.helpText(property);
                     addHelp(labelBuilder.label(property), helpText);
                 }
             } else {",2016-02-23T16:33:10Z,60
"@@ -27,6 +27,7 @@
 import elemental.dom.Element;
 import org.jboss.gwt.elemento.core.Elements;
 import org.jboss.gwt.elemento.core.IsElement;
+import org.jboss.hal.ballroom.HelpTextBuilder;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Property;
 import org.jboss.hal.resources.CSS;
@@ -47,6 +48,7 @@ class AttributesTable implements IsElement {
 
     AttributesTable(final List<Property> attributes, final Resources resources) {
 
+        HelpTextBuilder helpTextBuilder = new HelpTextBuilder();
         Elements.Builder builder = new Elements.Builder().table()
                 .css(table, tableBordered, tableStriped, CSS.attributes)
                 .thead()
@@ -62,7 +64,7 @@ class AttributesTable implements IsElement {
         for (Property property : Ordering.natural().onResultOf(Property::getName).sortedCopy(attributes)) {
             ModelNode attribute = property.getValue();
             boolean required = attribute.hasDefined(NILLABLE) && !attribute.get(NILLABLE).asBoolean();
-            String description = attribute.hasDefined(DESCRIPTION) ? attribute.get(DESCRIPTION).asString() : null;
+            String description = helpTextBuilder.helpText(property);
 
             builder.tr();
 ",2016-02-23T16:33:10Z,181
"@@ -22,6 +22,7 @@
 package org.jboss.hal.core.modelbrowser;
 
 import com.google.gwt.user.client.rpc.AsyncCallback;
+import com.google.web.bindery.event.shared.EventBus;
 import elemental.client.Browser;
 import elemental.dom.Element;
 import org.jboss.gwt.elemento.core.Elements;
@@ -60,6 +61,7 @@
 
 import static elemental.css.CSSStyleDeclaration.Unit.PX;
 import static java.util.Collections.singleton;
+import static org.jboss.gwt.elemento.core.EventType.click;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.PROFILE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.SERVER_GROUP;
 import static org.jboss.hal.meta.StatementContext.Key.ANY_GROUP;
@@ -82,6 +84,7 @@ public class ModelBrowser implements HasElements, SecurityContextAware {
     private final SecurityFramework securityFramework;
     private final ResourceDescriptions resourceDescriptions;
     private final Dispatcher dispatcher;
+    private final EventBus eventBus;
     private final Provider<Progress> progress;
 
     private final Iterable<Element> rows;
@@ -90,6 +93,7 @@ public class ModelBrowser implements HasElements, SecurityContextAware {
     private final Element content;
     private final ResourcePanel resourcePanel;
     private final ChildrenPanel childrenPanel;
+    private boolean breadcrumb;
     Tree<Context> tree;
 
 
@@ -98,19 +102,21 @@ public ModelBrowser(final MetadataProcessor metadataProcessor,
             final SecurityFramework securityFramework,
             final ResourceDescriptions resourceDescriptions,
             final Dispatcher dispatcher,
+            final EventBus eventBus,
             @Footer final Provider<Progress> progress,
             final Resources resources) {
 
         this.metadataProcessor = metadataProcessor;
         this.securityFramework = securityFramework;
         this.resourceDescriptions = resourceDescriptions;
         this.dispatcher = dispatcher;
+        this.eventBus = eventBus;
         this.progress = progress;
 
         buttonGroup = new Elements.Builder()
                 .div().css(btnGroup, modelBrowserButtons)
-                .button().css(btn, btnDefault).add(""i"").css(fontAwesome(""filter"")).end()
-                .button().css(btn, btnDefault).add(""i"").css(fontAwesome(""refresh"")).end()
+                .button().on(click, event -> onFilter()).css(btn, btnDefault).add(""i"").css(fontAwesome(""filter"")).end()
+                .button().on(click, event -> onRefresh()).css(btn, btnDefault).add(""i"").css(fontAwesome(""refresh"")).end()
                 .end()
                 .build();
         treeContainer = new Elements.Builder().div().css(modelBrowserTree).end().build();
@@ -184,6 +190,9 @@ private void onTreeSelection(SelectionContext<Context> context) {
     }
 
     private void updateBreadcrumb(ResourceAddress address) {
+        if (breadcrumb) {
+            eventBus.fireEvent(new ModelBrowserAddressEvent(address));
+        }
     }
 
     private void showResourceView(Node<Context> node, ResourceAddress address) {
@@ -237,6 +246,14 @@ private AddressTemplate asGenericTemplate(Node<Context> parent, ResourceAddress
 
     // ------------------------------------------------------ event handler
 
+    private void onFilter() {
+        Browser.getWindow().alert(NYI);
+    }
+
+    private void onRefresh() {
+        Browser.getWindow().alert(NYI);
+    }
+
     void onAdd() {
         Browser.getWindow().alert(NYI);
     }
@@ -257,6 +274,7 @@ void onSave(Form<ModelNode> form, Map<String, Object> changedValues) {
     // ------------------------------------------------------ public API
 
     public void setRoot(ResourceAddress root, boolean breadcrumb) {
+        this.breadcrumb = breadcrumb;
         String resource = root == ResourceAddress.ROOT ? Names.MANAGEMENT_MODEL : root.lastValue();
         if (""*"".equals(resource)) {
             throw new IllegalArgumentException(""Invalid root address: "" + root +",2016-02-23T16:33:10Z,114
"@@ -0,0 +1,62 @@
+/*
+ * JBoss, Home of Professional Open Source.
+ * Copyright 2010, Red Hat, Inc., and individual contributors
+ * as indicated by the @author tags. See the copyright.txt file in the
+ * distribution for a full listing of individual contributors.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.jboss.hal.core.modelbrowser;
+
+import com.google.gwt.event.shared.EventHandler;
+import com.google.gwt.event.shared.GwtEvent;
+import org.jboss.hal.dmr.model.ResourceAddress;
+
+/**
+ * @author Harald Pehl
+ */
+public class ModelBrowserAddressEvent extends GwtEvent<ModelBrowserAddressEvent.ModelBrowserAddressHandler> {
+
+    public interface ModelBrowserAddressHandler extends EventHandler {
+
+        void onModelBrowserAddress(ModelBrowserAddressEvent event);
+    }
+
+
+    private static final Type<ModelBrowserAddressHandler> TYPE = new Type<>();
+
+    public static Type<ModelBrowserAddressHandler> getType() {
+        return TYPE;
+    }
+
+    private final ResourceAddress address;
+
+    public ModelBrowserAddressEvent(final ResourceAddress address) {this.address = address;}
+
+    public ResourceAddress getAddress() {
+        return address;
+    }
+
+    @Override
+    protected void dispatch(ModelBrowserAddressHandler handler) {
+        handler.onModelBrowserAddress(this);
+    }
+
+    @Override
+    public Type<ModelBrowserAddressHandler> getAssociatedType() {
+        return TYPE;
+    }
+}",2016-02-23T16:33:10Z,84
"@@ -52,14 +52,14 @@
  */
 class ReadChildren implements DataFunction<Context> {
 
-    private static final String ID_SEPARATOR = ""|"";
+    private static final String ID_SEPARATOR = ""_o_"";
     private static final String NO_SINGLETON = ""no_singleton"";
 
     static String uniqueId(Node<Context> parent, String name) {
         String parentId = parent.id;
         int index = parent.id.indexOf(ID_SEPARATOR);
         if (index != -1) {
-            parentId = parent.id.substring(index + 1, parent.id.length());
+            parentId = parent.id.substring(index + ID_SEPARATOR.length(), parent.id.length());
         }
         return parentId + ID_SEPARATOR + name;
     }",2016-02-23T16:33:10Z,182
"@@ -54,7 +54,7 @@ public interface ModelDescriptionConstants {
     String ENABLED = ""enabled"";
     String EXCEPTIONS = ""exceptions"";
     String EXECUTE = ""execute"";
-    String EXPRESSION_ALLOWED = ""expression-allowed"";
+    String EXPRESSIONS_ALLOWED = ""expressions-allowed"";
     String EXTENSION = ""extension"";
     String FAILED = ""failed"";
     String FAILURE_DESCRIPTION = ""failure-description"";",2016-02-23T16:33:10Z,109
"@@ -20,18 +20,18 @@
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.NamedNode;
 
-import static org.jboss.hal.dmr.ModelDescriptionConstants.JMS_DELIVERY_MODE;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.JMS_EXPIRATION;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.JMS_MESSAGE_ID;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.JMS_PRIORITY;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.JMS_TIMESTAMP;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 
 class JmsMessage extends NamedNode {
 
     JmsMessage(ModelNode node) {
         super(node.get(JMS_MESSAGE_ID).asString(), node);
     }
 
+    String getMessageId() {
+        return get(JMS_MESSAGE_ID).asString();
+    }
+
     Date getTimestamp() {
         return failSafeDate(JMS_TIMESTAMP);
     }",2017-08-08T10:59:01Z,183
"@@ -47,7 +47,7 @@ class JmsMessageDisplay implements ItemDisplay<JmsMessage> {
 
     @Override
     public String getTitle() {
-        return message.getName();
+        return message.getMessageId();
     }
 
     @Override",2017-08-08T10:59:01Z,184
"@@ -25,21 +25,29 @@
 import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
 import com.gwtplatform.mvp.client.proxy.ProxyPlace;
 import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
+import org.jboss.gwt.elemento.core.Elements;
 import org.jboss.gwt.flow.Async;
 import org.jboss.gwt.flow.Function;
 import org.jboss.gwt.flow.FunctionContext;
 import org.jboss.gwt.flow.Progress;
+import org.jboss.hal.ballroom.dialog.Dialog;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.form.FormItem;
 import org.jboss.hal.client.runtime.subsystem.messaging.Destination.Type;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderPath;
 import org.jboss.hal.core.finder.FinderPathFactory;
+import org.jboss.hal.core.mbui.form.OperationFormBuilder;
 import org.jboss.hal.core.mvp.ApplicationFinderPresenter;
 import org.jboss.hal.core.mvp.HalView;
 import org.jboss.hal.core.mvp.HasPresenter;
+import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Operation;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.SuccessfulOutcome;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.resources.Ids;
@@ -54,11 +62,9 @@
 import org.slf4j.LoggerFactory;
 
 import static java.util.Collections.emptyList;
+import static java.util.stream.Collectors.joining;
 import static java.util.stream.Collectors.toList;
-import static org.jboss.hal.client.runtime.subsystem.messaging.AddressTemplates.MESSAGING_DEPLOYMENT_TEMPLATE;
-import static org.jboss.hal.client.runtime.subsystem.messaging.AddressTemplates.MESSAGING_QUEUE_ADDRESS;
-import static org.jboss.hal.client.runtime.subsystem.messaging.AddressTemplates.MESSAGING_SERVER_TEMPLATE;
-import static org.jboss.hal.client.runtime.subsystem.messaging.AddressTemplates.MESSAGING_SUBDEPLOYMENT_TEMPLATE;
+import static org.jboss.hal.client.runtime.subsystem.messaging.AddressTemplates.*;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 
 public class JmsQueuePresenter extends ApplicationFinderPresenter<JmsQueuePresenter.MyView, JmsQueuePresenter.MyProxy> {
@@ -82,6 +88,7 @@ public interface MyView extends HalView, HasPresenter<JmsQueuePresenter> {
     @NonNls private static final Logger logger = LoggerFactory.getLogger(JmsQueuePresenter.class);
 
     private final FinderPathFactory finderPathFactory;
+    private final MetadataRegistry metadataRegistry;
     private final Dispatcher dispatcher;
     private final StatementContext statementContext;
     private final Progress progress;
@@ -93,17 +100,19 @@ public interface MyView extends HalView, HasPresenter<JmsQueuePresenter> {
     private String queue;
 
     @Inject
-    public JmsQueuePresenter(final EventBus eventBus,
-            final JmsQueuePresenter.MyView view,
-            final JmsQueuePresenter.MyProxy myProxy,
-            final Finder finder,
-            final FinderPathFactory finderPathFactory,
-            final Dispatcher dispatcher,
-            final StatementContext statementContext,
-            @Footer final Progress progress,
-            final Resources resources) {
+    public JmsQueuePresenter(EventBus eventBus,
+            JmsQueuePresenter.MyView view,
+            JmsQueuePresenter.MyProxy myProxy,
+            Finder finder,
+            FinderPathFactory finderPathFactory,
+            MetadataRegistry metadataRegistry,
+            Dispatcher dispatcher,
+            StatementContext statementContext,
+            @Footer Progress progress,
+            Resources resources) {
         super(eventBus, view, myProxy, finder);
         this.finderPathFactory = finderPathFactory;
+        this.metadataRegistry = metadataRegistry;
         this.dispatcher = dispatcher;
         this.statementContext = statementContext;
         this.progress = progress;
@@ -207,10 +216,53 @@ private boolean showAll() {
     void changePriority(List<JmsMessage> messages) {
         if (messages.isEmpty()) {
             noMessagesSelected();
-        } else if (messages.size() == 1) {
-
         } else {
-
+            Metadata metadata = metadataRegistry.lookup(MESSAGING_QUEUE_TEMPLATE);
+            Form<ModelNode> form = new OperationFormBuilder<>(Ids.JMS_MESSAGE_CHANGE_PRIORITY_FORM, metadata,
+                    CHANGE_MESSAGE_PRIORITY)
+                    .build();
+
+            Dialog dialog = new Dialog.Builder(resources.constants().changePriority())
+                    .add(form.asElement())
+                    .cancel()
+                    .primary(resources.constants().ok(), () -> {
+                        boolean valid = form.save();
+                        if (valid) {
+                            Operation operation;
+                            int priority = form.getModel().get(NEW_PRIORITY).asInt();
+                            if (messages.size() == 1) {
+                                operation = new Operation.Builder(queueAddress(), CHANGE_MESSAGE_PRIORITY)
+                                        .param(MESSAGE_ID, messages.get(0).getMessageId())
+                                        .param(NEW_PRIORITY, priority)
+                                        .build();
+                            } else {
+                                operation = new Operation.Builder(queueAddress(), CHANGE_MESSAGES_PRIORITY)
+                                        .param(FILTER, filter(messages))
+                                        .param(NEW_PRIORITY, priority)
+                                        .build();
+                            }
+                            dispatcher.execute(operation, result -> {
+                                reload();
+                                MessageEvent.fire(getEventBus(),
+                                        Message.success(resources.messages().changePrioritySuccess(priority)));
+                            });
+                        }
+                        return valid;
+                    })
+                    .build();
+            dialog.registerAttachable(form);
+            dialog.show();
+
+            ModelNode model = new ModelNode();
+            form.edit(model);
+            FormItem<Number> messageId = form.getFormItem(MESSAGE_ID);
+            messageId.setValue(42L);
+            Elements.setVisible(messageId.asElement(Form.State.EDITING), false);
+            FormItem<Number> priorityItem = form.getFormItem(NEW_PRIORITY);
+            if (messages.size() == 1) {
+                priorityItem.setValue(messages.get(0).get(JMS_PRIORITY).asLong());
+            }
+            priorityItem.setFocus(true);
         }
     }
 
@@ -258,6 +310,12 @@ private void noMessagesSelected() {
         MessageEvent.fire(getEventBus(), Message.warning(resources.messages().noMessagesSelected()));
     }
 
+    private String filter(List<JmsMessage> messages) {
+        return messages.stream()
+                .map(message -> JMS_MESSAGE_ID + ""='"" + message.getMessageId() + ""'"")
+                .collect(joining("" OR "")); //NON-NLS
+    }
+
     private ResourceAddress queueAddress() {
         ResourceAddress address;
         if (deployment != null || subdeployment != null) {",2017-08-08T10:59:01Z,185
"@@ -61,8 +61,8 @@ public JmsQueueView(MetadataRegistry metadataRegistry, Resources resources) {
                 item -> new JmsMessageDisplay(item, presenter, resources))
 
                 .toolbarAttribute(new Attribute<>(JMS_MESSAGE_ID, JMS_MESSAGE_ID,
-                        (model, filter) -> model.getName().contains(filter),
-                        comparing(JmsMessage::getName)))
+                        (model, filter) -> model.getMessageId().contains(filter),
+                        comparing(JmsMessage::getMessageId)))
                 .toolbarAttribute(new Attribute<>(JMS_TIMESTAMP, JMS_TIMESTAMP,
                         comparing(JmsMessage::getTimestamp)))
                 .toolbarAttribute(new Attribute<>(JMS_EXPIRATION, JMS_EXPIRATION,",2017-08-08T10:59:01Z,186
"@@ -164,18 +164,20 @@ public Builder saveCancel(ResultCallback saveCallback) {
          * Shortcut for a dialog with a 'Yes' and 'No' button. Clicking on yes will execute the specified
          * callback.
          */
-        Builder yesNo(Callback yesCallback) {
+        @JsIgnore
+        public Builder yesNo(Callback yesCallback) {
             buttons.clear();
             buttons.put(PRIMARY_POSITION, new Button(CONSTANTS.yes(), null, yesCallback, true));
             buttons.put(SECONDARY_POSITION, new Button(CONSTANTS.no(), null, null, false));
             return this;
         }
 
         /**
-         * Shortcut for a dialog with a 'Ok' and 'Cancel' button. Clicking on yes will execute the specified
+         * Shortcut for a dialog with a 'Ok' and 'Cancel' button. Clicking on ok will execute the specified
          * callback.
          */
-        Builder okCancel(Callback okCallback) {
+        @JsIgnore
+        public Builder okCancel(Callback okCallback) {
             buttons.clear();
             buttons.put(PRIMARY_POSITION, new Button(CONSTANTS.ok(), null, okCallback, true));
             buttons.put(SECONDARY_POSITION, new Button(CONSTANTS.cancel(), null, null, false));",2017-08-08T10:59:01Z,187
"@@ -16,26 +16,32 @@
 package org.jboss.hal.core.mbui.form;
 
 import java.util.Arrays;
+import java.util.HashSet;
 import java.util.LinkedHashSet;
+import java.util.Set;
 
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.meta.Metadata;
 import org.jetbrains.annotations.NonNls;
 
+import static java.util.Arrays.asList;
+
 public class OperationFormBuilder<T extends ModelNode> {
 
     private final String id;
     private final Metadata metadata;
     private final String operation;
     private final LinkedHashSet<String> includes;
+    private final Set<String> excludes;
 
     public OperationFormBuilder(@NonNls final String id, final Metadata metadata, final String operation) {
         this.id = id;
         this.metadata = metadata;
         this.operation = operation;
         this.includes = new LinkedHashSet<>();
+        this.excludes = new HashSet<>();
     }
 
     public OperationFormBuilder<T> include(final String[] attributes) {
@@ -54,9 +60,25 @@ public OperationFormBuilder<T> include(@NonNls final String first, @NonNls final
         return this;
     }
 
+    public OperationFormBuilder<T> exclude(final String[] attributes) {
+        excludes.addAll(asList(attributes));
+        return this;
+    }
+
+    public OperationFormBuilder<T> exclude(final Iterable<String> attributes) {
+        Iterables.addAll(excludes, attributes);
+        return this;
+    }
+
+    public OperationFormBuilder<T> exclude(@NonNls final String first, @NonNls final String... rest) {
+        excludes.addAll(Lists.asList(first, rest));
+        return this;
+    }
+
     public ModelNodeForm<T> build() {
         return new ModelNodeForm.Builder<T>(id, metadata.forOperation(operation))
                 .include(includes)
+                .exclude(excludes)
                 .addOnly()
                 .build();
     }",2017-08-08T10:59:01Z,188
"@@ -24,7 +24,6 @@
 
 import com.google.gwt.safehtml.shared.SafeHtml;
 import com.google.web.bindery.event.shared.EventBus;
-import elemental2.dom.DomGlobal;
 import org.jboss.gwt.flow.Progress;
 import org.jboss.hal.ballroom.dialog.BlockingDialog;
 import org.jboss.hal.ballroom.dialog.Dialog;
@@ -293,8 +292,8 @@ public void onMetadata(final Metadata metadata) {
                                     int uiTimeout = timeout + SERVER_SUSPEND_TIMEOUT;
 
                                     prepare(server, Action.SUSPEND);
-                                    Operation operation = new Operation.Builder(server.getServerConfigAddress(), SUSPEND
-                                    )
+                                    Operation operation = new Operation.Builder(server.getServerConfigAddress(),
+                                            SUSPEND)
                                             .param(TIMEOUT, timeout)
                                             .build();
                                     dispatcher.execute(operation,",2017-08-08T10:59:01Z,93
"@@ -247,6 +247,7 @@ public interface ModelDescriptionConstants {
     String FILE = ""file"";
     String FILE_AUDIT_LOG = ""file-audit-log"";
     String FILESYSTEM_REALM = ""filesystem-realm"";
+    String FILTER = ""filter"";
     String FILTER_REF = ""filter-ref"";
     String FILTERING_KEY_STORE = ""filtering-key-store"";
     String FILTERS = ""filters"";
@@ -386,6 +387,7 @@ public interface ModelDescriptionConstants {
     String MECHANISM_PROVIDER_FILTERING_SASL_SERVER_FACTORY = ""mechanism-provider-filtering-sasl-server-factory"";
     String MECHANISM_REALM_CONFIGURATIONS = ""mechanism-realm-configurations"";
     String MESSAGE_COUNT = ""message-count"";
+    String MESSAGE_ID = ""message-id"";
     String MESSAGES_ADDED = ""messages-added"";
     String MESSAGING_ACTIVEMQ = ""messaging-activemq"";
     String METRIC = ""metric"";
@@ -409,6 +411,7 @@ public interface ModelDescriptionConstants {
     String NEW_ITEM_PATH = ""new-item-path"";
     String NEW_ITEM_RDN = ""new-item-rdn"";
     String NEW_ITEM_TEMPLATE = ""new-item-template"";
+    String NEW_PRIORITY = ""new-priority"";
     String NEXT_TIMEOUT = ""next-timeout"";
     String NILLABLE = ""nillable"";
     String NO_TX_SEPARATE_POOL = ""no-tx-separate-pool"";",2017-08-08T10:59:01Z,109
"@@ -388,6 +388,7 @@ public interface Ids {
     String JMS_BRIDGE_TAB = build(JMS_BRIDGE, TAB_SUFFIX);
     String JMS_MESSAGE = ""jms-message"";
     String JMS_MESSAGE_CHANGE_PRIORITY = Ids.build(JMS_MESSAGE, ""change-priority"");
+    String JMS_MESSAGE_CHANGE_PRIORITY_FORM = Ids.build(JMS_MESSAGE, ""change-priority"", FORM_SUFFIX);
     String JMS_MESSAGE_EXPIRE = Ids.build(JMS_MESSAGE, ""expire"");
     String JMS_MESSAGE_MOVE = Ids.build(JMS_MESSAGE, ""move"");
     String JMS_MESSAGE_REMOVE = Ids.build(JMS_MESSAGE, ""remove"");",2017-08-08T10:59:01Z,111
"@@ -58,6 +58,7 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     String blacklist(String blacklist);
 
     String cacheStore();
+    SafeHtml changePrioritySuccess(int priority);
     SafeHtml chooseContentToDeploy(String serverGroup);
     SafeHtml chooseReplication();
     SafeHtml chooseServerGroupsToUndeploy(String name);",2017-08-08T10:59:01Z,94
"@@ -15,6 +15,7 @@ available={0}% available
 blacklist=Value must not be one of {0}.
 bootErrors=Errors occurred during boot.
 cacheStore=The store configuration for this cache.
+changePrioritySuccess=Priority successfully changed to <strong>{0, number}</strong>.
 chooseContentToDeploy=Choose the content for deploying to server group <strong>{0}</strong>.
 chooseReplication=Choose which role the server should take in the data replication policy:
 chooseServerGroupsToDeploy=Choose the server groups for deploying <strong>{0}</strong>.",2017-08-08T10:59:01Z,94
"@@ -15,24 +15,32 @@
  */
 package org.jboss.hal.client.runtime.server;
 
+import java.util.List;
 import javax.inject.Inject;
 
+import com.google.common.collect.Lists;
 import org.jboss.hal.config.Environment;
+import org.jboss.hal.config.semver.Version;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.ItemActionFactory;
 import org.jboss.hal.core.finder.PreviewContent;
 import org.jboss.hal.core.finder.StaticItem;
 import org.jboss.hal.core.finder.StaticItemColumn;
 import org.jboss.hal.core.mvp.Places;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.dmr.model.Operation;
+import org.jboss.hal.dmr.model.ResourceAddress;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.ManagementModel;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
 import org.jboss.hal.spi.AsyncColumn;
 
-import static java.util.Arrays.asList;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.ATTRIBUTES_ONLY;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.READ_RESOURCE_OPERATION;
 
 /**
  * @author Harald Pehl
@@ -48,28 +56,42 @@ public ServerMonitorColumn(final Finder finder,
             final ItemActionFactory itemActionFactory,
             final Places places,
             final Resources resources) {
-        super(finder, Ids.SERVER_MONITOR, resources.constants().monitor(), asList(
+        super(finder, Ids.SERVER_MONITOR, resources.constants().monitor(), (context, callback) -> {
+            List<StaticItem> items = Lists.newArrayList(
 
-                new StaticItem.Builder(resources.constants().status())
-                        .action(itemActionFactory.view(places.selectedServer(NameTokens.SERVER_STATUS).build()))
-                        .onPreview(new ServerStatusPreview(environment, dispatcher, statementContext, resources))
-                        .build(),
+                    new StaticItem.Builder(resources.constants().status())
+                            .action(itemActionFactory.view(places.selectedServer(NameTokens.SERVER_STATUS).build()))
+                            .onPreview(
+                                    new ServerStatusPreview(environment, dispatcher, statementContext, resources))
+                            .build(),
 
-                new StaticItem.Builder(Names.DATASOURCES)
-                        .nextColumn(Ids.DATA_SOURCE_RUNTIME)
-                        .onPreview(new PreviewContent(Names.DATASOURCES, resources.previews().runtimeDatasources()))
-                        .build(),
+                    new StaticItem.Builder(Names.DATASOURCES)
+                            .nextColumn(Ids.DATA_SOURCE_RUNTIME)
+                            .onPreview(new PreviewContent(Names.DATASOURCES,
+                                    resources.previews().runtimeDatasources()))
+                            .build(),
 
-                new StaticItem.Builder(Names.JPA)
-                        .nextColumn(Ids.JPA_RUNTIME)
-                        .onPreview(new PreviewContent(Names.JPA, resources.previews().runtimeJpa()))
-                        .build(),
+                    new StaticItem.Builder(Names.JPA)
+                            .nextColumn(Ids.JPA_RUNTIME)
+                            .onPreview(new PreviewContent(Names.JPA, resources.previews().runtimeJpa()))
+                            .build());
 
-                new StaticItem.Builder(resources.constants().logFiles())
-                        .nextColumn(Ids.LOG_FILE)
-                        .onPreview(new PreviewContent(resources.constants().logFiles(),
-                                resources.previews().runtimeLogFiles()))
-                        .build()
-        ));
+            ResourceAddress address = AddressTemplate.of(""/{selected.host}/{selected.server}"")
+                    .resolve(statementContext);
+            Operation operation = new Operation.Builder(READ_RESOURCE_OPERATION, address)
+                    .param(ATTRIBUTES_ONLY, true)
+                    .build();
+            dispatcher.execute(operation, result -> {
+                Version serverVersion = ManagementModel.parseVersion(result);
+                if (ManagementModel.supportsListLogFiles(serverVersion)) {
+                    items.add(new StaticItem.Builder(resources.constants().logFiles())
+                            .nextColumn(Ids.LOG_FILE)
+                            .onPreview(new PreviewContent(resources.constants().logFiles(),
+                                    resources.previews().runtimeLogFiles()))
+                            .build());
+                }
+                callback.onSuccess(items);
+            });
+        });
     }
 }",2016-09-06T12:04:17Z,16
"@@ -29,8 +29,9 @@
  */
 public class ManagementModel {
 
-    private static final Version V_3_0_0 = Version.forIntegers(3, 0, 0);
-    private static final Version V_5_0_0 = Version.forIntegers(5, 0, 0);
+    private static final Version V_2_0_0 = Version.forIntegers(2, 0, 0); // WildFly 8
+    private static final Version V_3_0_0 = Version.forIntegers(3, 0, 0); // WildFly 9
+    private static final Version V_5_0_0 = Version.forIntegers(5, 0, 0); // WildFly 11
 
     public static Version parseVersion(ModelNode modelNode) {
         if (modelNode.hasDefined(MANAGEMENT_MAJOR_VERSION) &&
@@ -44,14 +45,27 @@ public static Version parseVersion(ModelNode modelNode) {
         return Version.UNDEFINED;
     }
 
+
+    // ------------------------------------------------------ supports methods (A-Z)
+
     /**
      * Checks support for the capabilities registry.
      *
      * @return {@code true} if the provided version isn't {@linkplain Version#UNDEFINED undefined} and greater than or
      * equal {@code 5.0.0}
      */
     public static boolean supportsCapabilitiesRegistry(Version version) {
-        return version != Version.UNDEFINED && version.greaterThanOrEqualTo(V_5_0_0);
+        return ensureVersion(version, V_5_0_0);
+    }
+
+    /**
+     * Check support for {@code :list-log-files} operation.
+     *
+     * @return {@code true} if the provided version isn't {@linkplain Version#UNDEFINED undefined} and greater than or
+     * equal {@code 3.0.0}
+     */
+    public static boolean supportsListLogFiles(Version version) {
+        return ensureVersion(version, V_2_0_0);
     }
 
     /**
@@ -61,6 +75,13 @@ public static boolean supportsCapabilitiesRegistry(Version version) {
      * equal {@code 3.0.0}
      */
     public static boolean supportsSuspend(Version version) {
-        return version != Version.UNDEFINED && version.greaterThanOrEqualTo(V_3_0_0);
+        return ensureVersion(version, V_3_0_0);
+    }
+
+
+    // ------------------------------------------------------ helper methods
+
+    private static boolean ensureVersion(Version existing, Version expected) {
+        return existing != Version.UNDEFINED && existing.greaterThanOrEqualTo(expected);
     }
 }",2016-09-06T12:04:17Z,189
"@@ -15,85 +15,35 @@
  */
 package org.jboss.hal.client.homepage;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import javax.inject.Inject;
 
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.client.annotations.NameToken;
 import com.gwtplatform.mvp.client.annotations.ProxyStandard;
 import com.gwtplatform.mvp.client.proxy.PlaceManager;
 import com.gwtplatform.mvp.client.proxy.ProxyPlace;
-import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
-import org.jboss.hal.ballroom.Popover.Placement;
 import org.jboss.hal.config.Environment;
 import org.jboss.hal.core.accesscontrol.AccessControl;
-import org.jboss.hal.core.finder.FinderPath;
 import org.jboss.hal.core.mvp.HalView;
 import org.jboss.hal.core.mvp.HasPresenter;
 import org.jboss.hal.core.mvp.Places;
 import org.jboss.hal.core.mvp.TopLevelPresenter;
-import org.jboss.hal.core.runtime.server.Server;
-import org.jboss.hal.dmr.Composite;
-import org.jboss.hal.dmr.ModelNode;
-import org.jboss.hal.dmr.Operation;
-import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.token.NameTokens;
-import org.jboss.hal.resources.Ids;
-import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
-import rx.Single;
-
-import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 
 public class HomepagePresenter extends TopLevelPresenter<HomepagePresenter.MyView, HomepagePresenter.MyProxy> {
 
-    private final AccessControl accessControl;
-    private final Environment environment;
-    private final PlaceManager placeManager;
-    private final Places places;
-    private final Resources resources;
-    private Single<String[]> domain;
+    private final TourSetup tourSetup;
     private Tour tour;
 
     @Inject
     public HomepagePresenter(EventBus eventBus, MyView view, MyProxy proxy, AccessControl accessControl,
             Dispatcher dispatcher, Environment environment, PlaceManager placeManager, Places places,
             Resources resources) {
         super(eventBus, view, proxy);
-        this.accessControl = accessControl;
-        this.environment = environment;
-        this.placeManager = placeManager;
-        this.places = places;
-        this.resources = resources;
-
-        // define DRM operations (w/o executing them)
-        if (environment.isStandalone()) {
-            domain = Single.just(new String[2]);
-        } else {
-            // read domain values:
-            // domain[0]: first profile
-            // domain[1]: first server group
-            List<Operation> operations = new ArrayList<>();
-            operations.add(new Operation.Builder(ResourceAddress.root(), READ_CHILDREN_NAMES_OPERATION)
-                    .param(CHILD_TYPE, PROFILE)
-                    .build());
-            operations.add(new Operation.Builder(ResourceAddress.root(), READ_CHILDREN_NAMES_OPERATION)
-                    .param(CHILD_TYPE, SERVER_GROUP)
-                    .build());
-            domain = dispatcher.execute(new Composite(operations)).map(result -> {
-                String[] values = new String[operations.size()];
-                for (int i = 0; i < operations.size(); i++) {
-                    List<ModelNode> nodes = result.step(i).get(RESULT).asList();
-                    if (!nodes.isEmpty()) {
-                        values[i] = nodes.get(0).asString();
-                    }
-                }
-                return values;
-            });
-        }
+        this.tourSetup = new TourSetup(eventBus, dispatcher, environment, placeManager, places, accessControl,
+                resources);
     }
 
     @Override
@@ -104,107 +54,10 @@ protected void onBind() {
 
     void launchGuidedTour() {
         if (tour == null) {
-            // execute the DRM operations and use the values for domain mode
-            domain.subscribe(values -> {
-                tour = new Tour(getEventBus(), placeManager, resources);
-
-                // place requests used for both standalone and domain mode
-                PlaceRequest homepage = new PlaceRequest.Builder().nameToken(NameTokens.HOMEPAGE).build();
-                PlaceRequest deployments = new PlaceRequest.Builder().nameToken(NameTokens.DEPLOYMENTS).build();
-                PlaceRequest runtime = new PlaceRequest.Builder().nameToken(NameTokens.RUNTIME).build();
-
-                if (environment.isStandalone()) {
-                    // place requests for standalone mode
-                    PlaceRequest configuration = places.finderPlace(NameTokens.CONFIGURATION,
-                            new FinderPath().append(Ids.CONFIGURATION, Ids.asId(Names.SUBSYSTEMS))).build();
-                    String serverId = Ids.hostServer(Server.STANDALONE.getHost(), environment.getName());
-                    PlaceRequest monitor = places.finderPlace(NameTokens.RUNTIME,
-                            new FinderPath().append(Ids.STANDALONE_SERVER_COLUMN, serverId)).build();
-
-                    // steps for standalone mode
-                    tour.addStep(homepage, Ids.HOMEPAGE_DEPLOYMENTS_MODULE, Names.HOMEPAGE,
-                            resources.messages().tourStandaloneHomeDeployments(), Placement.RIGHT);
-                    tour.addStep(homepage, Ids.HOMEPAGE_CONFIGURATION_MODULE, Names.HOMEPAGE,
-                            resources.messages().tourStandaloneHomeConfiguration(), Placement.LEFT);
-                    tour.addStep(homepage, Ids.HOMEPAGE_RUNTIME_MODULE, Names.HOMEPAGE,
-                            resources.messages().tourStandaloneHomeRuntime(), Placement.RIGHT);
-                    tour.addStep(deployments, Ids.DEPLOYMENT, Names.DEPLOYMENT,
-                            resources.messages().tourStandaloneDeployment(), Placement.RIGHT);
-                    tour.addStep(deployments, Ids.DEPLOYMENT_ADD_ACTIONS, Names.DEPLOYMENT,
-                            resources.messages().tourStandaloneDeploymentAddActions(), Placement.BOTTOM);
-                    tour.addStep(configuration, Ids.CONFIGURATION_SUBSYSTEM, Names.CONFIGURATION,
-                            resources.messages().tourStandaloneConfigurationSubsystem(), Placement.RIGHT);
-                    tour.addStep(runtime, Ids.STANDALONE_SERVER_COLUMN, Names.RUNTIME,
-                            resources.messages().tourStandaloneRuntimeServer(), Placement.RIGHT);
-                    tour.addStep(monitor, Ids.RUNTIME_SUBSYSTEM, Names.RUNTIME,
-                            resources.messages().tourStandaloneRuntimeSubsystem(), Placement.RIGHT);
-
-                } else {
-                    // place requests for domain mode
-                    PlaceRequest deploymentsContentRepository = places.finderPlace(NameTokens.DEPLOYMENTS,
-                            new FinderPath().append(Ids.DEPLOYMENT_BROWSE_BY,
-                                    Ids.asId(resources.constants().contentRepository()))).build();
-                    PlaceRequest profiles = places.finderPlace(NameTokens.CONFIGURATION,
-                            new FinderPath().append(Ids.CONFIGURATION, Ids.asId(Names.PROFILES))).build();
-                    PlaceRequest serverGroups = places.finderPlace(NameTokens.RUNTIME,
-                            new FinderPath().append(Ids.DOMAIN_BROWSE_BY, Ids.asId(Names.SERVER_GROUPS))).build();
-
-                    // steps for domain mode
-                    tour.addStep(homepage, Ids.HOMEPAGE_DEPLOYMENTS_MODULE, Names.HOMEPAGE,
-                            resources.messages().tourDomainHomeDeployments(), Placement.RIGHT);
-                    tour.addStep(homepage, Ids.HOMEPAGE_CONFIGURATION_MODULE, Names.HOMEPAGE,
-                            resources.messages().tourDomainHomeConfiguration(), Placement.LEFT);
-                    tour.addStep(homepage, Ids.HOMEPAGE_RUNTIME_MODULE, Names.HOMEPAGE,
-                            resources.messages().tourDomainHomeRuntime(), Placement.RIGHT);
-                    tour.addStep(deployments, Ids.DEPLOYMENT_BROWSE_BY, Names.DEPLOYMENT,
-                            resources.messages().tourDomainDeploymentsBrowseBy(), Placement.RIGHT);
-                    tour.addStep(deploymentsContentRepository, Ids.CONTENT_ADD_ACTIONS, Names.DEPLOYMENT,
-                            resources.messages().tourDomainDeploymentsAddActions(), Placement.BOTTOM);
-                    tour.addStep(profiles, Ids.PROFILE, Names.CONFIGURATION,
-                            resources.messages().tourDomainConfiguration(), Placement.RIGHT);
-                    if (values[0] != null) {
-                        PlaceRequest profileSubsystems = places.finderPlace(NameTokens.CONFIGURATION,
-                                new FinderPath().append(Ids.CONFIGURATION, Ids.asId(Names.PROFILES))
-                                        .append(Ids.PROFILE, values[0])).build();
-                        tour.addStep(profileSubsystems, Ids.CONFIGURATION_SUBSYSTEM, Names.CONFIGURATION,
-                                resources.messages().tourDomainConfigurationSubsystem(), Placement.RIGHT);
-                    }
-                    tour.addStep(runtime, Ids.DOMAIN_BROWSE_BY, Names.RUNTIME,
-                            resources.messages().tourDomainRuntimeBrowseBy(), Placement.RIGHT);
-                    tour.addStep(serverGroups, Ids.SERVER_GROUP, Names.RUNTIME,
-                            resources.messages().tourDomainRuntimeServerGroup(), Placement.RIGHT);
-                    tour.addStep(serverGroups, Ids.SERVER_GROUP_ADD, Names.RUNTIME,
-                            resources.messages().tourDomainRuntimeServerGroupsAdd(), Placement.BOTTOM);
-                    if (values[1] != null) {
-                        PlaceRequest firstServerGroup = places.finderPlace(NameTokens.RUNTIME,
-                                new FinderPath().append(Ids.DOMAIN_BROWSE_BY, Ids.asId(Names.SERVER_GROUPS))
-                                        .append(Ids.SERVER_GROUP, Ids.serverGroup(values[1]))).build();
-                        tour.addStep(firstServerGroup, Ids.SERVER, Names.RUNTIME,
-                                resources.messages().tourDomainRuntimeServer(), Placement.RIGHT);
-                        tour.addStep(firstServerGroup, Ids.SERVER_ADD, Names.RUNTIME,
-                                resources.messages().tourDomainRuntimeServerAdd(), Placement.BOTTOM);
-                    }
-                }
-
-                // Steps for access control apply to both standalone and domain mode
-                if (accessControl.isSuperUserOrAdministrator() && !accessControl.isSingleSignOn()) {
-                    PlaceRequest browseBy = new PlaceRequest.Builder().nameToken(NameTokens.ACCESS_CONTROL).build();
-                    PlaceRequest users = places.finderPlace(NameTokens.ACCESS_CONTROL,
-                            new FinderPath().append(Ids.ACCESS_CONTROL_BROWSE_BY,
-                                    Ids.asId(resources.constants().users()))).build();
-                    PlaceRequest roles = places.finderPlace(NameTokens.ACCESS_CONTROL,
-                            new FinderPath().append(Ids.ACCESS_CONTROL_BROWSE_BY,
-                                    Ids.asId(resources.constants().roles()))).build();
-                    tour.addStep(browseBy, Ids.ACCESS_CONTROL_BROWSE_BY, Names.ACCESS_CONTROL,
-                            resources.messages().tourAccessControl(), Placement.RIGHT);
-                    tour.addStep(users, Ids.USER, Names.ACCESS_CONTROL,
-                            resources.messages().tourAccessControlUsers(), Placement.RIGHT);
-                    tour.addStep(roles, Ids.ROLE, Names.ACCESS_CONTROL,
-                            resources.messages().tourAccessControlRoles(), Placement.RIGHT);
-                }
+            tourSetup.initTour(t -> {
+                tour = t;
                 tour.start();
             });
-
         } else {
             if (!tour.running()) {
                 tour.start();",2019-05-14T09:46:28Z,7
"@@ -0,0 +1,194 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.homepage;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.function.Consumer;
+
+import com.google.web.bindery.event.shared.EventBus;
+import com.gwtplatform.mvp.client.proxy.PlaceManager;
+import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
+import org.jboss.hal.ballroom.Popover.Placement;
+import org.jboss.hal.config.Environment;
+import org.jboss.hal.core.accesscontrol.AccessControl;
+import org.jboss.hal.core.finder.FinderPath;
+import org.jboss.hal.core.mvp.Places;
+import org.jboss.hal.core.runtime.server.Server;
+import org.jboss.hal.dmr.Composite;
+import org.jboss.hal.dmr.CompositeResult;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.meta.token.NameTokens;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
+
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+
+class TourSetup {
+
+    private final EventBus eventBus;
+    private final Dispatcher dispatcher;
+    private final Environment environment;
+    private final PlaceManager placeManager;
+    private final Places places;
+    private final AccessControl accessControl;
+    private final Resources resources;
+
+    TourSetup(EventBus eventBus, Dispatcher dispatcher, Environment environment, PlaceManager placeManager,
+            Places places, AccessControl accessControl, Resources resources) {
+        this.eventBus = eventBus;
+        this.dispatcher = dispatcher;
+        this.environment = environment;
+        this.placeManager = placeManager;
+        this.places = places;
+        this.accessControl = accessControl;
+        this.resources = resources;
+    }
+
+    void initTour(Consumer<Tour> consumer) {
+        Tour tour = new Tour(eventBus, placeManager, resources);
+
+        // place requests used for both standalone and domain mode
+        PlaceRequest homepage = new PlaceRequest.Builder().nameToken(NameTokens.HOMEPAGE).build();
+        PlaceRequest deployments = new PlaceRequest.Builder().nameToken(NameTokens.DEPLOYMENTS).build();
+        PlaceRequest runtime = new PlaceRequest.Builder().nameToken(NameTokens.RUNTIME).build();
+
+        if (environment.isStandalone()) {
+            standaloneSteps(tour, homepage, deployments, runtime);
+            commonSteps(tour);
+            consumer.accept(tour);
+
+        } else {
+            // read domain values: first profile, first server group
+            List<Operation> operations = new ArrayList<>();
+            operations.add(new Operation.Builder(ResourceAddress.root(), READ_CHILDREN_NAMES_OPERATION)
+                    .param(CHILD_TYPE, PROFILE)
+                    .build());
+            operations.add(new Operation.Builder(ResourceAddress.root(), READ_CHILDREN_NAMES_OPERATION)
+                    .param(CHILD_TYPE, SERVER_GROUP)
+                    .build());
+            dispatcher.execute(new Composite(operations), (CompositeResult result) -> {
+                List<ModelNode> profiles = result.step(0).get(RESULT).asList();
+                String profile = profiles.isEmpty() ? null : profiles.get(0).asString();
+                List<ModelNode> serverGroups = result.step(1).get(RESULT).asList();
+                String serverGroup = serverGroups.isEmpty() ? null : serverGroups.get(0).asString();
+
+                domainSteps(tour, homepage, deployments, runtime, profile, serverGroup);
+                commonSteps(tour);
+                consumer.accept(tour);
+            });
+        }
+    }
+
+    private void standaloneSteps(Tour tour, PlaceRequest homepage, PlaceRequest deployments, PlaceRequest runtime) {
+        // place requests for standalone mode
+        PlaceRequest configuration = places.finderPlace(NameTokens.CONFIGURATION,
+                new FinderPath().append(Ids.CONFIGURATION, Ids.asId(Names.SUBSYSTEMS))).build();
+        String serverId = Ids.hostServer(Server.STANDALONE.getHost(), environment.getName());
+        PlaceRequest monitor = places.finderPlace(NameTokens.RUNTIME,
+                new FinderPath().append(Ids.STANDALONE_SERVER_COLUMN, serverId)).build();
+
+        // steps for standalone mode
+        tour.addStep(homepage, Ids.HOMEPAGE_DEPLOYMENTS_MODULE, Names.HOMEPAGE,
+                resources.messages().tourStandaloneHomeDeployments(), Placement.RIGHT);
+        tour.addStep(homepage, Ids.HOMEPAGE_CONFIGURATION_MODULE, Names.HOMEPAGE,
+                resources.messages().tourStandaloneHomeConfiguration(), Placement.LEFT);
+        tour.addStep(homepage, Ids.HOMEPAGE_RUNTIME_MODULE, Names.HOMEPAGE,
+                resources.messages().tourStandaloneHomeRuntime(), Placement.RIGHT);
+        tour.addStep(deployments, Ids.DEPLOYMENT, Names.DEPLOYMENT,
+                resources.messages().tourStandaloneDeployment(), Placement.RIGHT);
+        tour.addStep(deployments, Ids.DEPLOYMENT_ADD_ACTIONS, Names.DEPLOYMENT,
+                resources.messages().tourStandaloneDeploymentAddActions(), Placement.BOTTOM);
+        tour.addStep(configuration, Ids.CONFIGURATION_SUBSYSTEM, Names.CONFIGURATION,
+                resources.messages().tourStandaloneConfigurationSubsystem(), Placement.RIGHT);
+        tour.addStep(runtime, Ids.STANDALONE_SERVER_COLUMN, Names.RUNTIME,
+                resources.messages().tourStandaloneRuntimeServer(), Placement.RIGHT);
+        tour.addStep(monitor, Ids.RUNTIME_SUBSYSTEM, Names.RUNTIME,
+                resources.messages().tourStandaloneRuntimeSubsystem(), Placement.RIGHT);
+
+    }
+
+    private void domainSteps(Tour tour, PlaceRequest homepage, PlaceRequest deployments, PlaceRequest runtime,
+            String profile, String serverGroup) {
+        // place requests for domain mode
+        PlaceRequest deploymentsContentRepository = places.finderPlace(NameTokens.DEPLOYMENTS,
+                new FinderPath().append(Ids.DEPLOYMENT_BROWSE_BY,
+                        Ids.asId(resources.constants().contentRepository()))).build();
+        PlaceRequest profiles = places.finderPlace(NameTokens.CONFIGURATION,
+                new FinderPath().append(Ids.CONFIGURATION, Ids.asId(Names.PROFILES))).build();
+        PlaceRequest serverGroups = places.finderPlace(NameTokens.RUNTIME,
+                new FinderPath().append(Ids.DOMAIN_BROWSE_BY, Ids.asId(Names.SERVER_GROUPS))).build();
+
+        // steps for domain mode
+        tour.addStep(homepage, Ids.HOMEPAGE_DEPLOYMENTS_MODULE, Names.HOMEPAGE,
+                resources.messages().tourDomainHomeDeployments(), Placement.RIGHT);
+        tour.addStep(homepage, Ids.HOMEPAGE_CONFIGURATION_MODULE, Names.HOMEPAGE,
+                resources.messages().tourDomainHomeConfiguration(), Placement.LEFT);
+        tour.addStep(homepage, Ids.HOMEPAGE_RUNTIME_MODULE, Names.HOMEPAGE,
+                resources.messages().tourDomainHomeRuntime(), Placement.RIGHT);
+        tour.addStep(deployments, Ids.DEPLOYMENT_BROWSE_BY, Names.DEPLOYMENT,
+                resources.messages().tourDomainDeploymentsBrowseBy(), Placement.RIGHT);
+        tour.addStep(deploymentsContentRepository, Ids.CONTENT_ADD_ACTIONS, Names.DEPLOYMENT,
+                resources.messages().tourDomainDeploymentsAddActions(), Placement.BOTTOM);
+        tour.addStep(profiles, Ids.PROFILE, Names.CONFIGURATION,
+                resources.messages().tourDomainConfiguration(), Placement.RIGHT);
+        if (profile != null) {
+            PlaceRequest profileSubsystems = places.finderPlace(NameTokens.CONFIGURATION,
+                    new FinderPath().append(Ids.CONFIGURATION, Ids.asId(Names.PROFILES))
+                            .append(Ids.PROFILE, profile)).build();
+            tour.addStep(profileSubsystems, Ids.CONFIGURATION_SUBSYSTEM, Names.CONFIGURATION,
+                    resources.messages().tourDomainConfigurationSubsystem(), Placement.RIGHT);
+        }
+        tour.addStep(runtime, Ids.DOMAIN_BROWSE_BY, Names.RUNTIME,
+                resources.messages().tourDomainRuntimeBrowseBy(), Placement.RIGHT);
+        tour.addStep(serverGroups, Ids.SERVER_GROUP, Names.RUNTIME,
+                resources.messages().tourDomainRuntimeServerGroup(), Placement.RIGHT);
+        tour.addStep(serverGroups, Ids.SERVER_GROUP_ADD, Names.RUNTIME,
+                resources.messages().tourDomainRuntimeServerGroupsAdd(), Placement.BOTTOM);
+        if (serverGroup != null) {
+            PlaceRequest firstServerGroup = places.finderPlace(NameTokens.RUNTIME,
+                    new FinderPath().append(Ids.DOMAIN_BROWSE_BY, Ids.asId(Names.SERVER_GROUPS))
+                            .append(Ids.SERVER_GROUP, Ids.serverGroup(serverGroup))).build();
+            tour.addStep(firstServerGroup, Ids.SERVER, Names.RUNTIME,
+                    resources.messages().tourDomainRuntimeServer(), Placement.RIGHT);
+            tour.addStep(firstServerGroup, Ids.SERVER_ADD, Names.RUNTIME,
+                    resources.messages().tourDomainRuntimeServerAdd(), Placement.BOTTOM);
+        }
+    }
+
+    private void commonSteps(Tour tour) {
+        // steps for access control apply to both standalone and domain mode
+        if (accessControl.isSuperUserOrAdministrator() && !accessControl.isSingleSignOn()) {
+            PlaceRequest browseBy = new PlaceRequest.Builder().nameToken(NameTokens.ACCESS_CONTROL).build();
+            PlaceRequest users = places.finderPlace(NameTokens.ACCESS_CONTROL,
+                    new FinderPath().append(Ids.ACCESS_CONTROL_BROWSE_BY,
+                            Ids.asId(resources.constants().users()))).build();
+            PlaceRequest roles = places.finderPlace(NameTokens.ACCESS_CONTROL,
+                    new FinderPath().append(Ids.ACCESS_CONTROL_BROWSE_BY,
+                            Ids.asId(resources.constants().roles()))).build();
+            tour.addStep(browseBy, Ids.ACCESS_CONTROL_BROWSE_BY, Names.ACCESS_CONTROL,
+                    resources.messages().tourAccessControl(), Placement.RIGHT);
+            tour.addStep(users, Ids.USER, Names.ACCESS_CONTROL,
+                    resources.messages().tourAccessControlUsers(), Placement.RIGHT);
+            tour.addStep(roles, Ids.ROLE, Names.ACCESS_CONTROL,
+                    resources.messages().tourAccessControlRoles(), Placement.RIGHT);
+        }
+    }
+}",2019-05-14T09:46:28Z,190
"@@ -26,13 +26,13 @@
 
 public class Popover {
 
-
     private final Bridge bridge;
 
     private Popover(Builder builder) {
         Options options = new Options();
         options.content = builder.content.asString();
         options.html = true;
+        options.sanitize = false;
         options.placement = builder.placement.id;
         if (builder.template != null) {
             options.template = builder.template.asString();
@@ -158,6 +158,7 @@ private static class Options {
 
         String content;
         boolean html;
+        boolean sanitize;
         String placement;
         String template;
         String title;",2019-05-14T09:46:28Z,191
"@@ -26,7 +26,6 @@
 import org.jboss.hal.resources.Ids;
 
 import static elemental2.dom.DomGlobal.setTimeout;
-import static org.jboss.gwt.elemento.core.Elements.i;
 import static org.jboss.gwt.elemento.core.Elements.*;
 import static org.jboss.gwt.elemento.core.EventType.bind;
 import static org.jboss.gwt.elemento.core.EventType.change;",2019-05-14T09:46:28Z,192
"@@ -26,7 +26,6 @@
 import org.jboss.hal.resources.Ids;
 
 import static elemental2.dom.DomGlobal.setTimeout;
-import static org.jboss.gwt.elemento.core.Elements.i;
 import static org.jboss.gwt.elemento.core.Elements.*;
 import static org.jboss.gwt.elemento.core.EventType.bind;
 import static org.jboss.gwt.elemento.core.EventType.change;",2019-05-14T09:46:28Z,193
"@@ -26,7 +26,6 @@
 import org.jboss.hal.resources.Ids;
 
 import static elemental2.dom.DomGlobal.setTimeout;
-import static org.jboss.gwt.elemento.core.Elements.i;
 import static org.jboss.gwt.elemento.core.Elements.*;
 import static org.jboss.gwt.elemento.core.EventType.bind;
 import static org.jboss.gwt.elemento.core.EventType.change;",2019-05-14T09:46:28Z,194
"@@ -26,7 +26,6 @@
 import org.jboss.hal.resources.Ids;
 
 import static elemental2.dom.DomGlobal.setTimeout;
-import static org.jboss.gwt.elemento.core.Elements.i;
 import static org.jboss.gwt.elemento.core.Elements.*;
 import static org.jboss.gwt.elemento.core.EventType.bind;
 import static org.jboss.gwt.elemento.core.EventType.change;",2019-05-14T09:46:28Z,195
"@@ -40,6 +40,7 @@
 import org.jboss.hal.client.deployment.wizard.UploadDeploymentStep;
 import org.jboss.hal.client.deployment.wizard.UploadState;
 import org.jboss.hal.config.Environment;
+import org.jboss.hal.core.CrudOperations;
 import org.jboss.hal.core.SuccessfulOutcome;
 import org.jboss.hal.core.deployment.Content;
 import org.jboss.hal.core.deployment.Deployment.Status;
@@ -89,6 +90,7 @@
 import static org.jboss.hal.client.deployment.wizard.UploadState.NAMES;
 import static org.jboss.hal.client.deployment.wizard.UploadState.UPLOAD;
 import static org.jboss.hal.core.deployment.Deployment.Status.OK;
+import static org.jboss.hal.core.finder.FinderColumn.RefreshMode.CLEAR_SELECTION;
 import static org.jboss.hal.core.finder.FinderColumn.RefreshMode.RESTORE_SELECTION;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.flow.Flow.series;
@@ -119,6 +121,7 @@ public ServerGroupDeploymentColumn(Finder finder,
             EventBus eventBus,
             Dispatcher dispatcher,
             Places places,
+            CrudOperations crud,
             ServerActions serverActions,
             StatementContext statementContext,
             MetadataRegistry metadataRegistry,
@@ -274,8 +277,12 @@ public List<ItemAction<ServerGroupDeployment>> actions() {
                 }
                 AddressTemplate template = SERVER_GROUP_DEPLOYMENT_TEMPLATE
                         .replaceWildcards(statementContext.selectedServerGroup());
-                actions.add(itemActionFactory.remove(Names.DEPLOYMENT, item.getName(),
-                        template, SERVER_GROUP_DEPLOYMENT_TEMPLATE, ServerGroupDeploymentColumn.this));
+                actions.add(new ItemAction.Builder<ServerGroupDeployment>()
+                        .title(resources.constants().undeploy())
+                        .handler(item -> crud.remove(Names.DEPLOYMENT, item.getName(), template,
+                                () -> refresh(CLEAR_SELECTION)))
+                        .constraint(Constraint.executable(SERVER_GROUP_DEPLOYMENT_TEMPLATE, REMOVE))
+                        .build());
                 return actions;
             }
         });",2018-10-05T14:52:59Z,81
"@@ -37,6 +37,7 @@
 import org.jboss.hal.client.deployment.wizard.UploadElement;
 import org.jboss.hal.client.deployment.wizard.UploadState;
 import org.jboss.hal.config.Environment;
+import org.jboss.hal.core.CrudOperations;
 import org.jboss.hal.core.SuccessfulOutcome;
 import org.jboss.hal.core.deployment.Deployment;
 import org.jboss.hal.core.deployment.Deployment.Status;
@@ -80,6 +81,7 @@
 import static org.jboss.hal.client.deployment.StandaloneDeploymentColumn.DEPLOYMENT_ADDRESS;
 import static org.jboss.hal.client.deployment.wizard.UploadState.NAMES;
 import static org.jboss.hal.client.deployment.wizard.UploadState.UPLOAD;
+import static org.jboss.hal.core.finder.FinderColumn.RefreshMode.CLEAR_SELECTION;
 import static org.jboss.hal.core.finder.FinderColumn.RefreshMode.RESTORE_SELECTION;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.flow.Flow.series;
@@ -109,6 +111,7 @@ public StandaloneDeploymentColumn(Finder finder,
             Environment environment,
             ServerActions serverActions,
             Dispatcher dispatcher,
+            CrudOperations crud,
             StatementContext statementContext,
             EventBus eventBus,
             MetadataRegistry metadataRegistry,
@@ -234,8 +237,12 @@ public List<ItemAction<Deployment>> actions() {
                             .constraint(Constraint.executable(DEPLOYMENT_TEMPLATE, EXPLODE))
                             .build());
                 }
-                actions.add(itemActionFactory.remove(Names.DEPLOYMENT, item.getName(), DEPLOYMENT_TEMPLATE,
-                        StandaloneDeploymentColumn.this));
+                actions.add(new ItemAction.Builder<Deployment>()
+                        .title(resources.constants().undeploy())
+                        .handler(item -> crud.remove(Names.DEPLOYMENT, item.getName(), DEPLOYMENT_TEMPLATE,
+                                () -> refresh(CLEAR_SELECTION)))
+                        .constraint(Constraint.executable(DEPLOYMENT_TEMPLATE, REMOVE))
+                        .build());
                 return actions;
             }
         });",2018-10-05T14:52:59Z,82
"@@ -53,6 +53,7 @@ public class LabelBuilder {
             .put(""io"", ""IO"")
             .put(""jaas"", ""JAAS"")
             .put(""jacc"", ""JACC"")
+            .put(""jaspi"", ""JASPI"")
             .put(""jaxrs"", ""JAX-RS"")
             .put(""jboss"", ""JBoss"")
             .put(""jdbc"", ""JDBC"")",2018-10-05T14:52:59Z,83
"@@ -59,7 +59,7 @@ public boolean isEmpty() {
 
     @Override
     public String allowedCharacters() {
-        return ""- . : @ ; = ? ! # $ % & [ ] ( )"";
+        return ""- . : @ ; = ? ! # $ % & [ ] ( ) *"";
     }
 
     @Override
@@ -94,7 +94,7 @@ public void removeTag(Map<String, String> tag) {
     static class MapMapping implements TagsMapping<Map<String, String>> {
 
         private static final RegExp REGEX = RegExp.compile(
-                ""^([\\w\\-\\.\\/]+)=([\\w\\-\\.\\/:\\@\\;\\=\\?\\!\\#\\$\\%\\&\\[\\]\\,\\(\\)]+)$""); //NON-NLS
+                ""^([\\w\\-\\.\\/]+)=([\\w\\-\\.\\/:\\@\\;\\=\\?\\!\\#\\$\\%\\&\\[\\]\\,\\(\\)\\*]+)$""); //NON-NLS
         private static final String EQ = ""="";
 
         @Override",2020-03-03T11:07:36Z,196
"@@ -15,10 +15,10 @@
  */
 package org.jboss.hal.client.configuration.subsystem.elytron;
 
+import java.util.ArrayList;
 import java.util.EnumSet;
 import java.util.List;
 
-import com.google.common.base.Splitter;
 import com.google.gwt.core.client.GWT;
 import com.google.gwt.regexp.shared.RegExp;
 import elemental2.dom.HTMLElement;
@@ -79,6 +79,22 @@ public boolean isEmpty() {
         return getValue() == null || !getValue().isDefined();
     }
 
+    @Override
+    public void addTag(ModelNode tag) {
+        ModelNode value = getValue();
+        ModelNode newValue = value != null ? value.clone() : new ModelNode();
+        newValue.add(tag.get(0));
+        modifyValue(newValue);
+    }
+
+    @Override
+    public void removeTag(ModelNode tag) {
+        List<ModelNode> list = new ArrayList<>(getValue().asList());
+        list.remove(tag.get(0));
+        ModelNode newValue = new ModelNode();
+        newValue.set(list);
+        modifyValue(newValue);
+    }
 
     private static class MapMapping implements TagsMapping<ModelNode> {
 
@@ -98,24 +114,16 @@ public Validator validator() {
         }
 
         @Override
-        public ModelNode parse(final String cst) {
-            ModelNode result = new ModelNode();
-
-            if (cst != null) {
-                Splitter.on(',')
-                        .trimResults()
-                        .omitEmptyStrings()
-                        .withKeyValueSeparator('=')
-                        .split(cst)
-                        .forEach((key, value) -> {
-                            ModelNode kv = new ModelNode();
-                            kv.get(propAttribute).set(key);
-                            kv.get(valueAttribute).set(value);
-                            result.add(kv);
-                        });
-                return result;
-            }
-            return result;
+        public ModelNode parseTag(final String tag) {
+            String[] parts = tag.split(""="");
+
+            ModelNode kv = new ModelNode();
+            kv.get(propAttribute).set(parts[0]);
+            kv.get(valueAttribute).set(parts[1]);
+
+            ModelNode node = new ModelNode();
+            node.add(kv);
+            return node;
         }
 
         @Override",2019-07-17T12:05:26Z,197
"@@ -15,10 +15,10 @@
  */
 package org.jboss.hal.client.configuration.subsystem.elytron;
 
+import java.util.ArrayList;
 import java.util.EnumSet;
 import java.util.List;
 
-import com.google.common.base.Splitter;
 import com.google.gwt.core.client.GWT;
 import com.google.gwt.regexp.shared.RegExp;
 import elemental2.dom.HTMLElement;
@@ -81,6 +81,22 @@ public boolean isEmpty() {
         return getValue() == null || !getValue().isDefined();
     }
 
+    @Override
+    public void addTag(ModelNode tag) {
+        ModelNode value = getValue();
+        ModelNode newValue = value != null ? value.clone() : new ModelNode();
+        newValue.add(tag.get(0));
+        modifyValue(newValue);
+    }
+
+    @Override
+    public void removeTag(ModelNode tag) {
+        List<ModelNode> list = new ArrayList<>(getValue().asList());
+        list.remove(tag.get(0));
+        ModelNode newValue = new ModelNode();
+        newValue.set(list);
+        modifyValue(newValue);
+    }
 
     private static class MapMapping implements TagsMapping<ModelNode> {
 
@@ -94,25 +110,17 @@ public Validator validator() {
         }
 
         @Override
-        public ModelNode parse(final String cst) {
-            ModelNode result = new ModelNode();
-            if (cst != null) {
-                Splitter.on(',')
-                        .trimResults()
-                        .omitEmptyStrings()
-                        .withKeyValueSeparator('=')
-                        .split(cst)
-                        .forEach((key, value) -> {
-                            ModelNode kv = new ModelNode();
-                            kv.get(NAME).set(key);
-                            for (String v : value.split(VALUE_SEPARATOR)) {
-                                kv.get(VALUE).add(v);
-                            }
-                            result.add(kv);
-                        });
-                return result;
+        public ModelNode parseTag(final String tag) {
+            String[] parts = tag.split(""="");
+            ModelNode kv = new ModelNode();
+            kv.get(NAME).set(parts[0]);
+            for (String v : parts[1].split(VALUE_SEPARATOR)) {
+                kv.get(VALUE).add(v);
             }
-            return result;
+
+            ModelNode node = new ModelNode();
+            node.add(kv);
+            return node;
         }
 
         @Override",2019-07-17T12:05:26Z,15
"@@ -15,10 +15,10 @@
  */
 package org.jboss.hal.client.configuration.subsystem.elytron;
 
+import java.util.ArrayList;
 import java.util.EnumSet;
 import java.util.List;
 
-import com.google.common.base.Splitter;
 import com.google.gwt.core.client.GWT;
 import com.google.gwt.regexp.shared.RegExp;
 import elemental2.dom.HTMLElement;
@@ -60,6 +60,22 @@ public void attach() {
         }
     }
 
+    @Override
+    public void addTag(ModelNode tag) {
+        ModelNode value = getValue();
+        ModelNode newValue = value != null ? value.clone() : new ModelNode();
+        newValue.add(tag.get(0));
+        modifyValue(newValue);
+    }
+
+    @Override
+    public void removeTag(ModelNode tag) {
+        List<ModelNode> list = new ArrayList<>(getValue().asList());
+        list.remove(tag.get(0));
+        ModelNode newValue = new ModelNode();
+        newValue.set(list);
+        modifyValue(newValue);
+    }
 
     private static class MapMapping implements TagsMapping<ModelNode> {
 
@@ -72,23 +88,17 @@ public TagsManager.Validator validator() {
         }
 
         @Override
-        public ModelNode parse(final String cst) {
-            ModelNode result = new ModelNode();
-            if (cst != null) {
-                Splitter.on("","")
-                        .trimResults()
-                        .omitEmptyStrings()
-                        .withKeyValueSeparator('=')
-                        .split(cst)
-                        .forEach((key, value) -> {
-                            ModelNode multiValue = new ModelNode();
-                            for (String v: value.split(VALUE_SEPARATOR)) {
-                                multiValue.add(v);
-                            }
-                            result.add(key, multiValue);
-                        });
+        public ModelNode parseTag(final String tag) {
+            String[] parts = tag.split(""="");
+
+            ModelNode multiValue = new ModelNode();
+            for (String v: parts[1].split(VALUE_SEPARATOR)) {
+                multiValue.add(v);
             }
-            return result;
+
+            ModelNode node = new ModelNode();
+            node.add(parts[0], multiValue);
+            return node;
         }
 
         @Override",2019-07-17T12:05:26Z,198
"@@ -22,7 +22,6 @@
 import java.util.Map;
 
 import com.google.common.base.Joiner;
-import com.google.common.base.Splitter;
 import com.google.gwt.core.client.GWT;
 import com.google.gwt.regexp.shared.RegExp;
 import elemental2.dom.HTMLElement;
@@ -61,6 +60,25 @@ public void attach() {
         }
     }
 
+    @Override
+    public void addTag(Map<String, List<String>> tag) {
+        Map<String, List<String>> value = getValue();
+        Map<String, List<String>> newValue = new HashMap<>();
+        if (value != null) {
+            newValue.putAll(value);
+        }
+        Map.Entry<String, List<String>> parsed = tag.entrySet().iterator().next();
+        newValue.put(parsed.getKey(), parsed.getValue());
+        modifyValue(newValue);
+    }
+
+    @Override
+    public void removeTag(Map<String, List<String>> tag) {
+        Map<String, List<String>> newValue = new HashMap<>(getValue());
+        newValue.remove(tag.keySet().iterator().next());
+        modifyValue(newValue);
+    }
+
 
     private static class MapMapping implements TagsMapping<Map<String, List<String>>> {
 
@@ -73,19 +91,12 @@ public TagsManager.Validator validator() {
         }
 
         @Override
-        public Map<String, List<String>> parse(final String cst) {
-            Map<String, List<String>> result = new HashMap<>();
-            if (cst != null) {
-                Splitter.on("","")
-                        .trimResults()
-                        .omitEmptyStrings()
-                        .withKeyValueSeparator('=')
-                        .split(cst)
-                        .forEach((key, value) -> {
-                            result.put(key, asList(value.split(VALUE_SEPARATOR)));
-                        });
-            }
-            return result;
+        public Map<String, List<String>> parseTag(final String tag) {
+            String[] parts = tag.split(""="");
+
+            Map<String, List<String>> map = new HashMap<>();
+            map.put(parts[0], asList(parts[1].split(VALUE_SEPARATOR)));
+            return map;
         }
 
         @Override",2019-07-17T12:05:26Z,199
"@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an ""AS IS"" BASIS,
@@ -15,10 +15,11 @@
  */
 package org.jboss.hal.ballroom.form;
 
+import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.EnumSet;
 import java.util.List;
 
-import com.google.common.base.Splitter;
 import com.google.gwt.core.client.GWT;
 import org.jboss.hal.resources.Messages;
 
@@ -28,7 +29,7 @@ public class ListItem extends TagsItem<List<String>> {
 
     private static final Messages MESSAGES = GWT.create(Messages.class);
 
-    public ListItem(final String name, final String label) {
+    public ListItem(String name, String label) {
         super(name, label, MESSAGES.listHint(),
                 EnumSet.of(DEFAULT, DEPRECATED, ENABLED, INVALID, REQUIRED, RESTRICTED, SUGGESTIONS),
                 new ListMapping());
@@ -39,24 +40,39 @@ public boolean isEmpty() {
         return getValue() == null || getValue().isEmpty();
     }
 
+    @Override
+    public void addTag(List<String> tag) {
+        List<String> value = getValue();
+        List<String> newValue = new ArrayList<>();
+        if (value != null) {
+            newValue.addAll(value);
+        }
+        newValue.addAll(tag);
+        modifyValue(newValue);
+    }
+
+    @Override
+    public void removeTag(List<String> tag) {
+        List<String> newValue = new ArrayList<>(getValue());
+        newValue.removeAll(tag);
+        modifyValue(newValue);
+    }
 
     private static class ListMapping implements TagsMapping<List<String>> {
 
         @Override
-        public List<String> parse(final String cst) {
-            return Splitter.on(',')
-                    .trimResults()
-                    .omitEmptyStrings()
-                    .splitToList(cst);
+        public List<String> parseTag(final String tag) {
+            List<String> list = Arrays.asList(tag);
+            return list;
         }
 
         @Override
-        public List<String> tags(final List<String> value) {
+        public List<String> tags(List<String> value) {
             return value;
         }
 
         @Override
-        public String asString(final List<String> value) {
+        public String asString(List<String> value) {
             return String.join("", "", value);
         }
     }",2019-07-17T12:05:26Z,200
"@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an ""AS IS"" BASIS,
@@ -21,7 +21,6 @@
 import java.util.List;
 import java.util.Map;
 
-import com.google.common.base.Splitter;
 import com.google.gwt.core.client.GWT;
 import com.google.gwt.regexp.shared.RegExp;
 import com.google.gwt.safehtml.shared.SafeHtml;
@@ -31,7 +30,6 @@
 
 import static elemental2.dom.DomGlobal.document;
 import static java.util.Collections.emptyList;
-import static java.util.Collections.emptyMap;
 import static java.util.stream.Collectors.joining;
 import static org.jboss.hal.ballroom.form.Decoration.*;
 import static org.jboss.hal.ballroom.form.Form.State.READONLY;
@@ -40,16 +38,17 @@ public class PropertiesItem extends TagsItem<Map<String, String>> {
 
     private static final Messages MESSAGES = GWT.create(Messages.class);
 
-    public PropertiesItem(final String name) {
+    public PropertiesItem(String name) {
         this(name, new LabelBuilder().label(name), MESSAGES.propertiesHint());
     }
 
-    public PropertiesItem(final String name, final String label) {
+    public PropertiesItem(String name, String label) {
         this(name, label, MESSAGES.propertiesHint());
     }
 
-    public PropertiesItem(final String name, final String label, final SafeHtml inputHelp) {
-        super(name, label, inputHelp, EnumSet.of(DEFAULT, DEPRECATED, ENABLED, INVALID, REQUIRED, RESTRICTED, SUGGESTIONS),
+    public PropertiesItem(String name, String label, SafeHtml inputHelp) {
+        super(name, label, inputHelp,
+                EnumSet.of(DEFAULT, DEPRECATED, ENABLED, INVALID, REQUIRED, RESTRICTED, SUGGESTIONS),
                 new MapMapping());
     }
 
@@ -60,7 +59,7 @@ public boolean isEmpty() {
 
     @Override
     public String allowedCharacters() {
-        return ""- . : @ ; = ? ! # $ % &"";
+        return ""- . : @ ; = ? ! # $ % & [ ]"";
     }
 
     @Override
@@ -73,9 +72,29 @@ public void attach() {
         }
     }
 
-    private static class MapMapping implements TagsMapping<Map<String, String>> {
+    @Override
+    public void addTag(Map<String, String> tag) {
+        Map<String, String> value = getValue();
+        Map<String, String> newValue = new HashMap<>();
+        if (value != null) {
+            newValue.putAll(value);
+        }
+        Map.Entry<String, String> tagEntry = tag.entrySet().iterator().next();
+        newValue.put(tagEntry.getKey(), tagEntry.getValue());
+        modifyValue(newValue);
+    }
+
+    @Override
+    public void removeTag(Map<String, String> tag) {
+        Map<String, String> newValue = new HashMap<>(getValue());
+        newValue.remove(tag.keySet().iterator().next());
+        modifyValue(newValue);
+    }
 
-        private static final RegExp REGEX = RegExp.compile(""^([\\w\\-\\.\\/]+)=([\\w\\-\\.\\/:\\@\\;\\=\\?\\!\\#\\$\\%\\&]+)$""); //NON-NLS
+    static class MapMapping implements TagsMapping<Map<String, String>> {
+
+        private static final RegExp REGEX = RegExp.compile(
+                ""^([\\w\\-\\.\\/]+)=([\\w\\-\\.\\/:\\@\\;\\=\\?\\!\\#\\$\\%\\&\\[\\]\\,]+)$""); //NON-NLS
         private static final String EQ = ""="";
 
         @Override
@@ -84,28 +103,17 @@ public TagsManager.Validator validator() {
         }
 
         @Override
-        public Map<String, String> parse(final String cst) {
-            if (cst != null) {
-                // split the full cst at the comma
-                Map<String, String> tags = new HashMap<>();
-                Iterable<String> cstParts = Splitter.on(',')
-                        .trimResults()
-                        .omitEmptyStrings()
-                        .split(cst);
-                // split each key=value pair by the first '=' character
-                for (String part : cstParts) {
-                    int firstEq = part.indexOf(EQ);
-                    String keyPart = part.substring(0, firstEq);
-                    String valuePart = part.substring(firstEq + 1);
-                    tags.put(keyPart, valuePart);
-                }
-                return tags;
-            }
-            return emptyMap();
+        public Map<String, String> parseTag(String tag) {
+            int firstEq = tag.indexOf(EQ);
+            String keyPart = tag.substring(0, firstEq);
+            String valuePart = tag.substring(firstEq + 1);
+            Map<String, String> map = new HashMap<>();
+            map.put(keyPart, valuePart);
+            return map;
         }
 
         @Override
-        public List<String> tags(final Map<String, String> value) {
+        public List<String> tags(Map<String, String> value) {
             if (value.isEmpty()) {
                 return emptyList();
             }
@@ -117,7 +125,7 @@ public List<String> tags(final Map<String, String> value) {
         }
 
         @Override
-        public String asString(final Map<String, String> value) {
+        public String asString(Map<String, String> value) {
             // the \n line separator, works as there is a style: whitespace pre added in attach() method
             return value.entrySet().stream()
                     .map(entry -> entry.getKey() + "" \u21D2 "" + entry.getValue())",2019-07-17T12:05:26Z,196
"@@ -75,6 +75,8 @@ public void onSuggest(String suggestion) {
         }
     }
 
+    public abstract void addTag(T tag);
+    public abstract void removeTag(T tag);
 
     private class TagsReadOnlyAppearance extends ReadOnlyAppearance<T> {
 
@@ -99,6 +101,8 @@ private class TagsEditingAppearance extends EditingAppearance<T> {
         private final HTMLElement tagsContainer;
         private final TagsMapping<T> mapping;
 
+        private boolean skipAdding;
+
         TagsEditingAppearance(HTMLInputElement inputElement, SafeHtml inputHelp,
                 Set<Decoration> supportedDecorations, TagsMapping<T> mapping) {
             super(supportedDecorations, inputElement);
@@ -130,21 +134,32 @@ public void attach() {
 
             TagsManager.Api api = TagsManager.Api.element(inputElement);
             api.tagsManager(options);
-            api.onRefresh((event, cst) -> {
-                modifyValue(mapping.parse(cst));
-                clearError();
-            });
             api.onInvalid((event, cst) -> {
                 String message = allowedCharacters() != null ? MESSAGES.invalidTagFormat(allowedCharacters())
                         :  MESSAGES.invalidFormat();
                 showError(message);
             });
+
+            api.onAdded((event, tag) -> {
+                if (skipAdding) {
+                    return;
+                }
+                addTag(mapping.parseTag(tag));
+                clearError();
+            });
+
+            api.onRemoved((event, tag) -> {
+                removeTag(mapping.parseTag(tag));
+                clearError();
+            });
         }
 
         @Override
         public void showValue(T value) {
             if (attached) {
+                skipAdding = true;
                 TagsManager.Api.element(inputElement).setTags(mapping.tags(value));
+                skipAdding = false;
             } else {
                 inputElement.value = asString(value);
             }",2019-07-17T12:05:26Z,201
"@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an ""AS IS"" BASIS,
@@ -38,7 +38,8 @@ public class TagsManager {
 
     private static final String EMPTY = ""empty"";
     private static final String PUSH_TAG = ""pushTag"";
-    private static final String REFRESH_EVENT = ""tm:refresh"";
+    private static final String ADDED_EVENT = ""tm:pushed"";
+    private static final String REMOVED_EVENT = ""tm:spliced"";
     private static final String INVALID_EVENT = ""tm:invalid"";
     private static final String DUPLICATED_EVENT = ""tm:duplicated"";
     private static final String TAGS = ""tags"";
@@ -55,32 +56,35 @@ public interface Validator {
 
     @JsFunction
     @FunctionalInterface
-    interface RefreshListener {
+    interface InvalidListener {
 
         /**
          * @param cst (c)omma (s)eparated (t)ags
          */
-        void onRefresh(Event event, String cst);
+        void onInvalid(Event event, String cst);
     }
 
+
     @JsFunction
     @FunctionalInterface
-    interface InvalidListener {
+    interface DuplicatedListener {
 
         /**
          * @param cst (c)omma (s)eparated (t)ags
          */
-        void onInvalid(Event event, String cst);
+        void onDuplicated(Event event, String cst);
     }
 
     @JsFunction
     @FunctionalInterface
-    interface DuplicatedListener {
+    interface AddedListener {
+        void onAdded(Event event, String tag);
+    }
 
-        /**
-         * @param cst (c)omma (s)eparated (t)ags
-         */
-        void onDuplicated(Event event, String cst);
+    @JsFunction
+    @FunctionalInterface
+    interface RemovedListener {
+        void onRemoved(Event event, String tag);
     }
 
 
@@ -114,10 +118,14 @@ public static class Api {
         @JsMethod(namespace = GLOBAL, name = ""$"")
         public static native Api element(HTMLInputElement element);
 
-        public native void on(String event, RefreshListener refreshListener);
         public native void on(String event, InvalidListener invalidListener);
+
         public native void on(String event, DuplicatedListener duplicatedListener);
 
+        public native void on(String event, AddedListener addedListener);
+
+        public native void on(String event, RemovedListener removedListener);
+
         @JsMethod(name = TAGS_MANAGER)
         public native String[] tagsManagerGetTags(String getTags);
 
@@ -128,11 +136,6 @@ public static class Api {
 
         public native void tagsManager(Options options);
 
-        @JsOverlay
-        final void onRefresh(RefreshListener refreshListener) {
-            on(REFRESH_EVENT, refreshListener);
-        }
-
         @JsOverlay
         final void onInvalid(InvalidListener invalidListener) {
             on(INVALID_EVENT, invalidListener);
@@ -143,6 +146,16 @@ final void onDuplicated(DuplicatedListener duplicatedListener) {
             on(DUPLICATED_EVENT, duplicatedListener);
         }
 
+        @JsOverlay
+        final void onAdded(AddedListener addedListener) {
+            on(ADDED_EVENT, addedListener);
+        }
+
+        @JsOverlay
+        final void onRemoved(RemovedListener removedListener) {
+            on(REMOVED_EVENT, removedListener);
+        }
+
         @JsOverlay
         final void addTag(String tag) {
             tagsManager(PUSH_TAG, tag);",2019-07-17T12:05:26Z,92
"@@ -30,7 +30,7 @@ default Validator validator() {
         return null;
     }
 
-    T parse(String cst);
+    T parseTag(String tag);
 
     List<String> tags(T value);
 ",2019-07-17T12:05:26Z,202
"@@ -160,6 +160,7 @@
 import org.jboss.hal.client.tools.MacroEditorView;
 import org.jboss.hal.client.tools.ModelBrowserPresenter;
 import org.jboss.hal.client.tools.ModelBrowserView;
+import org.jboss.hal.core.ExceptionHandler;
 import org.jboss.hal.core.mvp.HalPlaceManager;
 import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.spi.GinModule;",2018-02-01T16:28:42Z,44
"@@ -20,10 +20,10 @@
 import com.gwtplatform.mvp.client.Bootstrapper;
 import com.gwtplatform.mvp.client.proxy.PlaceManager;
 import elemental2.dom.Event;
-import org.jboss.hal.client.ExceptionHandler;
 import org.jboss.hal.client.bootstrap.endpoint.EndpointManager;
 import org.jboss.hal.client.bootstrap.tasks.BootstrapTasks;
 import org.jboss.hal.config.Endpoints;
+import org.jboss.hal.core.ExceptionHandler;
 import org.jetbrains.annotations.NonNls;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;",2018-02-01T16:28:42Z,22
"@@ -15,13 +15,29 @@
  */
 package org.jboss.hal.client.bootstrap;
 
+import com.google.gwt.core.client.GWT;
 import com.gwtplatform.mvp.client.PreBootstrapper;
-import org.jboss.hal.client.ExceptionHandler;
+import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.hal.config.Endpoints;
+import org.jboss.hal.resources.Names;
+import org.jetbrains.annotations.NonNls;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import static elemental2.dom.DomGlobal.document;
 
 public class HalPreBootstrapper implements PreBootstrapper {
 
+    @NonNls private static final Logger logger = LoggerFactory.getLogger(HalPreBootstrapper.class);
+
     @Override
     public void onPreBootstrap() {
-        ExceptionHandler.beforeBootstrap();
+        GWT.setUncaughtExceptionHandler(e -> {
+            LoadingPanel.get().off();
+            String errorMessage = e != null ? e.getMessage() : Names.NOT_AVAILABLE;
+            logger.error(""Uncaught bootstrap error: {}"", errorMessage);
+            Elements.removeChildrenFrom(document.body);
+            document.body.appendChild(BootstrapFailed.create(errorMessage, Endpoints.INSTANCE).asElement());
+        });
     }
 }",2018-02-01T16:28:42Z,73
"@@ -58,6 +58,12 @@ public class Core {
     @JsIgnore
     public static Core INSTANCE;
 
+    @JsIgnore
+    public static void setPendingLifecycleAction(boolean value) {
+        Dispatcher.setPendingLifecycleAction(value);
+        ExceptionHandler.setPendingLifecycleAction(value);
+    }
+
     private final CrudOperations crud;
     private final Dispatcher dispatcher;
     private final Endpoints endpoints;
@@ -71,16 +77,16 @@ public class Core {
 
     @Inject
     @JsIgnore
-    public Core(final CrudOperations crud,
-            final Dispatcher dispatcher,
-            final Endpoints endpoints,
-            final Environment environment,
-            final EventBus eventBus,
-            final ExtensionRegistry extensionRegistry,
-            final MetadataProcessor metadataProcessor,
-            final MetadataRegistry metadataRegistry,
-            final StatementContext statementContext,
-            final TableButtonFactory tableButtonFactory) {
+    public Core(CrudOperations crud,
+            Dispatcher dispatcher,
+            Endpoints endpoints,
+            Environment environment,
+            EventBus eventBus,
+            ExtensionRegistry extensionRegistry,
+            MetadataProcessor metadataProcessor,
+            MetadataRegistry metadataRegistry,
+            StatementContext statementContext,
+            TableButtonFactory tableButtonFactory) {
         this.crud = crud;
         this.dispatcher = dispatcher;
         this.endpoints = endpoints;
@@ -295,7 +301,7 @@ public void jsSuccess(String message) {
      */
     @JsMethod(name = ""table"")
     @EsReturn(""TableBuilder"")
-    public ModelNodeTable.Builder<ModelNode> jsTable(final Object meta) {
+    public ModelNodeTable.Builder<ModelNode> jsTable(Object meta) {
         return new ModelNodeTable.Builder<>(Ids.build(Ids.uniqueId(), Ids.TAB), jsMetadata(""table"", meta));
     }
 ",2018-02-01T16:28:42Z,203
"@@ -13,17 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.jboss.hal.client;
+package org.jboss.hal.core;
 
 import javax.inject.Inject;
 
 import com.google.gwt.core.client.GWT;
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.client.proxy.PlaceManager;
 import org.jboss.gwt.elemento.core.Elements;
-import org.jboss.hal.client.bootstrap.BootstrapFailed;
-import org.jboss.hal.client.bootstrap.LoadingPanel;
-import org.jboss.hal.config.Endpoints;
 import org.jboss.hal.flow.Progress;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
@@ -40,17 +37,13 @@
 public class ExceptionHandler {
 
     @NonNls private static final Logger logger = LoggerFactory.getLogger(ExceptionHandler.class);
+    private static boolean pendingLifecycleAction = false;
 
-    public static void beforeBootstrap() {
-        GWT.setUncaughtExceptionHandler(e -> {
-            LoadingPanel.get().off();
-            String errorMessage = e != null ? e.getMessage() : Names.NOT_AVAILABLE;
-            logger.error(""Uncaught bootstrap error: {}"", errorMessage);
-            document.body.appendChild(BootstrapFailed.create(errorMessage, Endpoints.INSTANCE).asElement());
-        });
+    public static void setPendingLifecycleAction(boolean value) {
+        pendingLifecycleAction = value;
+        logger.debug(""ExceptionHandler.pendingLifecycleAction = {}"", pendingLifecycleAction);
     }
 
-
     private final EventBus eventBus;
     private final PlaceManager placeManager;
     private final Progress progress;
@@ -69,13 +62,15 @@ public ExceptionHandler(EventBus eventBus,
 
     public void afterBootstrap() {
         GWT.setUncaughtExceptionHandler(e -> {
-            String errorMessage = e != null ? e.getMessage() : Names.NOT_AVAILABLE;
-            logger.error(""Uncaught exception: {}"", errorMessage);
-            placeManager.unlock();
-            progress.finish();
-            stopProgress();
-            MessageEvent.fire(eventBus,
-                    Message.error(resources.messages().unknownError(), errorMessage));
+            if (!pendingLifecycleAction) {
+                String errorMessage = e != null ? e.getMessage() : Names.NOT_AVAILABLE;
+                logger.error(""Uncaught exception: {}"", errorMessage);
+                placeManager.unlock();
+                progress.finish();
+                stopProgress();
+                MessageEvent.fire(eventBus,
+                        Message.error(resources.messages().unknownError(), errorMessage));
+            }
         });
     }
 ",2018-02-01T16:28:42Z,2
"@@ -29,6 +29,7 @@
 import org.jboss.hal.ballroom.dialog.Dialog;
 import org.jboss.hal.ballroom.dialog.DialogFactory;
 import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.core.Core;
 import org.jboss.hal.core.mbui.form.OperationFormBuilder;
 import org.jboss.hal.core.runtime.Action;
 import org.jboss.hal.core.runtime.Result;
@@ -148,7 +149,7 @@ public void suspend(ServerGroup serverGroup) {
         if (!startedServers.isEmpty()) {
             metadataProcessor.lookup(serverGroupTemplate(serverGroup), progress.get(), new MetadataCallback() {
                 @Override
-                public void onMetadata(final Metadata metadata) {
+                public void onMetadata(Metadata metadata) {
                     String id = Ids.build(SUSPEND_SERVERS, serverGroup.getName(), Ids.FORM);
                     Form<ModelNode> form = new OperationFormBuilder<>(id, metadata, SUSPEND_SERVERS).build();
 
@@ -186,7 +187,7 @@ public void onMetadata(final Metadata metadata) {
                 }
 
                 @Override
-                public void onError(final Throwable error) {
+                public void onError(Throwable error) {
                     MessageEvent.fire(eventBus,
                             Message.error(resources.messages().metadataError(), error.getMessage()));
                 }
@@ -223,7 +224,7 @@ public void stop(ServerGroup serverGroup) {
         if (!startedServers.isEmpty()) {
             metadataProcessor.lookup(serverGroupTemplate(serverGroup), progress.get(), new MetadataCallback() {
                 @Override
-                public void onMetadata(final Metadata metadata) {
+                public void onMetadata(Metadata metadata) {
                     String id = Ids.build(STOP_SERVERS, serverGroup.getName(), Ids.FORM);
                     Form<ModelNode> form = new OperationFormBuilder<>(id, metadata, STOP_SERVERS)
                             .include(TIMEOUT).build();
@@ -264,7 +265,7 @@ public void onMetadata(final Metadata metadata) {
                 }
 
                 @Override
-                public void onError(final Throwable error) {
+                public void onError(Throwable error) {
                     MessageEvent
                             .fire(eventBus, Message.error(resources.messages().metadataError(), error.getMessage()));
                 }
@@ -353,13 +354,13 @@ private void finish(ServerGroup serverGroup, List<Server> servers, Result result
     }
 
     private void markAsPending(ServerGroup serverGroup) {
-        Dispatcher.setPendingLifecycleAction(true);
+        Core.setPendingLifecycleAction(true);
         pendingServerGroups.put(serverGroup.getName(), serverGroup);
         logger.debug(""Mark server group {} as pending"", serverGroup.getName());
     }
 
     private void clearPending(ServerGroup serverGroup) {
-        Dispatcher.setPendingLifecycleAction(false);
+        Core.setPendingLifecycleAction(false);
         pendingServerGroups.remove(serverGroup.getName());
         logger.debug(""Clear pending state for server group {}"", serverGroup.getName());
     }
@@ -412,8 +413,8 @@ private class ServerGroupTimeoutCallback implements CompletableSubscriber {
         private final List<Server> servers;
         private final SafeHtml successMessage;
 
-        ServerGroupTimeoutCallback(final ServerGroup serverGroup, final List<Server> servers,
-                final SafeHtml successMessage) {
+        ServerGroupTimeoutCallback(ServerGroup serverGroup, List<Server> servers,
+                SafeHtml successMessage) {
             this.serverGroup = serverGroup;
             this.servers = servers;
             this.successMessage = successMessage;
@@ -442,15 +443,15 @@ private class ServerGroupFailedCallback implements Dispatcher.OnFail {
         private final List<Server> servers;
         private final SafeHtml errorMessage;
 
-        ServerGroupFailedCallback(final ServerGroup serverGroup, final List<Server> servers,
-                final SafeHtml errorMessage) {
+        ServerGroupFailedCallback(ServerGroup serverGroup, List<Server> servers,
+                SafeHtml errorMessage) {
             this.serverGroup = serverGroup;
             this.servers = servers;
             this.errorMessage = errorMessage;
         }
 
         @Override
-        public void onFailed(final Operation operation, final String failure) {
+        public void onFailed(Operation operation, String failure) {
             finish(serverGroup, servers, Result.ERROR, Message.error(errorMessage, failure));
         }
     }
@@ -462,14 +463,14 @@ private class ServerGroupExceptionCallback implements Dispatcher.OnError {
         private final List<Server> servers;
         private final SafeHtml errorMessage;
 
-        ServerGroupExceptionCallback(final ServerGroup serverGroup, final List<Server> servers, SafeHtml errorMessage) {
+        ServerGroupExceptionCallback(ServerGroup serverGroup, List<Server> servers, SafeHtml errorMessage) {
             this.serverGroup = serverGroup;
             this.servers = servers;
             this.errorMessage = errorMessage;
         }
 
         @Override
-        public void onException(final Operation operation, final Throwable exception) {
+        public void onException(Operation operation, Throwable exception) {
             finish(serverGroup, servers, Result.ERROR, Message.error(errorMessage, exception.getMessage()));
         }
     }",2018-02-01T16:28:42Z,96
"@@ -28,6 +28,7 @@
 import org.jboss.hal.ballroom.dialog.Dialog;
 import org.jboss.hal.ballroom.dialog.DialogFactory;
 import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.core.Core;
 import org.jboss.hal.core.mbui.form.OperationFormBuilder;
 import org.jboss.hal.core.runtime.Action;
 import org.jboss.hal.core.runtime.Result;
@@ -65,7 +66,7 @@
 public class HostActions {
 
     private static final int RELOAD_TIMEOUT = 10; // seconds w/o servers
-    private static final int RESTART_TIMEOUT = 15; // seconds w/o servers
+    private static final int RESTART_TIMEOUT = 20; // seconds w/o servers
     @NonNls private static final Logger logger = LoggerFactory.getLogger(HostActions.class);
 
     private static AddressTemplate hostTemplate(Host host) {
@@ -100,10 +101,10 @@ public HostActions(EventBus eventBus,
     // ------------------------------------------------------ reload
 
     @SuppressWarnings(""HardCodedStringLiteral"")
-    public void reload(final Host host) {
+    public void reload(Host host) {
         metadataProcessor.lookup(hostTemplate(host), progress.get(), new MetadataCallback() {
             @Override
-            public void onMetadata(final Metadata metadata) {
+            public void onMetadata(Metadata metadata) {
                 Form<ModelNode> form = new OperationFormBuilder<>(
                         Ids.build(RELOAD_HOST, host.getName(), Ids.FORM), metadata, RELOAD)
                         .include(RESTART_SERVERS)
@@ -157,7 +158,7 @@ public void onMetadata(final Metadata metadata) {
             }
 
             @Override
-            public void onError(final Throwable error) {
+            public void onError(Throwable error) {
                 MessageEvent.fire(eventBus,
                         Message.error(resources.messages().metadataError(), error.getMessage()));
             }
@@ -167,14 +168,14 @@ public void onError(final Throwable error) {
 
     // ------------------------------------------------------ restart
 
-    public void restart(final Host host) {
+    public void restart(Host host) {
         SafeHtml question = host.isDomainController()
                 ? resources.messages().restartDomainControllerQuestion(host.getName())
                 : resources.messages().restartHostControllerQuestion(host.getName());
         restart(host, question);
     }
 
-    public void restart(final Host host, SafeHtml question) {
+    public void restart(Host host, SafeHtml question) {
         DialogFactory.showConfirmation(resources.messages().restart(host.getName()), question, () -> {
             // execute the restart with a little delay to ensure the confirmation dialog is closed
             // before the next dialog is opened (only one modal can be open at a time!)
@@ -275,13 +276,13 @@ private void finish(Host host, List<Server> servers, Result result, Message mess
     }
 
     private void markAsPending(Host host) {
-        Dispatcher.setPendingLifecycleAction(true);
+        Core.setPendingLifecycleAction(true);
         pendingHosts.put(host.getName(), host);
         logger.debug(""Mark host {} as pending"", host.getName());
     }
 
     private void clearPending(Host host) {
-        Dispatcher.setPendingLifecycleAction(false);
+        Core.setPendingLifecycleAction(false);
         pendingHosts.remove(host.getName());
         logger.debug(""Clear pending state for host {}"", host.getName());
     }
@@ -324,14 +325,14 @@ private class HostFailedCallback implements Dispatcher.OnFail {
         private final List<Server> servers;
         private final SafeHtml errorMessage;
 
-        HostFailedCallback(final Host host, final List<Server> servers, final SafeHtml errorMessage) {
+        HostFailedCallback(Host host, List<Server> servers, SafeHtml errorMessage) {
             this.host = host;
             this.servers = servers;
             this.errorMessage = errorMessage;
         }
 
         @Override
-        public void onFailed(final Operation operation, final String failure) {
+        public void onFailed(Operation operation, String failure) {
             finish(host, servers, Result.ERROR, Message.error(errorMessage, failure));
         }
     }
@@ -343,14 +344,14 @@ private class HostExceptionCallback implements Dispatcher.OnError {
         private final List<Server> servers;
         private final SafeHtml errorMessage;
 
-        HostExceptionCallback(final Host host, final List<Server> servers, final SafeHtml errorMessage) {
+        HostExceptionCallback(Host host, List<Server> servers, SafeHtml errorMessage) {
             this.host = host;
             this.servers = servers;
             this.errorMessage = errorMessage;
         }
 
         @Override
-        public void onException(final Operation operation, final Throwable exception) {
+        public void onException(Operation operation, Throwable exception) {
             finish(host, servers, Result.ERROR, Message.error(errorMessage, exception.getMessage()));
         }
     }",2018-02-01T16:28:42Z,39
"@@ -39,6 +39,7 @@
 import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.ballroom.form.SingleSelectBoxItem;
 import org.jboss.hal.ballroom.form.TextBoxItem;
+import org.jboss.hal.core.Core;
 import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
 import org.jboss.hal.core.mbui.dialog.NameItem;
 import org.jboss.hal.core.mbui.form.ModelNodeForm;
@@ -361,7 +362,6 @@ private void reloadRestart(Server server, Operation operation, Action action, in
                             .subscribe(new ServerTimeoutCallback(server, action, successMessage)),
                     new ServerFailedCallback(server, errorMessage),
                     new ServerExceptionCallback(server, errorMessage));
-
         });
     }
 
@@ -688,13 +688,13 @@ private void finish(Server server, Result result, Message message) {
     }
 
     public void markAsPending(Server server) {
-        Dispatcher.setPendingLifecycleAction(true);
+        Core.setPendingLifecycleAction(true);
         pendingServers.put(Ids.hostServer(server.getHost(), server.getName()), server);
         logger.debug(""Mark server {} as pending"", server.getName());
     }
 
     public void clearPending(Server server) {
-        Dispatcher.setPendingLifecycleAction(false);
+        Core.setPendingLifecycleAction(false);
         pendingServers.remove(Ids.hostServer(server.getHost(), server.getName()));
         logger.debug(""Clear pending state for server {}"", server.getName());
     }",2018-02-01T16:28:42Z,93
"@@ -15,13 +15,13 @@
  */
 package org.jboss.hal.dmr.dispatch;
 
-import java.util.concurrent.TimeoutException;
 import java.util.function.Predicate;
 
 import org.jboss.hal.dmr.Composite;
 import org.jboss.hal.dmr.CompositeResult;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Operation;
+import org.jetbrains.annotations.NonNls;
 import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -31,15 +31,18 @@
 
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static java.util.concurrent.TimeUnit.SECONDS;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.FAILED;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.FAILURE_DESCRIPTION;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.OUTCOME;
 
 /** Executes a DMR operation until a specific condition is met or a timeout occurs. */
-public interface TimeoutHandler {
+public class TimeoutHandler {
 
-    int INTERVAL = 500;
-    Logger logger = LoggerFactory.getLogger(TimeoutHandler.class);
+    private static int INTERVAL = 500;
+    @NonNls private static Logger logger = LoggerFactory.getLogger(TimeoutHandler.class);
 
     /** Executes the operation until it successfully returns. */
-    static Completable repeatUntilTimeout(Dispatcher dispatcher, int timeout, Operation operation) {
+    public static Completable repeatUntilTimeout(Dispatcher dispatcher, int timeout, Operation operation) {
         return operation instanceof Composite
                 ? TimeoutHandler.repeatCompositeUntil(dispatcher, timeout, (Composite) operation, null)
                 : TimeoutHandler.repeatOperationUntil(dispatcher, timeout, operation, null);
@@ -50,56 +53,63 @@ static Completable repeatUntilTimeout(Dispatcher dispatcher, int timeout, Operat
      * receives the result of the operation.
      */
     @SuppressWarnings(""HardCodedStringLiteral"")
-    static Completable repeatOperationUntil(Dispatcher dispatcher, int timeout, Operation operation,
+    public static Completable repeatOperationUntil(Dispatcher dispatcher, int timeout, Operation operation,
             @Nullable Predicate<ModelNode> until) {
+        logger.debug(""Repeat {} using {} seconds timeout"", operation.asCli(), timeout);
+
         Single<ModelNode> execution = Single.fromEmitter(em -> dispatcher.execute(operation, em::onSuccess,
-                (op, fail) -> em.onError(new RuntimeException(""Dispatcher failure: "" + fail)),
-                (op, ex) -> em.onError(new RuntimeException(""Dispatcher exception: "" + ex, ex))));
+                (op, fail) -> em.onSuccess(operationFailure(""Dispatcher failure: "" + fail)),
+                (op, ex) -> em.onSuccess(operationFailure(""Dispatcher exception: "" + ex.getMessage()))));
         if (until == null) {
             until = r -> !r.isFailure(); // default: until success
         }
 
         return Observable
                 .interval(INTERVAL, MILLISECONDS) // execute a operation each INTERVAL millis
+                .doOnEach(n -> logger.debug(""#{}: execute {}"", n.getValue(), operation.asCli()))
                 .flatMapSingle(n -> execution, false, 1)
                 .takeUntil(until::test) // until succeeded
-                .toCompletable().timeout(timeout, SECONDS) // wait succeeded or stop after timeout seconds
-                .doOnError(e -> {
-                    String msg = ""Operation "" + operation.asCli() + "" ran into "";
-                    if (e instanceof TimeoutException) {
-                        logger.warn(msg + ""a timeout after "" + timeout + "" seconds"");
-                    } else {
-                        logger.error(msg + ""an error"", e);
-                    }
-                });
+                .toCompletable().timeout(timeout, SECONDS); // wait succeeded or stop after timeout seconds
     }
 
     /**
      * Executes the composite operation until the operation successfully returns and the precondition is met.
      * The precondition receives the composite result of the operation.
      */
     @SuppressWarnings(""HardCodedStringLiteral"")
-    static Completable repeatCompositeUntil(Dispatcher dispatcher, int timeout, Composite composite,
+    public static Completable repeatCompositeUntil(Dispatcher dispatcher, int timeout, Composite composite,
             @Nullable Predicate<CompositeResult> until) {
+        logger.debug(""Repeat {} using {} seconds as timeout"", composite, timeout);
+
         Single<CompositeResult> execution = Single.fromEmitter(em -> dispatcher.execute(composite, em::onSuccess,
-                (op, fail) -> em.onError(new RuntimeException(""Dispatcher failure: "" + fail)),
-                (op, ex) -> em.onError(new RuntimeException(""Dispatcher exception: "" + ex, ex))));
+                (op, fail) -> em.onSuccess(compositeFailure(""Dispatcher failure: "" + fail)),
+                (op, ex) -> em.onSuccess(compositeFailure(""Dispatcher exception: "" + ex.getMessage()))));
         if (until == null) {
             until = r -> r.stream().noneMatch(ModelNode::isFailure); // default: until success
         }
 
         return Observable
                 .interval(INTERVAL, MILLISECONDS) // execute a operation each INTERVAL millis
+                .doOnEach(n -> logger.debug(""#{}: execute {}"", n.getValue(), composite))
                 .flatMapSingle(n -> execution, false, 1)
                 .takeUntil(until::test) // until succeeded
-                .toCompletable().timeout(timeout, SECONDS) // wait succeeded or stop after timeout seconds
-                .doOnError(e -> {
-                    String msg = ""Composite operation "" + composite.asCli() + "" ran into "";
-                    if (e instanceof TimeoutException) {
-                        logger.warn(msg + ""a timeout after "" + timeout + "" seconds"");
-                    } else {
-                        logger.error(msg + ""an error"", e);
-                    }
-                });
+                .toCompletable().timeout(timeout, SECONDS); // wait succeeded or stop after timeout seconds
+    }
+
+    private static ModelNode operationFailure(String reason) {
+        ModelNode node = new ModelNode();
+        node.get(OUTCOME).set(FAILED);
+        node.get(FAILURE_DESCRIPTION).set(reason);
+        return node;
+    }
+
+    private static CompositeResult compositeFailure(String reason) {
+        ModelNode node = new ModelNode();
+        node.get(OUTCOME).set(FAILED);
+        node.get(FAILURE_DESCRIPTION).set(reason);
+        return new CompositeResult(node);
+    }
+
+    private TimeoutHandler() {
     }
 }",2018-02-01T16:28:42Z,1
"@@ -1,6 +1,6 @@
 {
   ""name"": ""org.jboss.hal.npm"",
-  ""version"": ""3.2.5"",
+  ""version"": ""3.2.6"",
   ""lockfileVersion"": 1,
   ""requires"": true,
   ""dependencies"": {",2020-01-10T11:24:26Z,117
"@@ -27,15 +27,17 @@
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.client.proxy.PlaceManager;
 import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
-import elemental2.dom.DomGlobal;
 import elemental2.dom.HTMLElement;
 import org.jboss.gwt.flow.Async;
 import org.jboss.gwt.flow.Function;
 import org.jboss.gwt.flow.FunctionContext;
 import org.jboss.gwt.flow.Outcome;
 import org.jboss.gwt.flow.Progress;
+import org.jboss.hal.ballroom.form.SingleSelectBoxItem;
+import org.jboss.hal.ballroom.form.TextBoxItem;
 import org.jboss.hal.client.runtime.BrowseByColumn;
 import org.jboss.hal.config.Environment;
+import org.jboss.hal.core.CrudOperations;
 import org.jboss.hal.core.finder.ColumnAction;
 import org.jboss.hal.core.finder.ColumnActionFactory;
 import org.jboss.hal.core.finder.Finder;
@@ -48,6 +50,9 @@
 import org.jboss.hal.core.finder.ItemDisplay;
 import org.jboss.hal.core.finder.ItemMonitor;
 import org.jboss.hal.core.finder.ItemsProvider;
+import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
+import org.jboss.hal.core.mbui.dialog.NameItem;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
 import org.jboss.hal.core.mvp.Places;
 import org.jboss.hal.core.runtime.TopologyFunctions;
 import org.jboss.hal.core.runtime.group.ServerGroupSelectionEvent;
@@ -66,7 +71,10 @@
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.ManagementModel;
+import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.meta.processing.MetadataProcessor;
+import org.jboss.hal.meta.processing.SuccessfulMetadataCallback;
 import org.jboss.hal.meta.security.AuthorisationDecision;
 import org.jboss.hal.meta.security.Constraint;
 import org.jboss.hal.meta.security.ElementGuard;
@@ -79,13 +87,14 @@
 import org.jboss.hal.spi.Footer;
 import org.jboss.hal.spi.Requires;
 
-import static elemental2.dom.DomGlobal.alert;
 import static elemental2.dom.DomGlobal.document;
+import static java.util.Arrays.asList;
 import static java.util.Comparator.comparing;
 import static java.util.stream.Collectors.toList;
 import static org.jboss.hal.core.finder.FinderColumn.RefreshMode.RESTORE_SELECTION;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.meta.StatementContext.Tuple.SELECTED_HOST;
+import static org.jboss.hal.resources.Ids.FORM_SUFFIX;
 
 @Column(Ids.SERVER)
 @Requires(value = {""/host=*/server-config=*"", ""/host=*/server=*""}, recursive = false)
@@ -102,6 +111,14 @@ static AddressTemplate serverConfigTemplate(String host) {
     private final Finder finder;
     private final Environment environment;
     private final SecurityContextRegistry securityContextRegistry;
+    private Dispatcher dispatcher;
+    private EventBus eventBus;
+    private Provider<Progress> progress;
+    private StatementContext statementContext;
+    private MetadataProcessor metadataProcessor;
+    private ServerActions serverActions;
+    private CrudOperations crud;
+    private Resources resources;
     private FinderPath refreshPath;
 
     @Inject
@@ -114,10 +131,12 @@ public ServerColumn(final Finder finder,
             final StatementContext statementContext,
             final PlaceManager placeManager,
             final Places places,
+            final MetadataProcessor metadataProcessor,
             final FinderPathFactory finderPathFactory,
             final ColumnActionFactory columnActionFactory,
             final ItemActionFactory itemActionFactory,
             final ServerActions serverActions,
+            final CrudOperations crud,
             final Resources resources) {
 
         super(new Builder<Server>(finder, Ids.SERVER, Names.SERVER)
@@ -166,8 +185,16 @@ public ServerColumn(final Finder finder,
                         resources))
         );
         this.finder = finder;
+        this.dispatcher = dispatcher;
         this.environment = environment;
+        this.eventBus = eventBus;
+        this.progress = progress;
         this.securityContextRegistry = securityContextRegistry;
+        this.statementContext = statementContext;
+        this.metadataProcessor = metadataProcessor;
+        this.serverActions = serverActions;
+        this.crud = crud;
+        this.resources = resources;
 
         ItemsProvider<Server> itemsProvider = (context, callback) -> {
             Function<FunctionContext> serverConfigsFn;
@@ -334,7 +361,7 @@ public List<ItemAction<Server>> actions() {
                     }
                     actions.add(new ItemAction.Builder<Server>()
                             .title(resources.constants().copy())
-                            .handler(itm -> copyServer(itm, BrowseByColumn.browseByHosts(finder.getContext())))
+                            .handler(itm -> copyServer(itm))
                             .constraint(Constraint.executable(serverConfigTemplate(item), ADD))
                             .build());
                     if (item.isStarted()) {
@@ -400,11 +427,79 @@ public String nextColumn() {
     }
 
     private void addServer(boolean browseByHost) {
-        alert(Names.NYI);
+        if (browseByHost) {
+            AddressTemplate template = serverConfigTemplate(statementContext.selectedHost());
+            String id = Ids.build(HOST, statementContext.selectedHost(), SERVER, Ids.ADD_SUFFIX);
+            List<String> attributes = asList(""auto-start"", ""group"", ""socket-binding-default-interface"",
+                    ""socket-binding-group"", ""socket-binding-port-offset"", ""update-auto-start-with-server-status"");
+            crud.add(id, Names.SERVER, template, attributes, (name, address) -> {
+                refresh(RESTORE_SELECTION);
+            });
+        } else {
+
+            // load all available hosts to show in the copy dialog
+            Operation operation = new Operation.Builder(ResourceAddress.root(), READ_CHILDREN_NAMES_OPERATION)
+                    .param(CHILD_TYPE, HOST)
+                    .build();
+
+            dispatcher.execute(operation, result -> {
+
+                List<String> hosts = new ArrayList<>();
+                result.asList().forEach(m -> {
+                    hosts.add(m.asString());
+                });
+
+                // get the first host, only to retrieve the r-r-d for server-config
+                // as /host=*/server-config=*:read-operation-description(name=add) does not work
+                AddressTemplate template = serverConfigTemplate(hosts.get(0));
+                metadataProcessor
+                        .lookup(template, progress.get(), new SuccessfulMetadataCallback(eventBus, resources) {
+                            @Override
+                            public void onMetadata(final Metadata metadata) {
+
+                                String id = Ids.build(SERVER_GROUP, statementContext.selectedServerGroup(), SERVER,
+                                        FORM_SUFFIX);
+                                SingleSelectBoxItem hostFormItem = new SingleSelectBoxItem(HOST, Names.HOST, hosts,
+                                        false);
+                                hostFormItem.setRequired(true);
+                                NameItem nameItem = new NameItem();
+
+                                ModelNodeForm<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata)
+                                        .unboundFormItem(nameItem, 0)
+                                        .unboundFormItem(hostFormItem, 1, resources.messages().addServerHostHelp())
+                                        // add group as custom form item, to set it as read-only and pre-set with
+                                        // the selected server-group column
+                                        .customFormItem(GROUP, attributeDescription -> {
+                                            TextBoxItem groupItem = new TextBoxItem(GROUP, resources.constants().group());
+                                            groupItem.setEnabled(false);
+                                            return groupItem;
+                                        })
+                                        .fromRequestProperties()
+                                        .build();
+
+                                AddResourceDialog dialog = new AddResourceDialog(resources.messages().addServerTitle(),
+                                        form, (resource, payload) -> {
+
+                                    payload.get(GROUP).set(statementContext.selectedServerGroup());
+                                    String serverName = nameItem.getValue();
+                                    ResourceAddress address = serverConfigTemplate(hostFormItem.getValue())
+                                            .resolve(statementContext, serverName);
+
+                                    crud.add(serverName, address, payload,
+                                            resources.messages().addResourceSuccess(Names.SERVER,
+                                                    serverName), (name, address1) -> refresh(RESTORE_SELECTION));
+                                });
+                                dialog.show();
+                                form.<String>getFormItem(GROUP).setValue(statementContext.selectedServerGroup());
+                            }
+                        });
+            });
+
+        }
     }
 
-    private void copyServer(Server server, boolean browseByHost) {
-        alert(Names.NYI);
+    private void copyServer(Server server) {
+        serverActions.copyServer(server, () -> refresh(RESTORE_SELECTION));
     }
 
     private boolean serverIsLastSegment() {",2017-08-14T16:35:27Z,23
"@@ -44,8 +44,10 @@ public boolean test(final Property property) {
         if (builder.addOnly) {
             // if builder.includes is empty include either all or only required properties
             // otherwise include required properties plus the ones defined in builder.includes
-            if (emptyIncludes()) {
+            if (emptyIncludes() && builder.excludes.isEmpty()) {
                 filter = builder.requiredOnly ? required : (p) -> true;
+            } else if (!builder.excludes.isEmpty()) {
+                filter = p -> !builder.excludes.contains(p.getName());
             } else {
                 Predicate<Property> included = p -> builder.includes.contains(p.getName());
                 filter = required.or(included);",2017-08-14T16:35:27Z,26
"@@ -15,8 +15,10 @@
  */
 package org.jboss.hal.core.runtime.server;
 
+import java.util.ArrayList;
 import java.util.EnumSet;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 import java.util.function.Predicate;
 import javax.inject.Inject;
@@ -29,13 +31,20 @@
 import org.jboss.hal.ballroom.dialog.Dialog;
 import org.jboss.hal.ballroom.dialog.DialogFactory;
 import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.form.SingleSelectBoxItem;
+import org.jboss.hal.core.CrudOperations;
+import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
+import org.jboss.hal.core.mbui.dialog.NameItem;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
 import org.jboss.hal.core.mbui.form.OperationFormBuilder;
 import org.jboss.hal.core.runtime.Action;
 import org.jboss.hal.core.runtime.Result;
 import org.jboss.hal.core.runtime.RunningState;
 import org.jboss.hal.core.runtime.SuspendState;
+import org.jboss.hal.dmr.Composite;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.Property;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.dmr.dispatch.Dispatcher.ExceptionCallback;
@@ -44,9 +53,13 @@
 import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.ManagementModel;
 import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.processing.MetadataProcessor;
+import org.jboss.hal.meta.processing.SuccessfulMetadataCallback;
 import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Callback;
 import org.jboss.hal.spi.Footer;
 import org.jboss.hal.spi.Message;
 import org.jboss.hal.spi.MessageEvent;
@@ -63,6 +76,7 @@
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.dmr.ModelNodeHelper.asEnumValue;
 import static org.jboss.hal.dmr.ModelNodeHelper.getOrDefault;
+import static org.jboss.hal.resources.Ids.FORM_SUFFIX;
 import static org.jboss.hal.resources.UIConstants.SHORT_TIMEOUT;
 
 public class ServerActions {
@@ -154,28 +168,148 @@ private static AddressTemplate serverConfigTemplate(Server server) {
                 : AddressTemplate.of(""/host="" + server.getHost() + ""/server-config=*"" + server.getName());
     }
 
-
     private final EventBus eventBus;
     private final Dispatcher dispatcher;
     private final MetadataProcessor metadataProcessor;
     private final Provider<Progress> progress;
     private final Resources resources;
     private final Map<String, Server> pendingServers;
+    private StatementContext statementContext;
+    private CrudOperations crud;
 
     @Inject
     public ServerActions(final EventBus eventBus,
             final Dispatcher dispatcher,
+            final StatementContext statementContext,
             final MetadataProcessor metadataProcessor,
+            final CrudOperations crud,
             @Footer final Provider<Progress> progress,
             final Resources resources) {
         this.eventBus = eventBus;
         this.dispatcher = dispatcher;
+        this.statementContext = statementContext;
         this.metadataProcessor = metadataProcessor;
+        this.crud = crud;
         this.progress = progress;
         this.resources = resources;
         this.pendingServers = new HashMap<>();
     }
 
+    public void copyServer(Server server, Callback callback) {
+        Operation operation = new Operation.Builder(ResourceAddress.root(), READ_CHILDREN_NAMES_OPERATION)
+                .param(CHILD_TYPE, HOST)
+                .build();
+
+        dispatcher.execute(operation, result -> {
+
+            List<String> hosts = new ArrayList<>();
+            result.asList().forEach(m -> {
+                hosts.add(m.asString());
+            });
+            // get the first host only to retrieve the r-r-d for server-config
+            // as /host=*/server-config=*:read-operation-description(name=add) does not work
+            AddressTemplate template = AddressTemplate.of(""/host="" + hosts.get(0) + ""/server-config=*"");
+            metadataProcessor
+                    .lookup(template, progress.get(), new SuccessfulMetadataCallback(eventBus, resources) {
+                        @Override
+                        public void onMetadata(final Metadata metadata) {
+
+                            String id = Ids.build(SERVER_GROUP, statementContext.selectedServerGroup(), SERVER,
+                                    FORM_SUFFIX);
+                            SingleSelectBoxItem hostFormItem = new SingleSelectBoxItem(HOST, Names.HOST, hosts,
+                                    false);
+                            hostFormItem.setRequired(true);
+                            NameItem nameItem = new NameItem();
+
+                            ModelNodeForm<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata)
+                                    .fromRequestProperties()
+                                    .unboundFormItem(nameItem, 0)
+                                    .unboundFormItem(hostFormItem, 1, resources.messages().addServerHostHelp())
+                                    .exclude(""auto-start"", ""socket-binding-default-interface"",
+                                            ""socket-binding-group"", ""update-auto-start-with-server-status"")
+                                    .build();
+
+                            AddResourceDialog dialog = new AddResourceDialog(resources.messages().copyServerTitle(),
+                                    form, (resource, payload) -> {
+
+                                // read server-config recursively to retrieve nested resources
+                                ModelNode serverConfigModel = new ModelNode();
+                                serverConfigModel.get(HOST).set(server.getHost());
+                                serverConfigModel.get(SERVER_CONFIG).set(server.getName());
+
+                                ResourceAddress serverAddress = new ResourceAddress(serverConfigModel);
+                                Operation opReadServer = new Operation.Builder(serverAddress, READ_RESOURCE_OPERATION)
+                                        .param(RECURSIVE, true)
+                                        .build();
+
+                                dispatcher.execute(opReadServer, new Dispatcher.OperationCallback() {
+                                    @Override
+                                    public void onSuccess(final ModelNode newServerModel) {
+
+                                        String newServerName = nameItem.getValue();
+                                        // set the chosen group in the model
+                                        newServerModel.get(GROUP).set(payload.get(GROUP).asString());
+                                        if (payload.hasDefined(SOCKET_BINDING_PORT_OFFSET))
+                                            newServerModel.get(SOCKET_BINDING_PORT_OFFSET)
+                                                    .set(payload.get(SOCKET_BINDING_PORT_OFFSET).asLong());
+                                        newServerModel.get(NAME).set(newServerName);
+
+                                        ModelNode newServerModelAddress = new ModelNode();
+                                        newServerModelAddress.get(HOST).set(hostFormItem.getValue());
+                                        newServerModelAddress.get(SERVER_CONFIG).set(newServerName);
+
+                                        Operation opAddServer = new Operation.Builder(
+                                                new ResourceAddress(newServerModelAddress), ADD)
+                                                .payload(newServerModel)
+                                                .build();
+                                        Composite comp = new Composite();
+                                        comp.add(opAddServer);
+
+                                        // create operation for each nested resource of the source server
+                                        createOperation(comp, JVM, newServerModel, newServerModelAddress);
+                                        createOperation(comp, INTERFACE, newServerModel, newServerModelAddress);
+                                        createOperation(comp, PATH, newServerModel, newServerModelAddress);
+                                        createOperation(comp, SYSTEM_PROPERTY, newServerModel, newServerModelAddress);
+                                        createOperation(comp, SSL, newServerModel, newServerModelAddress);
+
+                                        dispatcher.execute(comp, (Dispatcher.CompositeCallback) result -> {
+                                            MessageEvent.fire(eventBus, Message.success(
+                                                    resources.messages().addResourceSuccess(Names.SERVER, newServerName)));
+                                            callback.execute();
+                                        }, (operation1, failure) -> {
+                                            MessageEvent.fire(eventBus, Message.error(
+                                                    resources.messages().addResourceError(newServerName, failure)));
+                                            callback.execute();
+                                        }, (operation1, exception) -> {
+                                            MessageEvent.fire(eventBus, Message.error(resources.messages()
+                                                    .addResourceError(newServerName, exception.getMessage())));
+                                            callback.execute();
+                                        });
+                                    }
+
+                                    private void createOperation(Composite composite, String resource, ModelNode model, ModelNode baseAddress) {
+                                        if (model.hasDefined(resource)) {
+                                            List<Property> props = model.get(resource).asPropertyList();
+                                            props.forEach(p -> {
+                                                String propname = p.getName();
+                                                ModelNode _address = baseAddress.clone();
+                                                _address.get(resource).set(propname);
+                                                Operation operation = new Operation.Builder(new ResourceAddress(_address), ADD)
+                                                        .payload(p.getValue())
+                                                        .build();
+                                                composite.add(operation);
+                                            });
+                                        }
+                                    }
+
+                                });
+                            });
+                            dialog.show();
+                        }
+                    });
+        });
+    }
+
     public void reload(Server server) {
         reloadRestart(server,
                 new Operation.Builder(server.getServerConfigAddress(), RELOAD).param(BLOCKING, false).build(),
@@ -348,6 +482,7 @@ public void resume(Server server) {
                 new ServerExceptionCallback(server, resources.messages().resumeServerError(server.getName())));
     }
 
+
     public void stop(Server server) {
         metadataProcessor.lookup(serverConfigTemplate(server), progress.get(),
                 new MetadataProcessor.MetadataCallback() {
@@ -420,7 +555,6 @@ public void stopNow(Server server) {
                         resources.messages().stopServerSuccess(server.getName()))),
                 new ServerFailedCallback(server, resources.messages().stopServerError(server.getName())),
                 new ServerExceptionCallback(server, resources.messages().stopServerError(server.getName())));
-
     }
 
     public void kill(Server server) {",2017-08-14T16:35:27Z,93
"@@ -212,6 +212,35 @@ public void excludeAttributes() {
         assertEquals(""qux"", iterator.next().getName());
     }
 
+    @Test
+    public void excludeFormAddAttributes() {
+        ModelNodeForm<ModelNode> form = builder(""excludeFormAddAttributes"", attributes)
+                .exclude(""foo"", ""bar"")
+                .addOnly()
+                .build();
+        Iterable<FormItem> formItems = form.getFormItems();
+        Iterator<FormItem> iterator = formItems.iterator();
+
+        assertEquals(2, Iterables.size(formItems));
+        assertEquals(""baz"", iterator.next().getName());
+        assertEquals(""qux"", iterator.next().getName());
+    }
+
+    @Test
+    public void excludeFormAddRequestProperties() {
+        ModelNodeForm<ModelNode> form = builder(""excludeFormAddRequestProperties"", requestProperties)
+                .exclude(""bar"", ""qux"")
+                .fromRequestProperties()
+                .build();
+        Iterable<FormItem> formItems = form.getFormItems();
+        Iterator<FormItem> iterator = formItems.iterator();
+
+        assertEquals(2, Iterables.size(formItems));
+        assertEquals(""baz"", iterator.next().getName());
+        assertEquals(""foo"", iterator.next().getName());
+    }
+
+
     @Test
     public void noRuntime() throws Exception {
         ModelNodeForm<ModelNode> form = builder(""noRuntime"",",2017-08-14T16:35:27Z,60
"@@ -623,6 +623,7 @@ public interface ModelDescriptionConstants {
     String SOURCE_NETWORK = ""source-network"";
     String SOURCE_PASSWORD = ""source-password"";
     String SQL = ""sql"";
+    String SSL = ""ssl"";
     String SSL_CONTEXT = ""ssl-context"";
     String STACK = ""stack"";
     String STALE_CONNECTION_CHECKER_CLASS_NAME = ""stale-connection-checker-class-name"";",2017-08-14T16:35:27Z,109
"@@ -41,8 +41,11 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     //@formatter:off
     String activeRoles(String roles);
     SafeHtml addHaPolicy();
+    SafeHtml addResourceError(String name, String cause);
     SafeHtml addResourceSuccess(String type, String name);
     String addResourceTitle(String type);
+    SafeHtml addServerHostHelp();
+    String addServerTitle();
     SafeHtml addSingleResourceSuccess(String type);
     SafeHtml allContentAlreadyDeployedToServerGroup(String serverGroup);
     SafeHtml allMailServersExist();
@@ -85,6 +88,7 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml contentReplaced(@PluralCount int size);
     SafeHtml contentUndeployed(String name);
     SafeHtml contentUndeployedFromServerGroup(String name, String serverGroup);
+    String copyServerTitle();
     SafeHtml credentialReferenceAddConfirmation(String alternative);
     SafeHtml credentialReferenceAddressError();
     String credentialReferenceConflict();",2017-08-14T16:35:27Z,94
"@@ -1,7 +1,10 @@
 activeRoles=Active roles: {0}
 addHaPolicy=No HA policy has been assigned to this server. Please use the button below to add a HA policy. You can choose between replication and shared store. For each strategy you can select whether to act as a master, slave or operate in colocated mode.
+addResourceError=Failed to add resource {0}, cause: {1}
 addResourceSuccess={0} <strong>{1}</strong> successfully added.
 addResourceTitle=Add {0}
+addServerHostHelp=The name of the host contoller that is responsible for managing this server.
+addServerTitle=Add Server
 addSingleResourceSuccess=<strong>{0}</strong> successfully added.
 allContentAlreadyDeployedToServerGroup=All content already deployed to server group <strong>{0}</strong>.
 allMailServersExist=All mails servers already exist.
@@ -45,6 +48,7 @@ contentReplaced=<strong>{0}</strong> content items have been replaced.
 contentReplaced[\=1]=The content has been replaced.
 contentUndeployed=Content <strong>{0}</strong> successfully undeployed from selected server groups.
 contentUndeployedFromServerGroup=Content <strong>{0}</strong> successfully undeployed from server group <strong>{1}</strong>.
+copyServerTitle=Copy server
 credentialReferenceAddConfirmation=The resource contains a value for <strong>&#39;{0}&#39;</strong> which is mutual exclusive to &#39;Credential Reference&#39;.<br/>Do you want remove the value for &#39;{0}&#39; and add &#39;Credential Reference&#39;?
 credentialReferenceAddressError=Unable to access credential reference: No address available.
 credentialReferenceConflict=Conflict with credential-reference.",2017-08-14T16:35:27Z,94
"@@ -1,8 +1,12 @@
+addResourceError=Falha ao adicionar recurso {0}, motivo: {1}
+addServerHostHelp=O nome do servidor de controle respons\u00e1vel por gerenciar este servidor.
+addServerTitle=Adicionar servidor
 cleanPatchHistory=Limpar o hist\u00f3rico de corre\u00e7\u00f5es
 cleanPatchHistoryQuestion={0} Esta a\u00e7\u00e3o ir\u00e1 prevenir o rollback das corre\u00e7\u00f5es j\u00e1 instaladas e n\u00e3o pode ser desfeita. <p>Voc\u00ea realmente quer limpar o hist\u00f3rico de corre\u00e7\u00f5es ?</p>
 cleanPatchHistorySuccess=Limpeza do hist\u00f3rico de corre\u00e7\u00f5es feita com sucesso.
 cleanPatchHistoryFailure=Limpeza do hist\u00f3rico ocorreu erro, motivo: {0}
 configurePatchTitle=Configurar corre\u00e7\u00e3o
+copyServerTitle=Copiar servidor
 noSelectedPatch=Nenhum arquivo de corre\u00e7\u00e3o selecionado. Por favor selecione um arquivo de corre\u00e7\u00e3o para enviar.
 noPatchesForHost=N\u00e3o h\u00e1 corre\u00e7\u00f5es instaladas para este servidor de controle.
 patchLatestInstalledLabel=\u00daltima corre\u00e7\u00e3o instalada",2017-08-14T16:35:27Z,94
"@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-self.importScripts(""polyfill.min.js"", ""pouchdb.min.js"");
+self.importScripts(""pouchdb.min.js"");
 
 self.addEventListener(""message"", function (e) {
     var db = new PouchDB(e.data.database);",2019-08-07T11:33:26Z,204
"@@ -16,58 +16,49 @@
 package org.jboss.hal.client.patching;
 
 import java.util.ArrayList;
-import java.util.Iterator;
 import java.util.List;
 
 import javax.inject.Inject;
 import javax.inject.Provider;
 
 import com.google.web.bindery.event.shared.EventBus;
-import elemental2.dom.HTMLElement;
+import org.jboss.hal.client.runtime.host.HostDisplay;
+import org.jboss.hal.config.Environment;
 import org.jboss.hal.core.finder.ColumnActionFactory;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderColumn;
 import org.jboss.hal.core.finder.ItemAction;
-import org.jboss.hal.core.finder.ItemDisplay;
 import org.jboss.hal.core.finder.ItemMonitor;
+import org.jboss.hal.core.runtime.TopologyTasks;
 import org.jboss.hal.core.runtime.host.Host;
 import org.jboss.hal.core.runtime.host.HostActionEvent;
 import org.jboss.hal.core.runtime.host.HostActions;
 import org.jboss.hal.core.runtime.host.HostResultEvent;
 import org.jboss.hal.core.runtime.host.HostSelectionEvent;
-import org.jboss.hal.dmr.Composite;
-import org.jboss.hal.dmr.CompositeResult;
-import org.jboss.hal.dmr.ModelNode;
-import org.jboss.hal.dmr.ModelNodeHelper;
 import org.jboss.hal.dmr.NamedNode;
-import org.jboss.hal.dmr.Operation;
 import org.jboss.hal.dmr.Property;
-import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.flow.FlowContext;
 import org.jboss.hal.flow.Outcome;
 import org.jboss.hal.flow.Progress;
-import org.jboss.hal.flow.Task;
 import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.security.Constraint;
-import org.jboss.hal.resources.Icons;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
 import org.jboss.hal.spi.Column;
 import org.jboss.hal.spi.Footer;
 import org.jboss.hal.spi.Requires;
-import rx.Completable;
 
-import static java.util.Comparator.comparing;
 import static java.util.stream.Collectors.toList;
+import static org.jboss.hal.client.patching.PatchTasks.patches;
 import static org.jboss.hal.core.finder.FinderColumn.RefreshMode.RESTORE_SELECTION;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.SHUTDOWN;
 import static org.jboss.hal.flow.Flow.series;
 
 @Column(Ids.PATCHING_DOMAIN)
 @Requires(value = ""/{domain.controller}/core-service=patching"")
-public class HostPatchesColumn extends FinderColumn<NamedNode> implements HostActionEvent.HostActionHandler,
+public class HostPatchesColumn extends FinderColumn<Host> implements HostActionEvent.HostActionHandler,
         HostResultEvent.HostResultHandler {
 
     static Host namedNodeToHost(NamedNode node) {
@@ -78,39 +69,41 @@ static AddressTemplate hostTemplate(NamedNode node) {
         return AddressTemplate.of(""/host="" + node.getName());
     }
 
-
     @Inject
     public HostPatchesColumn(Finder finder,
             Dispatcher dispatcher,
+            Environment environment,
             EventBus eventBus,
             @Footer Provider<Progress> progress,
             ColumnActionFactory columnActionFactory,
             HostActions hostActions,
             Resources resources) {
 
-        super(new FinderColumn.Builder<NamedNode>(finder, Ids.PATCHING_DOMAIN, Names.HOSTS)
-
+        super(new FinderColumn.Builder<Host>(finder, Ids.PATCHING_DOMAIN, Names.HOSTS)
                 .columnAction(columnActionFactory.refresh(Ids.HOST_REFRESH))
-
-                .itemsProvider((context, callback) -> series(new FlowContext(progress.get()),
-                        new AvailableHosts(dispatcher))
-                        .subscribe(new Outcome<FlowContext>() {
-                            @Override
-                            public void onError(FlowContext context, Throwable error) {
-                                callback.onFailure(error);
-                            }
-
-                            @Override
-                            public void onSuccess(FlowContext context) {
-                                List<NamedNode> hosts = context.get(HOSTS);
-                                callback.onSuccess(hosts);
-
-                                // Restore pending visualization
-                                hosts.stream()
-                                        .filter(item -> hostActions.isPending(namedNodeToHost(item)))
-                                        .forEach(item -> ItemMonitor.startProgress(Ids.host(item.getName())));
-                            }
-                        }))
+                .itemsProvider(
+                        (context, callback) -> series(new FlowContext(progress.get()), patches(environment, dispatcher))
+                                .subscribe(new Outcome<FlowContext>() {
+                                    @Override
+                                    public void onError(FlowContext context, Throwable error) {
+                                        callback.onFailure(error);
+                                    }
+
+                                    @Override
+                                    public void onSuccess(FlowContext context) {
+                                        List<Host> hosts = context.get(TopologyTasks.HOSTS);
+                                        List<Host> alive = hosts.stream()
+                                                // alive is not enough here!
+                                                .filter(host -> host.isAlive() && !host.isStarting() && host.isRunning())
+                                                .collect(toList());
+                                        callback.onSuccess(alive);
+
+                                        // Restore pending visualization
+                                        hosts.stream()
+                                                .filter(item -> hostActions.isPending(namedNodeToHost(item)))
+                                                .forEach(item -> ItemMonitor.startProgress(Ids.host(item.getName())));
+                                    }
+                                }))
 
                 .onItemSelect(host -> eventBus.fireEvent(new HostSelectionEvent(host.getName())))
                 .onPreview(item -> new HostPatchesPreview(hostActions, item, resources))
@@ -121,112 +114,30 @@ public void onSuccess(FlowContext context) {
                 .filterDescription(resources.messages().hostPatchesColumnFilterDescription())
         );
 
-        setItemRenderer((NamedNode item) -> new ItemDisplay<NamedNode>() {
-
-            Host _host = namedNodeToHost(item);
-
-            @Override
-            public String getId() {
-                return Ids.host(_host.getAddressName());
-            }
-
-            @Override
-            public String getTitle() {
-                return item.getName();
-            }
-
-            @Override
-            public HTMLElement element() {
-                return _host.isDomainController() ? ItemDisplay
-                        .withSubtitle(item.getName(), Names.DOMAIN_CONTROLLER) : null;
-            }
-
-            @Override
-            public String getFilterData() {
-                return String.join("" "", item.getName(),
-                        _host.isDomainController() ? ""dc"" : ""hc"", //NON-NLS
-                        ModelNodeHelper.asAttributeValue(_host.getHostState()));
-            }
-
-            @Override
-            public String getTooltip() {
-                if (hostActions.isPending(_host)) {
-                    return resources.constants().pending();
-                } else if (_host.isAdminMode()) {
-                    return resources.constants().adminOnly();
-                } else if (_host.isStarting()) {
-                    return resources.constants().starting();
-                } else if (_host.needsReload()) {
-                    return resources.constants().needsReload();
-                } else if (_host.needsRestart()) {
-                    return resources.constants().needsRestart();
-                } else if (_host.isRunning()) {
-                    return resources.constants().running();
-                } else {
-                    return resources.constants().unknownState();
-                }
-            }
-
-            @Override
-            public HTMLElement getIcon() {
-                if (hostActions.isPending(_host)) {
-                    return Icons.unknown();
-                } else if (_host.isAdminMode() || _host.isStarting()) {
-                    return Icons.disabled();
-                } else if (_host.needsReload() || _host.needsRestart()) {
-                    return Icons.warning();
-                } else if (_host.isRunning()) {
-                    return Icons.ok();
-                } else {
-                    return Icons.unknown();
-                }
-            }
-
+        setItemRenderer(item -> new HostDisplay(item, hostActions, resources) {
             @Override
-            public String nextColumn() {
-                return Ids.PATCHING;
-            }
-
-            @Override
-            public List<ItemAction<NamedNode>> actions() {
-                List<ItemAction<NamedNode>> actions = new ArrayList<>();
-                if (!hostActions.isPending(_host)) {
-                    actions.add(new ItemAction.Builder<NamedNode>()
+            public List<ItemAction<Host>> actions() {
+                List<ItemAction<Host>> actions = new ArrayList<>();
+                if (!hostActions.isPending(item)) {
+                    actions.add(new ItemAction.Builder<Host>()
                             .title(resources.constants().restart())
-                            .handler(item1 -> hostActions.restart(_host))
+                            .handler(item1 -> hostActions.restart(item))
                             .constraint(Constraint.executable(hostTemplate(item), SHUTDOWN))
                             .build());
                 }
                 return actions;
             }
 
+            @Override
+            public String nextColumn() {
+                return Ids.PATCHING;
+            }
         });
 
         eventBus.addHandler(HostActionEvent.getType(), this);
         eventBus.addHandler(HostResultEvent.getType(), this);
     }
 
-    private static List<NamedNode> orderedHostWithDomainControllerAsFirstElement(List<NamedNode> hostNodes) {
-        // first collect all hosts, sort them by name and finally
-        // remove the domain controller to add it as first element
-        List<NamedNode> hosts = hostNodes.stream()
-                .sorted(comparing(NamedNode::getName))
-                .collect(toList());
-        NamedNode domainController = null;
-        for (Iterator<NamedNode> iterator = hosts.iterator(); iterator.hasNext() && domainController == null; ) {
-            NamedNode host = iterator.next();
-            if (host.get(MASTER).asBoolean()) {
-                domainController = host;
-                iterator.remove();
-            }
-        }
-        if (domainController != null) {
-            hosts.add(0, domainController);
-        }
-        return hosts;
-    }
-
-
     @Override
     public void onHostAction(HostActionEvent event) {
         if (isVisible()) {
@@ -245,65 +156,4 @@ public void onHostResult(HostResultEvent event) {
             refresh(RESTORE_SELECTION);
         }
     }
-
-
-    public static class AvailableHosts implements Task<FlowContext> {
-
-        private Dispatcher dispatcher;
-
-        AvailableHosts(Dispatcher dispatcher) {
-            this.dispatcher = dispatcher;
-        }
-
-        @Override
-        public Completable call(FlowContext context) {
-            ResourceAddress hostAddress = new ResourceAddress()
-                    .add(HOST, ""*"");
-            Operation opHosts = new Operation.Builder(hostAddress, READ_RESOURCE_OPERATION)
-                    .param(INCLUDE_RUNTIME, true)
-                    .build();
-
-            ResourceAddress patchingAddress = new ResourceAddress()
-                    .add(HOST, ""*"")
-                    .add(CORE_SERVICE, PATCHING);
-            Operation opPatches = new Operation.Builder(patchingAddress, READ_RESOURCE_OPERATION)
-                    .param(INCLUDE_RUNTIME, true)
-                    .param(RECURSIVE, true)
-                    .build();
-
-            return dispatcher.execute(new Composite(opHosts, opPatches)).doOnSuccess((CompositeResult result) -> {
-                ModelNode availableHosts = result.step(0).get(RESULT);
-                List<ModelNode> hostPatchingResults = result.step(1).get(RESULT).asList();
-
-                // this namednode list stores all hosts (and its attributes) and core-service=patching attributes
-                // the tweaked hostPatches is necessary as it is important to show hosts and core-service=patching information.
-                List<NamedNode> hostPatches = new ArrayList<>();
-                availableHosts.asList().forEach(hostNode -> {
-                    ModelNode hostPatchesNode = new ModelNode();
-                    hostNode.get(ADDRESS).asPropertyList().forEach(p -> {
-                        if (HOST.equals(p.getName())) {
-                            String hostName = p.getValue().asString();
-
-                            // as we navigate on each host, retrieve the patching attributes from hostPatchingResults
-                            hostPatchingResults.forEach(hostPatchingResult -> hostPatchingResult.get(ADDRESS)
-                                    .asPropertyList()
-                                    .forEach(pp -> {
-                                        if (HOST.equals(pp.getName()) && pp.getValue().asString().equals(hostName)) {
-                                            // add the core-service=patching attributes to a sub-resource
-                                            // this exists only in memory for HAL purposes to show them in the view
-                                            hostNode.get(RESULT).get(CORE_SERVICE_PATCHING)
-                                                    .set(hostPatchingResult.get(RESULT));
-                                        }
-                                    }));
-                            hostPatchesNode.get(hostName).set(hostNode.get(RESULT));
-                        }
-                    });
-                    NamedNode ac = new NamedNode(hostPatchesNode.asProperty());
-                    hostPatches.add(ac);
-                });
-                List<NamedNode> sortedHosts = orderedHostWithDomainControllerAsFirstElement(hostPatches);
-                context.set(HOSTS, sortedHosts);
-            }).toCompletable();
-        }
-    }
 }",2019-08-07T11:33:26Z,205
"@@ -21,7 +21,6 @@
 import org.jboss.hal.core.finder.PreviewAttributes;
 import org.jboss.hal.core.runtime.host.Host;
 import org.jboss.hal.core.runtime.host.HostActions;
-import org.jboss.hal.dmr.NamedNode;
 import org.jboss.hal.meta.security.Constraint;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
@@ -40,16 +39,15 @@
 import static org.jboss.hal.resources.CSS.clickable;
 import static org.jboss.hal.resources.CSS.hidden;
 
-class HostPatchesPreview extends RuntimePreview<NamedNode> {
+class HostPatchesPreview extends RuntimePreview<Host> {
 
     private final HTMLElement restartLink;
-    private final PreviewAttributes<NamedNode> attributes;
+    private final PreviewAttributes<Host> attributes;
     private final HostActions hostActions;
     private final Resources resources;
 
     @SuppressWarnings(""HardCodedStringLiteral"")
-    HostPatchesPreview(HostActions hostActions, NamedNode host,
-            Resources resources) {
+    HostPatchesPreview(HostActions hostActions, Host host, Resources resources) {
         super(host.getName(), host.get(MASTER).asBoolean() ? Names.DOMAIN_CONTROLLER : Names.HOST_CONTROLLER,
                 resources);
         this.hostActions = hostActions;
@@ -68,12 +66,15 @@ class HostPatchesPreview extends RuntimePreview<NamedNode> {
                         .get());
 
         attributes = new PreviewAttributes<>(host)
-                .append(model -> {
-                    String latest = model.get(CORE_SERVICE_PATCHING).get(""cumulative-patch-id"").asString();
-                    // if there is no patch installed, the above attribute returns as ""base""
-                    // so, lets display an informative message as there is no patch installed.
-                    if (""base"".equals(latest)) {
-                        latest = resources.messages().noPatchesForHost();
+                .append(h -> {
+                    String latest = Names.NOT_AVAILABLE;
+                    if (h.hasDefined(CORE_SERVICE_PATCHING)) {
+                        latest = h.get(CORE_SERVICE_PATCHING).get(""cumulative-patch-id"").asString();
+                        // if there is no patch installed, the above attribute returns as ""base""
+                        // so, lets display an informative message as there is no patch installed.
+                        if (""base"".equals(latest)) {
+                            latest = resources.messages().noPatchesForHost();
+                        }
                     }
                     return new PreviewAttributes.PreviewAttribute(resources.messages().patchLatestInstalledLabel(),
                             latest);
@@ -83,8 +84,7 @@ class HostPatchesPreview extends RuntimePreview<NamedNode> {
     }
 
     @Override
-    public void update(NamedNode item) {
-        Host host = namedNodeToHost(item);
+    public void update(Host host) {
         if (hostActions.isPending(host)) {
             pending(resources.messages().hostPending(host.getName()));
         } else if (host.isAdminMode()) {",2019-08-07T11:33:26Z,206
"@@ -0,0 +1,91 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.patching;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.jboss.hal.config.Environment;
+import org.jboss.hal.core.runtime.TopologyTasks;
+import org.jboss.hal.core.runtime.host.Host;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.flow.FlowContext;
+import org.jboss.hal.flow.Task;
+import rx.Completable;
+import rx.Single;
+
+import static java.util.stream.Collectors.toList;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+
+final class PatchTasks {
+
+    /**
+     * Reads the hosts and its patches.
+     *
+     * <p>The context is populated with the following keys:
+     * <ul>
+     * <li>{@link TopologyTasks#HOSTS}: The ordered list of hosts with the domain controller as first element.
+     * Each host contains its patches.</li>
+     * </ul>
+     */
+    static List<Task<FlowContext>> patches(Environment environment, Dispatcher dispatcher) {
+        List<Task<FlowContext>> tasks = new ArrayList<>(TopologyTasks.hosts(environment, dispatcher));
+        tasks.add(new Patches(dispatcher));
+        return tasks;
+    }
+
+
+    private static class Patches implements Task<FlowContext> {
+
+        private final Dispatcher dispatcher;
+
+        Patches(Dispatcher dispatcher) {
+            this.dispatcher = dispatcher;
+        }
+
+        @Override
+        public Completable call(FlowContext context) {
+            Completable completable = Completable.complete();
+            List<Host> hosts = context.get(TopologyTasks.HOSTS);
+
+            if (hosts != null && !hosts.isEmpty()) {
+                List<Completable> completables = hosts.stream()
+                        .filter(host -> host.isAlive() && !host.isStarting() && host.isRunning()) // alive is not enough here!
+                        .map(host -> {
+                            ResourceAddress address = host.getAddress().add(CORE_SERVICE, PATCHING);
+                            Operation operation = new Operation.Builder(address, READ_RESOURCE_OPERATION)
+                                    .param(INCLUDE_RUNTIME, true)
+                                    .param(RECURSIVE, true)
+                                    .build();
+                            return dispatcher.execute(operation)
+                                    .doOnSuccess(result -> host.get(CORE_SERVICE_PATCHING).set(result))
+                                    .onErrorResumeNext(error -> Single.just(new ModelNode()))
+                                    .toCompletable();
+                        })
+                        .collect(toList());
+                completable = Completable.concat(completables);
+            }
+            return completable;
+        }
+    }
+
+
+    private PatchTasks() {
+    }
+}",2019-08-07T11:33:26Z,207
"@@ -24,7 +24,6 @@
 import com.google.gwt.user.client.rpc.AsyncCallback;
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
-import elemental2.dom.HTMLElement;
 import org.jboss.hal.ballroom.dialog.DialogFactory;
 import org.jboss.hal.config.Environment;
 import org.jboss.hal.core.CrudOperations;
@@ -34,7 +33,6 @@
 import org.jboss.hal.core.finder.FinderColumn;
 import org.jboss.hal.core.finder.ItemAction;
 import org.jboss.hal.core.finder.ItemActionFactory;
-import org.jboss.hal.core.finder.ItemDisplay;
 import org.jboss.hal.core.finder.ItemMonitor;
 import org.jboss.hal.core.finder.ItemsProvider;
 import org.jboss.hal.core.runtime.TopologyTasks;
@@ -47,7 +45,6 @@
 import org.jboss.hal.core.runtime.host.HostSelectionEvent;
 import org.jboss.hal.dmr.Composite;
 import org.jboss.hal.dmr.CompositeResult;
-import org.jboss.hal.dmr.ModelNodeHelper;
 import org.jboss.hal.dmr.Operation;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
@@ -59,7 +56,6 @@
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.security.Constraint;
 import org.jboss.hal.meta.token.NameTokens;
-import org.jboss.hal.resources.Icons;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
@@ -179,71 +175,7 @@ public void onSuccess(List<Host> result) {
             }
         }));
 
-        setItemRenderer(item -> new ItemDisplay<Host>() {
-            @Override
-            public String getId() {
-                return Ids.host(item.getAddressName());
-            }
-
-            @Override
-            public String getTitle() {
-                return item.getName();
-            }
-
-            @Override
-            public HTMLElement element() {
-                return item.isDomainController() ? ItemDisplay
-                        .withSubtitle(item.getName(), Names.DOMAIN_CONTROLLER) : null;
-            }
-
-            @Override
-            public String getFilterData() {
-                return String.join("" "", item.getName(),
-                        item.isDomainController() ? ""dc"" : ""hc"", //NON-NLS
-                        item.isConnected() ? ""on"" : ""off"", //NON-NLS
-                        ModelNodeHelper.asAttributeValue(item.getHostState()));
-            }
-
-            @Override
-            public String getTooltip() {
-                if (!item.isConnected()) {
-                    return resources.constants().disconnectedUpper();
-                } else if (hostActions.isPending(item)) {
-                    return resources.constants().pending();
-                } else if (item.isAdminMode()) {
-                    return resources.constants().adminOnly();
-                } else if (item.isBooting() || item.isStarting()) {
-                    return resources.constants().starting();
-                } else if (item.needsReload()) {
-                    return resources.constants().needsReload();
-                } else if (item.needsRestart()) {
-                    return resources.constants().needsRestart();
-                } else if (item.isRunning()) {
-                    return resources.constants().running();
-                } else {
-                    return resources.constants().unknownState();
-                }
-            }
-
-            @Override
-            public HTMLElement getIcon() {
-                if (!item.isConnected()) {
-                    return Icons.disconnected();
-                } else if (hostActions.isPending(item)) {
-                    return Icons.pending();
-                } else if (item.isAdminMode()) {
-                    return Icons.disabled();
-                } else if (item.isBooting() || item.isStarting()) {
-                    return Icons.pending();
-                } else if (item.needsReload() || item.needsRestart()) {
-                    return Icons.warning();
-                } else if (item.isRunning()) {
-                    return Icons.ok();
-                } else {
-                    return Icons.unknown();
-                }
-            }
-
+        setItemRenderer(item -> new HostDisplay(item, hostActions, resources) {
             @Override
             public String nextColumn() {
                 return item.isAlive() ? SERVER : null;",2019-08-07T11:33:26Z,5
"@@ -0,0 +1,103 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.runtime.host;
+
+import elemental2.dom.HTMLElement;
+import org.jboss.hal.core.finder.ItemDisplay;
+import org.jboss.hal.core.runtime.host.Host;
+import org.jboss.hal.core.runtime.host.HostActions;
+import org.jboss.hal.dmr.ModelNodeHelper;
+import org.jboss.hal.resources.Icons;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
+
+public abstract class HostDisplay implements ItemDisplay<Host> {
+
+    private final Host item;
+    private final HostActions hostActions;
+    private final Resources resources;
+
+    public HostDisplay(Host item, HostActions hostActions, Resources resources) {
+        this.item = item;
+        this.hostActions = hostActions;
+        this.resources = resources;
+    }
+
+    @Override
+    public String getId() {
+        return Ids.host(item.getAddressName());
+    }
+
+    @Override
+    public String getTitle() {
+        return item.getName();
+    }
+
+    @Override
+    public HTMLElement element() {
+        return item.isDomainController() ? ItemDisplay
+                .withSubtitle(item.getName(), Names.DOMAIN_CONTROLLER) : null;
+    }
+
+    @Override
+    public String getFilterData() {
+        return String.join("" "", item.getName(),
+                item.isDomainController() ? ""dc"" : ""hc"", //NON-NLS
+                item.isConnected() ? ""on"" : ""off"", //NON-NLS
+                ModelNodeHelper.asAttributeValue(item.getHostState()));
+    }
+
+    @Override
+    public String getTooltip() {
+        if (!item.isConnected()) {
+            return resources.constants().disconnectedUpper();
+        } else if (hostActions.isPending(item)) {
+            return resources.constants().pending();
+        } else if (item.isAdminMode()) {
+            return resources.constants().adminOnly();
+        } else if (item.isBooting() || item.isStarting()) {
+            return resources.constants().starting();
+        } else if (item.needsReload()) {
+            return resources.constants().needsReload();
+        } else if (item.needsRestart()) {
+            return resources.constants().needsRestart();
+        } else if (item.isRunning()) {
+            return resources.constants().running();
+        } else {
+            return resources.constants().unknownState();
+        }
+    }
+
+    @Override
+    public HTMLElement getIcon() {
+        if (!item.isConnected()) {
+            return Icons.disconnected();
+        } else if (hostActions.isPending(item)) {
+            return Icons.pending();
+        } else if (item.isAdminMode()) {
+            return Icons.disabled();
+        } else if (item.isBooting() || item.isStarting()) {
+            return Icons.pending();
+        } else if (item.needsReload() || item.needsRestart()) {
+            return Icons.warning();
+        } else if (item.isRunning()) {
+            return Icons.ok();
+        } else {
+            return Icons.unknown();
+        }
+    }
+}",2019-08-07T11:33:26Z,54
"@@ -20,6 +20,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.function.Function;
 
 import com.google.web.bindery.event.shared.EventBus;
 import org.jboss.hal.ballroom.dialog.Dialog;
@@ -47,6 +48,7 @@
 import org.slf4j.LoggerFactory;
 import rx.Completable;
 import rx.Single;
+import rx.functions.Func1;
 
 import static java.lang.Math.max;
 import static java.util.Collections.emptyList;
@@ -120,9 +122,7 @@ public static List<Task<FlowContext>> topology(Environment environment, Dispatch
      * its servers.</li>
      * </ul>
      * Started servers contain additional attributes and optional server boot errors.
-     * </ul>
      */
-    @SuppressWarnings(""Duplicates"")
     public static List<Task<FlowContext>> hosts(Environment environment, Dispatcher dispatcher) {
         List<Task<FlowContext>> tasks = new ArrayList<>();
         tasks.add(new HostsNames(environment, dispatcher));
@@ -141,7 +141,6 @@ public static List<Task<FlowContext>> hosts(Environment environment, Dispatcher
      * <li>{@link #SERVER_GROUPS}: The ordered list of server groups. Each server group contains its servers.</li>
      * </ul>
      * Started servers contain additional attributes and optional server boot errors.
-     * </ul>
      */
     @SuppressWarnings(""Duplicates"")
     public static List<Task<FlowContext>> serverGroups(Environment environment, Dispatcher dispatcher) {
@@ -206,6 +205,44 @@ public static List<Task<FlowContext>> runningServers(Environment environment, Di
     }
 
 
+    // ------------------------------------------------------ public callbacks
+
+
+    /**
+     * Function which is used for {@link Single#onErrorResumeNext(rx.functions.Func1)} in case of an error in tasks
+     * which read the hosts. The erroneous host is added to the the list of hosts as {@link Host#booting(String)}
+     * if the error contains {@link ModelDescriptionConstants#ERROR_WFY_CTL_0379} or as {@link Host#failed(String)}
+     * otherwise.
+     */
+    public static class HostError<T> implements Func1<Throwable, Single<T>> {
+
+        private String hostName;
+        private final List<Host> hosts;
+        private Function<Throwable, T> resume;
+
+        public HostError(String hostName, List<Host> hosts, Function<Throwable, T> resume) {
+            this.hostName = hostName;
+            this.hosts = hosts;
+            this.resume = resume;
+        }
+
+        @Override
+        public Single<T> call(Throwable throwable) {
+            Host h;
+            if (throwable.getMessage() != null &&
+                    throwable.getMessage().contains(ERROR_WFY_CTL_0379)) {
+                h = Host.booting(hostName);
+            } else {
+                h = Host.failed(hostName);
+            }
+            hosts.add(h);
+            logger.warn(""Unable to read host {}: {}"", hostName, throwable.getMessage());
+            T resumeWith = resume.apply(throwable);
+            return Single.just(resumeWith);
+        }
+    }
+
+
     // ------------------------------------------------------ tasks
 
 
@@ -230,25 +267,27 @@ public Completable call(FlowContext context) {
 
             } else {
                 List<Host> hosts = context.get(HOSTS);
+                List<Host> sortedHosts;
                 if (hosts != null) {
-                    List<Host> sortedHosts = new ArrayList<>(hosts);
+                    sortedHosts = new ArrayList<>(hosts);
                     sortedHosts.sort(comparing(Host::getName));
-                    hosts = sortedHosts;
                 } else {
-                    hosts = new ArrayList<>();
+                    sortedHosts = new ArrayList<>();
                 }
-
                 Host domainController = null;
-                for (Iterator<Host> iterator = hosts.iterator(); iterator.hasNext() && domainController == null; ) {
+                for (Iterator<Host> iterator = sortedHosts.iterator();
+                        iterator.hasNext() && domainController == null; ) {
                     Host host = iterator.next();
                     if (host.isDomainController()) {
                         domainController = host;
                         iterator.remove();
                     }
                 }
                 if (domainController != null) {
-                    hosts.add(0, domainController);
+                    sortedHosts.add(0, domainController);
                 }
+                hosts = sortedHosts;
+
                 List<Server> servers = context.get(SERVERS);
                 List<ServerGroup> serverGroups = context.get(SERVER_GROUPS);
                 if (serverGroups != null && servers != null) {
@@ -268,7 +307,6 @@ public Completable call(FlowContext context) {
                 context.set(SERVERS, servers);
                 return Completable.complete();
             }
-
         }
     }
 
@@ -352,18 +390,8 @@ public Completable call(FlowContext context) {
                                                         servers.add(server);
                                                     });
                                         })
-                                        .onErrorResumeNext(error -> {
-                                            Host h;
-                                            if (error.getMessage() != null &&
-                                                    error.getMessage().contains(""WFLYCTL0379"")) {
-                                                h = Host.booting(host);
-                                            } else {
-                                                h = Host.failed(host);
-                                            }
-                                            hosts.add(h);
-                                            logger.warn(""Unable to read host {}: {}"", host, error.getMessage());
-                                            return Single.just(new CompositeResult(new ModelNode()));
-                                        })
+                                        .onErrorResumeNext(new HostError<>(host, hosts,
+                                                error -> new CompositeResult(new ModelNode())))
                                         .toCompletable();
                             })
                             .collect(toList());",2019-08-07T11:33:26Z,56
"@@ -24,10 +24,8 @@
 @SuppressWarnings({""DuplicateStringLiteralInspection"", ""SpellCheckingInspection""})
 public interface ModelDescriptionConstants {
 
+    // HAL_* attributes are used internally only!
     // KEEP THESE IN ALPHABETICAL ORDER!
-    String ADD_ALIAS = ""add-alias"";
-    String ADD_IDENTITY = ""add-identity"";
-    String ADD_IDENTITY_ATTRIBUTE = ""add-identity-attribute"";
     String ACCEPTOR = ""acceptor"";
     String ACCESS = ""access"";
     String ACCESS_CONSTRAINTS = ""access-constraints"";
@@ -43,7 +41,10 @@ public interface ModelDescriptionConstants {
     String ACTIVE_OPERATION = ""active-operation"";
     String ACTIVE_SESSIONS = ""active-sessions"";
     String ADD = ""add"";
+    String ADD_ALIAS = ""add-alias"";
     String ADD_CONTENT = ""add-content"";
+    String ADD_IDENTITY = ""add-identity"";
+    String ADD_IDENTITY_ATTRIBUTE = ""add-identity-attribute"";
     String ADD_PREFIX_ROLE_MAPPER = ""add-prefix-role-mapper"";
     String ADD_SUFFIX_ROLE_MAPPER = ""add-suffix-role-mapper"";
     String ADDRESS = ""address"";
@@ -78,9 +79,9 @@ public interface ModelDescriptionConstants {
     String ATTRIBUTE_MAPPING = ""attribute-mapping"";
     String ATTRIBUTES = ""attributes"";
     String ATTRIBUTES_ONLY = ""attributes-only"";
+    String AUTH_SERVER_URL = ""auth-server-url"";
     String AUTHENTICATION_CONFIGURATION = ""authentication-configuration"";
     String AUTHENTICATION_CONTEXT = ""authentication-context"";
-    String AUTH_SERVER_URL = ""auth-server-url"";
     String AUTHOR = ""author"";
     String AUTHORIZATION = ""authorization"";
     String AUTO_START = ""auto-start"";
@@ -121,15 +122,15 @@ public interface ModelDescriptionConstants {
     String CACHE_TYPE = ""cache-type"";
     String CACHING_REALM = ""caching-realm"";
     String CALLER_THREAD = ""caller-thread"";
-    String CANCEL_OPERATION = ""cancel"";
     String CANCEL_NON_PROGRESSING_OPERATION = ""cancel-non-progressing-operation"";
+    String CANCEL_OPERATION = ""cancel"";
     String CANCELLED = ""cancelled"";
     String CAPABILITY_REFERENCE = ""capability-reference"";
     String CERTIFICATE_AUTHORITY_ACCOUNT = ""certificate-authority-account"";
     String CERTIFICATE_DETAILS = ""certificate-details"";
     String CHAINED_PRINCIPAL_TRANSFORMER = ""chained-principal-transformer"";
-    String CHANGE_ALIAS = ""change-alias"";
     String CHANGE_ACCOUNT_KEY = ""change-account-key"";
+    String CHANGE_ALIAS = ""change-alias"";
     String CHANGE_MESSAGE_PRIORITY = ""change-message-priority"";
     String CHANGE_MESSAGES_PRIORITY = ""change-messages-priority"";
     String CHANNEL = ""channel"";
@@ -164,11 +165,11 @@ public interface ModelDescriptionConstants {
     String CONFIGURATION = ""configuration"";
     String CONNECTED = ""connected"";
     String CONNECTION_COUNT = ""connection-count"";
+    String CONNECTION_DEFINITIONS = ""connection-definitions"";
+    String CONNECTION_FACTORY = ""connection-factory"";
     String CONNECTION_ID = ""connection-id"";
     String CONNECTION_LIMIT_HIGH_WATER_MARK = ""connection-limit-high-water-mark"";
     String CONNECTION_LIMIT_LOW_WATER_MARK = ""connection-limit-low-water-mark"";
-    String CONNECTION_DEFINITIONS = ""connection-definitions"";
-    String CONNECTION_FACTORY = ""connection-factory"";
     String CONNECTION_PROPERTIES = ""connection-properties"";
     String CONNECTION_TIMEOUT = ""connection-timeout"";
     String CONNECTION_URL = ""connection-url"";
@@ -183,9 +184,9 @@ public interface ModelDescriptionConstants {
     String CONSTANT_REALM_MAPPER = ""constant-realm-mapper"";
     String CONSTANT_ROLE_MAPPER = ""constant-role-mapper"";
     String CONSUME = ""consume"";
-    String CONSUMES = ""consumes"";
-    String CONSUMER_ID = ""consumer-id"";
     String CONSUMER_COUNT = ""consumer-count"";
+    String CONSUMER_ID = ""consumer-id"";
+    String CONSUMES = ""consumes"";
     String CONTENT = ""content"";
     String CONTEXT = ""context"";
     String CONTEXT_ROOT = ""context-root"";
@@ -224,9 +225,9 @@ public interface ModelDescriptionConstants {
     String CUSTOM_SECURITY_EVENT_LISTENER = ""custom-security-event-listener"";
     String DATA_COLUMN = ""data-column"";
     String DATA_SOURCE = ""data-source"";
-    String DATASOURCES = ""datasources"";
     String DATASOURCE_CLASS = ""datasource-class"";
     String DATASOURCE_CLASS_INFO = ""datasource-class-info"";
+    String DATASOURCES = ""datasources"";
     String DEACTIVATE_ACCOUNT = ""deactivate-account"";
     String DEAD_LETTER_ADDRESS = ""dead-letter-address"";
     String DEFAULT = ""default"";
@@ -285,8 +286,8 @@ public interface ModelDescriptionConstants {
     String DRIVER_MODULE_NAME = ""driver-module-name"";
     String DRIVER_NAME = ""driver-name"";
     String DRIVER_VERSION = ""driver-version"";
-    String DROP_ALL_SUBSCRIPTIONS = ""drop-all-subscriptions"";
     String DRIVER_XA_DATASOURCE_CLASS_NAME = ""driver-xa-datasource-class-name"";
+    String DROP_ALL_SUBSCRIPTIONS = ""drop-all-subscriptions"";
     String DURABLE = ""durable"";
     String DURABLE_MESSAGE_COUNT = ""durable-message-count"";
     String DURABLE_SUBSCRIPTION_COUNT = ""durable-subscription-count"";
@@ -302,6 +303,7 @@ public interface ModelDescriptionConstants {
     String ENDPOINT_CONFIG = ""endpoint-config"";
     String ENTRIES = ""entries"";
     String ERROR_COUNT = ""error-count"";
+    String ERROR_WFY_CTL_0379 = ""WFLYCTL0379"";
     String EVENTS = ""events"";
     String EXCEPTION_SORTER_CLASS_NAME = ""exception-sorter-class-name"";
     String EXCEPTIONS = ""exceptions"";
@@ -320,9 +322,9 @@ public interface ModelDescriptionConstants {
     String EXPLODE = ""explode"";
     String EXPLODED = ""exploded"";
     String EXPORT_CERTIFICATE = ""export-certificate"";
+    String EXPOSED_SUBSYSTEMS = ""exposed-subsystems"";
     String EXPRESSION = ""expression"";
     String EXPRESSIONS_ALLOWED = ""expressions-allowed"";
-    String EXPOSED_SUBSYSTEMS = ""exposed-subsystems"";
     String EXTENSION_POINT = ""extension-point"";
     String EXTERNAL_JMS_QUEUE = ""external-jms-queue"";
     String EXTERNAL_JMS_TOPIC = ""external-jms-topic"";
@@ -363,13 +365,12 @@ public interface ModelDescriptionConstants {
     String GET_SESSION_LAST_ACCESSED_TIME = ""get-session-last-accessed-time"";
     String GLOBAL_MODULES = ""global-modules"";
     String GROUP = ""group"";
-    String GROUPS_ATTRIBUTE = ""groups-attribute"";
     String GROUPING_HANDLER = ""grouping-handler"";
+    String GROUPS_ATTRIBUTE = ""groups-attribute"";
     String HA_POLICY = ""ha-policy"";
-    // HAL_* attributes are used internally only!
-    String HAL_ACTIVE_OP_ADDRESS = ""hal-active-op-address"";
     String HAL_ACTIVE_ADDRESS_HOST = ""hal-active-address-host"";
     String HAL_ACTIVE_ADDRESS_SERVER = ""hal-active-address-server"";
+    String HAL_ACTIVE_OP_ADDRESS = ""hal-active-op-address"";
     String HAL_INDEX = ""hal-index"";
     String HAL_LABEL = ""hal-label"";
     String HAL_LENGTH = ""hal-length"";
@@ -400,8 +401,8 @@ public interface ModelDescriptionConstants {
     String ID_COLUMN = ""id-column"";
     String IDENTITY = ""identity"";
     String IDENTITY_ATTRIBUTES = ""identity-attributes"";
-    String IDENTITY_REALM = ""identity-realm"";
     String IDENTITY_MAPPING = ""identity-mapping"";
+    String IDENTITY_REALM = ""identity-realm"";
     String IIOP_OPENJDK = ""iiop-openjdk"";
     String IMAP = ""imap"";
     String IMPLEMENTATION = ""implementation"";
@@ -438,18 +439,18 @@ public interface ModelDescriptionConstants {
     String JAVA_METHOD = ""java-method"";
     String JAX_RS = ""jaxrs"";
     String JCA = ""jca"";
-    String JDR = ""jdr"";
     String JDBC = ""jdbc"";
     String JDBC_DRIVER = ""jdbc-driver"";
     String JDBC_REALM = ""jdbc-realm"";
+    String JDR = ""jdr"";
     String JGROUPS = ""jgroups"";
     String JMS_BRIDGE = ""jms-bridge"";
     String JMS_DELIVERY_MODE = ""JMSDeliveryMode"";
     String JMS_EXPIRATION = ""JMSExpiration"";
     String JMS_MESSAGE_ID = ""JMSMessageID"";
     String JMS_PRIORITY = ""JMSPriority"";
-    String JMS_TIMESTAMP = ""JMSTimestamp"";
     String JMS_QUEUE = ""jms-queue"";
+    String JMS_TIMESTAMP = ""JMSTimestamp"";
     String JMS_TOPIC = ""jms-topic"";
     String JMX = ""jmx"";
     String JNDI_NAME = ""jndi-name"";
@@ -485,8 +486,8 @@ public interface ModelDescriptionConstants {
     String LEVEL = ""level"";
     String LIBRARY_PATH = ""library-path"";
     String LICENSE = ""license"";
-    String LINK = ""link"";
     String LINES = ""lines"";
+    String LINK = ""link"";
     String LIST_ADD_OPERATION = ""list-add"";
     String LIST_ALL_CONSUMERS_AS_JSON = ""list-all-consumers-as-json"";
     String LIST_CHANGES_OPERATION = ""list-changes"";
@@ -540,8 +541,8 @@ public interface ModelDescriptionConstants {
     String MATCH_ALL = ""match-all"";
     String MAX = ""max"";
     String MAX_ACTIVE_SESSIONS = ""max-active-sessions"";
-    String MAX_PROCESSING_TIME = ""max-processing-time"";
     String MAX_POOL_SIZE = ""max-pool-size"";
+    String MAX_PROCESSING_TIME = ""max-processing-time"";
     String MAX_RETRIES = ""max-retries"";
     String MAX_THREADS = ""max-threads"";
     String MAXIMUM_PERMISSIONS = ""maximum-permissions"";
@@ -606,20 +607,20 @@ public interface ModelDescriptionConstants {
     String NUMBER_OF_TIMEDOUT_TRANSACTIONS = ""number-of-timed-out-transactions"";
     String NUMBER_OF_TRANSACTIONS = ""number-of-transactions"";
     String OBJECT = ""object"";
-    String OFF_HEAP = ""off-heap"";
     String OBTAIN_CERTIFICATE = ""obtain-certificate"";
+    String OFF_HEAP = ""off-heap"";
     String OOB = ""oob"";
     String OP = ""operation"";
     String OPERATION = ""operation"";
     String OPERATION_DATE = ""operation-date"";
     String OPERATION_HEADERS = ""operation-headers"";
     String OPERATIONS = ""operations"";
-    String ORGANIZATION = ""organization"";
     String ORDINAL = ""ordinal"";
-    String OUTBOUND_SOCKET_BINDING_REF = ""outbound-socket-binding-ref"";
-    String OUTCOME = ""outcome"";
+    String ORGANIZATION = ""organization"";
     String OTHER_QUEUE_NAME = ""other-queue-name"";
     String OTP_CREDENTIAL_MAPPER = ""otp-credential-mapper"";
+    String OUTBOUND_SOCKET_BINDING_REF = ""outbound-socket-binding-ref"";
+    String OUTCOME = ""outcome"";
     String OVERRIDE = ""override"";
     String OVERRIDE_ALL = ""override-all"";
     String OVERRIDE_MODULE = ""override-modules"";
@@ -629,11 +630,11 @@ public interface ModelDescriptionConstants {
     String PASSIVATED_COUNT = ""passivated-count"";
     String PASSIVATION_STORE = ""passivation-store"";
     String PASSWORD = ""password"";
-    String PATH = ""path"";
-    String PATHS = ""paths"";
     String PATCH = ""patch"";
     String PATCH_ID = ""patch-id"";
     String PATCHING = ""patching"";
+    String PATH = ""path"";
+    String PATHS = ""paths"";
     String PATTERN = ""pattern"";
     String PATTERN_FILTER = ""pattern-filter"";
     String PATTERN_FORMATTER = ""pattern-formatter"";
@@ -664,16 +665,16 @@ public interface ModelDescriptionConstants {
     String PREDEFINED_FILTER = ""predefined-filter"";
     String PREFIX = ""prefix"";
     String PRESERVE = ""preserve"";
-    String PRINCIPALS = ""principals"";
     String PRINCIPAL_QUERY = ""principal-query"";
+    String PRINCIPALS = ""principals"";
     String PRIORITY = ""priority"";
     String PROBE_OPERATION = ""probe"";
-    String PROCESSING_TIME = ""processing-time"";
     String PROCESS_ID_SOCKET_BINDING = ""process-id-socket-binding"";
     String PROCESS_ID_SOCKET_MAX_PORTS = ""process-id-socket-max-ports"";
     String PROCESS_ID_UUID = ""process-id-uuid"";
     String PROCESS_STATE = ""process-state"";
     String PROCESS_STATE_LISTENER = ""process-state-listener"";
+    String PROCESSING_TIME = ""processing-time"";
     String PRODUCES = ""produces"";
     String PRODUCT_NAME = ""product-name"";
     String PRODUCT_VERSION = ""product-version"";
@@ -685,15 +686,15 @@ public interface ModelDescriptionConstants {
     String PROTOCOL = ""protocol"";
     String PROTOCOLS = ""protocols"";
     String PROVIDER = ""provider"";
-    String PROVIDER_NAME = ""provider-name"";
     String PROVIDER_HTTP_SERVER_MECHANISM_FACTORY = ""provider-http-server-mechanism-factory"";
     String PROVIDER_LOADER = ""provider-loader"";
     String PROVIDER_MODULE = ""provider-module"";
+    String PROVIDER_NAME = ""provider-name"";
     String PROVIDER_SASL_SERVER_FACTORY = ""provider-sasl-server-factory"";
     String PROXIES = ""proxies"";
     String PROXY = ""proxy"";
-    String PRUNE_EXPIRED = ""prune-expired"";
     String PRUNE_DISCONNECTED = ""prune-disconnected"";
+    String PRUNE_EXPIRED = ""prune-expired"";
     String QUERY = ""query"";
     String QUEUE = ""queue"";
     String QUEUE_ADDRESS = ""queue-address"";
@@ -717,9 +718,9 @@ public interface ModelDescriptionConstants {
     String READ_RESOURCE_OPERATION = ""read-resource"";
     String READ_WRITE = ""read-write"";
     String REALM = ""realm"";
-    String REALMS = ""realms"";
     String REALM_NAME = ""realm-name"";
     String REALM_PUBLIC_KEY = ""realm-public-key"";
+    String REALMS = ""realms"";
     String REASON = ""reason"";
     String RECORD_REQUEST_START_TIME = ""record-request-start-time"";
     String RECOVERY_PLUGIN_CLASS_NAME = ""recovery-plugin-class-name"";
@@ -741,17 +742,17 @@ public interface ModelDescriptionConstants {
     String RELOAD_REQUIRED = ""reload-required"";
     String RELOAD_SERVERS = ""reload-servers"";
     @SuppressWarnings(""unused"") String REMOTE = ""remote""; // used by test suite
-    String REMOTE_ADDRESS = ""remote-address"";
     String REMOTE_ACCEPTOR = ""remote-acceptor"";
+    String REMOTE_ADDRESS = ""remote-address"";
     String REMOTE_CACHE_CONTAINER = ""remote-cache-container"";
     String REMOTE_CLUSTER = ""remote-cluster"";
     String REMOTE_COMMAND = ""remote-command"";
     String REMOTE_CONNECTOR = ""remote-connector"";
-    String REMOVE_CONTENT = ""remove-content"";
     String REMOTE_DESTINATION_OUTBOUND_SOCKET_BINDING = ""remote-destination-outbound-socket-binding"";
     String REMOTING = ""remoting"";
     String REMOVE = ""remove"";
     String REMOVE_ALIAS = ""remove-alias"";
+    String REMOVE_CONTENT = ""remove-content"";
     String REMOVE_IDENTITY = ""remove-identity"";
     String REMOVE_IDENTITY_ATTRIBUTE = ""remove-identity-attribute"";
     String REMOVE_MESSAGE = ""remove-message"";
@@ -771,8 +772,8 @@ public interface ModelDescriptionConstants {
     String RESET_CONFIGURATION = ""reset-configuration"";
     String RESET_STATISTICS_OPERATION = ""reset-statistics"";
     String RESOLVE_EXPRESSION = ""resolve-expression"";
-    String RESOLVE_EXPRESSIONS = ""resolve-expressions"";
     String RESOLVE_EXPRESSION_ON_DOMAIN = ""resolve-expression-on-domain"";
+    String RESOLVE_EXPRESSIONS = ""resolve-expressions"";
     String RESOURCE_ADAPTER = ""resource-adapter"";
     String RESOURCE_ADAPTERS = ""resource-adapters"";
     String RESOURCE_METHODS = ""resource-methods"";
@@ -803,9 +804,9 @@ public interface ModelDescriptionConstants {
     String RUNNING_TIME = ""running-time"";
     String RUNTIME = ""runtime"";
     String RUNTIME_NAME = ""runtime-name"";
+    String SALT = ""salt"";
     String SAME_RM_OVERRIDE = ""same-rm-override"";
     String SAR = ""sar"";
-    String SALT = ""salt"";
     String SASL_AUTHENTICATION_FACTORY = ""sasl-authentication-factory"";
     String SASL_PROTOCOL = ""sasl-protocol"";
     String SCATTERED_CACHE = ""scattered-cache"";
@@ -847,7 +848,6 @@ public interface ModelDescriptionConstants {
     String SERVICES_MISSING_TRANSITIVE_DEPENDENCIES = ""services-missing-transitive-dependencies"";
     String SERVLET = ""servlet"";
     String SERVLET_CONTAINER = ""servlet-container"";
-    String SETTING = ""setting"";
     String SESSION_AVG_ALIVE_TIME = ""session-avg-alive-time"";
     String SESSION_COOKIE = ""session-cookie"";
     String SESSION_COUNT = ""session-count"";
@@ -856,6 +856,7 @@ public interface ModelDescriptionConstants {
     String SESSIONS_CREATED = ""sessions-created"";
     String SET_PASSWORD = ""set-password"";
     String SET_SECRET = ""set-secret"";
+    String SETTING = ""setting"";
     String SHARED_STORE_COLOCATED = ""shared-store-colocated"";
     String SHARED_STORE_MASTER = ""shared-store-master"";
     String SHARED_STORE_SLAVE = ""shared-store-slave"";
@@ -927,8 +928,8 @@ public interface ModelDescriptionConstants {
     String SUSPEND_STATE = ""suspend-state"";
     String SYSLOG_AUDIT_LOG = ""syslog-audit-log"";
     String SYSLOG_HANDLER = ""syslog-handler"";
-    String SYSTEM_PROPERTY = ""system-property"";
     String SYSTEM_PROPERTIES = ""system-properties"";
+    String SYSTEM_PROPERTY = ""system-property"";
     String TABLE = ""table"";
     String TAIL = ""tail"";
     String TARGET = ""target"";
@@ -944,18 +945,18 @@ public interface ModelDescriptionConstants {
     String THREAD_POOL = ""thread-pool"";
     String THREAD_POOL_MAX_SIZE = ""thread-pool-max-size"";
     String THROUGH = ""through"";
-    String TIMEOUT = ""timeout"";
     String TIME_REMAINING = ""time-remaining"";
+    String TIMEOUT = ""timeout"";
     String TIMER = ""timer"";
     String TIMERS = ""timers"";
     String TIMESTAMP = ""timestamp"";
     String TIMESTAMP_COLUMN = ""timestamp-column"";
     String TO = ""to"";
     String TO_PROFILE = ""to-profile"";
+    String TOKEN_REALM = ""token-realm"";
     String TOPIC_ADDRESS = ""topic-address"";
     String TOTAL_PROCESSING_TIME = ""total-processing-time"";
     String TOTAL_SIZE = ""total-size"";
-    String TOKEN_REALM = ""token-realm"";
     String TRANSACTION = ""transaction"";
     String TRANSACTION_ID = ""transaction-id"";
     String TRANSACTION_SUPPORT = ""transaction-support"";
@@ -974,16 +975,16 @@ public interface ModelDescriptionConstants {
     String UNDERTOW = ""undertow"";
     String UNIT = ""unit"";
     String UNREGISTERED = ""unregistered"";
+    String UP = ""UP"";
     String UPDATE_ACCOUNT = ""update-account"";
     String UPDATE_AUTO_START_WITH_SERVER_STATUS = ""update-auto-start-with-server-status"";
-    String UP = ""UP"";
     String UPTIME = ""uptime"";
     String URL = ""url"";
     String USE_RECURSIVE_SEARCH = ""use-recursive-search"";
     String USER_NAME = ""user-name"";
     String USER_PASSWORD_MAPPER = ""user-password-mapper"";
-    String USERS_PROPERTIES = ""users-properties"";
     String USERNAME = ""username"";
+    String USERS_PROPERTIES = ""users-properties"";
     String VALID_CONNECTION_CHECKER_CLASS_NAME = ""valid-connection-checker-class-name"";
     String VALIDATE = ""validate"";
     String VALIDITY = ""validity"";",2019-08-07T11:33:26Z,109
"@@ -153,7 +153,8 @@ public void execute(Composite operations, Consumer<CompositeResult> success, OnF
 
     @JsIgnore
     public Single<CompositeResult> execute(Composite operations) {
-        return dmr(operations).map(this::compositeResult);
+        //noinspection Convert2MethodRef
+        return dmr(operations).map(payload -> compositeResult(payload));
     }
 
     private CompositeResult compositeResult(ModelNode payload) {",2019-08-07T11:33:26Z,49
"@@ -45,18 +45,18 @@
 import org.jboss.hal.spi.Footer;
 import org.jboss.hal.spi.Requires;
 
-import static org.jboss.hal.client.runtime.BrowseByColumn.DC_ADDRESS;
+import static org.jboss.hal.client.runtime.BrowseByColumn.ANY_HOST;
 import static org.jboss.hal.client.runtime.BrowseByColumn.SERVER_CONFIG_ADDRESS;
 import static org.jboss.hal.client.runtime.BrowseByColumn.SERVER_GROUP_ADDRESS;
 
 @Column(Ids.DOMAIN_BROWSE_BY)
-@Requires(value = {DC_ADDRESS, SERVER_GROUP_ADDRESS, SERVER_CONFIG_ADDRESS}, recursive = false)
+@Requires(value = {ANY_HOST, SERVER_GROUP_ADDRESS, SERVER_CONFIG_ADDRESS}, recursive = false)
 public class BrowseByColumn extends StaticItemColumn {
 
     // necessary for the constraints in topology preview
-    static final String DC_ADDRESS = ""/{domain.controller}"";
+    static final String ANY_HOST = ""/host=*"";
     static final String SERVER_GROUP_ADDRESS = ""/server-group=*"";
-    static final String SERVER_CONFIG_ADDRESS = ""/{domain.controller}/server-config=*"";
+    static final String SERVER_CONFIG_ADDRESS = ANY_HOST + ""/server-config=*"";
 
     public static boolean browseByHosts(FinderContext context) {
         FinderSegment firstSegment = context.getPath().iterator().next();",2019-12-10T14:17:59Z,208
"@@ -72,10 +72,11 @@
 public class ConfigurationChangesPresenter extends
         ApplicationFinderPresenter<ConfigurationChangesPresenter.MyView, ConfigurationChangesPresenter.MyProxy> {
 
-    public static final String HOST_CONFIGURATION_CHANGES_ADDRESS = ""{selected.host}/subsystem=core-management/service=configuration-changes"";
+    public static final String CONFIGURATION_CHANGES_ADDRESS = ""/subsystem=core-management/service=configuration-changes"";
+    public static final String HOST_CONFIGURATION_CHANGES_ADDRESS = ""{selected.host}"" + CONFIGURATION_CHANGES_ADDRESS;
     public static final AddressTemplate HOST_CONFIGURATION_CHANGES_TEMPLATE = AddressTemplate.of(
             HOST_CONFIGURATION_CHANGES_ADDRESS);
-    private static final String SERVER_CONFIGURATION_CHANGES_ADDRESS = ""/{selected.host}/{selected.server}/subsystem=core-management/service=configuration-changes"";
+    private static final String SERVER_CONFIGURATION_CHANGES_ADDRESS = ""/{selected.host}/{selected.server}"" + CONFIGURATION_CHANGES_ADDRESS;
     public static final AddressTemplate SERVER_CONFIGURATION_CHANGES_TEMPLATE = AddressTemplate.of(
             SERVER_CONFIGURATION_CHANGES_ADDRESS);
     private static final String PROFILE_CONFIGURATION_CHANGES_ADDRESS = ""/profile=*/subsystem=core-management/service=configuration-changes"";",2019-12-10T14:17:59Z,55
"@@ -17,22 +17,24 @@
 
 import org.jboss.hal.meta.AddressTemplate;
 
+import static org.jboss.hal.client.runtime.configurationchanges.ConfigurationChangesPresenter.CONFIGURATION_CHANGES_ADDRESS;
+
 interface AddressTemplates {
 
     String DOMAIN_CONTROLLER = ""{domain.controller}"";
-    String SELECTED_HOST = ""{selected.host}"";
+    String ANY_HOST = ""host=*"";
 
     String ELYTRON_ADDRESS = DOMAIN_CONTROLLER + ""/subsystem=elytron"";
-    String HTTP_INTERFACE_ADDRESS = SELECTED_HOST + ""/core-service=management/management-interface=http-interface"";
+    String HTTP_INTERFACE_ADDRESS = ANY_HOST + ""/core-service=management/management-interface=http-interface"";
     String HOST_CONNECTION_ADDRESS = ""/core-service=management/host-connection=*"";
-    String HOST_CONFIGURATION_CHANGES_ADDRESS = DOMAIN_CONTROLLER + ""/subsystem=core-management/service=configuration-changes"";
-    String HOST_MANAGEMENT_OPERATIONS_ADDRESS = DOMAIN_CONTROLLER + ""/core-service=management/service=management-operations"";
-    String INTERFACE_ADDRESS = SELECTED_HOST + ""/interface=*"";
-    String JVM_ADDRESS = SELECTED_HOST + ""/jvm=*"";
-    String NATIVE_INTERFACE_ADDRESS = SELECTED_HOST + ""/core-service=management/management-interface=native-interface"";
-    String PATH_ADDRESS = SELECTED_HOST + ""/path=*"";
-    String SOCKET_BINDING_GROUP_ADDRESS = SELECTED_HOST + ""/socket-binding-group=*"";
-    String SYSTEM_PROPERTY_ADDRESS = SELECTED_HOST + ""/system-property=*"";
+    String HOST_CONFIGURATION_CHANGES_ADDRESS = ANY_HOST + CONFIGURATION_CHANGES_ADDRESS;
+    String HOST_MANAGEMENT_OPERATIONS_ADDRESS = ANY_HOST + ""/core-service=management/service=management-operations"";
+    String INTERFACE_ADDRESS = ANY_HOST + ""/interface=*"";
+    String JVM_ADDRESS = ANY_HOST + ""/jvm=*"";
+    String NATIVE_INTERFACE_ADDRESS = ANY_HOST + ""/core-service=management/management-interface=native-interface"";
+    String PATH_ADDRESS = ANY_HOST + ""/path=*"";
+    String SOCKET_BINDING_GROUP_ADDRESS = ANY_HOST + ""/socket-binding-group=*"";
+    String SYSTEM_PROPERTY_ADDRESS = ANY_HOST + ""/system-property=*"";
 
     AddressTemplate HTTP_INTERFACE_TEMPLATE = AddressTemplate.of(HTTP_INTERFACE_ADDRESS);
     AddressTemplate NATIVE_INTERFACE_TEMPLATE = AddressTemplate.of(NATIVE_INTERFACE_ADDRESS);",2019-12-10T14:17:59Z,209
"@@ -67,7 +67,7 @@
 
 import static java.util.Collections.emptyList;
 import static java.util.stream.Collectors.toList;
-import static org.jboss.hal.client.runtime.configurationchanges.ConfigurationChangesPresenter.HOST_CONFIGURATION_CHANGES_TEMPLATE;
+import static org.jboss.hal.client.runtime.configurationchanges.ConfigurationChangesPresenter.CONFIGURATION_CHANGES_ADDRESS;
 import static org.jboss.hal.client.runtime.host.AddressTemplates.HOST_CONFIGURATION_CHANGES_ADDRESS;
 import static org.jboss.hal.client.runtime.host.AddressTemplates.HOST_CONNECTION_ADDRESS;
 import static org.jboss.hal.client.runtime.host.AddressTemplates.HOST_CONNECTION_TEMPLATE;
@@ -196,7 +196,7 @@ public List<ItemAction<Host>> actions() {
                                     .with(HOST, item.getAddressName())
                                     .build();
                             actions.add(itemActionFactory.placeRequest(resources.constants().configurationChanges(),
-                                    ccPlaceRequest, Constraint.executable(HOST_CONFIGURATION_CHANGES_TEMPLATE, ADD)));
+                                    ccPlaceRequest, Constraint.executable(hostTemplate(item).append(CONFIGURATION_CHANGES_ADDRESS), ADD)));
                         }
                         // TODO Add additional operations like :reload(admin-mode=true), :clean-obsolete-content or :take-snapshot
                         actions.add(ItemAction.separator());",2019-12-10T14:17:59Z,5
"@@ -186,7 +186,7 @@ public void reloadView() {
 
     void saveHost(Form<Host> form, Map<String, Object> changedValues) {
         boolean hostNameChanged = changedValues.containsKey(NAME);
-        crud.save(Names.HOST, form.getModel().getName(), AddressTemplate.of(SELECTED_HOST), changedValues, () -> {
+        crud.save(Names.HOST, form.getModel().getName(), AddressTemplate.of(""/{selected.host}""), changedValues, () -> {
             reload();
             if (hostNameChanged) {
                 DialogFactory.showConfirmation(resources.constants().hostNameChanged(),
@@ -406,7 +406,7 @@ public void reloadServer(Host host, String urlConsole) {
     // @formatter:off
     @ProxyCodeSplit
     @NameToken(NameTokens.HOST_CONFIGURATION)
-    @Requires(value = {SELECTED_HOST, INTERFACE_ADDRESS, JVM_ADDRESS, PATH_ADDRESS, SOCKET_BINDING_GROUP_ADDRESS,
+    @Requires(value = {ANY_HOST, INTERFACE_ADDRESS, JVM_ADDRESS, PATH_ADDRESS, SOCKET_BINDING_GROUP_ADDRESS,
             SYSTEM_PROPERTY_ADDRESS, HTTP_INTERFACE_ADDRESS, NATIVE_INTERFACE_ADDRESS}, recursive = false)
     public interface MyProxy extends ProxyPlace<HostPresenter> {
     }",2019-12-10T14:17:59Z,54
"@@ -94,7 +94,7 @@
 import static java.util.Collections.emptyList;
 import static java.util.Comparator.comparing;
 import static java.util.stream.Collectors.toList;
-import static org.jboss.hal.client.runtime.configurationchanges.ConfigurationChangesPresenter.SERVER_CONFIGURATION_CHANGES_TEMPLATE;
+import static org.jboss.hal.client.runtime.configurationchanges.ConfigurationChangesPresenter.CONFIGURATION_CHANGES_ADDRESS;
 import static org.jboss.hal.core.finder.FinderColumn.RefreshMode.RESTORE_SELECTION;
 import static org.jboss.hal.core.runtime.TopologyTasks.serversOfHost;
 import static org.jboss.hal.core.runtime.TopologyTasks.serversOfServerGroup;
@@ -103,15 +103,17 @@
 import static org.jboss.hal.resources.Ids.FORM;
 
 @Column(Ids.SERVER)
-@Requires(value = {""/{domain.controller}/server-config=*"", ""/{domain.controller}/server=*""}, recursive = false)
+@Requires(value = {""/host=*/server-config=*"", ""/host=*/server=*"", ""/host=*/server=*"" + CONFIGURATION_CHANGES_ADDRESS}, recursive = false)
 public class ServerColumn extends FinderColumn<Server> implements ServerActionHandler, ServerResultHandler {
 
+    static final String HOST_KEY = ""/host="";
+
     static AddressTemplate serverConfigTemplate(Server server) {
         return serverConfigTemplate(server.getHost());
     }
 
     static AddressTemplate serverConfigTemplate(String host) {
-        return AddressTemplate.of(""/host="" + host + ""/server-config=*"");
+        return AddressTemplate.of(HOST_KEY + host + ""/server-config=*"");
     }
 
     private final Finder finder;
@@ -332,7 +334,7 @@ public List<ItemAction<Server>> actions() {
                             .build());
                     if (!item.isStarted()) {
                         AddressTemplate template = AddressTemplate
-                                .of(""/host="" + item.getHost() + ""/server-config="" + item.getName());
+                                .of(HOST_KEY + item.getHost() + ""/server-config="" + item.getName());
                         actions.add(itemActionFactory.remove(Names.SERVER, item.getName(),
                                 template, serverConfigTemplate(item), ServerColumn.this));
                     }
@@ -351,9 +353,11 @@ public List<ItemAction<Server>> actions() {
                                     .nameToken(NameTokens.CONFIGURATION_CHANGES)
                                     .with(params)
                                     .build();
+                            AddressTemplate template = AddressTemplate
+                                    .of(HOST_KEY + item.getHost() + ""/server="" + item.getName())
+                                    .append(CONFIGURATION_CHANGES_ADDRESS);
                             actions.add(itemActionFactory.placeRequest(resources.constants().configurationChanges(),
-                                    ccPlaceRequest, Constraint.executable(SERVER_CONFIGURATION_CHANGES_TEMPLATE,
-                                            LIST_CHANGES_OPERATION)));
+                                    ccPlaceRequest, Constraint.executable(template, LIST_CHANGES_OPERATION)));
                         }
 
                         actions.add(ItemAction.separator());",2019-12-10T14:17:59Z,23
"@@ -160,6 +160,7 @@
 import org.jboss.hal.client.tools.MacroEditorView;
 import org.jboss.hal.client.tools.ModelBrowserPresenter;
 import org.jboss.hal.client.tools.ModelBrowserView;
+import org.jboss.hal.core.ExceptionHandler;
 import org.jboss.hal.core.mvp.HalPlaceManager;
 import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.spi.GinModule;",2018-02-01T16:28:42Z,44
"@@ -20,10 +20,10 @@
 import com.gwtplatform.mvp.client.Bootstrapper;
 import com.gwtplatform.mvp.client.proxy.PlaceManager;
 import elemental2.dom.Event;
-import org.jboss.hal.client.ExceptionHandler;
 import org.jboss.hal.client.bootstrap.endpoint.EndpointManager;
 import org.jboss.hal.client.bootstrap.tasks.BootstrapTasks;
 import org.jboss.hal.config.Endpoints;
+import org.jboss.hal.core.ExceptionHandler;
 import org.jetbrains.annotations.NonNls;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;",2018-02-01T16:28:42Z,22
"@@ -15,13 +15,29 @@
  */
 package org.jboss.hal.client.bootstrap;
 
+import com.google.gwt.core.client.GWT;
 import com.gwtplatform.mvp.client.PreBootstrapper;
-import org.jboss.hal.client.ExceptionHandler;
+import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.hal.config.Endpoints;
+import org.jboss.hal.resources.Names;
+import org.jetbrains.annotations.NonNls;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import static elemental2.dom.DomGlobal.document;
 
 public class HalPreBootstrapper implements PreBootstrapper {
 
+    @NonNls private static final Logger logger = LoggerFactory.getLogger(HalPreBootstrapper.class);
+
     @Override
     public void onPreBootstrap() {
-        ExceptionHandler.beforeBootstrap();
+        GWT.setUncaughtExceptionHandler(e -> {
+            LoadingPanel.get().off();
+            String errorMessage = e != null ? e.getMessage() : Names.NOT_AVAILABLE;
+            logger.error(""Uncaught bootstrap error: {}"", errorMessage);
+            Elements.removeChildrenFrom(document.body);
+            document.body.appendChild(BootstrapFailed.create(errorMessage, Endpoints.INSTANCE).asElement());
+        });
     }
 }",2018-02-01T16:28:42Z,73
"@@ -58,6 +58,12 @@ public class Core {
     @JsIgnore
     public static Core INSTANCE;
 
+    @JsIgnore
+    public static void setPendingLifecycleAction(boolean value) {
+        Dispatcher.setPendingLifecycleAction(value);
+        ExceptionHandler.setPendingLifecycleAction(value);
+    }
+
     private final CrudOperations crud;
     private final Dispatcher dispatcher;
     private final Endpoints endpoints;
@@ -71,16 +77,16 @@ public class Core {
 
     @Inject
     @JsIgnore
-    public Core(final CrudOperations crud,
-            final Dispatcher dispatcher,
-            final Endpoints endpoints,
-            final Environment environment,
-            final EventBus eventBus,
-            final ExtensionRegistry extensionRegistry,
-            final MetadataProcessor metadataProcessor,
-            final MetadataRegistry metadataRegistry,
-            final StatementContext statementContext,
-            final TableButtonFactory tableButtonFactory) {
+    public Core(CrudOperations crud,
+            Dispatcher dispatcher,
+            Endpoints endpoints,
+            Environment environment,
+            EventBus eventBus,
+            ExtensionRegistry extensionRegistry,
+            MetadataProcessor metadataProcessor,
+            MetadataRegistry metadataRegistry,
+            StatementContext statementContext,
+            TableButtonFactory tableButtonFactory) {
         this.crud = crud;
         this.dispatcher = dispatcher;
         this.endpoints = endpoints;
@@ -295,7 +301,7 @@ public void jsSuccess(String message) {
      */
     @JsMethod(name = ""table"")
     @EsReturn(""TableBuilder"")
-    public ModelNodeTable.Builder<ModelNode> jsTable(final Object meta) {
+    public ModelNodeTable.Builder<ModelNode> jsTable(Object meta) {
         return new ModelNodeTable.Builder<>(Ids.build(Ids.uniqueId(), Ids.TAB), jsMetadata(""table"", meta));
     }
 ",2018-02-01T16:28:42Z,203
"@@ -13,17 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.jboss.hal.client;
+package org.jboss.hal.core;
 
 import javax.inject.Inject;
 
 import com.google.gwt.core.client.GWT;
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.client.proxy.PlaceManager;
 import org.jboss.gwt.elemento.core.Elements;
-import org.jboss.hal.client.bootstrap.BootstrapFailed;
-import org.jboss.hal.client.bootstrap.LoadingPanel;
-import org.jboss.hal.config.Endpoints;
 import org.jboss.hal.flow.Progress;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
@@ -40,17 +37,13 @@
 public class ExceptionHandler {
 
     @NonNls private static final Logger logger = LoggerFactory.getLogger(ExceptionHandler.class);
+    private static boolean pendingLifecycleAction = false;
 
-    public static void beforeBootstrap() {
-        GWT.setUncaughtExceptionHandler(e -> {
-            LoadingPanel.get().off();
-            String errorMessage = e != null ? e.getMessage() : Names.NOT_AVAILABLE;
-            logger.error(""Uncaught bootstrap error: {}"", errorMessage);
-            document.body.appendChild(BootstrapFailed.create(errorMessage, Endpoints.INSTANCE).asElement());
-        });
+    public static void setPendingLifecycleAction(boolean value) {
+        pendingLifecycleAction = value;
+        logger.debug(""ExceptionHandler.pendingLifecycleAction = {}"", pendingLifecycleAction);
     }
 
-
     private final EventBus eventBus;
     private final PlaceManager placeManager;
     private final Progress progress;
@@ -69,13 +62,15 @@ public ExceptionHandler(EventBus eventBus,
 
     public void afterBootstrap() {
         GWT.setUncaughtExceptionHandler(e -> {
-            String errorMessage = e != null ? e.getMessage() : Names.NOT_AVAILABLE;
-            logger.error(""Uncaught exception: {}"", errorMessage);
-            placeManager.unlock();
-            progress.finish();
-            stopProgress();
-            MessageEvent.fire(eventBus,
-                    Message.error(resources.messages().unknownError(), errorMessage));
+            if (!pendingLifecycleAction) {
+                String errorMessage = e != null ? e.getMessage() : Names.NOT_AVAILABLE;
+                logger.error(""Uncaught exception: {}"", errorMessage);
+                placeManager.unlock();
+                progress.finish();
+                stopProgress();
+                MessageEvent.fire(eventBus,
+                        Message.error(resources.messages().unknownError(), errorMessage));
+            }
         });
     }
 ",2018-02-01T16:28:42Z,2
"@@ -29,6 +29,7 @@
 import org.jboss.hal.ballroom.dialog.Dialog;
 import org.jboss.hal.ballroom.dialog.DialogFactory;
 import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.core.Core;
 import org.jboss.hal.core.mbui.form.OperationFormBuilder;
 import org.jboss.hal.core.runtime.Action;
 import org.jboss.hal.core.runtime.Result;
@@ -148,7 +149,7 @@ public void suspend(ServerGroup serverGroup) {
         if (!startedServers.isEmpty()) {
             metadataProcessor.lookup(serverGroupTemplate(serverGroup), progress.get(), new MetadataCallback() {
                 @Override
-                public void onMetadata(final Metadata metadata) {
+                public void onMetadata(Metadata metadata) {
                     String id = Ids.build(SUSPEND_SERVERS, serverGroup.getName(), Ids.FORM);
                     Form<ModelNode> form = new OperationFormBuilder<>(id, metadata, SUSPEND_SERVERS).build();
 
@@ -186,7 +187,7 @@ public void onMetadata(final Metadata metadata) {
                 }
 
                 @Override
-                public void onError(final Throwable error) {
+                public void onError(Throwable error) {
                     MessageEvent.fire(eventBus,
                             Message.error(resources.messages().metadataError(), error.getMessage()));
                 }
@@ -223,7 +224,7 @@ public void stop(ServerGroup serverGroup) {
         if (!startedServers.isEmpty()) {
             metadataProcessor.lookup(serverGroupTemplate(serverGroup), progress.get(), new MetadataCallback() {
                 @Override
-                public void onMetadata(final Metadata metadata) {
+                public void onMetadata(Metadata metadata) {
                     String id = Ids.build(STOP_SERVERS, serverGroup.getName(), Ids.FORM);
                     Form<ModelNode> form = new OperationFormBuilder<>(id, metadata, STOP_SERVERS)
                             .include(TIMEOUT).build();
@@ -264,7 +265,7 @@ public void onMetadata(final Metadata metadata) {
                 }
 
                 @Override
-                public void onError(final Throwable error) {
+                public void onError(Throwable error) {
                     MessageEvent
                             .fire(eventBus, Message.error(resources.messages().metadataError(), error.getMessage()));
                 }
@@ -353,13 +354,13 @@ private void finish(ServerGroup serverGroup, List<Server> servers, Result result
     }
 
     private void markAsPending(ServerGroup serverGroup) {
-        Dispatcher.setPendingLifecycleAction(true);
+        Core.setPendingLifecycleAction(true);
         pendingServerGroups.put(serverGroup.getName(), serverGroup);
         logger.debug(""Mark server group {} as pending"", serverGroup.getName());
     }
 
     private void clearPending(ServerGroup serverGroup) {
-        Dispatcher.setPendingLifecycleAction(false);
+        Core.setPendingLifecycleAction(false);
         pendingServerGroups.remove(serverGroup.getName());
         logger.debug(""Clear pending state for server group {}"", serverGroup.getName());
     }
@@ -412,8 +413,8 @@ private class ServerGroupTimeoutCallback implements CompletableSubscriber {
         private final List<Server> servers;
         private final SafeHtml successMessage;
 
-        ServerGroupTimeoutCallback(final ServerGroup serverGroup, final List<Server> servers,
-                final SafeHtml successMessage) {
+        ServerGroupTimeoutCallback(ServerGroup serverGroup, List<Server> servers,
+                SafeHtml successMessage) {
             this.serverGroup = serverGroup;
             this.servers = servers;
             this.successMessage = successMessage;
@@ -442,15 +443,15 @@ private class ServerGroupFailedCallback implements Dispatcher.OnFail {
         private final List<Server> servers;
         private final SafeHtml errorMessage;
 
-        ServerGroupFailedCallback(final ServerGroup serverGroup, final List<Server> servers,
-                final SafeHtml errorMessage) {
+        ServerGroupFailedCallback(ServerGroup serverGroup, List<Server> servers,
+                SafeHtml errorMessage) {
             this.serverGroup = serverGroup;
             this.servers = servers;
             this.errorMessage = errorMessage;
         }
 
         @Override
-        public void onFailed(final Operation operation, final String failure) {
+        public void onFailed(Operation operation, String failure) {
             finish(serverGroup, servers, Result.ERROR, Message.error(errorMessage, failure));
         }
     }
@@ -462,14 +463,14 @@ private class ServerGroupExceptionCallback implements Dispatcher.OnError {
         private final List<Server> servers;
         private final SafeHtml errorMessage;
 
-        ServerGroupExceptionCallback(final ServerGroup serverGroup, final List<Server> servers, SafeHtml errorMessage) {
+        ServerGroupExceptionCallback(ServerGroup serverGroup, List<Server> servers, SafeHtml errorMessage) {
             this.serverGroup = serverGroup;
             this.servers = servers;
             this.errorMessage = errorMessage;
         }
 
         @Override
-        public void onException(final Operation operation, final Throwable exception) {
+        public void onException(Operation operation, Throwable exception) {
             finish(serverGroup, servers, Result.ERROR, Message.error(errorMessage, exception.getMessage()));
         }
     }",2018-02-01T16:28:42Z,96
"@@ -28,6 +28,7 @@
 import org.jboss.hal.ballroom.dialog.Dialog;
 import org.jboss.hal.ballroom.dialog.DialogFactory;
 import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.core.Core;
 import org.jboss.hal.core.mbui.form.OperationFormBuilder;
 import org.jboss.hal.core.runtime.Action;
 import org.jboss.hal.core.runtime.Result;
@@ -65,7 +66,7 @@
 public class HostActions {
 
     private static final int RELOAD_TIMEOUT = 10; // seconds w/o servers
-    private static final int RESTART_TIMEOUT = 15; // seconds w/o servers
+    private static final int RESTART_TIMEOUT = 20; // seconds w/o servers
     @NonNls private static final Logger logger = LoggerFactory.getLogger(HostActions.class);
 
     private static AddressTemplate hostTemplate(Host host) {
@@ -100,10 +101,10 @@ public HostActions(EventBus eventBus,
     // ------------------------------------------------------ reload
 
     @SuppressWarnings(""HardCodedStringLiteral"")
-    public void reload(final Host host) {
+    public void reload(Host host) {
         metadataProcessor.lookup(hostTemplate(host), progress.get(), new MetadataCallback() {
             @Override
-            public void onMetadata(final Metadata metadata) {
+            public void onMetadata(Metadata metadata) {
                 Form<ModelNode> form = new OperationFormBuilder<>(
                         Ids.build(RELOAD_HOST, host.getName(), Ids.FORM), metadata, RELOAD)
                         .include(RESTART_SERVERS)
@@ -157,7 +158,7 @@ public void onMetadata(final Metadata metadata) {
             }
 
             @Override
-            public void onError(final Throwable error) {
+            public void onError(Throwable error) {
                 MessageEvent.fire(eventBus,
                         Message.error(resources.messages().metadataError(), error.getMessage()));
             }
@@ -167,14 +168,14 @@ public void onError(final Throwable error) {
 
     // ------------------------------------------------------ restart
 
-    public void restart(final Host host) {
+    public void restart(Host host) {
         SafeHtml question = host.isDomainController()
                 ? resources.messages().restartDomainControllerQuestion(host.getName())
                 : resources.messages().restartHostControllerQuestion(host.getName());
         restart(host, question);
     }
 
-    public void restart(final Host host, SafeHtml question) {
+    public void restart(Host host, SafeHtml question) {
         DialogFactory.showConfirmation(resources.messages().restart(host.getName()), question, () -> {
             // execute the restart with a little delay to ensure the confirmation dialog is closed
             // before the next dialog is opened (only one modal can be open at a time!)
@@ -275,13 +276,13 @@ private void finish(Host host, List<Server> servers, Result result, Message mess
     }
 
     private void markAsPending(Host host) {
-        Dispatcher.setPendingLifecycleAction(true);
+        Core.setPendingLifecycleAction(true);
         pendingHosts.put(host.getName(), host);
         logger.debug(""Mark host {} as pending"", host.getName());
     }
 
     private void clearPending(Host host) {
-        Dispatcher.setPendingLifecycleAction(false);
+        Core.setPendingLifecycleAction(false);
         pendingHosts.remove(host.getName());
         logger.debug(""Clear pending state for host {}"", host.getName());
     }
@@ -324,14 +325,14 @@ private class HostFailedCallback implements Dispatcher.OnFail {
         private final List<Server> servers;
         private final SafeHtml errorMessage;
 
-        HostFailedCallback(final Host host, final List<Server> servers, final SafeHtml errorMessage) {
+        HostFailedCallback(Host host, List<Server> servers, SafeHtml errorMessage) {
             this.host = host;
             this.servers = servers;
             this.errorMessage = errorMessage;
         }
 
         @Override
-        public void onFailed(final Operation operation, final String failure) {
+        public void onFailed(Operation operation, String failure) {
             finish(host, servers, Result.ERROR, Message.error(errorMessage, failure));
         }
     }
@@ -343,14 +344,14 @@ private class HostExceptionCallback implements Dispatcher.OnError {
         private final List<Server> servers;
         private final SafeHtml errorMessage;
 
-        HostExceptionCallback(final Host host, final List<Server> servers, final SafeHtml errorMessage) {
+        HostExceptionCallback(Host host, List<Server> servers, SafeHtml errorMessage) {
             this.host = host;
             this.servers = servers;
             this.errorMessage = errorMessage;
         }
 
         @Override
-        public void onException(final Operation operation, final Throwable exception) {
+        public void onException(Operation operation, Throwable exception) {
             finish(host, servers, Result.ERROR, Message.error(errorMessage, exception.getMessage()));
         }
     }",2018-02-01T16:28:42Z,39
"@@ -39,6 +39,7 @@
 import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.ballroom.form.SingleSelectBoxItem;
 import org.jboss.hal.ballroom.form.TextBoxItem;
+import org.jboss.hal.core.Core;
 import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
 import org.jboss.hal.core.mbui.dialog.NameItem;
 import org.jboss.hal.core.mbui.form.ModelNodeForm;
@@ -361,7 +362,6 @@ private void reloadRestart(Server server, Operation operation, Action action, in
                             .subscribe(new ServerTimeoutCallback(server, action, successMessage)),
                     new ServerFailedCallback(server, errorMessage),
                     new ServerExceptionCallback(server, errorMessage));
-
         });
     }
 
@@ -688,13 +688,13 @@ private void finish(Server server, Result result, Message message) {
     }
 
     public void markAsPending(Server server) {
-        Dispatcher.setPendingLifecycleAction(true);
+        Core.setPendingLifecycleAction(true);
         pendingServers.put(Ids.hostServer(server.getHost(), server.getName()), server);
         logger.debug(""Mark server {} as pending"", server.getName());
     }
 
     public void clearPending(Server server) {
-        Dispatcher.setPendingLifecycleAction(false);
+        Core.setPendingLifecycleAction(false);
         pendingServers.remove(Ids.hostServer(server.getHost(), server.getName()));
         logger.debug(""Clear pending state for server {}"", server.getName());
     }",2018-02-01T16:28:42Z,93
"@@ -15,13 +15,13 @@
  */
 package org.jboss.hal.dmr.dispatch;
 
-import java.util.concurrent.TimeoutException;
 import java.util.function.Predicate;
 
 import org.jboss.hal.dmr.Composite;
 import org.jboss.hal.dmr.CompositeResult;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Operation;
+import org.jetbrains.annotations.NonNls;
 import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -31,15 +31,18 @@
 
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static java.util.concurrent.TimeUnit.SECONDS;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.FAILED;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.FAILURE_DESCRIPTION;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.OUTCOME;
 
 /** Executes a DMR operation until a specific condition is met or a timeout occurs. */
-public interface TimeoutHandler {
+public class TimeoutHandler {
 
-    int INTERVAL = 500;
-    Logger logger = LoggerFactory.getLogger(TimeoutHandler.class);
+    private static int INTERVAL = 500;
+    @NonNls private static Logger logger = LoggerFactory.getLogger(TimeoutHandler.class);
 
     /** Executes the operation until it successfully returns. */
-    static Completable repeatUntilTimeout(Dispatcher dispatcher, int timeout, Operation operation) {
+    public static Completable repeatUntilTimeout(Dispatcher dispatcher, int timeout, Operation operation) {
         return operation instanceof Composite
                 ? TimeoutHandler.repeatCompositeUntil(dispatcher, timeout, (Composite) operation, null)
                 : TimeoutHandler.repeatOperationUntil(dispatcher, timeout, operation, null);
@@ -50,56 +53,63 @@ static Completable repeatUntilTimeout(Dispatcher dispatcher, int timeout, Operat
      * receives the result of the operation.
      */
     @SuppressWarnings(""HardCodedStringLiteral"")
-    static Completable repeatOperationUntil(Dispatcher dispatcher, int timeout, Operation operation,
+    public static Completable repeatOperationUntil(Dispatcher dispatcher, int timeout, Operation operation,
             @Nullable Predicate<ModelNode> until) {
+        logger.debug(""Repeat {} using {} seconds timeout"", operation.asCli(), timeout);
+
         Single<ModelNode> execution = Single.fromEmitter(em -> dispatcher.execute(operation, em::onSuccess,
-                (op, fail) -> em.onError(new RuntimeException(""Dispatcher failure: "" + fail)),
-                (op, ex) -> em.onError(new RuntimeException(""Dispatcher exception: "" + ex, ex))));
+                (op, fail) -> em.onSuccess(operationFailure(""Dispatcher failure: "" + fail)),
+                (op, ex) -> em.onSuccess(operationFailure(""Dispatcher exception: "" + ex.getMessage()))));
         if (until == null) {
             until = r -> !r.isFailure(); // default: until success
         }
 
         return Observable
                 .interval(INTERVAL, MILLISECONDS) // execute a operation each INTERVAL millis
+                .doOnEach(n -> logger.debug(""#{}: execute {}"", n.getValue(), operation.asCli()))
                 .flatMapSingle(n -> execution, false, 1)
                 .takeUntil(until::test) // until succeeded
-                .toCompletable().timeout(timeout, SECONDS) // wait succeeded or stop after timeout seconds
-                .doOnError(e -> {
-                    String msg = ""Operation "" + operation.asCli() + "" ran into "";
-                    if (e instanceof TimeoutException) {
-                        logger.warn(msg + ""a timeout after "" + timeout + "" seconds"");
-                    } else {
-                        logger.error(msg + ""an error"", e);
-                    }
-                });
+                .toCompletable().timeout(timeout, SECONDS); // wait succeeded or stop after timeout seconds
     }
 
     /**
      * Executes the composite operation until the operation successfully returns and the precondition is met.
      * The precondition receives the composite result of the operation.
      */
     @SuppressWarnings(""HardCodedStringLiteral"")
-    static Completable repeatCompositeUntil(Dispatcher dispatcher, int timeout, Composite composite,
+    public static Completable repeatCompositeUntil(Dispatcher dispatcher, int timeout, Composite composite,
             @Nullable Predicate<CompositeResult> until) {
+        logger.debug(""Repeat {} using {} seconds as timeout"", composite, timeout);
+
         Single<CompositeResult> execution = Single.fromEmitter(em -> dispatcher.execute(composite, em::onSuccess,
-                (op, fail) -> em.onError(new RuntimeException(""Dispatcher failure: "" + fail)),
-                (op, ex) -> em.onError(new RuntimeException(""Dispatcher exception: "" + ex, ex))));
+                (op, fail) -> em.onSuccess(compositeFailure(""Dispatcher failure: "" + fail)),
+                (op, ex) -> em.onSuccess(compositeFailure(""Dispatcher exception: "" + ex.getMessage()))));
         if (until == null) {
             until = r -> r.stream().noneMatch(ModelNode::isFailure); // default: until success
         }
 
         return Observable
                 .interval(INTERVAL, MILLISECONDS) // execute a operation each INTERVAL millis
+                .doOnEach(n -> logger.debug(""#{}: execute {}"", n.getValue(), composite))
                 .flatMapSingle(n -> execution, false, 1)
                 .takeUntil(until::test) // until succeeded
-                .toCompletable().timeout(timeout, SECONDS) // wait succeeded or stop after timeout seconds
-                .doOnError(e -> {
-                    String msg = ""Composite operation "" + composite.asCli() + "" ran into "";
-                    if (e instanceof TimeoutException) {
-                        logger.warn(msg + ""a timeout after "" + timeout + "" seconds"");
-                    } else {
-                        logger.error(msg + ""an error"", e);
-                    }
-                });
+                .toCompletable().timeout(timeout, SECONDS); // wait succeeded or stop after timeout seconds
+    }
+
+    private static ModelNode operationFailure(String reason) {
+        ModelNode node = new ModelNode();
+        node.get(OUTCOME).set(FAILED);
+        node.get(FAILURE_DESCRIPTION).set(reason);
+        return node;
+    }
+
+    private static CompositeResult compositeFailure(String reason) {
+        ModelNode node = new ModelNode();
+        node.get(OUTCOME).set(FAILED);
+        node.get(FAILURE_DESCRIPTION).set(reason);
+        return new CompositeResult(node);
+    }
+
+    private TimeoutHandler() {
     }
 }",2018-02-01T16:28:42Z,1
"@@ -5,7 +5,7 @@ HAL ist the project name for the WildFly and JBoss EAP management console. It's
 
 # Technical Stack
 
-HAL is a client side RIA without server side dependencies. It is a GWT application - which means it's written almost completely in Java. GWT is used to transpile the Java code into a bunch of JavaScript, HTML and CSS files. HAL uses some external JavaScript libraries as well. These dependencies are managed using [bower](https://bower.io/) which is in turn integrated into the Maven build using the [`maven-frontend-plugin`](https://github.com/eirslett/frontend-maven-plugin). Take a look at the [`bower.json`](https://github.com/hal/console/blob/develop/app/bower.json) too see all JavaScript dependencies.
+HAL is a client side RIA without server side dependencies. It is a GWT application - which means it's written almost completely in Java. GWT is used to transpile the Java code into a bunch of JavaScript, HTML and CSS files. HAL uses some external JavaScript libraries as well. These dependencies are managed using [Yarn](https://yarnpkg.com/en/) which is in turn integrated into the Maven build using the [`maven-frontend-plugin`](https://github.com/eirslett/frontend-maven-plugin). Take a look at the [`package.json`](https://github.com/hal/console/blob/develop/app/package.json) too see all JavaScript dependencies.
 
 In a nutshell the console uses the following technical stack:
 ",2018-06-14T13:07:57Z,210
"@@ -1,3 +1,2 @@
-bower_components
 node_modules
 node
\ No newline at end of file",2018-06-14T13:07:57Z,211
"@@ -23,7 +23,6 @@ module.exports = function (grunt) {
     grunt.initConfig({
         theme: grunt.option('theme') || 'hal',
         config: {
-            bower: 'bower_components',
             devmodeTarget: 'target/gwt/devmode/war/hal',
             esdoc: {
                 source: 'target/generated-resources/esdoc',
@@ -32,6 +31,7 @@ module.exports = function (grunt) {
             },
             js: 'src/js',
             less: 'src/less',
+            node: 'node_modules',
             public: 'src/main/resources/org/jboss/hal/public',
             themeDir: '../themes/<%= theme %>/src/main/resources/org/jboss/hal/theme/<%= theme %>',
             version: '3.0.3',
@@ -51,32 +51,32 @@ module.exports = function (grunt) {
                 files: [
                     {
                         expand: true,
-                        cwd: '<%= config.bower %>/ace-builds/src-min-noconflict',
+                        cwd: '<%= config.node %>/ace-builds/src-min-noconflict',
                         src: ['mode-*.js', 'theme-*.js', 'worker-*.js'],
                         dest: '<%= config.public %>/js'
                     },
                     {
                         expand: true,
-                        cwd: '<%= config.bower %>/patternfly/dist/fonts',
-                        src: '*',
-                        dest: '<%= config.public %>/fonts'
+                        cwd: '<%= config.node %>/jstree/dist/themes/default',
+                        src: ['*.gif', '*.png'],
+                        dest: '<%= config.public %>/img'
                     },
                     {
                         expand: true,
-                        cwd: '<%= config.bower %>/jstree/dist/themes/default',
-                        src: ['*.gif', '*.png'],
-                        dest: '<%= config.public %>/img'
+                        cwd: '<%= config.node %>/patternfly/dist/fonts',
+                        src: '*',
+                        dest: '<%= config.public %>/fonts'
                     },
                     {
                         expand: true,
-                        cwd: '<%= config.bower %>/zeroclipboard/dist',
-                        src: 'ZeroClipboard.swf',
+                        cwd: '<%= config.node %>/pouchdb/dist',
+                        src: ['pouchdb.js', 'pouchdb.min.js'],
                         dest: '<%= config.public %>/js'
                     },
                     {
                         expand: true,
-                        cwd: '<%= config.bower %>/pouchdb/dist',
-                        src: ['pouchdb.js', 'pouchdb.min.js'],
+                        cwd: '<%= config.node %>/zeroclipboard/dist',
+                        src: 'ZeroClipboard.swf',
                         dest: '<%= config.public %>/js'
                     },
                     {
@@ -117,27 +117,26 @@ module.exports = function (grunt) {
              */
             dev: {
                 src: [
-                    '<%= config.bower %>/jquery/dist/jquery.js',
-                    '<%= config.bower %>/bootstrap/dist/js/bootstrap.js',
-                    '<%= config.bower %>/bootstrap-select/dist/js/bootstrap-select.js',
-                    '<%= config.bower %>/bootstrap-switch/dist/js/bootstrap-switch.js',
-                    '<%= config.bower %>/c3/c3.js',
-                    '<%= config.bower %>/d3/d3.js',
-                    '<%= config.bower %>/datatables.net/js/jquery.dataTables.js',
-                    '<%= config.bower %>/datatables.net-buttons/js/dataTables.buttons.js',
-                    '<%= config.bower %>/datatables.net-keytable/js/dataTables.keyTable.js',
-                    '<%= config.bower %>/datatables.net-select/js/dataTables.select.js',
-                    '<%= config.bower %>/ace-builds/src-noconflict/ace.js',
-                    '<%= config.bower %>/ace-builds/src-noconflict/ext-modelist.js',
-                    '<%= config.bower %>/google-code-prettify/src/prettify.js',
-                    '<%= config.bower %>/javascript-auto-complete/auto-complete.js',
-                    '<%= config.bower %>/js-cookie/src/js.cookie.js',
-                    '<%= config.bower %>/jstree/dist/jstree.js',
-                    '<%= config.bower %>/pouchdb/dist/pouchdb.js',
-                    '<%= config.bower %>/tagmanager/tagmanager.js',
-                    '<%= config.bower %>/typeahead.js/dist/typeahead.bundle.js',
-                    '<%= config.bower %>/zeroclipboard/dist/ZeroClipboard.js',
-                    '<%= config.bower %>/patternfly/dist/js/patternfly.js'
+                    '<%= config.node %>/jquery/dist/jquery.js',
+                    '<%= config.node %>/bootstrap/dist/js/bootstrap.js',
+                    '<%= config.node %>/bootstrap-select/dist/js/bootstrap-select.js',
+                    '<%= config.node %>/bootstrap-switch/dist/js/bootstrap-switch.js',
+                    '<%= config.node %>/c3/c3.js',
+                    '<%= config.node %>/d3/d3.js',
+                    '<%= config.node %>/datatables.net/js/jquery.dataTables.js',
+                    '<%= config.node %>/datatables.net-buttons/js/dataTables.buttons.js',
+                    '<%= config.node %>/datatables.net-keytable/js/dataTables.keyTable.js',
+                    '<%= config.node %>/datatables.net-select/js/dataTables.select.js',
+                    '<%= config.node %>/ace-builds/src-noconflict/ace.js',
+                    '<%= config.node %>/ace-builds/src-noconflict/ext-modelist.js',
+                    '<%= config.node %>/google-code-prettify/src/prettify.js',
+                    '<%= config.js %>/auto-complete.js',
+                    '<%= config.node %>/js-cookie/src/js.cookie.js',
+                    '<%= config.node %>/jstree/dist/jstree.js',
+                    '<%= config.node %>/pouchdb/dist/pouchdb.js',
+                    '<%= config.js %>/tagmanager.js',
+                    '<%= config.node %>/zeroclipboard/dist/ZeroClipboard.js',
+                    '<%= config.node %>/patternfly/dist/js/patternfly.js'
                 ],
                 dest: '<%= config.public %>/js/external.js'
             },
@@ -150,27 +149,26 @@ module.exports = function (grunt) {
                     stripBanners: true
                 },
                 src: [
-                    '<%= config.bower %>/jquery/dist/jquery.min.js',
-                    '<%= config.bower %>/bootstrap/dist/js/bootstrap.min.js',
-                    '<%= config.bower %>/bootstrap-select/dist/js/bootstrap-select.min.js',
-                    '<%= config.bower %>/bootstrap-switch/dist/js/bootstrap-switch.min.js',
-                    '<%= config.bower %>/c3/c3.min.js',
-                    '<%= config.bower %>/d3/d3.min.js',
-                    '<%= config.bower %>/datatables.net/js/jquery.dataTables.min.js',
-                    '<%= config.bower %>/datatables.net-buttons/js/dataTables.buttons.min.js',
-                    '<%= config.bower %>/datatables.net-keytable/js/dataTables.keyTable.min.js',
-                    '<%= config.bower %>/datatables.net-select/js/dataTables.select.min.js',
-                    '<%= config.bower %>/ace-builds/src-min-noconflict/ace.js',
-                    '<%= config.bower %>/ace-builds/src-min-noconflict/ext-modelist.js',
-                    '<%= config.bower %>/google-code-prettify/bin/prettify.min.js',
-                    '<%= config.bower %>/javascript-auto-complete/auto-complete.min.js',
-                    '<%= config.bower %>/js-cookie/src/js.cookie.js',
-                    '<%= config.bower %>/jstree/dist/jstree.min.js',
-                    '<%= config.bower %>/pouchdb/dist/pouchdb.min.js',
-                    '<%= config.bower %>/tagmanager/tagmanager.js',
-                    '<%= config.bower %>/typeahead.js/dist/typeahead.bundle.min.js',
-                    '<%= config.bower %>/zeroclipboard/dist/ZeroClipboard.min.js',
-                    '<%= config.bower %>/patternfly/dist/js/patternfly.min.js'
+                    '<%= config.node %>/jquery/dist/jquery.min.js',
+                    '<%= config.node %>/bootstrap/dist/js/bootstrap.min.js',
+                    '<%= config.node %>/bootstrap-select/dist/js/bootstrap-select.min.js',
+                    '<%= config.node %>/bootstrap-switch/dist/js/bootstrap-switch.min.js',
+                    '<%= config.node %>/c3/c3.min.js',
+                    '<%= config.node %>/d3/d3.min.js',
+                    '<%= config.node %>/datatables.net/js/jquery.dataTables.min.js',
+                    '<%= config.node %>/datatables.net-buttons/js/dataTables.buttons.min.js',
+                    '<%= config.node %>/datatables.net-keytable/js/dataTables.keyTable.min.js',
+                    '<%= config.node %>/datatables.net-select/js/dataTables.select.min.js',
+                    '<%= config.node %>/ace-builds/src-min-noconflict/ace.js',
+                    '<%= config.node %>/ace-builds/src-min-noconflict/ext-modelist.js',
+                    '<%= config.node %>/google-code-prettify/bin/prettify.min.js',
+                    '<%= config.js %>/auto-complete.min.js',
+                    '<%= config.node %>/js-cookie/src/js.cookie.js',
+                    '<%= config.node %>/jstree/dist/jstree.min.js',
+                    '<%= config.node %>/pouchdb/dist/pouchdb.min.js',
+                    '<%= config.js %>/tagmanager.js',
+                    '<%= config.node %>/zeroclipboard/dist/ZeroClipboard.min.js',
+                    '<%= config.node %>/patternfly/dist/js/patternfly.min.js'
                 ],
                 dest: '<%= config.public %>/js/external.min.js'
             }",2018-06-14T13:07:57Z,212
"@@ -1,30 +0,0 @@
-{
-  ""name"": ""org.jboss.hal.bower"",
-  ""version"": ""3.0.3"",
-  ""description"": ""Bower dependencies"",
-  ""license"": ""Apache-2.0"",
-  ""private"": true,
-  ""ignore"": [
-    ""**/.*"",
-    ""node_modules""
-  ],
-  ""dependencies"": {
-    ""ace-builds"": ""^1.3.0"",
-    ""datatables.net"": ""~1.10.16"",
-    ""datatables.net-buttons"": ""~1.4.2"",
-    ""datatables.net-keytable"": ""~2.3.2"",
-    ""datatables.net-select"": ""~1.2.3"",
-    ""font-awesome"": ""~4.7.0"",
-    ""js-cookie"": ""~2.2.0"",
-    ""javascript-auto-complete"": ""~1.0.4"",
-    ""jquery"": ""~3.3.1"",
-    ""jstree"": ""~3.3.5"",
-    ""patternfly"": ""~3.38.2"",
-    ""pouchdb"": ""~6.4.3"",
-    ""tagmanager"": ""~3.0.2"",
-    ""zeroclipboard"": ""~2.3.0""
-  },
-  ""resolutions"": {
-    ""jquery"": ""~3.3.1""
-  }
-}",2018-06-14T13:07:57Z,213
"@@ -4,9 +4,24 @@
   ""description"": ""NPM dependencies"",
   ""license"": ""Apache-2.0"",
   ""private"": true,
+  ""dependencies"": {
+    ""ace-builds"": ""~1.3.3"",
+    ""autocompleter"": ""~1.0.33"",
+    ""bootstrap-switch"": ""~3.3.4"",
+    ""datatables.net"": ""~1.10.16"",
+    ""datatables.net-buttons"": ""~1.5.1"",
+    ""datatables.net-keytable"": ""~2.3.2"",
+    ""datatables.net-select"": ""~1.2.5"",
+    ""font-awesome"": ""~4.7.0"",
+    ""js-cookie"": ""~2.2.0"",
+    ""jquery"": ""~3.3.1"",
+    ""jstree"": ""~3.3.5"",
+    ""patternfly"": ""~3.49.0"",
+    ""pouchdb"": ""~6.4.3"",
+    ""zeroclipboard"": ""~2.3.0""
+  },
   ""devDependencies"": {
     ""autoprefixer"": ""^6.4.0"",
-    ""bower"": ""^1.8.0"",
     ""esdoc"": ""^0.5.2"",
     ""grunt"": ""~1.0.1"",
     ""grunt-cli"": ""~1.2.0"",",2018-06-14T13:07:57Z,214
"@@ -196,15 +196,6 @@
                             <goal>yarn</goal>
                         </goals>
                     </execution>
-                    <execution>
-                        <id>bower install</id>
-                        <goals>
-                            <goal>bower</goal>
-                        </goals>
-                        <configuration>
-                            <arguments>install</arguments>
-                        </configuration>
-                    </execution>
                     <execution>
                         <id>grunt build</id>
                         <goals>",2018-06-14T13:07:57Z,160
"@@ -0,0 +1,222 @@
+/*
+    JavaScript autoComplete v1.0.4
+    Copyright (c) 2014 Simon Steinberger / Pixabay
+    GitHub: https://github.com/Pixabay/JavaScript-autoComplete
+    License: http://www.opensource.org/licenses/mit-license.php
+*/
+
+var autoComplete = (function(){
+    // ""use strict"";
+    function autoComplete(options){
+        if (!document.querySelector) return;
+
+        // helpers
+        function hasClass(el, className){ return el.classList ? el.classList.contains(className) : new RegExp('\\b'+ className+'\\b').test(el.className); }
+
+        function addEvent(el, type, handler){
+            if (el.attachEvent) el.attachEvent('on'+type, handler); else el.addEventListener(type, handler);
+        }
+        function removeEvent(el, type, handler){
+            // if (el.removeEventListener) not working in IE11
+            if (el.detachEvent) el.detachEvent('on'+type, handler); else el.removeEventListener(type, handler);
+        }
+        function live(elClass, event, cb, context){
+            addEvent(context || document, event, function(e){
+                var found, el = e.target || e.srcElement;
+                while (el && !(found = hasClass(el, elClass))) el = el.parentElement;
+                if (found) cb.call(el, e);
+            });
+        }
+
+        var o = {
+            selector: 0,
+            source: 0,
+            minChars: 3,
+            delay: 150,
+            offsetLeft: 0,
+            offsetTop: 1,
+            cache: 1,
+            menuClass: '',
+            renderItem: function (item, search){
+                // escape special characters
+                search = search.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
+                var re = new RegExp(""("" + search.split(' ').join('|') + "")"", ""gi"");
+                return '<div class=""autocomplete-suggestion"" data-val=""' + item + '"">' + item.replace(re, ""<b>$1</b>"") + '</div>';
+            },
+            onSelect: function(e, term, item){}
+        };
+        for (var k in options) { if (options.hasOwnProperty(k)) o[k] = options[k]; }
+
+        // init
+        var elems = typeof o.selector == 'object' ? [o.selector] : document.querySelectorAll(o.selector);
+        for (var i=0; i<elems.length; i++) {
+            var that = elems[i];
+
+            // create suggestions container ""sc""
+            that.sc = document.createElement('div');
+            that.sc.className = 'autocomplete-suggestions '+o.menuClass;
+
+            that.autocompleteAttr = that.getAttribute('autocomplete');
+            that.setAttribute('autocomplete', 'off');
+            that.cache = {};
+            that.last_val = '';
+
+            that.updateSC = function(resize, next){
+                var rect = that.getBoundingClientRect();
+                that.sc.style.left = Math.round(rect.left + (window.pageXOffset || document.documentElement.scrollLeft) + o.offsetLeft) + 'px';
+                that.sc.style.top = Math.round(rect.bottom + (window.pageYOffset || document.documentElement.scrollTop) + o.offsetTop) + 'px';
+                that.sc.style.width = Math.round(rect.right - rect.left) + 'px'; // outerWidth
+                if (!resize) {
+                    that.sc.style.display = 'block';
+                    if (!that.sc.maxHeight) { that.sc.maxHeight = parseInt((window.getComputedStyle ? getComputedStyle(that.sc, null) : that.sc.currentStyle).maxHeight); }
+                    if (!that.sc.suggestionHeight) that.sc.suggestionHeight = that.sc.querySelector('.autocomplete-suggestion').offsetHeight;
+                    if (that.sc.suggestionHeight)
+                        if (!next) that.sc.scrollTop = 0;
+                        else {
+                            var scrTop = that.sc.scrollTop, selTop = next.getBoundingClientRect().top - that.sc.getBoundingClientRect().top;
+                            if (selTop + that.sc.suggestionHeight - that.sc.maxHeight > 0)
+                                that.sc.scrollTop = selTop + that.sc.suggestionHeight + scrTop - that.sc.maxHeight;
+                            else if (selTop < 0)
+                                that.sc.scrollTop = selTop + scrTop;
+                        }
+                }
+            }
+            addEvent(window, 'resize', that.updateSC);
+            document.body.appendChild(that.sc);
+
+            live('autocomplete-suggestion', 'mouseleave', function(e){
+                var sel = that.sc.querySelector('.autocomplete-suggestion.selected');
+                if (sel) setTimeout(function(){ sel.className = sel.className.replace('selected', ''); }, 20);
+            }, that.sc);
+
+            live('autocomplete-suggestion', 'mouseover', function(e){
+                var sel = that.sc.querySelector('.autocomplete-suggestion.selected');
+                if (sel) sel.className = sel.className.replace('selected', '');
+                this.className += ' selected';
+            }, that.sc);
+
+            live('autocomplete-suggestion', 'mousedown', function(e){
+                if (hasClass(this, 'autocomplete-suggestion')) { // else outside click
+                    var v = this.getAttribute('data-val');
+                    that.value = v;
+                    o.onSelect(e, v, this);
+                    that.sc.style.display = 'none';
+                }
+            }, that.sc);
+
+            that.blurHandler = function(){
+                try { var over_sb = document.querySelector('.autocomplete-suggestions:hover'); } catch(e){ var over_sb = 0; }
+                if (!over_sb) {
+                    that.last_val = that.value;
+                    that.sc.style.display = 'none';
+                    setTimeout(function(){ that.sc.style.display = 'none'; }, 350); // hide suggestions on fast input
+                } else if (that !== document.activeElement) setTimeout(function(){ that.focus(); }, 20);
+            };
+            addEvent(that, 'blur', that.blurHandler);
+
+            var suggest = function(data){
+                var val = that.value;
+                that.cache[val] = data;
+                if (data.length && val.length >= o.minChars) {
+                    var s = '';
+                    for (var i=0;i<data.length;i++) s += o.renderItem(data[i], val);
+                    that.sc.innerHTML = s;
+                    that.updateSC(0);
+                }
+                else
+                    that.sc.style.display = 'none';
+            }
+
+            that.keydownHandler = function(e){
+                var key = window.event ? e.keyCode : e.which;
+                // down (40), up (38)
+                if ((key == 40 || key == 38) && that.sc.innerHTML) {
+                    var next, sel = that.sc.querySelector('.autocomplete-suggestion.selected');
+                    if (!sel) {
+                        next = (key == 40) ? that.sc.querySelector('.autocomplete-suggestion') : that.sc.childNodes[that.sc.childNodes.length - 1]; // first : last
+                        next.className += ' selected';
+                        that.value = next.getAttribute('data-val');
+                    } else {
+                        next = (key == 40) ? sel.nextSibling : sel.previousSibling;
+                        if (next) {
+                            sel.className = sel.className.replace('selected', '');
+                            next.className += ' selected';
+                            that.value = next.getAttribute('data-val');
+                        }
+                        else { sel.className = sel.className.replace('selected', ''); that.value = that.last_val; next = 0; }
+                    }
+                    that.updateSC(0, next);
+                    return false;
+                }
+                // esc
+                else if (key == 27) { that.value = that.last_val; that.sc.style.display = 'none'; }
+                // enter
+                else if (key == 13 || key == 9) {
+                    var sel = that.sc.querySelector('.autocomplete-suggestion.selected');
+                    if (sel && that.sc.style.display != 'none') { o.onSelect(e, sel.getAttribute('data-val'), sel); setTimeout(function(){ that.sc.style.display = 'none'; }, 20); }
+                }
+            };
+            addEvent(that, 'keydown', that.keydownHandler);
+
+            that.keyupHandler = function(e){
+                var key = window.event ? e.keyCode : e.which;
+                if (!key || (key < 35 || key > 40) && key != 13 && key != 27) {
+                    var val = that.value;
+                    if (val.length >= o.minChars) {
+                        if (val != that.last_val) {
+                            that.last_val = val;
+                            clearTimeout(that.timer);
+                            if (o.cache) {
+                                if (val in that.cache) { suggest(that.cache[val]); return; }
+                                // no requests if previous suggestions were empty
+                                for (var i=1; i<val.length-o.minChars; i++) {
+                                    var part = val.slice(0, val.length-i);
+                                    if (part in that.cache && !that.cache[part].length) { suggest([]); return; }
+                                }
+                            }
+                            that.timer = setTimeout(function(){ o.source(val, suggest) }, o.delay);
+                        }
+                    } else {
+                        that.last_val = val;
+                        that.sc.style.display = 'none';
+                    }
+                }
+            };
+            addEvent(that, 'keyup', that.keyupHandler);
+
+            that.focusHandler = function(e){
+                that.last_val = '\n';
+                that.keyupHandler(e)
+            };
+            if (!o.minChars) addEvent(that, 'focus', that.focusHandler);
+        }
+
+        // public destroy method
+        this.destroy = function(){
+            for (var i=0; i<elems.length; i++) {
+                var that = elems[i];
+                removeEvent(window, 'resize', that.updateSC);
+                removeEvent(that, 'blur', that.blurHandler);
+                removeEvent(that, 'focus', that.focusHandler);
+                removeEvent(that, 'keydown', that.keydownHandler);
+                removeEvent(that, 'keyup', that.keyupHandler);
+                if (that.autocompleteAttr)
+                    that.setAttribute('autocomplete', that.autocompleteAttr);
+                else
+                    that.removeAttribute('autocomplete');
+                document.body.removeChild(that.sc);
+                that = null;
+            }
+        };
+    }
+    return autoComplete;
+})();
+
+(function(){
+    if (typeof define === 'function' && define.amd)
+        define('autoComplete', function () { return autoComplete; });
+    else if (typeof module !== 'undefined' && module.exports)
+        module.exports = autoComplete;
+    else
+        window.autoComplete = autoComplete;
+})();",2018-06-14T13:07:57Z,215
"@@ -0,0 +1,3 @@
+// JavaScript autoComplete v1.0.4
+// https://github.com/Pixabay/JavaScript-autoComplete
+var autoComplete=function(){function e(e){function t(e,t){return e.classList?e.classList.contains(t):new RegExp(""\\b""+t+""\\b"").test(e.className)}function o(e,t,o){e.attachEvent?e.attachEvent(""on""+t,o):e.addEventListener(t,o)}function s(e,t,o){e.detachEvent?e.detachEvent(""on""+t,o):e.removeEventListener(t,o)}function n(e,s,n,l){o(l||document,s,function(o){for(var s,l=o.target||o.srcElement;l&&!(s=t(l,e));)l=l.parentElement;s&&n.call(l,o)})}if(document.querySelector){var l={selector:0,source:0,minChars:3,delay:150,offsetLeft:0,offsetTop:1,cache:1,menuClass:"""",renderItem:function(e,t){t=t.replace(/[-\/\\^$*+?.()|[\]{}]/g,""\\$&"");var o=new RegExp(""(""+t.split("" "").join(""|"")+"")"",""gi"");return'<div class=""autocomplete-suggestion"" data-val=""'+e+'"">'+e.replace(o,""<b>$1</b>"")+""</div>""},onSelect:function(){}};for(var c in e)e.hasOwnProperty(c)&&(l[c]=e[c]);for(var a=""object""==typeof l.selector?[l.selector]:document.querySelectorAll(l.selector),u=0;u<a.length;u++){var i=a[u];i.sc=document.createElement(""div""),i.sc.className=""autocomplete-suggestions ""+l.menuClass,i.autocompleteAttr=i.getAttribute(""autocomplete""),i.setAttribute(""autocomplete"",""off""),i.cache={},i.last_val="""",i.updateSC=function(e,t){var o=i.getBoundingClientRect();if(i.sc.style.left=Math.round(o.left+(window.pageXOffset||document.documentElement.scrollLeft)+l.offsetLeft)+""px"",i.sc.style.top=Math.round(o.bottom+(window.pageYOffset||document.documentElement.scrollTop)+l.offsetTop)+""px"",i.sc.style.width=Math.round(o.right-o.left)+""px"",!e&&(i.sc.style.display=""block"",i.sc.maxHeight||(i.sc.maxHeight=parseInt((window.getComputedStyle?getComputedStyle(i.sc,null):i.sc.currentStyle).maxHeight)),i.sc.suggestionHeight||(i.sc.suggestionHeight=i.sc.querySelector("".autocomplete-suggestion"").offsetHeight),i.sc.suggestionHeight))if(t){var s=i.sc.scrollTop,n=t.getBoundingClientRect().top-i.sc.getBoundingClientRect().top;n+i.sc.suggestionHeight-i.sc.maxHeight>0?i.sc.scrollTop=n+i.sc.suggestionHeight+s-i.sc.maxHeight:0>n&&(i.sc.scrollTop=n+s)}else i.sc.scrollTop=0},o(window,""resize"",i.updateSC),document.body.appendChild(i.sc),n(""autocomplete-suggestion"",""mouseleave"",function(){var e=i.sc.querySelector("".autocomplete-suggestion.selected"");e&&setTimeout(function(){e.className=e.className.replace(""selected"","""")},20)},i.sc),n(""autocomplete-suggestion"",""mouseover"",function(){var e=i.sc.querySelector("".autocomplete-suggestion.selected"");e&&(e.className=e.className.replace(""selected"","""")),this.className+="" selected""},i.sc),n(""autocomplete-suggestion"",""mousedown"",function(e){if(t(this,""autocomplete-suggestion"")){var o=this.getAttribute(""data-val"");i.value=o,l.onSelect(e,o,this),i.sc.style.display=""none""}},i.sc),i.blurHandler=function(){try{var e=document.querySelector("".autocomplete-suggestions:hover"")}catch(t){var e=0}e?i!==document.activeElement&&setTimeout(function(){i.focus()},20):(i.last_val=i.value,i.sc.style.display=""none"",setTimeout(function(){i.sc.style.display=""none""},350))},o(i,""blur"",i.blurHandler);var r=function(e){var t=i.value;if(i.cache[t]=e,e.length&&t.length>=l.minChars){for(var o="""",s=0;s<e.length;s++)o+=l.renderItem(e[s],t);i.sc.innerHTML=o,i.updateSC(0)}else i.sc.style.display=""none""};i.keydownHandler=function(e){var t=window.event?e.keyCode:e.which;if((40==t||38==t)&&i.sc.innerHTML){var o,s=i.sc.querySelector("".autocomplete-suggestion.selected"");return s?(o=40==t?s.nextSibling:s.previousSibling,o?(s.className=s.className.replace(""selected"",""""),o.className+="" selected"",i.value=o.getAttribute(""data-val"")):(s.className=s.className.replace(""selected"",""""),i.value=i.last_val,o=0)):(o=40==t?i.sc.querySelector("".autocomplete-suggestion""):i.sc.childNodes[i.sc.childNodes.length-1],o.className+="" selected"",i.value=o.getAttribute(""data-val"")),i.updateSC(0,o),!1}if(27==t)i.value=i.last_val,i.sc.style.display=""none"";else if(13==t||9==t){var s=i.sc.querySelector("".autocomplete-suggestion.selected"");s&&""none""!=i.sc.style.display&&(l.onSelect(e,s.getAttribute(""data-val""),s),setTimeout(function(){i.sc.style.display=""none""},20))}},o(i,""keydown"",i.keydownHandler),i.keyupHandler=function(e){var t=window.event?e.keyCode:e.which;if(!t||(35>t||t>40)&&13!=t&&27!=t){var o=i.value;if(o.length>=l.minChars){if(o!=i.last_val){if(i.last_val=o,clearTimeout(i.timer),l.cache){if(o in i.cache)return void r(i.cache[o]);for(var s=1;s<o.length-l.minChars;s++){var n=o.slice(0,o.length-s);if(n in i.cache&&!i.cache[n].length)return void r([])}}i.timer=setTimeout(function(){l.source(o,r)},l.delay)}}else i.last_val=o,i.sc.style.display=""none""}},o(i,""keyup"",i.keyupHandler),i.focusHandler=function(e){i.last_val=""\n"",i.keyupHandler(e)},l.minChars||o(i,""focus"",i.focusHandler)}this.destroy=function(){for(var e=0;e<a.length;e++){var t=a[e];s(window,""resize"",t.updateSC),s(t,""blur"",t.blurHandler),s(t,""focus"",t.focusHandler),s(t,""keydown"",t.keydownHandler),s(t,""keyup"",t.keyupHandler),t.autocompleteAttr?t.setAttribute(""autocomplete"",t.autocompleteAttr):t.removeAttribute(""autocomplete""),document.body.removeChild(t.sc),t=null}}}}return e}();!function(){""function""==typeof define&&define.amd?define(""autoComplete"",function(){return autoComplete}):""undefined""!=typeof module&&module.exports?module.exports=autoComplete:window.autoComplete=autoComplete}();
\ No newline at end of file",2018-06-14T13:07:57Z,216
"@@ -0,0 +1,514 @@
+/* ===================================================
+ * tagmanager.js v3.0.1
+ * http://welldonethings.com/tags/manager
+ * ===================================================
+ * Copyright 2012 Max Favilli
+ *
+ * Licensed under the Mozilla Public License, Version 2.0 You may not use this work except in compliance with the License.
+ *
+ * http://www.mozilla.org/MPL/2.0/
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * ========================================================== */
+(function($) {
+
+    ""use strict"";
+
+    var defaults = {
+        prefilled: null,
+        CapitalizeFirstLetter: false,
+        preventSubmitOnEnter: true,     // deprecated
+        isClearInputOnEsc: true,        // deprecated
+        externalTagId: false,
+        prefillIdFieldName: 'Id',
+        prefillValueFieldName: 'Value',
+        AjaxPush: null,
+        AjaxPushAllTags: null,
+        AjaxPushParameters: null,
+        delimiters: [9, 13, 44],        // tab, enter, comma
+        backspace: [8],
+        maxTags: 0,
+        hiddenTagListName: null,        // deprecated
+        hiddenTagListId: null,          // deprecated
+        replace: true,
+        output: null,
+        deleteTagsOnBackspace: true,    // deprecated
+        tagsContainer: null,
+        tagCloseIcon: 'x',
+        tagClass: '',
+        validator: null,
+        onlyTagList: false,
+        tagList: null,
+        fillInputOnTagRemove: false
+    },
+
+    publicMethods = {
+        pushTag : function (tag, ignoreEvents, externalTagId) {
+            var $self = $(this), opts = $self.data('opts'), alreadyInList, tlisLowerCase, max, tagId,
+            tlis = $self.data(""tlis""), tlid = $self.data(""tlid""), idx, newTagId, newTagRemoveId, escaped,
+            html, $el, lastTagId, lastTagObj;
+
+            tag = privateMethods.trimTag(tag, opts.delimiterChars);
+
+            if (!tag || tag.length <= 0) { return; }
+
+            // check if restricted only to the tagList suggestions
+            if (opts.onlyTagList && undefined !== opts.tagList ){
+
+                //if the list has been updated by look pushed tag in the tagList. if not found return
+                if (opts.tagList){
+                    var $tagList = opts.tagList;
+
+                    // change each array item to lower case
+                    $.each($tagList, function(index, item) {
+                        $tagList[index] = item.toLowerCase();
+                    });
+                    var suggestion = $.inArray(tag.toLowerCase(), $tagList);
+
+                    if ( -1 === suggestion ) {
+                        //console.log(""tag:"" + tag + "" not in tagList, not adding it"");
+                        return;
+                    } 
+                }
+
+            }
+
+            if (opts.CapitalizeFirstLetter && tag.length > 1) {
+                tag = tag.charAt(0).toUpperCase() + tag.slice(1).toLowerCase();
+            }
+
+            // call the validator (if any) and do not let the tag pass if invalid
+            if (opts.validator && !opts.validator(tag)) {
+                $self.trigger('tm:invalid', tag)
+                return;
+            }
+
+            // dont accept new tags beyond the defined maximum
+            if (opts.maxTags > 0 && tlis.length >= opts.maxTags) { return; }
+
+            alreadyInList = false;
+            //use jQuery.map to make this work in IE8 (pure JS map is JS 1.6 but IE8 only supports JS 1.5)
+            tlisLowerCase = jQuery.map(tlis, function(elem) {
+                return elem.toLowerCase();
+            });
+
+            idx = $.inArray(tag.toLowerCase(), tlisLowerCase);
+
+            if (-1 !== idx) {
+                // console.log(""tag:"" + tag + "" !!already in list!!"");
+                alreadyInList = true;
+            }
+
+            if (alreadyInList) {
+                $self.trigger('tm:duplicated', tag);
+                if (opts.blinkClass) {
+                    for (var i = 0; i < 6; ++i) {
+                        $(""#"" + $self.data(""tm_rndid"") + ""_"" + tlid[idx]).queue(function(next) {
+                            $(this).toggleClass(opts.blinkClass);
+                            next();
+                        }).delay(100);
+                    }
+                } else {
+                    $(""#"" + $self.data(""tm_rndid"") + ""_"" + tlid[idx]).stop()
+                        .animate({backgroundColor: opts.blinkBGColor_1}, 100)
+                        .animate({backgroundColor: opts.blinkBGColor_2}, 100)
+                        .animate({backgroundColor: opts.blinkBGColor_1}, 100)
+                        .animate({backgroundColor: opts.blinkBGColor_2}, 100)
+                        .animate({backgroundColor: opts.blinkBGColor_1}, 100)
+                        .animate({backgroundColor: opts.blinkBGColor_2}, 100);
+                }
+            } else {
+                if (opts.externalTagId === true) {
+                    if (externalTagId === undefined) {
+                        $.error('externalTagId is not passed for tag -' + tag);
+                    }
+                    tagId = externalTagId;
+                } else {
+                    max = Math.max.apply(null, tlid);
+                    max = max === -Infinity ? 0 : max;
+
+                    tagId = ++max;
+                }
+                if (!ignoreEvents) { $self.trigger('tm:pushing', [tag, tagId]); }
+                tlis.push(tag);
+                tlid.push(tagId);
+
+                if (!ignoreEvents)
+                    if (opts.AjaxPush !== null && opts.AjaxPushAllTags == null) {
+                        if ($.inArray(tag, opts.prefilled) === -1) {
+                            $.post(opts.AjaxPush, $.extend({tag: tag}, opts.AjaxPushParameters));
+                        }
+                    }
+
+                // console.log(""tagList: "" + tlis);
+
+                newTagId = $self.data(""tm_rndid"") + '_' + tagId;
+                newTagRemoveId = $self.data(""tm_rndid"") + '_Remover_' + tagId;
+                escaped = $(""<span/>"").text(tag).html();
+
+                html = '<span class=""' + privateMethods.tagClasses.call($self) + '"" id=""' + newTagId + '"">';
+                html+= '<span>' + escaped + '</span>';
+                html+= '<a href=""#"" class=""tm-tag-remove"" id=""' + newTagRemoveId + '"" TagIdToRemove=""' + tagId + '"">';
+                html+= opts.tagCloseIcon + '</a></span> ';
+                $el = $(html);
+
+                if (opts.tagsContainer !== null) {
+                    $(opts.tagsContainer).append($el);
+                } else {
+                    if (tlid.length > 1) {
+                        lastTagObj = $self.siblings(""#"" + $self.data(""tm_rndid"") + ""_"" + tlid[tlid.length - 2]);
+                        lastTagObj.after($el);
+                    } else {
+                        $self.before($el);
+                    }
+                }
+
+                $el.find(""#"" + newTagRemoveId).on(""click"", $self, function(e) {
+                    e.preventDefault();
+                    var TagIdToRemove = parseInt($(this).attr(""TagIdToRemove""));
+                    privateMethods.spliceTag.call($self, TagIdToRemove, e.data);
+                });
+
+                privateMethods.refreshHiddenTagList.call($self);
+
+                if (!ignoreEvents) { $self.trigger('tm:pushed', [tag, tagId]); }
+
+                privateMethods.showOrHide.call($self);
+                //if (tagManagerOptions.maxTags > 0 && tlis.length >= tagManagerOptions.maxTags) {
+                //  obj.hide();
+                //}
+            }
+            $self.val("""");
+        },
+
+        popTag : function () {
+            var $self = $(this), tagId, tagBeingRemoved,
+            tlis = $self.data(""tlis""),
+            tlid = $self.data(""tlid"");
+
+            if (tlid.length > 0) {
+              tagId = tlid.pop();
+
+              tagBeingRemoved = tlis[tlis.length - 1];
+              $self.trigger('tm:popping', [tagBeingRemoved, tagId]);
+              tlis.pop();
+
+              // console.log(""TagIdToRemove: "" + tagId);
+              $(""#"" + $self.data(""tm_rndid"") + ""_"" + tagId).remove();
+              privateMethods.refreshHiddenTagList.call($self);
+              $self.trigger('tm:popped', [tagBeingRemoved, tagId]);
+              // console.log(tlis);
+            }
+        },
+
+        empty : function() {
+            var $self = $(this), tlis = $self.data(""tlis""), tlid = $self.data(""tlid""), tagId;
+
+            while (tlid.length > 0) {
+                tagId = tlid.pop();
+                tlis.pop();
+                // console.log(""TagIdToRemove: "" + tagId);
+                $(""#"" + $self.data(""tm_rndid"") + ""_"" + tagId).remove();
+                privateMethods.refreshHiddenTagList.call($self);
+                // console.log(tlis);
+            }
+            $self.trigger('tm:emptied', null);
+
+            privateMethods.showOrHide.call($self);
+            //if (tagManagerOptions.maxTags > 0 && tlis.length < tagManagerOptions.maxTags) {
+            //  obj.show();
+            //}
+        },
+
+        tags : function() {
+            var $self = this, tlis = $self.data(""tlis"");
+            return tlis;
+        }
+    },
+
+    privateMethods = {
+        showOrHide : function () {
+            var $self = this, opts = $self.data('opts'), tlis = $self.data(""tlis"");
+
+            if (opts.maxTags > 0 && tlis.length < opts.maxTags) {
+                $self.show();
+                $self.trigger('tm:show');
+            }
+
+            if (opts.maxTags > 0 && tlis.length >= opts.maxTags) {
+                $self.hide();
+                $self.trigger('tm:hide');
+            }
+        },
+
+        tagClasses : function () {
+            var $self = $(this), opts = $self.data('opts'), tagBaseClass = opts.tagBaseClass,
+            inputBaseClass = opts.inputBaseClass, cl;
+            // 1) default class (tm-tag)
+            cl = tagBaseClass;
+            // 2) interpolate from input class: tm-input-xxx --> tm-tag-xxx
+            if ($self.attr('class')) {
+                $.each($self.attr('class').split(' '), function (index, value) {
+                    if (value.indexOf(inputBaseClass + '-') !== -1) {
+                        cl += ' ' + tagBaseClass + value.substring(inputBaseClass.length);
+                    }
+                });
+            }
+            // 3) tags from tagClass option
+            cl += (opts.tagClass ? ' ' + opts.tagClass : '');
+            return cl;
+        },
+
+        trimTag : function (tag, delimiterChars) {
+            var i;
+            tag = $.trim(tag);
+            // truncate at the first delimiter char
+            i = 0;
+            for (i; i < tag.length; i++) {
+                if ($.inArray(tag.charCodeAt(i), delimiterChars) !== -1) { break; }
+            }
+            return tag.substring(0, i);
+        },
+
+        refreshHiddenTagList : function () {
+            var $self = $(this), tlis = $self.data(""tlis""), lhiddenTagList = $self.data(""lhiddenTagList"");
+
+            if (lhiddenTagList) {
+                $(lhiddenTagList).val(tlis.join($self.data('opts').baseDelimiter)).change();
+            }
+
+            $self.trigger('tm:refresh', tlis.join($self.data('opts').baseDelimiter));
+        },
+
+        killEvent : function (e) {
+            e.cancelBubble = true;
+            e.returnValue = false;
+            e.stopPropagation();
+            e.preventDefault();
+        },
+
+        keyInArray : function (e, ary) {
+            return $.inArray(e.which, ary) !== -1;
+        },
+
+        applyDelimiter : function (e) {
+            var $self = $(this);
+            publicMethods.pushTag.call($self,$(this).val());
+            e.preventDefault();
+        },
+
+        prefill: function (pta) {
+            var $self = $(this);
+            var opts = $self.data('opts')
+            $.each(pta, function (key, val) {
+                if (opts.externalTagId === true) {
+                    publicMethods.pushTag.call($self, val[opts.prefillValueFieldName], true, val[opts.prefillIdFieldName]);
+                } else {
+                    publicMethods.pushTag.call($self, val, true);
+                }
+            });
+        },
+
+        pushAllTags : function (e, tag) {
+            var $self = $(this), opts = $self.data('opts'), tlis = $self.data(""tlis"");
+            if (opts.AjaxPushAllTags) {
+                if (e.type !== 'tm:pushed' || $.inArray(tag, opts.prefilled) === -1) {
+                    $.post(opts.AjaxPush, $.extend({ tags: tlis.join(opts.baseDelimiter) }, opts.AjaxPushParameters));
+                }
+            }
+        },
+
+        spliceTag : function (tagId) {
+            var $self = this, tlis = $self.data(""tlis""), tlid = $self.data(""tlid""), idx = $.inArray(tagId, tlid),
+            tagBeingRemoved;
+
+            // console.log(""TagIdToRemove: "" + tagId);
+            // console.log(""position: "" + idx);
+
+            if (-1 !== idx) {
+                tagBeingRemoved = tlis[idx];
+                $self.trigger('tm:splicing', [tagBeingRemoved, tagId]);
+                $(""#"" + $self.data(""tm_rndid"") + ""_"" + tagId).remove();
+                tlis.splice(idx, 1);
+                tlid.splice(idx, 1);
+                privateMethods.refreshHiddenTagList.call($self);
+                $self.trigger('tm:spliced', [tagBeingRemoved, tagId]);
+                // console.log(tlis);
+            }
+
+            privateMethods.showOrHide.call($self);
+            //if (tagManagerOptions.maxTags > 0 && tlis.length < tagManagerOptions.maxTags) {
+            //  obj.show();
+            //}
+        },
+
+        init : function (options) {
+            var opts = $.extend({}, defaults, options), delimiters, keyNums;
+
+            opts.hiddenTagListName = (opts.hiddenTagListName === null)
+                ? 'hidden-' + this.attr('name')
+                : opts.hiddenTagListName;
+
+            delimiters = opts.delimeters || opts.delimiters; // 'delimeter' is deprecated
+            keyNums = [9, 13, 17, 18, 19, 37, 38, 39, 40]; // delimiter values to be handled as key codes
+            opts.delimiterChars = [];
+            opts.delimiterKeys = [];
+
+            $.each(delimiters, function (i, v) {
+                if ($.inArray(v, keyNums) !== -1) {
+                    opts.delimiterKeys.push(v);
+                } else {
+                    opts.delimiterChars.push(v);
+                }
+            });
+
+            opts.baseDelimiter = String.fromCharCode(opts.delimiterChars[0] || 44);
+            opts.tagBaseClass = 'tm-tag';
+            opts.inputBaseClass = 'tm-input';
+
+            if (!$.isFunction(opts.validator)) { opts.validator = null; }
+
+            this.each(function() {
+                var $self = $(this), hiddenObj ='', rndid ='', albet = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"";
+
+                // prevent double-initialization of TagManager
+                if ($self.data('tagManager')) { return false; }
+                $self.data('tagManager', true);
+
+                for (var i = 0; i < 5; i++) {
+                  rndid += albet.charAt(Math.floor(Math.random() * albet.length));
+                }
+
+                $self.data(""tm_rndid"", rndid);
+
+                // store instance-specific data in the DOM object
+                $self.data('opts',opts)
+                    .data('tlis', []) //list of string tags
+                    .data('tlid', []); //list of ID of the string tags
+
+                if (opts.output === null) {
+                    hiddenObj = $('<input/>', {
+                        type: 'hidden',
+                        name: opts.hiddenTagListName
+                    });
+                    $self.after(hiddenObj);
+                    $self.data(""lhiddenTagList"", hiddenObj);
+                } else {
+                    $self.data(""lhiddenTagList"", $(opts.output));
+                }
+
+                if (opts.AjaxPushAllTags) {
+                    $self.on('tm:spliced', privateMethods.pushAllTags);
+                    $self.on('tm:popped', privateMethods.pushAllTags);
+                    $self.on('tm:pushed', privateMethods.pushAllTags);
+                }
+
+                // hide popovers on focus and keypress events
+                $self.on('focus keypress', function(e) {
+                    if ($(this).popover) { $(this).popover('hide'); }
+                });
+
+                // handle ESC (keyup used for browser compatibility)
+                if (opts.isClearInputOnEsc) {
+                    $self.on('keyup', function(e) {
+                        if (e.which === 27) {
+                            // console.log('esc detected');
+                            $(this).val('');
+                            privateMethods.killEvent(e);
+                        }
+                    });
+                }
+
+                $self.on('keypress', function(e) {
+                    // push ASCII-based delimiters
+                    if (privateMethods.keyInArray(e, opts.delimiterChars)) {
+                        privateMethods.applyDelimiter.call($self, e);
+                    }
+                });
+
+                $self.on('keydown', function(e) {
+                    // disable ENTER
+                    if (e.which === 13) {
+                        if (opts.preventSubmitOnEnter) {
+                            privateMethods.killEvent(e);
+                        }
+                    }
+
+                    // push key-based delimiters (includes <enter> by default)
+                    if (privateMethods.keyInArray(e, opts.delimiterKeys)) {
+                        privateMethods.applyDelimiter.call($self, e);
+                    }
+                });
+
+                // BACKSPACE (keydown used for browser compatibility)
+                if (opts.deleteTagsOnBackspace) {
+                    $self.on('keydown', function(e) {
+                        if (privateMethods.keyInArray(e, opts.backspace)) {
+                            // console.log(""backspace detected"");
+                            if ($(this).val().length <= 0) {
+                                publicMethods.popTag.call($self);
+                                privateMethods.killEvent(e);
+                            }
+                        }
+                    });
+                }
+
+                // on tag pop fill back the tag's content to the input field
+                if (opts.fillInputOnTagRemove) {
+                    $self.on('tm:popped', function(e, tag) {
+                        $(this).val(tag);
+                    });
+                }
+
+                $self.change(function(e) {
+                    if (!/webkit/.test(navigator.userAgent.toLowerCase())) {
+                        $self.focus();
+                    } // why?
+
+                    /* unimplemented mode to push tag on blur
+                     else if (tagManagerOptions.pushTagOnBlur) {
+                     console.log('change: pushTagOnBlur ' + tag);
+                     pushTag($(this).val());
+                     } */
+                    privateMethods.killEvent(e);
+                });
+
+                if (opts.prefilled !== null) {
+                    if (typeof (opts.prefilled) === ""object"") {
+                        privateMethods.prefill.call($self, opts.prefilled);
+                    } else if (typeof (opts.prefilled) === ""string"") {
+                        privateMethods.prefill.call($self, opts.prefilled.split(opts.baseDelimiter));
+                    } else if (typeof (opts.prefilled) === ""function"") {
+                        privateMethods.prefill.call($self, opts.prefilled());
+                    }
+                } else if (opts.output !== null) {
+                    if ($(opts.output) && $(opts.output).val()) { var existing_tags = $(opts.output); }
+                    privateMethods.prefill.call($self,$(opts.output).val().split(opts.baseDelimiter));
+                }
+
+            });
+
+            return this;
+        }
+    };
+
+    $.fn.tagsManager = function(method) {
+        var $self = $(this);
+
+        if (!(0 in this)) { return this; }
+
+        if ( publicMethods[method] ) {
+            return publicMethods[method].apply( $self, Array.prototype.slice.call(arguments, 1) );
+        } else if ( typeof method === 'object' || ! method ) {
+            return privateMethods.init.apply( this, arguments );
+        } else {
+            $.error( 'Method ' +  method + ' does not exist.' );
+            return false;
+        }
+    };
+
+}(jQuery));",2018-06-14T13:07:57Z,217
"@@ -9,145 +9,144 @@
 @nav-pf-vertical-width: 230px;
 
 // PatternFly - OpenSans
-@import ""../../bower_components/patternfly/dist/less/fonts"";
+@import ""../../node_modules/patternfly/dist/less/fonts"";
 
 // Bootstrap
-@import ""../../bower_components/bootstrap/less/variables"";
-@import ""../../bower_components/bootstrap/less/mixins"";
-@import ""../../bower_components/bootstrap/less/normalize"";
-@import ""../../bower_components/bootstrap/less/print"";
-@import ""../../bower_components/bootstrap/less/glyphicons"";
-@import ""../../bower_components/bootstrap/less/scaffolding"";
-@import ""../../bower_components/bootstrap/less/type"";
-@import ""../../bower_components/bootstrap/less/code"";
-@import ""../../bower_components/bootstrap/less/grid"";
-@import ""../../bower_components/bootstrap/less/tables"";
-@import ""../../bower_components/bootstrap/less/forms"";
-@import ""../../bower_components/bootstrap/less/buttons"";
-@import ""../../bower_components/bootstrap/less/component-animations"";
-@import ""../../bower_components/bootstrap/less/dropdowns"";
-@import ""../../bower_components/bootstrap/less/button-groups"";
-@import ""../../bower_components/bootstrap/less/input-groups"";
-@import ""../../bower_components/bootstrap/less/navs"";
-@import ""../../bower_components/bootstrap/less/navbar"";
-@import ""../../bower_components/bootstrap/less/breadcrumbs"";
-@import ""../../bower_components/bootstrap/less/pagination"";
-@import ""../../bower_components/bootstrap/less/pager"";
-@import ""../../bower_components/bootstrap/less/labels"";
-@import ""../../bower_components/bootstrap/less/badges"";
-@import ""../../bower_components/bootstrap/less/jumbotron"";
-@import ""../../bower_components/bootstrap/less/thumbnails"";
-@import ""../../bower_components/bootstrap/less/alerts"";
-@import ""../../bower_components/bootstrap/less/progress-bars"";
-@import ""../../bower_components/bootstrap/less/media"";
-@import ""../../bower_components/bootstrap/less/list-group"";
-@import ""../../bower_components/bootstrap/less/panels"";
-@import ""../../bower_components/bootstrap/less/responsive-embed"";
-@import ""../../bower_components/bootstrap/less/wells"";
-@import ""../../bower_components/bootstrap/less/close"";
-@import ""../../bower_components/bootstrap/less/modals"";
-@import ""../../bower_components/bootstrap/less/tooltip"";
-@import ""../../bower_components/bootstrap/less/popovers"";
-@import ""../../bower_components/bootstrap/less/carousel"";
-@import ""../../bower_components/bootstrap/less/utilities"";
-@import ""../../bower_components/bootstrap/less/responsive-utilities"";
+@import ""../../node_modules/bootstrap/less/variables"";
+@import ""../../node_modules/bootstrap/less/mixins"";
+@import ""../../node_modules/bootstrap/less/normalize"";
+@import ""../../node_modules/bootstrap/less/print"";
+@import ""../../node_modules/bootstrap/less/glyphicons"";
+@import ""../../node_modules/bootstrap/less/scaffolding"";
+@import ""../../node_modules/bootstrap/less/type"";
+@import ""../../node_modules/bootstrap/less/code"";
+@import ""../../node_modules/bootstrap/less/grid"";
+@import ""../../node_modules/bootstrap/less/tables"";
+@import ""../../node_modules/bootstrap/less/forms"";
+@import ""../../node_modules/bootstrap/less/buttons"";
+@import ""../../node_modules/bootstrap/less/component-animations"";
+@import ""../../node_modules/bootstrap/less/dropdowns"";
+@import ""../../node_modules/bootstrap/less/button-groups"";
+@import ""../../node_modules/bootstrap/less/input-groups"";
+@import ""../../node_modules/bootstrap/less/navs"";
+@import ""../../node_modules/bootstrap/less/navbar"";
+@import ""../../node_modules/bootstrap/less/breadcrumbs"";
+@import ""../../node_modules/bootstrap/less/pagination"";
+@import ""../../node_modules/bootstrap/less/pager"";
+@import ""../../node_modules/bootstrap/less/labels"";
+@import ""../../node_modules/bootstrap/less/badges"";
+@import ""../../node_modules/bootstrap/less/jumbotron"";
+@import ""../../node_modules/bootstrap/less/thumbnails"";
+@import ""../../node_modules/bootstrap/less/alerts"";
+@import ""../../node_modules/bootstrap/less/progress-bars"";
+@import ""../../node_modules/bootstrap/less/media"";
+@import ""../../node_modules/bootstrap/less/list-group"";
+@import ""../../node_modules/bootstrap/less/panels"";
+@import ""../../node_modules/bootstrap/less/responsive-embed"";
+@import ""../../node_modules/bootstrap/less/wells"";
+@import ""../../node_modules/bootstrap/less/close"";
+@import ""../../node_modules/bootstrap/less/modals"";
+@import ""../../node_modules/bootstrap/less/tooltip"";
+@import ""../../node_modules/bootstrap/less/popovers"";
+@import ""../../node_modules/bootstrap/less/carousel"";
+@import ""../../node_modules/bootstrap/less/utilities"";
+@import ""../../node_modules/bootstrap/less/responsive-utilities"";
 
 // Font Awesome
-@import ""../../bower_components/font-awesome/less/variables"";
-@import ""../../bower_components/font-awesome/less/mixins"";
-@import ""../../bower_components/font-awesome/less/path"";
-@import ""../../bower_components/font-awesome/less/core"";
-@import ""../../bower_components/font-awesome/less/larger"";
-@import ""../../bower_components/font-awesome/less/fixed-width"";
-@import ""../../bower_components/font-awesome/less/list"";
-@import ""../../bower_components/font-awesome/less/bordered-pulled"";
-@import ""../../bower_components/font-awesome/less/animated"";
-@import ""../../bower_components/font-awesome/less/rotated-flipped"";
-@import ""../../bower_components/font-awesome/less/stacked"";
-@import ""../../bower_components/font-awesome/less/icons"";
-@import ""../../bower_components/font-awesome/less/screen-reader"";
+@import ""../../node_modules/font-awesome/less/variables"";
+@import ""../../node_modules/font-awesome/less/mixins"";
+@import ""../../node_modules/font-awesome/less/path"";
+@import ""../../node_modules/font-awesome/less/core"";
+@import ""../../node_modules/font-awesome/less/larger"";
+@import ""../../node_modules/font-awesome/less/fixed-width"";
+@import ""../../node_modules/font-awesome/less/list"";
+@import ""../../node_modules/font-awesome/less/bordered-pulled"";
+@import ""../../node_modules/font-awesome/less/animated"";
+@import ""../../node_modules/font-awesome/less/rotated-flipped"";
+@import ""../../node_modules/font-awesome/less/stacked"";
+@import ""../../node_modules/font-awesome/less/icons"";
+@import ""../../node_modules/font-awesome/less/screen-reader"";
 
 // Patternfly
-@import ""../../bower_components/patternfly/dist/less/variables"";
-@import ""../../bower_components/patternfly/dist/less/bootstrap-mixin-overrides"";
-@import ""../../bower_components/patternfly/dist/less/mixins"";
-@import ""../../bower_components/patternfly/dist/less/alerts"";
-@import ""../../bower_components/patternfly/dist/less/badges"";
-@import ""../../bower_components/patternfly/dist/less/breadcrumbs"";
-@import ""../../bower_components/patternfly/dist/less/buttons"";
-@import ""../../bower_components/patternfly/dist/less/dropdowns"";
-@import ""../../bower_components/patternfly/dist/less/forms"";
-@import ""../../bower_components/patternfly/dist/less/labels"";
-@import ""../../bower_components/patternfly/dist/less/list-group"";
-@import ""../../bower_components/patternfly/dist/less/modals"";
-@import ""../../bower_components/patternfly/dist/less/pager"";
-@import ""../../bower_components/patternfly/dist/less/pagination"";
-@import ""../../bower_components/patternfly/dist/less/panels"";
-@import ""../../bower_components/patternfly/dist/less/popovers"";
-@import ""../../bower_components/patternfly/dist/less/progress-bars"";
-@import ""../../bower_components/patternfly/dist/less/tables"";
-@import ""../../bower_components/patternfly/dist/less/tabs"";
-@import ""../../bower_components/patternfly/dist/less/tooltip"";
-@import ""../../bower_components/patternfly/dist/less/type"";
+@import ""../../node_modules/patternfly/dist/less/variables"";
+@import ""../../node_modules/patternfly/dist/less/bootstrap-mixin-overrides"";
+@import ""../../node_modules/patternfly/dist/less/mixins"";
+@import ""../../node_modules/patternfly/dist/less/alerts"";
+@import ""../../node_modules/patternfly/dist/less/badges"";
+@import ""../../node_modules/patternfly/dist/less/breadcrumbs"";
+@import ""../../node_modules/patternfly/dist/less/buttons"";
+@import ""../../node_modules/patternfly/dist/less/dropdowns"";
+@import ""../../node_modules/patternfly/dist/less/forms"";
+@import ""../../node_modules/patternfly/dist/less/labels"";
+@import ""../../node_modules/patternfly/dist/less/list-group"";
+@import ""../../node_modules/patternfly/dist/less/modals"";
+@import ""../../node_modules/patternfly/dist/less/pager"";
+@import ""../../node_modules/patternfly/dist/less/pagination"";
+@import ""../../node_modules/patternfly/dist/less/panels"";
+@import ""../../node_modules/patternfly/dist/less/popovers"";
+@import ""../../node_modules/patternfly/dist/less/progress-bars"";
+@import ""../../node_modules/patternfly/dist/less/tables"";
+@import ""../../node_modules/patternfly/dist/less/tabs"";
+@import ""../../node_modules/patternfly/dist/less/tooltip"";
+@import ""../../node_modules/patternfly/dist/less/type"";
 
 // PatternFly Additions
-@import ""../../bower_components/bootstrap-slider/src/less/variables"";
-@import ""../../bower_components/bootstrap-slider/src/less/rules"";
-@import ""../../bower_components/patternfly-bootstrap-combobox/less/combobox"";
-@import ""../../bower_components/bootstrap-datepicker/less/datepicker3"";
-@import ""../../bower_components/bootstrap-select/less/bootstrap-select"";
-@import ""../../bower_components/bootstrap-switch/src/less/bootstrap3/bootstrap-switch"";
-@import (less) ""../../bower_components/bootstrap-touchspin/dist/jquery.bootstrap-touchspin.css"";
-@import (less) ""../../bower_components/c3/c3.css"";
-@import ""../../bower_components/eonasdan-bootstrap-datetimepicker/src/less/_bootstrap-datetimepicker"";
-@import ""../../bower_components/patternfly/dist/less/about-modal.less"";
-@import ""../../bower_components/patternfly/dist/less/application-launcher.less"";
-@import ""../../bower_components/patternfly/dist/less/blank-slate.less"";
-@import ""../../bower_components/patternfly/dist/less/bootstrap-combobox.less"";
-@import ""../../bower_components/patternfly/dist/less/bootstrap-datepicker.less"";
-@import ""../../bower_components/patternfly/dist/less/bootstrap-select.less"";
-@import ""../../bower_components/patternfly/dist/less/bootstrap-slider.less"";
-@import ""../../bower_components/patternfly/dist/less/bootstrap-switch.less"";
-@import ""../../bower_components/patternfly/dist/less/bootstrap-touchspin.less"";
-@import ""../../bower_components/patternfly/dist/less/bootstrap-treeview.less"";
-@import ""../../bower_components/patternfly/dist/less/cards.less"";
-@import ""../../bower_components/patternfly/dist/less/card-view.less"";
-@import ""../../bower_components/patternfly/dist/less/charts.less"";
-@import ""../../bower_components/patternfly/dist/less/close.less"";
-@import ""../../bower_components/patternfly/dist/less/datatables.less"";
-@import ""../../bower_components/patternfly/dist/less/experimental-features.less"";
-@import ""../../bower_components/patternfly/dist/less/filter.less"";
-@import ""../../bower_components/patternfly/dist/less/footer.less"";
-@import ""../../bower_components/patternfly/dist/less/icons.less"";
-@import ""../../bower_components/patternfly/dist/less/infotip.less"";
-@import ""../../bower_components/patternfly/dist/less/layouts.less"";
-@import ""../../bower_components/patternfly/dist/less/links.less"";
-@import ""../../bower_components/patternfly/dist/less/list-pf.less"";
-@import ""../../bower_components/patternfly/dist/less/list-view.less"";
-@import ""../../bower_components/patternfly/dist/less/list-view-dnd.less"";
-@import ""../../bower_components/patternfly/dist/less/login.less"";
-@import ""../../bower_components/patternfly/dist/less/navbar.less"";
-@import ""../../bower_components/patternfly/dist/less/navbar-alt.less"";
-@import ""../../bower_components/patternfly/dist/less/navbar-vertical.less"";
-@import ""../../bower_components/patternfly/dist/less/nav-vertical-alt.less"";
-@import ""../../bower_components/patternfly/dist/less/notifications-drawer.less"";
-@import ""../../bower_components/patternfly/dist/less/search.less"";
-@import ""../../bower_components/patternfly/dist/less/sidebar.less"";
-@import ""../../bower_components/patternfly/dist/less/skip-to-content.less"";
-@import ""../../bower_components/patternfly/dist/less/spinner.less"";
-@import ""../../bower_components/patternfly/dist/less/syntax-highlighting.less"";
-@import ""../../bower_components/patternfly/dist/less/table-view.less"";
-@import ""../../bower_components/patternfly/dist/less/time-picker.less"";
-@import ""../../bower_components/patternfly/dist/less/toast.less"";
-@import ""../../bower_components/patternfly/dist/less/toolbar.less"";
-@import ""../../bower_components/patternfly/dist/less/vertical-nav.less"";
-@import ""../../bower_components/patternfly/dist/less/wizard.less"";
+@import ""../../node_modules/bootstrap-slider/src/less/variables"";
+@import ""../../node_modules/bootstrap-slider/src/less/rules"";
+@import ""../../node_modules/patternfly-bootstrap-combobox/less/combobox"";
+@import ""../../node_modules/bootstrap-datepicker/less/datepicker3"";
+@import ""../../node_modules/bootstrap-select/less/bootstrap-select"";
+@import ""../../node_modules/bootstrap-switch/src/less/bootstrap3/bootstrap-switch"";
+@import (less) ""../../node_modules/bootstrap-touchspin/dist/jquery.bootstrap-touchspin.css"";
+@import (less) ""../../node_modules/c3/c3.css"";
+@import ""../../node_modules/patternfly/dist/less/about-modal.less"";
+@import ""../../node_modules/patternfly/dist/less/application-launcher.less"";
+@import ""../../node_modules/patternfly/dist/less/blank-slate.less"";
+@import ""../../node_modules/patternfly/dist/less/bootstrap-combobox.less"";
+@import ""../../node_modules/patternfly/dist/less/bootstrap-datepicker.less"";
+@import ""../../node_modules/patternfly/dist/less/bootstrap-select.less"";
+@import ""../../node_modules/patternfly/dist/less/bootstrap-slider.less"";
+@import ""../../node_modules/patternfly/dist/less/bootstrap-switch.less"";
+@import ""../../node_modules/patternfly/dist/less/bootstrap-touchspin.less"";
+@import ""../../node_modules/patternfly/dist/less/bootstrap-treeview.less"";
+@import ""../../node_modules/patternfly/dist/less/cards.less"";
+@import ""../../node_modules/patternfly/dist/less/card-view.less"";
+@import ""../../node_modules/patternfly/dist/less/charts.less"";
+@import ""../../node_modules/patternfly/dist/less/close.less"";
+@import ""../../node_modules/patternfly/dist/less/datatables.less"";
+@import ""../../node_modules/patternfly/dist/less/experimental-features.less"";
+@import ""../../node_modules/patternfly/dist/less/filter.less"";
+@import ""../../node_modules/patternfly/dist/less/footer.less"";
+@import ""../../node_modules/patternfly/dist/less/icons.less"";
+@import ""../../node_modules/patternfly/dist/less/infotip.less"";
+@import ""../../node_modules/patternfly/dist/less/layouts.less"";
+@import ""../../node_modules/patternfly/dist/less/links.less"";
+@import ""../../node_modules/patternfly/dist/less/list-pf.less"";
+@import ""../../node_modules/patternfly/dist/less/list-view.less"";
+@import ""../../node_modules/patternfly/dist/less/list-view-dnd.less"";
+@import ""../../node_modules/patternfly/dist/less/login.less"";
+@import ""../../node_modules/patternfly/dist/less/navbar.less"";
+@import ""../../node_modules/patternfly/dist/less/navbar-alt.less"";
+@import ""../../node_modules/patternfly/dist/less/navbar-vertical.less"";
+@import ""../../node_modules/patternfly/dist/less/nav-vertical-alt.less"";
+@import ""../../node_modules/patternfly/dist/less/notifications-drawer.less"";
+@import ""../../node_modules/patternfly/dist/less/search.less"";
+@import ""../../node_modules/patternfly/dist/less/sidebar.less"";
+@import ""../../node_modules/patternfly/dist/less/skip-to-content.less"";
+@import ""../../node_modules/patternfly/dist/less/spinner.less"";
+@import ""../../node_modules/patternfly/dist/less/syntax-highlighting.less"";
+@import ""../../node_modules/patternfly/dist/less/table-view.less"";
+@import ""../../node_modules/patternfly/dist/less/time-picker.less"";
+@import ""../../node_modules/patternfly/dist/less/toast.less"";
+@import ""../../node_modules/patternfly/dist/less/toolbar.less"";
+@import ""../../node_modules/patternfly/dist/less/vertical-nav.less"";
+@import ""../../node_modules/patternfly/dist/less/wizard.less"";
 
 // Tag Manager
-@import ""../../bower_components/tagmanager/tagmanager"";
+@import ""tagmanager"";
 
 // Google Code Prettify
-@import (less) ""../../bower_components/google-code-prettify/src/prettify.css"";
+@import (less) ""../../node_modules/google-code-prettify/src/prettify.css"";
 
 // HAL
 @import ""variables"";",2018-06-14T13:07:57Z,218
"@@ -0,0 +1,212 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+//
+// Bootstrap TagManager
+// --------------------------------------------------
+
+// Tag Variables
+// --------------------------------------------------
+
+// Colors
+// -------------------------
+
+@white: #ffffff;
+@black: #000000;
+@gray: #555555;
+@grayDark: #333333;
+
+@textColor: @grayDark;
+
+@tagText: @gray;
+@tagBackground: #f5f5f5;
+@tagBorder: #bbb;
+
+@tagWarningText: #945203;
+@tagWarningBackground: #f2c889;
+@tagWarningBorder: #f0a12f;
+
+@tagErrorText: #84212e;
+@tagErrorBackground: #e69ca6;
+@tagErrorBorder: #d24a5d;
+
+@tagSuccessText: #638421;
+@tagSuccessBackground: #cde69c;
+@tagSuccessBorder: #a5d24a;
+
+@tagInfoText: #4594b5;
+@tagInfoBackground: #c5eefa;
+@tagInfoBorder: #5dc8f7;
+
+@tagInverseText: #ccc;
+@tagInverseBackground: @gray;
+@tagInverseBorder: @grayDark;
+
+@tagDisabledText: #aaa;
+@tagDisabledBackground: #e6e6e6;
+@tagDisabledBorder: #ccc;
+
+// Sizing
+// -------------------------
+
+@tagFontSize: 13px;
+@tagFontSizeLarge: @tagFontSize * 1.25; // ~16px
+@tagFontSizeSmall: @tagFontSize * 0.85; // ~11px
+@tagFontSizeMini: @tagFontSize * 0.75; // ~10px
+
+@tagPadding: 4px;
+@tagMargin: 5px;
+
+@borderRadiusSmall: 3px;
+@baseBorderRadius: 4px;
+
+@baseLineHeight: 20px;
+
+// Tag Classes
+// --------------------------------------------------
+
+// Fonts
+// --------------------------------------------------
+
+@sansFontFamily: ""Helvetica Neue"", Helvetica, Arial, sans-serif;
+
+// Base tag class
+// -------------------------
+
+.tm-tag {
+  color: @tagText;
+  background-color: @tagBackground;
+  border: @tagBorder 1px solid;
+  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.075) inset;
+  display: inline-block;
+  border-radius: @borderRadiusSmall;
+  font-family: @sansFontFamily;
+  font-size: @tagFontSize;
+  margin: 0 @tagMargin @tagMargin 0;
+  padding: @tagPadding;
+  text-decoration: none;
+  transition: border 0.2s linear 0s, box-shadow 0.2s linear 0s;
+  -moz-transition: border 0.2s linear 0s, box-shadow 0.2s linear 0s;
+  -webkit-transition: border 0.2s linear 0s, box-shadow 0.2s linear 0s;
+  vertical-align: middle;
+
+  // Remove button
+  // -------------------------
+
+  .tm-tag-remove {
+    color: @black;
+    font-weight: bold;
+    margin-left: @tagPadding;
+    opacity: 0.2;
+    &:hover {
+      color: @black;
+      text-decoration: none;
+      opacity: 0.4;
+    }
+  }
+
+  // Semantic Colors
+  // -------------------------
+
+  &.tm-tag-warning {
+    color: @tagWarningText;
+    background-color: @tagWarningBackground;
+    border-color: @tagWarningBorder;
+  }
+  &.tm-tag-error {
+    color: @tagErrorText;
+    background-color: @tagErrorBackground;
+    border-color: @tagErrorBorder;
+  }
+  &.tm-tag-success {
+    color: @tagSuccessText;
+    background-color: @tagSuccessBackground;
+    border-color: @tagSuccessBorder;
+  }
+  &.tm-tag-info {
+    color: @tagInfoText;
+    background-color: @tagInfoBackground;
+    border-color: @tagInfoBorder;
+  }
+  &.tm-tag-inverse {
+    color: @tagInverseText;
+    background-color: @tagInverseBackground;
+    border-color: @tagInverseBorder;
+    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2) inset;
+    .tm-tag-remove {
+      color: @white;
+    }
+  }
+
+  // Sizes
+  // -------------------------
+
+  &.tm-tag-large {
+    font-size: @tagFontSizeLarge;
+    border-radius: @baseBorderRadius;
+    padding: 11px 7px;
+  }
+  &.tm-tag-small {
+    font-size: @tagFontSizeSmall;
+    border-radius: @borderRadiusSmall;
+    padding: 2px 4px;
+  }
+  &.tm-tag-mini {
+    font-size: @tagFontSizeMini;
+    border-radius: 2px;
+    padding: 0px 2px;
+  }
+
+  // Miscellaneous Styles
+  // -------------------------
+
+  &.tm-tag-plain {
+    color: @textColor;
+    box-shadow: none;
+    background: none;
+    border: none;
+  }
+  &.tm-tag-disabled {
+    color: @tagDisabledText;
+    background-color: @tagDisabledBackground;
+    border-color: @tagDisabledBorder;
+    box-shadow: none;
+    .tm-tag-remove {
+      display: none;
+    }
+  }
+}
+
+// Forms
+// --------------------------------------------------
+
+// Input style (Recommended)
+// -------------------------
+
+input[type=""text""].tm-input {
+  margin-bottom: @tagMargin;
+}
+
+// Form wrappers (Optional)
+// -------------------------
+
+.control-group.tm-group {
+  margin-bottom: (@baseLineHeight / 2) - @tagMargin;
+}
+
+.form-horizontal .control-group.tm-group {
+  margin-bottom: @baseLineHeight - @tagMargin;
+}",2018-06-14T13:07:57Z,219
"@@ -1,6 +1,6 @@
 /**
  * jsTree
- * Override default theme at ""../../bower_components/jstree/src/themes/default/style.less""
+ * Override default theme at ""../../node_modules/jstree/src/themes/default/style.less""
  */
 @theme-name: hal;
 @hovered-bg-color: @hover-color;
@@ -26,8 +26,8 @@
  * all calculations must be enclosed in ()!
  */
 @import ""jstree/mixins.less"";
-@import ""../../bower_components/jstree/src/themes/base.less"";
-@import ""../../bower_components/jstree/src/themes/main.less"";
+@import ""../../node_modules/jstree/src/themes/base.less"";
+@import ""../../node_modules/jstree/src/themes/main.less"";
 
 .tree-container {
   margin-top: @margin-small;",2018-06-14T13:07:57Z,220
"@@ -2,6 +2,192 @@
 # yarn lockfile v1
 
 
+""@types/c3@^0.6.0"":
+  version ""0.6.0""
+  resolved ""https://registry.yarnpkg.com/@types/c3/-/c3-0.6.0.tgz#74fe73461f18386ae460e8113ea4883ab7fbeab1""
+  dependencies:
+    ""@types/d3"" ""^4""
+
+""@types/d3-array@*"":
+  version ""1.2.1""
+  resolved ""https://registry.yarnpkg.com/@types/d3-array/-/d3-array-1.2.1.tgz#e489605208d46a1c9d980d2e5772fa9c75d9ec65""
+
+""@types/d3-axis@*"":
+  version ""1.0.10""
+  resolved ""https://registry.yarnpkg.com/@types/d3-axis/-/d3-axis-1.0.10.tgz#41d6b3ea9032f9531ec0d71d83bcf49294511210""
+  dependencies:
+    ""@types/d3-selection"" ""*""
+
+""@types/d3-brush@*"":
+  version ""1.0.8""
+  resolved ""https://registry.yarnpkg.com/@types/d3-brush/-/d3-brush-1.0.8.tgz#2bb9b93e58115da9e0c94ac2b865e34d3631b69b""
+  dependencies:
+    ""@types/d3-selection"" ""*""
+
+""@types/d3-chord@*"":
+  version ""1.0.7""
+  resolved ""https://registry.yarnpkg.com/@types/d3-chord/-/d3-chord-1.0.7.tgz#6cb982d84c02bf1b05874d921316451546fde9c3""
+
+""@types/d3-collection@*"":
+  version ""1.0.7""
+  resolved ""https://registry.yarnpkg.com/@types/d3-collection/-/d3-collection-1.0.7.tgz#829e1db477d6bbbcdc038cbc489f22798752d707""
+
+""@types/d3-color@*"":
+  version ""1.2.1""
+  resolved ""https://registry.yarnpkg.com/@types/d3-color/-/d3-color-1.2.1.tgz#26141c3c554e320edd40726b793570a3ae57397e""
+
+""@types/d3-dispatch@*"":
+  version ""1.0.6""
+  resolved ""https://registry.yarnpkg.com/@types/d3-dispatch/-/d3-dispatch-1.0.6.tgz#19b173f669cd2ab7dd3d862e8037aae1a98c7508""
+
+""@types/d3-drag@*"":
+  version ""1.2.1""
+  resolved ""https://registry.yarnpkg.com/@types/d3-drag/-/d3-drag-1.2.1.tgz#6394bcf2f6414140b3b0d521259cadc6fa1da926""
+  dependencies:
+    ""@types/d3-selection"" ""*""
+
+""@types/d3-dsv@*"":
+  version ""1.0.33""
+  resolved ""https://registry.yarnpkg.com/@types/d3-dsv/-/d3-dsv-1.0.33.tgz#18de1867927f7ec898671aef82f730f16d4c7fcb""
+
+""@types/d3-ease@*"":
+  version ""1.0.7""
+  resolved ""https://registry.yarnpkg.com/@types/d3-ease/-/d3-ease-1.0.7.tgz#93a301868be9e15061f3d44343b1ab3f8acb6f09""
+
+""@types/d3-force@*"":
+  version ""1.1.1""
+  resolved ""https://registry.yarnpkg.com/@types/d3-force/-/d3-force-1.1.1.tgz#185c18b77932df63457894bd36d0d6e9692546c0""
+
+""@types/d3-format@*"":
+  version ""1.3.0""
+  resolved ""https://registry.yarnpkg.com/@types/d3-format/-/d3-format-1.3.0.tgz#c5e115fac8e6861ce656fe9861892b22f6b0cfcb""
+
+""@types/d3-geo@*"":
+  version ""1.10.3""
+  resolved ""https://registry.yarnpkg.com/@types/d3-geo/-/d3-geo-1.10.3.tgz#3c01b2baa480e1108301096328dc2837e7ff4d8a""
+  dependencies:
+    ""@types/geojson"" ""*""
+
+""@types/d3-hierarchy@*"":
+  version ""1.1.2""
+  resolved ""https://registry.yarnpkg.com/@types/d3-hierarchy/-/d3-hierarchy-1.1.2.tgz#63a4e433f321ffc4dbd9aa05ff95962072b51993""
+
+""@types/d3-interpolate@*"":
+  version ""1.2.0""
+  resolved ""https://registry.yarnpkg.com/@types/d3-interpolate/-/d3-interpolate-1.2.0.tgz#b5587e013f8afbbc0194046e6a66bb7b8f1c8619""
+  dependencies:
+    ""@types/d3-color"" ""*""
+
+""@types/d3-path@*"":
+  version ""1.0.7""
+  resolved ""https://registry.yarnpkg.com/@types/d3-path/-/d3-path-1.0.7.tgz#a0736fceed688a695f48265a82ff7a3369414b81""
+
+""@types/d3-polygon@*"":
+  version ""1.0.6""
+  resolved ""https://registry.yarnpkg.com/@types/d3-polygon/-/d3-polygon-1.0.6.tgz#db25c630a2afb9191fe51ba61dd37baee9dd44c7""
+
+""@types/d3-quadtree@*"":
+  version ""1.0.5""
+  resolved ""https://registry.yarnpkg.com/@types/d3-quadtree/-/d3-quadtree-1.0.5.tgz#1ce1e659eae4530df0cb127f297f1741a367a82e""
+
+""@types/d3-queue@*"":
+  version ""3.0.6""
+  resolved ""https://registry.yarnpkg.com/@types/d3-queue/-/d3-queue-3.0.6.tgz#2f5aa7eca3b153bb49687eaa570c10ab713439d3""
+
+""@types/d3-random@*"":
+  version ""1.1.1""
+  resolved ""https://registry.yarnpkg.com/@types/d3-random/-/d3-random-1.1.1.tgz#38647ce2ff4ce7d0d56974334c1c4092513c8b9f""
+
+""@types/d3-request@*"":
+  version ""1.0.2""
+  resolved ""https://registry.yarnpkg.com/@types/d3-request/-/d3-request-1.0.2.tgz#db9db8154f47816584706c6e6f702be66f22f4be""
+  dependencies:
+    ""@types/d3-dsv"" ""*""
+
+""@types/d3-scale@^1"":
+  version ""1.0.13""
+  resolved ""https://registry.yarnpkg.com/@types/d3-scale/-/d3-scale-1.0.13.tgz#8c89f73ea8adf81b849124683628aa834dcf545e""
+  dependencies:
+    ""@types/d3-time"" ""*""
+
+""@types/d3-selection@*"":
+  version ""1.3.1""
+  resolved ""https://registry.yarnpkg.com/@types/d3-selection/-/d3-selection-1.3.1.tgz#c6227f4e39d429cc429ce3882fd533facc7f014c""
+
+""@types/d3-shape@*"":
+  version ""1.2.3""
+  resolved ""https://registry.yarnpkg.com/@types/d3-shape/-/d3-shape-1.2.3.tgz#cadc9f93a626db9190f306048a650df4ffa4e500""
+  dependencies:
+    ""@types/d3-path"" ""*""
+
+""@types/d3-time-format@*"":
+  version ""2.1.0""
+  resolved ""https://registry.yarnpkg.com/@types/d3-time-format/-/d3-time-format-2.1.0.tgz#011e0fb7937be34a9a8f580ae1e2f2f1336a8a22""
+
+""@types/d3-time@*"":
+  version ""1.0.8""
+  resolved ""https://registry.yarnpkg.com/@types/d3-time/-/d3-time-1.0.8.tgz#6c083127b330b3c2fc65cd0f3a6e9cbd9607b28c""
+
+""@types/d3-timer@*"":
+  version ""1.0.7""
+  resolved ""https://registry.yarnpkg.com/@types/d3-timer/-/d3-timer-1.0.7.tgz#053e6369d9485c9dc80bc62fc0851123341d7816""
+
+""@types/d3-transition@*"":
+  version ""1.1.1""
+  resolved ""https://registry.yarnpkg.com/@types/d3-transition/-/d3-transition-1.1.1.tgz#c209fce6a966d6696356dd42b091a9c6cc79929f""
+  dependencies:
+    ""@types/d3-selection"" ""*""
+
+""@types/d3-voronoi@*"":
+  version ""1.1.7""
+  resolved ""https://registry.yarnpkg.com/@types/d3-voronoi/-/d3-voronoi-1.1.7.tgz#c0a145cf04395927e01706ff6c4ff835c97a8ece""
+
+""@types/d3-zoom@*"":
+  version ""1.7.1""
+  resolved ""https://registry.yarnpkg.com/@types/d3-zoom/-/d3-zoom-1.7.1.tgz#0d69be0bf5849cffb66f48e4258c838436b43822""
+  dependencies:
+    ""@types/d3-interpolate"" ""*""
+    ""@types/d3-selection"" ""*""
+
+""@types/d3@^4"":
+  version ""4.13.0""
+  resolved ""https://registry.yarnpkg.com/@types/d3/-/d3-4.13.0.tgz#aae092b368266409cfbf19c611203145ec0d5f65""
+  dependencies:
+    ""@types/d3-array"" ""*""
+    ""@types/d3-axis"" ""*""
+    ""@types/d3-brush"" ""*""
+    ""@types/d3-chord"" ""*""
+    ""@types/d3-collection"" ""*""
+    ""@types/d3-color"" ""*""
+    ""@types/d3-dispatch"" ""*""
+    ""@types/d3-drag"" ""*""
+    ""@types/d3-dsv"" ""*""
+    ""@types/d3-ease"" ""*""
+    ""@types/d3-force"" ""*""
+    ""@types/d3-format"" ""*""
+    ""@types/d3-geo"" ""*""
+    ""@types/d3-hierarchy"" ""*""
+    ""@types/d3-interpolate"" ""*""
+    ""@types/d3-path"" ""*""
+    ""@types/d3-polygon"" ""*""
+    ""@types/d3-quadtree"" ""*""
+    ""@types/d3-queue"" ""*""
+    ""@types/d3-random"" ""*""
+    ""@types/d3-request"" ""*""
+    ""@types/d3-scale"" ""^1""
+    ""@types/d3-selection"" ""*""
+    ""@types/d3-shape"" ""*""
+    ""@types/d3-time"" ""*""
+    ""@types/d3-time-format"" ""*""
+    ""@types/d3-timer"" ""*""
+    ""@types/d3-transition"" ""*""
+    ""@types/d3-voronoi"" ""*""
+    ""@types/d3-zoom"" ""*""
+
+""@types/geojson@*"":
+  version ""7946.0.3""
+  resolved ""https://registry.yarnpkg.com/@types/geojson/-/geojson-7946.0.3.tgz#e5791534ab0acfb2b3a39b713966cfcee85d469f""
+
 JSONStream@^0.8.4:
   version ""0.8.4""
   resolved ""https://registry.yarnpkg.com/JSONStream/-/JSONStream-0.8.4.tgz#91657dfe6ff857483066132b4618b62e8f4887bd""
@@ -17,6 +203,22 @@ abbrev@1:
   version ""1.1.1""
   resolved ""https://registry.yarnpkg.com/abbrev/-/abbrev-1.1.1.tgz#f8f2c887ad10bf67f634f005b6987fed3179aac8""
 
+abstract-leveldown@^4.0.0, abstract-leveldown@~4.0.0:
+  version ""4.0.3""
+  resolved ""https://registry.yarnpkg.com/abstract-leveldown/-/abstract-leveldown-4.0.3.tgz#cb636f4965fbe117f5c8b76a7d51dd42aaed0580""
+  dependencies:
+    xtend ""~4.0.0""
+
+abstract-leveldown@~3.0.0:
+  version ""3.0.0""
+  resolved ""https://registry.yarnpkg.com/abstract-leveldown/-/abstract-leveldown-3.0.0.tgz#5cb89f958a44f526779d740d1440e743e0c30a57""
+  dependencies:
+    xtend ""~4.0.0""
+
+ace-builds@~1.3.3:
+  version ""1.3.3""
+  resolved ""https://registry.yarnpkg.com/ace-builds/-/ace-builds-1.3.3.tgz#c9746028d1485e5d7595fb2e825e665bd6648970""
+
 acorn-globals@^1.0.4:
   version ""1.0.9""
   resolved ""https://registry.yarnpkg.com/acorn-globals/-/acorn-globals-1.0.9.tgz#55bb5e98691507b74579d0513413217c380c54cf""
@@ -62,12 +264,27 @@ ansi-styles@^3.1.0:
   dependencies:
     color-convert ""^1.9.0""
 
+aproba@^1.0.3:
+  version ""1.2.0""
+  resolved ""https://registry.yarnpkg.com/aproba/-/aproba-1.2.0.tgz#6802e6264efd18c790a1b0d517f0f2627bf2c94a""
+
+are-we-there-yet@~1.1.2:
+  version ""1.1.5""
+  resolved ""https://registry.yarnpkg.com/are-we-there-yet/-/are-we-there-yet-1.1.5.tgz#4b35c2944f062a8bfcda66410760350fe9ddfc21""
+  dependencies:
+    delegates ""^1.0.0""
+    readable-stream ""^2.0.6""
+
 argparse@^1.0.2, argparse@^1.0.7:
   version ""1.0.9""
   resolved ""https://registry.yarnpkg.com/argparse/-/argparse-1.0.9.tgz#73d83bc263f86e97f8cc4f6bae1b0e90a7d22c86""
   dependencies:
     sprintf-js ""~1.0.2""
 
+argsarray@0.0.1:
+  version ""0.0.1""
+  resolved ""https://registry.yarnpkg.com/argsarray/-/argsarray-0.0.1.tgz#6e7207b4ecdb39b0af88303fa5ae22bda8df61cb""
+
 arr-diff@^2.0.0:
   version ""2.0.0""
   resolved ""https://registry.yarnpkg.com/arr-diff/-/arr-diff-2.0.0.tgz#8f3b827f955a8bd669697e4a4256ac3ceae356cf""
@@ -134,6 +351,14 @@ atob@~1.1.0:
   version ""1.1.3""
   resolved ""https://registry.yarnpkg.com/atob/-/atob-1.1.3.tgz#95f13629b12c3a51a5d215abdce2aa9f32f80773""
 
+attempt-x@^1.1.0, attempt-x@^1.1.1:
+  version ""1.1.3""
+  resolved ""https://registry.yarnpkg.com/attempt-x/-/attempt-x-1.1.3.tgz#9ac844c75bca2c4e9e30d8d5c01f41eeb481a8b7""
+
+autocompleter@~1.0.33:
+  version ""1.0.33""
+  resolved ""https://registry.yarnpkg.com/autocompleter/-/autocompleter-1.0.33.tgz#4d0ce85a6d4266a34f83d28da43a43cbf8267baa""
+
 autoprefixer@^6.0.0, autoprefixer@^6.4.0:
   version ""6.7.7""
   resolved ""https://registry.yarnpkg.com/autoprefixer/-/autoprefixer-6.7.7.tgz#1dbd1c835658e35ce3f9984099db00585c782014""
@@ -230,6 +455,17 @@ bcrypt-pbkdf@^1.0.0:
   dependencies:
     tweetnacl ""^0.14.3""
 
+bindings@~1.3.0:
+  version ""1.3.0""
+  resolved ""https://registry.yarnpkg.com/bindings/-/bindings-1.3.0.tgz#b346f6ecf6a95f5a815c5839fc7cdb22502f1ed7""
+
+bl@^1.0.0:
+  version ""1.2.2""
+  resolved ""https://registry.yarnpkg.com/bl/-/bl-1.2.2.tgz#a160911717103c07410cef63ef51b397c025af9c""
+  dependencies:
+    readable-stream ""^2.3.5""
+    safe-buffer ""^5.1.1""
+
 body-parser@~1.14.0:
   version ""1.14.2""
   resolved ""https://registry.yarnpkg.com/body-parser/-/body-parser-1.14.2.tgz#1015cb1fe2c443858259581db53332f8d0cf50f9""
@@ -261,9 +497,37 @@ boom@5.x.x:
   dependencies:
     hoek ""4.x.x""
 
-bower@^1.8.0:
-  version ""1.8.2""
-  resolved ""https://registry.yarnpkg.com/bower/-/bower-1.8.2.tgz#adf53529c8d4af02ef24fb8d5341c1419d33e2f7""
+bootstrap-datepicker@^1.7.1:
+  version ""1.8.0""
+  resolved ""https://registry.yarnpkg.com/bootstrap-datepicker/-/bootstrap-datepicker-1.8.0.tgz#c63513931e6f09f16ae9f11b62f32d950df3958e""
+  dependencies:
+    jquery "">=1.7.1 <4.0.0""
+
+bootstrap-sass@^3.3.7:
+  version ""3.3.7""
+  resolved ""https://registry.yarnpkg.com/bootstrap-sass/-/bootstrap-sass-3.3.7.tgz#6596c7ab40f6637393323ab0bc80d064fc630498""
+
+bootstrap-select@1.12.2:
+  version ""1.12.2""
+  resolved ""https://registry.yarnpkg.com/bootstrap-select/-/bootstrap-select-1.12.2.tgz#58d095b3fd584b31443866fbe39b6fdd4e4e12a4""
+  dependencies:
+    jquery "">=1.8""
+
+bootstrap-slider@^9.9.0:
+  version ""9.10.0""
+  resolved ""https://registry.yarnpkg.com/bootstrap-slider/-/bootstrap-slider-9.10.0.tgz#1103d6bc00cfbfa8cfc9a2599ab518c55643da3f""
+
+bootstrap-switch@~3.3.4:
+  version ""3.3.4""
+  resolved ""https://registry.yarnpkg.com/bootstrap-switch/-/bootstrap-switch-3.3.4.tgz#70e0aeb2a877c0dc766991de108e2170fc29a2ff""
+
+bootstrap-touchspin@~3.1.1:
+  version ""3.1.1""
+  resolved ""https://registry.yarnpkg.com/bootstrap-touchspin/-/bootstrap-touchspin-3.1.1.tgz#9779deac72aaf577e5e762b8512c747c871d9597""
+
+bootstrap@3.3.x, bootstrap@^3.3, bootstrap@~3.3.7:
+  version ""3.3.7""
+  resolved ""https://registry.yarnpkg.com/bootstrap/-/bootstrap-3.3.7.tgz#5a389394549f23330875a3b150656574f8a9eb71""
 
 brace-expansion@^1.1.7:
   version ""1.1.8""
@@ -293,6 +557,27 @@ browserslist@^1.0.0, browserslist@^1.1.1, browserslist@^1.1.3, browserslist@^1.7
     caniuse-db ""^1.0.30000639""
     electron-to-chromium ""^1.2.7""
 
+buffer-alloc-unsafe@^1.1.0:
+  version ""1.1.0""
+  resolved ""https://registry.yarnpkg.com/buffer-alloc-unsafe/-/buffer-alloc-unsafe-1.1.0.tgz#bd7dc26ae2972d0eda253be061dba992349c19f0""
+
+buffer-alloc@^1.1.0:
+  version ""1.2.0""
+  resolved ""https://registry.yarnpkg.com/buffer-alloc/-/buffer-alloc-1.2.0.tgz#890dd90d923a873e08e10e5fd51a57e5b7cce0ec""
+  dependencies:
+    buffer-alloc-unsafe ""^1.1.0""
+    buffer-fill ""^1.0.0""
+
+buffer-fill@^1.0.0:
+  version ""1.0.0""
+  resolved ""https://registry.yarnpkg.com/buffer-fill/-/buffer-fill-1.0.0.tgz#f8f78b76789888ef39f205cd637f68e702122b2c""
+
+buffer-from@0.1.1:
+  version ""0.1.1""
+  resolved ""https://registry.yarnpkg.com/buffer-from/-/buffer-from-0.1.1.tgz#57b18b1da0a19ec06f33837a5275a242351bd75e""
+  dependencies:
+    is-array-buffer-x ""^1.0.13""
+
 builtin-modules@^1.0.0:
   version ""1.1.1""
   resolved ""https://registry.yarnpkg.com/builtin-modules/-/builtin-modules-1.1.1.tgz#270f076c5a72c02f5b65a47df94c5fe3a278892f""
@@ -305,6 +590,16 @@ bytes@2.4.0:
   version ""2.4.0""
   resolved ""https://registry.yarnpkg.com/bytes/-/bytes-2.4.0.tgz#7d97196f9d5baf7f6935e25985549edd2a6c2339""
 
+c3@~0.4.11:
+  version ""0.4.23""
+  resolved ""https://registry.yarnpkg.com/c3/-/c3-0.4.23.tgz#32ece135d0ac6d124187be5c6935903699643002""
+  dependencies:
+    d3 ""~3.5.0""
+
+cached-constructors-x@^1.0.0, cached-constructors-x@^1.0.2:
+  version ""1.0.2""
+  resolved ""https://registry.yarnpkg.com/cached-constructors-x/-/cached-constructors-x-1.0.2.tgz#d8a7b79b43fdcf13fd861bb763f38b627b0ccf91""
+
 camelcase-keys@^2.0.0:
   version ""2.1.0""
   resolved ""https://registry.yarnpkg.com/camelcase-keys/-/camelcase-keys-2.1.0.tgz#308beeaffdf28119051efa1d932213c91b8f92e7""
@@ -375,6 +670,10 @@ cheerio@0.22.0:
     lodash.reject ""^4.4.0""
     lodash.some ""^4.4.0""
 
+chownr@^1.0.1:
+  version ""1.0.1""
+  resolved ""https://registry.yarnpkg.com/chownr/-/chownr-1.0.1.tgz#e2a75042a9551908bebd25b8523d5f9769d79181""
+
 circular-json@^0.3.1:
   version ""0.3.3""
   resolved ""https://registry.yarnpkg.com/circular-json/-/circular-json-0.3.3.tgz#815c99ea84f6809529d2f45791bdf82711352d66""
@@ -394,6 +693,10 @@ cliui@^3.0.3:
     strip-ansi ""^3.0.1""
     wrap-ansi ""^2.0.0""
 
+clone-buffer@1.0.0:
+  version ""1.0.0""
+  resolved ""https://registry.yarnpkg.com/clone-buffer/-/clone-buffer-1.0.0.tgz#e3e25b207ac4e701af721e2cb5a16792cac3dc58""
+
 clone-regexp@^1.0.0:
   version ""1.0.0""
   resolved ""https://registry.yarnpkg.com/clone-regexp/-/clone-regexp-1.0.0.tgz#eae0a2413f55c0942f818c229fefce845d7f3b1c""
@@ -474,6 +777,10 @@ concat-stream@^1.4.1:
     readable-stream ""^2.2.2""
     typedarray ""^0.0.6""
 
+console-control-strings@^1.0.0, console-control-strings@~1.1.0:
+  version ""1.1.0""
+  resolved ""https://registry.yarnpkg.com/console-control-strings/-/console-control-strings-1.1.0.tgz#3d7cf4464db6446ea644bf4b39507f9851008e8e""
+
 content-type@~1.0.1:
   version ""1.0.4""
   resolved ""https://registry.yarnpkg.com/content-type/-/content-type-1.0.4.tgz#e138cc75e040c727b1966fe5e5f8c9aee256fe3b""
@@ -572,19 +879,78 @@ currently-unhandled@^0.4.1:
   dependencies:
     array-find-index ""^1.0.1""
 
+d3@~3.5.0, d3@~3.5.17:
+  version ""3.5.17""
+  resolved ""https://registry.yarnpkg.com/d3/-/d3-3.5.17.tgz#bc46748004378b21a360c9fc7cf5231790762fb8""
+
 dashdash@^1.12.0:
   version ""1.14.1""
   resolved ""https://registry.yarnpkg.com/dashdash/-/dashdash-1.14.1.tgz#853cfa0f7cbe2fed5de20326b8dd581035f6e2f0""
   dependencies:
     assert-plus ""^1.0.0""
 
+datatables.net-bs@>=1.10.9:
+  version ""1.10.16""
+  resolved ""https://registry.yarnpkg.com/datatables.net-bs/-/datatables.net-bs-1.10.16.tgz#b0854f5b374f713ae3db4156c7cea8a760c3de76""
+  dependencies:
+    datatables.net ""1.10.16""
+    jquery "">=1.7""
+
+datatables.net-buttons@~1.5.1:
+  version ""1.5.1""
+  resolved ""https://registry.yarnpkg.com/datatables.net-buttons/-/datatables.net-buttons-1.5.1.tgz#cdb35c0c8b0260cd45b0df6b39f6da815357febb""
+  dependencies:
+    datatables.net ""^1.10.15""
+    jquery "">=1.7""
+
+datatables.net-colreorder-bs@~1.3.2:
+  version ""1.3.3""
+  resolved ""https://registry.yarnpkg.com/datatables.net-colreorder-bs/-/datatables.net-colreorder-bs-1.3.3.tgz#3a9dcb08deebeb5d854079591e06e493ad793a53""
+  dependencies:
+    datatables.net-bs "">=1.10.9""
+    datatables.net-colreorder "">=1.2.0""
+    jquery "">=1.7""
+
+datatables.net-colreorder@>=1.2.0, datatables.net-colreorder@^1.4.1:
+  version ""1.4.1""
+  resolved ""https://registry.yarnpkg.com/datatables.net-colreorder/-/datatables.net-colreorder-1.4.1.tgz#389e4b1a274e203979a3718d86c5884d0a0166b6""
+  dependencies:
+    datatables.net ""^1.10.15""
+    jquery "">=1.7""
+
+datatables.net-keytable@~2.3.2:
+  version ""2.3.2""
+  resolved ""https://registry.yarnpkg.com/datatables.net-keytable/-/datatables.net-keytable-2.3.2.tgz#2b1f787492a9482f7be353e4345a34df7d0e4b81""
+  dependencies:
+    datatables.net ""^1.10.15""
+    jquery "">=1.7""
+
+datatables.net-select@~1.2.0, datatables.net-select@~1.2.5:
+  version ""1.2.5""
+  resolved ""https://registry.yarnpkg.com/datatables.net-select/-/datatables.net-select-1.2.5.tgz#4f764669b464d5576a59c576c1250a5d069aa2e9""
+  dependencies:
+    datatables.net ""^1.10.15""
+    jquery "">=1.7""
+
+datatables.net@1.10.16, datatables.net@^1.10.15, datatables.net@~1.10.16:
+  version ""1.10.16""
+  resolved ""https://registry.yarnpkg.com/datatables.net/-/datatables.net-1.10.16.tgz#4b052d1082824261b68eed9d22741b711d3d2469""
+  dependencies:
+    jquery "">=1.7""
+
 dateformat@~1.0.12:
   version ""1.0.12""
   resolved ""https://registry.yarnpkg.com/dateformat/-/dateformat-1.0.12.tgz#9f124b67594c937ff706932e4a642cca8dbbfee9""
   dependencies:
     get-stdin ""^4.0.1""
     meow ""^3.3.0""
 
+debug@3.1.0:
+  version ""3.1.0""
+  resolved ""https://registry.yarnpkg.com/debug/-/debug-3.1.0.tgz#5bb5a0672628b64149566ba16819e61518c67261""
+  dependencies:
+    ms ""2.0.0""
+
 debug@^2.2.0, debug@^2.6.0:
   version ""2.6.9""
   resolved ""https://registry.yarnpkg.com/debug/-/debug-2.6.9.tgz#5d128515df134ff327e90a4c93f4e077a536341f""
@@ -601,10 +967,32 @@ decamelize@^1.1.1, decamelize@^1.1.2:
   version ""1.2.0""
   resolved ""https://registry.yarnpkg.com/decamelize/-/decamelize-1.2.0.tgz#f6534d15148269b20352e7bee26f501f9a191290""
 
+decompress-response@^3.3.0:
+  version ""3.3.0""
+  resolved ""https://registry.yarnpkg.com/decompress-response/-/decompress-response-3.3.0.tgz#80a4dd323748384bfa248083622aedec982adff3""
+  dependencies:
+    mimic-response ""^1.0.0""
+
+deep-extend@^0.6.0:
+  version ""0.6.0""
+  resolved ""https://registry.yarnpkg.com/deep-extend/-/deep-extend-0.6.0.tgz#c4fa7c95404a17a9c3e8ca7e1537312b736330ac""
+
 deep-is@~0.1.2, deep-is@~0.1.3:
   version ""0.1.3""
   resolved ""https://registry.yarnpkg.com/deep-is/-/deep-is-0.1.3.tgz#b369d6fb5dbc13eecf524f91b070feedc357cf34""
 
+deferred-leveldown@~2.0.2:
+  version ""2.0.3""
+  resolved ""https://registry.yarnpkg.com/deferred-leveldown/-/deferred-leveldown-2.0.3.tgz#91fbc7699ac85f3920df035792d96d97cbf50c0f""
+  dependencies:
+    abstract-leveldown ""~3.0.0""
+
+deferred-leveldown@~3.0.0:
+  version ""3.0.0""
+  resolved ""https://registry.yarnpkg.com/deferred-leveldown/-/deferred-leveldown-3.0.0.tgz#bff7241bf156aa3635f520bedf34330c408d3307""
+  dependencies:
+    abstract-leveldown ""~4.0.0""
+
 del@^2.0.2:
   version ""2.2.2""
   resolved ""https://registry.yarnpkg.com/del/-/del-2.2.2.tgz#c12c981d067846c84bcaf862cff930d907ffd1a8""
@@ -621,6 +1009,10 @@ delayed-stream@~1.0.0:
   version ""1.0.0""
   resolved ""https://registry.yarnpkg.com/delayed-stream/-/delayed-stream-1.0.0.tgz#df3ae199acadfb7d440aaae0b29e2272b24ec619""
 
+delegates@^1.0.0:
+  version ""1.0.0""
+  resolved ""https://registry.yarnpkg.com/delegates/-/delegates-1.0.0.tgz#84c6e159b81904fdca59a0ef44cd870d31250f9a""
+
 depd@~1.1.0:
   version ""1.1.1""
   resolved ""https://registry.yarnpkg.com/depd/-/depd-1.1.1.tgz#5783b4e1c459f06fa5ca27f991f3d06e7a310359""
@@ -633,6 +1025,10 @@ detect-indent@^3.0.1:
     minimist ""^1.1.0""
     repeating ""^1.1.0""
 
+detect-libc@^1.0.3:
+  version ""1.0.3""
+  resolved ""https://registry.yarnpkg.com/detect-libc/-/detect-libc-1.0.3.tgz#fa137c4bd698edf55cd5cd02ac559f91a4c4ba9b""
+
 diff@^2.0.2:
   version ""2.2.3""
   resolved ""https://registry.yarnpkg.com/diff/-/diff-2.2.3.tgz#60eafd0d28ee906e4e8ff0a52c1229521033bf99""
@@ -695,6 +1091,16 @@ domutils@^1.5.1:
     dom-serializer ""0""
     domelementtype ""1""
 
+double-ended-queue@2.1.0-0:
+  version ""2.1.0-0""
+  resolved ""https://registry.yarnpkg.com/double-ended-queue/-/double-ended-queue-2.1.0-0.tgz#103d3527fd31528f40188130c841efdd78264e5c""
+
+drmonty-datatables-colvis@~1.1.2:
+  version ""1.1.2""
+  resolved ""https://registry.yarnpkg.com/drmonty-datatables-colvis/-/drmonty-datatables-colvis-1.1.2.tgz#96ab9edfb48643cc2edda3f87b88933cdee8127c""
+  dependencies:
+    jquery "">=1.7.0""
+
 duplexer2@0.0.2:
   version ""0.0.2""
   resolved ""https://registry.yarnpkg.com/duplexer2/-/duplexer2-0.0.2.tgz#c614dcf67e2fb14995a91711e5a617e8a60a31db""
@@ -719,6 +1125,27 @@ electron-to-chromium@^1.2.7:
   version ""1.3.24""
   resolved ""https://registry.yarnpkg.com/electron-to-chromium/-/electron-to-chromium-1.3.24.tgz#9b7b88bb05ceb9fa016a177833cc2dde388f21b6""
 
+encoding-down@~4.0.0:
+  version ""4.0.1""
+  resolved ""https://registry.yarnpkg.com/encoding-down/-/encoding-down-4.0.1.tgz#15a544eb13d7feeabc9e6f433633d6c966f077c9""
+  dependencies:
+    abstract-leveldown ""^4.0.0""
+    level-codec ""^8.0.0""
+    level-errors ""^1.0.4""
+    xtend ""^4.0.1""
+
+end-of-stream@^1.0.0, end-of-stream@^1.1.0:
+  version ""1.4.1""
+  resolved ""https://registry.yarnpkg.com/end-of-stream/-/end-of-stream-1.4.1.tgz#ed29634d19baba463b6ce6b80a37213eab71ec43""
+  dependencies:
+    once ""^1.4.0""
+
+end-stream@~0.1.0:
+  version ""0.1.0""
+  resolved ""https://registry.yarnpkg.com/end-stream/-/end-stream-0.1.0.tgz#32003f3f438a2b0143168137f8fa6e9866c81ed5""
+  dependencies:
+    write-stream ""~0.4.3""
+
 entities@1.0:
   version ""1.0.0""
   resolved ""https://registry.yarnpkg.com/entities/-/entities-1.0.0.tgz#b2987aa3821347fcde642b24fdfc9e4fb712bf26""
@@ -727,12 +1154,27 @@ entities@^1.1.1, entities@~1.1.1:
   version ""1.1.1""
   resolved ""https://registry.yarnpkg.com/entities/-/entities-1.1.1.tgz#6e5c2d0a5621b5dadaecef80b90edfb5cd7772f0""
 
+eonasdan-bootstrap-datetimepicker@^4.17.47:
+  version ""4.17.47""
+  resolved ""https://registry.yarnpkg.com/eonasdan-bootstrap-datetimepicker/-/eonasdan-bootstrap-datetimepicker-4.17.47.tgz#7a49970044065276e7965efd16f822735219e735""
+  dependencies:
+    bootstrap ""^3.3""
+    jquery ""^1.8.3 || ^2.0 || ^3.0""
+    moment ""^2.10""
+    moment-timezone ""^0.4.0""
+
 errno@^0.1.1:
   version ""0.1.4""
   resolved ""https://registry.yarnpkg.com/errno/-/errno-0.1.4.tgz#b896e23a9e5e8ba33871fc996abd3635fc9a1c7d""
   dependencies:
     prr ""~0.0.0""
 
+errno@~0.1.1:
+  version ""0.1.7""
+  resolved ""https://registry.yarnpkg.com/errno/-/errno-0.1.7.tgz#4684d71779ad39af177e3f007996f7c67c852618""
+  dependencies:
+    prr ""~1.0.1""
+
 error-ex@^1.2.0:
   version ""1.3.1""
   resolved ""https://registry.yarnpkg.com/error-ex/-/error-ex-1.3.1.tgz#f855a86ce61adc4e8621c3cda21e7a7612c3a8dc""
@@ -868,6 +1310,10 @@ expand-range@^1.8.1:
   dependencies:
     fill-range ""^2.1.0""
 
+expand-template@^1.0.2:
+  version ""1.1.1""
+  resolved ""https://registry.yarnpkg.com/expand-template/-/expand-template-1.1.1.tgz#981f188c0c3a87d2e28f559bc541426ff94f21dd""
+
 extend@~3.0.1:
   version ""3.0.1""
   resolved ""https://registry.yarnpkg.com/extend/-/extend-3.0.1.tgz#a755ea7bc1adfcc5a31ce7e762dbaadc5e636444""
@@ -886,6 +1332,10 @@ fast-deep-equal@^1.0.0:
   version ""1.0.0""
   resolved ""https://registry.yarnpkg.com/fast-deep-equal/-/fast-deep-equal-1.0.0.tgz#96256a3bc975595eb36d82e9929d060d893439ff""
 
+fast-future@~1.0.2:
+  version ""1.0.2""
+  resolved ""https://registry.yarnpkg.com/fast-future/-/fast-future-1.0.2.tgz#8435a9aaa02d79248d17d704e76259301d99280a""
+
 fast-levenshtein@~1.0.0:
   version ""1.0.7""
   resolved ""https://registry.yarnpkg.com/fast-levenshtein/-/fast-levenshtein-1.0.7.tgz#0178dcdee023b92905193af0959e8a7639cfdcb9""
@@ -958,6 +1408,14 @@ flatten@^1.0.2:
   version ""1.0.2""
   resolved ""https://registry.yarnpkg.com/flatten/-/flatten-1.0.2.tgz#dae46a9d78fbe25292258cc1e780a41d95c03782""
 
+font-awesome-sass@^4.7.0:
+  version ""4.7.0""
+  resolved ""https://registry.yarnpkg.com/font-awesome-sass/-/font-awesome-sass-4.7.0.tgz#4eda693e915009ce00b228e0964dc5eca9bc34e1""
+
+font-awesome@^4.7.0, font-awesome@~4.7.0:
+  version ""4.7.0""
+  resolved ""https://registry.yarnpkg.com/font-awesome/-/font-awesome-4.7.0.tgz#8fa8cf0411a1a31afd07b06d2902bb9fc815a133""
+
 for-in@^1.0.1:
   version ""1.0.2""
   resolved ""https://registry.yarnpkg.com/for-in/-/for-in-1.0.2.tgz#81068d295a8142ec0ac726c6e2200c30fb6d5e80""
@@ -980,6 +1438,10 @@ form-data@~2.3.1:
     combined-stream ""^1.0.5""
     mime-types ""^2.1.12""
 
+fs-constants@^1.0.0:
+  version ""1.0.0""
+  resolved ""https://registry.yarnpkg.com/fs-constants/-/fs-constants-1.0.0.tgz#6be0de9be998ce16af8afc24497b9ee9b7ccd9ad""
+
 fs-extra@0.26.5:
   version ""0.26.5""
   resolved ""https://registry.yarnpkg.com/fs-extra/-/fs-extra-0.26.5.tgz#53ac74667ca083fd2dc1712c813039ca32d69a7f""
@@ -1006,6 +1468,19 @@ gather-stream@^1.0.0:
   version ""1.0.0""
   resolved ""https://registry.yarnpkg.com/gather-stream/-/gather-stream-1.0.0.tgz#b33994af457a8115700d410f317733cbe7a0904b""
 
+gauge@~2.7.3:
+  version ""2.7.4""
+  resolved ""https://registry.yarnpkg.com/gauge/-/gauge-2.7.4.tgz#2c03405c7538c39d7eb37b317022e325fb018bf7""
+  dependencies:
+    aproba ""^1.0.3""
+    console-control-strings ""^1.0.0""
+    has-unicode ""^2.0.0""
+    object-assign ""^4.1.0""
+    signal-exit ""^3.0.0""
+    string-width ""^1.0.1""
+    strip-ansi ""^3.0.1""
+    wide-align ""^1.1.0""
+
 gaze@^1.0.0:
   version ""1.1.2""
   resolved ""https://registry.yarnpkg.com/gaze/-/gaze-1.1.2.tgz#847224677adb8870d679257ed3388fdb61e40105""
@@ -1030,6 +1505,10 @@ getpass@^0.1.1:
   dependencies:
     assert-plus ""^1.0.0""
 
+github-from-package@0.0.0:
+  version ""0.0.0""
+  resolved ""https://registry.yarnpkg.com/github-from-package/-/github-from-package-0.0.0.tgz#97fb5d96bfde8973313f20e8288ef9a167fa64ce""
+
 glob-base@^0.3.0:
   version ""0.3.0""
   resolved ""https://registry.yarnpkg.com/glob-base/-/glob-base-0.3.0.tgz#dbb164f6221b1c0b1ccf82aea328b497df0ea3c4""
@@ -1112,6 +1591,10 @@ globule@^1.0.0:
     lodash ""~4.17.4""
     minimatch ""~3.0.2""
 
+google-code-prettify@~1.0.5:
+  version ""1.0.5""
+  resolved ""https://registry.yarnpkg.com/google-code-prettify/-/google-code-prettify-1.0.5.tgz#9f477f224dbfa62372e5ef803a7e157410400084""
+
 graceful-fs@^4.1.2, graceful-fs@^4.1.6, graceful-fs@^4.1.9:
   version ""4.1.11""
   resolved ""https://registry.yarnpkg.com/graceful-fs/-/graceful-fs-4.1.11.tgz#0e8bdfe4d1ddb8854d64e04ea7c00e2a026e5658""
@@ -1296,6 +1779,28 @@ has-flag@^2.0.0:
   version ""2.0.0""
   resolved ""https://registry.yarnpkg.com/has-flag/-/has-flag-2.0.0.tgz#e8207af1cc7b30d446cc70b734b5e8be18f88d51""
 
+has-own-property-x@^3.1.1:
+  version ""3.2.0""
+  resolved ""https://registry.yarnpkg.com/has-own-property-x/-/has-own-property-x-3.2.0.tgz#1c4b112a577c8cb5805469556e54b6e959e4ded9""
+  dependencies:
+    cached-constructors-x ""^1.0.0""
+    to-object-x ""^1.5.0""
+    to-property-key-x ""^2.0.2""
+
+has-symbol-support-x@^1.4.1, has-symbol-support-x@^1.4.2:
+  version ""1.4.2""
+  resolved ""https://registry.yarnpkg.com/has-symbol-support-x/-/has-symbol-support-x-1.4.2.tgz#1409f98bc00247da45da67cee0a36f282ff26455""
+
+has-to-string-tag-x@^1.4.1:
+  version ""1.4.1""
+  resolved ""https://registry.yarnpkg.com/has-to-string-tag-x/-/has-to-string-tag-x-1.4.1.tgz#a045ab383d7b4b2012a00148ab0aa5f290044d4d""
+  dependencies:
+    has-symbol-support-x ""^1.4.1""
+
+has-unicode@^2.0.0:
+  version ""2.0.1""
+  resolved ""https://registry.yarnpkg.com/has-unicode/-/has-unicode-2.0.1.tgz#e0e6fe6a28cf51138855e086d1691e771de2a8b9""
+
 hawk@~6.0.2:
   version ""6.0.2""
   resolved ""https://registry.yarnpkg.com/hawk/-/hawk-6.0.2.tgz#af4d914eb065f9b5ce4d9d11c1cb2126eecc3038""
@@ -1384,6 +1889,10 @@ image-size@~0.5.0:
   version ""0.5.5""
   resolved ""https://registry.yarnpkg.com/image-size/-/image-size-0.5.5.tgz#09dfd4ab9d20e29eb1c3e80b8990378df9e3cb9c""
 
+immediate@3.0.6, immediate@~3.0.5:
+  version ""3.0.6""
+  resolved ""https://registry.yarnpkg.com/immediate/-/immediate-3.0.6.tgz#9db1dbd0faf8de6fbe0f5dd5e56bb606280de69b""
+
 imurmurhash@^0.1.4:
   version ""0.1.4""
   resolved ""https://registry.yarnpkg.com/imurmurhash/-/imurmurhash-0.1.4.tgz#9218b9b2b928a238b13dc4fb6b6d576f231453ea""
@@ -1398,17 +1907,25 @@ indexes-of@^1.0.1:
   version ""1.0.1""
   resolved ""https://registry.yarnpkg.com/indexes-of/-/indexes-of-1.0.1.tgz#f30f716c8e2bd346c7b67d3df3915566a7c05607""
 
+infinity-x@^1.0.1:
+  version ""1.0.2""
+  resolved ""https://registry.yarnpkg.com/infinity-x/-/infinity-x-1.0.2.tgz#374a4d5c8a9b98d2f61b782fc63892598de2f14c""
+
 inflight@^1.0.4:
   version ""1.0.6""
   resolved ""https://registry.yarnpkg.com/inflight/-/inflight-1.0.6.tgz#49bd6331d7d02d0c09bc910a1075ba8165b56df9""
   dependencies:
     once ""^1.3.0""
     wrappy ""1""
 
-inherits@2, inherits@^2.0.1, inherits@^2.0.3, inherits@~2.0.1, inherits@~2.0.3:
+inherits@2, inherits@2.0.3, inherits@^2.0.1, inherits@^2.0.3, inherits@~2.0.1, inherits@~2.0.3:
   version ""2.0.3""
   resolved ""https://registry.yarnpkg.com/inherits/-/inherits-2.0.3.tgz#633c2c83e3da42a502f52466022480f4208261de""
 
+ini@~1.3.0:
+  version ""1.3.5""
+  resolved ""https://registry.yarnpkg.com/ini/-/ini-1.3.5.tgz#eee25f56db1c9ec6085e0c22778083f596abf927""
+
 invariant@^2.2.0:
   version ""2.2.2""
   resolved ""https://registry.yarnpkg.com/invariant/-/invariant-2.2.2.tgz#9e1f56ac0acdb6bf303306f338be3b204ae60360""
@@ -1423,6 +1940,16 @@ irregular-plurals@^1.0.0:
   version ""1.3.0""
   resolved ""https://registry.yarnpkg.com/irregular-plurals/-/irregular-plurals-1.3.0.tgz#7af06931bdf74be33dcf585a13e06fccc16caecf""
 
+is-array-buffer-x@^1.0.13:
+  version ""1.7.0""
+  resolved ""https://registry.yarnpkg.com/is-array-buffer-x/-/is-array-buffer-x-1.7.0.tgz#4b0b10427b64aa3437767adf4fc07702c59b2371""
+  dependencies:
+    attempt-x ""^1.1.0""
+    has-to-string-tag-x ""^1.4.1""
+    is-object-like-x ""^1.5.1""
+    object-get-own-property-descriptor-x ""^3.2.0""
+    to-string-tag-x ""^1.4.1""
+
 is-arrayish@^0.2.1:
   version ""0.2.1""
   resolved ""https://registry.yarnpkg.com/is-arrayish/-/is-arrayish-0.2.1.tgz#77c99840527aa8ecb1a8ba697b80645a7a926a9d""
@@ -1437,6 +1964,10 @@ is-builtin-module@^1.0.0:
   dependencies:
     builtin-modules ""^1.0.0""
 
+is-date-object@^1.0.1:
+  version ""1.0.1""
+  resolved ""https://registry.yarnpkg.com/is-date-object/-/is-date-object-1.0.1.tgz#9aa20eb6aeebbff77fbd33e74ca01b33581d3a16""
+
 is-directory@^0.3.1:
   version ""0.3.1""
   resolved ""https://registry.yarnpkg.com/is-directory/-/is-directory-0.3.1.tgz#61339b6f2475fc772fd9c9d83f5c8575dc154ae1""
@@ -1459,6 +1990,19 @@ is-extglob@^1.0.0:
   version ""1.0.0""
   resolved ""https://registry.yarnpkg.com/is-extglob/-/is-extglob-1.0.0.tgz#ac468177c4943405a092fc8f29760c6ffc6206c0""
 
+is-falsey-x@^1.0.0, is-falsey-x@^1.0.1:
+  version ""1.0.3""
+  resolved ""https://registry.yarnpkg.com/is-falsey-x/-/is-falsey-x-1.0.3.tgz#d8bb6d77c15fb2b99d81d10a7351641495fb36e2""
+  dependencies:
+    to-boolean-x ""^1.0.2""
+
+is-finite-x@^3.0.2:
+  version ""3.0.4""
+  resolved ""https://registry.yarnpkg.com/is-finite-x/-/is-finite-x-3.0.4.tgz#320c97bab8aacc7e3cfa34aa58c432762c491b4e""
+  dependencies:
+    infinity-x ""^1.0.1""
+    is-nan-x ""^1.0.2""
+
 is-finite@^1.0.0:
   version ""1.0.2""
   resolved ""https://registry.yarnpkg.com/is-finite/-/is-finite-1.0.2.tgz#cc6677695602be550ef11e8b4aa6305342b6d0aa""
@@ -1475,12 +2019,46 @@ is-fullwidth-code-point@^2.0.0:
   version ""2.0.0""
   resolved ""https://registry.yarnpkg.com/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz#a3b30a5c4f199183167aaab93beefae3ddfb654f""
 
+is-function-x@^3.2.0, is-function-x@^3.3.0:
+  version ""3.3.0""
+  resolved ""https://registry.yarnpkg.com/is-function-x/-/is-function-x-3.3.0.tgz#7d16bc113853db206d5e40a8b32caf99bd4ff7c0""
+  dependencies:
+    attempt-x ""^1.1.1""
+    has-to-string-tag-x ""^1.4.1""
+    is-falsey-x ""^1.0.1""
+    is-primitive ""^2.0.0""
+    normalize-space-x ""^3.0.0""
+    replace-comments-x ""^2.0.0""
+    to-boolean-x ""^1.0.1""
+    to-string-tag-x ""^1.4.2""
+
 is-glob@^2.0.0, is-glob@^2.0.1:
   version ""2.0.1""
   resolved ""https://registry.yarnpkg.com/is-glob/-/is-glob-2.0.1.tgz#d096f926a3ded5600f3fdfd91198cb0888c2d863""
   dependencies:
     is-extglob ""^1.0.0""
 
+is-index-x@^1.0.0:
+  version ""1.1.0""
+  resolved ""https://registry.yarnpkg.com/is-index-x/-/is-index-x-1.1.0.tgz#43dac97b3a04f30191530833f45ac35001682ee2""
+  dependencies:
+    math-clamp-x ""^1.2.0""
+    max-safe-integer ""^1.0.1""
+    to-integer-x ""^3.0.0""
+    to-number-x ""^2.0.0""
+    to-string-symbols-supported-x ""^1.0.0""
+
+is-nan-x@^1.0.1, is-nan-x@^1.0.2:
+  version ""1.0.3""
+  resolved ""https://registry.yarnpkg.com/is-nan-x/-/is-nan-x-1.0.3.tgz#1c7fca40fc1b830a36e8800b37513a81f91fcc58""
+
+is-nil-x@^1.4.1, is-nil-x@^1.4.2:
+  version ""1.4.2""
+  resolved ""https://registry.yarnpkg.com/is-nil-x/-/is-nil-x-1.4.2.tgz#a45e798d1e490d38db4570f2457245da21493e97""
+  dependencies:
+    lodash.isnull ""^3.0.0""
+    validate.io-undefined ""^1.0.3""
+
 is-number@^2.1.0:
   version ""2.1.0""
   resolved ""https://registry.yarnpkg.com/is-number/-/is-number-2.1.0.tgz#01fcbbb393463a548f2f466cce16dece49db908f""
@@ -1493,6 +2071,13 @@ is-number@^3.0.0:
   dependencies:
     kind-of ""^3.0.2""
 
+is-object-like-x@^1.5.1:
+  version ""1.7.1""
+  resolved ""https://registry.yarnpkg.com/is-object-like-x/-/is-object-like-x-1.7.1.tgz#f440ce811fb31278e4ed0b34f2d5a277d87b4481""
+  dependencies:
+    is-function-x ""^3.3.0""
+    is-primitive ""^3.0.0""
+
 is-path-cwd@^1.0.0:
   version ""1.0.0""
   resolved ""https://registry.yarnpkg.com/is-path-cwd/-/is-path-cwd-1.0.0.tgz#d225ec23132e89edd38fda767472e62e65f1106d""
@@ -1517,14 +2102,26 @@ is-primitive@^2.0.0:
   version ""2.0.0""
   resolved ""https://registry.yarnpkg.com/is-primitive/-/is-primitive-2.0.0.tgz#207bab91638499c07b2adf240a41a87210034575""
 
+is-primitive@^3.0.0:
+  version ""3.0.1""
+  resolved ""https://registry.yarnpkg.com/is-primitive/-/is-primitive-3.0.1.tgz#98c4db1abff185485a657fc2905052b940524d05""
+
 is-regexp@^1.0.0:
   version ""1.0.0""
   resolved ""https://registry.yarnpkg.com/is-regexp/-/is-regexp-1.0.0.tgz#fd2d883545c46bac5a633e7b9a09e87fa2cb5069""
 
+is-string@^1.0.4:
+  version ""1.0.4""
+  resolved ""https://registry.yarnpkg.com/is-string/-/is-string-1.0.4.tgz#cc3a9b69857d621e963725a24caeec873b826e64""
+
 is-supported-regexp-flag@^1.0.0:
   version ""1.0.0""
   resolved ""https://registry.yarnpkg.com/is-supported-regexp-flag/-/is-supported-regexp-flag-1.0.0.tgz#8b520c85fae7a253382d4b02652e045576e13bb8""
 
+is-symbol@^1.0.1:
+  version ""1.0.1""
+  resolved ""https://registry.yarnpkg.com/is-symbol/-/is-symbol-1.0.1.tgz#3cc59f00025194b6ab2e38dbae6689256b660572""
+
 is-typedarray@~1.0.0:
   version ""1.0.0""
   resolved ""https://registry.yarnpkg.com/is-typedarray/-/is-typedarray-1.0.0.tgz#e479c80858df0c1b11ddda6940f96011fcda4a9a""
@@ -1555,10 +2152,26 @@ isstream@~0.1.2:
   version ""0.1.2""
   resolved ""https://registry.yarnpkg.com/isstream/-/isstream-0.1.2.tgz#47e63f7af55afa6f92e1500e690eb8b8529c099a""
 
+jquery-match-height@^0.7.2:
+  version ""0.7.2""
+  resolved ""https://registry.yarnpkg.com/jquery-match-height/-/jquery-match-height-0.7.2.tgz#f8d9f3ba5314daab109cf07408674be204be5f0e""
+
+""jquery@>= 2.1.x"", jquery@>=1.7, jquery@>=1.7.0, ""jquery@>=1.7.1 <4.0.0"", jquery@>=1.8, jquery@>=1.9.1, ""jquery@^1.8.3 || ^2.0 || ^3.0"", jquery@~3.3.1:
+  version ""3.3.1""
+  resolved ""https://registry.yarnpkg.com/jquery/-/jquery-3.3.1.tgz#958ce29e81c9790f31be7792df5d4d95fc57fbca""
+
+jquery@~3.2.1:
+  version ""3.2.1""
+  resolved ""https://registry.yarnpkg.com/jquery/-/jquery-3.2.1.tgz#5c4d9de652af6cd0a770154a631bba12b015c787""
+
 js-base64@^2.1.9:
   version ""2.3.2""
   resolved ""https://registry.yarnpkg.com/js-base64/-/js-base64-2.3.2.tgz#a79a923666372b580f8e27f51845c6f7e8fbfbaf""
 
+js-cookie@~2.2.0:
+  version ""2.2.0""
+  resolved ""https://registry.yarnpkg.com/js-cookie/-/js-cookie-2.2.0.tgz#1b2c279a6eece380a12168b92485265b35b1effb""
+
 js-tokens@^3.0.0, js-tokens@^3.0.2:
   version ""3.0.2""
   resolved ""https://registry.yarnpkg.com/js-tokens/-/js-tokens-3.0.2.tgz#9866df395102130e38f7f996bceb65443209c25b""
@@ -1651,6 +2264,12 @@ jsprim@^1.2.2:
     json-schema ""0.2.3""
     verror ""1.10.0""
 
+jstree@~3.3.5:
+  version ""3.3.5""
+  resolved ""https://registry.yarnpkg.com/jstree/-/jstree-3.3.5.tgz#9c578db32d0a643775cddd8020ad5992f4119c13""
+  dependencies:
+    jquery "">=1.9.1""
+
 kind-of@^3.0.2:
   version ""3.2.2""
   resolved ""https://registry.yarnpkg.com/kind-of/-/kind-of-3.2.2.tgz#31ea21a734bab9bbb0f32466d893aea51e4a3c64""
@@ -1699,6 +2318,76 @@ less@~2.7.1:
     request ""^2.72.0""
     source-map ""^0.5.3""
 
+level-codec@7.0.1:
+  version ""7.0.1""
+  resolved ""https://registry.yarnpkg.com/level-codec/-/level-codec-7.0.1.tgz#341f22f907ce0f16763f24bddd681e395a0fb8a7""
+
+level-codec@^8.0.0:
+  version ""8.0.0""
+  resolved ""https://registry.yarnpkg.com/level-codec/-/level-codec-8.0.0.tgz#3a4a0de06dae20c2f5a57b3372c7651e67083e03""
+
+level-errors@^1.0.4, level-errors@~1.1.0:
+  version ""1.1.2""
+  resolved ""https://registry.yarnpkg.com/level-errors/-/level-errors-1.1.2.tgz#4399c2f3d3ab87d0625f7e3676e2d807deff404d""
+  dependencies:
+    errno ""~0.1.1""
+
+level-iterator-stream@~2.0.0:
+  version ""2.0.1""
+  resolved ""https://registry.yarnpkg.com/level-iterator-stream/-/level-iterator-stream-2.0.1.tgz#3ef8309d238578cd8730b2a15b764f26862d9e63""
+  dependencies:
+    inherits ""^2.0.1""
+    readable-stream ""^2.0.5""
+    xtend ""^4.0.0""
+
+level-packager@^2.0.2:
+  version ""2.1.1""
+  resolved ""https://registry.yarnpkg.com/level-packager/-/level-packager-2.1.1.tgz#10b653decb67b0a09c4e961ae84f196edaad205a""
+  dependencies:
+    encoding-down ""~4.0.0""
+    levelup ""^2.0.0""
+
+level-write-stream@1.0.0:
+  version ""1.0.0""
+  resolved ""https://registry.yarnpkg.com/level-write-stream/-/level-write-stream-1.0.0.tgz#3f7fbb679a55137c0feb303dee766e12ee13c1dc""
+  dependencies:
+    end-stream ""~0.1.0""
+
+level@2.1.1:
+  version ""2.1.1""
+  resolved ""https://registry.yarnpkg.com/level/-/level-2.1.1.tgz#6c9d459dc6a417ef1f53c58e3cb23180b0734926""
+  dependencies:
+    level-packager ""^2.0.2""
+    leveldown ""^2.1.1""
+
+leveldown@2.1.1, leveldown@^2.1.1:
+  version ""2.1.1""
+  resolved ""https://registry.yarnpkg.com/leveldown/-/leveldown-2.1.1.tgz#2f4d786dfe6ba3ecc63409784ce29eca110413bf""
+  dependencies:
+    abstract-leveldown ""~3.0.0""
+    bindings ""~1.3.0""
+    fast-future ""~1.0.2""
+    nan ""~2.8.0""
+    prebuild-install ""^2.1.0""
+
+levelup@2.0.1:
+  version ""2.0.1""
+  resolved ""https://registry.yarnpkg.com/levelup/-/levelup-2.0.1.tgz#3dc91b3e632d37c9e546239c864118b004c9f860""
+  dependencies:
+    deferred-leveldown ""~2.0.2""
+    level-errors ""~1.1.0""
+    level-iterator-stream ""~2.0.0""
+    xtend ""~4.0.0""
+
+levelup@^2.0.0:
+  version ""2.0.2""
+  resolved ""https://registry.yarnpkg.com/levelup/-/levelup-2.0.2.tgz#83dd22ffd5ee14482143c37cddfb8457854d3727""
+  dependencies:
+    deferred-leveldown ""~3.0.0""
+    level-errors ""~1.1.0""
+    level-iterator-stream ""~2.0.0""
+    xtend ""~4.0.0""
+
 levn@~0.2.5:
   version ""0.2.5""
   resolved ""https://registry.yarnpkg.com/levn/-/levn-0.2.5.tgz#ba8d339d0ca4a610e3a3f145b9caf48807155054""
@@ -1713,6 +2402,12 @@ levn@~0.3.0:
     prelude-ls ""~1.1.2""
     type-check ""~0.3.2""
 
+lie@3.1.1:
+  version ""3.1.1""
+  resolved ""https://registry.yarnpkg.com/lie/-/lie-3.1.1.tgz#9a436b2cc7746ca59de7a41fa469b3efb76bd87e""
+  dependencies:
+    immediate ""~3.0.5""
+
 livereload-js@^2.2.0:
   version ""2.2.2""
   resolved ""https://registry.yarnpkg.com/livereload-js/-/livereload-js-2.2.2.tgz#6c87257e648ab475bc24ea257457edcc1f8d0bc2""
@@ -1751,6 +2446,10 @@ lodash.foreach@^4.3.0:
   version ""4.5.0""
   resolved ""https://registry.yarnpkg.com/lodash.foreach/-/lodash.foreach-4.5.0.tgz#1a6a35eace401280c7f06dddec35165ab27e3e53""
 
+lodash.isnull@^3.0.0:
+  version ""3.0.0""
+  resolved ""https://registry.yarnpkg.com/lodash.isnull/-/lodash.isnull-3.0.0.tgz#fafbe59ea1dca27eed786534039dd84c2e07c56e""
+
 lodash.map@^4.4.0:
   version ""4.6.0""
   resolved ""https://registry.yarnpkg.com/lodash.map/-/lodash.map-4.6.0.tgz#771ec7839e3473d9c4cde28b19394c3562f4f6d3""
@@ -1806,6 +2505,10 @@ loud-rejection@^1.0.0:
     currently-unhandled ""^0.4.1""
     signal-exit ""^3.0.0""
 
+ltgt@2.2.0:
+  version ""2.2.0""
+  resolved ""https://registry.yarnpkg.com/ltgt/-/ltgt-2.2.0.tgz#b65ba5fcb349a29924c8e333f7c6a5562f2e4842""
+
 map-obj@^1.0.0, map-obj@^1.0.1:
   version ""1.0.1""
   resolved ""https://registry.yarnpkg.com/map-obj/-/map-obj-1.0.1.tgz#d933ceb9205d82bdcf4886f6742bdc2b4dea146d""
@@ -1827,14 +2530,31 @@ matchdep@~1.0.1:
     resolve ""~1.1.6""
     stack-trace ""0.0.9""
 
+math-clamp-x@^1.2.0:
+  version ""1.2.0""
+  resolved ""https://registry.yarnpkg.com/math-clamp-x/-/math-clamp-x-1.2.0.tgz#8b537be0645bbba7ee73ee16091e7d6018c5edcf""
+  dependencies:
+    to-number-x ""^2.0.0""
+
 math-expression-evaluator@^1.2.14:
   version ""1.2.17""
   resolved ""https://registry.yarnpkg.com/math-expression-evaluator/-/math-expression-evaluator-1.2.17.tgz#de819fdbcd84dccd8fae59c6aeb79615b9d266ac""
 
+math-sign-x@^3.0.0:
+  version ""3.0.0""
+  resolved ""https://registry.yarnpkg.com/math-sign-x/-/math-sign-x-3.0.0.tgz#d5286022b48e150c384729a86042e0835264c3ed""
+  dependencies:
+    is-nan-x ""^1.0.1""
+    to-number-x ""^2.0.0""
+
 mathml-tag-names@^2.0.0:
   version ""2.0.1""
   resolved ""https://registry.yarnpkg.com/mathml-tag-names/-/mathml-tag-names-2.0.1.tgz#8d41268168bf86d1102b98109e28e531e7a34578""
 
+max-safe-integer@^1.0.1:
+  version ""1.0.1""
+  resolved ""https://registry.yarnpkg.com/max-safe-integer/-/max-safe-integer-1.0.1.tgz#f38060be2c563d8c02e6d48af39122fd83b6f410""
+
 maxmin@^1.1.0:
   version ""1.1.0""
   resolved ""https://registry.yarnpkg.com/maxmin/-/maxmin-1.1.0.tgz#71365e84a99dd8f8b3f7d5fde2f00d1e7f73be61""
@@ -1895,6 +2615,10 @@ mime@^1.2.11:
   version ""1.4.1""
   resolved ""https://registry.yarnpkg.com/mime/-/mime-1.4.1.tgz#121f9ebc49e3766f311a76e1fa1c8003c4b03aa6""
 
+mimic-response@^1.0.0:
+  version ""1.0.0""
+  resolved ""https://registry.yarnpkg.com/mimic-response/-/mimic-response-1.0.0.tgz#df3d3652a73fded6b9b0b24146e6fd052353458e""
+
 ""minimatch@2 || 3"", minimatch@^3.0.0, minimatch@^3.0.2, minimatch@^3.0.4, minimatch@~3.0.0, minimatch@~3.0.2:
   version ""3.0.4""
   resolved ""https://registry.yarnpkg.com/minimatch/-/minimatch-3.0.4.tgz#5166e286457f03306064be5497e8dbb0c3d32083""
@@ -1919,6 +2643,16 @@ mkdirp@^0.5.0, mkdirp@^0.5.1:
   dependencies:
     minimist ""0.0.8""
 
+moment-timezone@^0.4.0, moment-timezone@^0.4.1:
+  version ""0.4.1""
+  resolved ""https://registry.yarnpkg.com/moment-timezone/-/moment-timezone-0.4.1.tgz#81f598c3ad5e22cdad796b67ecd8d88d0f5baa06""
+  dependencies:
+    moment "">= 2.6.0""
+
+""moment@>= 2.6.0"", moment@^2.10, moment@^2.19.1:
+  version ""2.22.2""
+  resolved ""https://registry.yarnpkg.com/moment/-/moment-2.22.2.tgz#3c257f9839fc0e93ff53149632239eb90783ff66""
+
 ms@0.7.1:
   version ""0.7.1""
   resolved ""https://registry.yarnpkg.com/ms/-/ms-0.7.1.tgz#9cd13c03adbff25b65effde7ce864ee952017098""
@@ -1936,6 +2670,24 @@ multimatch@^2.0.0:
     arrify ""^1.0.0""
     minimatch ""^3.0.0""
 
+nan-x@^1.0.0:
+  version ""1.0.2""
+  resolved ""https://registry.yarnpkg.com/nan-x/-/nan-x-1.0.2.tgz#5f34e9d3115242486219eee3c8bc49fd2425b19a""
+
+nan@~2.8.0:
+  version ""2.8.0""
+  resolved ""https://registry.yarnpkg.com/nan/-/nan-2.8.0.tgz#ed715f3fe9de02b57a5e6252d90a96675e1f085a""
+
+node-abi@^2.2.0:
+  version ""2.4.1""
+  resolved ""https://registry.yarnpkg.com/node-abi/-/node-abi-2.4.1.tgz#7628c4d4ec4e9cd3764ceb3652f36b2e7f8d4923""
+  dependencies:
+    semver ""^5.4.1""
+
+noop-logger@^0.1.1:
+  version ""0.1.1""
+  resolved ""https://registry.yarnpkg.com/noop-logger/-/noop-logger-0.1.1.tgz#94a2b1633c4f1317553007d8966fd0e841b6a4c2""
+
 nopt@~3.0.6:
   version ""3.0.6""
   resolved ""https://registry.yarnpkg.com/nopt/-/nopt-3.0.6.tgz#c6465dbf08abcd4db359317f79ac68a646b28ff9""
@@ -1965,6 +2717,23 @@ normalize-selector@^0.2.0:
   version ""0.2.0""
   resolved ""https://registry.yarnpkg.com/normalize-selector/-/normalize-selector-0.2.0.tgz#d0b145eb691189c63a78d201dc4fdb1293ef0c03""
 
+normalize-space-x@^3.0.0:
+  version ""3.0.0""
+  resolved ""https://registry.yarnpkg.com/normalize-space-x/-/normalize-space-x-3.0.0.tgz#17907d6c7c724a4f9567471cbb319553bc0f8882""
+  dependencies:
+    cached-constructors-x ""^1.0.0""
+    trim-x ""^3.0.0""
+    white-space-x ""^3.0.0""
+
+npmlog@^4.0.1:
+  version ""4.1.2""
+  resolved ""https://registry.yarnpkg.com/npmlog/-/npmlog-4.1.2.tgz#08a7f2a8bf734604779a9efa4ad5cc717abb954b""
+  dependencies:
+    are-we-there-yet ""~1.1.2""
+    console-control-strings ""~1.1.0""
+    gauge ""~2.7.3""
+    set-blocking ""~2.0.0""
+
 nth-check@~1.0.1:
   version ""1.0.1""
   resolved ""https://registry.yarnpkg.com/nth-check/-/nth-check-1.0.1.tgz#9929acdf628fc2c41098deab82ac580cf149aae4""
@@ -1991,6 +2760,21 @@ object-assign@^4.0.1, object-assign@^4.1.0:
   version ""4.1.1""
   resolved ""https://registry.yarnpkg.com/object-assign/-/object-assign-4.1.1.tgz#2109adc7965887cfc05cbbd442cac8bfbb360863""
 
+object-get-own-property-descriptor-x@^3.2.0:
+  version ""3.2.0""
+  resolved ""https://registry.yarnpkg.com/object-get-own-property-descriptor-x/-/object-get-own-property-descriptor-x-3.2.0.tgz#464585ad03e66108ed166c99325b8d2c5ba93712""
+  dependencies:
+    attempt-x ""^1.1.0""
+    has-own-property-x ""^3.1.1""
+    has-symbol-support-x ""^1.4.1""
+    is-falsey-x ""^1.0.0""
+    is-index-x ""^1.0.0""
+    is-primitive ""^2.0.0""
+    is-string ""^1.0.4""
+    property-is-enumerable-x ""^1.1.0""
+    to-object-x ""^1.4.1""
+    to-property-key-x ""^2.0.1""
+
 object.omit@^2.0.0:
   version ""2.0.1""
   resolved ""https://registry.yarnpkg.com/object.omit/-/object.omit-2.0.1.tgz#1a9c744829f39dbb858c76ca3579ae2a54ebd1fa""
@@ -2004,7 +2788,7 @@ on-finished@~2.3.0:
   dependencies:
     ee-first ""1.1.1""
 
-once@^1.3.0:
+once@^1.3.0, once@^1.3.1, once@^1.4.0:
   version ""1.4.0""
   resolved ""https://registry.yarnpkg.com/once/-/once-1.4.0.tgz#583b1aa775961d4b113ac17d9c50baef9dd76bd1""
   dependencies:
@@ -2059,6 +2843,15 @@ parse-glob@^3.0.4:
     is-extglob ""^1.0.0""
     is-glob ""^2.0.0""
 
+parse-int-x@^2.0.0:
+  version ""2.0.0""
+  resolved ""https://registry.yarnpkg.com/parse-int-x/-/parse-int-x-2.0.0.tgz#9f979d4115930df2f4706a41810b9c712405552f""
+  dependencies:
+    cached-constructors-x ""^1.0.0""
+    nan-x ""^1.0.0""
+    to-string-x ""^1.4.2""
+    trim-left-x ""^3.0.0""
+
 parse-json@^2.2.0:
   version ""2.2.0""
   resolved ""https://registry.yarnpkg.com/parse-json/-/parse-json-2.2.0.tgz#f480f40434ef80741f8469099f8dea18f55a4dc9""
@@ -2095,6 +2888,48 @@ path-type@^1.0.0:
     pify ""^2.0.0""
     pinkie-promise ""^2.0.0""
 
+patternfly-bootstrap-combobox@~1.1.7:
+  version ""1.1.7""
+  resolved ""https://registry.yarnpkg.com/patternfly-bootstrap-combobox/-/patternfly-bootstrap-combobox-1.1.7.tgz#6a5e3ccd1170c21b3c4b4aa168a7413e1ddbb6e1""
+
+patternfly-bootstrap-treeview@~2.1.0:
+  version ""2.1.5""
+  resolved ""https://registry.yarnpkg.com/patternfly-bootstrap-treeview/-/patternfly-bootstrap-treeview-2.1.5.tgz#4c29f2582fb8a2f28f0a928f2f0d324d21d6990d""
+  dependencies:
+    bootstrap ""3.3.x""
+    jquery "">= 2.1.x""
+
+patternfly@~3.49.0:
+  version ""3.49.0""
+  resolved ""https://registry.yarnpkg.com/patternfly/-/patternfly-3.49.0.tgz#1c019601cfe11d02ec4d38fe23a465d51b97cd95""
+  dependencies:
+    bootstrap ""~3.3.7""
+    font-awesome ""^4.7.0""
+    jquery ""~3.2.1""
+  optionalDependencies:
+    ""@types/c3"" ""^0.6.0""
+    bootstrap-datepicker ""^1.7.1""
+    bootstrap-sass ""^3.3.7""
+    bootstrap-select ""1.12.2""
+    bootstrap-slider ""^9.9.0""
+    bootstrap-switch ""~3.3.4""
+    bootstrap-touchspin ""~3.1.1""
+    c3 ""~0.4.11""
+    d3 ""~3.5.17""
+    datatables.net ""^1.10.15""
+    datatables.net-colreorder ""^1.4.1""
+    datatables.net-colreorder-bs ""~1.3.2""
+    datatables.net-select ""~1.2.0""
+    drmonty-datatables-colvis ""~1.1.2""
+    eonasdan-bootstrap-datetimepicker ""^4.17.47""
+    font-awesome-sass ""^4.7.0""
+    google-code-prettify ""~1.0.5""
+    jquery-match-height ""^0.7.2""
+    moment ""^2.19.1""
+    moment-timezone ""^0.4.1""
+    patternfly-bootstrap-combobox ""~1.1.7""
+    patternfly-bootstrap-treeview ""~2.1.0""
+
 performance-now@^2.1.0:
   version ""2.1.0""
   resolved ""https://registry.yarnpkg.com/performance-now/-/performance-now-2.1.0.tgz#6309f4e0e5fa913ec1c69307ae364b4b377c9e7b""
@@ -2193,6 +3028,51 @@ postcss@^5.0.0, postcss@^5.0.18, postcss@^5.0.20, postcss@^5.0.21, postcss@^5.0.
     source-map ""^0.5.6""
     supports-color ""^3.2.3""
 
+pouchdb@~6.4.3:
+  version ""6.4.3""
+  resolved ""https://registry.yarnpkg.com/pouchdb/-/pouchdb-6.4.3.tgz#077e812a054ac44e13622a64e0c802325d1d44ad""
+  dependencies:
+    argsarray ""0.0.1""
+    buffer-from ""0.1.1""
+    clone-buffer ""1.0.0""
+    debug ""3.1.0""
+    double-ended-queue ""2.1.0-0""
+    immediate ""3.0.6""
+    inherits ""2.0.3""
+    level ""2.1.1""
+    level-codec ""7.0.1""
+    level-write-stream ""1.0.0""
+    leveldown ""2.1.1""
+    levelup ""2.0.1""
+    lie ""3.1.1""
+    ltgt ""2.2.0""
+    readable-stream ""1.0.33""
+    request ""2.83.0""
+    spark-md5 ""3.0.0""
+    through2 ""2.0.3""
+    uuid ""3.2.1""
+    vuvuzela ""1.0.3""
+
+prebuild-install@^2.1.0:
+  version ""2.5.3""
+  resolved ""https://registry.yarnpkg.com/prebuild-install/-/prebuild-install-2.5.3.tgz#9f65f242782d370296353710e9bc843490c19f69""
+  dependencies:
+    detect-libc ""^1.0.3""
+    expand-template ""^1.0.2""
+    github-from-package ""0.0.0""
+    minimist ""^1.2.0""
+    mkdirp ""^0.5.1""
+    node-abi ""^2.2.0""
+    noop-logger ""^0.1.1""
+    npmlog ""^4.0.1""
+    os-homedir ""^1.0.1""
+    pump ""^2.0.1""
+    rc ""^1.1.6""
+    simple-get ""^2.7.0""
+    tar-fs ""^1.13.0""
+    tunnel-agent ""^0.6.0""
+    which-pm-runs ""^1.0.0""
+
 prelude-ls@~1.1.0, prelude-ls@~1.1.1, prelude-ls@~1.1.2:
   version ""1.1.2""
   resolved ""https://registry.yarnpkg.com/prelude-ls/-/prelude-ls-1.1.2.tgz#21932a549f5e52ffd9a827f570e04be62a97da54""
@@ -2212,16 +3092,45 @@ process-nextick-args@~1.0.6:
   version ""1.0.7""
   resolved ""https://registry.yarnpkg.com/process-nextick-args/-/process-nextick-args-1.0.7.tgz#150e20b756590ad3f91093f25a4f2ad8bff30ba3""
 
+process-nextick-args@~2.0.0:
+  version ""2.0.0""
+  resolved ""https://registry.yarnpkg.com/process-nextick-args/-/process-nextick-args-2.0.0.tgz#a37d732f4271b4ab1ad070d35508e8290788ffaa""
+
 promise@^7.1.1:
   version ""7.3.1""
   resolved ""https://registry.yarnpkg.com/promise/-/promise-7.3.1.tgz#064b72602b18f90f29192b8b1bc418ffd1ebd3bf""
   dependencies:
     asap ""~2.0.3""
 
+property-is-enumerable-x@^1.1.0:
+  version ""1.1.0""
+  resolved ""https://registry.yarnpkg.com/property-is-enumerable-x/-/property-is-enumerable-x-1.1.0.tgz#7ca48917476cd0914b37809bfd05776a0d942f6f""
+  dependencies:
+    to-object-x ""^1.4.1""
+    to-property-key-x ""^2.0.1""
+
 prr@~0.0.0:
   version ""0.0.0""
   resolved ""https://registry.yarnpkg.com/prr/-/prr-0.0.0.tgz#1a84b85908325501411853d0081ee3fa86e2926a""
 
+prr@~1.0.1:
+  version ""1.0.1""
+  resolved ""https://registry.yarnpkg.com/prr/-/prr-1.0.1.tgz#d3fc114ba06995a45ec6893f484ceb1d78f5f476""
+
+pump@^1.0.0:
+  version ""1.0.3""
+  resolved ""https://registry.yarnpkg.com/pump/-/pump-1.0.3.tgz#5dfe8311c33bbf6fc18261f9f34702c47c08a954""
+  dependencies:
+    end-of-stream ""^1.1.0""
+    once ""^1.3.1""
+
+pump@^2.0.1:
+  version ""2.0.1""
+  resolved ""https://registry.yarnpkg.com/pump/-/pump-2.0.1.tgz#12399add6e4cf7526d973cbc8b5ce2e2908b3909""
+  dependencies:
+    end-of-stream ""^1.1.0""
+    once ""^1.3.1""
+
 punycode@^1.4.1:
   version ""1.4.1""
   resolved ""https://registry.yarnpkg.com/punycode/-/punycode-1.4.1.tgz#c0d5a63b2718800ad8e1eb0fa5269c84dd41845e""
@@ -2253,6 +3162,15 @@ raw-body@~2.1.5:
     iconv-lite ""0.4.13""
     unpipe ""1.0.0""
 
+rc@^1.1.6:
+  version ""1.2.8""
+  resolved ""https://registry.yarnpkg.com/rc/-/rc-1.2.8.tgz#cd924bf5200a075b83c188cd6b9e211b7fc0d3ed""
+  dependencies:
+    deep-extend ""^0.6.0""
+    ini ""~1.3.0""
+    minimist ""^1.2.0""
+    strip-json-comments ""~2.0.1""
+
 read-file-stdin@^0.2.1:
   version ""0.2.1""
   resolved ""https://registry.yarnpkg.com/read-file-stdin/-/read-file-stdin-0.2.1.tgz#25eccff3a153b6809afacb23ee15387db9e0ee61""
@@ -2274,6 +3192,15 @@ read-pkg@^1.0.0:
     normalize-package-data ""^2.3.2""
     path-type ""^1.0.0""
 
+readable-stream@1.0.33:
+  version ""1.0.33""
+  resolved ""https://registry.yarnpkg.com/readable-stream/-/readable-stream-1.0.33.tgz#3a360dd66c1b1d7fd4705389860eda1d0f61126c""
+  dependencies:
+    core-util-is ""~1.0.0""
+    inherits ""~2.0.1""
+    isarray ""0.0.1""
+    string_decoder ""~0.10.x""
+
 readable-stream@1.1:
   version ""1.1.13""
   resolved ""https://registry.yarnpkg.com/readable-stream/-/readable-stream-1.1.13.tgz#f6eef764f514c89e2b9e23146a75ba106756d23e""
@@ -2313,6 +3240,22 @@ readable-stream@^2.0.2, readable-stream@^2.2.2:
     string_decoder ""~1.0.3""
     util-deprecate ""~1.0.1""
 
+readable-stream@^2.0.5, readable-stream@^2.0.6, readable-stream@^2.1.5, readable-stream@^2.3.0, readable-stream@^2.3.5:
+  version ""2.3.6""
+  resolved ""https://registry.yarnpkg.com/readable-stream/-/readable-stream-2.3.6.tgz#b11c27d88b8ff1fbe070643cf94b0c79ae1b0aaf""
+  dependencies:
+    core-util-is ""~1.0.0""
+    inherits ""~2.0.3""
+    isarray ""~1.0.0""
+    process-nextick-args ""~2.0.0""
+    safe-buffer ""~5.1.1""
+    string_decoder ""~1.1.1""
+    util-deprecate ""~1.0.1""
+
+readable-stream@~0.0.2:
+  version ""0.0.4""
+  resolved ""https://registry.yarnpkg.com/readable-stream/-/readable-stream-0.0.4.tgz#f32d76e3fb863344a548d79923007173665b3b8d""
+
 redent@^1.0.0:
   version ""1.0.0""
   resolved ""https://registry.yarnpkg.com/redent/-/redent-1.0.0.tgz#cf916ab1fd5f1f16dfb20822dd6ec7f730c2afde""
@@ -2368,7 +3311,14 @@ repeating@^2.0.0:
   dependencies:
     is-finite ""^1.0.0""
 
-request@^2.55.0, request@^2.72.0:
+replace-comments-x@^2.0.0:
+  version ""2.0.0""
+  resolved ""https://registry.yarnpkg.com/replace-comments-x/-/replace-comments-x-2.0.0.tgz#a5cec18efd912aad78a7c3c4b69d01768556d140""
+  dependencies:
+    require-coercible-to-string-x ""^1.0.0""
+    to-string-x ""^1.4.2""
+
+request@2.83.0, request@^2.55.0, request@^2.72.0:
   version ""2.83.0""
   resolved ""https://registry.yarnpkg.com/request/-/request-2.83.0.tgz#ca0b65da02ed62935887808e6f510381034e3356""
   dependencies:
@@ -2395,10 +3345,23 @@ request@^2.55.0, request@^2.72.0:
     tunnel-agent ""^0.6.0""
     uuid ""^3.1.0""
 
+require-coercible-to-string-x@^1.0.0:
+  version ""1.0.2""
+  resolved ""https://registry.yarnpkg.com/require-coercible-to-string-x/-/require-coercible-to-string-x-1.0.2.tgz#b8c96ab42962ab7b28f3311fc6b198124c56f9f6""
+  dependencies:
+    require-object-coercible-x ""^1.4.3""
+    to-string-x ""^1.4.5""
+
 require-from-string@^1.1.0:
   version ""1.2.1""
   resolved ""https://registry.yarnpkg.com/require-from-string/-/require-from-string-1.2.1.tgz#529c9ccef27380adfec9a2f965b649bbee636418""
 
+require-object-coercible-x@^1.4.1, require-object-coercible-x@^1.4.3:
+  version ""1.4.3""
+  resolved ""https://registry.yarnpkg.com/require-object-coercible-x/-/require-object-coercible-x-1.4.3.tgz#783719a23a5c0ce24e845fcc50cd55b6421ea4bb""
+  dependencies:
+    is-nil-x ""^1.4.2""
+
 resolve-from@^3.0.0:
   version ""3.0.0""
   resolved ""https://registry.yarnpkg.com/resolve-from/-/resolve-from-3.0.0.tgz#b22c7af7d9d6881bc8b6e653335eebcb0a188748""
@@ -2433,10 +3396,30 @@ sax@^1.1.4:
   version ""5.4.1""
   resolved ""https://registry.yarnpkg.com/semver/-/semver-5.4.1.tgz#e059c09d8571f0540823733433505d3a2f00b18e""
 
+semver@^5.4.1:
+  version ""5.5.0""
+  resolved ""https://registry.yarnpkg.com/semver/-/semver-5.5.0.tgz#dc4bbc7a6ca9d916dee5d43516f0092b58f7b8ab""
+
+set-blocking@~2.0.0:
+  version ""2.0.0""
+  resolved ""https://registry.yarnpkg.com/set-blocking/-/set-blocking-2.0.0.tgz#045f9782d011ae9a6803ddd382b24392b3d890f7""
+
 signal-exit@^3.0.0:
   version ""3.0.2""
   resolved ""https://registry.yarnpkg.com/signal-exit/-/signal-exit-3.0.2.tgz#b5fdc08f1287ea1178628e415e25132b73646c6d""
 
+simple-concat@^1.0.0:
+  version ""1.0.0""
+  resolved ""https://registry.yarnpkg.com/simple-concat/-/simple-concat-1.0.0.tgz#7344cbb8b6e26fb27d66b2fc86f9f6d5997521c6""
+
+simple-get@^2.7.0:
+  version ""2.8.1""
+  resolved ""https://registry.yarnpkg.com/simple-get/-/simple-get-2.8.1.tgz#0e22e91d4575d87620620bc91308d57a77f44b5d""
+  dependencies:
+    decompress-response ""^3.3.0""
+    once ""^1.3.1""
+    simple-concat ""^1.0.0""
+
 slice-ansi@1.0.0:
   version ""1.0.0""
   resolved ""https://registry.yarnpkg.com/slice-ansi/-/slice-ansi-1.0.0.tgz#044f1a49d8842ff307aad6b505ed178bd950134d""
@@ -2484,6 +3467,10 @@ source-map@~0.2.0:
   dependencies:
     amdefine "">=0.0.4""
 
+spark-md5@3.0.0:
+  version ""3.0.0""
+  resolved ""https://registry.yarnpkg.com/spark-md5/-/spark-md5-3.0.0.tgz#3722227c54e2faf24b1dc6d933cc144e6f71bfef""
+
 spdx-correct@~1.0.0:
   version ""1.0.2""
   resolved ""https://registry.yarnpkg.com/spdx-correct/-/spdx-correct-1.0.2.tgz#4b3073d933ff51f3912f03ac5519498a4150db40""
@@ -2549,7 +3536,7 @@ string-width@^1.0.1:
     is-fullwidth-code-point ""^1.0.0""
     strip-ansi ""^3.0.0""
 
-string-width@^2.0.0, string-width@^2.1.1:
+""string-width@^1.0.2 || 2"", string-width@^2.0.0, string-width@^2.1.1:
   version ""2.1.1""
   resolved ""https://registry.yarnpkg.com/string-width/-/string-width-2.1.1.tgz#ab93f27a8dc13d28cac815c462143a6d9012ae9e""
   dependencies:
@@ -2566,6 +3553,12 @@ string_decoder@~1.0.3:
   dependencies:
     safe-buffer ""~5.1.0""
 
+string_decoder@~1.1.1:
+  version ""1.1.1""
+  resolved ""https://registry.yarnpkg.com/string_decoder/-/string_decoder-1.1.1.tgz#9cf1611ba62685d7030ae9e4ba34149c3af03fc8""
+  dependencies:
+    safe-buffer ""~5.1.0""
+
 stringstream@~0.0.5:
   version ""0.0.5""
   resolved ""https://registry.yarnpkg.com/stringstream/-/stringstream-0.0.5.tgz#4e484cd4de5a0bbbee18e46307710a8a81621878""
@@ -2594,6 +3587,10 @@ strip-indent@^1.0.1:
   dependencies:
     get-stdin ""^4.0.1""
 
+strip-json-comments@~2.0.1:
+  version ""2.0.1""
+  resolved ""https://registry.yarnpkg.com/strip-json-comments/-/strip-json-comments-2.0.1.tgz#3c531942e908c2697c0ec344858c286c7ca0a60a""
+
 style-search@^0.1.0:
   version ""0.1.0""
   resolved ""https://registry.yarnpkg.com/style-search/-/style-search-0.1.0.tgz#7958c793e47e32e07d2b5cafe5c0bf8e12e77902""
@@ -2709,10 +3706,38 @@ taffydb@2.7.2:
   version ""2.7.2""
   resolved ""https://registry.yarnpkg.com/taffydb/-/taffydb-2.7.2.tgz#7bf8106a5c1a48251b3e3bc0a0e1732489fd0dc8""
 
+tar-fs@^1.13.0:
+  version ""1.16.2""
+  resolved ""https://registry.yarnpkg.com/tar-fs/-/tar-fs-1.16.2.tgz#17e5239747e399f7e77344f5f53365f04af53577""
+  dependencies:
+    chownr ""^1.0.1""
+    mkdirp ""^0.5.1""
+    pump ""^1.0.0""
+    tar-stream ""^1.1.2""
+
+tar-stream@^1.1.2:
+  version ""1.6.1""
+  resolved ""https://registry.yarnpkg.com/tar-stream/-/tar-stream-1.6.1.tgz#f84ef1696269d6223ca48f6e1eeede3f7e81f395""
+  dependencies:
+    bl ""^1.0.0""
+    buffer-alloc ""^1.1.0""
+    end-of-stream ""^1.0.0""
+    fs-constants ""^1.0.0""
+    readable-stream ""^2.3.0""
+    to-buffer ""^1.1.0""
+    xtend ""^4.0.0""
+
 text-table@^0.2.0:
   version ""0.2.0""
   resolved ""https://registry.yarnpkg.com/text-table/-/text-table-0.2.0.tgz#7f5ee823ae805207c00af2df4a84ec3fcfa570b4""
 
+through2@2.0.3:
+  version ""2.0.3""
+  resolved ""https://registry.yarnpkg.com/through2/-/through2-2.0.3.tgz#0004569b37c7c74ba39c43f3ced78d1ad94140be""
+  dependencies:
+    readable-stream ""^2.1.5""
+    xtend ""~4.0.1""
+
 through2@^0.6.1, through2@^0.6.3, through2@~0.6.1:
   version ""0.6.5""
   resolved ""https://registry.yarnpkg.com/through2/-/through2-0.6.5.tgz#41ab9c67b29d57209071410e1d7a7a968cd3ad48""
@@ -2735,10 +3760,87 @@ tiny-lr@^0.2.1:
     parseurl ""~1.3.0""
     qs ""~5.1.0""
 
+to-boolean-x@^1.0.1, to-boolean-x@^1.0.2:
+  version ""1.0.3""
+  resolved ""https://registry.yarnpkg.com/to-boolean-x/-/to-boolean-x-1.0.3.tgz#cbe15e38a85d09553f29869a9b3e3b54ceef5af0""
+
+to-buffer@^1.1.0:
+  version ""1.1.1""
+  resolved ""https://registry.yarnpkg.com/to-buffer/-/to-buffer-1.1.1.tgz#493bd48f62d7c43fcded313a03dcadb2e1213a80""
+
 to-fast-properties@^1.0.3:
   version ""1.0.3""
   resolved ""https://registry.yarnpkg.com/to-fast-properties/-/to-fast-properties-1.0.3.tgz#b83571fa4d8c25b82e231b06e3a3055de4ca1a47""
 
+to-integer-x@^3.0.0:
+  version ""3.0.0""
+  resolved ""https://registry.yarnpkg.com/to-integer-x/-/to-integer-x-3.0.0.tgz#9f3b80e668c7f0ae45e6926b40d95f52c1addc74""
+  dependencies:
+    is-finite-x ""^3.0.2""
+    is-nan-x ""^1.0.1""
+    math-sign-x ""^3.0.0""
+    to-number-x ""^2.0.0""
+
+to-number-x@^2.0.0:
+  version ""2.0.0""
+  resolved ""https://registry.yarnpkg.com/to-number-x/-/to-number-x-2.0.0.tgz#c9099d7ded8fd327132a2987df2dcc8baf36df4d""
+  dependencies:
+    cached-constructors-x ""^1.0.0""
+    nan-x ""^1.0.0""
+    parse-int-x ""^2.0.0""
+    to-primitive-x ""^1.1.0""
+    trim-x ""^3.0.0""
+
+to-object-x@^1.4.1, to-object-x@^1.5.0:
+  version ""1.5.0""
+  resolved ""https://registry.yarnpkg.com/to-object-x/-/to-object-x-1.5.0.tgz#bd69dd4e104d77acc0cc0d84f5ac48f630aebe3c""
+  dependencies:
+    cached-constructors-x ""^1.0.0""
+    require-object-coercible-x ""^1.4.1""
+
+to-primitive-x@^1.1.0:
+  version ""1.1.0""
+  resolved ""https://registry.yarnpkg.com/to-primitive-x/-/to-primitive-x-1.1.0.tgz#41ce2c13e3e246e0e5d0a8829a0567c6015833f8""
+  dependencies:
+    has-symbol-support-x ""^1.4.1""
+    is-date-object ""^1.0.1""
+    is-function-x ""^3.2.0""
+    is-nil-x ""^1.4.1""
+    is-primitive ""^2.0.0""
+    is-symbol ""^1.0.1""
+    require-object-coercible-x ""^1.4.1""
+    validate.io-undefined ""^1.0.3""
+
+to-property-key-x@^2.0.1, to-property-key-x@^2.0.2:
+  version ""2.0.2""
+  resolved ""https://registry.yarnpkg.com/to-property-key-x/-/to-property-key-x-2.0.2.tgz#b19aa8e22faa0ff7d1c102cfbc657af73413cfa1""
+  dependencies:
+    has-symbol-support-x ""^1.4.1""
+    to-primitive-x ""^1.1.0""
+    to-string-x ""^1.4.2""
+
+to-string-symbols-supported-x@^1.0.0:
+  version ""1.0.2""
+  resolved ""https://registry.yarnpkg.com/to-string-symbols-supported-x/-/to-string-symbols-supported-x-1.0.2.tgz#73f5e17963520b2b365559f05e3864addaab7f1e""
+  dependencies:
+    cached-constructors-x ""^1.0.2""
+    has-symbol-support-x ""^1.4.2""
+    is-symbol ""^1.0.1""
+
+to-string-tag-x@^1.4.1, to-string-tag-x@^1.4.2:
+  version ""1.4.3""
+  resolved ""https://registry.yarnpkg.com/to-string-tag-x/-/to-string-tag-x-1.4.3.tgz#3aed2edec9343be3c76e338161f85d6864c692b1""
+  dependencies:
+    lodash.isnull ""^3.0.0""
+    validate.io-undefined ""^1.0.3""
+
+to-string-x@^1.4.2, to-string-x@^1.4.5:
+  version ""1.4.5""
+  resolved ""https://registry.yarnpkg.com/to-string-x/-/to-string-x-1.4.5.tgz#b86dad14df68ca4df52ca4cb011a25e0bf5d9ca1""
+  dependencies:
+    cached-constructors-x ""^1.0.0""
+    is-symbol ""^1.0.1""
+
 tough-cookie@^2.2.0, tough-cookie@~2.3.3:
   version ""2.3.3""
   resolved ""https://registry.yarnpkg.com/tough-cookie/-/tough-cookie-2.3.3.tgz#0b618a5565b6dea90bf3425d04d55edc475a7561""
@@ -2749,10 +3851,33 @@ tr46@~0.0.1:
   version ""0.0.3""
   resolved ""https://registry.yarnpkg.com/tr46/-/tr46-0.0.3.tgz#8184fd347dac9cdc185992f3a6622e14b9d9ab6a""
 
+trim-left-x@^3.0.0:
+  version ""3.0.0""
+  resolved ""https://registry.yarnpkg.com/trim-left-x/-/trim-left-x-3.0.0.tgz#356cf055896726b9754425e841398842e90b4cdf""
+  dependencies:
+    cached-constructors-x ""^1.0.0""
+    require-coercible-to-string-x ""^1.0.0""
+    white-space-x ""^3.0.0""
+
 trim-newlines@^1.0.0:
   version ""1.0.0""
   resolved ""https://registry.yarnpkg.com/trim-newlines/-/trim-newlines-1.0.0.tgz#5887966bb582a4503a41eb524f7d35011815a613""
 
+trim-right-x@^3.0.0:
+  version ""3.0.0""
+  resolved ""https://registry.yarnpkg.com/trim-right-x/-/trim-right-x-3.0.0.tgz#28c4cd37d5981f50ace9b52e3ce9106f4d2d22c0""
+  dependencies:
+    cached-constructors-x ""^1.0.0""
+    require-coercible-to-string-x ""^1.0.0""
+    white-space-x ""^3.0.0""
+
+trim-x@^3.0.0:
+  version ""3.0.0""
+  resolved ""https://registry.yarnpkg.com/trim-x/-/trim-x-3.0.0.tgz#24efdcd027b748bbfc246a0139ad1749befef024""
+  dependencies:
+    trim-left-x ""^3.0.0""
+    trim-right-x ""^3.0.0""
+
 tunnel-agent@^0.6.0:
   version ""0.6.0""
   resolved ""https://registry.yarnpkg.com/tunnel-agent/-/tunnel-agent-0.6.0.tgz#27a5dea06b36b04a0a9966774b290868f0fc40fd""
@@ -2800,6 +3925,10 @@ util-deprecate@~1.0.1:
   version ""1.0.2""
   resolved ""https://registry.yarnpkg.com/util-deprecate/-/util-deprecate-1.0.2.tgz#450d4dc9fa70de732762fbd2d4a28981419a0ccf""
 
+uuid@3.2.1:
+  version ""3.2.1""
+  resolved ""https://registry.yarnpkg.com/uuid/-/uuid-3.2.1.tgz#12c528bb9d58d0b9265d9a2f6f0fe8be17ff1f14""
+
 uuid@^3.1.0:
   version ""3.1.0""
   resolved ""https://registry.yarnpkg.com/uuid/-/uuid-3.1.0.tgz#3dd3d3e790abc24d7b0d3a034ffababe28ebbc04""
@@ -2811,6 +3940,10 @@ validate-npm-package-license@^3.0.1:
     spdx-correct ""~1.0.0""
     spdx-expression-parse ""~1.0.0""
 
+validate.io-undefined@^1.0.3:
+  version ""1.0.3""
+  resolved ""https://registry.yarnpkg.com/validate.io-undefined/-/validate.io-undefined-1.0.3.tgz#7e27fcbb315b841e78243431897671929e20b7f4""
+
 verror@1.10.0:
   version ""1.10.0""
   resolved ""https://registry.yarnpkg.com/verror/-/verror-1.10.0.tgz#3a105ca17053af55d6e270c1f8288682e18da400""
@@ -2819,6 +3952,10 @@ verror@1.10.0:
     core-util-is ""1.0.2""
     extsprintf ""^1.2.0""
 
+vuvuzela@1.0.3:
+  version ""1.0.3""
+  resolved ""https://registry.yarnpkg.com/vuvuzela/-/vuvuzela-1.0.3.tgz#3be145e58271c73ca55279dd851f12a682114b0b""
+
 webidl-conversions@^2.0.0:
   version ""2.0.1""
   resolved ""https://registry.yarnpkg.com/webidl-conversions/-/webidl-conversions-2.0.1.tgz#3bf8258f7d318c7443c36f2e169402a1a6703506""
@@ -2840,12 +3977,26 @@ whatwg-url-compat@~0.6.5:
   dependencies:
     tr46 ""~0.0.1""
 
+which-pm-runs@^1.0.0:
+  version ""1.0.0""
+  resolved ""https://registry.yarnpkg.com/which-pm-runs/-/which-pm-runs-1.0.0.tgz#670b3afbc552e0b55df6b7780ca74615f23ad1cb""
+
 which@~1.2.1:
   version ""1.2.14""
   resolved ""https://registry.yarnpkg.com/which/-/which-1.2.14.tgz#9a87c4378f03e827cecaf1acdf56c736c01c14e5""
   dependencies:
     isexe ""^2.0.0""
 
+white-space-x@^3.0.0:
+  version ""3.0.1""
+  resolved ""https://registry.yarnpkg.com/white-space-x/-/white-space-x-3.0.1.tgz#81a82d5432da725aba5ca671624bb579c9e66d4f""
+
+wide-align@^1.1.0:
+  version ""1.1.3""
+  resolved ""https://registry.yarnpkg.com/wide-align/-/wide-align-1.1.3.tgz#ae074e6bdc0c14a431e804e624549c633b000457""
+  dependencies:
+    string-width ""^1.0.2 || 2""
+
 window-size@^0.1.4:
   version ""0.1.4""
   resolved ""https://registry.yarnpkg.com/window-size/-/window-size-0.1.4.tgz#f8e1aa1ee5a53ec5bf151ffa09742a6ad7697876""
@@ -2873,6 +4024,12 @@ write-file-stdout@0.0.2:
   version ""0.0.2""
   resolved ""https://registry.yarnpkg.com/write-file-stdout/-/write-file-stdout-0.0.2.tgz#c252d7c7c5b1b402897630e3453c7bfe690d9ca1""
 
+write-stream@~0.4.3:
+  version ""0.4.3""
+  resolved ""https://registry.yarnpkg.com/write-stream/-/write-stream-0.4.3.tgz#83cc8c0347d0af6057a93862b4e3ae01de5c81c1""
+  dependencies:
+    readable-stream ""~0.0.2""
+
 write@^0.2.1:
   version ""0.2.1""
   resolved ""https://registry.yarnpkg.com/write/-/write-0.2.1.tgz#5fc03828e264cea3fe91455476f7a3c566cb0757""
@@ -2883,7 +4040,7 @@ write@^0.2.1:
   version ""2.0.1""
   resolved ""https://registry.yarnpkg.com/xml-name-validator/-/xml-name-validator-2.0.1.tgz#4d8b8f1eccd3419aa362061becef515e1e559635""
 
-""xtend@>=4.0.0 <4.1.0-0"":
+""xtend@>=4.0.0 <4.1.0-0"", xtend@^4.0.0, xtend@^4.0.1, xtend@~4.0.0, xtend@~4.0.1:
   version ""4.0.1""
   resolved ""https://registry.yarnpkg.com/xtend/-/xtend-4.0.1.tgz#a5c6d532be656e23db820efb943a1f04998d63af""
 
@@ -2906,3 +4063,7 @@ yargs@^3.5.4:
     string-width ""^1.0.1""
     window-size ""^0.1.4""
     y18n ""^3.2.0""
+
+zeroclipboard@~2.3.0:
+  version ""2.3.0""
+  resolved ""https://registry.yarnpkg.com/zeroclipboard/-/zeroclipboard-2.3.0.tgz#592ebd833a4308688b0739697d3dbf989002c9af""",2018-06-14T13:07:57Z,221
"@@ -10,7 +10,6 @@ else
     mvn versions:set -Pdocker -DnewVersion=$1
     sed -i.versionsBackup ""s/.*/$1/"" version.txt
     sed -i.versionsBackup ""s/version: '.*',$/version: '$2',/"" app/Gruntfile.js
-    sed -i.versionsBackup ""s/\""version\"": \"".*\"",$/\""version\"": \""$2\"",/"" app/bower.json
     sed -i.versionsBackup ""s/\""version\"": \"".*\"",$/\""version\"": \""$2\"",/"" app/package.json
     sed -i.versionsBackup ""s/name=\""hal\.version\"" value=\"".*\""/name=\""hal.version\"" value=\""$1\""/"" app/src/main/module.gwt.xml
     sed -i.versionsBackup ""s/\""version\"": \"".*\"",$/\""version\"": \""$2\"",/"" yarn/src/main/resources/hal-console/package.json",2018-06-14T13:07:57Z,222
"@@ -106,14 +106,7 @@ module.exports = function (grunt) {
         },
 
         concat: {
-            polyfillDev: {
-                src: [
-                    '<%= config.node %>/promise-polyfill/dist/polyfill.js',
-                    '<%= config.node %>/whatwg-fetch/fetch.js'
-                ],
-                dest: '<%= config.public %>/js/polyfill.js'
-            },
-            polyfillProd: {
+            polyfill: {
                 options: {
                     banner: '/*!\n' +
                     ' * Polyfill JS files for IE 11 and below. HAL <%= config.version %>\n' +
@@ -296,7 +289,7 @@ module.exports = function (grunt) {
     grunt.registerTask('dev', [
         'clean',
         'copy:resources',
-        'concat:polyfillDev',
+        'concat:polyfill',
         'concat:externalDev',
         'less',
         'postcss'
@@ -305,7 +298,7 @@ module.exports = function (grunt) {
     grunt.registerTask('prod', [
         'clean',
         'copy:resources',
-        'concat:polyfillProd',
+        'concat:polyfill',
         'concat:externalProd',
         'less',
         'postcss',",2018-08-16T12:29:25Z,212
"@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-self.importScripts(""polyfill.js"", ""pouchdb.min.js"");
+self.importScripts(""polyfill.min.js"", ""pouchdb.min.js"");
 
 self.addEventListener(""message"", function (e) {
     var db = new PouchDB(e.data.database);",2018-08-16T12:29:25Z,204
"@@ -24,7 +24,6 @@
 import org.jboss.hal.client.bootstrap.tasks.CheckTargetVersion;
 import org.jboss.hal.client.bootstrap.tasks.FindDomainController;
 import org.jboss.hal.client.bootstrap.tasks.InitializationTasks;
-import org.jboss.hal.client.bootstrap.tasks.InjectPolyfill;
 import org.jboss.hal.client.bootstrap.tasks.LoadSettings;
 import org.jboss.hal.client.bootstrap.tasks.ReadAuthentication;
 import org.jboss.hal.client.bootstrap.tasks.ReadEnvironment;
@@ -45,7 +44,6 @@ protected void configure() {
         bind(EndpointStorage.class).in(Singleton.class);
         bind(FindDomainController.class).in(Singleton.class);
         bind(InitializationTasks.class).in(Singleton.class);
-        bind(InjectPolyfill.class).in(Singleton.class);
         bind(LoadSettings.class).in(Singleton.class);
         bind(ReadAuthentication.class).in(Singleton.class);
         bind(ReadEnvironment.class).in(Singleton.class);",2018-08-16T12:29:25Z,30
"@@ -23,16 +23,14 @@ public class BootstrapTasks {
     private final BootstrapTask[] tasks;
 
     @Inject
-    public BootstrapTasks(InjectPolyfill injectPolyfill,
-            ReadEnvironment readEnvironment,
+    public BootstrapTasks(ReadEnvironment readEnvironment,
             ReadAuthentication readAuthentication,
             FindDomainController findDomainController,
             RegisterStaticCapabilities registerStaticCapabilities,
             ReadExtensions readExtensions,
             LoadSettings loadSettings,
             StartAnalytics startAnalytics) {
         this.tasks = new BootstrapTask[]{
-                injectPolyfill,
                 readEnvironment,
                 readAuthentication,
                 findDomainController,",2018-08-16T12:29:25Z,88
"@@ -1,53 +0,0 @@
-/*
- * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.hal.client.bootstrap.tasks;
-
-import javax.inject.Inject;
-
-import elemental2.dom.HTMLScriptElement;
-import org.jboss.hal.config.Environment;
-import org.jboss.hal.js.Browser;
-import org.jetbrains.annotations.NonNls;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import rx.Completable;
-
-import static elemental2.dom.DomGlobal.document;
-
-public class InjectPolyfill implements BootstrapTask {
-
-    @NonNls private static final Logger logger = LoggerFactory.getLogger(InjectPolyfill.class);
-    private static final String PROMISE_POLYFILL = ""js/polyfill"";
-
-    private final Environment environment;
-
-    @Inject
-    public InjectPolyfill(Environment environment) {
-        this.environment = environment;
-    }
-
-    @Override
-    public Completable call() {
-        if (Browser.isIE()) {
-            String src = PROMISE_POLYFILL + (environment.isProductionMode() ? "".min.js"" : "".js"");
-            logger.debug(""Inject IE polyfill: '{}'"", src);
-            HTMLScriptElement script = (HTMLScriptElement) document.createElement(""script"");
-            script.src = src;
-            document.head.appendChild(script);
-        }
-        return Completable.complete();
-    }
-}",2018-08-16T12:29:25Z,223
"@@ -25,9 +25,6 @@
 import org.jboss.hal.meta.description.ResourceDescriptionDatabase;
 import org.jboss.hal.meta.security.SecurityContext;
 import org.jboss.hal.meta.security.SecurityContextDatabase;
-import org.jetbrains.annotations.NonNls;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import static jsinterop.annotations.JsPackage.GLOBAL;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.HAL_RECURSIVE;
@@ -36,7 +33,6 @@
 public class WorkerChannel {
 
     private static final String WORKER_JS = ""js/worker.js"";
-    @NonNls private static final Logger logger = LoggerFactory.getLogger(WorkerChannel.class);
 
     private final ResourceDescriptionDatabase resourceDescriptionDatabase;
     private final SecurityContextDatabase securityContextDatabase;
@@ -52,16 +48,11 @@ public WorkerChannel(ResourceDescriptionDatabase resourceDescriptionDatabase,
 
     void postResourceDescription(ResourceAddress address, ResourceDescription resourceDescription, boolean recursive) {
         if (worker != null) {
-            // Stopwatch watch = Stopwatch.createStarted();
             resourceDescription.get(HAL_RECURSIVE).set(recursive);
             UpdateMessage message = new UpdateMessage();
             message.database = resourceDescriptionDatabase.name();
             message.document = resourceDescriptionDatabase.asDocument(address, resourceDescription);
             worker.postMessage(message);
-            // watch.stop();
-            // logger.debug(""Posted rd({}): {} bytes in {} ms"", document.getId(),
-            //         document.getAny(PAYLOAD).asString().length(),
-            //         watch.elapsed(MILLISECONDS));
         }
     }
 ",2018-08-16T12:29:25Z,224
"@@ -15,10 +15,10 @@
  */
 package org.jboss.hal.client.configuration.subsystem.elytron;
 
+import java.util.ArrayList;
 import java.util.EnumSet;
 import java.util.List;
 
-import com.google.common.base.Splitter;
 import com.google.gwt.core.client.GWT;
 import com.google.gwt.regexp.shared.RegExp;
 import elemental2.dom.HTMLElement;
@@ -79,6 +79,22 @@ public boolean isEmpty() {
         return getValue() == null || !getValue().isDefined();
     }
 
+    @Override
+    public void addTag(ModelNode tag) {
+        ModelNode value = getValue();
+        ModelNode newValue = value != null ? value.clone() : new ModelNode();
+        newValue.add(tag.get(0));
+        modifyValue(newValue);
+    }
+
+    @Override
+    public void removeTag(ModelNode tag) {
+        List<ModelNode> list = new ArrayList<>(getValue().asList());
+        list.remove(tag.get(0));
+        ModelNode newValue = new ModelNode();
+        newValue.set(list);
+        modifyValue(newValue);
+    }
 
     private static class MapMapping implements TagsMapping<ModelNode> {
 
@@ -98,24 +114,16 @@ public Validator validator() {
         }
 
         @Override
-        public ModelNode parse(final String cst) {
-            ModelNode result = new ModelNode();
-
-            if (cst != null) {
-                Splitter.on(',')
-                        .trimResults()
-                        .omitEmptyStrings()
-                        .withKeyValueSeparator('=')
-                        .split(cst)
-                        .forEach((key, value) -> {
-                            ModelNode kv = new ModelNode();
-                            kv.get(propAttribute).set(key);
-                            kv.get(valueAttribute).set(value);
-                            result.add(kv);
-                        });
-                return result;
-            }
-            return result;
+        public ModelNode parseTag(final String tag) {
+            String[] parts = tag.split(""="");
+
+            ModelNode kv = new ModelNode();
+            kv.get(propAttribute).set(parts[0]);
+            kv.get(valueAttribute).set(parts[1]);
+
+            ModelNode node = new ModelNode();
+            node.add(kv);
+            return node;
         }
 
         @Override",2019-06-04T16:42:53Z,197
"@@ -15,10 +15,10 @@
  */
 package org.jboss.hal.client.configuration.subsystem.elytron;
 
+import java.util.ArrayList;
 import java.util.EnumSet;
 import java.util.List;
 
-import com.google.common.base.Splitter;
 import com.google.gwt.core.client.GWT;
 import com.google.gwt.regexp.shared.RegExp;
 import elemental2.dom.HTMLElement;
@@ -81,6 +81,22 @@ public boolean isEmpty() {
         return getValue() == null || !getValue().isDefined();
     }
 
+    @Override
+    public void addTag(ModelNode tag) {
+        ModelNode value = getValue();
+        ModelNode newValue = value != null ? value.clone() : new ModelNode();
+        newValue.add(tag.get(0));
+        modifyValue(newValue);
+    }
+
+    @Override
+    public void removeTag(ModelNode tag) {
+        List<ModelNode> list = new ArrayList<>(getValue().asList());
+        list.remove(tag.get(0));
+        ModelNode newValue = new ModelNode();
+        newValue.set(list);
+        modifyValue(newValue);
+    }
 
     private static class MapMapping implements TagsMapping<ModelNode> {
 
@@ -94,25 +110,17 @@ public Validator validator() {
         }
 
         @Override
-        public ModelNode parse(final String cst) {
-            ModelNode result = new ModelNode();
-            if (cst != null) {
-                Splitter.on(',')
-                        .trimResults()
-                        .omitEmptyStrings()
-                        .withKeyValueSeparator('=')
-                        .split(cst)
-                        .forEach((key, value) -> {
-                            ModelNode kv = new ModelNode();
-                            kv.get(NAME).set(key);
-                            for (String v : value.split(VALUE_SEPARATOR)) {
-                                kv.get(VALUE).add(v);
-                            }
-                            result.add(kv);
-                        });
-                return result;
+        public ModelNode parseTag(final String tag) {
+            String[] parts = tag.split(""="");
+            ModelNode kv = new ModelNode();
+            kv.get(NAME).set(parts[0]);
+            for (String v : parts[1].split(VALUE_SEPARATOR)) {
+                kv.get(VALUE).add(v);
             }
-            return result;
+
+            ModelNode node = new ModelNode();
+            node.add(kv);
+            return node;
         }
 
         @Override",2019-06-04T16:42:53Z,15
"@@ -15,10 +15,10 @@
  */
 package org.jboss.hal.client.configuration.subsystem.elytron;
 
+import java.util.ArrayList;
 import java.util.EnumSet;
 import java.util.List;
 
-import com.google.common.base.Splitter;
 import com.google.gwt.core.client.GWT;
 import com.google.gwt.regexp.shared.RegExp;
 import elemental2.dom.HTMLElement;
@@ -60,6 +60,22 @@ public void attach() {
         }
     }
 
+    @Override
+    public void addTag(ModelNode tag) {
+        ModelNode value = getValue();
+        ModelNode newValue = value != null ? value.clone() : new ModelNode();
+        newValue.add(tag.get(0));
+        modifyValue(newValue);
+    }
+
+    @Override
+    public void removeTag(ModelNode tag) {
+        List<ModelNode> list = new ArrayList<>(getValue().asList());
+        list.remove(tag.get(0));
+        ModelNode newValue = new ModelNode();
+        newValue.set(list);
+        modifyValue(newValue);
+    }
 
     private static class MapMapping implements TagsMapping<ModelNode> {
 
@@ -72,23 +88,17 @@ public TagsManager.Validator validator() {
         }
 
         @Override
-        public ModelNode parse(final String cst) {
-            ModelNode result = new ModelNode();
-            if (cst != null) {
-                Splitter.on("","")
-                        .trimResults()
-                        .omitEmptyStrings()
-                        .withKeyValueSeparator('=')
-                        .split(cst)
-                        .forEach((key, value) -> {
-                            ModelNode multiValue = new ModelNode();
-                            for (String v: value.split(VALUE_SEPARATOR)) {
-                                multiValue.add(v);
-                            }
-                            result.add(key, multiValue);
-                        });
+        public ModelNode parseTag(final String tag) {
+            String[] parts = tag.split(""="");
+
+            ModelNode multiValue = new ModelNode();
+            for (String v: parts[1].split(VALUE_SEPARATOR)) {
+                multiValue.add(v);
             }
-            return result;
+
+            ModelNode node = new ModelNode();
+            node.add(parts[0], multiValue);
+            return node;
         }
 
         @Override",2019-06-04T16:42:53Z,198
"@@ -22,7 +22,6 @@
 import java.util.Map;
 
 import com.google.common.base.Joiner;
-import com.google.common.base.Splitter;
 import com.google.gwt.core.client.GWT;
 import com.google.gwt.regexp.shared.RegExp;
 import elemental2.dom.HTMLElement;
@@ -61,6 +60,25 @@ public void attach() {
         }
     }
 
+    @Override
+    public void addTag(Map<String, List<String>> tag) {
+        Map<String, List<String>> value = getValue();
+        Map<String, List<String>> newValue = new HashMap<>();
+        if (value != null) {
+            newValue.putAll(value);
+        }
+        Map.Entry<String, List<String>> parsed = tag.entrySet().iterator().next();
+        newValue.put(parsed.getKey(), parsed.getValue());
+        modifyValue(newValue);
+    }
+
+    @Override
+    public void removeTag(Map<String, List<String>> tag) {
+        Map<String, List<String>> newValue = new HashMap<>(getValue());
+        newValue.remove(tag.keySet().iterator().next());
+        modifyValue(newValue);
+    }
+
 
     private static class MapMapping implements TagsMapping<Map<String, List<String>>> {
 
@@ -73,19 +91,12 @@ public TagsManager.Validator validator() {
         }
 
         @Override
-        public Map<String, List<String>> parse(final String cst) {
-            Map<String, List<String>> result = new HashMap<>();
-            if (cst != null) {
-                Splitter.on("","")
-                        .trimResults()
-                        .omitEmptyStrings()
-                        .withKeyValueSeparator('=')
-                        .split(cst)
-                        .forEach((key, value) -> {
-                            result.put(key, asList(value.split(VALUE_SEPARATOR)));
-                        });
-            }
-            return result;
+        public Map<String, List<String>> parseTag(final String tag) {
+            String[] parts = tag.split(""="");
+
+            Map<String, List<String>> map = new HashMap<>();
+            map.put(parts[0], asList(parts[1].split(VALUE_SEPARATOR)));
+            return map;
         }
 
         @Override",2019-06-04T16:42:53Z,199
"@@ -15,10 +15,11 @@
  */
 package org.jboss.hal.ballroom.form;
 
+import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.EnumSet;
 import java.util.List;
 
-import com.google.common.base.Splitter;
 import com.google.gwt.core.client.GWT;
 import org.jboss.hal.resources.Messages;
 
@@ -39,16 +40,30 @@ public boolean isEmpty() {
         return getValue() == null || getValue().isEmpty();
     }
 
+    @Override
+    public void addTag(List<String> tag) {
+        List<String> value = getValue();
+        List<String> newValue = new ArrayList<>();
+        if (value != null) {
+            newValue.addAll(value);
+        }
+        newValue.addAll(tag);
+        modifyValue(newValue);
+    }
+
+    @Override
+    public void removeTag(List<String> tag) {
+        List<String> newValue = new ArrayList<>(getValue());
+        newValue.removeAll(tag);
+        modifyValue(newValue);
+    }
 
     private static class ListMapping implements TagsMapping<List<String>> {
 
         @Override
-        public List<String> parse(String cst) {
-            //noinspection UnstableApiUsage
-            return Splitter.on(',')
-                    .trimResults()
-                    .omitEmptyStrings()
-                    .splitToList(cst);
+        public List<String> parseTag(final String tag) {
+            List<String> list = Arrays.asList(tag);
+            return list;
         }
 
         @Override
@@ -60,5 +75,6 @@ public List<String> tags(List<String> value) {
         public String asString(List<String> value) {
             return String.join("", "", value);
         }
+
     }
 }",2019-06-04T16:42:53Z,200
"@@ -21,7 +21,6 @@
 import java.util.List;
 import java.util.Map;
 
-import com.google.common.base.Splitter;
 import com.google.gwt.core.client.GWT;
 import com.google.gwt.regexp.shared.RegExp;
 import com.google.gwt.safehtml.shared.SafeHtml;
@@ -31,7 +30,6 @@
 
 import static elemental2.dom.DomGlobal.document;
 import static java.util.Collections.emptyList;
-import static java.util.Collections.emptyMap;
 import static java.util.stream.Collectors.joining;
 import static org.jboss.hal.ballroom.form.Decoration.*;
 import static org.jboss.hal.ballroom.form.Form.State.READONLY;
@@ -74,6 +72,24 @@ public void attach() {
         }
     }
 
+    @Override
+    public void addTag(Map<String, String> tag) {
+        Map<String, String> value = getValue();
+        Map<String, String> newValue = new HashMap<>();
+        if (value != null) {
+            newValue.putAll(value);
+        }
+        Map.Entry<String, String> tagEntry = tag.entrySet().iterator().next();
+        newValue.put(tagEntry.getKey(), tagEntry.getValue());
+        modifyValue(newValue);
+    }
+
+    @Override
+    public void removeTag(Map<String, String> tag) {
+        Map<String, String> newValue = new HashMap<>(getValue());
+        newValue.remove(tag.keySet().iterator().next());
+        modifyValue(newValue);
+    }
 
     static class MapMapping implements TagsMapping<Map<String, String>> {
 
@@ -87,24 +103,13 @@ public TagsManager.Validator validator() {
         }
 
         @Override
-        public Map<String, String> parse(String cst) {
-            if (cst != null) {
-                // split the full cst at the comma
-                Map<String, String> tags = new HashMap<>();
-                Iterable<String> cstParts = Splitter.on(',')
-                        .trimResults()
-                        .omitEmptyStrings()
-                        .split(cst);
-                // split each key=value pair by the first '=' character
-                for (String part : cstParts) {
-                    int firstEq = part.indexOf(EQ);
-                    String keyPart = part.substring(0, firstEq);
-                    String valuePart = part.substring(firstEq + 1);
-                    tags.put(keyPart, valuePart);
-                }
-                return tags;
-            }
-            return emptyMap();
+        public Map<String, String> parseTag(String tag) {
+            int firstEq = tag.indexOf(EQ);
+            String keyPart = tag.substring(0, firstEq);
+            String valuePart = tag.substring(firstEq + 1);
+            Map<String, String> map = new HashMap<>();
+            map.put(keyPart, valuePart);
+            return map;
         }
 
         @Override",2019-06-04T16:42:53Z,196
"@@ -75,6 +75,8 @@ public void onSuggest(String suggestion) {
         }
     }
 
+    public abstract void addTag(T tag);
+    public abstract void removeTag(T tag);
 
     private class TagsReadOnlyAppearance extends ReadOnlyAppearance<T> {
 
@@ -99,6 +101,8 @@ private class TagsEditingAppearance extends EditingAppearance<T> {
         private final HTMLElement tagsContainer;
         private final TagsMapping<T> mapping;
 
+        private boolean skipAdding;
+
         TagsEditingAppearance(HTMLInputElement inputElement, SafeHtml inputHelp,
                 Set<Decoration> supportedDecorations, TagsMapping<T> mapping) {
             super(supportedDecorations, inputElement);
@@ -130,21 +134,32 @@ public void attach() {
 
             TagsManager.Api api = TagsManager.Api.element(inputElement);
             api.tagsManager(options);
-            api.onRefresh((event, cst) -> {
-                modifyValue(mapping.parse(cst));
-                clearError();
-            });
             api.onInvalid((event, cst) -> {
                 String message = allowedCharacters() != null ? MESSAGES.invalidTagFormat(allowedCharacters())
                         : MESSAGES.invalidFormat();
                 showError(message);
             });
+
+            api.onAdded((event, tag) -> {
+                if (skipAdding) {
+                    return;
+                }
+                addTag(mapping.parseTag(tag));
+                clearError();
+            });
+
+            api.onRemoved((event, tag) -> {
+                removeTag(mapping.parseTag(tag));
+                clearError();
+            });
         }
 
         @Override
         public void showValue(T value) {
             if (attached) {
+                skipAdding = true;
                 TagsManager.Api.element(inputElement).setTags(mapping.tags(value));
+                skipAdding = false;
             } else {
                 inputElement.value = asString(value);
             }",2019-06-04T16:42:53Z,201
"@@ -38,7 +38,8 @@ public class TagsManager {
 
     private static final String EMPTY = ""empty"";
     private static final String PUSH_TAG = ""pushTag"";
-    private static final String REFRESH_EVENT = ""tm:refresh"";
+    private static final String ADDED_EVENT = ""tm:pushed"";
+    private static final String REMOVED_EVENT = ""tm:spliced"";
     private static final String INVALID_EVENT = ""tm:invalid"";
     private static final String DUPLICATED_EVENT = ""tm:duplicated"";
     private static final String TAGS = ""tags"";
@@ -55,34 +56,35 @@ public interface Validator {
 
     @JsFunction
     @FunctionalInterface
-    interface RefreshListener {
+    interface InvalidListener {
 
         /**
          * @param cst (c)omma (s)eparated (t)ags
          */
-        void onRefresh(Event event, String cst);
+        void onInvalid(Event event, String cst);
     }
 
 
     @JsFunction
     @FunctionalInterface
-    interface InvalidListener {
+    interface DuplicatedListener {
 
         /**
          * @param cst (c)omma (s)eparated (t)ags
          */
-        void onInvalid(Event event, String cst);
+        void onDuplicated(Event event, String cst);
     }
 
-
     @JsFunction
     @FunctionalInterface
-    interface DuplicatedListener {
+    interface AddedListener {
+        void onAdded(Event event, String tag);
+    }
 
-        /**
-         * @param cst (c)omma (s)eparated (t)ags
-         */
-        void onDuplicated(Event event, String cst);
+    @JsFunction
+    @FunctionalInterface
+    interface RemovedListener {
+        void onRemoved(Event event, String tag);
     }
 
 
@@ -116,12 +118,14 @@ public static class Api {
         @JsMethod(namespace = GLOBAL, name = ""$"")
         public static native Api element(HTMLInputElement element);
 
-        public native void on(String event, RefreshListener refreshListener);
-
         public native void on(String event, InvalidListener invalidListener);
 
         public native void on(String event, DuplicatedListener duplicatedListener);
 
+        public native void on(String event, AddedListener addedListener);
+
+        public native void on(String event, RemovedListener removedListener);
+
         @JsMethod(name = TAGS_MANAGER)
         public native String[] tagsManagerGetTags(String getTags);
 
@@ -132,11 +136,6 @@ public static class Api {
 
         public native void tagsManager(Options options);
 
-        @JsOverlay
-        final void onRefresh(RefreshListener refreshListener) {
-            on(REFRESH_EVENT, refreshListener);
-        }
-
         @JsOverlay
         final void onInvalid(InvalidListener invalidListener) {
             on(INVALID_EVENT, invalidListener);
@@ -147,6 +146,16 @@ final void onDuplicated(DuplicatedListener duplicatedListener) {
             on(DUPLICATED_EVENT, duplicatedListener);
         }
 
+        @JsOverlay
+        final void onAdded(AddedListener addedListener) {
+            on(ADDED_EVENT, addedListener);
+        }
+
+        @JsOverlay
+        final void onRemoved(RemovedListener removedListener) {
+            on(REMOVED_EVENT, removedListener);
+        }
+
         @JsOverlay
         final void addTag(String tag) {
             tagsManager(PUSH_TAG, tag);",2019-06-04T16:42:53Z,92
"@@ -30,7 +30,7 @@ default Validator validator() {
         return null;
     }
 
-    T parse(String cst);
+    T parseTag(String tag);
 
     List<String> tags(T value);
 ",2019-06-04T16:42:53Z,202
"@@ -15,15 +15,12 @@
  */
 package org.jboss.hal.ballroom.form;
 
-import java.util.Map;
-
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
+import java.util.Map;
+
+import static org.junit.Assert.*;
 
 public class MapMappingTest {
 
@@ -40,38 +37,17 @@ public void setUp() {
         mapping = new PropertiesItem.MapMapping();
     }
 
-    @Test
-    public void parseNull() {
-        Map<String, String> map = mapping.parse(null);
-        assertNotNull(map);
-        assertTrue(map.isEmpty());
-    }
-
-    @Test
-    public void parseEmpty() {
-        Map<String, String> map = mapping.parse("""");
-        assertNotNull(map);
-        assertTrue(map.isEmpty());
-    }
-
-    @Test
-    public void parseBlank() {
-        Map<String, String> map = mapping.parse(""    "");
-        assertNotNull(map);
-        assertTrue(map.isEmpty());
-    }
-
     @Test
     public void parseSimple() {
-        Map<String, String> map = mapping.parse(KEY_VALUE);
+        Map<String, String> map = mapping.parseTag(KEY_VALUE);
         assertNotNull(map);
         assertEquals(1, map.size());
         assertEquals(VALUE, map.get(KEY));
     }
 
     @Test
     public void parseSpecial() {
-        Map<String, String> map = mapping.parse(KEY_SPECIAL_VALUE);
+        Map<String, String> map = mapping.parseTag(KEY_SPECIAL_VALUE);
         assertNotNull(map);
         assertEquals(1, map.size());
         assertEquals(SPECIAL_VALUE, map.get(KEY));",2019-06-04T16:42:53Z,225
"@@ -96,7 +96,9 @@
 import org.jboss.hal.client.configuration.subsystem.messaging.Mbui_ConnectionView;
 import org.jboss.hal.client.configuration.subsystem.messaging.Mbui_DestinationView;
 import org.jboss.hal.client.configuration.subsystem.messaging.Mbui_MessagingSubsystemView;
+import org.jboss.hal.client.configuration.subsystem.messaging.Mbui_RemoteActiveMQView;
 import org.jboss.hal.client.configuration.subsystem.messaging.MessagingSubsystemPresenter;
+import org.jboss.hal.client.configuration.subsystem.messaging.RemoteActiveMQPresenter;
 import org.jboss.hal.client.configuration.subsystem.microprofile.Mbui_MicroProfileConfigView;
 import org.jboss.hal.client.configuration.subsystem.microprofile.MicroProfileConfigPresenter;
 import org.jboss.hal.client.configuration.subsystem.modcluster.Mbui_ModclusterView;
@@ -518,6 +520,11 @@ protected void configure() {
                 MailSessionView.class,
                 MailSessionPresenter.MyProxy.class);
 
+        bindPresenter(RemoteActiveMQPresenter.class,
+                RemoteActiveMQPresenter.MyView.class,
+                Mbui_RemoteActiveMQView.class,
+                RemoteActiveMQPresenter.MyProxy.class);
+
         bindPresenter(MessagingSubsystemPresenter.class,
                 MessagingSubsystemPresenter.MyView.class,
                 Mbui_MessagingSubsystemView.class,",2018-10-18T15:29:42Z,44
"@@ -23,6 +23,26 @@ interface AddressTemplates {
 
     String MESSAGING_SUBSYSTEM_ADDRESS = ""/{selected.profile}/subsystem=messaging-activemq"";
     AddressTemplate MESSAGING_SUBSYSTEM_TEMPLATE = AddressTemplate.of(MESSAGING_SUBSYSTEM_ADDRESS);
+    AddressTemplate SOCKET_BINDING_TEMPLATE = AddressTemplate.of(""/socket-binding-group=*/socket-binding=*"");
+
+    String CONNECTOR_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/connector=*"";
+    String IN_VM_CONNECTOR_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/in-vm-connector=*"";
+    String HTTP_CONNECTOR_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/http-connector=*"";
+    String REMOTE_CONNECTOR_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/remote-connector=*"";
+    String DISCOVERY_GROUP_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/discovery-group=*"";
+    String CONNECTION_FACTORY_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/connection-factory=*"";
+    String POOLED_CONNECTION_FACTORY_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/pooled-connection-factory=*"";
+    String EXTERNAL_JMS_QUEUE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/external-jms-queue=*"";
+    String EXTERNAL_JMS_TOPIC_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/external-jms-topic=*"";
+    AddressTemplate CONNECTOR_REMOTE_TEMPLATE = AddressTemplate.of(CONNECTOR_REMOTE_ADDRESS);
+    AddressTemplate IN_VM_CONNECTOR_REMOTE_TEMPLATE = AddressTemplate.of(IN_VM_CONNECTOR_REMOTE_ADDRESS);
+    AddressTemplate HTTP_CONNECTOR_REMOTE_TEMPLATE = AddressTemplate.of(HTTP_CONNECTOR_REMOTE_ADDRESS);
+    AddressTemplate REMOTE_CONNECTOR_REMOTE_TEMPLATE = AddressTemplate.of(REMOTE_CONNECTOR_REMOTE_ADDRESS);
+    AddressTemplate DISCOVERY_GROUP_REMOTE_TEMPLATE = AddressTemplate.of(DISCOVERY_GROUP_REMOTE_ADDRESS);
+    AddressTemplate CONNECTION_FACTORY_REMOTE_TEMPLATE = AddressTemplate.of(CONNECTION_FACTORY_REMOTE_ADDRESS);
+    AddressTemplate POOLED_CONNECTION_FACTORY_REMOTE_TEMPLATE = AddressTemplate.of(POOLED_CONNECTION_FACTORY_REMOTE_ADDRESS);
+    AddressTemplate EXTERNAL_JMS_QUEUE_TEMPLATE = AddressTemplate.of(EXTERNAL_JMS_QUEUE_ADDRESS);
+    AddressTemplate EXTERNAL_JMS_TOPIC_TEMPLATE = AddressTemplate.of(EXTERNAL_JMS_TOPIC_ADDRESS);
 
     String SERVER_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/server=*"";
     String SELECTED_SERVER_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/server="" + SELECTION_EXPRESSION;",2018-10-18T15:29:42Z,127
"@@ -49,6 +49,12 @@ public MessagingCategoryColumn(Finder finder,
                         .action(itemActionFactory.view(places.selectedProfile(NameTokens.MESSAGING).build()))
                         .onPreview(new MessagingSubsystemPreview(crud, resources))
                         .build(),
+                new StaticItem.Builder(resources.constants().remoteActiveMQServer())
+                        .id(Ids.MESSAGING_REMOTE_ACTIVEMQ)
+                        .action(itemActionFactory.view(places.selectedProfile(NameTokens.MESSAGING_REMOTE_ACTIVEMQ).build()))
+                        .onPreview(new PreviewContent<>(Names.MESSAGING_REMOTE_ACTIVEMQ,
+                                resources.previews().configurationMessagingRemoteActiveMQ()))
+                        .build(),
                 new StaticItem.Builder(Names.SERVER)
                         .nextColumn(Ids.MESSAGING_SERVER_CONFIGURATION)
                         .onPreview(new PreviewContent<>(Names.SERVER,",2018-10-18T15:29:42Z,128
"@@ -0,0 +1,229 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.messaging;
+
+import java.util.List;
+import java.util.Map;
+
+import javax.inject.Inject;
+
+import com.google.web.bindery.event.shared.EventBus;
+import com.gwtplatform.mvp.client.annotations.NameToken;
+import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
+import com.gwtplatform.mvp.client.proxy.ProxyPlace;
+import org.jboss.hal.ballroom.autocomplete.ReadChildrenAutoComplete;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.core.CrudOperations;
+import org.jboss.hal.core.finder.Finder;
+import org.jboss.hal.core.finder.FinderPath;
+import org.jboss.hal.core.finder.FinderPathFactory;
+import org.jboss.hal.core.mbui.MbuiPresenter;
+import org.jboss.hal.core.mbui.MbuiView;
+import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
+import org.jboss.hal.core.mbui.dialog.NameItem;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.core.mvp.SupportsExpertMode;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.MetadataRegistry;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.meta.token.NameTokens;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Requires;
+
+import static java.util.Arrays.asList;
+import static org.jboss.hal.client.configuration.subsystem.messaging.AddressTemplates.*;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
+
+public class RemoteActiveMQPresenter
+        extends MbuiPresenter<RemoteActiveMQPresenter.MyView, RemoteActiveMQPresenter.MyProxy>
+        implements SupportsExpertMode {
+
+    private MetadataRegistry metadataRegistry;
+    private final Dispatcher dispatcher;
+    private CrudOperations crud;
+    private FinderPathFactory finderPathFactory;
+    protected final StatementContext statementContext;
+    private Resources resources;
+
+    @Inject
+    public RemoteActiveMQPresenter(
+            EventBus eventBus,
+            RemoteActiveMQPresenter.MyView view,
+            RemoteActiveMQPresenter.MyProxy myProxy,
+            Finder finder,
+            MetadataRegistry metadataRegistry,
+            Dispatcher dispatcher,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext,
+            Resources resources) {
+        super(eventBus, view, myProxy, finder);
+        this.metadataRegistry = metadataRegistry;
+        this.dispatcher = dispatcher;
+        this.crud = crud;
+        this.finderPathFactory = finderPathFactory;
+        this.statementContext = statementContext;
+        this.resources = resources;
+    }
+
+    @Override
+    protected void onBind() {
+        super.onBind();
+        getView().setPresenter(this);
+    }
+
+    @Override
+    public ResourceAddress resourceAddress() {
+        return MESSAGING_SUBSYSTEM_TEMPLATE.resolve(statementContext);
+    }
+
+    @Override
+    public FinderPath finderPath() {
+        return finderPathFactory.configurationSubsystemPath(MESSAGING_ACTIVEMQ)
+                .append(Ids.MESSAGING_CATEGORY, Ids.MESSAGING_REMOTE_ACTIVEMQ,
+                        resources.constants().category(), Names.CONNECTIONS);
+    }
+
+    @Override
+    protected void reload() {
+        ResourceAddress address = MESSAGING_SUBSYSTEM_TEMPLATE.resolve(statementContext);
+        crud.readChildren(address, asList(CONNECTOR, IN_VM_CONNECTOR, HTTP_CONNECTOR, REMOTE_CONNECTOR, DISCOVERY_GROUP,
+                CONNECTION_FACTORY, POOLED_CONNECTION_FACTORY, EXTERNAL_JMS_QUEUE, EXTERNAL_JMS_TOPIC),
+                result -> {
+                    int i = 0;
+                    getView().updateConnector(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateInVmConnector(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateHttpConnector(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateRemoteConnector(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateDiscoveryGroup(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateConnectionFactory(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updatePooledConnectionFactory(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateExternalQueue(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateExternalTopic(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                });
+    }
+
+    void addHttpConnector() {
+        Metadata metadata = metadataRegistry.lookup(HTTP_CONNECTOR_REMOTE_TEMPLATE);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(HTTP_CONNECTOR, Ids.ADD), metadata)
+                .unboundFormItem(new NameItem(), 0)
+                .fromRequestProperties()
+                .requiredOnly()
+                .build();
+        form.getFormItem(SOCKET_BINDING).registerSuggestHandler(
+                new ReadChildrenAutoComplete(dispatcher, statementContext,
+                        AddressTemplate.of(""/socket-binding-group=*/socket-binding=*"")));
+
+        new AddResourceDialog(Names.HTTP_CONNECTOR, form, (name, model) -> {
+            crud.add(Names.HTTP_CONNECTOR, name, HTTP_CONNECTOR_REMOTE_TEMPLATE, model, (n, a) -> reload());
+        }).show();
+    }
+
+    void addRemoteConnector() {
+        Metadata metadata = metadataRegistry.lookup(REMOTE_CONNECTOR_REMOTE_TEMPLATE);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(REMOTE_CONNECTOR, Ids.ADD), metadata)
+                .unboundFormItem(new NameItem(), 0)
+                .fromRequestProperties()
+                .requiredOnly()
+                .build();
+        form.getFormItem(SOCKET_BINDING).registerSuggestHandler(
+                new ReadChildrenAutoComplete(dispatcher, statementContext,
+                        AddressTemplate.of(""/socket-binding-group=*/socket-binding=*"")));
+
+        new AddResourceDialog(Names.REMOTE_CONNECTOR, form, (name, model) -> {
+            crud.add(Names.REMOTE_CONNECTOR, name, REMOTE_CONNECTOR_REMOTE_TEMPLATE, model, (n, a) -> reload());
+        }).show();
+    }
+
+    void addConnectionFactory(RemoteActiveMQSubResource ssr) {
+        Metadata metadata = metadataRegistry.lookup(ssr.template);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(ssr.baseId, Ids.ADD), metadata)
+                .unboundFormItem(new NameItem(), 0)
+                .fromRequestProperties()
+                .include(ENTRIES, DISCOVERY_GROUP, CONNECTORS)
+                .unsorted()
+                .build();
+
+        List<AddressTemplate> connectors = asList(CONNECTOR_REMOTE_TEMPLATE, IN_VM_CONNECTOR_REMOTE_TEMPLATE,
+                HTTP_CONNECTOR_REMOTE_TEMPLATE, REMOTE_CONNECTOR_REMOTE_TEMPLATE);
+
+        form.getFormItem(CONNECTORS).registerSuggestHandler(
+                new ReadChildrenAutoComplete(dispatcher, statementContext, connectors));
+        form.getFormItem(DISCOVERY_GROUP).registerSuggestHandler(
+                new ReadChildrenAutoComplete(dispatcher, statementContext, DISCOVERY_GROUP_REMOTE_TEMPLATE));
+
+        new AddResourceDialog(resources.messages().addResourceTitle(ssr.type), form, (name, model) -> {
+            ResourceAddress address = ssr.template.resolve(statementContext, name);
+            crud.add(ssr.type, name, address, model, (n, a) -> reload());
+        }).show();
+    }
+
+    ResourceAddress pooledConnectionFactoryAddress(String resource) {
+        return resource != null ? POOLED_CONNECTION_FACTORY_REMOTE_TEMPLATE.resolve(statementContext, resource) : null;
+    }
+
+
+    void add(RemoteActiveMQSubResource ssr) {
+        ssr.add(metadataRegistry, statementContext, crud, resources, (n, a) -> reload());
+    }
+
+    void save(RemoteActiveMQSubResource ssr, Form<NamedNode> form, Map<String, Object> changedValues) {
+        ssr.save(form, changedValues, metadataRegistry, statementContext, crud, this::reload);
+    }
+
+    void reset(RemoteActiveMQSubResource ssr, Form<NamedNode> form) {
+        ssr.reset(form, metadataRegistry, statementContext, crud, new Form.FinishReset<NamedNode>(form) {
+            @Override
+            public void afterReset(final Form<NamedNode> form) {
+                reload();
+            }
+        });
+    }
+
+    void remove(RemoteActiveMQSubResource ssr, NamedNode item) {
+        ssr.remove(item, statementContext, crud, this::reload);
+    }
+    // @formatter:off
+    @ProxyCodeSplit
+    @Requires({CONNECTOR_REMOTE_ADDRESS, IN_VM_CONNECTOR_REMOTE_ADDRESS, HTTP_CONNECTOR_REMOTE_ADDRESS,
+            REMOTE_CONNECTOR_REMOTE_ADDRESS, DISCOVERY_GROUP_REMOTE_ADDRESS, CONNECTION_FACTORY_REMOTE_ADDRESS,
+            POOLED_CONNECTION_FACTORY_REMOTE_ADDRESS, EXTERNAL_JMS_QUEUE_ADDRESS, EXTERNAL_JMS_TOPIC_ADDRESS
+    })
+    @NameToken(NameTokens.MESSAGING_REMOTE_ACTIVEMQ)
+    public interface MyProxy extends ProxyPlace<RemoteActiveMQPresenter> {
+    }
+
+    public interface MyView extends MbuiView<RemoteActiveMQPresenter> {
+        void updateConnector(List<NamedNode> connectors);
+        void updateInVmConnector(List<NamedNode> inVmConnectors);
+        void updateHttpConnector(List<NamedNode> httpConnectors);
+        void updateRemoteConnector(List<NamedNode> remoteConnectors);
+        void updateDiscoveryGroup(List<NamedNode> connectorServices);
+        void updateConnectionFactory(List<NamedNode> connectionFactories);
+        void updatePooledConnectionFactory(List<NamedNode> pooledConnectionFactories);
+        void updateExternalQueue(List<NamedNode> nodes);
+        void updateExternalTopic(List<NamedNode> nodes);
+    }
+    // @formatter:on
+}",2018-10-18T15:29:42Z,129
"@@ -0,0 +1,111 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.messaging;
+
+import java.util.Map;
+
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.core.CrudOperations;
+import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
+import org.jboss.hal.dmr.ModelDescriptionConstants;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.MetadataRegistry;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Callback;
+
+import static org.jboss.hal.dmr.ModelDescriptionConstants.EXTERNAL_JMS_QUEUE;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.EXTERNAL_JMS_TOPIC;
+
+enum RemoteActiveMQSubResource {
+
+    CONNECTION_FACTORY(Ids.MESSAGING_CONNECTION_FACTORY, Names.CONNECTION_FACTORY,
+            ModelDescriptionConstants.CONNECTION_FACTORY, AddressTemplates.CONNECTION_FACTORY_REMOTE_TEMPLATE),
+
+    CONNECTOR(Ids.MESSAGING_CONNECTOR, Names.GENERIC_CONNECTOR,
+            ModelDescriptionConstants.CONNECTOR, AddressTemplates.CONNECTOR_REMOTE_TEMPLATE),
+
+    DISCOVERY_GROUP(Ids.MESSAGING_DISCOVERY_GROUP, Names.DISCOVERY_GROUP,
+            ModelDescriptionConstants.DISCOVERY_GROUP, AddressTemplates.DISCOVERY_GROUP_REMOTE_TEMPLATE),
+
+    EXTERNAL_QUEUE(EXTERNAL_JMS_QUEUE, Names.EXTERNAL_JMS_QUEUE,
+            EXTERNAL_JMS_QUEUE, AddressTemplates.EXTERNAL_JMS_QUEUE_TEMPLATE),
+
+    EXTERNAL_TOPIC(EXTERNAL_JMS_TOPIC, Names.EXTERNAL_JMS_TOPIC,
+            EXTERNAL_JMS_TOPIC, AddressTemplates.EXTERNAL_JMS_TOPIC_TEMPLATE),
+
+    HTTP_CONNECTOR(Ids.MESSAGING_HTTP_CONNECTOR, Names.HTTP_CONNECTOR,
+            ModelDescriptionConstants.HTTP_CONNECTOR, AddressTemplates.HTTP_CONNECTOR_REMOTE_TEMPLATE),
+
+    IN_VM_CONNECTOR(Ids.MESSAGING_IN_VM_CONNECTOR, Names.IN_VM_CONNECTOR,
+            ModelDescriptionConstants.IN_VM_CONNECTOR, AddressTemplates.IN_VM_CONNECTOR_REMOTE_TEMPLATE),
+
+    POOLED_CONNECTION_FACTORY(Ids.MESSAGING_POOLED_CONNECTION_FACTORY, Names.POOLED_CONNECTION_FACTORY,
+            ModelDescriptionConstants.POOLED_CONNECTION_FACTORY, AddressTemplates.POOLED_CONNECTION_FACTORY_REMOTE_TEMPLATE),
+
+    REMOTE_CONNECTOR(Ids.MESSAGING_REMOTE_CONNECTOR, Names.REMOTE_CONNECTOR,
+            ModelDescriptionConstants.REMOTE_CONNECTOR, AddressTemplates.REMOTE_CONNECTOR_REMOTE_TEMPLATE);
+
+
+    final String baseId;
+    final String type;
+    final String resource;
+    final AddressTemplate template;
+
+    RemoteActiveMQSubResource(final String baseId, final String type, final String resource, final AddressTemplate template) {
+        this.baseId = baseId;
+        this.type = type;
+        this.resource = resource;
+        this.template = template;
+    }
+
+    void add(MetadataRegistry metadataRegistry, StatementContext statementContext,
+            CrudOperations crud, Resources resources, CrudOperations.AddCallback callback) {
+        Metadata metadata = metadataRegistry.lookup(template);
+        new AddResourceDialog(Ids.build(baseId, Ids.ADD), resources.messages().addResourceTitle(type), metadata,
+                (name, model) -> {
+                    ResourceAddress address = template.resolve(statementContext, name);
+                    crud.add(type, name, address, model, callback);
+                }).show();
+    }
+
+    void save(Form<NamedNode> form, Map<String, Object> changedValues, MetadataRegistry metadataRegistry,
+            StatementContext statementContext, CrudOperations crud, Callback callback) {
+        String name = form.getModel().getName();
+        ResourceAddress address = template.resolve(statementContext, name);
+        Metadata metadata = metadataRegistry.lookup(template);
+        crud.save(type, name, address, changedValues, metadata, callback);
+    }
+
+    void reset(Form<NamedNode> form, MetadataRegistry metadataRegistry, StatementContext statementContext,
+            CrudOperations crud, Callback callback) {
+        String name = form.getModel().getName();
+        ResourceAddress address = template.resolve(statementContext, name);
+        Metadata metadata = metadataRegistry.lookup(template);
+        crud.reset(type, name, address, form, metadata, callback);
+    }
+
+    void remove(NamedNode item, StatementContext statementContext, CrudOperations crud, Callback callback) {
+        String name = item.getName();
+        ResourceAddress address = template.resolve(statementContext, name);
+        crud.remove(type, name, address, callback);
+    }
+}",2018-10-18T15:29:42Z,130
"@@ -0,0 +1,250 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.messaging;
+
+import java.util.List;
+
+import javax.annotation.PostConstruct;
+
+import elemental2.dom.HTMLElement;
+import org.jboss.hal.ballroom.Tabs;
+import org.jboss.hal.ballroom.VerticalNavigation;
+import org.jboss.hal.ballroom.autocomplete.ReadChildrenAutoComplete;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.table.Scope;
+import org.jboss.hal.ballroom.table.Table;
+import org.jboss.hal.core.elytron.CredentialReference;
+import org.jboss.hal.core.mbui.MbuiContext;
+import org.jboss.hal.core.mbui.MbuiViewImpl;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.core.mbui.form.RequireAtLeastOneAttributeValidation;
+import org.jboss.hal.core.mbui.table.ModelNodeTable;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.security.Constraint;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.spi.MbuiElement;
+import org.jboss.hal.spi.MbuiView;
+
+import static java.util.Arrays.asList;
+import static org.jboss.gwt.elemento.core.Elements.h;
+import static org.jboss.gwt.elemento.core.Elements.p;
+import static org.jboss.gwt.elemento.core.Elements.section;
+import static org.jboss.hal.client.configuration.subsystem.messaging.AddressTemplates.*;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafeGet;
+import static org.jboss.hal.resources.CSS.pfIcon;
+import static org.jboss.hal.resources.Ids.MESSAGING_REMOTE_ACTIVEMQ;
+
+@MbuiView
+public abstract class RemoteActiveMQView extends MbuiViewImpl<RemoteActiveMQPresenter>
+        implements RemoteActiveMQPresenter.MyView {
+
+    public static RemoteActiveMQView create(MbuiContext mbuiContext) {
+        return new Mbui_RemoteActiveMQView(mbuiContext);
+    }
+
+    @MbuiElement(""msg-remote-connection-vertical-navigation"") VerticalNavigation navigation;
+    @MbuiElement(""msg-remote-connector-table"") Table<NamedNode> connectorTable;
+    @MbuiElement(""msg-remote-connector-form"") Form<NamedNode> connectorForm;
+    @MbuiElement(""msg-remote-in-vm-connector-table"") Table<NamedNode> inVmConnectorTable;
+    @MbuiElement(""msg-remote-in-vm-connector-form"") Form<NamedNode> inVmConnectorForm;
+    @MbuiElement(""msg-remote-http-connector-table"") Table<NamedNode> httpConnectorTable;
+    @MbuiElement(""msg-remote-http-connector-form"") Form<NamedNode> httpConnectorForm;
+    @MbuiElement(""msg-remote-remote-connector-table"") Table<NamedNode> remoteConnectorTable;
+    @MbuiElement(""msg-remote-remote-connector-form"") Form<NamedNode> remoteConnectorForm;
+    @MbuiElement(""msg-remote-discovery-group-table"") Table<NamedNode> discoveryGroupTable;
+    @MbuiElement(""msg-remote-discovery-group-form"") Form<NamedNode> discoveryGroupForm;
+    @MbuiElement(""msg-remote-connection-factory-table"") Table<NamedNode> connectionFactoryTable;
+    @MbuiElement(""msg-remote-connection-factory-form"") Form<NamedNode> connectionFactoryForm;
+    @MbuiElement(""msg-remote-external-queue-table"") Table<NamedNode> externalQueueTable;
+    @MbuiElement(""msg-remote-external-queue-form"") Form<NamedNode> externalQueueForm;
+    @MbuiElement(""msg-remote-external-topic-table"") Table<NamedNode> externalTopicTable;
+    @MbuiElement(""msg-remote-external-topic-form"") Form<NamedNode> externalTopicForm;
+    private Table<NamedNode> pooledConnectionFactoryTable;
+    private Form<NamedNode> pooledConnectionFactoryForm;
+    private CredentialReference cr;
+    private Form<ModelNode> crForm;
+
+    RemoteActiveMQView(MbuiContext mbuiContext) {
+        super(mbuiContext);
+        cr = new CredentialReference(mbuiContext.eventBus(), mbuiContext.dispatcher(), mbuiContext.ca(),
+                mbuiContext.resources());
+    }
+
+    @PostConstruct
+    void init() {
+        Metadata metadata = mbuiContext.metadataRegistry().lookup(POOLED_CONNECTION_FACTORY_REMOTE_TEMPLATE);
+        crForm = cr.form(Ids.MESSAGING_REMOTE_ACTIVEMQ, metadata, CREDENTIAL_REFERENCE, PASSWORD,
+                () -> pooledConnectionFactoryForm.<String>getFormItem(PASSWORD).getValue(),
+                () -> presenter.pooledConnectionFactoryAddress(
+                        pooledConnectionFactoryTable.hasSelection() ? pooledConnectionFactoryTable.selectedRow()
+                                .getName() : null),
+                () -> presenter.reload());
+        crForm.addFormValidation(
+                new RequireAtLeastOneAttributeValidation<>(asList(STORE, CLEAR_TEXT), mbuiContext.resources()));
+
+        pooledConnectionFactoryTable = new ModelNodeTable.Builder<NamedNode>(
+                Ids.build(MESSAGING_REMOTE_ACTIVEMQ, POOLED_CONNECTION_FACTORY, Ids.TABLE), metadata)
+                .button(mbuiContext.resources().constants().add(),
+                        table -> presenter.addConnectionFactory(RemoteActiveMQSubResource.POOLED_CONNECTION_FACTORY),
+                        Constraint.executable(POOLED_CONNECTION_FACTORY_TEMPLATE, ADD))
+                .button(mbuiContext.resources().constants().remove(),
+                        table -> presenter.remove(RemoteActiveMQSubResource.POOLED_CONNECTION_FACTORY, table.selectedRow()),
+                        Scope.SELECTED,
+                        Constraint.executable(POOLED_CONNECTION_FACTORY_TEMPLATE, REMOVE))
+                .column(NAME, (cell, type, row, meta) -> row.getName())
+                .build();
+
+        pooledConnectionFactoryForm = new ModelNodeForm.Builder<NamedNode>(
+                Ids.build(Ids.MESSAGING_POOLED_CONNECTION_FACTORY, Ids.FORM), metadata)
+                .onSave((form, changedValues) -> presenter
+                        .save(RemoteActiveMQSubResource.POOLED_CONNECTION_FACTORY, form, changedValues))
+                .prepareReset(form -> presenter.reset(RemoteActiveMQSubResource.POOLED_CONNECTION_FACTORY, form))
+                .build();
+        pooledConnectionFactoryForm.addFormValidation(
+                new CredentialReference.AlternativeValidation<>(PASSWORD, () -> crForm.getModel(),
+                        mbuiContext.resources()));
+
+        Tabs tabs = new Tabs(Ids.build(Ids.MESSAGING_REMOTE_ACTIVEMQ, POOLED_CONNECTION_FACTORY, Ids.TAB_CONTAINER));
+        tabs.add(Ids.build(Ids.MESSAGING_REMOTE_ACTIVEMQ, POOLED_CONNECTION_FACTORY, ATTRIBUTES, Ids.TAB),
+                mbuiContext.resources().constants().attributes(), pooledConnectionFactoryForm.asElement());
+        tabs.add(Ids.build(Ids.MESSAGING_REMOTE_ACTIVEMQ, POOLED_CONNECTION_FACTORY, CREDENTIAL_REFERENCE, Ids.TAB),
+                Names.CREDENTIAL_REFERENCE, crForm.asElement());
+
+        HTMLElement htmlSection = section()
+                .add(h(1).textContent(Names.POOLED_CONNECTION_FACTORY))
+                .add(p().textContent(metadata.getDescription().getDescription()))
+                .add(pooledConnectionFactoryTable)
+                .add(tabs)
+                .asElement();
+
+        registerAttachable(pooledConnectionFactoryTable, pooledConnectionFactoryForm, crForm);
+
+        String primId = Ids.build(MESSAGING_REMOTE_ACTIVEMQ, POOLED_CONNECTION_FACTORY, Ids.ITEM);
+        navigation.insertPrimary(primId, null, Names.POOLED_CONNECTION_FACTORY, pfIcon(""replicator""), htmlSection);
+
+    }
+
+    @Override
+    public void attach() {
+        super.attach();
+
+        pooledConnectionFactoryTable.bindForm(pooledConnectionFactoryForm);
+        pooledConnectionFactoryTable.onSelectionChange(t -> {
+            if (t.hasSelection()) {
+                crForm.view(failSafeGet(t.selectedRow(), CREDENTIAL_REFERENCE));
+            }
+        });
+    }
+
+    @Override
+    public void setPresenter(RemoteActiveMQPresenter presenter) {
+        super.setPresenter(presenter);
+
+        // register the suggestion handlers here rather than in a @PostConstruct method
+        // they need a valid presenter reference!
+        List<AddressTemplate> connectors = asList(CONNECTOR_REMOTE_TEMPLATE, IN_VM_CONNECTOR_REMOTE_TEMPLATE,
+                HTTP_CONNECTOR_REMOTE_TEMPLATE, REMOTE_CONNECTOR_REMOTE_TEMPLATE);
+
+        connectionFactoryForm.getFormItem(CONNECTORS).registerSuggestHandler(
+                new ReadChildrenAutoComplete(mbuiContext.dispatcher(), presenter.statementContext, connectors));
+        connectionFactoryForm.getFormItem(DISCOVERY_GROUP).registerSuggestHandler(
+                new ReadChildrenAutoComplete(mbuiContext.dispatcher(), presenter.statementContext,
+                        DISCOVERY_GROUP_REMOTE_TEMPLATE));
+
+        pooledConnectionFactoryForm.getFormItem(CONNECTORS).registerSuggestHandler(
+                new ReadChildrenAutoComplete(mbuiContext.dispatcher(), presenter.statementContext, connectors));
+        pooledConnectionFactoryForm.getFormItem(DISCOVERY_GROUP).registerSuggestHandler(
+                new ReadChildrenAutoComplete(mbuiContext.dispatcher(), presenter.statementContext,
+                        DISCOVERY_GROUP_REMOTE_TEMPLATE));
+
+
+        connectorForm.getFormItem(SOCKET_BINDING).registerSuggestHandler(new ReadChildrenAutoComplete(
+                mbuiContext.dispatcher(), statementContext(), SOCKET_BINDING_TEMPLATE));
+
+        discoveryGroupForm.getFormItem(SOCKET_BINDING).registerSuggestHandler(new ReadChildrenAutoComplete(
+                mbuiContext.dispatcher(), statementContext(), SOCKET_BINDING_TEMPLATE));
+
+        remoteConnectorForm.getFormItem(SOCKET_BINDING).registerSuggestHandler(new ReadChildrenAutoComplete(
+                mbuiContext.dispatcher(), statementContext(), SOCKET_BINDING_TEMPLATE));
+
+        httpConnectorForm.getFormItem(SOCKET_BINDING).registerSuggestHandler(new ReadChildrenAutoComplete(
+                mbuiContext.dispatcher(), statementContext(), SOCKET_BINDING_TEMPLATE));
+    }
+
+    @Override
+    public void updateConnector(List<NamedNode> connectors) {
+        connectorForm.clear();
+        connectorTable.update(connectors);
+        navigation.updateBadge(""msg-remote-connector-item"", connectors.size());
+    }
+
+    @Override
+    public void updateInVmConnector(List<NamedNode> inVmConnectors) {
+        inVmConnectorForm.clear();
+        inVmConnectorTable.update(inVmConnectors);
+        navigation.updateBadge(""msg-remote-in-vm-connector-item"", inVmConnectors.size());
+    }
+
+    @Override
+    public void updateHttpConnector(List<NamedNode> httpConnectors) {
+        httpConnectorForm.clear();
+        httpConnectorTable.update(httpConnectors);
+        navigation.updateBadge(""msg-remote-http-connector-item"", httpConnectors.size());
+    }
+
+    @Override
+    public void updateRemoteConnector(List<NamedNode> remoteConnectors) {
+        remoteConnectorForm.clear();
+        remoteConnectorTable.update(remoteConnectors);
+        navigation.updateBadge(""msg-remote-remote-connector-item"", remoteConnectors.size());
+    }
+
+    @Override
+    public void updateDiscoveryGroup(List<NamedNode> nodes) {
+        discoveryGroupForm.clear();
+        discoveryGroupTable.update(nodes);
+    }
+
+    @Override
+    public void updateConnectionFactory(List<NamedNode> connectionFactories) {
+        connectionFactoryForm.clear();
+        connectionFactoryTable.update(connectionFactories);
+    }
+
+    @Override
+    public void updatePooledConnectionFactory(List<NamedNode> pooledConnectionFactories) {
+        crForm.clear();
+        pooledConnectionFactoryForm.clear();
+        pooledConnectionFactoryTable.update(pooledConnectionFactories);
+    }
+
+    @Override
+    public void updateExternalQueue(List<NamedNode> nodes) {
+        externalQueueForm.clear();
+        externalQueueTable.update(nodes);
+    }
+
+    @Override
+    public void updateExternalTopic(List<NamedNode> nodes) {
+        externalTopicForm.clear();
+        externalTopicTable.update(nodes);
+    }
+}",2018-10-18T15:29:42Z,131
"@@ -0,0 +1,207 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<?xml-model href=""https://raw.githubusercontent.com/hal/hal.next/develop/spi/src/main/resources/org/jboss/hal/spi/MbuiView.rng"" schematypens=""http://relaxng.org/ns/structure/1.0""?>
+<!--
+  ~ Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<view>
+    <vertical-navigation id=""msg-remote-connection-vertical-navigation"">
+
+        <item id=""msg-remote-connector-group-item"" title=""Connector"" icon=""fa fa-link"">
+            <sub-item id=""msg-remote-connector-item"" title=""Generic"">
+                <metadata address=""/{selected.profile}/subsystem=messaging-activemq/connector=*"">
+                    <h1>Generic Connector</h1>
+                    <p>${metadata.getDescription().getDescription()}</p>
+                    <table id=""msg-remote-connector-table"" title=""Generic Connector"" form-ref=""msg-remote-connector-form"">
+                        <actions>
+                            <action title=""${mbuiContext.resources().constants().add()}""
+                                    handler=""${presenter.add(RemoteActiveMQSubResource.CONNECTOR)}"" constraint=""add""/>
+                            <action title=""${mbuiContext.resources().constants().remove()}""
+                                    handler=""${presenter.remove(RemoteActiveMQSubResource.CONNECTOR, table.selectedRow())}""
+                                    scope=""selected"" constraint=""remove""/>
+                        </actions>
+                        <columns>
+                            <column name=""name"" value=""${row.getName()}""/>
+                        </columns>
+                    </table>
+                    <form id=""msg-remote-connector-form"" title=""Generic Connector""
+                          on-save=""${presenter.save(RemoteActiveMQSubResource.CONNECTOR, form, changedValues)}""
+                          prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.CONNECTOR, form)}""/>
+
+                </metadata>
+            </sub-item>
+            <sub-item id=""msg-remote-in-vm-connector-item"" title=""In VM"">
+                <metadata address=""/{selected.profile}/subsystem=messaging-activemq/in-vm-connector=*"">
+                    <h1>In VM Connector</h1>
+                    <p>${metadata.getDescription().getDescription()}</p>
+                    <table id=""msg-remote-in-vm-connector-table"" title=""In VM Connector""
+                           form-ref=""msg-remote-in-vm-connector-form"">
+                        <actions>
+                            <action title=""${mbuiContext.resources().constants().add()}""
+                                    handler=""${presenter.add(RemoteActiveMQSubResource.IN_VM_CONNECTOR)}"" constraint=""add""/>
+                            <action title=""${mbuiContext.resources().constants().remove()}""
+                                    handler=""${presenter.remove(RemoteActiveMQSubResource.IN_VM_CONNECTOR, table.selectedRow())}""
+                                    scope=""selected"" constraint=""remove""/>
+                        </actions>
+                        <columns>
+                            <column name=""name"" value=""${row.getName()}""/>
+                            <column name=""server-id""/>
+                        </columns>
+                    </table>
+                    <form id=""msg-remote-in-vm-connector-form"" title=""In VM Connector""
+                          on-save=""${presenter.save(RemoteActiveMQSubResource.IN_VM_CONNECTOR, form, changedValues)}""
+                          prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.IN_VM_CONNECTOR, form)}""/>
+                </metadata>
+            </sub-item>
+            <sub-item id=""msg-remote-http-connector-item"" title=""HTTP"">
+                <metadata address=""/{selected.profile}/subsystem=messaging-activemq/http-connector=*"">
+                    <h1>HTTP Connector</h1>
+                    <p>${metadata.getDescription().getDescription()}</p>
+                    <table id=""msg-remote-http-connector-table"" title=""HTTP Connector""
+                           form-ref=""msg-remote-http-connector-form"">
+                        <actions>
+                            <action title=""${mbuiContext.resources().constants().add()}""
+                                    handler=""${presenter.addHttpConnector()}"" constraint=""add""/>
+                            <action title=""${mbuiContext.resources().constants().remove()}""
+                                    handler=""${presenter.remove(RemoteActiveMQSubResource.HTTP_CONNECTOR, table.selectedRow())}""
+                                    scope=""selected"" constraint=""remove""/>
+                        </actions>
+                        <columns>
+                            <column name=""name"" value=""${row.getName()}""/>
+                        </columns>
+                    </table>
+                    <form id=""msg-remote-http-connector-form"" title=""HTTP Connector""
+                          on-save=""${presenter.save(RemoteActiveMQSubResource.HTTP_CONNECTOR, form, changedValues)}""
+                          prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.HTTP_CONNECTOR, form)}""/>
+                </metadata>
+            </sub-item>
+            <sub-item id=""msg-remote-remote-connector-item"" title=""Remote"">
+                <metadata address=""/{selected.profile}/subsystem=messaging-activemq/remote-connector=*"">
+                    <h1>Remote Connector</h1>
+                    <p>${metadata.getDescription().getDescription()}</p>
+                    <table id=""msg-remote-remote-connector-table"" title=""Remote Connector""
+                           form-ref=""msg-remote-remote-connector-form"">
+                        <actions>
+                            <action title=""${mbuiContext.resources().constants().add()}""
+                                    handler=""${presenter.addRemoteConnector()}""
+                                    constraint=""add""/>
+                            <action title=""${mbuiContext.resources().constants().remove()}""
+                                    handler=""${presenter.remove(RemoteActiveMQSubResource.REMOTE_CONNECTOR, table.selectedRow())}""
+                                    scope=""selected"" constraint=""remove""/>
+                        </actions>
+                        <columns>
+                            <column name=""name"" value=""${row.getName()}""/>
+                        </columns>
+                    </table>
+                    <form id=""msg-remote-remote-connector-form"" title=""Remote Connector""
+                          on-save=""${presenter.save(RemoteActiveMQSubResource.REMOTE_CONNECTOR, form, changedValues)}""
+                          prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.REMOTE_CONNECTOR, form)}"" />
+                </metadata>
+            </sub-item>
+        </item>
+
+        <item id=""msg-remote-discovery-group-item"" title=""Discovery Group"" icon=""pficon pficon-service"">
+            <metadata address=""/{selected.profile}/subsystem=messaging-activemq/discovery-group=*"">
+                <h1>Discovery Group</h1>
+                <p>${metadata.getDescription().getDescription()}</p>
+                <table id=""msg-remote-discovery-group-table"" title=""Discovery Group""
+                       form-ref=""msg-remote-discovery-group-form"">
+                    <actions>
+                        <action title=""${mbuiContext.resources().constants().add()}""
+                                handler=""${presenter.add(RemoteActiveMQSubResource.DISCOVERY_GROUP)}"" constraint=""add""/>
+                        <action title=""${mbuiContext.resources().constants().remove()}""
+                                handler=""${presenter.remove(RemoteActiveMQSubResource.DISCOVERY_GROUP, table.selectedRow())}""
+                                scope=""selected"" constraint=""remove""/>
+                    </actions>
+                    <columns>
+                        <column name=""name"" value=""${row.getName()}""/>
+                    </columns>
+                </table>
+                <form id=""msg-remote-discovery-group-form"" title=""Discovery Group""
+                      on-save=""${presenter.save(RemoteActiveMQSubResource.DISCOVERY_GROUP, form, changedValues)}""
+                      prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.DISCOVERY_GROUP, form)}"" />
+            </metadata>
+        </item>
+
+        <item id=""msg-remote-connection-factory-item"" title=""Connection Factory"" icon=""fa fa-cubes"">
+            <metadata address=""/{selected.profile}/subsystem=messaging-activemq/connection-factory=*"">
+                <h1>Connection Factory</h1>
+                <p>${metadata.getDescription().getDescription()}</p>
+                <table id=""msg-remote-connection-factory-table"" title=""Connection Factory""
+                       form-ref=""msg-remote-connection-factory-form"">
+                    <actions>
+                        <action title=""${mbuiContext.resources().constants().add()}""
+                                handler=""${presenter.addConnectionFactory(RemoteActiveMQSubResource.CONNECTION_FACTORY)}"" constraint=""add""/>
+                        <action title=""${mbuiContext.resources().constants().remove()}""
+                                handler=""${presenter.remove(RemoteActiveMQSubResource.CONNECTION_FACTORY, table.selectedRow())}""
+                                scope=""selected"" constraint=""remove""/>
+                    </actions>
+                    <columns>
+                        <column name=""name"" value=""${row.getName()}""/>
+                    </columns>
+                </table>
+                <form id=""msg-remote-connection-factory-form"" title=""Connection Factory""
+                      on-save=""${presenter.save(RemoteActiveMQSubResource.CONNECTION_FACTORY, form, changedValues)}""
+                      prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.CONNECTION_FACTORY, form)}""/>
+            </metadata>
+        </item>
+
+        <item id=""msg-remote-external-queue-item"" title=""External JMS Queue"" icon=""fa fa-long-arrow-right"">
+            <metadata address=""/{selected.profile}/subsystem=messaging-activemq/external-jms-queue=*"">
+                <h1>External JMS Queue</h1>
+                <p>${metadata.getDescription().getDescription()}</p>
+                <table id=""msg-remote-external-queue-table"" title=""External JMS Queue""
+                       form-ref=""msg-remote-external-queue-form"">
+                    <actions>
+                        <action title=""${mbuiContext.resources().constants().add()}""
+                                handler=""${presenter.add(RemoteActiveMQSubResource.EXTERNAL_QUEUE)}"" constraint=""add""/>
+                        <action title=""${mbuiContext.resources().constants().remove()}""
+                                handler=""${presenter.remove(RemoteActiveMQSubResource.EXTERNAL_QUEUE, table.selectedRow())}""
+                                scope=""selected"" constraint=""remove""/>
+                    </actions>
+                    <columns>
+                        <column name=""name"" value=""${row.getName()}""/>
+                    </columns>
+                </table>
+                <form id=""msg-remote-external-queue-form"" title=""External JMS Queue""
+                      on-save=""${presenter.save(RemoteActiveMQSubResource.EXTERNAL_QUEUE, form, changedValues)}""
+                      prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.EXTERNAL_QUEUE, form)}""/>
+            </metadata>
+        </item>
+
+        <item id=""msg-remote-external-topic-item"" title=""External JMS Topic"" icon=""fa fa-arrows"">
+            <metadata address=""/{selected.profile}/subsystem=messaging-activemq/external-jms-topic=*"">
+                <h1>External JMS Topic</h1>
+                <p>${metadata.getDescription().getDescription()}</p>
+                <table id=""msg-remote-external-topic-table"" title=""External JMS Topic""
+                       form-ref=""msg-remote-external-topic-form"">
+                    <actions>
+                        <action title=""${mbuiContext.resources().constants().add()}""
+                                handler=""${presenter.add(RemoteActiveMQSubResource.EXTERNAL_TOPIC)}"" constraint=""add""/>
+                        <action title=""${mbuiContext.resources().constants().remove()}""
+                                handler=""${presenter.remove(RemoteActiveMQSubResource.EXTERNAL_TOPIC, table.selectedRow())}""
+                                scope=""selected"" constraint=""remove""/>
+                    </actions>
+                    <columns>
+                        <column name=""name"" value=""${row.getName()}""/>
+                    </columns>
+                </table>
+                <form id=""msg-remote-external-topic-form"" title=""External JMS Topic""
+                      on-save=""${presenter.save(RemoteActiveMQSubResource.EXTERNAL_TOPIC, form, changedValues)}""
+                      prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.EXTERNAL_TOPIC, form)}""/>
+            </metadata>
+        </item>
+
+    </vertical-navigation>
+</view>
\ No newline at end of file",2018-10-18T15:29:42Z,132
"@@ -80,7 +80,7 @@ public void attach() {
             } else {
                 if (!Strings.isNullOrEmpty(stringValue)) {
                     try {
-                        Long value = Long.parseLong(stringValue);
+                        Long value = Long.parseLong(stringValue.trim());
                         modifyValue(value);
                         logger.debug(""modified value to {}"", value);
                     } catch (NumberFormatException ignored) {
@@ -177,10 +177,12 @@ class NumberValidation implements FormItemValidation<Long> {
 
         @Override
         public ValidationResult validate(Long value) {
-            if (!isExpressionValue() && !isEmpty()) {
+            // use the inputElement.value instead of isEmpty because the isEmpty evaluates the getValue() method
+            // the attach method already bind numbers only values, so this validation would always returns numbers only
+            if (!isExpressionValue() && inputElement.value != null) {
                 try {
                     //noinspection ResultOfMethodCallIgnored
-                    Long.parseLong(inputElement.value);
+                    Long.parseLong(inputElement.value.trim());
                     return ValidationResult.OK;
                 } catch (NumberFormatException e) {
                     return ValidationResult.invalid(CONSTANTS.notANumber());",2018-10-18T15:29:42Z,133
"@@ -294,6 +294,8 @@ public interface ModelDescriptionConstants {
     String EXPRESSION = ""expression"";
     String EXPRESSIONS_ALLOWED = ""expressions-allowed"";
     String EXTENSION_POINT = ""extension-point"";
+    String EXTERNAL_JMS_QUEUE = ""external-jms-queue"";
+    String EXTERNAL_JMS_TOPIC = ""external-jms-topic"";
     String FAILED = ""failed"";
     String FAILED_OPERATION = ""failed-operation"";
     String FAILED_SERVICES = ""failed-services"";",2018-10-18T15:29:42Z,109
"@@ -79,6 +79,7 @@ public interface NameTokens {
     String MANAGEMENT_INTERFACE = ""management-interface"";
     String MANAGEMENT_OPERATIONS = ""management-operations"";
     String MESSAGING = ""messaging"";
+    String MESSAGING_REMOTE_ACTIVEMQ = ""msg-remote-activemq"";
     String MESSAGING_SERVER = ""messaging-server"";
     String MESSAGING_SERVER_CONNECTION = ""messaging-server-connection"";
     String MESSAGING_SERVER_CLUSTERING = ""messaging-server-clustering"";",2018-10-18T15:29:42Z,46
"@@ -462,6 +462,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String reloadCRL();
     String reloadRequired();
     String reloadStandaloneTooltip();
+    String remoteActiveMQServer();
     String remoteAddress();
     String remove();
     String removeAlias();",2018-10-18T15:29:42Z,100
"@@ -493,6 +493,7 @@ public interface Ids {
     String MESSAGING_CORE_QUEUE = ""messaging-core-queue"";
     String MESSAGING_DISCOVERY_GROUP = ""messaging-discovery-group"";
     String MESSAGING_DIVERT = ""messaging-divert"";
+    String MESSAGING_REMOTE_ACTIVEMQ = ""msg-remote-activemq"";
     String MESSAGING_GLOBAL_SETTINGS = ""messaging-global-settings"";
     String MESSAGING_GROUPING_HANDLER = ""messaging-grouping-handler"";
     String MESSAGING_HA_CHOOSE_STRATEGY = ""messaging-ha-choose-strategy"";",2018-10-18T15:29:42Z,111
"@@ -116,6 +116,8 @@ public interface Names {
     String EXPIRATION = ""Expiration"";
     String EXTENSION = ""Extension"";
     String EXTENSIONS = ""Extensions"";
+    String EXTERNAL_JMS_QUEUE = ""External JMS Queue"";
+    String EXTERNAL_JMS_TOPIC = ""External JMS Topic"";
 
     String FACTORIES_TRANSFORMERS = ""Factories / Transformers"";
     String FILE = ""File"";
@@ -225,6 +227,7 @@ public interface Names {
     String MEMORY = ""Memory"";
     String MESSAGE_DRIVEN_BEAN = ""Message Driven Bean"";
     String MESSAGING = ""Messaging"";
+    String MESSAGING_REMOTE_ACTIVEMQ = ""Remote ActiveMQ"";
     String MIME_MAPPING = ""Mime Mapping"";
     String MINIMUM_PERMISSIONS = ""Minimum Permissions"";
     String MISSING_DEPENDENCIES = ""Missing Dependencies"";",2018-10-18T15:29:42Z,112
"@@ -154,6 +154,9 @@ public interface Previews extends ClientBundleWithLookup {
     @Source(""previews/configuration/messaging-destinations.html"")
     ExternalTextResource configurationMessagingDestinations();
 
+    @Source(""previews/configuration/messaging-remote-activemq.html"")
+    ExternalTextResource configurationMessagingRemoteActiveMQ();
+
     @Source(""previews/configuration/messaging-ha-policy.html"")
     ExternalTextResource configurationMessagingHaPolicy();
 ",2018-10-18T15:29:42Z,134
"@@ -420,6 +420,7 @@ reloadCRL=Reload CRL
 reloadRequired=Reload Required
 reloadStandaloneTooltip=The server configuration has changed. Click here to reload the server.
 remoteAddress=Remote Address
+remoteActiveMQServer=Remote ActiveMQ Server
 remove=Remove
 removeAlias=Remove Alias
 removeIdentity=Remove identity",2018-10-18T15:29:42Z,100
"@@ -418,6 +418,7 @@ reloadCRL=Recarregar CRL
 reloadRequired=Recarregamento necess\u00E1rio
 reloadStandaloneTooltip=A configura\u00E7\u00E3o do servidor foi alterada. Clique aqui para recarregar o servidor.
 remoteAddress=Endere\u00E7o remoto
+remoteActiveMQServer=Servidor ActiveMQ Remoto
 remove=Remover
 removeAlias=Remover alias
 removeContent=Remover Conte\u00FAdo",2018-10-18T15:29:42Z,100
"@@ -0,0 +1,26 @@
+<p>Contains the configuration for discover groups, connector, connection factory, queues and topics to a remote ActiveMQ Artemis server:</p>
+
+<h2>Connectors</h2>
+<p>A connector defines how to connect to a remote ActiveMQ Artemis server.</p>
+
+<p>For more information about connectors, see the
+    <a target=""_blank"" href=""https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.1/html/configuring_messaging/acceptors_and_connectors"">Connectors documentation</a>.
+</p>
+
+<h2>Discovery Groups</h2>
+<p>A discovery group defines how connector information is received from a broadcast endpoint, for example, a UDP multicast address or JGroup channel.</p>
+<p>A discovery group maintains a list of connectors, one for each broadcast by a different server. As it receives broadcasts on the broadcast endpoint from a particular server, it updates its entry in the list for that server. If it has not received a broadcast from a particular server for a length of time it will remove that server’s entry from its list.</p>
+
+
+<h2>Connection Factories</h2>
+<p>By default, the ${build.shortName} messaging subsystem provides the <code>InVmConnectionFactory</code> and
+    <code>RemoteConnectionFactory</code> connection factories, as well as the
+    <code>activemq-ra</code> pooled connection factory.
+</p>
+
+<p>Pooled connection factories allow you to configure the inbound and outbound connectors of the remote ActiveMQ Artemis resource adapter. For more information on configuring a pooled-connection-factory to connect to a remote ActiveMQ Artemis server, see
+    <a target=""_blank"" href=""https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.1/html/configuring_messaging/resource_adapters#use_provided_amq_adapter"">Using the Integrated Resource Adapter for Remote Connections</a>.
+</p>
+
+<h2>External Queue / Topic</h2>
+<p>The queues and topics that exists in the remote ActiveMQ Artemis server.</p>",2018-10-18T15:29:42Z,135
"@@ -65,7 +65,6 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(H2, DataSourceTemplate.Vendor.H2,
                 () -> {
                     DataSource dataSource = new DataSource(""H2DS"", false);
-                    dataSource.get(POOL_NAME).set(""H2DS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/H2DS"");
                     dataSource.get(DRIVER_NAME).set(H2);
                     dataSource.get(CONNECTION_URL).set(""jdbc:h2:mem:test;DB_CLOSE_DELAY=-1"");
@@ -78,9 +77,9 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(""h2-xa"", DataSourceTemplate.Vendor.H2,
                 () -> {
                     DataSource dataSource = new DataSource(""H2XADS"", true);
-                    dataSource.get(POOL_NAME).set(""H2DS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/H2XADS"");
                     dataSource.get(DRIVER_NAME).set(H2);
+                    dataSource.get(XA_DATASOURCE_CLASS).set(""org.h2.jdbcx.JdbcDataSource"");
                     dataSource.get(USER_NAME).set(SA);
                     dataSource.get(PASSWORD).set(SA);
                     dataSource.get(BACKGROUND_VALIDATION).set(false);
@@ -102,7 +101,6 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(POSTGRESQL, POSTGRE_SQL,
                 () -> {
                     DataSource dataSource = new DataSource(""PostgresDS"", false);
-                    dataSource.get(POOL_NAME).set(""PostgresDS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/PostgresDS"");
                     dataSource.get(DRIVER_NAME).set(POSTGRESQL);
                     dataSource.get(CONNECTION_URL).set(""jdbc:postgresql://localhost:5432/postgresdb"");
@@ -119,12 +117,12 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(""postgresql-xa"", POSTGRE_SQL,
                 () -> {
                     DataSource dataSource = new DataSource(""PostgresXADS"", true);
-                    dataSource.get(POOL_NAME).set(""PostgresXADS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/PostgresXADS"");
                     dataSource.get(DRIVER_NAME).set(POSTGRESQL);
                     dataSource.get(USER_NAME).set(ADMIN);
                     dataSource.get(PASSWORD).set(ADMIN);
                     dataSource.get(BACKGROUND_VALIDATION).set(true);
+                    dataSource.get(XA_DATASOURCE_CLASS).set(""org.postgresql.xa.PGXADataSource"");
                     dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
                             .set(""org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker"");
                     dataSource.get(EXCEPTION_SORTER_CLASS_NAME)
@@ -147,7 +145,6 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(MYSQL, DataSourceTemplate.Vendor.MYSQL,
                 () -> {
                     DataSource dataSource = new DataSource(""MySqlDS"", false);
-                    dataSource.get(POOL_NAME).set(""MySqlDS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/MySqlDS"");
                     dataSource.get(DRIVER_NAME).set(MYSQL);
                     dataSource.get(CONNECTION_URL).set(""jdbc:mysql://localhost:3306/mysqldb"");
@@ -164,12 +161,12 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(""mysql-xa"", DataSourceTemplate.Vendor.MYSQL,
                 () -> {
                     DataSource dataSource = new DataSource(""MysqlXADS"", true);
-                    dataSource.get(POOL_NAME).set(""MysqlXADS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/MysqlXADS"");
                     dataSource.get(DRIVER_NAME).set(MYSQL);
                     dataSource.get(USER_NAME).set(ADMIN);
                     dataSource.get(PASSWORD).set(ADMIN);
                     dataSource.get(BACKGROUND_VALIDATION).set(true);
+                    dataSource.get(XA_DATASOURCE_CLASS).set(""com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"");
                     dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
                             .set(""org.jboss.jca.adapters.jdbc.extensions.mysql.MySQLValidConnectionChecker"");
                     dataSource.get(EXCEPTION_SORTER_CLASS_NAME)
@@ -192,7 +189,6 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(ORACLE, DataSourceTemplate.Vendor.ORACLE,
                 () -> {
                     DataSource dataSource = new DataSource(""OracleDS"", false);
-                    dataSource.get(POOL_NAME).set(""OracleDS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/OracleDS"");
                     dataSource.get(DRIVER_NAME).set(ORACLE);
                     dataSource.get(CONNECTION_URL).set(""jdbc:oracle:thin:@localhost:1521:orcalesid"");
@@ -211,11 +207,11 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(""oracle-xa"", DataSourceTemplate.Vendor.ORACLE,
                 () -> {
                     DataSource dataSource = new DataSource(""XAOracleDS"", true);
-                    dataSource.get(POOL_NAME).set(""XAOracleDS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/XAOracleDS"");
                     dataSource.get(DRIVER_NAME).set(ORACLE);
                     dataSource.get(USER_NAME).set(ADMIN);
                     dataSource.get(PASSWORD).set(ADMIN);
+                    dataSource.get(XA_DATASOURCE_CLASS).set(""oracle.jdbc.xa.client.OracleXADataSource"");
                     dataSource.get(BACKGROUND_VALIDATION).set(true);
                     dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
                             .set(""org.jboss.jca.adapters.jdbc.extensions.oracle.OracleValidConnectionChecker"");
@@ -243,7 +239,6 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(SQLSERVER, SQL_SERVER,
                 () -> {
                     DataSource dataSource = new DataSource(""MSSQLDS"", false);
-                    dataSource.get(POOL_NAME).set(""MSSQLDS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/MSSQLDS"");
                     dataSource.get(DRIVER_NAME).set(SQLSERVER);
                     dataSource.get(CONNECTION_URL)
@@ -259,11 +254,11 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(""sqlserver-xa"", SQL_SERVER,
                 () -> {
                     DataSource dataSource = new DataSource(""MSSQLXADS"", true);
-                    dataSource.get(POOL_NAME).set(""MSSQLXADS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/MSSQLXADS"");
                     dataSource.get(DRIVER_NAME).set(SQLSERVER);
                     dataSource.get(USER_NAME).set(ADMIN);
                     dataSource.get(PASSWORD).set(ADMIN);
+                    dataSource.get(XA_DATASOURCE_CLASS).set(""com.microsoft.sqlserver.jdbc.SQLServerXADataSource"");
                     dataSource.get(BACKGROUND_VALIDATION).set(true);
                     dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
                             .set(""org.jboss.jca.adapters.jdbc.extensions.mssql.MSSQLValidConnectionChecker"");
@@ -286,7 +281,6 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(""db2"", DB2,
                 () -> {
                     DataSource dataSource = new DataSource(""DB2DS"", false);
-                    dataSource.get(POOL_NAME).set(""DB2DS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/DB2DS"");
                     dataSource.get(DRIVER_NAME).set(""ibmdb2"");
                     dataSource.get(CONNECTION_URL).set(""jdbc:db2:yourdatabase"");
@@ -307,11 +301,11 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(""db2-xa"", DB2,
                 () -> {
                     DataSource dataSource = new DataSource(""DB2XADS"", true);
-                    dataSource.get(POOL_NAME).set(""DB2XADS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/DB2XADS"");
                     dataSource.get(DRIVER_NAME).set(""ibmdb2"");
                     dataSource.get(USER_NAME).set(ADMIN);
                     dataSource.get(PASSWORD).set(ADMIN);
+                    dataSource.get(XA_DATASOURCE_CLASS).set(""COM.ibm.db2.jdbc.DB2XADataSource"");
                     dataSource.get(BACKGROUND_VALIDATION).set(true);
                     dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
                             .set(""org.jboss.jca.adapters.jdbc.extensions.db2.DB2ValidConnectionChecker"");
@@ -341,7 +335,6 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(SYBASE, DataSourceTemplate.Vendor.SYBASE,
                 () -> {
                     DataSource dataSource = new DataSource(""SybaseDB"", false);
-                    dataSource.get(POOL_NAME).set(""SybaseDB_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/SybaseDB"");
                     dataSource.get(DRIVER_NAME).set(SYBASE);
                     dataSource.get(CONNECTION_URL).set(""jdbc:sybase:Tds:localhost:5000/mydatabase?JCONNECT_VERSION=6"");
@@ -358,11 +351,11 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(""sybase-xa"", DataSourceTemplate.Vendor.SYBASE,
                 () -> {
                     DataSource dataSource = new DataSource(""SybaseXADS"", true);
-                    dataSource.get(POOL_NAME).set(""SybaseXADS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/SybaseXADS"");
                     dataSource.get(DRIVER_NAME).set(SYBASE);
                     dataSource.get(USER_NAME).set(ADMIN);
                     dataSource.get(PASSWORD).set(ADMIN);
+                    dataSource.get(XA_DATASOURCE_CLASS).set(""com.sybase.jdbc4.jdbc.SybXADataSource"");
                     dataSource.get(BACKGROUND_VALIDATION).set(true);
                     dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
                             .set(""org.jboss.jca.adapters.jdbc.extensions.sybase.SybaseValidConnectionChecker"");",2018-04-16T01:25:57Z,80
"@@ -62,45 +62,49 @@ public class DataSourceView extends HalViewImpl implements DataSourcePresenter.M
     static {
         // main attributes
         attributes.putAll(CONSTANTS.attributes(), asList(
-                new Attribute(JNDI_NAME),
+                new Attribute(""datasource-class"", NON_XA),
+                new Attribute(""driver-class"", NON_XA),
                 new Attribute(DRIVER_NAME),
                 new Attribute(ENABLED),
-                new Attribute(STATISTICS_ENABLED)
+                new Attribute(JNDI_NAME),
+                new Attribute(STATISTICS_ENABLED),
+                new Attribute(""xa-datasource-class"", XA)
         ));
 
         // connection
         //noinspection HardCodedStringLiteral,DuplicateStringLiteralInspection
         attributes.putAll(CONSTANTS.connection(), asList(
-                new Attribute(CONNECTION_URL, XA),
-                new Attribute(""url-delimiter""),
-                new Attribute(""url-selector-strategy-class-name""),
-                new Attribute(""new-connection-sql""),
+                new Attribute(CONNECTION_URL, NON_XA),
                 new Attribute(""connection-listener-class""),
                 new Attribute(""connection-listener-property""),
-                new Attribute(""transaction-isolation""),
-                new Attribute(""jta"", NON_XA),
-                new Attribute(""use-ccm""),
-                new Attribute(""same-rm-override"", XA),
                 new Attribute(""interleaving"", XA),
+                new Attribute(""jta"", NON_XA),
+                new Attribute(""new-connection-sql""),
                 new Attribute(""pad-xid"", XA),
+                new Attribute(""same-rm-override"", XA),
+                new Attribute(""transaction-isolation""),
+                new Attribute(""url-delimiter""),
+                new Attribute(""url-property"", XA),
+                new Attribute(""url-selector-strategy-class-name""),
+                new Attribute(""use-ccm""),
                 new Attribute(""wrap-xa-resource"", XA)
         ));
 
         // pool
         //noinspection HardCodedStringLiteral,DuplicateStringLiteralInspection
         attributes.putAll(CONSTANTS.pool(), asList(
-                new Attribute(MIN_POOL_SIZE),
                 new Attribute(""initial-pool-size""),
+                new Attribute(MIN_POOL_SIZE),
                 new Attribute(MAX_POOL_SIZE),
-                new Attribute(""pool-prefill""),
                 new Attribute(""flush-strategy""),
-                new Attribute(""pool-use-strict-min""),
                 new Attribute(""pool-fair""),
+                new Attribute(""pool-prefill""),
+                new Attribute(""pool-use-strict-min""),
                 new Attribute(""use-fast-fail""),
-                new Attribute(""capacity-decrementer-class""),
-                new Attribute(""capacity-decrementer-properties""),
                 new Attribute(""capacity-incrementer-class""),
                 new Attribute(""capacity-incrementer-properties""),
+                new Attribute(""capacity-decrementer-class""),
+                new Attribute(""capacity-decrementer-properties""),
                 new Attribute(""no-recovery"", XA),
                 new Attribute(""tx-separate-pool"", XA)
         ));
@@ -128,9 +132,9 @@ public class DataSourceView extends HalViewImpl implements DataSourcePresenter.M
         // validation
         //noinspection HardCodedStringLiteral,DuplicateStringLiteralInspection
         attributes.putAll(CONSTANTS.validation(), asList(
+                new Attribute(""check-valid-connection-sql""),
                 new Attribute(""valid-connection-checker-class-name""),
                 new Attribute(""valid-connection-checker-properties""),
-                new Attribute(""check-valid-connection-sql""),
                 new Attribute(""validate-on-match""),
                 new Attribute(""background-validation""),
                 new Attribute(""background-validation-millis""),",2018-04-16T01:25:57Z,80
"@@ -66,8 +66,8 @@ static Composite addOperation(Context context, StatementContext statementContext
         if (context.isXa()) {
 
             // remove unsupported attributes
-            payload.remove(POOL_NAME);
             payload.remove(DRIVER_CLASS);
+            payload.remove(DATASOURCE_CLASS);
             operations.add(new Operation.Builder(address, ADD).payload(context.dataSource).build());
 
             // add an operation for each property",2018-04-16T01:25:57Z,146
"@@ -236,7 +236,7 @@ public void showSuccess(final String title, final SafeHtml text,
 
     public void showSuccess(final String title, final SafeHtml text, final String successButton,
             SuccessAction<C> successAction, final boolean lastStep) {
-        showSuccess(title, text, successButton, successAction, null, true);
+        showSuccess(title, text, successButton, successAction, null, lastStep);
     }
 
     public void showSuccess(final String title, final SafeHtml text, final String successButton,",2018-04-16T01:25:57Z,226
"@@ -189,6 +189,7 @@ public interface ModelDescriptionConstants {
     String DATA_COLUMN = ""data-column"";
     String DATA_SOURCE = ""data-source"";
     String DATASOURCES = ""datasources"";
+    String DATASOURCE_CLASS = ""datasource-class"";
     String DEAD_LETTER_ADDRESS = ""dead-letter-address"";
     String DEFAULT = ""default"";
     String DEFAULT_BINDINGS = ""default-bindings"";
@@ -850,6 +851,7 @@ public interface ModelDescriptionConstants {
     String WSDL_URL = ""wsdl-url"";
     String X500_ATTRIBUTE_PRINCIPAL_DECODER = ""x500-attribute-principal-decoder"";
     String XA_DATA_SOURCE = ""xa-data-source"";
+    String XA_DATASOURCE_CLASS = ""xa-datasource-class"";
     String X509_CREDENTIAL_MAPPER = ""x509-credential-mapper"";
 }
 ",2018-04-16T01:25:57Z,109
"@@ -65,7 +65,6 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(H2, DataSourceTemplate.Vendor.H2,
                 () -> {
                     DataSource dataSource = new DataSource(""H2DS"", false);
-                    dataSource.get(POOL_NAME).set(""H2DS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/H2DS"");
                     dataSource.get(DRIVER_NAME).set(H2);
                     dataSource.get(CONNECTION_URL).set(""jdbc:h2:mem:test;DB_CLOSE_DELAY=-1"");
@@ -78,9 +77,9 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(""h2-xa"", DataSourceTemplate.Vendor.H2,
                 () -> {
                     DataSource dataSource = new DataSource(""H2XADS"", true);
-                    dataSource.get(POOL_NAME).set(""H2DS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/H2XADS"");
                     dataSource.get(DRIVER_NAME).set(H2);
+                    dataSource.get(XA_DATASOURCE_CLASS).set(""org.h2.jdbcx.JdbcDataSource"");
                     dataSource.get(USER_NAME).set(SA);
                     dataSource.get(PASSWORD).set(SA);
                     dataSource.get(BACKGROUND_VALIDATION).set(false);
@@ -102,7 +101,6 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(POSTGRESQL, POSTGRE_SQL,
                 () -> {
                     DataSource dataSource = new DataSource(""PostgresDS"", false);
-                    dataSource.get(POOL_NAME).set(""PostgresDS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/PostgresDS"");
                     dataSource.get(DRIVER_NAME).set(POSTGRESQL);
                     dataSource.get(CONNECTION_URL).set(""jdbc:postgresql://localhost:5432/postgresdb"");
@@ -119,12 +117,12 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(""postgresql-xa"", POSTGRE_SQL,
                 () -> {
                     DataSource dataSource = new DataSource(""PostgresXADS"", true);
-                    dataSource.get(POOL_NAME).set(""PostgresXADS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/PostgresXADS"");
                     dataSource.get(DRIVER_NAME).set(POSTGRESQL);
                     dataSource.get(USER_NAME).set(ADMIN);
                     dataSource.get(PASSWORD).set(ADMIN);
                     dataSource.get(BACKGROUND_VALIDATION).set(true);
+                    dataSource.get(XA_DATASOURCE_CLASS).set(""org.postgresql.xa.PGXADataSource"");
                     dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
                             .set(""org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker"");
                     dataSource.get(EXCEPTION_SORTER_CLASS_NAME)
@@ -147,7 +145,6 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(MYSQL, DataSourceTemplate.Vendor.MYSQL,
                 () -> {
                     DataSource dataSource = new DataSource(""MySqlDS"", false);
-                    dataSource.get(POOL_NAME).set(""MySqlDS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/MySqlDS"");
                     dataSource.get(DRIVER_NAME).set(MYSQL);
                     dataSource.get(CONNECTION_URL).set(""jdbc:mysql://localhost:3306/mysqldb"");
@@ -164,12 +161,12 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(""mysql-xa"", DataSourceTemplate.Vendor.MYSQL,
                 () -> {
                     DataSource dataSource = new DataSource(""MysqlXADS"", true);
-                    dataSource.get(POOL_NAME).set(""MysqlXADS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/MysqlXADS"");
                     dataSource.get(DRIVER_NAME).set(MYSQL);
                     dataSource.get(USER_NAME).set(ADMIN);
                     dataSource.get(PASSWORD).set(ADMIN);
                     dataSource.get(BACKGROUND_VALIDATION).set(true);
+                    dataSource.get(XA_DATASOURCE_CLASS).set(""com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"");
                     dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
                             .set(""org.jboss.jca.adapters.jdbc.extensions.mysql.MySQLValidConnectionChecker"");
                     dataSource.get(EXCEPTION_SORTER_CLASS_NAME)
@@ -192,7 +189,6 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(ORACLE, DataSourceTemplate.Vendor.ORACLE,
                 () -> {
                     DataSource dataSource = new DataSource(""OracleDS"", false);
-                    dataSource.get(POOL_NAME).set(""OracleDS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/OracleDS"");
                     dataSource.get(DRIVER_NAME).set(ORACLE);
                     dataSource.get(CONNECTION_URL).set(""jdbc:oracle:thin:@localhost:1521:orcalesid"");
@@ -211,11 +207,11 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(""oracle-xa"", DataSourceTemplate.Vendor.ORACLE,
                 () -> {
                     DataSource dataSource = new DataSource(""XAOracleDS"", true);
-                    dataSource.get(POOL_NAME).set(""XAOracleDS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/XAOracleDS"");
                     dataSource.get(DRIVER_NAME).set(ORACLE);
                     dataSource.get(USER_NAME).set(ADMIN);
                     dataSource.get(PASSWORD).set(ADMIN);
+                    dataSource.get(XA_DATASOURCE_CLASS).set(""oracle.jdbc.xa.client.OracleXADataSource"");
                     dataSource.get(BACKGROUND_VALIDATION).set(true);
                     dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
                             .set(""org.jboss.jca.adapters.jdbc.extensions.oracle.OracleValidConnectionChecker"");
@@ -243,7 +239,6 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(SQLSERVER, SQL_SERVER,
                 () -> {
                     DataSource dataSource = new DataSource(""MSSQLDS"", false);
-                    dataSource.get(POOL_NAME).set(""MSSQLDS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/MSSQLDS"");
                     dataSource.get(DRIVER_NAME).set(SQLSERVER);
                     dataSource.get(CONNECTION_URL)
@@ -259,11 +254,11 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(""sqlserver-xa"", SQL_SERVER,
                 () -> {
                     DataSource dataSource = new DataSource(""MSSQLXADS"", true);
-                    dataSource.get(POOL_NAME).set(""MSSQLXADS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/MSSQLXADS"");
                     dataSource.get(DRIVER_NAME).set(SQLSERVER);
                     dataSource.get(USER_NAME).set(ADMIN);
                     dataSource.get(PASSWORD).set(ADMIN);
+                    dataSource.get(XA_DATASOURCE_CLASS).set(""com.microsoft.sqlserver.jdbc.SQLServerXADataSource"");
                     dataSource.get(BACKGROUND_VALIDATION).set(true);
                     dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
                             .set(""org.jboss.jca.adapters.jdbc.extensions.mssql.MSSQLValidConnectionChecker"");
@@ -286,7 +281,6 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(""db2"", DB2,
                 () -> {
                     DataSource dataSource = new DataSource(""DB2DS"", false);
-                    dataSource.get(POOL_NAME).set(""DB2DS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/DB2DS"");
                     dataSource.get(DRIVER_NAME).set(""ibmdb2"");
                     dataSource.get(CONNECTION_URL).set(""jdbc:db2:yourdatabase"");
@@ -307,11 +301,11 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(""db2-xa"", DB2,
                 () -> {
                     DataSource dataSource = new DataSource(""DB2XADS"", true);
-                    dataSource.get(POOL_NAME).set(""DB2XADS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/DB2XADS"");
                     dataSource.get(DRIVER_NAME).set(""ibmdb2"");
                     dataSource.get(USER_NAME).set(ADMIN);
                     dataSource.get(PASSWORD).set(ADMIN);
+                    dataSource.get(XA_DATASOURCE_CLASS).set(""COM.ibm.db2.jdbc.DB2XADataSource"");
                     dataSource.get(BACKGROUND_VALIDATION).set(true);
                     dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
                             .set(""org.jboss.jca.adapters.jdbc.extensions.db2.DB2ValidConnectionChecker"");
@@ -341,7 +335,6 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(SYBASE, DataSourceTemplate.Vendor.SYBASE,
                 () -> {
                     DataSource dataSource = new DataSource(""SybaseDB"", false);
-                    dataSource.get(POOL_NAME).set(""SybaseDB_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/SybaseDB"");
                     dataSource.get(DRIVER_NAME).set(SYBASE);
                     dataSource.get(CONNECTION_URL).set(""jdbc:sybase:Tds:localhost:5000/mydatabase?JCONNECT_VERSION=6"");
@@ -358,11 +351,11 @@ public DataSourceTemplates() {
         setup.add(new DataSourceTemplate(""sybase-xa"", DataSourceTemplate.Vendor.SYBASE,
                 () -> {
                     DataSource dataSource = new DataSource(""SybaseXADS"", true);
-                    dataSource.get(POOL_NAME).set(""SybaseXADS_Pool"");
                     dataSource.get(JNDI_NAME).set(""java:/SybaseXADS"");
                     dataSource.get(DRIVER_NAME).set(SYBASE);
                     dataSource.get(USER_NAME).set(ADMIN);
                     dataSource.get(PASSWORD).set(ADMIN);
+                    dataSource.get(XA_DATASOURCE_CLASS).set(""com.sybase.jdbc4.jdbc.SybXADataSource"");
                     dataSource.get(BACKGROUND_VALIDATION).set(true);
                     dataSource.get(VALID_CONNECTION_CHECKER_CLASS_NAME)
                             .set(""org.jboss.jca.adapters.jdbc.extensions.sybase.SybaseValidConnectionChecker"");",2018-04-16T01:25:57Z,80
"@@ -62,45 +62,49 @@ public class DataSourceView extends HalViewImpl implements DataSourcePresenter.M
     static {
         // main attributes
         attributes.putAll(CONSTANTS.attributes(), asList(
-                new Attribute(JNDI_NAME),
+                new Attribute(""datasource-class"", NON_XA),
+                new Attribute(""driver-class"", NON_XA),
                 new Attribute(DRIVER_NAME),
                 new Attribute(ENABLED),
-                new Attribute(STATISTICS_ENABLED)
+                new Attribute(JNDI_NAME),
+                new Attribute(STATISTICS_ENABLED),
+                new Attribute(""xa-datasource-class"", XA)
         ));
 
         // connection
         //noinspection HardCodedStringLiteral,DuplicateStringLiteralInspection
         attributes.putAll(CONSTANTS.connection(), asList(
-                new Attribute(CONNECTION_URL, XA),
-                new Attribute(""url-delimiter""),
-                new Attribute(""url-selector-strategy-class-name""),
-                new Attribute(""new-connection-sql""),
+                new Attribute(CONNECTION_URL, NON_XA),
                 new Attribute(""connection-listener-class""),
                 new Attribute(""connection-listener-property""),
-                new Attribute(""transaction-isolation""),
-                new Attribute(""jta"", NON_XA),
-                new Attribute(""use-ccm""),
-                new Attribute(""same-rm-override"", XA),
                 new Attribute(""interleaving"", XA),
+                new Attribute(""jta"", NON_XA),
+                new Attribute(""new-connection-sql""),
                 new Attribute(""pad-xid"", XA),
+                new Attribute(""same-rm-override"", XA),
+                new Attribute(""transaction-isolation""),
+                new Attribute(""url-delimiter""),
+                new Attribute(""url-property"", XA),
+                new Attribute(""url-selector-strategy-class-name""),
+                new Attribute(""use-ccm""),
                 new Attribute(""wrap-xa-resource"", XA)
         ));
 
         // pool
         //noinspection HardCodedStringLiteral,DuplicateStringLiteralInspection
         attributes.putAll(CONSTANTS.pool(), asList(
-                new Attribute(MIN_POOL_SIZE),
                 new Attribute(""initial-pool-size""),
+                new Attribute(MIN_POOL_SIZE),
                 new Attribute(MAX_POOL_SIZE),
-                new Attribute(""pool-prefill""),
                 new Attribute(""flush-strategy""),
-                new Attribute(""pool-use-strict-min""),
                 new Attribute(""pool-fair""),
+                new Attribute(""pool-prefill""),
+                new Attribute(""pool-use-strict-min""),
                 new Attribute(""use-fast-fail""),
-                new Attribute(""capacity-decrementer-class""),
-                new Attribute(""capacity-decrementer-properties""),
                 new Attribute(""capacity-incrementer-class""),
                 new Attribute(""capacity-incrementer-properties""),
+                new Attribute(""capacity-decrementer-class""),
+                new Attribute(""capacity-decrementer-properties""),
                 new Attribute(""no-recovery"", XA),
                 new Attribute(""tx-separate-pool"", XA)
         ));
@@ -128,9 +132,9 @@ public class DataSourceView extends HalViewImpl implements DataSourcePresenter.M
         // validation
         //noinspection HardCodedStringLiteral,DuplicateStringLiteralInspection
         attributes.putAll(CONSTANTS.validation(), asList(
+                new Attribute(""check-valid-connection-sql""),
                 new Attribute(""valid-connection-checker-class-name""),
                 new Attribute(""valid-connection-checker-properties""),
-                new Attribute(""check-valid-connection-sql""),
                 new Attribute(""validate-on-match""),
                 new Attribute(""background-validation""),
                 new Attribute(""background-validation-millis""),",2018-04-16T01:25:57Z,80
"@@ -66,8 +66,8 @@ static Composite addOperation(Context context, StatementContext statementContext
         if (context.isXa()) {
 
             // remove unsupported attributes
-            payload.remove(POOL_NAME);
             payload.remove(DRIVER_CLASS);
+            payload.remove(DATASOURCE_CLASS);
             operations.add(new Operation.Builder(address, ADD).payload(context.dataSource).build());
 
             // add an operation for each property",2018-04-16T01:25:57Z,146
"@@ -236,7 +236,7 @@ public void showSuccess(final String title, final SafeHtml text,
 
     public void showSuccess(final String title, final SafeHtml text, final String successButton,
             SuccessAction<C> successAction, final boolean lastStep) {
-        showSuccess(title, text, successButton, successAction, null, true);
+        showSuccess(title, text, successButton, successAction, null, lastStep);
     }
 
     public void showSuccess(final String title, final SafeHtml text, final String successButton,",2018-04-16T01:25:57Z,226
"@@ -189,6 +189,7 @@ public interface ModelDescriptionConstants {
     String DATA_COLUMN = ""data-column"";
     String DATA_SOURCE = ""data-source"";
     String DATASOURCES = ""datasources"";
+    String DATASOURCE_CLASS = ""datasource-class"";
     String DEAD_LETTER_ADDRESS = ""dead-letter-address"";
     String DEFAULT = ""default"";
     String DEFAULT_BINDINGS = ""default-bindings"";
@@ -850,6 +851,7 @@ public interface ModelDescriptionConstants {
     String WSDL_URL = ""wsdl-url"";
     String X500_ATTRIBUTE_PRINCIPAL_DECODER = ""x500-attribute-principal-decoder"";
     String XA_DATA_SOURCE = ""xa-data-source"";
+    String XA_DATASOURCE_CLASS = ""xa-datasource-class"";
     String X509_CREDENTIAL_MAPPER = ""x509-credential-mapper"";
 }
 ",2018-04-16T01:25:57Z,109
"@@ -43,14 +43,16 @@
 import org.jboss.hal.spi.Footer;
 import org.jboss.hal.spi.Requires;
 
+import static org.jboss.hal.client.runtime.BrowseByColumn.HOST_ADDRESS;
 import static org.jboss.hal.client.runtime.BrowseByColumn.SERVER_CONFIG_ADDRESS;
 import static org.jboss.hal.client.runtime.BrowseByColumn.SERVER_GROUP_ADDRESS;
 
 @Column(Ids.DOMAIN_BROWSE_BY)
-@Requires(value = {SERVER_GROUP_ADDRESS, SERVER_CONFIG_ADDRESS}, recursive = false)
+@Requires(value = {HOST_ADDRESS, SERVER_GROUP_ADDRESS, SERVER_CONFIG_ADDRESS}, recursive = false)
 public class BrowseByColumn extends StaticItemColumn {
 
     // necessary for the constraints in topology preview
+    static final String HOST_ADDRESS = ""/host=*"";
     static final String SERVER_GROUP_ADDRESS = ""/server-group=*"";
     static final String SERVER_CONFIG_ADDRESS = ""/host=*/server-config=*"";
 ",2018-08-06T18:01:14Z,208
"@@ -447,7 +447,7 @@ private HTMLElement buildTable(List<Host> hosts, List<ServerGroup> serverGroups,
             }
         }
         table.appendChild(tbody);
-        // </tbody> @formatter:on
+        // </tbody>
 
         return table;
     }",2018-08-06T18:01:14Z,227
"@@ -63,13 +63,13 @@ public CoreStatementContext(Environment environment, EventBus eventBus) {
         eventBus.addHandler(ServerSelectionEvent.getType(), this);
     }
 
-    public String resolve(final String resource) {
+    public String resolve(String resource) {
         // not supported
         return null;
     }
 
     @Override
-    public String[] resolveTuple(final String placeholder) {
+    public String[] resolveTuple(String placeholder) {
         if (!environment.isStandalone()) {
             Tuple validTuple = Tuple.from(placeholder);
             if (validTuple != null) {
@@ -87,25 +87,25 @@ public String[] resolveTuple(final String placeholder) {
     }
 
     @Override
-    public void onProfileSelection(final ProfileSelectionEvent event) {
+    public void onProfileSelection(ProfileSelectionEvent event) {
         context.put(SELECTED_PROFILE, event.getProfile());
         logger.info(""Selected profile {}"", event.getProfile());
     }
 
     @Override
-    public void onServerGroupSelection(final ServerGroupSelectionEvent event) {
+    public void onServerGroupSelection(ServerGroupSelectionEvent event) {
         context.put(SELECTED_GROUP, event.getServerGroup());
         logger.info(""Selected server-group {}"", event.getServerGroup());
     }
 
     @Override
-    public void onHostSelection(final HostSelectionEvent event) {
+    public void onHostSelection(HostSelectionEvent event) {
         context.put(SELECTED_HOST, event.getHost());
         logger.info(""Selected host {}"", event.getHost());
     }
 
     @Override
-    public void onServerSelection(final ServerSelectionEvent event) {
+    public void onServerSelection(ServerSelectionEvent event) {
         context.put(SELECTED_SERVER_CONFIG, event.getServer());
         context.put(SELECTED_SERVER, event.getServer());
         logger.info(""Selected server {}"", event.getServer());",2018-08-06T18:01:14Z,12
"@@ -71,7 +71,6 @@ class FinderRow<T> implements IsElement {
             boolean pinned,
             ItemDisplay<T> display,
             PreviewCallback<T> previewCallback) {
-
         this.finder = finder;
         this.column = column;
         this.display = display;",2018-08-06T18:01:14Z,97
"@@ -23,18 +23,18 @@
 
 public class SecurityContextStatementContext extends FilteringStatementContext {
 
-    public SecurityContextStatementContext(final StatementContext delegate, final Environment environment) {
+    public SecurityContextStatementContext(StatementContext delegate, Environment environment) {
         super(delegate, new Filter() {
             @Override
-            public String filter(final String placeholder) {
+            public String filter(String placeholder) {
                 if (SELECTION_KEY.equals(placeholder)) {
                     return ""*"";
                 }
                 return delegate.resolve(placeholder);
             }
 
             @Override
-            public String[] filterTuple(final String placeholder) {
+            public String[] filterTuple(String placeholder) {
                 if (!environment.isStandalone()) {
                     Tuple t = Tuple.from(placeholder);
                     if (t != null) {",2018-08-06T18:01:14Z,42
"@@ -107,8 +107,8 @@ public DestinationColumn(Finder finder,
                     .findAny()
                     .map(FinderSegment::getItemId);
             if (optional.isPresent()) {
-                // Extract the server name from the item id ""msg-server-<server name>""
-                String server = substringAfterLast(optional.get(), Ids.MESSAGING_SERVER + ""-"");
+                // Extract the server name from the item id ""msgs-<server name>""
+                String server = substringAfterLast(optional.get(), ""msgs-"");
                 List<Operation> operations = new ArrayList<>();
                 for (Type type : SUBSYSTEM_RESOURCES) {
                     ResourceAddress address = MESSAGING_SERVER_TEMPLATE.append(type.resource + ""=*"")",2017-12-22T13:10:34Z,228
"@@ -67,12 +67,12 @@ public class ListenerColumn extends FinderColumn<NamedNode> {
     private StatementContext statementContext;
 
     @Inject
-    public ListenerColumn(final Finder finder,
-            final ColumnActionFactory columnActionFactory,
-            final Dispatcher dispatcher,
-            final Resources resources,
-            final EventBus eventBus,
-            final StatementContext statementContext) {
+    public ListenerColumn(Finder finder,
+            ColumnActionFactory columnActionFactory,
+            Dispatcher dispatcher,
+            Resources resources,
+            EventBus eventBus,
+            StatementContext statementContext) {
 
         super(new Builder<NamedNode>(finder, Ids.UNDERTOW_RUNTIME_LISTENER, Names.LISTENER)
                 .columnAction(columnActionFactory.refresh(Ids.UNDERTOW_LISTENER_REFRESH))
@@ -84,8 +84,8 @@ public ListenerColumn(final Finder finder,
                             .findAny()
                             .map(FinderSegment::getItemId);
                     if (optional.isPresent()) {
-                        // Extract the server name from the item id ""undertow-server-<server name>""
-                        String server = substringAfterLast(optional.get(), Ids.UNDERTOW_SERVER + ""-"");
+                        // Extract the server name from the item id ""us-<server name>""
+                        String server = substringAfterLast(optional.get(), ""us-"");
                         ResourceAddress address = WEB_SERVER_TEMPLATE.resolve(statementContext, server);
 
                         Operation opAjp = new Operation.Builder(address, READ_CHILDREN_RESOURCES_OPERATION)
@@ -162,7 +162,7 @@ public List<ItemAction<NamedNode>> actions() {
         });
     }
 
-    private void resetStatistics(final NamedNode item) {
+    private void resetStatistics(NamedNode item) {
 
         DialogFactory.showConfirmation(resources.messages().resetStatisticsTitle(),
                 resources.messages().resetStatisticsQuestion(item.getName()), () -> {",2017-12-22T13:10:34Z,58
"@@ -45,6 +45,8 @@
 import org.jboss.hal.client.configuration.subsystem.datasource.DataSourceTemplates;
 import org.jboss.hal.client.configuration.subsystem.deploymentscanner.DeploymentScannerPresenter;
 import org.jboss.hal.client.configuration.subsystem.deploymentscanner.Mbui_DeploymentScannerView;
+import org.jboss.hal.client.configuration.subsystem.distributableweb.DistributableWebPresenter;
+import org.jboss.hal.client.configuration.subsystem.distributableweb.Mbui_DistributableWebView;
 import org.jboss.hal.client.configuration.subsystem.ee.EEPresenter;
 import org.jboss.hal.client.configuration.subsystem.ee.EEView;
 import org.jboss.hal.client.configuration.subsystem.elytron.ElytronSubsystemPresenter;
@@ -334,6 +336,11 @@ protected void configure() {
                 Mbui_DestinationView.class,
                 DestinationPresenter.MyProxy.class);
 
+        bindPresenter(DistributableWebPresenter.class,
+                DistributableWebPresenter.MyView.class,
+                Mbui_DistributableWebView.class,
+                DistributableWebPresenter.MyProxy.class);
+
         bindPresenter(DistributedCachePresenter.class,
                 DistributedCachePresenter.MyView.class,
                 DistributedCacheView.class,",2019-08-20T19:10:58Z,44
"@@ -0,0 +1,25 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.distributableweb;
+
+import org.jboss.hal.meta.AddressTemplate;
+
+interface AddressTemplates {
+
+    String DISTRIBUTABLE_WEB_ADDRESS = ""/{selected.profile}/subsystem=distributable-web"";
+
+    AddressTemplate DISTRIBUTABLE_WEB_TEMPLATE = AddressTemplate.of(DISTRIBUTABLE_WEB_ADDRESS);
+}",2019-08-20T19:10:58Z,229
"@@ -0,0 +1,186 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.distributableweb;
+
+import java.util.List;
+import java.util.Map;
+
+import javax.inject.Inject;
+
+import com.google.web.bindery.event.shared.EventBus;
+import com.gwtplatform.mvp.client.annotations.NameToken;
+import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
+import com.gwtplatform.mvp.client.proxy.ProxyPlace;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.core.CrudOperations;
+import org.jboss.hal.core.finder.Finder;
+import org.jboss.hal.core.finder.FinderPath;
+import org.jboss.hal.core.finder.FinderPathFactory;
+import org.jboss.hal.core.mbui.MbuiPresenter;
+import org.jboss.hal.core.mbui.MbuiView;
+import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.core.mvp.SupportsExpertMode;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.MetadataRegistry;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.meta.token.NameTokens;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Message;
+import org.jboss.hal.spi.MessageEvent;
+import org.jboss.hal.spi.Requires;
+
+import static org.jboss.hal.client.configuration.subsystem.distributableweb.AddressTemplates.DISTRIBUTABLE_WEB_TEMPLATE;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.ADD;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.DISTRIBUTABLE_WEB;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.ROUTING;
+import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafePropertyList;
+
+public class DistributableWebPresenter
+        extends MbuiPresenter<DistributableWebPresenter.MyView, DistributableWebPresenter.MyProxy>
+        implements SupportsExpertMode {
+
+    private final CrudOperations crud;
+    private final Dispatcher dispatcher;
+    private final FinderPathFactory finderPathFactory;
+    private final MetadataRegistry metadataRegistry;
+    private final StatementContext statementContext;
+    private final Resources resources;
+    private Routing routing;
+
+    @Inject
+    public DistributableWebPresenter(EventBus eventBus,
+            MyView view,
+            MyProxy myProxy,
+            Finder finder,
+            CrudOperations crud,
+            Dispatcher dispatcher,
+            FinderPathFactory finderPathFactory,
+            MetadataRegistry metadataRegistry,
+            StatementContext statementContext,
+            Resources resources) {
+        super(eventBus, view, myProxy, finder);
+        this.crud = crud;
+        this.dispatcher = dispatcher;
+        this.finderPathFactory = finderPathFactory;
+        this.metadataRegistry = metadataRegistry;
+        this.statementContext = statementContext;
+        this.resources = resources;
+    }
+
+    @Override
+    protected void onBind() {
+        super.onBind();
+        getView().setPresenter(this);
+    }
+
+    @Override
+    public ResourceAddress resourceAddress() {
+        return DISTRIBUTABLE_WEB_TEMPLATE.resolve(statementContext);
+    }
+
+    @Override
+    public FinderPath finderPath() {
+        return finderPathFactory.configurationSubsystemPath(DISTRIBUTABLE_WEB);
+    }
+
+    @Override
+    protected void reload() {
+        crud.read(DISTRIBUTABLE_WEB_TEMPLATE, 2, result -> {
+            getView().updateConfiguration(result);
+            List<NamedNode> routings = asNamedNodes(failSafePropertyList(result, ROUTING));
+            if (!routings.isEmpty()) {
+                Routing routing = Routing.fromResource(routings.get(0).getName());
+                if (routing != null) {
+                    getView().updateRouting(routing, routings.get(0).asModelNode());
+                }
+            }
+            getView().updateHotRodSessionManagement(
+                    asNamedNodes(failSafePropertyList(result, ""hotrod-session-management"")));
+            getView().updateHotRodSSOManagement(
+                    asNamedNodes(failSafePropertyList(result, ""hotrod-single-sign-on-management"")));
+            getView().updateInfinispanSessionManagement(
+                    asNamedNodes(failSafePropertyList(result, ""infinispan-session-management"")));
+            getView().updateInfinispanSSOManagement(
+                    asNamedNodes(failSafePropertyList(result, ""infinispan-single-sign-on-management"")));
+        });
+    }
+
+    public void saveRouting(Routing routing, Map<String, Object> changedValues) {
+        crud.saveSingleton(routing.type, routing.template(), changedValues, this::reload);
+    }
+
+    public void resetRouting(Routing routing, Form<ModelNode> form) {
+        Metadata metadata = metadataRegistry.lookup(routing.template());
+        crud.resetSingleton(routing.type, routing.template(), form, metadata, this::reload);
+    }
+
+    public void switchRouting(Routing newRouting) {
+        if (newRouting != null && newRouting != this.routing) {
+            if (newRouting.addWithDialog) {
+                Metadata metadata = metadataRegistry.lookup(newRouting.template());
+                String id = Ids.build(newRouting.baseId, Ids.ADD);
+                Form<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata) // custom form w/o unbound name item
+                        .fromRequestProperties()
+                        .requiredOnly()
+                        .build();
+                AddResourceDialog dialog = new AddResourceDialog(resources.messages().addResourceTitle(newRouting.type),
+                        form, (name, model) -> addRouting(newRouting, model));
+                dialog.show();
+            } else {
+                addRouting(newRouting, null);
+            }
+        }
+    }
+
+    private void addRouting(Routing newRouting, ModelNode model) {
+        Operation.Builder builder = new Operation.Builder(resourceAddress().add(ROUTING, newRouting.resource), ADD);
+        if (model != null) {
+            builder.payload(model);
+        }
+        dispatcher.execute(builder.build(), result -> {
+            MessageEvent.fire(getEventBus(),
+                    Message.success(resources.messages().addSingleResourceSuccess(newRouting.type)));
+            this.routing = newRouting;
+            reload();
+        });
+    }
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @NameToken(NameTokens.DISTRIBUTABLE_WEB)
+    @Requires(AddressTemplates.DISTRIBUTABLE_WEB_ADDRESS)
+    public interface MyProxy extends ProxyPlace<DistributableWebPresenter> {
+    }
+
+    public interface MyView extends MbuiView<DistributableWebPresenter> {
+        void updateConfiguration(ModelNode node);
+        void updateRouting(Routing routing, ModelNode node);
+        void updateHotRodSessionManagement(List<NamedNode> nodes);
+        void updateHotRodSSOManagement(List<NamedNode> nodes);
+        void updateInfinispanSessionManagement(List<NamedNode> nodes);
+        void updateInfinispanSSOManagement(List<NamedNode> nodes);
+    }
+    // @formatter:on
+}",2019-08-20T19:10:58Z,230
"@@ -0,0 +1,193 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.distributableweb;
+
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import javax.annotation.PostConstruct;
+
+import elemental2.dom.HTMLElement;
+import elemental2.dom.HTMLSelectElement;
+import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.gwt.elemento.core.EventType;
+import org.jboss.hal.ballroom.Attachable;
+import org.jboss.hal.ballroom.VerticalNavigation;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.form.SelectBoxBridge;
+import org.jboss.hal.ballroom.table.Table;
+import org.jboss.hal.core.mbui.MbuiContext;
+import org.jboss.hal.core.mbui.MbuiViewImpl;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.resources.CSS;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.spi.MbuiElement;
+import org.jboss.hal.spi.MbuiView;
+
+import static java.util.stream.Collectors.toList;
+import static org.jboss.gwt.elemento.core.Elements.*;
+import static org.jboss.hal.ballroom.JQuery.$;
+import static org.jboss.hal.resources.CSS.pfIcon;
+import static org.jboss.hal.resources.CSS.selectpicker;
+
+@MbuiView
+@SuppressWarnings(""WeakerAccess"")
+public abstract class DistributableWebView extends MbuiViewImpl<DistributableWebPresenter>
+        implements DistributableWebPresenter.MyView {
+
+    // ------------------------------------------------------ initialization
+
+    public static DistributableWebView create(MbuiContext mbuiContext) {
+        return new Mbui_DistributableWebView(mbuiContext);
+    }
+
+    @MbuiElement(""dw-vertical-navigation"") VerticalNavigation navigation;
+    @MbuiElement(""dw-configuration-form"") Form<ModelNode> configurationForm;
+    @MbuiElement(""dw-hotrod-session-management-table"") Table<NamedNode> hotRodSessionManagementTable;
+    @MbuiElement(""dw-hotrod-session-management-form"") Form<NamedNode> hotRodSessionManagementForm;
+    @MbuiElement(""dw-hotrod-sso-management-table"") Table<NamedNode> hotRodSSOManagementTable;
+    @MbuiElement(""dw-hotrod-sso-management-form"") Form<NamedNode> hotRodSSOManagementForm;
+    @MbuiElement(""dw-infinispan-session-management-table"") Table<NamedNode> infinispanSessionManagementTable;
+    @MbuiElement(""dw-infinispan-session-management-form"") Form<NamedNode> infinispanSessionManagementForm;
+    @MbuiElement(""dw-infinispan-sso-management-table"") Table<NamedNode> infinispanSSOManagementTable;
+    @MbuiElement(""dw-infinispan-sso-management-form"") Form<NamedNode> infinispanSSOManagementForm;
+    private HTMLElement currentRouting;
+    private HTMLSelectElement selectRouting;
+    private Map<Routing, Form<ModelNode>> routingForms;
+
+    DistributableWebView(MbuiContext mbuiContext) {
+        super(mbuiContext);
+    }
+
+    @PostConstruct
+    void init() {
+        selectRouting = select().css(selectpicker)
+                .id(Ids.DISTRIBUTABLE_WEB_ROUTING_SELECT)
+                .apply(s -> {
+                    s.multiple = false;
+                    s.size = 1;
+                })
+                .on(EventType.change, event -> {
+                    String value = ((HTMLSelectElement) event.currentTarget).value;
+                    Routing routing = Routing.fromResource(value);
+                    if (routing != null) {
+                        presenter.switchRouting(routing);
+                    }
+                })
+                .get();
+        for (Routing routing : Routing.values()) {
+            selectRouting.appendChild(Elements.option()
+                    .apply(o -> {
+                        o.value = routing.resource;
+                        o.text = routing.type;
+                    })
+                    .get());
+        }
+
+        routingForms = new HashMap<>();
+        for (Routing routing : Routing.values()) {
+            Metadata metadata = mbuiContext.metadataRegistry().lookup(routing.template());
+            Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(routing.baseId, Ids.FORM), metadata)
+                    .onSave((f, changedValues) -> presenter.saveRouting(routing, changedValues))
+                    .prepareReset(f -> presenter.resetRouting(routing, f))
+                    .build();
+            setVisible(form.element(), false);
+            routingForms.put(routing, form);
+        }
+
+        HTMLElement section = section()
+                .add(div().css(CSS.headerForm)
+                        .add(label()
+                                .apply(l -> l.htmlFor = Ids.DISTRIBUTABLE_WEB_ROUTING_SELECT)
+                                .textContent(mbuiContext.resources().constants().switchRouting()))
+                        .add(selectRouting)
+                        .get())
+                .add(h(1).textContent(Names.ROUTING)
+                        .add(currentRouting = span().get()))
+                .addAll(routingForms.values().stream().map(Form::element).collect(toList()))
+                .get();
+
+        navigation.insertPrimary(Ids.DISTRIBUTABLE_WEB_ROUTING_ITEM, null, Names.ROUTING,
+                pfIcon(""route""), section);
+    }
+
+    @Override
+    public void attach() {
+        super.attach();
+        SelectBoxBridge.Options options = SelectBoxBridge.Defaults.get();
+        $(""#"" + Ids.DISTRIBUTABLE_WEB_ROUTING_SELECT).selectpicker(options);
+        routingForms.values().forEach(Attachable::attach);
+    }
+
+    @Override
+    public void detach() {
+        super.detach();
+        routingForms.values().forEach(Attachable::detach);
+    }
+
+
+    // ------------------------------------------------------ update
+
+    @Override
+    public void updateConfiguration(ModelNode node) {
+        configurationForm.view(node);
+    }
+
+    @Override
+    public void updateRouting(Routing routing, ModelNode node) {
+        if (routing != null) {
+            currentRouting.textContent = "": "" + routing.type;
+            SelectBoxBridge.Single.element(selectRouting).setValue(routing.resource);
+
+            for (Map.Entry<Routing, Form<ModelNode>> entry : routingForms.entrySet()) {
+                boolean active = routing == entry.getKey();
+                if (active) {
+                    entry.getValue().view(node);
+                }
+                setVisible(entry.getValue().element(), active);
+            }
+        }
+    }
+
+    @Override
+    public void updateHotRodSessionManagement(List<NamedNode> nodes) {
+        hotRodSessionManagementForm.clear();
+        hotRodSessionManagementTable.update(nodes);
+    }
+
+    @Override
+    public void updateHotRodSSOManagement(List<NamedNode> nodes) {
+        hotRodSSOManagementForm.clear();
+        hotRodSSOManagementTable.update(nodes);
+    }
+
+    @Override
+    public void updateInfinispanSessionManagement(List<NamedNode> nodes) {
+        infinispanSessionManagementForm.clear();
+        infinispanSessionManagementTable.update(nodes);
+    }
+
+    @Override
+    public void updateInfinispanSSOManagement(List<NamedNode> nodes) {
+        infinispanSSOManagementForm.clear();
+        infinispanSSOManagementTable.update(nodes);
+    }
+}
\ No newline at end of file",2019-08-20T19:10:58Z,231
"@@ -0,0 +1,57 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.distributableweb;
+
+import org.jboss.hal.dmr.ModelDescriptionConstants;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+
+import static org.jboss.hal.client.configuration.subsystem.distributableweb.AddressTemplates.DISTRIBUTABLE_WEB_TEMPLATE;
+
+/** Represents the different routing singletons of the distributable web subsystem. */
+public enum Routing {
+
+    LOCAL(Ids.DISTRIBUTABLE_WEB_ROUTING_LOCAL, Names.LOCAL, ModelDescriptionConstants.LOCAL, false),
+    INFINISPAN(Ids.DISTRIBUTABLE_WEB_ROUTING_INFINISPAN, Names.INFINISPAN, ModelDescriptionConstants.INFINISPAN, true);
+
+    static Routing fromResource(String resource) {
+        if (resource != null) {
+            for (Routing routing : Routing.values()) {
+                if (routing.resource.equalsIgnoreCase(resource)) {
+                    return routing;
+                }
+            }
+        }
+        return null;
+    }
+
+    final String baseId;
+    final String type;
+    final String resource;
+    final boolean addWithDialog;
+
+    Routing(String baseId, String type, String resource, boolean addWithDialog) {
+        this.baseId = baseId;
+        this.type = type;
+        this.resource = resource;
+        this.addWithDialog = addWithDialog;
+    }
+
+    AddressTemplate template() {
+        return DISTRIBUTABLE_WEB_TEMPLATE.append(""routing="" + resource);
+    }
+}",2019-08-20T19:10:58Z,232
"@@ -97,7 +97,6 @@ public static EjbView create(MbuiContext mbuiContext, Environment environment) {
     }
 
     @PostConstruct
-    @SuppressWarnings(""ConstantConditions"")
     void init() {
         StatementContext statementContext = mbuiContext.statementContext();
         if (ManagementModel.supportsEjbApplicationSecurityDomain(environment().getManagementVersion())) {",2019-08-20T19:10:58Z,138
"@@ -27,12 +27,12 @@
 import org.jboss.hal.spi.MbuiView;
 
 @MbuiView
-@SuppressWarnings({""DuplicateStringLiteralInspection"", ""HardCodedStringLiteral"", ""WeakerAccess"", ""unused""})
+@SuppressWarnings({""DuplicateStringLiteralInspection"", ""HardCodedStringLiteral"", ""unused""})
 public abstract class IOView extends MbuiViewImpl<IOPresenter> implements IOPresenter.MyView {
 
     // ------------------------------------------------------ initialization
 
-    public static IOView create(final MbuiContext mbuiContext) {
+    public static IOView create(MbuiContext mbuiContext) {
         return new Mbui_IOView(mbuiContext);
     }
 
@@ -42,15 +42,15 @@ public static IOView create(final MbuiContext mbuiContext) {
     @MbuiElement(""io-worker-table"") Table<NamedNode> workerTable;
     @MbuiElement(""io-worker-form"") Form<NamedNode> workerForm;
 
-    IOView(final MbuiContext mbuiContext) {
+    IOView(MbuiContext mbuiContext) {
         super(mbuiContext);
     }
 
 
     // ------------------------------------------------------ buffer pool
 
     @Override
-    public void updateBufferPool(final List<NamedNode> items) {
+    public void updateBufferPool(List<NamedNode> items) {
         bufferPoolForm.clear();
         bufferPoolTable.update(items);
     }
@@ -59,7 +59,7 @@ public void updateBufferPool(final List<NamedNode> items) {
     // ------------------------------------------------------ worker
 
     @Override
-    public void updateWorkers(final List<NamedNode> items) {
+    public void updateWorkers(List<NamedNode> items) {
         workerForm.clear();
         workerTable.update(items);
     }",2019-08-20T19:10:58Z,233
"@@ -0,0 +1,106 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<?xml-model href=""https://raw.githubusercontent.com/hal/hal.next/develop/spi/src/main/resources/org/jboss/hal/spi/MbuiView.rng"" schematypens=""https://relaxng.org/ns/structure/1.0""?>
+<!--
+  ~ Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<view>
+    <vertical-navigation id=""dw-vertical-navigation"">
+
+        <item id=""dw-configuration-item"" title=""Configuration"" icon=""pficon pficon-settings"">
+            <metadata address=""/{selected.profile}/subsystem=distributable-web"">
+                <h1>Distributable Web</h1>
+                <p>${metadata.getDescription().getDescription()}</p>
+                <form id=""dw-configuration-form"" title=""Distributable Web"" auto-save=""true"" reset=""true""/>
+            </metadata>
+        </item>
+
+        <item id=""dw-hotrod-session-management-item"" title=""HotRod Session"" icon=""pficon pficon-users"">
+            <metadata address=""/{selected.profile}/subsystem=distributable-web/hotrod-session-management=*"">
+                <h1>HotRod Session Management</h1>
+                <p>${metadata.getDescription().getDescription()}</p>
+                <table id=""dw-hotrod-session-management-table"" form-ref=""dw-hotrod-session-management-form"">
+                    <actions>
+                        <action handler-ref=""add-resource""/>
+                        <action handler-ref=""remove-resource"" scope=""selected""
+                                name-resolver=""${table.selectedRow().getName()}""/>
+                    </actions>
+                    <columns>
+                        <column name=""name"" value=""${row.getName()}""/>
+                    </columns>
+                </table>
+                <form id=""dw-hotrod-session-management-form"" auto-save=""true"" reset=""true""
+                      name-resolver=""${form.getModel().getName()}""/>
+            </metadata>
+        </item>
+
+        <item id=""dw-hotrod-sso-management-item"" title=""HotRod SSO"" icon=""fa fa-lock"">
+            <metadata address=""/{selected.profile}/subsystem=distributable-web/hotrod-single-sign-on-management=*"">
+                <h1>HotRod SSO Management</h1>
+                <p>${metadata.getDescription().getDescription()}</p>
+                <table id=""dw-hotrod-sso-management-table"" form-ref=""dw-hotrod-sso-management-form"">
+                    <actions>
+                        <action handler-ref=""add-resource""/>
+                        <action handler-ref=""remove-resource"" scope=""selected""
+                                name-resolver=""${table.selectedRow().getName()}""/>
+                    </actions>
+                    <columns>
+                        <column name=""name"" value=""${row.getName()}""/>
+                    </columns>
+                </table>
+                <form id=""dw-hotrod-sso-management-form"" auto-save=""true"" reset=""true""
+                      name-resolver=""${form.getModel().getName()}""/>
+            </metadata>
+        </item>
+
+        <item id=""dw-infinispan-session-management-item"" title=""Infinispan Session""
+              icon=""pficon pficon-users"">
+            <metadata address=""/{selected.profile}/subsystem=distributable-web/infinispan-session-management=*"">
+                <h1>Infinispan Session Management</h1>
+                <p>${metadata.getDescription().getDescription()}</p>
+                <table id=""dw-infinispan-session-management-table"" form-ref=""dw-infinispan-session-management-form"">
+                    <actions>
+                        <action handler-ref=""add-resource""/>
+                        <action handler-ref=""remove-resource"" scope=""selected""
+                                name-resolver=""${table.selectedRow().getName()}""/>
+                    </actions>
+                    <columns>
+                        <column name=""name"" value=""${row.getName()}""/>
+                    </columns>
+                </table>
+                <form id=""dw-infinispan-session-management-form"" auto-save=""true"" reset=""true""
+                      name-resolver=""${form.getModel().getName()}""/>
+            </metadata>
+        </item>
+
+        <item id=""dw-infinispan-sso-management-item"" title=""Infinispan SSO"" icon=""fa fa-lock"">
+            <metadata address=""/{selected.profile}/subsystem=distributable-web/infinispan-single-sign-on-management=*"">
+                <h1>Infinispan SSO Management</h1>
+                <p>${metadata.getDescription().getDescription()}</p>
+                <table id=""dw-infinispan-sso-management-table"" form-ref=""dw-infinispan-sso-management-form"">
+                    <actions>
+                        <action handler-ref=""add-resource""/>
+                        <action handler-ref=""remove-resource"" scope=""selected""
+                                name-resolver=""${table.selectedRow().getName()}""/>
+                    </actions>
+                    <columns>
+                        <column name=""name"" value=""${row.getName()}""/>
+                    </columns>
+                </table>
+                <form id=""dw-infinispan-sso-management-form"" auto-save=""true"" reset=""true""
+                      name-resolver=""${form.getModel().getName()}""/>
+            </metadata>
+        </item>
+    </vertical-navigation>
+</view>
\ No newline at end of file",2019-08-20T19:10:58Z,234
"@@ -35,13 +35,13 @@
  * <li>{@code columnId} The column id. Used to lookup columns from the column registry</li>
  * <li>{@code itemId} The selected item id</li>
  * <li>{@code columnTitle} The title of the column used in the UI. If not specified defaults to {@code columnId}</li>
- * <li>{@code itemTitle} The title of the selected item used un the UI. If not specified defaults to {@code
+ * <li>{@code itemTitle} The title of the selected item used in the UI. If not specified defaults to {@code
  * itemId}</li>
  * </ol>
  */
 public class FinderPath implements Iterable<FinderSegment> {
 
-    /** Separator is used in URL tokens. Please choose a string which is safe to use in URLs */
+    /** Separator used in URL tokens. Must be securely encodable in URLs. */
     static final String SEPARATOR = ""!"";
 
 ",2019-08-20T19:10:58Z,235
"@@ -26,7 +26,7 @@
 /** A segment inside a {@link FinderPath}. */
 public class FinderSegment<T> {
 
-    /** Separator is used in URL tokens. Please choose a string which is safe to use in URLs */
+    /** Separator used in URL tokens. Must be securely encodable in URLs. */
     static final String SEPARATOR = ""~"";
     @NonNls private static final Logger logger = LoggerFactory.getLogger(FinderSegment.class);
 
@@ -202,12 +202,12 @@ private static class ItemActionBreadcrumbHandler<T> implements BreadcrumbItemHan
 
         private final ItemAction<T> itemAction;
 
-        private ItemActionBreadcrumbHandler(final ItemAction<T> itemAction) {
+        private ItemActionBreadcrumbHandler(ItemAction<T> itemAction) {
             this.itemAction = itemAction;
         }
 
         @Override
-        public void execute(final T item, final FinderContext context) {
+        public void execute(T item, FinderContext context) {
             itemAction.handler.execute(item);
         }
     }
@@ -219,7 +219,7 @@ public static class DropdownItem<T> {
         public final ItemDisplay<T> display;
         public final BreadcrumbItemHandler<T> handler;
 
-        DropdownItem(final T item, final ItemDisplay<T> display, final BreadcrumbItemHandler<T> handler) {
+        DropdownItem(T item, ItemDisplay<T> display, BreadcrumbItemHandler<T> handler) {
             this.item = item;
             this.display = display;
             this.handler = handler;",2019-08-20T19:10:58Z,236
"@@ -88,7 +88,7 @@ default String nextColumn() {
     /**
      * Defines the action(s) available for the item.
      *
-     * @return an empty map by default.
+     * @return an empty list by default.
      */
     default List<ItemAction<T>> actions() {
         return new ArrayList<>();
@@ -99,6 +99,7 @@ default List<ItemAction<T>> actions() {
      *
      * @return {@code null} by default
      */
+    @Override
     default HTMLElement element() {
         return null;
     }",2019-08-20T19:10:58Z,237
"@@ -62,6 +62,10 @@ public Subsystems(Resources resources) {
                 .token(NameTokens.DEPLOYMENT_SCANNERS)
                 .preview(resources.previews().configurationDeploymentScanner())
                 .build());
+        addConfiguration(new SubsystemMetadata.Builder(DISTRIBUTABLE_WEB, ""Distributable Web"")
+                .token(NameTokens.DISTRIBUTABLE_WEB)
+                .preview(resources.previews().configurationDistributableWeb())
+                .build());
         addConfiguration(new SubsystemMetadata.Builder(EE, ""EE"")
                 .token(NameTokens.EE)
                 .preview(resources.previews().configurationEe())",2019-08-20T19:10:58Z,37
"@@ -272,6 +272,7 @@ public interface ModelDescriptionConstants {
     String DISCONNECTED = ""disconnected"";
     String DISCOVERY_GROUP = ""discovery-group"";
     String DISTINGUISHED_NAME = ""distinguished-name"";
+    String DISTRIBUTABLE_WEB = ""distributable-web"";
     String DISTRIBUTED_CACHE = ""distributed-cache"";
     String DIVERT = ""divert"";
     String DOMAIN_ORGANIZATION = ""domain-organization"";
@@ -503,6 +504,7 @@ public interface ModelDescriptionConstants {
     String LISTENER = ""listener"";
     String LIVE_ONLY = ""live-only"";
     String LOAD = ""load"";
+    String LOCAL = ""local"";
     String LOCAL_CACHE = ""local-cache"";
     String LOCAL_DESTINATION_OUTBOUND_SOCKET_BINDING = ""local-destination-outbound-socket-binding"";
     String LOCALE = ""locale"";
@@ -799,6 +801,7 @@ public interface ModelDescriptionConstants {
     String ROLLBACK_OPERATION = ""rollback"";
     String ROLLBACK_PREPARED_TRANSACTION = ""rollback-prepared-transaction"";
     String ROLLBACK_TO = ""rollback-to"";
+    String ROUTING = ""routing"";
     String RUNNING_EXECUTIONS = ""running-executions"";
     String RUNNING_MODE = ""running-mode"";
     String RUNNING_TIME = ""running-time"";",2019-08-20T19:10:58Z,109
"@@ -40,6 +40,7 @@ public interface NameTokens {
     String DEPLOYMENT = ""deployment"";
     String DEPLOYMENTS = ""deployments"";
     String DISTRIBUTED_CACHE = ModelDescriptionConstants.DISTRIBUTED_CACHE;
+    String DISTRIBUTABLE_WEB = ModelDescriptionConstants.DISTRIBUTABLE_WEB;
     String EE = ModelDescriptionConstants.EE;
     String ERROR = ""error"";
     String ELYTRON = ModelDescriptionConstants.ELYTRON;",2019-08-20T19:10:58Z,46
"@@ -547,6 +547,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String switchMemory();
     String switchNearCache();
     String switchProvider();
+    String switchRouting();
     String switchStore();
     String switchToExpressionMode();
     String switchToNormalMode();",2019-08-20T19:10:58Z,100
"@@ -158,6 +158,10 @@ public interface Ids {
     String DEPLOYMENT_TAB_CONTAINER = ""deployment-tab-container"";
     String DEPLOYMENT_UNMANAGED_ADD = ""deployment-unmanaged-add"";
     String DEPLOYMENT_UPLOAD = ""deployment-upload"";
+    String DISTRIBUTABLE_WEB_ROUTING_ITEM = ""dw-routing-item"";
+    String DISTRIBUTABLE_WEB_ROUTING_INFINISPAN = ""dw-routing-infinispan"";
+    String DISTRIBUTABLE_WEB_ROUTING_LOCAL = ""dw-routing-local"";
+    String DISTRIBUTABLE_WEB_ROUTING_SELECT = ""dw-routing-select"";
     String DISTRIBUTED_CACHE = ""distributed-cache"";
     String DISABLE_SSL = ""disable-ssl"";
     String DOMAIN_BROWSE_BY = ""domain-browse-by"";",2019-08-20T19:10:58Z,111
"@@ -166,6 +166,7 @@ public interface Names {
     String IN_VM_CONNECTOR = ""In VM Connector"";
     String INBOUND = ""Inbound"";
     String INCLUDES = ""Includes"";
+    String INFINISPAN = ""Infinispan"";
     String INSTANCE_ID = ""Instance ID"";
     String INTERFACE = ""Interface"";
     String INTERFACES = ""Interfaces"";
@@ -204,6 +205,7 @@ public interface Names {
     String LOAD_METRIC = ""Load Metric"";
     String LOAD_PROVIDER_DYNAMIC = ""Load Provider Dynamic"";
     String LOAD_PROVIDER_SIMPLE = ""Load Provider Simple"";
+    String LOCAL = ""Local"";
     String LOCAL_CACHE = ""Local Cache"";
     String LOCAL_OUTBOUND_CONNECTION = ""Local Outbound Connection"";
     String LOCATION = ""Location"";
@@ -314,6 +316,7 @@ public interface Names {
     String RESPONSE_HEADER = ""Response Header"";
     String REST_RESOURCE = ""REST Resource"";
     String ROOT_LOGGER = ""Root Logger"";
+    String ROUTING = ""Routing"";
     String RUNTIME = ""Runtime"";
 
     String SASL_AUTHENTICATION_FACTORY = ""SASL Authentication Factory"";",2019-08-20T19:10:58Z,112
"@@ -67,6 +67,9 @@ public interface Previews extends ClientBundleWithLookup {
     @Source(""previews/configuration/deployment-scanner.html"")
     ExternalTextResource configurationDeploymentScanner();
 
+    @Source(""previews/configuration/distributable-web.html"")
+    ExternalTextResource configurationDistributableWeb();
+
     @Source(""previews/configuration/domain.html"")
     ExternalTextResource configurationDomain();
 ",2019-08-20T19:10:58Z,134
"@@ -529,6 +529,7 @@ switchBehaviour=Switch Behaviour
 switchMemory=Switch Memory
 switchNearCache=Switch Near Cache
 switchProvider=Switch Provider
+switchRouting=Switch Routing
 switchStore=Switch Store
 switchToExpressionMode=Switch to expression mode
 switchToNormalMode=Switch to normal mode",2019-08-20T19:10:58Z,100
"@@ -0,0 +1,2 @@
+<p>The distributable-web subsystem manages a set of session management profiles that encapsulate the configuration of a distributable session manager. One of these profiles will be designated as the default profile (via the ""default-session-management"" attribute) and thus defines the default behavior of a distributable web application.</p>
+<p>The default session management stores web session data within an Infinispan cache.</p>",2019-08-20T19:10:58Z,238
"@@ -134,8 +134,8 @@
 import org.jboss.hal.client.runtime.RuntimeView;
 import org.jboss.hal.client.runtime.group.Mbui_ServerGroupView;
 import org.jboss.hal.client.runtime.group.ServerGroupPresenter;
-import org.jboss.hal.client.runtime.host.configurationchanges.ConfigurationChangesPresenter;
-import org.jboss.hal.client.runtime.host.configurationchanges.ConfigurationChangesView;
+import org.jboss.hal.client.runtime.configurationchanges.ConfigurationChangesPresenter;
+import org.jboss.hal.client.runtime.configurationchanges.ConfigurationChangesView;
 import org.jboss.hal.client.runtime.host.HostPresenter;
 import org.jboss.hal.client.runtime.host.Mbui_HostView;
 import org.jboss.hal.client.runtime.server.ServerBootErrorsPresenter;",2017-09-19T06:21:16Z,44
"@@ -0,0 +1,123 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.runtime.configurationchanges;
+
+import java.util.Date;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.Property;
+
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafeDate;
+
+class ConfigurationChange extends NamedNode {
+
+    private final Date date;
+    private final boolean composite;
+    private final String operationNames;
+    private final String addressSegments;
+
+    ConfigurationChange(ModelNode model) {
+        super(model.hasDefined(DOMAIN_UUID) ? model.get(DOMAIN_UUID).asString() : model.get(OPERATION_DATE).asString(),
+                model);
+        this.date = failSafeDate(model, OPERATION_DATE);
+
+        Set<String> operationNames = new HashSet<>();
+        Set<String> addressSegments = new HashSet<>();
+        List<ModelNode> operations = model.get(OPERATIONS).asList();
+        if (!operations.isEmpty()) {
+            composite = COMPOSITE.equals(operations.get(0).get(OPERATION).asString());
+            if (composite) {
+                for (ModelNode operation : operations) {
+                    for (ModelNode step : operation.get(STEPS).asList()) {
+                        operationNames.add(step.get(OPERATION).asString());
+                        for (Property property : step.get(ADDRESS).asPropertyList()) {
+                            addressSegments.add(property.getName());
+                            addressSegments.add(property.getValue().asString());
+                        }
+                    }
+                }
+
+            } else {
+                for (ModelNode operation : operations) {
+                    operationNames.add(operation.get(OPERATION).asString());
+                    for (Property property : operation.get(ADDRESS).asPropertyList()) {
+                        addressSegments.add(property.getName());
+                        addressSegments.add(property.getValue().asString());
+                    }
+                }
+            }
+
+        } else {
+            composite = false;
+        }
+        this.operationNames = String.join("" "", operationNames);
+        this.addressSegments = String.join("" "", addressSegments);
+
+        int length = get(OPERATIONS).asString().length();
+        get(HAL_LENGTH).set(length);
+    }
+
+    Date getOperationDate() {
+        return date;
+    }
+
+    int getOperationsLength() {
+        return get(HAL_LENGTH).asInt();
+    }
+
+    String getOperationNames() {
+        return operationNames;
+    }
+
+    String getAddressSegments() {
+        return addressSegments;
+    }
+
+    String getAccessMechanism() {
+        return get(ACCESS_MECHANISM).asString();
+    }
+
+    String getRemoteAddress() {
+        return get(REMOTE_ADDRESS).asString();
+    }
+
+    boolean isSuccess() {
+        return get(OUTCOME).asString().equals(SUCCESS);
+    }
+
+    String getOutcome() {
+        return get(OUTCOME).asString();
+    }
+
+    boolean isComposite() {
+        return composite;
+    }
+
+    List<ModelNode> changes() {
+        List<ModelNode> changes;
+        if (composite) {
+            changes = get(OPERATIONS).asList().get(0).get(STEPS).asList();
+        } else {
+            changes = get(OPERATIONS).asList();
+        }
+        return changes;
+    }
+}",2017-09-19T06:21:16Z,61
"@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.jboss.hal.client.runtime.host.configurationchanges;
+package org.jboss.hal.client.runtime.configurationchanges;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -26,22 +26,19 @@
 import org.jboss.gwt.elemento.core.HasElements;
 import org.jboss.gwt.elemento.core.builder.ElementsBuilder;
 import org.jboss.gwt.elemento.core.builder.HtmlContentBuilder;
+import org.jboss.hal.ballroom.Format;
 import org.jboss.hal.ballroom.listview.ItemAction;
 import org.jboss.hal.ballroom.listview.ItemDisplay;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Resources;
 
-import static org.jboss.gwt.elemento.core.Elements.div;
-import static org.jboss.gwt.elemento.core.Elements.elements;
-import static org.jboss.gwt.elemento.core.Elements.p;
-import static org.jboss.gwt.elemento.core.Elements.pre;
-import static org.jboss.gwt.elemento.core.Elements.span;
+import static org.jboss.gwt.elemento.core.Elements.*;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.ADDRESS;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.CONFIGURATION_CHANGES;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.OPERATION;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.OPERATION_HEADERS;
 import static org.jboss.hal.resources.CSS.*;
+import static org.jboss.hal.resources.Ids.CONFIGURATION_CHANGES;
 
 class ConfigurationChangeDisplay implements ItemDisplay<ConfigurationChange> {
 
@@ -75,7 +72,7 @@ public HTMLElement getStatusElement() {
 
     @Override
     public String getTitle() {
-        return resources.constants().operationDate() + "": "" + item.getOperationDate().replace('T', ' ');
+        return resources.constants().operationDate() + "": "" + Format.mediumDateTime(item.getOperationDate());
     }
 
     @Override
@@ -89,7 +86,7 @@ public SafeHtml getDescriptionHtml() {
             String op = m.get(OPERATION).asString();
             ResourceAddress address = new ResourceAddress(m.get(ADDRESS));
             html.append(SafeHtmlUtils.fromTrustedString(
-                    resources.constants().operation() + "": <strong>"" + op + ""</strong>&nbsp;&nbsp;&nbsp;&nbsp;""));
+                    resources.constants().operation() + "": <strong>"" + op + ""</strong><br/>""));
             html.append(SafeHtmlUtils.fromTrustedString(
                     resources.constants().address() + "": <strong>"" + address + ""</strong><br/>""));
             HTMLPreElement elem = pre().css(formControlStatic, wrap).asElement();
@@ -114,7 +111,6 @@ public HasElements getAdditionalInfoElements() {
         ElementsBuilder elements = elements();
         elements.add(div().css(halConfChangesAdditionalInfo)
                 .add(p().css(textRight).innerHtml(new SafeHtmlBuilder()
-
                         .appendEscaped(resources.constants().accessMechanism() + "": "")
                         .appendEscaped(item.getAccessMechanism())
                         .appendHtmlConstant(""<br/>"")
@@ -124,7 +120,7 @@ public HasElements getAdditionalInfoElements() {
                         .appendHtmlConstant(""<br/>"")
 
                         .appendEscaped(resources.constants().composite() + "": "")
-                        .appendEscaped("""" + item.isComposite())
+                        .appendEscaped(String.valueOf(item.isComposite()))
                         .toSafeHtml())));
         return elements;
     }
@@ -137,7 +133,7 @@ public int getDescriptionLength() {
     @Override
     public List<ItemAction<ConfigurationChange>> actions() {
         List<ItemAction<ConfigurationChange>> actions = new ArrayList<>();
-        String id = Ids.build(Ids.CONFIGURATION_CHANGES, item.getName(), ""view"");
+        String id = Ids.build(CONFIGURATION_CHANGES, item.getName(), ""view"");
         actions.add(new ItemAction<>(id, resources.constants().view(), presenter::viewRawChange));
         return actions;
     }",2017-09-19T06:21:16Z,59
"@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.jboss.hal.client.runtime.host.configurationchanges;
+package org.jboss.hal.client.runtime.configurationchanges;
 
 import javax.inject.Inject;
 
@@ -56,14 +56,13 @@
 import static org.jboss.hal.ballroom.Skeleton.applicationHeight;
 import static org.jboss.hal.ballroom.dialog.Dialog.Size.LARGE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.meta.token.NameTokens.CONFIGURATION_CHANGES;
 import static org.jboss.hal.resources.CSS.formControlStatic;
 import static org.jboss.hal.resources.CSS.px;
 import static org.jboss.hal.resources.CSS.wrap;
 import static org.jboss.hal.resources.Ids.ADD_SUFFIX;
-import static org.jboss.hal.resources.Ids.FORM_SUFFIX;
 
-public class ConfigurationChangesPresenter
-        extends
+public class ConfigurationChangesPresenter extends
         ApplicationFinderPresenter<ConfigurationChangesPresenter.MyView, ConfigurationChangesPresenter.MyProxy> {
 
     // @formatter:off
@@ -74,13 +73,15 @@ public interface MyProxy extends ProxyPlace<ConfigurationChangesPresenter> {}
     public interface MyView extends HalView, HasPresenter<ConfigurationChangesPresenter> {
         void update(ModelNode model);
     }
+    // @formatter:on
 
-    final static String CONFIGURATION_CHANGES_ADDRESS = ""/{selected.host}/subsystem=core-management/service=configuration-changes"";
-    public final static AddressTemplate CONFIGURATION_CHANGES_TEMPLATE = AddressTemplate.of(CONFIGURATION_CHANGES_ADDRESS);
-    final static AddressTemplate CORE_MANAGEMENT_TEMPLATE = AddressTemplate.of(""/{selected.host}/subsystem=core-management"");
+    private static final String CONFIGURATION_CHANGES_ADDRESS = ""/{selected.host}/subsystem=core-management/service=configuration-changes"";
+    private static final AddressTemplate CORE_MANAGEMENT_TEMPLATE = AddressTemplate.of(
+            ""/{selected.host}/subsystem=core-management"");
+    public static final AddressTemplate CONFIGURATION_CHANGES_TEMPLATE = AddressTemplate.of(
+            CONFIGURATION_CHANGES_ADDRESS);
 
     private Environment environment;
-    // @formatter:on
     private final FinderPathFactory finderPathFactory;
     private final Dispatcher dispatcher;
     private final StatementContext statementContext;
@@ -118,31 +119,23 @@ protected void onBind() {
 
     @Override
     public FinderPath finderPath() {
-        FinderPath root;
-        if (statementContext.selectedHost() != null) {
-            root = finderPathFactory.runtimeHostPath();
-        } else {
-            root = finderPathFactory.runtimeServerPath();
-        }
-        return root.append(""core-service"", Ids.CONFIGURATION_CHANGES, ""Core Service"",
-                resources.constants().configurationChanges());
-
+        return environment.isStandalone() ? finderPathFactory.runtimeServerPath() : finderPathFactory.runtimeHostPath();
     }
 
     @Override
     protected void reload() {
-        ResourceAddress address1 = CORE_MANAGEMENT_TEMPLATE.resolve(statementContext);
-        Operation operation1 = new Operation.Builder(address1, READ_CHILDREN_NAMES_OPERATION)
+        ResourceAddress coreAddress = CORE_MANAGEMENT_TEMPLATE.resolve(statementContext);
+        Operation coreOperation = new Operation.Builder(coreAddress, READ_CHILDREN_NAMES_OPERATION)
                 .param(CHILD_TYPE, SERVICE)
                 .build();
-        dispatcher.execute(operation1, result -> {
-            boolean configurationChangesEnabled = result.asList().size() > 0;
+        dispatcher.execute(coreOperation, coreResult -> {
+            boolean configurationChangesEnabled = coreResult.asList().size() > 0;
 
             if (configurationChangesEnabled) {
-                ResourceAddress address = CONFIGURATION_CHANGES_TEMPLATE.resolve(statementContext);
-                Operation operation = new Operation.Builder(address, LIST_CHANGES_OPERATION)
+                ResourceAddress ccAddress = CONFIGURATION_CHANGES_TEMPLATE.resolve(statementContext);
+                Operation ccOperation = new Operation.Builder(ccAddress, LIST_CHANGES_OPERATION)
                         .build();
-                dispatcher.execute(operation, result2 -> getView().update(result2));
+                dispatcher.execute(ccOperation, ccResult -> getView().update(ccResult));
             } else {
                 getView().update(new ModelNode());
             }
@@ -151,7 +144,7 @@ protected void reload() {
 
     void launchAdd() {
         Metadata metadata = metadataRegistry.lookup(CONFIGURATION_CHANGES_TEMPLATE);
-        String id = Ids.build(ADD_SUFFIX, CONFIGURATION_CHANGES, FORM_SUFFIX);
+        String id = Ids.build(Ids.CONFIGURATION_CHANGES, ADD_SUFFIX);
         Form<ModelNode> form = new OperationFormBuilder<>(id, metadata, ADD)
                 .build();
         ModelNode changeModel = new ModelNode();
@@ -177,7 +170,7 @@ void launchAdd() {
 
     void disable() {
         String type = HOST;
-        String name =  statementContext.selectedHost();
+        String name = statementContext.selectedHost();
         if (environment.isStandalone()) {
             type = Names.STANDALONE_SERVER;
             name = Server.STANDALONE.getName();
@@ -198,7 +191,7 @@ void viewRawChange(final ConfigurationChange change) {
 
         HTMLElement content = div()
                 .add(elem)
-                .style(""overflow: scroll"")
+                .style(""overflow: scroll"") //NON-NLS
                 .asElement();
 
         int maxheight = applicationHeight() - 6 * MARGIN_BIG;",2017-09-19T06:21:16Z,55
"@@ -13,10 +13,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.jboss.hal.client.runtime.host.configurationchanges;
+package org.jboss.hal.client.runtime.configurationchanges;
 
-import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 import javax.inject.Inject;
 
@@ -34,9 +32,12 @@
 import org.jboss.hal.resources.Messages;
 import org.jboss.hal.resources.Resources;
 
+import static java.util.Collections.emptyList;
 import static java.util.Comparator.comparing;
-import static org.jboss.hal.client.runtime.host.configurationchanges.ConfigurationChangesPresenter.CONFIGURATION_CHANGES_TEMPLATE;
+import static java.util.stream.Collectors.toList;
+import static org.jboss.hal.client.runtime.configurationchanges.ConfigurationChangesPresenter.CONFIGURATION_CHANGES_TEMPLATE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.resources.Ids.CONFIGURATION_CHANGES;
 
 public class ConfigurationChangesView extends HalViewImpl implements ConfigurationChangesPresenter.MyView {
 
@@ -66,7 +67,7 @@ public ConfigurationChangesView(MetadataRegistry metadataRegistry, Resources res
                 .secondaryAction(resources.constants().disableConfigurationChanges(), () -> presenter.disable())
                 .build();
 
-        String actionIdDisable = Ids.build(Ids.CONFIGURATION_CHANGES, REMOVE);
+        String actionIdDisable = Ids.build(CONFIGURATION_CHANGES, REMOVE);
         Constants constants = resources.constants();
         Toolbar.Action disableAction = new Toolbar.Action(actionIdDisable, constants.disable(),
                 () -> presenter.disable());
@@ -76,17 +77,20 @@ public ConfigurationChangesView(MetadataRegistry metadataRegistry, Resources res
                 .toolbarAttribute(new Toolbar.Attribute<>(OUTCOME, constants.outcome(),
                         (node, filter) -> node.getOutcome().toLowerCase().equals(filter.toLowerCase()),
                         comparing(ConfigurationChange::getOutcome)))
-                .toolbarAttribute(new Toolbar.Attribute<>(ACCESS_MECHANISM, constants.accessMechanism(),
-                        (node, filter) -> node.getAccessMechanism().toLowerCase().equals(filter.toLowerCase()),
-                        comparing(ConfigurationChange::getAccessMechanism)))
+                .toolbarAttribute(new Toolbar.Attribute<>(OPERATION, resources.constants().operation(),
+                        (model, filter) -> model.getOperationNames().contains(filter), null))
                 .toolbarAttribute(new Toolbar.Attribute<>(OPERATION_DATE, constants.operationDate(),
-                        (node, filter) -> node.getOperationDate().contains(filter),
-                        comparing(ConfigurationChange::getOperationDate)))
+                        null, comparing(ConfigurationChange::getOperationDate)))
+                .toolbarAttribute(new Toolbar.Attribute<>(ADDRESS, resources.constants().address(),
+                        (model, filter) -> model.getAddressSegments().contains(filter), null))
                 .toolbarAttribute(new Toolbar.Attribute<>(REMOTE_ADDRESS, constants.remoteAddress(),
                         (node, filter) -> node.getRemoteAddress().toLowerCase().contains(filter.toLowerCase()),
                         comparing(ConfigurationChange::getRemoteAddress)))
+                .toolbarAttribute(new Toolbar.Attribute<>(ACCESS_MECHANISM, constants.accessMechanism(),
+                        (node, filter) -> node.getAccessMechanism().toLowerCase().equals(filter.toLowerCase()),
+                        comparing(ConfigurationChange::getAccessMechanism)))
                 .toolbarAction(disableAction)
-                .toolbarAction(new Toolbar.Action(Ids.build(Ids.CONFIGURATION_CHANGES, Ids.REFRESH_SUFFIX),
+                .toolbarAction(new Toolbar.Action(Ids.build(CONFIGURATION_CHANGES, Ids.REFRESH_SUFFIX),
                         constants.reload(), () -> presenter.reload()))
                 .noItems(constants.noItems(), messages.noItems())
                 .emptyState(empty, emptyState)
@@ -104,18 +108,14 @@ public void setPresenter(ConfigurationChangesPresenter presenter) {
     @Override
     public void update(ModelNode model) {
         if (model.isDefined()) {
-            List<ConfigurationChange> changes = new ArrayList<>();
-            model.asList().forEach(n -> {
-                changes.add(new ConfigurationChange(n));
-            });
+            List<ConfigurationChange> changes = model.asList().stream().map(ConfigurationChange::new).collect(toList());
             dataProvider.update(changes);
             if (changes.isEmpty()) {
                 listView.showEmptyState(empty);
             }
         } else {
-            dataProvider.update(Collections.emptyList());
+            dataProvider.update(emptyList());
             listView.showEmptyState(notEnabled);
         }
-
     }
 }",2017-09-19T06:21:16Z,90
"@@ -22,7 +22,6 @@
 
 import com.google.gwt.user.client.rpc.AsyncCallback;
 import com.google.web.bindery.event.shared.EventBus;
-import com.gwtplatform.mvp.client.proxy.PlaceManager;
 import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
 import elemental2.dom.HTMLElement;
 import org.jboss.hal.ballroom.dialog.DialogFactory;
@@ -55,6 +54,7 @@
 import org.jboss.hal.flow.Outcome;
 import org.jboss.hal.flow.Progress;
 import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.ManagementModel;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.security.Constraint;
 import org.jboss.hal.meta.token.NameTokens;
@@ -70,8 +70,8 @@
 
 import static java.util.Collections.emptyList;
 import static java.util.stream.Collectors.toList;
+import static org.jboss.hal.client.runtime.configurationchanges.ConfigurationChangesPresenter.CONFIGURATION_CHANGES_TEMPLATE;
 import static org.jboss.hal.client.runtime.host.HostColumn.HOST_CONNECTION_ADDRESS;
-import static org.jboss.hal.client.runtime.host.configurationchanges.ConfigurationChangesPresenter.CONFIGURATION_CHANGES_TEMPLATE;
 import static org.jboss.hal.core.finder.FinderColumn.RefreshMode.RESTORE_SELECTION;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.flow.Flow.series;
@@ -82,7 +82,7 @@
 public class HostColumn extends FinderColumn<Host> implements HostActionHandler, HostResultHandler {
 
     static final String HOST_CONNECTION_ADDRESS = ""/core-service=management/host-connection=*"";
-    static final AddressTemplate HOST_CONNECTION_TEMPLATE = AddressTemplate.of(HOST_CONNECTION_ADDRESS);
+    private static final AddressTemplate HOST_CONNECTION_TEMPLATE = AddressTemplate.of(HOST_CONNECTION_ADDRESS);
 
     static AddressTemplate hostTemplate(Host host) {
         return AddressTemplate.of(""/host="" + host.getAddressName());
@@ -101,8 +101,6 @@ public HostColumn(Finder finder,
             CrudOperations crud,
             EventBus eventBus,
             StatementContext statementContext,
-            ItemMonitor itemMonitor,
-            PlaceManager placeManager,
             @Footer Provider<Progress> progress,
             ColumnActionFactory columnActionFactory,
             ItemActionFactory itemActionFactory,
@@ -247,10 +245,8 @@ public String nextColumn() {
             @Override
             public List<ItemAction<Host>> actions() {
                 if (item.isConnected()) {
-                    PlaceRequest placeRequest = new PlaceRequest.Builder().nameToken(NameTokens.HOST_CONFIGURATION)
-                            .with(HOST, item.getAddressName()).build();
-                    PlaceRequest placeRequestConfChanges = new PlaceRequest.Builder()
-                            .nameToken(NameTokens.CONFIGURATION_CHANGES)
+                    PlaceRequest placeRequest = new PlaceRequest.Builder()
+                            .nameToken(NameTokens.HOST_CONFIGURATION)
                             .with(HOST, item.getAddressName()).build();
                     List<ItemAction<Host>> actions = new ArrayList<>();
                     actions.add(itemActionFactory.viewAndMonitor(Ids.host(item.getAddressName()), placeRequest));
@@ -265,14 +261,13 @@ public List<ItemAction<Host>> actions() {
                                 .handler(hostActions::restart)
                                 .constraint(Constraint.executable(hostTemplate(item), SHUTDOWN))
                                 .build());
-                        actions.add(new ItemAction.Builder<Host>()
-                                .title(resources.constants().configurationChanges())
-                                .handler(itemMonitor.monitorPlaceRequest(
-                                        Ids.build(Ids.host(item.getAddressName()), Ids.CONFIGURATION_CHANGES),
-                                        placeRequestConfChanges.getNameToken(),
-                                        () -> placeManager.revealPlace(placeRequestConfChanges)))
-                                .constraint(Constraint.executable(CONFIGURATION_CHANGES_TEMPLATE, CONFIGURATION_CHANGES))
-                                .build());
+                        if (ManagementModel.supportsConfigurationChanges(item.getManagementVersion())) {
+                            // Use ItemMonitor?
+                            PlaceRequest ccPlaceRequest = new PlaceRequest.Builder()
+                                    .nameToken(NameTokens.CONFIGURATION_CHANGES).build();
+                            actions.add(itemActionFactory.placeRequest(resources.constants().configurationChanges(),
+                                    ccPlaceRequest, Constraint.executable(CONFIGURATION_CHANGES_TEMPLATE, ADD)));
+                        }
                         // TODO Add additional operations like :reload(admin-mode=true), :clean-obsolete-content or :take-snapshot
                     }
                     return actions;",2017-09-19T06:21:16Z,5
"@@ -1,78 +0,0 @@
-/*
- * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.hal.client.runtime.host.configurationchanges;
-
-import java.util.List;
-
-import org.jboss.hal.dmr.ModelNode;
-import org.jboss.hal.dmr.NamedNode;
-
-import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
-
-public class ConfigurationChange extends NamedNode {
-
-    private Boolean composite;
-
-    public ConfigurationChange(ModelNode model) {
-        super(model.hasDefined(DOMAIN_UUID) ? model.get(DOMAIN_UUID).asString() : model.get(OPERATION_DATE).asString(), model);
-
-        model.get(OPERATIONS).asList().forEach(nestedNode -> {
-            composite = nestedNode.get(OPERATION).asString().equals(COMPOSITE);
-        });
-        int length = get(OPERATIONS).asString().length();
-        get(HAL_LENGTH).set(length);
-    }
-
-    String getOperationDate() {
-        return get(OPERATION_DATE).asString();
-    }
-
-    int getOperationsLength() {
-        return get(HAL_LENGTH).asInt();
-    }
-
-    String getAccessMechanism() {
-        return get(ACCESS_MECHANISM).asString();
-    }
-
-    String getRemoteAddress() {
-        return get(REMOTE_ADDRESS).asString();
-    }
-
-    boolean isSuccess() {
-        return get(OUTCOME).asString().equals(SUCCESS);
-    }
-
-    String getOutcome() {
-        return get(OUTCOME).asString();
-    }
-
-    boolean isComposite() {
-        return composite;
-    }
-
-    List<ModelNode> changes() {
-        List<ModelNode> changes;
-        if (composite) {
-            changes = get(OPERATIONS).asList().get(0).get(STEPS).asList();
-        } else {
-            changes = get(OPERATIONS).asList();
-        }
-
-        return changes;
-    }
-
-}",2017-09-19T06:21:16Z,61
"@@ -44,6 +44,7 @@
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.ManagementModel;
 import org.jboss.hal.meta.security.Constraint;
 import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.resources.Ids;
@@ -53,7 +54,7 @@
 import org.jboss.hal.spi.Requires;
 
 import static java.util.Collections.singletonList;
-import static org.jboss.hal.client.runtime.host.configurationchanges.ConfigurationChangesPresenter.CONFIGURATION_CHANGES_TEMPLATE;
+import static org.jboss.hal.client.runtime.configurationchanges.ConfigurationChangesPresenter.CONFIGURATION_CHANGES_TEMPLATE;
 import static org.jboss.hal.client.runtime.server.StandaloneServerColumn.MANAGEMENT_ADDRESS;
 import static org.jboss.hal.core.finder.FinderColumn.RefreshMode.RESTORE_SELECTION;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
@@ -65,15 +66,14 @@ public class StandaloneServerColumn extends FinderColumn<Server> implements Serv
     static final String MANAGEMENT_ADDRESS = ""/core-service=management"";
     private static final AddressTemplate MANAGEMENT_TEMPLATE = AddressTemplate.of(MANAGEMENT_ADDRESS);
 
-
     private final Finder finder;
     private FinderPath refreshPath;
 
     @Inject
     public StandaloneServerColumn(Finder finder, EventBus eventBus, Dispatcher dispatcher,
             FinderPathFactory finderPathFactory, ItemActionFactory itemActionFactory,
             ServerActions serverActions, PlaceManager placeManager, Places places,
-            Resources resources, ItemMonitor itemMonitor) {
+            Resources resources) {
         super(new Builder<Server>(finder, Ids.STANDALONE_SERVER, Names.SERVER)
 
                 .itemsProvider((context, callback) -> {
@@ -151,14 +151,13 @@ public List<ItemAction<Server>> actions() {
                                 actions.add(itemActionFactory.placeRequest(Names.BOOT_ERRORS, bootErrorsRequest,
                                         Constraint.executable(MANAGEMENT_TEMPLATE, READ_BOOT_ERRORS)));
                             }
-                            PlaceRequest placeRequestConfChanges = new PlaceRequest.Builder()
-                                    .nameToken(NameTokens.CONFIGURATION_CHANGES).build();
-                            actions.add(new ItemAction.Builder<Server>()
-                                    .title(resources.constants().configurationChanges())
-                                    .handler(itemMonitor.monitorPlaceRequest(Ids.CONFIGURATION_CHANGES, placeRequestConfChanges.getNameToken(),
-                                            () -> placeManager.revealPlace(placeRequestConfChanges)))
-                                    .constraint(Constraint.executable(CONFIGURATION_CHANGES_TEMPLATE, CONFIGURATION_CHANGES))
-                                    .build());
+                            if (ManagementModel.supportsConfigurationChanges(item.getManagementVersion())) {
+                                // Use ItemMonitor?
+                                PlaceRequest ccPlaceRequest = new PlaceRequest.Builder()
+                                        .nameToken(NameTokens.CONFIGURATION_CHANGES).build();
+                                actions.add(itemActionFactory.placeRequest(resources.constants().configurationChanges(),
+                                        ccPlaceRequest, Constraint.executable(CONFIGURATION_CHANGES_TEMPLATE, ADD)));
+                            }
                         }
                         return actions;
                     }",2017-09-19T06:21:16Z,50
"@@ -17,20 +17,18 @@
 
 import java.util.Date;
 
-import com.google.gwt.i18n.shared.DateTimeFormat;
 import org.jboss.hal.dmr.NamedNode;
 import org.jboss.hal.dmr.Property;
 
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.dmr.ModelNodeHelper.asEnumValue;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafeDate;
 import static org.jboss.hal.dmr.ModelNodeHelper.getOrDefault;
 
 class ExecutionNode extends NamedNode {
 
     enum BatchStatus {STARTED, STOPPED, COMPLETED, FAILED, ABANDONED, UNKNOWN}
 
-    private static final DateTimeFormat ISO_8601 = DateTimeFormat.getFormat(DateTimeFormat.PredefinedFormat.ISO_8601);
-
     private final int executionId;
     private final int instanceId;
 
@@ -61,22 +59,22 @@ String getExitError() {
     }
 
     Date getCreateTime() {
-        return getOrDefault(this, CREATE_TIME, () -> ISO_8601.parse(get(CREATE_TIME).asString()), null);
+        return failSafeDate(this, CREATE_TIME);
     }
 
     Date getStartTime() {
-        return getOrDefault(this, START_TIME, () -> ISO_8601.parse(get(START_TIME).asString()), null);
+        return failSafeDate(this, START_TIME);
     }
 
     Date getEndTime() {
-        return getOrDefault(this, END_TIME, () -> ISO_8601.parse(get(END_TIME).asString()), null);
+        return failSafeDate(this, END_TIME);
     }
 
     long getDuration() {
         return getEndTime().getTime() - getStartTime().getTime();
     }
 
     Date getLastUpdatedTime() {
-        return getOrDefault(this, LAST_UPDATED_TIME, () -> ISO_8601.parse(get(LAST_UPDATED_TIME).asString()), null);
+        return failSafeDate(this, LAST_UPDATED_TIME);
     }
 }",2017-09-19T06:21:16Z,239
"@@ -17,11 +17,10 @@
 
 import java.util.Date;
 
-import com.google.gwt.i18n.shared.DateTimeFormat;
 import org.jboss.hal.ballroom.Format;
 import org.jboss.hal.dmr.ModelNode;
 
-import static com.google.gwt.i18n.shared.DateTimeFormat.PredefinedFormat.ISO_8601;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafeDate;
 
 class LogFile extends ModelNode {
 
@@ -30,8 +29,6 @@ class LogFile extends ModelNode {
     private static final String LAST_MODIFIED_DATE = ""last-modified-date"";
     private static final String LAST_MODIFIED_TIMESTAMP = ""last-modified-timestamp"";
 
-    private static final DateTimeFormat DATE_TIME_FORMAT = DateTimeFormat.getFormat(ISO_8601);
-
     LogFile(final ModelNode node) {
         set(node);
     }
@@ -47,24 +44,13 @@ public String getFilename() {
 
     public Date getLastModifiedDate() {
         // first try LAST_MODIFIED_DATE then LAST_MODIFIED_TIMESTAMP
-        Date date = convert(LAST_MODIFIED_DATE);
+        Date date = failSafeDate(this, LAST_MODIFIED_DATE);
         if (date == null) {
-            date = convert(LAST_MODIFIED_TIMESTAMP);
+            date = failSafeDate(this, LAST_MODIFIED_TIMESTAMP);
         }
         return date;
     }
 
-    private Date convert(String attribute) {
-        if (hasDefined(attribute)) {
-            try {
-                return DATE_TIME_FORMAT.parse(get(attribute).asString());
-            } catch (IllegalArgumentException e) {
-                return null;
-            }
-        }
-        return null;
-    }
-
     public String getFormattedLastModifiedDate() {
         Date lastModifiedDate = getLastModifiedDate();
         if (lastModifiedDate != null) {",2017-09-19T06:21:16Z,74
"@@ -300,15 +300,15 @@ public Toolbar(DataProvider<T> dataProvider, List<Attribute<T>> attributes, List
             for (Iterator<Action> iterator = actions.iterator(); iterator.hasNext(); i++) {
                 Action action = iterator.next();
                 String actionId = Ids.build(Ids.TOOLBAR, ""action"", action.id);
-                if (i < 2) {
+                if (i < 3) {
                     actionsContainer.appendChild(button()
                             .css(btn, btnDefault)
                             .id(actionId)
                             .textContent(action.text)
                             .on(click, e -> action.callback.execute())
                             .apply(b -> b.type = UIConstants.BUTTON)
                             .asElement());
-                    if (i == 1) {
+                    if (i == 2) {
                         actionsContainer.appendChild(div().css(dropdown, btnGroup, dropdownKebabPf)
                                 .add(button().css(btn, btnLink, dropdownToggle)
                                         .id(Ids.TOOLBAR_ACTION_DROPDOWN)",2017-09-19T06:21:16Z,9
"@@ -78,18 +78,12 @@ default HasElements getAdditionalInfoElements() {
         return null;
     }
 
-    /**
-     * The length of the description content. Override this method to control when the display content
-     *
-     */
+    /** The length of the description content. Override this method to control when the display content */
     default int getDescriptionLength() {
         return -1;
     }
 
-    /**
-     * The maximum allowed length of the description content to be displayed by default.
-     *
-     */
+    /** The maximum allowed length of the description content to be displayed by default. */
     default int getMaxDescriptionLength() {
         return 600;
     }",2017-09-19T06:21:16Z,240
"@@ -149,7 +149,6 @@ public interface ModelDescriptionConstants {
     String CONFIGURABLE_SASL_SERVER_FACTORY = ""configurable-sasl-server-factory"";
     String CONFIGURATION = ""configuration"";
     String CONNECTED = ""connected"";
-    String CONFIGURATION_CHANGES = ""configuration-changes"";
     String CONNECTION_COUNT = ""connection-count"";
     String CONNECTION_LIMIT_HIGH_WATER_MARK = ""connection-limit-high-water-mark"";
     String CONNECTION_LIMIT_LOW_WATER_MARK = ""connection-limit-low-water-mark"";",2017-09-19T06:21:16Z,109
"@@ -17,6 +17,7 @@
 
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.Date;
 import java.util.Iterator;
 import java.util.List;
 import java.util.function.Function;
@@ -25,6 +26,8 @@
 import com.google.common.base.Splitter;
 import com.google.common.base.Strings;
 import com.google.common.collect.Iterables;
+import com.google.gwt.core.client.GWT;
+import com.google.gwt.i18n.shared.DateTimeFormat;
 import jsinterop.annotations.JsIgnore;
 import jsinterop.annotations.JsMethod;
 import jsinterop.annotations.JsType;
@@ -41,9 +44,11 @@
  * parameter separated by ""/"" to get a deeply nested data.
  */
 @JsType
-public final class ModelNodeHelper {
+public class ModelNodeHelper {
 
     private static final String ENCODED_SLASH = ""%2F"";
+    private static final DateTimeFormat ISO_8601 = GWT.isScript() ? DateTimeFormat.getFormat(
+            DateTimeFormat.PredefinedFormat.ISO_8601) : null;
 
     @JsIgnore
     public static String encodeValue(String value) {
@@ -63,7 +68,7 @@ public static String decodeValue(String value) {
      *
      * @return The nested node or an empty / undefined model node
      */
-    public static ModelNode failSafeGet(final ModelNode modelNode, final String path) {
+    public static ModelNode failSafeGet(ModelNode modelNode, String path) {
         ModelNode undefined = new ModelNode();
 
         if (Strings.emptyToNull(path) != null) {
@@ -95,26 +100,36 @@ public static ModelNode failSafeGet(final ModelNode modelNode, final String path
      *
      * @return the boolean value or false.
      */
-    public static boolean failSafeBoolean(final ModelNode modelNode, final String path) {
+    public static boolean failSafeBoolean(ModelNode modelNode, String path) {
         ModelNode attribute = failSafeGet(modelNode, path);
         return attribute.isDefined() && attribute.asBoolean();
     }
 
     @JsIgnore
-    public static List<ModelNode> failSafeList(final ModelNode modelNode, final String path) {
+    public static Date failSafeDate(ModelNode modelNode, String path) {
+        ModelNode attribute = failSafeGet(modelNode, path);
+        if (attribute.isDefined()) {
+            try {
+                return ISO_8601.parse(attribute.asString());
+            } catch (IllegalArgumentException ignore) { }
+        }
+        return null;
+    }
+
+    @JsIgnore
+    public static List<ModelNode> failSafeList(ModelNode modelNode, String path) {
         ModelNode result = failSafeGet(modelNode, path);
         return result.isDefined() ? result.asList() : Collections.emptyList();
     }
 
     @JsIgnore
-    public static List<Property> failSafePropertyList(final ModelNode modelNode, final String path) {
+    public static List<Property> failSafePropertyList(ModelNode modelNode, String path) {
         ModelNode result = failSafeGet(modelNode, path);
         return result.isDefined() ? result.asPropertyList() : Collections.emptyList();
     }
 
     @JsIgnore
-    public static <T> T getOrDefault(final ModelNode modelNode, String attribute, Supplier<T> supplier,
-            T defaultValue) {
+    public static <T> T getOrDefault(ModelNode modelNode, String attribute, Supplier<T> supplier, T defaultValue) {
         T result = defaultValue;
         if (modelNode != null && modelNode.hasDefined(attribute)) {
             try {
@@ -149,17 +164,16 @@ public static List<NamedNode> asNamedNodes(List<Property> properties) {
      * {@code LOWER_HYPHEN.to(UPPER_UNDERSCORE, modelNode.get(attribute).asString())}.
      */
     @JsIgnore
-    public static <E extends Enum<E>> E asEnumValue(final ModelNode modelNode, final String attribute,
-            final Function<String, E> valueOf, final E defaultValue) {
+    public static <E extends Enum<E>> E asEnumValue(ModelNode modelNode, String attribute, Function<String, E> valueOf,
+            E defaultValue) {
         if (modelNode.hasDefined(attribute)) {
             return asEnumValue(modelNode.get(attribute), valueOf, defaultValue);
         }
         return defaultValue;
     }
 
     @JsIgnore
-    public static <E extends Enum<E>> E asEnumValue(final ModelNode modelNode, final Function<String, E> valueOf,
-            final E defaultValue) {
+    public static <E extends Enum<E>> E asEnumValue(ModelNode modelNode, Function<String, E> valueOf, E defaultValue) {
         E value = defaultValue;
         String converted = LOWER_HYPHEN.to(UPPER_UNDERSCORE, modelNode.asString());
         try {
@@ -172,7 +186,7 @@ public static <E extends Enum<E>> E asEnumValue(final ModelNode modelNode, final
      * The reverse operation to {@link #asEnumValue(ModelNode, String, Function, Enum)}.
      */
     @JsIgnore
-    public static <E extends Enum<E>> String asAttributeValue(final E enumValue) {
+    public static <E extends Enum<E>> String asAttributeValue(E enumValue) {
         return UPPER_UNDERSCORE.to(LOWER_HYPHEN, enumValue.name());
     }
 
@@ -234,7 +248,7 @@ private ModelNodeHelper() {}
      */
     @JsMethod(name = ""failSafeList"")
     @EsReturn(""ModelNode[]"")
-    public static ModelNode[] jsFailSafeList(final ModelNode modelNode, final String path) {
+    public static ModelNode[] jsFailSafeList(ModelNode modelNode, String path) {
         List<ModelNode> nodes = failSafeList(modelNode, path);
         return nodes.toArray(new ModelNode[nodes.size()]);
     }
@@ -250,7 +264,7 @@ public static ModelNode[] jsFailSafeList(final ModelNode modelNode, final String
      */
     @JsMethod(name = ""failSafePropertyList"")
     @EsReturn(""Property[]"")
-    public static Property[] jsFailSafePropertyList(final ModelNode modelNode, final String path) {
+    public static Property[] jsFailSafePropertyList(ModelNode modelNode, String path) {
         List<Property> properties = failSafePropertyList(modelNode, path);
         return properties.toArray(new Property[properties.size()]);
     }",2017-09-19T06:21:16Z,110
"@@ -3,7 +3,9 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 @SuppressWarnings(""HardCodedStringLiteral"")
 public class ModelNodeHelperTest {",2017-09-19T06:21:16Z,241
"@@ -54,6 +54,17 @@ public static boolean supportsCapabilitiesRegistry(Version version) {
         return ensureVersion(version, V_5_0_0);
     }
 
+    /**
+     * Checks support for configuration changes as defined
+     * by {@code {selected.host}/subsystem=core-management/service=configuration-changes}.
+     *
+     * @return {@code true} if the provided version isn't {@linkplain Version#UNDEFINED undefined} and greater than or
+     * equal {@code 5.0.0}
+     */
+    public static boolean supportsConfigurationChanges(Version version) {
+        return ensureVersion(version, V_5_0_0);
+    }
+
     /**
      * Checks support for the resource {@code /subsystem=ejb3/application-security-domain=*}.
      *",2017-09-19T06:21:16Z,189
"@@ -46,7 +46,7 @@ committed=Commited
 completed=Completed
 completedExecutions=All executions completed successfully
 composite=Composite
-configurationChanges=Configuration changes
+configurationChanges=Configuration Changes
 configurationChangesNotEnabled=Configuration changes is not enabled.
 connectToServer=Connect to different server
 connectedTo=Connected To",2017-09-19T06:21:16Z,100
"@@ -27,7 +27,6 @@ class LogFile extends ModelNode {
     // TODO Move to ModelDescriptionConstants
     private static final String FILE_NAME = ""file-name"";
     private static final String FILE_SIZE = ""file-size"";
-    private static final String LAST_MODIFIED_DATE = ""last-modified-date"";
     private static final String LAST_MODIFIED_TIMESTAMP = ""last-modified-timestamp"";
 
     LogFile(ModelNode node) {
@@ -44,12 +43,7 @@ public String getFilename() {
     }
 
     public Date getLastModifiedDate() {
-        // first try LAST_MODIFIED_DATE then LAST_MODIFIED_TIMESTAMP
-        Date date = failSafeDate(this, LAST_MODIFIED_DATE);
-        if (date == null) {
-            date = failSafeDate(this, LAST_MODIFIED_TIMESTAMP);
-        }
-        return date;
+        return failSafeDate(this, LAST_MODIFIED_TIMESTAMP);
     }
 
     public String getFormattedLastModifiedDate() {",2019-09-05T11:55:51Z,74
"@@ -28,6 +28,8 @@
 import org.jboss.hal.core.finder.ItemActionFactory;
 import org.jboss.hal.core.finder.ItemDisplay;
 import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.Property;
+import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.token.NameTokens;
@@ -42,10 +44,7 @@
 import static java.util.stream.Collectors.toList;
 import static org.jboss.hal.client.runtime.subsystem.logging.AddressTemplates.LOGGING_SUBSYSTEM_ADDRESS;
 import static org.jboss.hal.client.runtime.subsystem.logging.AddressTemplates.LOG_FILE_ADDRESS;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.HOST;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.NAME;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.SERVER;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.SERVER_GROUP;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 
 @Column(Ids.LOG_FILE)
 @Requires(value = {LOGGING_SUBSYSTEM_ADDRESS, LOG_FILE_ADDRESS}, recursive = false)
@@ -63,13 +62,20 @@ public LogFileColumn(final Finder finder,
 
                 .columnAction(columnActionFactory.refresh(Ids.LOG_FILE_REFRESH))
                 .itemsProvider((context, callback) -> {
-                    Operation operation = new Operation.Builder(
-                            AddressTemplates.LOGGING_SUBSYSTEM_TEMPLATE.resolve(statementContext),
-                            ""list-log-files"").build(); //NON-NLS
-                    dispatcher.execute(operation, result -> callback.onSuccess(result.asList().stream()
-                            .map(LogFile::new)
-                            .sorted(comparing(LogFile::getFilename))
-                            .collect(toList())));
+                    ResourceAddress address = AddressTemplates.LOGGING_SUBSYSTEM_TEMPLATE.resolve(statementContext);
+                    Operation operation = new Operation.Builder(address, READ_CHILDREN_RESOURCES_OPERATION)
+                            .param(CHILD_TYPE, ""log-file"") //NON-NLS
+                            .param(INCLUDE_RUNTIME, true)
+                            .build();
+                    dispatcher.execute(operation, result -> {
+                        callback.onSuccess(result.asList().stream()
+                                .map(node -> {
+                                    Property prop = node.asProperty();
+                                    return new LogFile(prop.getName(), prop.getValue());
+                                })
+                                .sorted(comparing(LogFile::getFilename))
+                                .collect(toList()));
+                    });
                 })
                 .itemRenderer(item -> new ItemDisplay<LogFile>() {
                     @Override",2019-09-05T11:55:51Z,74
"@@ -134,6 +134,8 @@
 import org.jboss.hal.client.runtime.RuntimeView;
 import org.jboss.hal.client.runtime.group.Mbui_ServerGroupView;
 import org.jboss.hal.client.runtime.group.ServerGroupPresenter;
+import org.jboss.hal.client.runtime.host.configurationchanges.ConfigurationChangesPresenter;
+import org.jboss.hal.client.runtime.host.configurationchanges.ConfigurationChangesView;
 import org.jboss.hal.client.runtime.host.HostPresenter;
 import org.jboss.hal.client.runtime.host.Mbui_HostView;
 import org.jboss.hal.client.runtime.server.ServerBootErrorsPresenter;
@@ -241,6 +243,11 @@ protected void configure() {
                 Mbui_ClusteringView.class,
                 ClusteringPresenter.MyProxy.class);
 
+        bindPresenter(ConfigurationChangesPresenter.class,
+                ConfigurationChangesPresenter.MyView.class,
+                ConfigurationChangesView.class,
+                ConfigurationChangesPresenter.MyProxy.class);
+
         bindPresenter(ConfigurationPresenter.class,
                 ConfigurationPresenter.MyView.class,
                 ConfigurationView.class,",2017-09-12T19:21:32Z,44
"@@ -49,10 +49,6 @@ public ManagementColumn(final Finder finder,
                         .onPreview(new ManagementInterfacePreview(crud, statementContext))
                         .build(),
 
-                new StaticItem.Builder(Names.CONFIGURATION_CHANGES)
-                        .action(itemActionFactory.view(NameTokens.CONFIGURATION_CHANGES))
-                        .build(),
-
                 new StaticItem.Builder(Names.EXTENSIONS)
                         .nextColumn(Ids.EXTENSION)
                         .onPreview(new PreviewContent(Names.EXTENSIONS, resources.previews().managementExtensions()))",2017-09-12T19:21:32Z,242
"@@ -22,6 +22,7 @@
 
 import com.google.gwt.user.client.rpc.AsyncCallback;
 import com.google.web.bindery.event.shared.EventBus;
+import com.gwtplatform.mvp.client.proxy.PlaceManager;
 import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
 import elemental2.dom.HTMLElement;
 import org.jboss.hal.ballroom.dialog.DialogFactory;
@@ -99,6 +100,8 @@ public HostColumn(Finder finder,
             CrudOperations crud,
             EventBus eventBus,
             StatementContext statementContext,
+            ItemMonitor itemMonitor,
+            PlaceManager placeManager,
             @Footer Provider<Progress> progress,
             ColumnActionFactory columnActionFactory,
             ItemActionFactory itemActionFactory,
@@ -245,6 +248,9 @@ public List<ItemAction<Host>> actions() {
                 if (item.isConnected()) {
                     PlaceRequest placeRequest = new PlaceRequest.Builder().nameToken(NameTokens.HOST_CONFIGURATION)
                             .with(HOST, item.getAddressName()).build();
+                    PlaceRequest placeRequestConfChanges = new PlaceRequest.Builder()
+                            .nameToken(NameTokens.CONFIGURATION_CHANGES)
+                            .with(HOST, item.getAddressName()).build();
                     List<ItemAction<Host>> actions = new ArrayList<>();
                     actions.add(itemActionFactory.viewAndMonitor(Ids.host(item.getAddressName()), placeRequest));
                     if (!hostActions.isPending(item)) {
@@ -258,6 +264,14 @@ public List<ItemAction<Host>> actions() {
                                 .handler(hostActions::restart)
                                 .constraint(Constraint.executable(hostTemplate(item), SHUTDOWN))
                                 .build());
+                        actions.add(new ItemAction.Builder<Host>()
+                                .title(resources.constants().configurationChanges())
+                                .handler(itemMonitor.monitorPlaceRequest(
+                                        Ids.build(Ids.host(item.getAddressName()), Ids.CONFIGURATION_CHANGES),
+                                        placeRequestConfChanges.getNameToken(),
+                                        () -> placeManager.revealPlace(placeRequestConfChanges)))
+                                .constraint(Constraint.executable(hostTemplate(item), CONFIGURATION_CHANGES))
+                                .build());
                         // TODO Add additional operations like :reload(admin-mode=true), :clean-obsolete-content or :take-snapshot
                     }
                     return actions;",2017-09-12T19:21:32Z,5
"@@ -0,0 +1,73 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.runtime.host.configurationchanges;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.NamedNode;
+
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+
+public class ConfigurationChange extends NamedNode {
+
+    private Boolean composite;
+    private List<ModelNode> changes = new ArrayList<>();
+
+    public ConfigurationChange(ModelNode model) {
+        super(model.get(DOMAIN_UUID).asString(), model);
+
+        model.get(OPERATIONS).asList().forEach(nestedNode -> {
+            composite = nestedNode.get(OPERATION).asString().equals(COMPOSITE);
+        });
+    }
+
+    String getOperationDate() {
+        return get(OPERATION_DATE).asString();
+    }
+
+    String getAccessMechanism() {
+        return get(ACCESS_MECHANISM).asString();
+    }
+
+    String getRemoteAddress() {
+        return get(REMOTE_ADDRESS).asString();
+    }
+
+    boolean isSuccess() {
+        return get(OUTCOME).asString().equals(SUCCESS);
+    }
+
+    String getOutcome() {
+        return get(OUTCOME).asString();
+    }
+
+    boolean isComposite() {
+        return composite;
+    }
+
+    List<ModelNode> changes() {
+        List<ModelNode> changes;
+        if (composite) {
+            changes = get(OPERATIONS).asList().get(0).get(STEPS).asList();
+        } else {
+            changes = get(OPERATIONS).asList();
+        }
+        return changes;
+    }
+
+}",2017-09-12T19:21:32Z,61
"@@ -0,0 +1,129 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.runtime.host.configurationchanges;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import com.google.gwt.safehtml.shared.SafeHtml;
+import com.google.gwt.safehtml.shared.SafeHtmlBuilder;
+import com.google.gwt.safehtml.shared.SafeHtmlUtils;
+import elemental2.dom.HTMLElement;
+import elemental2.dom.HTMLPreElement;
+import org.jboss.gwt.elemento.core.HasElements;
+import org.jboss.gwt.elemento.core.builder.ElementsBuilder;
+import org.jboss.gwt.elemento.core.builder.HtmlContentBuilder;
+import org.jboss.hal.ballroom.listview.ItemAction;
+import org.jboss.hal.ballroom.listview.ItemDisplay;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Resources;
+
+import static org.jboss.gwt.elemento.core.Elements.div;
+import static org.jboss.gwt.elemento.core.Elements.elements;
+import static org.jboss.gwt.elemento.core.Elements.p;
+import static org.jboss.gwt.elemento.core.Elements.pre;
+import static org.jboss.gwt.elemento.core.Elements.span;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.ADDRESS;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.CONFIGURATION_CHANGES;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.OPERATION;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.OPERATION_HEADERS;
+import static org.jboss.hal.resources.CSS.*;
+
+class ConfigurationChangeDisplay implements ItemDisplay<ConfigurationChange> {
+
+    private final ConfigurationChange item;
+    private final ConfigurationChangesPresenter presenter;
+    private final Resources resources;
+
+    ConfigurationChangeDisplay(ConfigurationChange item, ConfigurationChangesPresenter presenter, Resources resources) {
+        this.item = item;
+        this.presenter = presenter;
+        this.resources = resources;
+    }
+
+    @Override
+    public String getId() {
+        return Ids.build(CONFIGURATION_CHANGES, String.valueOf(item.getName()));
+    }
+
+    @Override
+    public HTMLElement getStatusElement() {
+        HtmlContentBuilder<HTMLElement> builder = span()
+                .css(listHalIconBig)
+                .title(resources.constants().outcome() + "":  "" + item.getOutcome());
+        if (item.isSuccess()) {
+            builder.css(pfIcon(ok), listHalIconSuccess);
+        } else {
+            builder.css(pfIcon(errorCircleO), listHalIconError);
+        }
+        return builder.asElement();
+    }
+
+    @Override
+    public String getTitle() {
+        return resources.constants().operationDate() + "": "" + item.getOperationDate().replace('T', ' ');
+    }
+
+    @Override
+    @SuppressWarnings(""HardCodedStringLiteral"")
+    public SafeHtml getDescriptionHtml() {
+        SafeHtmlBuilder html = new SafeHtmlBuilder();
+        item.changes().forEach(m -> {
+            String op = m.get(OPERATION).asString();
+            ResourceAddress address = new ResourceAddress(m.get(ADDRESS));
+            html.append(SafeHtmlUtils.fromTrustedString(resources.constants().operation() + "": <strong>"" + op + ""</strong>&nbsp;&nbsp;&nbsp;&nbsp;""));
+            html.append(SafeHtmlUtils.fromTrustedString(resources.constants().address() + "": <strong>"" + address + ""</strong><br/>""));
+            HTMLPreElement elem = pre().css(formControlStatic, wrap).asElement();
+            m.asPropertyList().forEach(prop -> {
+                boolean allowedProperties = !(prop.getName().equals(OPERATION) || prop.getName().equals(ADDRESS) || prop.getName().equals(OPERATION_HEADERS));
+                if (allowedProperties) {
+                    html.append(SafeHtmlUtils.fromTrustedString(""&nbsp;&nbsp;&nbsp;&nbsp;"" + prop.getName() + "": "" + prop.getValue() + ""<br/>""));
+                }
+            });
+        });
+        return html.toSafeHtml();
+    }
+
+    @Override
+    @SuppressWarnings(""HardCodedStringLiteral"")
+    public HasElements getAdditionalInfoElements() {
+        ElementsBuilder elements = elements();
+        elements.add(div().css(halExecutionTime)
+                .add(p().css(textRight).innerHtml(new SafeHtmlBuilder()
+
+                        .appendEscaped(resources.constants().accessMechanism() + "": "")
+                        .appendEscaped(item.getAccessMechanism())
+                        .appendHtmlConstant(""<br/>"")
+
+                        .appendEscaped(resources.constants().remoteAddress() + "": "")
+                        .appendEscaped(item.getRemoteAddress())
+                        .appendHtmlConstant(""<br/>"")
+
+                        .appendEscaped(resources.constants().composite() + "": "")
+                        .appendEscaped("""" + item.isComposite())
+                        .toSafeHtml())));
+        return elements;
+    }
+
+    @Override
+    public List<ItemAction<ConfigurationChange>> actions() {
+        List<ItemAction<ConfigurationChange>> actions = new ArrayList<>();
+        String id = Ids.build(Ids.CONFIGURATION_CHANGES, item.getName(), ""view"");
+        actions.add(new ItemAction<>(id, resources.constants().view(), presenter::viewRawChange));
+        return actions;
+    }
+}",2017-09-12T19:21:32Z,59
"@@ -0,0 +1,194 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.runtime.host.configurationchanges;
+
+import javax.inject.Inject;
+
+import com.google.web.bindery.event.shared.EventBus;
+import com.gwtplatform.mvp.client.annotations.NameToken;
+import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
+import com.gwtplatform.mvp.client.proxy.ProxyPlace;
+import elemental2.dom.HTMLElement;
+import elemental2.dom.HTMLPreElement;
+import org.jboss.hal.ballroom.dialog.Dialog;
+import org.jboss.hal.ballroom.dialog.DialogFactory;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.core.CrudOperations;
+import org.jboss.hal.core.finder.Finder;
+import org.jboss.hal.core.finder.FinderPath;
+import org.jboss.hal.core.finder.FinderPathFactory;
+import org.jboss.hal.core.mbui.form.OperationFormBuilder;
+import org.jboss.hal.core.mvp.ApplicationFinderPresenter;
+import org.jboss.hal.core.mvp.HalView;
+import org.jboss.hal.core.mvp.HasPresenter;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.MetadataRegistry;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Requires;
+
+import static org.jboss.gwt.elemento.core.Elements.div;
+import static org.jboss.gwt.elemento.core.Elements.pre;
+import static org.jboss.hal.ballroom.dialog.Dialog.Size.MEDIUM;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.resources.CSS.formControlStatic;
+import static org.jboss.hal.resources.CSS.wrap;
+import static org.jboss.hal.resources.Ids.ADD_SUFFIX;
+import static org.jboss.hal.resources.Ids.FORM_SUFFIX;
+
+public class ConfigurationChangesPresenter
+        extends
+        ApplicationFinderPresenter<ConfigurationChangesPresenter.MyView, ConfigurationChangesPresenter.MyProxy> {
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @NameToken(CONFIGURATION_CHANGES)
+    @Requires(CONFIGURATION_CHANGES_ADDRESS)
+    public interface MyProxy extends ProxyPlace<ConfigurationChangesPresenter> {}
+    public interface MyView extends HalView, HasPresenter<ConfigurationChangesPresenter> {
+        void update(ModelNode model);
+    }
+
+    final static String CONFIGURATION_CHANGES_ADDRESS = ""/{selected.host}/subsystem=core-management/service=configuration-changes"";
+    final static AddressTemplate CONFIGURATION_CHANGES_TEMPLATE = AddressTemplate.of(CONFIGURATION_CHANGES_ADDRESS);
+    final static AddressTemplate CORE_MANAGEMENT_TEMPLATE = AddressTemplate.of(""/{selected.host}/subsystem=core-management"");
+
+    // @formatter:on
+    private final FinderPathFactory finderPathFactory;
+    private final Dispatcher dispatcher;
+    private final StatementContext statementContext;
+    private final Resources resources;
+    private CrudOperations crud;
+    private MetadataRegistry metadataRegistry;
+
+    @Inject
+    public ConfigurationChangesPresenter(final EventBus eventBus,
+            final MyView view,
+            final MyProxy myProxy,
+            final Finder finder,
+            final FinderPathFactory finderPathFactory,
+            final Dispatcher dispatcher,
+            final MetadataRegistry metadataRegistry,
+            final StatementContext statementContext,
+            final CrudOperations crud,
+            final Resources resources) {
+        super(eventBus, view, myProxy, finder);
+        this.finderPathFactory = finderPathFactory;
+        this.dispatcher = dispatcher;
+        this.metadataRegistry = metadataRegistry;
+        this.statementContext = statementContext;
+        this.crud = crud;
+        this.resources = resources;
+    }
+
+    @Override
+    protected void onBind() {
+        super.onBind();
+        getView().setPresenter(this);
+    }
+
+    @Override
+    public FinderPath finderPath() {
+        return finderPathFactory.runtimeHostPath()
+                .append(""core-service"", Ids.CONFIGURATION_CHANGES, ""Core Service"",
+                        resources.constants().configurationChanges());
+    }
+
+    @Override
+    protected void reload() {
+        ResourceAddress address1 = CORE_MANAGEMENT_TEMPLATE.resolve(statementContext);
+        Operation operation1 = new Operation.Builder(address1, READ_CHILDREN_NAMES_OPERATION)
+                .param(CHILD_TYPE, SERVICE)
+                .build();
+        dispatcher.execute(operation1, result -> {
+            boolean configurationChangesEnabled = result.asList().size() > 0;
+
+            if (configurationChangesEnabled) {
+                ResourceAddress address = CONFIGURATION_CHANGES_TEMPLATE.resolve(statementContext);
+                Operation operation = new Operation.Builder(address, LIST_CHANGES_OPERATION)
+                        .build();
+                dispatcher.execute(operation, result2 -> getView().update(result2));
+            } else {
+                getView().update(new ModelNode());
+            }
+        });
+    }
+
+    void launchAdd() {
+        Metadata metadata = metadataRegistry.lookup(CONFIGURATION_CHANGES_TEMPLATE);
+        String id = Ids.build(ADD_SUFFIX, CONFIGURATION_CHANGES, FORM_SUFFIX);
+        Form<ModelNode> form = new OperationFormBuilder<>(id, metadata, ADD)
+                .build();
+        ModelNode changeModel = new ModelNode();
+        Dialog dialog = new Dialog.Builder(resources.constants().configurationChanges())
+                .add(form.asElement())
+                .primary(resources.constants().yes(), () -> {
+                    boolean valid = form.save();
+                    // if the form contains validation error, don't close the dialog
+                    if (valid) {
+                        crud.addSingleton(Names.CONFIGURATION_CHANGES, CONFIGURATION_CHANGES_TEMPLATE, form.getModel(),
+                                address -> reload());
+                    }
+                    return valid;
+                })
+                .secondary(resources.constants().cancel(), () -> true)
+                .closeIcon(true)
+                .closeOnEsc(true)
+                .build();
+
+        dialog.show();
+        form.edit(changeModel);
+    }
+
+    void disable() {
+        DialogFactory.showConfirmation(resources.constants().configurationChanges(),
+                resources.messages().removeConfigurationChangesQuestion(statementContext.selectedHost()),
+                () -> {
+                    ResourceAddress address = CONFIGURATION_CHANGES_TEMPLATE.resolve(statementContext);
+                    Operation operation = new Operation.Builder(address, REMOVE)
+                            .build();
+                    dispatcher.execute(operation, result -> getView().update(result));
+                });
+    }
+
+    void viewRawChange(final ConfigurationChange change) {
+        HTMLPreElement elem = pre().css(formControlStatic, wrap).asElement();
+        elem.textContent = change.asModelNode().toString();
+
+        HTMLElement content = div()
+                .add(elem)
+                .asElement();
+
+        Dialog dialog = new Dialog.Builder(resources.constants().configurationChanges())
+                .primary(resources.constants().close(), () -> true)
+                .closeOnEsc(true)
+                .size(MEDIUM)
+                .add(content)
+                .build();
+        dialog.show();
+    }
+
+    public StatementContext getStatementContext() {
+        return statementContext;
+    }
+}",2017-09-12T19:21:32Z,55
"@@ -0,0 +1,121 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.runtime.host.configurationchanges;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import javax.inject.Inject;
+
+import org.jboss.hal.ballroom.EmptyState;
+import org.jboss.hal.ballroom.Toolbar;
+import org.jboss.hal.ballroom.dataprovider.DataProvider;
+import org.jboss.hal.core.mbui.listview.ModelNodeListView;
+import org.jboss.hal.core.mvp.HalViewImpl;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.MetadataRegistry;
+import org.jboss.hal.resources.Constants;
+import org.jboss.hal.resources.Icons;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Messages;
+import org.jboss.hal.resources.Resources;
+
+import static java.util.Comparator.comparing;
+import static org.jboss.hal.client.runtime.host.configurationchanges.ConfigurationChangesPresenter.CONFIGURATION_CHANGES_TEMPLATE;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+
+public class ConfigurationChangesView extends HalViewImpl implements ConfigurationChangesPresenter.MyView {
+
+    private static final String empty = ""empty"";
+    private static final String notEnabled = ""not_enabled"";
+    private final DataProvider<ConfigurationChange> dataProvider;
+    private ConfigurationChangesPresenter presenter;
+    private ModelNodeListView<ConfigurationChange> listView;
+
+    @Inject
+    public ConfigurationChangesView(MetadataRegistry metadataRegistry, Resources resources) {
+        dataProvider = new DataProvider<>(ConfigurationChange::getName, false);
+
+        Metadata metadata = metadataRegistry.lookup(CONFIGURATION_CHANGES_TEMPLATE)
+                .forOperation(LIST_CHANGES_OPERATION);
+
+        Messages messages = resources.messages();
+        EmptyState notEnabledState = new EmptyState.Builder(resources.constants().configurationChangesNotEnabled())
+                .icon(Icons.INFO)
+                .primaryAction(resources.constants().enableConfigurationChanges(), () -> presenter.launchAdd())
+                .build();
+
+        EmptyState emptyState = new EmptyState.Builder(resources.constants().noItems())
+                .description(resources.messages().noItems())
+                .icon(Icons.INFO)
+                .primaryAction(resources.constants().reload(), () -> presenter.reload())
+                .secondaryAction(resources.constants().disableConfigurationChanges(), () -> presenter.disable())
+                .build();
+
+        String actionIdDisable = Ids.build(Ids.CONFIGURATION_CHANGES, REMOVE);
+        Constants constants = resources.constants();
+        Toolbar.Action disableAction = new Toolbar.Action(actionIdDisable, constants.disable(),
+                () -> presenter.disable());
+        listView = new ModelNodeListView.Builder<>(
+                Ids.build(CONFIGURATION_CHANGES, ""list""), metadata,
+                dataProvider, item -> new ConfigurationChangeDisplay(item, presenter, resources))
+                .toolbarAttribute(new Toolbar.Attribute<>(OUTCOME, constants.outcome(),
+                        (node, filter) -> node.getOutcome().toLowerCase().equals(filter.toLowerCase()),
+                        comparing(ConfigurationChange::getOutcome)))
+                .toolbarAttribute(new Toolbar.Attribute<>(ACCESS_MECHANISM, constants.accessMechanism(),
+                        (node, filter) -> node.getAccessMechanism().toLowerCase().equals(filter.toLowerCase()),
+                        comparing(ConfigurationChange::getAccessMechanism)))
+                .toolbarAttribute(new Toolbar.Attribute<>(OPERATION_DATE, constants.operationDate(),
+                        (node, filter) -> node.getOperationDate().contains(filter),
+                        comparing(ConfigurationChange::getOperationDate)))
+                .toolbarAttribute(new Toolbar.Attribute<>(REMOTE_ADDRESS, constants.remoteAddress(),
+                        (node, filter) -> node.getRemoteAddress().toLowerCase().contains(filter.toLowerCase()),
+                        comparing(ConfigurationChange::getRemoteAddress)))
+                .toolbarAction(disableAction)
+                .toolbarAction(new Toolbar.Action(Ids.build(Ids.CONFIGURATION_CHANGES, Ids.REFRESH_SUFFIX),
+                        constants.reload(), () -> presenter.reload()))
+                .noItems(constants.noItems(), messages.noItems())
+                .emptyState(empty, emptyState)
+                .emptyState(notEnabled, notEnabledState)
+                .build();
+        registerAttachable(listView);
+        initElements(listView);
+    }
+
+    @Override
+    public void setPresenter(ConfigurationChangesPresenter presenter) {
+        this.presenter = presenter;
+    }
+
+    @Override
+    public void update(ModelNode model) {
+        if (model.isDefined()) {
+            List<ConfigurationChange> changes = new ArrayList<>();
+            model.asList().forEach(n -> {
+                changes.add(new ConfigurationChange(n));
+            });
+            dataProvider.update(changes);
+            if (changes.isEmpty()) {
+                listView.showEmptyState(empty);
+            }
+        } else {
+            dataProvider.update(Collections.emptyList());
+            listView.showEmptyState(notEnabled);
+        }
+
+    }
+}",2017-09-12T19:21:32Z,90
"@@ -117,6 +117,10 @@ private PreviewAttributes.PreviewAttribute msAttribute(String attribute, ModelNo
 
     @Override
     public void update(final DeploymentResource item) {
+        // the endpoint name (last value of address) contains %3A character separator
+        // however the dispatcher.execute call performs a http call, then the url is encoded, the %3A becomes %253A
+        // in the endpointa name, causing a HTTP 500 address not found.
+        // Then, read the parent resoource and interate over the endpoint results to match the endpoint name.
         String endpointName = item.getAddress().lastValue();
         Operation operation = new Operation.Builder(item.getAddress().getParent(), READ_CHILDREN_RESOURCES_OPERATION)
                 .param(CHILD_TYPE, ENDPOINT)",2017-09-12T19:21:32Z,243
"@@ -49,6 +49,7 @@ public interface ModelDescriptionConstants {
     String ACCESS_CONSTRAINTS = ""access-constraints"";
     String ACCESS_CONTROL = ""access-control"";
     String ACCESS_LOG = ""access-log"";
+    String ACCESS_MECHANISM = ""access-mechanism"";
     String ACCESS_TYPE = ""access-type"";
     String ACL_MODULE = ""acl-module"";
     String ACTION = ""action"";
@@ -148,6 +149,7 @@ public interface ModelDescriptionConstants {
     String CONFIGURABLE_SASL_SERVER_FACTORY = ""configurable-sasl-server-factory"";
     String CONFIGURATION = ""configuration"";
     String CONNECTED = ""connected"";
+    String CONFIGURATION_CHANGES = ""configuration-changes"";
     String CONNECTION_COUNT = ""connection-count"";
     String CONNECTION_LIMIT_HIGH_WATER_MARK = ""connection-limit-high-water-mark"";
     String CONNECTION_LIMIT_LOW_WATER_MARK = ""connection-limit-low-water-mark"";
@@ -219,6 +221,7 @@ public interface ModelDescriptionConstants {
     String DISCONNECTED = ""disconnected"";
     String DISCOVERY_GROUP = ""discovery-group"";
     String DIVERT = ""divert"";
+    String DOMAIN_UUID = ""domain-uuid"";
     String DRIVER_CLASS = ""driver-class"";
     String DRIVER_CLASS_NAME = ""driver-class-name"";
     String DRIVER_DATASOURCE_CLASS_NAME = ""driver-datasource-class-name"";
@@ -378,6 +381,7 @@ public interface ModelDescriptionConstants {
     String LICENSE = ""license"";
     String LINES = ""lines"";
     String LIST_ADD_OPERATION = ""list-add"";
+    String LIST_CHANGES_OPERATION = ""list-changes"";
     String LIST_MESSAGES = ""list-messages"";
     String LIST_REMOVE_OPERATION = ""list-remove"";
     String LISTENER = ""listener"";
@@ -465,6 +469,7 @@ public interface ModelDescriptionConstants {
     String NUMBER_OF_TRANSACTIONS = ""number-of-transactions"";
     String OP = ""operation"";
     String OPERATION = ""operation"";
+    String OPERATION_DATE = ""operation-date"";
     String OPERATION_HEADERS = ""operation-headers"";
     String OPERATIONS = ""operations"";
     String OUTBOUND_SOCKET_BINDING_REF = ""outbound-socket-binding-ref"";
@@ -570,6 +575,7 @@ public interface ModelDescriptionConstants {
     String RELOAD_REQUIRED = ""reload-required"";
     String RELOAD_SERVERS = ""reload-servers"";
     String REMOTE = ""remote"";
+    String REMOTE_ADDRESS = ""remote-address"";
     String REMOTE_ACCEPTOR = ""remote-acceptor"";
     String REMOTE_COMMAND = ""remote-command"";
     String REMOTE_CONNECTOR = ""remote-connector"";",2017-09-12T19:21:32Z,109
"@@ -39,6 +39,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     //@formatter:off
     String abandoned();
     String aborted();
+    String accessMechanism();
     String accessType();
     String action();
     String active();
@@ -85,6 +86,9 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String committed();
     String completed();
     String completedExecutions();
+    String composite();
+    String configurationChanges();
+    String configurationChangesNotEnabled();
     String connectedTo();
     String connection();
     String connections();
@@ -118,6 +122,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String details();
     String directory();
     String disable();
+    String disableConfigurationChanges();
     String disabled();
     String disconnected();
     String disconnectedUpper();
@@ -131,6 +136,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String edit();
     String editURL();
     String enable();
+    String enableConfigurationChanges();
     String enabled();
     String enableDeployment();
     String enableRbac();
@@ -350,13 +356,15 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String opened();
     String openInExternalWindow();
     String openInModelBrowser();
+    String operationDate();
     String operationFailed();
     String operationMode();
     String operationSuccessful();
     String operation();
     String operations();
     String or();
     String orDragItHere();
+    String outcome();
     String output();
 
     String patchError();
@@ -396,6 +404,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String reload();
     String reloadRequired();
     String reloadStandaloneTooltip();
+    String remoteAddress();
     String remove();
     String rename();
     String replace();",2017-09-12T19:21:32Z,100
"@@ -119,6 +119,7 @@ public interface Ids {
     String CACHE_STORE_WRITE_BEHIND = ""behind"";
     String CACHE_STORE_WRITE_THROUGH = ""write"";
     String CONFIGURATION = ""configuration"";
+    String CONFIGURATION_CHANGES = ""configuration-changes"";
     String CONFIGURATION_SUBSYSTEM = ""css"";
     String CONTENT = ""content"";
     String CONTENT_ADD = build(CONTENT, ADD_SUFFIX);",2017-09-12T19:21:32Z,111
"@@ -40,6 +40,7 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
 
     //@formatter:off
     String activeRoles(String roles);
+    SafeHtml addConfigurationChangesQuestion(String host);
     SafeHtml addHaPolicy();
     SafeHtml addResourceError(String name, String cause);
     SafeHtml addResourceSuccess(String type, String name);
@@ -294,6 +295,7 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
 
     String removeConfirmationTitle(String name);
     SafeHtml removeConfirmationQuestion(String name);
+    SafeHtml removeConfigurationChangesQuestion(String host);
     SafeHtml removeCurrentUserError();
     SafeHtml removeExtensionQuestion();
     SafeHtml removeExtensionSuccess();",2017-09-12T19:21:32Z,94
"@@ -1,5 +1,6 @@
 abandoned=Abandoned
 aborted=Aborted
+accessMechanism=Access Mechanism
 accessType=Access Type
 action=Action
 active=Active
@@ -44,6 +45,9 @@ closed=Closed
 committed=Commited
 completed=Completed
 completedExecutions=All executions completed successfully
+composite=Composite
+configurationChanges=Configuration changes
+configurationChangesNotEnabled=Configuration changes is not enabled.
 connectToServer=Connect to different server
 connectedTo=Connected To
 connection=Connection
@@ -76,6 +80,7 @@ description=Description
 details=Details
 directory=directory
 disable=Disable
+disableConfigurationChanges=Disable Configuration Changes
 disabled=disabled
 disconnected=disconnected
 disconnectedUpper=Disconnected
@@ -88,6 +93,7 @@ duration=Duration
 edit=Edit
 editURL=Edit URL
 enable=Enable
+enableConfigurationChanges=Enable Configuration Changes
 enableDeployment=Enable deployment
 enableRbac=Enable RBAC
 enableStatistics=Enable Statistics
@@ -297,13 +303,15 @@ ok=Ok
 openInExternalWindow=Open in external window
 openInModelBrowser=Open in model browser
 opened=Opened
+operationDate=Operation Date
 operationFailed=Operation Failed
 operationMode=Operation Mode
 operationSuccessful=Operation Successful
 operation=Operation
 operations=Operations
 or=or
 orDragItHere=or drag it here
+outcome=Outcome
 output=Output
 patchInProgress=Patch in progress
 patchSuccessful=Patch successful
@@ -340,6 +348,7 @@ releaseVersion=Release Version
 reload=Reload
 reloadRequired=Reload Required
 reloadStandaloneTooltip=The server configuration has changed. Click here to reload the server.
+remoteAddress=Remote Address
 remove=Remove
 rename=Rename
 replace=Replace",2017-09-12T19:21:32Z,100
"@@ -1,12 +1,21 @@
 aborted=Abortados
+accessMechanism=Mecanismo de acesso
 applicationRollback=Rollback de aplica\u00e7\u00e3o
+composite=Opera\u00e7\u00e3o m\u00faltipla
+configurationChanges=Log de configura\u00e7\u00f5es
+configurationChangesNotEnabled=Log de configura\u00e7\u00f5es n\u00e3o est\u00e1 ativo.
+disableConfigurationChanges=Desativar Log de configura\u00e7\u00f5es
+enableConfigurationChanges=Ativar Log de configura\u00e7\u00f5es
 heuristics=Heuristicas
 invalidate=Invalidar
 invalidateSession=Invalidar sess\u00e3o
+operationDate=Data da opera\u00e7\u00e3o
+outcome=Resultado
 patchError=Falha na aplica\u00e7\u00e3o da corre\u00e7\u00e3o
 patchInProgress=Corre\u00e7\u00e3o em andamento
 patchSuccessful=Corre\u00e7\u00e3o instalada com sucesso
 probe=Recarregar
+remoteAddress=Endere\u00e7o remoto
 resourceRollback=Rollback de recursos
 rollback=Rollback
 rollbackError=Rollback com erro",2017-09-12T19:21:32Z,100
"@@ -1,4 +1,5 @@
 activeRoles=Active roles: {0}
+addConfigurationChangesQuestion=Activate configuration changes for host <strong>{0}<strong>.
 addHaPolicy=No HA policy has been assigned to this server. Please use the button below to add a HA policy. You can choose between replication and shared store. For each strategy you can select whether to act as a master, slave or operate in colocated mode.
 addResourceError=Failed to add resource {0}, cause: {1}
 addResourceSuccess={0} <strong>{1}</strong> successfully added.
@@ -237,6 +238,7 @@ reloadServerQuestion=Are you sure you want to reload the server <strong>{0}</str
 reloadServerSuccess=Server <strong>{0}</strong> successfully reloaded.
 reloadSettings=The settings will not take effect until the console is reloaded. Do you want to reload now?
 removeConfirmationQuestion=Do you really want to remove <strong>{0}</strong>?
+removeConfigurationChangesQuestion=Do you really want to disable the configuration changes for host <strong>{0}</strong>.
 removeCurrentUserError=Cannot remove the current user.
 removeExtensionQuestion=Do you really want to remove the selected extension?
 removeExtensionSuccess=Extension successfully removed. You have to reload the console to finish the action.",2017-09-12T19:21:32Z,94
"@@ -1,3 +1,4 @@
+addConfigurationChangesQuestion=Ativar o log de configura\u00e7\u00f5es para o host <strong>{0}</strong>.
 addResourceError=Falha ao adicionar recurso {0}, motivo: {1}
 addServerHostHelp=O nome do servidor de controle respons\u00e1vel por gerenciar este servidor.
 addServerTitle=Adicionar servidor
@@ -19,6 +20,7 @@ patchHostNeedsRestart=O servidor de controle <strong>{0}</strong> precisa ser re
 patchSucessfullyApplied=Corre\u00e7\u00e3o {0} instalada com sucesso.
 patchAddError=Ocorreu um erro na instala\u00e7\u00e3o da corre\u00e7\u00e3o {0}. Motivo: {1}
 patchInProgress=<strong>{0}</strong> est\u00e1 sendo instalado. Por favor, aguarde a instala\u00e7\u00e3o terminar.
+removeConfigurationChangesQuestion=Voc\u00ea tem certeza de que quer desativar o log de configura\u00e7\u00f5es para o host <strong>{0}</strong>.
 rollbackInProgress=Rollback de <strong>{0}</strong> est\u00e1 em andamento. Por favor, aguarde o rollback terminar.
 rollbackSucessful=Corre\u00e7\u00e3o <strong>{0}</strong> removida com sucesso.
 rollbackError=Erro ao remover a corre\u00e7\u00e3o, motivo: {0}",2017-09-12T19:21:32Z,94
"@@ -1,3 +1,4 @@
+addConfigurationChangesQuestion=Ativar o log de configura\u00e7\u00f5es para o host <strong>{0}</strong>.
 addResourceError=Falha ao adicionar recurso {0}, motivo: {1}
 addServerHostHelp=O nome do servidor de controle respons\u00e1vel por gerenciar este servidor.
 addServerTitle=Adicionar servidor
@@ -19,6 +20,7 @@ patchHostNeedsRestart=O servidor de controle <strong>{0}</strong> precisa ser re
 patchSucessfullyApplied=Corre\u00e7\u00e3o {0} instalada com sucesso.
 patchAddError=Ocorreu um erro na instala\u00e7\u00e3o da corre\u00e7\u00e3o {0}. Motivo: {1}
 patchInProgress=<strong>{0}</strong> est\u00e1 sendo instalado. Por favor, aguarde a instala\u00e7\u00e3o terminar.
+removeConfigurationChangesQuestion=Voc\u00ea tem certeza de que quer desativar o log de configura\u00e7\u00f5es para o host <strong>{0}</strong>.
 rollbackInProgress=Rollback de <strong>{0}</strong> est\u00e1 em andamento. Por favor, aguarde o rollback terminar.
 rollbackSucessful=Corre\u00e7\u00e3o <strong>{0}</strong> removida com sucesso.
 rollbackError=Erro ao remover a corre\u00e7\u00e3o, motivo: {0}",2019-06-26T17:50:48Z,117
"@@ -0,0 +1 @@
+node_modules
\ No newline at end of file",2019-06-26T17:50:48Z,244
"@@ -0,0 +1,374 @@
+{
+  ""name"": ""hal-console"",
+  ""version"": ""3.2.1"",
+  ""lockfileVersion"": 1,
+  ""requires"": true,
+  ""dependencies"": {
+    ""accepts"": {
+      ""version"": ""1.3.7"",
+      ""resolved"": ""https://registry.npmjs.org/accepts/-/accepts-1.3.7.tgz"",
+      ""integrity"": ""sha512-Il80Qs2WjYlJIBNzNkK6KYqlVMTbZLXgHx2oT0pU/fjRHyEp+PEfEPY0R3WCwAGVOtauxh1hOxNgIf5bv7dQpA=="",
+      ""requires"": {
+        ""mime-types"": ""~2.1.24"",
+        ""negotiator"": ""0.6.2""
+      }
+    },
+    ""array-flatten"": {
+      ""version"": ""1.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz"",
+      ""integrity"": ""sha1-ml9pkFGx5wczKPKgCJaLZOopVdI=""
+    },
+    ""body-parser"": {
+      ""version"": ""1.19.0"",
+      ""resolved"": ""https://registry.npmjs.org/body-parser/-/body-parser-1.19.0.tgz"",
+      ""integrity"": ""sha512-dhEPs72UPbDnAQJ9ZKMNTP6ptJaionhP5cBb541nXPlW60Jepo9RV/a4fX4XWW9CuFNK22krhrj1+rgzifNCsw=="",
+      ""requires"": {
+        ""bytes"": ""3.1.0"",
+        ""content-type"": ""~1.0.4"",
+        ""debug"": ""2.6.9"",
+        ""depd"": ""~1.1.2"",
+        ""http-errors"": ""1.7.2"",
+        ""iconv-lite"": ""0.4.24"",
+        ""on-finished"": ""~2.3.0"",
+        ""qs"": ""6.7.0"",
+        ""raw-body"": ""2.4.0"",
+        ""type-is"": ""~1.6.17""
+      }
+    },
+    ""bytes"": {
+      ""version"": ""3.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/bytes/-/bytes-3.1.0.tgz"",
+      ""integrity"": ""sha512-zauLjrfCG+xvoyaqLoV8bLVXXNGC4JqlxFCutSDWA6fJrTo2ZuvLYTqZ7aHBLZSMOopbzwv8f+wZcVzfVTI2Dg==""
+    },
+    ""content-disposition"": {
+      ""version"": ""0.5.3"",
+      ""resolved"": ""https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.3.tgz"",
+      ""integrity"": ""sha512-ExO0774ikEObIAEV9kDo50o+79VCUdEB6n6lzKgGwupcVeRlhrj3qGAfwq8G6uBJjkqLrhT0qEYFcWng8z1z0g=="",
+      ""requires"": {
+        ""safe-buffer"": ""5.1.2""
+      }
+    },
+    ""content-type"": {
+      ""version"": ""1.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/content-type/-/content-type-1.0.4.tgz"",
+      ""integrity"": ""sha512-hIP3EEPs8tB9AT1L+NUqtwOAps4mk2Zob89MWXMHjHWg9milF/j4osnnQLXBCBFBk/tvIG/tUc9mOUJiPBhPXA==""
+    },
+    ""cookie"": {
+      ""version"": ""0.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/cookie/-/cookie-0.4.0.tgz"",
+      ""integrity"": ""sha512-+Hp8fLp57wnUSt0tY0tHEXh4voZRDnoIrZPqlo3DPiI4y9lwg/jqx+1Om94/W6ZaPDOUbnjOt/99w66zk+l1Xg==""
+    },
+    ""cookie-signature"": {
+      ""version"": ""1.0.6"",
+      ""resolved"": ""https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz"",
+      ""integrity"": ""sha1-4wOogrNCzD7oylE6eZmXNNqzriw=""
+    },
+    ""debug"": {
+      ""version"": ""2.6.9"",
+      ""resolved"": ""https://registry.npmjs.org/debug/-/debug-2.6.9.tgz"",
+      ""integrity"": ""sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA=="",
+      ""requires"": {
+        ""ms"": ""2.0.0""
+      }
+    },
+    ""depd"": {
+      ""version"": ""1.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/depd/-/depd-1.1.2.tgz"",
+      ""integrity"": ""sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak=""
+    },
+    ""destroy"": {
+      ""version"": ""1.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/destroy/-/destroy-1.0.4.tgz"",
+      ""integrity"": ""sha1-l4hXRCxEdJ5CBmE+N5RiBYJqvYA=""
+    },
+    ""ee-first"": {
+      ""version"": ""1.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz"",
+      ""integrity"": ""sha1-WQxhFWsK4vTwJVcyoViyZrxWsh0=""
+    },
+    ""encodeurl"": {
+      ""version"": ""1.0.2"",
+      ""resolved"": ""https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz"",
+      ""integrity"": ""sha1-rT/0yG7C0CkyL1oCw6mmBslbP1k=""
+    },
+    ""escape-html"": {
+      ""version"": ""1.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz"",
+      ""integrity"": ""sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=""
+    },
+    ""etag"": {
+      ""version"": ""1.8.1"",
+      ""resolved"": ""https://registry.npmjs.org/etag/-/etag-1.8.1.tgz"",
+      ""integrity"": ""sha1-Qa4u62XvpiJorr/qg6x9eSmbCIc=""
+    },
+    ""express"": {
+      ""version"": ""4.17.1"",
+      ""resolved"": ""https://registry.npmjs.org/express/-/express-4.17.1.tgz"",
+      ""integrity"": ""sha512-mHJ9O79RqluphRrcw2X/GTh3k9tVv8YcoyY4Kkh4WDMUYKRZUq0h1o0w2rrrxBqM7VoeUVqgb27xlEMXTnYt4g=="",
+      ""requires"": {
+        ""accepts"": ""~1.3.7"",
+        ""array-flatten"": ""1.1.1"",
+        ""body-parser"": ""1.19.0"",
+        ""content-disposition"": ""0.5.3"",
+        ""content-type"": ""~1.0.4"",
+        ""cookie"": ""0.4.0"",
+        ""cookie-signature"": ""1.0.6"",
+        ""debug"": ""2.6.9"",
+        ""depd"": ""~1.1.2"",
+        ""encodeurl"": ""~1.0.2"",
+        ""escape-html"": ""~1.0.3"",
+        ""etag"": ""~1.8.1"",
+        ""finalhandler"": ""~1.1.2"",
+        ""fresh"": ""0.5.2"",
+        ""merge-descriptors"": ""1.0.1"",
+        ""methods"": ""~1.1.2"",
+        ""on-finished"": ""~2.3.0"",
+        ""parseurl"": ""~1.3.3"",
+        ""path-to-regexp"": ""0.1.7"",
+        ""proxy-addr"": ""~2.0.5"",
+        ""qs"": ""6.7.0"",
+        ""range-parser"": ""~1.2.1"",
+        ""safe-buffer"": ""5.1.2"",
+        ""send"": ""0.17.1"",
+        ""serve-static"": ""1.14.1"",
+        ""setprototypeof"": ""1.1.1"",
+        ""statuses"": ""~1.5.0"",
+        ""type-is"": ""~1.6.18"",
+        ""utils-merge"": ""1.0.1"",
+        ""vary"": ""~1.1.2""
+      }
+    },
+    ""finalhandler"": {
+      ""version"": ""1.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/finalhandler/-/finalhandler-1.1.2.tgz"",
+      ""integrity"": ""sha512-aAWcW57uxVNrQZqFXjITpW3sIUQmHGG3qSb9mUah9MgMC4NeWhNOlNjXEYq3HjRAvL6arUviZGGJsBg6z0zsWA=="",
+      ""requires"": {
+        ""debug"": ""2.6.9"",
+        ""encodeurl"": ""~1.0.2"",
+        ""escape-html"": ""~1.0.3"",
+        ""on-finished"": ""~2.3.0"",
+        ""parseurl"": ""~1.3.3"",
+        ""statuses"": ""~1.5.0"",
+        ""unpipe"": ""~1.0.0""
+      }
+    },
+    ""forwarded"": {
+      ""version"": ""0.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/forwarded/-/forwarded-0.1.2.tgz"",
+      ""integrity"": ""sha1-mMI9qxF1ZXuMBXPozszZGw/xjIQ=""
+    },
+    ""fresh"": {
+      ""version"": ""0.5.2"",
+      ""resolved"": ""https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz"",
+      ""integrity"": ""sha1-PYyt2Q2XZWn6g1qx+OSyOhBWBac=""
+    },
+    ""http-errors"": {
+      ""version"": ""1.7.2"",
+      ""resolved"": ""https://registry.npmjs.org/http-errors/-/http-errors-1.7.2.tgz"",
+      ""integrity"": ""sha512-uUQBt3H/cSIVfch6i1EuPNy/YsRSOUBXTVfZ+yR7Zjez3qjBz6i9+i4zjNaoqcoFVI4lQJ5plg63TvGfRSDCRg=="",
+      ""requires"": {
+        ""depd"": ""~1.1.2"",
+        ""inherits"": ""2.0.3"",
+        ""setprototypeof"": ""1.1.1"",
+        ""statuses"": "">= 1.5.0 < 2"",
+        ""toidentifier"": ""1.0.0""
+      }
+    },
+    ""iconv-lite"": {
+      ""version"": ""0.4.24"",
+      ""resolved"": ""https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz"",
+      ""integrity"": ""sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA=="",
+      ""requires"": {
+        ""safer-buffer"": "">= 2.1.2 < 3""
+      }
+    },
+    ""inherits"": {
+      ""version"": ""2.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz"",
+      ""integrity"": ""sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=""
+    },
+    ""ipaddr.js"": {
+      ""version"": ""1.9.0"",
+      ""resolved"": ""https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.0.tgz"",
+      ""integrity"": ""sha512-M4Sjn6N/+O6/IXSJseKqHoFc+5FdGJ22sXqnjTpdZweHK64MzEPAyQZyEU3R/KRv2GLoa7nNtg/C2Ev6m7z+eA==""
+    },
+    ""media-typer"": {
+      ""version"": ""0.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz"",
+      ""integrity"": ""sha1-hxDXrwqmJvj/+hzgAWhUUmMlV0g=""
+    },
+    ""merge-descriptors"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz"",
+      ""integrity"": ""sha1-sAqqVW3YtEVoFQ7J0blT8/kMu2E=""
+    },
+    ""methods"": {
+      ""version"": ""1.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/methods/-/methods-1.1.2.tgz"",
+      ""integrity"": ""sha1-VSmk1nZUE07cxSZmVoNbD4Ua/O4=""
+    },
+    ""mime"": {
+      ""version"": ""1.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/mime/-/mime-1.6.0.tgz"",
+      ""integrity"": ""sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==""
+    },
+    ""mime-db"": {
+      ""version"": ""1.40.0"",
+      ""resolved"": ""https://registry.npmjs.org/mime-db/-/mime-db-1.40.0.tgz"",
+      ""integrity"": ""sha512-jYdeOMPy9vnxEqFRRo6ZvTZ8d9oPb+k18PKoYNYUe2stVEBPPwsln/qWzdbmaIvnhZ9v2P+CuecK+fpUfsV2mA==""
+    },
+    ""mime-types"": {
+      ""version"": ""2.1.24"",
+      ""resolved"": ""https://registry.npmjs.org/mime-types/-/mime-types-2.1.24.tgz"",
+      ""integrity"": ""sha512-WaFHS3MCl5fapm3oLxU4eYDw77IQM2ACcxQ9RIxfaC3ooc6PFuBMGZZsYpvoXS5D5QTWPieo1jjLdAm3TBP3cQ=="",
+      ""requires"": {
+        ""mime-db"": ""1.40.0""
+      }
+    },
+    ""ms"": {
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/ms/-/ms-2.0.0.tgz"",
+      ""integrity"": ""sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=""
+    },
+    ""negotiator"": {
+      ""version"": ""0.6.2"",
+      ""resolved"": ""https://registry.npmjs.org/negotiator/-/negotiator-0.6.2.tgz"",
+      ""integrity"": ""sha512-hZXc7K2e+PgeI1eDBe/10Ard4ekbfrrqG8Ep+8Jmf4JID2bNg7NvCPOZN+kfF574pFQI7mum2AUqDidoKqcTOw==""
+    },
+    ""on-finished"": {
+      ""version"": ""2.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz"",
+      ""integrity"": ""sha1-IPEzZIGwg811M3mSoWlxqi2QaUc="",
+      ""requires"": {
+        ""ee-first"": ""1.1.1""
+      }
+    },
+    ""parseurl"": {
+      ""version"": ""1.3.3"",
+      ""resolved"": ""https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz"",
+      ""integrity"": ""sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==""
+    },
+    ""path-to-regexp"": {
+      ""version"": ""0.1.7"",
+      ""resolved"": ""https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz"",
+      ""integrity"": ""sha1-32BBeABfUi8V60SQ5yR6G/qmf4w=""
+    },
+    ""proxy-addr"": {
+      ""version"": ""2.0.5"",
+      ""resolved"": ""https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.5.tgz"",
+      ""integrity"": ""sha512-t/7RxHXPH6cJtP0pRG6smSr9QJidhB+3kXu0KgXnbGYMgzEnUxRQ4/LDdfOwZEMyIh3/xHb8PX3t+lfL9z+YVQ=="",
+      ""requires"": {
+        ""forwarded"": ""~0.1.2"",
+        ""ipaddr.js"": ""1.9.0""
+      }
+    },
+    ""qs"": {
+      ""version"": ""6.7.0"",
+      ""resolved"": ""https://registry.npmjs.org/qs/-/qs-6.7.0.tgz"",
+      ""integrity"": ""sha512-VCdBRNFTX1fyE7Nb6FYoURo/SPe62QCaAyzJvUjwRaIsc+NePBEniHlvxFmmX56+HZphIGtV0XeCirBtpDrTyQ==""
+    },
+    ""range-parser"": {
+      ""version"": ""1.2.1"",
+      ""resolved"": ""https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz"",
+      ""integrity"": ""sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==""
+    },
+    ""raw-body"": {
+      ""version"": ""2.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/raw-body/-/raw-body-2.4.0.tgz"",
+      ""integrity"": ""sha512-4Oz8DUIwdvoa5qMJelxipzi/iJIi40O5cGV1wNYp5hvZP8ZN0T+jiNkL0QepXs+EsQ9XJ8ipEDoiH70ySUJP3Q=="",
+      ""requires"": {
+        ""bytes"": ""3.1.0"",
+        ""http-errors"": ""1.7.2"",
+        ""iconv-lite"": ""0.4.24"",
+        ""unpipe"": ""1.0.0""
+      }
+    },
+    ""safe-buffer"": {
+      ""version"": ""5.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz"",
+      ""integrity"": ""sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==""
+    },
+    ""safer-buffer"": {
+      ""version"": ""2.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz"",
+      ""integrity"": ""sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==""
+    },
+    ""send"": {
+      ""version"": ""0.17.1"",
+      ""resolved"": ""https://registry.npmjs.org/send/-/send-0.17.1.tgz"",
+      ""integrity"": ""sha512-BsVKsiGcQMFwT8UxypobUKyv7irCNRHk1T0G680vk88yf6LBByGcZJOTJCrTP2xVN6yI+XjPJcNuE3V4fT9sAg=="",
+      ""requires"": {
+        ""debug"": ""2.6.9"",
+        ""depd"": ""~1.1.2"",
+        ""destroy"": ""~1.0.4"",
+        ""encodeurl"": ""~1.0.2"",
+        ""escape-html"": ""~1.0.3"",
+        ""etag"": ""~1.8.1"",
+        ""fresh"": ""0.5.2"",
+        ""http-errors"": ""~1.7.2"",
+        ""mime"": ""1.6.0"",
+        ""ms"": ""2.1.1"",
+        ""on-finished"": ""~2.3.0"",
+        ""range-parser"": ""~1.2.1"",
+        ""statuses"": ""~1.5.0""
+      },
+      ""dependencies"": {
+        ""ms"": {
+          ""version"": ""2.1.1"",
+          ""resolved"": ""https://registry.npmjs.org/ms/-/ms-2.1.1.tgz"",
+          ""integrity"": ""sha512-tgp+dl5cGk28utYktBsrFqA7HKgrhgPsg6Z/EfhWI4gl1Hwq8B/GmY/0oXZ6nF8hDVesS/FpnYaD/kOWhYQvyg==""
+        }
+      }
+    },
+    ""serve-static"": {
+      ""version"": ""1.14.1"",
+      ""resolved"": ""https://registry.npmjs.org/serve-static/-/serve-static-1.14.1.tgz"",
+      ""integrity"": ""sha512-JMrvUwE54emCYWlTI+hGrGv5I8dEwmco/00EvkzIIsR7MqrHonbD9pO2MOfFnpFntl7ecpZs+3mW+XbQZu9QCg=="",
+      ""requires"": {
+        ""encodeurl"": ""~1.0.2"",
+        ""escape-html"": ""~1.0.3"",
+        ""parseurl"": ""~1.3.3"",
+        ""send"": ""0.17.1""
+      }
+    },
+    ""setprototypeof"": {
+      ""version"": ""1.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.1.1.tgz"",
+      ""integrity"": ""sha512-JvdAWfbXeIGaZ9cILp38HntZSFSo3mWg6xGcJJsd+d4aRMOqauag1C63dJfDw7OaMYwEbHMOxEZ1lqVRYP2OAw==""
+    },
+    ""statuses"": {
+      ""version"": ""1.5.0"",
+      ""resolved"": ""https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz"",
+      ""integrity"": ""sha1-Fhx9rBd2Wf2YEfQ3cfqZOBR4Yow=""
+    },
+    ""toidentifier"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.0.tgz"",
+      ""integrity"": ""sha512-yaOH/Pk/VEhBWWTlhI+qXxDFXlejDGcQipMlyxda9nthulaxLZUNcUqFxokp0vcYnvteJln5FNQDRrxj3YcbVw==""
+    },
+    ""type-is"": {
+      ""version"": ""1.6.18"",
+      ""resolved"": ""https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz"",
+      ""integrity"": ""sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g=="",
+      ""requires"": {
+        ""media-typer"": ""0.3.0"",
+        ""mime-types"": ""~2.1.24""
+      }
+    },
+    ""unpipe"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz"",
+      ""integrity"": ""sha1-sr9O6FFKrmFltIF4KdIbLvSZBOw=""
+    },
+    ""utils-merge"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz"",
+      ""integrity"": ""sha1-n5VxD1CiZ5R7LMwSR0HBAoQn5xM=""
+    },
+    ""vary"": {
+      ""version"": ""1.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/vary/-/vary-1.1.2.tgz"",
+      ""integrity"": ""sha1-IpnwLG3tMNSllhsLn3RSShj2NPw=""
+    }
+  }
+}",2019-06-26T17:50:48Z,245
"@@ -29,7 +29,10 @@
 import org.jboss.hal.core.mvp.HasPresenter;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
@@ -43,17 +46,14 @@
 
 public class LdapKeyStoreElement implements IsElement<HTMLElement>, Attachable, HasPresenter<OtherSettingsPresenter> {
 
-    private final Metadata metadata;
     private final Table<NamedNode> table;
     private final Form<NamedNode> attributes;
     private final Form<ModelNode> newItemTemplate;
     private final HTMLElement root;
     private OtherSettingsPresenter presenter;
 
-    public LdapKeyStoreElement(final Metadata metadata, final TableButtonFactory tableButtonFactory,
-            final Resources resources) {
-        this.metadata = metadata;
-
+    public LdapKeyStoreElement(final StatementContext statementContext, final Metadata metadata,
+            final TableButtonFactory tableButtonFactory, final Resources resources) {
         this.table = new ModelNodeTable.Builder<NamedNode>(Ids.ELYTRON_LDAP_KEY_STORE_TABLE,
                 metadata)
                 .button(tableButtonFactory.add(Ids.ELYTRON_LDAP_KEY_STORE_ADD, Names.LDAP_KEY_STORE,
@@ -67,14 +67,29 @@ public LdapKeyStoreElement(final Metadata metadata, final TableButtonFactory tab
         this.attributes = new ModelNodeForm.Builder<NamedNode>(Ids.ELYTRON_LDAP_KEY_STORE_ATTRIBUTES_FORM, metadata)
                 .onSave(((form, changedValues) -> presenter.saveLdapKeyStore(form.getModel().getName(), changedValues)))
                 .build();
-        Metadata nitMetadata = metadata.forComplexAttribute(NEW_ITEM_TEMPLATE, false);
+
+        Metadata nitMetadata = metadata.forComplexAttribute(NEW_ITEM_TEMPLATE);
         this.newItemTemplate = new ModelNodeForm.Builder<>(Ids.ELYTRON_LDAP_KEY_STORE_NEW_ITEM_TEMPLATE_FORM,
                 nitMetadata)
                 .include(NEW_ITEM_PATH, NEW_ITEM_RDN, NEW_ITEM_ATTRIBUTES)
                 .unsorted()
                 .customFormItem(NEW_ITEM_ATTRIBUTES, (attributeDescription) -> new NewItemAttributesItem())
+                .singleton(
+                        () -> {
+                            Operation operation = null;
+                            if (table.selectedRow() != null) {
+                                ResourceAddress address = AddressTemplates.LDAP_KEY_STORE_ADDRESS.resolve(statementContext,
+                                        table.selectedRow().getName());
+                                operation = new Operation.Builder(address, READ_ATTRIBUTE_OPERATION)
+                                        .param(NAME, NEW_ITEM_TEMPLATE)
+                                        .build();
+                            }
+                            return operation;
+                        },
+                        () -> presenter.addNewItemTemplate(table.selectedRow().getName()))
                 .onSave((form, changedValues) -> presenter.saveNewItemTemplate(table.selectedRow().getName(),
                         changedValues))
+                .prepareReset(form -> presenter.resetNewItemTemplate(table.selectedRow().getName(), form))
                 .build();
 
         Tabs tabs = new Tabs();",2017-06-30T20:05:17Z,174
"@@ -27,6 +27,7 @@
 import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
 import com.gwtplatform.mvp.client.proxy.ProxyPlace;
 import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.form.Form.FinishReset;
 import org.jboss.hal.core.ComplexAttributeOperations;
 import org.jboss.hal.core.CrudOperations;
 import org.jboss.hal.core.OperationFactory;
@@ -290,8 +291,23 @@ void saveLdapKeyStore(final String name, final Map<String, Object> changedValues
                 this::reloadLdapKeyStores);
     }
 
+    void addNewItemTemplate(final String ldapKeyStore) {
+        ca.add(Ids.ELYTRON_LDAP_KEY_STORE_NEW_ITEM_TEMPLATE_ADD, ldapKeyStore, NEW_ITEM_TEMPLATE,
+                AddressTemplates.LDAP_KEY_STORE_ADDRESS, this::reloadLdapKeyStores);
+    }
+
     void saveNewItemTemplate(final String ldapKeyStore, final Map<String, Object> changedValues) {
         ca.save(ldapKeyStore, NEW_ITEM_TEMPLATE, AddressTemplates.LDAP_KEY_STORE_ADDRESS, changedValues,
                 this::reloadLdapKeyStores);
     }
+
+    void resetNewItemTemplate(final String ldapKeyStore, final Form<ModelNode> form) {
+        ca.reset(ldapKeyStore, NEW_ITEM_TEMPLATE, AddressTemplates.LDAP_KEY_STORE_ADDRESS,
+                new FinishReset<ModelNode>(form) {
+                    @Override
+                    public void afterReset(final Form<ModelNode> form) {
+                        reloadLdapKeyStores();
+                    }
+                });
+    }
 }",2017-06-30T20:05:17Z,116
"@@ -27,6 +27,7 @@
 import org.jboss.hal.dmr.NamedNode;
 import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.MetadataRegistry;
+import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
@@ -75,8 +76,9 @@ public class OtherSettingsView extends HalViewImpl implements OtherSettingsPrese
     private OtherSettingsPresenter presenter;
 
     @Inject
-    OtherSettingsView(final MetadataRegistry metadataRegistry, final TableButtonFactory tableButtonFactory, final
-            Resources resources) {
+    OtherSettingsView(final StatementContext statementContext, final MetadataRegistry metadataRegistry,
+            final TableButtonFactory tableButtonFactory, final
+    Resources resources) {
 
         VerticalNavigation navigation = new VerticalNavigation();
         registerAttachable(navigation);
@@ -124,16 +126,16 @@ public class OtherSettingsView extends HalViewImpl implements OtherSettingsPrese
 
         // NewItemAttributesItem newItemAttributes = new NewItemAttributesItem();
         Metadata metadata = metadataRegistry.lookup(AddressTemplates.LDAP_KEY_STORE_ADDRESS);
-        ldapKeyStoreElement = new LdapKeyStoreElement(metadata, tableButtonFactory, resources);
-                // new ResourceView.Builder(tableButtonFactory, primaryIdStores,
-                // Ids.ELYTRON_LDAP_KEY_STORE, ""LDAP Key Store"", LDAP_KEY_STORE_ADDRESS, this,
-                // () -> presenter.reload())
-                // .setNavigation(navigation)
-                // .setMetadataRegistry(metadataRegistry)
-                // .setTableAddCallback((name, address) -> presenter.reload())
-                // .build()
-                // .addComplexAttributeAsTab(""new-item-template"", singletonList(newItemAttributes))
-                // .create();
+        ldapKeyStoreElement = new LdapKeyStoreElement(statementContext, metadata, tableButtonFactory, resources);
+        // new ResourceView.Builder(tableButtonFactory, primaryIdStores,
+        // Ids.ELYTRON_LDAP_KEY_STORE, ""LDAP Key Store"", LDAP_KEY_STORE_ADDRESS, this,
+        // () -> presenter.reload())
+        // .setNavigation(navigation)
+        // .setMetadataRegistry(metadataRegistry)
+        // .setTableAddCallback((name, address) -> presenter.reload())
+        // .build()
+        // .addComplexAttributeAsTab(""new-item-template"", singletonList(newItemAttributes))
+        // .create();
         navigation.addSecondary(primaryIdStores, Ids.ELYTRON_LDAP_KEY_STORE, Names.LDAP_KEY_STORE,
                 ldapKeyStoreElement.asElement());
 ",2017-06-30T20:05:17Z,175
"@@ -16,14 +16,22 @@
 package org.jboss.hal.core;
 
 import java.util.Map;
+import javax.annotation.Nullable;
 import javax.inject.Inject;
 import javax.inject.Provider;
 
+import com.google.gwt.safehtml.shared.SafeHtml;
 import com.google.web.bindery.event.shared.EventBus;
 import jsinterop.annotations.JsIgnore;
 import org.jboss.gwt.flow.Progress;
 import org.jboss.hal.ballroom.LabelBuilder;
+import org.jboss.hal.ballroom.dialog.DialogFactory;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
 import org.jboss.hal.dmr.Composite;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.Operation;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.AddressTemplate;
@@ -34,6 +42,13 @@
 import org.jboss.hal.resources.Resources;
 import org.jboss.hal.spi.Callback;
 import org.jboss.hal.spi.Footer;
+import org.jboss.hal.spi.Message;
+import org.jboss.hal.spi.MessageEvent;
+
+import static org.jboss.hal.dmr.ModelDescriptionConstants.NAME;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.UNDEFINE_ATTRIBUTE_OPERATION;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.VALUE;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.WRITE_ATTRIBUTE_OPERATION;
 
 /**
  * Class to create, read, update and delete complex attributes. This class mirrors some of the methods from {@link
@@ -69,6 +84,69 @@ public ComplexAttributeOperations(final EventBus eventBus,
     }
 
 
+    // ------------------------------------------------------ (c)reate with dialog
+
+    /**
+     * Opens an add-resource-dialog for the given complex attribute. The dialog contains fields for all required
+     * attributes. When clicking ""Add"", a new complex attribute created and written to the specified resource.
+     * After the resource has been updated, a success message is fired and the specified callback is executed.
+     *
+     * @param id               the id used for the add resource dialog
+     * @param resource         the resource name
+     * @param complexAttribute the name of the complex attribute
+     * @param template         the address template which is resolved against the current statement context and the
+     *                         resource name to get the resource address for the operation
+     * @param callback         the callback executed after the resource has been added
+     */
+    @JsIgnore
+    public void add(final String id, final String resource, final String complexAttribute,
+            final AddressTemplate template, final Callback callback) {
+        metadataProcessor.lookup(template, progress.get(), new SuccessfulMetadataCallback(eventBus, resources) {
+            @Override
+            public void onMetadata(final Metadata metadata) {
+                String type = labelBuilder.label(complexAttribute);
+                Metadata caMetadata = metadata.forComplexAttribute(complexAttribute);
+                Form<ModelNode> form = new ModelNodeForm.Builder<>(id, caMetadata)
+                        .addOnly()
+                        .requiredOnly()
+                        .build();
+                AddResourceDialog dialog = new AddResourceDialog(resources.messages().addResourceTitle(type), form,
+                        (name, model) -> add(resource, complexAttribute, template, model, callback));
+                dialog.show();
+            }
+        });
+    }
+
+
+    // ------------------------------------------------------ (c)reate operation
+
+    /**
+     * Writes the payload of the complext attribute to the specified resource. After the resource has been updated,
+     * a success message is fired and the specified callback is executed.
+     *
+     * @param resource         the resource name
+     * @param complexAttribute the name of the complex attribute
+     * @param template         the address template which is resolved against the current statement context and the
+     *                         resource name to get the resource address for the operation
+     * @param payload          the optional payload for the complex attribute (may be null or undefined)
+     * @param callback         the callback executed after the resource has been added
+     */
+    @JsIgnore
+    public void add(final String resource, final String complexAttribute, final AddressTemplate template,
+            @Nullable final ModelNode payload, final Callback callback) {
+        ResourceAddress address = template.resolve(statementContext, resource);
+        Operation operation = new Operation.Builder(address, WRITE_ATTRIBUTE_OPERATION)
+                .param(NAME, complexAttribute)
+                .param(VALUE, payload)
+                .build();
+        dispatcher.execute(operation, result -> {
+            String type = labelBuilder.label(complexAttribute);
+            MessageEvent.fire(eventBus, Message.success(resources.messages().addSingleResourceSuccess(type)));
+            callback.execute();
+        });
+    }
+
+
     // ------------------------------------------------------ (u)pdate using address
 
     /**
@@ -85,14 +163,14 @@ public ComplexAttributeOperations(final EventBus eventBus,
      * @param callback         the callback executed after the resource has been saved
      */
     @JsIgnore
-    public void save(String resource, String complexAttribute, final AddressTemplate template,
+    public void save(final String resource, final String complexAttribute, final AddressTemplate template,
             final Map<String, Object> changedValues, final Callback callback) {
         metadataProcessor.lookup(template, progress.get(), new SuccessfulMetadataCallback(eventBus, resources) {
             @Override
             public void onMetadata(final Metadata metadata) {
                 ResourceAddress address = template.resolve(statementContext, resource);
-                Metadata caMeta = metadata.forComplexAttribute(complexAttribute);
-                save(complexAttribute, address, changedValues, caMeta, callback);
+                Metadata caMetadata = metadata.forComplexAttribute(complexAttribute);
+                save(complexAttribute, address, changedValues, caMetadata, callback);
             }
         });
     }
@@ -113,14 +191,45 @@ public void onMetadata(final Metadata metadata) {
      * @param callback         the callback executed after the resource has been saved
      */
     @JsIgnore
-    public void save(String complexAttribute, final ResourceAddress address, final Map<String, Object> changedValues,
-            final Metadata metadata, final Callback callback) {
+    public void save(final String complexAttribute, final ResourceAddress address,
+            final Map<String, Object> changedValues, final Metadata metadata, final Callback callback) {
         Composite operations = operationFactory(complexAttribute).fromChangeSet(address, changedValues, metadata);
         crud.save(operations, resources.messages().modifySingleResourceSuccess(labelBuilder.label(complexAttribute)),
                 callback);
     }
 
 
+    // ------------------------------------------------------ (u) reset using template
+
+    /**
+     * Undefines the complex attribute. After the attribute has been undefined a standard success message is fired and
+     * the specified callback is executed.
+     *
+     * @param resource         the resource name
+     * @param complexAttribute the name of the complex attribute
+     * @param template         the address template which is resolved against the current statement context and the
+     *                         resource name to get the resource address for the operation
+     * @param callback         the callback executed after the complex attribute has been undefined
+     */
+    @JsIgnore
+    public void reset(final String resource, final String complexAttribute, final AddressTemplate template,
+            final Callback callback) {
+        String type = labelBuilder.label(complexAttribute);
+        ResourceAddress address = template.resolve(statementContext, resource);
+        Operation operation = new Operation.Builder(address, UNDEFINE_ATTRIBUTE_OPERATION)
+                .param(NAME, complexAttribute)
+                .build();
+        SafeHtml question = resources.messages().resetComplexAttributeConfirmationQuestion(type);
+        DialogFactory.showConfirmation(
+                resources.messages().resetConfirmationTitle(type), question,
+                () -> dispatcher.execute(operation, result -> {
+                    MessageEvent.fire(eventBus,
+                            Message.success(resources.messages().resetComplexAttributeSuccess(type)));
+                    callback.execute();
+                }));
+    }
+
+
     // ------------------------------------------------------ helper methods
 
     private OperationFactory operationFactory(String complexAttribute) {",2017-06-30T20:05:17Z,176
"@@ -588,7 +588,14 @@ public void attach() {
             asElement().appendChild(alert.asElement());
         }
         if (singleton && ping != null && ping.get() != null) {
-            Core.INSTANCE.dispatcher().execute(ping.get(), result -> flip(READONLY), (op, failure) -> flip(EMPTY));
+            Core.INSTANCE.dispatcher().execute(ping.get(),
+                    result -> {
+                        if (!result.isDefined()) {
+                            flip(EMPTY);
+                        } else {
+                            flip(READONLY);
+                        }
+                    }, (op, failure) -> flip(EMPTY));
         }
     }
 ",2017-06-30T20:05:17Z,60
"@@ -215,6 +215,8 @@ public interface Ids {
     String ELYTRON_LDAP_KEY_STORE_ADD = build(ELYTRON_LDAP_KEY_STORE, ADD_SUFFIX);
     String ELYTRON_LDAP_KEY_STORE_ATTRIBUTES_FORM = build(ELYTRON_LDAP_KEY_STORE, ""attributes"", FORM_SUFFIX);
     String ELYTRON_LDAP_KEY_STORE_ATTRIBUTES_TAB = build(ELYTRON_LDAP_KEY_STORE, ""attributes"", TAB_SUFFIX);
+    String ELYTRON_LDAP_KEY_STORE_NEW_ITEM_TEMPLATE_ADD = build(ELYTRON_LDAP_KEY_STORE, ""new-item-template"",
+            ADD_SUFFIX);
     String ELYTRON_LDAP_KEY_STORE_NEW_ITEM_TEMPLATE_FORM = build(ELYTRON_LDAP_KEY_STORE, ""new-item-template"",
             FORM_SUFFIX);
     String ELYTRON_LDAP_KEY_STORE_NEW_ITEM_TEMPLATE_TAB = build(ELYTRON_LDAP_KEY_STORE, ""new-item-template"",",2017-06-30T20:05:17Z,111
"@@ -259,6 +259,8 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml requiredMarker();
     String requires(String requires);
     String resetConfirmationTitle(String type);
+    SafeHtml resetComplexAttributeConfirmationQuestion(String name);
+    SafeHtml resetComplexAttributeSuccess(String name);
     SafeHtml resetConfirmationQuestion(String name);
     SafeHtml resetResourceSuccess(String type, String name);
     SafeHtml resetSingletonConfirmationQuestion();",2017-06-30T20:05:17Z,94
"@@ -202,6 +202,8 @@ replicationStrategy=<strong>Replication</strong><br/>When using replication, the
 requiredHelp=Required fields are marked with <abbr class=""req"" title=""required""><i class=""fa fa-asterisk""></i></abbr>
 requiredMarker=<abbr class=""req"" title=""required""><i class=""fa fa-asterisk""></i></abbr>
 requires=Requires {0}
+resetComplexAttributeConfirmationQuestion=Do you really want to reset {0}?
+resetComplexAttributeSuccess=<strong>{0}</strong> successfully reset.
 resetConfirmationTitle=Reset {0}
 resetConfirmationQuestion=Do you really want to reset <strong>{0}</strong>? All non-required attributes will be undefined or reset to its default value (if any).
 resetResourceSuccess={0} <strong>{1}</strong> successfully reset.",2017-06-30T20:05:17Z,94
"@@ -22,9 +22,7 @@
 
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
-import elemental.client.Browser;
 import elemental.dom.Element;
-import org.jboss.hal.ballroom.dialog.DialogFactory;
 import org.jboss.hal.core.datasource.DataSource;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderColumn;
@@ -66,6 +64,7 @@ public class DataSourceColumn extends FinderColumn<DataSource> {
     private final EventBus eventBus;
     private final StatementContext statementContext;
     private final Resources resources;
+    private final Finder finder;
     private Server server;
 
     @Inject
@@ -86,8 +85,10 @@ public DataSourceColumn(final ServerActions serverActions,
         this.eventBus = eventBus;
         this.statementContext = statementContext;
         this.resources = resources;
+        this.finder = finder;
 
         setItemsProvider((context, callback) -> {
+            // TODO Support standalone mode
             ResourceAddress serverAddress = AddressTemplate.of(""/{selected.host}/{selected.server}"")
                     .resolve(statementContext);
             ResourceAddress dataSourceAddress = DATA_SOURCE_SUBSYSTEM_TEMPLATE.resolve(statementContext);
@@ -203,27 +204,33 @@ ResourceAddress dataSourceAddress(DataSource dataSource) {
                 : DATA_SOURCE_TEMPLATE.resolve(statementContext, dataSource.getName());
     }
 
+    private ResourceAddress dataSourceConfigurationAddress(DataSource dataSource) {
+        String profile = server.get(PROFILE_NAME).asString();
+        return AddressTemplate.of(""/profile=*/subsystem=datasources/data-source=*"")
+                .resolve(statementContext, profile, dataSource.getName());
+    }
+
     void enableDataSource(DataSource dataSource) {
-        Browser.getWindow().alert(Names.NYI);
+        ResourceAddress address = dataSourceConfigurationAddress(dataSource);
+        Operation operation = new Operation.Builder(WRITE_ATTRIBUTE_OPERATION, address)
+                .param(NAME, ENABLED)
+                .param(VALUE, true)
+                .build();
+        dispatcher.execute(operation, result -> {
+            MessageEvent.fire(eventBus, Message.success(resources.messages().dataSourceEnabled(dataSource.getName())));
+            finder.refresh();
+        });
     }
 
     void enableStatistics(DataSource dataSource) {
-        if (dataSource.isEnabled()) {
-            DialogFactory.confirmation(resources.constants().enableStatistics(),
-                    resources.messages().enableStatisticsOnEnabledDataSource(dataSource.getName(),
-                            statementContext.selectedServer()),
-                    () -> {
-                        Browser.getWindow().alert(Names.NYI);
-                        return true;
-                    });
-        } else {
-            DialogFactory.confirmation(resources.constants().enableStatistics(),
-                    resources.messages().enableStatisticsOnDisabledDataSource(dataSource.getName(),
-                            statementContext.selectedServer()),
-                    () -> {
-                        Browser.getWindow().alert(Names.NYI);
-                        return true;
-                    });
-        }
+        ResourceAddress address = dataSourceConfigurationAddress(dataSource);
+        Operation operation = new Operation.Builder(WRITE_ATTRIBUTE_OPERATION, address)
+                .param(NAME, STATISTICS_ENABLED)
+                .param(VALUE, true)
+                .build();
+        dispatcher.execute(operation, result -> {
+            MessageEvent.fire(eventBus, Message.success(resources.messages().statisticsEnabled(dataSource.getName())));
+            finder.refresh();
+        });
     }
 }
\ No newline at end of file",2016-07-17T16:10:52Z,246
"@@ -85,20 +85,12 @@ class DataSourcePreview extends PreviewContent<DataSource> {
         previewBuilder().add(needsRestartWarning);
 
         noStatisticsWarning = new Alert(Icons.WARNING,
-                new SafeHtmlBuilder()
-                        .append(resources.messages().dataSourceStatisticsDisabled(dataSource.getName()))
-                        .appendEscaped("" "")
-                        .append(resources.messages().staleStatistics())
-                        .toSafeHtml(),
+                resources.messages().dataSourceStatisticsDisabled(dataSource.getName()),
                 resources.constants().enableStatistics(), event -> column.enableStatistics(dataSource));
         previewBuilder().add(noStatisticsWarning);
 
         disabledWarning = new Alert(Icons.WARNING,
-                new SafeHtmlBuilder()
-                        .append(resources.messages().dataSourceDisabledNoStatistics(dataSource.getName()))
-                        .appendEscaped("" "")
-                        .append(resources.messages().staleStatistics())
-                        .toSafeHtml(),
+                resources.messages().dataSourceDisabledNoStatistics(dataSource.getName()),
                 resources.constants().enable(), event -> column.enableDataSource(dataSource));
         previewBuilder().add(disabledWarning);
 ",2016-07-17T16:10:52Z,247
"@@ -131,19 +131,32 @@ private class RefreshFunction implements Function<FunctionContext> {
         public void execute(final Control<FunctionContext> control) {
             FinderColumn column = getColumn(segment.getColumnId());
             if (column != null) {
-                column.refresh(() -> {
-                    if (column.contains(segment.getItemId())) {
-                        column.markSelected(segment.getItemId());
-                        column.selectedRow().click();
-                        control.proceed();
-                    } else {
-                        logger.error(""Error in Finder.RefreshFunction: Unable to select item '{}' in column '{}'"",
-                                segment.getItemId(), segment.getColumnId());
+                // refresh the existing column
+                column.refresh(() -> selectItem(column, control));
+            } else {
+                // append the column
+                appendColumn(segment.getColumnId(), new AsyncCallback<FinderColumn>() {
+                    @Override
+                    public void onFailure(final Throwable throwable) {
                         control.abort();
                     }
+
+                    @Override
+                    public void onSuccess(final FinderColumn finderColumn) {
+                        selectItem(finderColumn, control);
+                    }
                 });
+            }
+        }
+
+        private void selectItem(FinderColumn column, Control<FunctionContext> control) {
+            if (column.contains(segment.getItemId())) {
+                column.markSelected(segment.getItemId());
+                control.getContext().push(column);
+                control.proceed();
             } else {
-                logger.error(""Error in Finder.RefreshFunction: Unable to find column '{}'"", segment.getColumnId());
+                logger.error(""Error in Finder.RefreshFunction: Unable to select item '{}' in column '{}'"",
+                        segment.getItemId(), segment.getColumnId());
                 control.abort();
             }
         }
@@ -426,6 +439,13 @@ public void reset(final String token, final String initialColumn, final PreviewC
         updateHistory();
     }
 
+    /**
+     * Refreshes the current path.
+     */
+    public void refresh() {
+        refresh(getContext().getPath());
+    }
+
     /**
      * Refreshes the specified path.
      * <p>
@@ -434,6 +454,7 @@ public void reset(final String token, final String initialColumn, final PreviewC
      */
     public void refresh(FinderPath path) {
         if (!path.isEmpty()) {
+
             int index = 0;
             Function[] functions = new Function[path.size()];
             for (FinderSegment segment : path) {
@@ -446,7 +467,14 @@ public void refresh(FinderPath path) {
                         public void onFailure(final FunctionContext context) {}
 
                         @Override
-                        public void onSuccess(final FunctionContext context) {}
+                        public void onSuccess(final FunctionContext context) {
+                            if (!context.emptyStack()) {
+                                FinderColumn column = context.pop();
+                                if (column.selectedRow() != null) {
+                                    column.selectedRow().click();
+                                }
+                            }
+                        }
                     }, functions);
         }
     }",2016-07-17T16:10:52Z,248
"@@ -59,6 +59,7 @@
 import static org.jboss.hal.dmr.ModelNodeHelper.getOrDefault;
 
 /**
+ * TODO Support standalone mode
  * @author Harald Pehl
  */
 public class ServerActions {",2016-07-17T16:10:52Z,93
"@@ -68,8 +68,6 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     String duplicateResource(String type);
 
     SafeHtml emptyModelNodeForm();
-    SafeHtml enableStatisticsOnDisabledDataSource(String name, String server);
-    SafeHtml enableStatisticsOnEnabledDataSource(String name, String server);
     SafeHtml endpointError(String url);
     SafeHtml endpointOk(String url);
 
@@ -176,11 +174,15 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml serverTimeout(String name);
     SafeHtml serverUndefined(String name);
 
+    SafeHtml staleStatistics();
+
     SafeHtml startServerGroupError(String name);
     SafeHtml startServerGroupSuccess(String name);
     SafeHtml startServerError(String name);
     SafeHtml startServerSuccess(String name);
 
+    SafeHtml statisticsEnabled(String name);
+
     String stop(String name);
     SafeHtml stopServerGroupError(String name);
     SafeHtml stopServerGroupQuestion(String name);
@@ -197,8 +199,6 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml suspendServerQuestion(String name);
     SafeHtml suspendServerSuccess(String name);
 
-    SafeHtml staleStatistics();
-
     SafeHtml testConnectionError();
     SafeHtml testConnectionSuccess();
     SafeHtml topologyError();",2016-07-17T16:10:52Z,94
"@@ -40,8 +40,6 @@ deploymentReplaced[\=1]=<strong>One</strong> deployment has been replaced.
 domainControllerTimeout=The domain controller <strong>{0}</strong> does not respond. Please check the log files and refresh this page after the domain controller is up and running again.
 duplicateResource=A {0} with this name already exists.
 emptyModelNodeForm=<strong>No attributes.</strong> This resource doesn&#39;t contain attributes or only complex attributes which are currently not supported.
-enableStatisticsOnDisabledDataSource=The data source <strong>{0}</strong> is currently disabled. In order to enable statistics, <ol><li>the <code>statistics-enabled</code> flag will be set to <code>true</>,</li><li>the data source will be enabled and</li><li>the server <strong>{1}</strong> will be reloaded.</li></ol>
-enableStatisticsOnEnabledDataSource=The data source <strong>{0}</strong> is currently enabled. In order to enable statistics, <ol><li>the data source will be disabled,<li>the <code>statistics-enabled</code> flag will be set to <code>true</>,</li><li>the data source will be re-enabled and</li><li>the server <strong>{1}</strong> will be reloaded.</li></ol>
 endpointError=The management interface does not respond. Please make sure<ul><li>you have added users to be able to access the admin console</li><li>the management interface is up and running</li><li><a href=""#"" class=""alert-link"">{0}</a> is configured as an allowed origin</li></ul>
 endpointOk=The management interface at <a href=""#"" class=""alert-link"">{0}</a> is up and running.
 flushConnectionSuccess=Flush connection successful
@@ -140,6 +138,7 @@ startServerError=Failed to start server <strong>{0}</strong>.
 startServerGroupError=Failed to start server group <strong>{0}</strong>.
 startServerGroupSuccess=Server group <strong>{0}</strong> successfully started.
 startServerSuccess=Server <strong>{0}</strong> successfully started.
+statisticsEnabled=Statistics for <strong>{0}</strong> successfully enabled.
 stop=Stop {0}
 stopServerError=Failed to stop server <strong>{0}</strong>.
 stopServerGroupError=Failed to stop server group <strong>{0}</strong>.",2016-07-17T16:10:52Z,94
"@@ -42,9 +42,9 @@
  */
 public class EndpointManager {
 
+    public static final String CONNECT_PARAMETER = ""connect"";
     static final String DEFAULT_HOST = ""localhost""; // must be in sync with the default value in endpoint.dmr!
     static final int DEFAULT_PORT = 9990; // must be in sync with the default value in endpoint.dmr!
-    private static final String CONNECT_PARAMETER = ""connect"";
     @NonNls private static final Logger logger = LoggerFactory.getLogger(EndpointManager.class);
 
     private final Endpoints endpoints;",2017-01-14T13:37:31Z,18
"@@ -23,7 +23,10 @@
 import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
 import elemental.client.Browser;
 import elemental.dom.Element;
+import elemental.html.Location;
 import org.jboss.gwt.elemento.core.IsElement;
+import org.jboss.hal.ballroom.dialog.Dialog;
+import org.jboss.hal.client.bootstrap.endpoint.EndpointManager;
 import org.jboss.hal.config.Endpoints;
 import org.jboss.hal.config.Environment;
 import org.jboss.hal.config.User;
@@ -108,6 +111,7 @@ public interface MyView extends HalView, HasPresenter<HeaderPresenter> {
         void showReload(String text, String tooltip);
         void hideReload();
         void showMessage(Message message);
+        void hideReconnect();
 
         void selectTopLevelCategory(String nameToken);
         void updateLinks(FinderContext finderContext);
@@ -183,6 +187,14 @@ protected void onBind() {
         registerHandler(getEventBus().addHandler(ModelBrowserPathEvent.getType(), this));
     }
 
+    @Override
+    protected void onReveal() {
+        super.onReveal();
+        if (endpoints.isSameOrigin()) {
+            getView().hideReconnect();
+        }
+    }
+
 
     // ------------------------------------------------------ reload / restart
 
@@ -261,11 +273,25 @@ void toggleMessages() {
     }
 
     void reconnect() {
-        Browser.getWindow().alert(Names.NYI);
+        Location location = Browser.getWindow().getLocation();
+        String url = Endpoints.getBaseUrl() + location.getPathname() + ""?"" + EndpointManager.CONNECT_PARAMETER;
+        Browser.getWindow().getLocation().assign(url);
     }
 
     void logout() {
-        Browser.getWindow().alert(Names.NYI);
+        if (environment.isSingleSignOn()) {
+            Browser.getWindow().alert(Names.NYI);
+        } else {
+            Element p = Browser.getDocument().createElement(""p"");
+            p.setInnerHTML(resources.messages().closeToLogout().asString());
+            Dialog dialog = new Dialog.Builder(resources.constants().logout())
+                    .add(p)
+                    .closeIcon(true)
+                    .closeOnEsc(true)
+                    .primary(resources.constants().ok(), () -> true)
+                    .build();
+            dialog.show();
+        }
     }
 
 ",2017-01-14T13:37:31Z,95
"@@ -96,6 +96,7 @@ public static HeaderView create(final Places places, final User user, final Reso
     @DataElement Element messagesLabel;
     @DataElement Element userName;
     @DataElement Element roles;
+    @DataElement Element connectedToContainer;
     @DataElement Element connectedTo;
     @DataElement Element accessControl;
     @DataElement Element patching;
@@ -236,6 +237,11 @@ void onReconnect() {
         presenter.reconnect();
     }
 
+    @Override
+    public void hideReconnect() {
+        Elements.setVisible(connectedToContainer, false);
+    }
+
 
     // ------------------------------------------------------ modes
 ",2017-01-14T13:37:31Z,98
"@@ -86,7 +86,7 @@
                     <li><a data-element=""logout"" class=""clickable"">{{resources().constants().logout()}}</a></li>
                 </ul>
             </li>
-            <li class=""dropdown"">
+            <li class=""dropdown"" data-element=""connectedToContainer"">
                 <a class=""clickable dropdown-toggle"" data-toggle=""dropdown"">
                     <span class=""fa fa-globe""></span>
                     <b class=""caret""></b>",2017-01-14T13:37:31Z,162
"@@ -118,6 +118,11 @@ public void setAccessControlProvider(final AccessControlProvider accessControlPr
         this.accessControlProvider = accessControlProvider;
     }
 
+    @Override
+    public boolean isSingleSignOn() {
+        return false; // not yet implemented
+    }
+
     @Override
     public String toString() {
         return ""Environment(HAL "" + halVersion + "", "" + instanceInfo + "", management version "" + managementVersion +",2017-01-14T13:37:31Z,151
"@@ -61,4 +61,6 @@ void setInstanceInfo(String productName, String productVersion,
     AccessControlProvider getAccessControlProvider();
 
     void setAccessControlProvider(AccessControlProvider accessControlProvider);
+
+    boolean isSingleSignOn();
 }",2017-01-14T13:37:31Z,152
"@@ -63,6 +63,7 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml chooseSharedStore();
     SafeHtml chooseStrategy();
     String chooseTemplate(String custom);
+    SafeHtml closeToLogout();
     SafeHtml configuredMailServer(String servers);
     String connectedTo(String url);
     SafeHtml contentAdded(@PluralCount int size);",2017-01-14T13:37:31Z,94
"@@ -19,6 +19,7 @@ chooseServerGroupsToUndeploy=Choose the server groups for undeploying <strong>{0
 chooseSharedStore=Choose which role the server should take in the shared store policy:
 chooseStrategy=Please choose the basic strategy for the HA policy:
 chooseTemplate=Choose one of the predefined templates to quickly add a datasource or choose ""{0}"" to specify your own settings.
+closeToLogout=In order to logout, please close the current window / tab and reopen the console.
 configuredMailServer=Configured mail servers: {0}
 connectedTo=Connected to {0}
 contentAdded=<strong>{0}</strong> content items have been added.",2017-01-14T13:37:31Z,94
"@@ -284,7 +284,7 @@ private <T extends NamedNode> String lazyToken(String tlc, T model,
 
     @Override
     @SuppressWarnings(""HardCodedStringLiteral"")
-    public void update(final StaticItem item) {
+    public void update(StaticItem item) {
         // remember selection
         HTMLElement element = (HTMLElement) document.querySelector(DOT + topology + "" ."" + selected);
         String hostName = element != null ? String.valueOf(element.dataset.get(""host"")) : null;
@@ -452,7 +452,7 @@ private HTMLElement buildTable(List<Host> hosts, List<ServerGroup> serverGroups,
         return table;
     }
 
-    private HTMLElement hostElement(final Host host) {
+    private HTMLElement hostElement(Host host) {
         HTMLElement dropdown;
         HTMLTableCellElement th = th()
                 .css(asList(rowHeader, statusCss(host)).toArray(new String[]{}))
@@ -495,7 +495,7 @@ private HTMLElement hostElement(final Host host) {
         return th;
     }
 
-    private HTMLElement serverGroupElement(final ServerGroup serverGroup) {
+    private HTMLElement serverGroupElement(ServerGroup serverGroup) {
         HTMLElement dropdown;
         HTMLTableCellElement element = th()
                 .on(click, event -> serverGroupDetails(serverGroup))
@@ -638,7 +638,7 @@ private boolean isVisible() {
 
     // ------------------------------------------------------ host
 
-    private void hostDetails(final Host host) {
+    private void hostDetails(Host host) {
         clearSelected();
         HTMLElement element = (HTMLElement) document.querySelector(hostSelector(host));
         if (element != null) {
@@ -668,19 +668,19 @@ private boolean isAllowed(Host host) {
                 .isAllowed(Constraint.executable(AddressTemplate.of(""/host="" + host.getAddressName()), RELOAD));
     }
 
-    private List<HTMLElement> hostActions(final Host host) {
+    private List<HTMLElement> hostActions(Host host) {
         List<HTMLElement> actions = new ArrayList<>();
         actions.add(actionLink(event -> hostActions.reload(host), resources.constants().reload()));
         actions.add(actionLink(event -> hostActions.restart(host), resources.constants().restart()));
         return actions;
     }
 
-    private String[] statusCss(final Host host) {
+    private String[] statusCss(Host host) {
         return hostActions.isPending(host) ? new String[]{withProgress} : new String[]{};
     }
 
     @Override
-    public void onHostAction(final HostActionEvent event) {
+    public void onHostAction(HostActionEvent event) {
         if (isVisible()) {
             Host host = event.getHost();
 
@@ -695,7 +695,7 @@ public void onHostAction(final HostActionEvent event) {
     }
 
     @Override
-    public void onHostResult(final HostResultEvent event) {
+    public void onHostResult(HostResultEvent event) {
         if (isVisible()) {
             Host host = event.getHost();
 
@@ -705,14 +705,14 @@ public void onHostResult(final HostResultEvent event) {
         }
     }
 
-    private String hostSelector(final Host host) {
+    private String hostSelector(Host host) {
         return ""[data-host='"" + host.getName() + ""']""; //NON-NLS
     }
 
 
     // ------------------------------------------------------ server group
 
-    private void serverGroupDetails(final ServerGroup serverGroup) {
+    private void serverGroupDetails(ServerGroup serverGroup) {
         clearSelected();
         HTMLElement element = (HTMLElement) document.querySelector(serverGroupSelector(serverGroup));
         if (element != null) {
@@ -736,7 +736,7 @@ private boolean isAllowed(ServerGroup serverGroup) {
                 .isAllowed(constraints);
     }
 
-    private List<HTMLElement> serverGroupActions(final ServerGroup serverGroup) {
+    private List<HTMLElement> serverGroupActions(ServerGroup serverGroup) {
         List<HTMLElement> actions = new ArrayList<>();
 
         // Order is: reload, restart, suspend, resume, stop, start
@@ -756,12 +756,15 @@ private List<HTMLElement> serverGroupActions(final ServerGroup serverGroup) {
         if (serverGroup.hasServers(server -> server.isStopped() || server.isFailed())) {
             actions.add(actionLink(event -> serverGroupActions.start(serverGroup), resources.constants().start()));
         }
+        // add kill link regardless of state to destroy and kill servers which might show a wrong state
+        actions.add(actionLink(event -> serverGroupActions.destroy(serverGroup), resources.constants().destroy()));
+        actions.add(actionLink(event -> serverGroupActions.kill(serverGroup), resources.constants().kill()));
 
         return actions;
     }
 
     @Override
-    public void onServerGroupAction(final ServerGroupActionEvent event) {
+    public void onServerGroupAction(ServerGroupActionEvent event) {
         if (isVisible()) {
             ServerGroup serverGroup = event.getServerGroup();
             disableDropdown(Ids.serverGroup(serverGroup.getName()), serverGroup.getName());
@@ -773,21 +776,21 @@ public void onServerGroupAction(final ServerGroupActionEvent event) {
     }
 
     @Override
-    public void onServerGroupResult(final ServerGroupResultEvent event) {
+    public void onServerGroupResult(ServerGroupResultEvent event) {
         if (isVisible()) {
             event.getServers().forEach(server -> stopProgress(serverSelector(server)));
             update(null);
         }
     }
 
-    private String serverGroupSelector(final ServerGroup serverGroup) {
+    private String serverGroupSelector(ServerGroup serverGroup) {
         return ""[data-server-group='"" + serverGroup.getName() + ""']""; //NON-NLS
     }
 
 
     // ------------------------------------------------------ server
 
-    private void serverDetails(final Server server) {
+    private void serverDetails(Server server) {
         clearSelected();
         HTMLElement element = (HTMLElement) document.querySelector(serverSelector(server));
         if (element != null) {
@@ -827,7 +830,7 @@ private boolean isAllowed(Server server) {
                         RELOAD));
     }
 
-    private List<HTMLElement> serverActions(final Server server) {
+    private List<HTMLElement> serverActions(Server server) {
         List<HTMLElement> actions = new ArrayList<>();
 
         if (!server.isStarted()) {
@@ -849,65 +852,66 @@ private List<HTMLElement> serverActions(final Server server) {
             }
             actions.add(actionLink(event -> serverActions.stop(server), resources.constants().stop()));
         }
-        // add kill link regardless of server state to kill servers which might show a wrong state
+        // add kill link regardless of state to destroy and kill servers which might show a wrong state
+        actions.add(actionLink(event -> serverActions.destroy(server), resources.constants().destroy()));
         actions.add(actionLink(event -> serverActions.kill(server), resources.constants().kill()));
 
         return actions;
     }
 
-    private String[] statusCss(final Server server) {
+    private String[] statusCss(Server server) {
         Set<String> status = new HashSet<>();
         ServerStatusSwitch sss = new ServerStatusSwitch(serverActions) {
             @Override
-            protected void onPending(final Server server) {
+            protected void onPending(Server server) {
             }
 
             @Override
-            protected void onBootErrors(final Server server) {
+            protected void onBootErrors(Server server) {
                 status.add(error);
             }
 
             @Override
-            protected void onFailed(final Server server) {
+            protected void onFailed(Server server) {
                 status.add(error);
             }
 
             @Override
-            protected void onAdminMode(final Server server) {
+            protected void onAdminMode(Server server) {
                 status.add(inactive);
             }
 
             @Override
-            protected void onStarting(final Server server) {
+            protected void onStarting(Server server) {
             }
 
             @Override
-            protected void onSuspended(final Server server) {
+            protected void onSuspended(Server server) {
                 status.add(suspended);
             }
 
             @Override
-            protected void onNeedsReload(final Server server) {
+            protected void onNeedsReload(Server server) {
                 status.add(warning);
             }
 
             @Override
-            protected void onNeedsRestart(final Server server) {
+            protected void onNeedsRestart(Server server) {
                 status.add(warning);
             }
 
             @Override
-            protected void onRunning(final Server server) {
+            protected void onRunning(Server server) {
                 status.add(ok);
             }
 
             @Override
-            protected void onStopped(final Server server) {
+            protected void onStopped(Server server) {
                 status.add(inactive);
             }
 
             @Override
-            protected void onUnknown(final Server server) {
+            protected void onUnknown(Server server) {
             }
         };
         sss.accept(server);
@@ -918,7 +922,7 @@ protected void onUnknown(final Server server) {
     }
 
     @Override
-    public void onServerAction(final ServerActionEvent event) {
+    public void onServerAction(ServerActionEvent event) {
         if (isVisible()) {
             Server server = event.getServer();
             disableDropdown(server.getId(), server.getName());
@@ -927,14 +931,14 @@ public void onServerAction(final ServerActionEvent event) {
     }
 
     @Override
-    public void onServerResult(final ServerResultEvent event) {
+    public void onServerResult(ServerResultEvent event) {
         if (isVisible()) {
             stopProgress(serverSelector(event.getServer()));
             updateServer(event.getServer());
         }
     }
 
-    private String serverSelector(final Server server) {
+    private String serverSelector(Server server) {
         return ""[data-server='"" + server.getId() + ""']""; //NON-NLS
     }
 }",2018-06-22T08:12:38Z,227
"@@ -191,6 +191,18 @@ public List<ItemAction<ServerGroup>> actions() {
                             .constraints(constraints(item, START_SERVERS))
                             .build());
                 }
+                // add destroy and kill action regardless of state
+                // to destroy and kill servers which might show a wrong state
+                actions.add(new ItemAction.Builder<ServerGroup>()
+                        .title(resources.constants().destroy())
+                        .handler(serverGroupActions::destroy)
+                        .constraints(constraints(item, DESTROY))
+                        .build());
+                actions.add(new ItemAction.Builder<ServerGroup>()
+                        .title(resources.constants().kill())
+                        .handler(serverGroupActions::kill)
+                        .constraints(constraints(item, KILL))
+                        .build());
                 return actions;
             }
         });
@@ -199,22 +211,22 @@ public List<ItemAction<ServerGroup>> actions() {
         eventBus.addHandler(ServerGroupResultEvent.getType(), this);
     }
 
-    private Constraints constraints(final ServerGroup serverGroup, String operation) {
+    private Constraints constraints(ServerGroup serverGroup, String operation) {
         return Constraints.or(
                 Constraint.executable(AddressTemplate.of(""/server-group=*""), operation),
                 Constraint.executable(serverGroupTemplate(serverGroup), operation)
         );
     }
 
     @Override
-    public void onServerGroupAction(final ServerGroupActionEvent event) {
+    public void onServerGroupAction(ServerGroupActionEvent event) {
         if (isVisible()) {
             event.getServers().forEach(server -> ItemMonitor.startProgress(server.getId()));
         }
     }
 
     @Override
-    public void onServerGroupResult(final ServerGroupResultEvent event) {
+    public void onServerGroupResult(ServerGroupResultEvent event) {
         if (isVisible()) {
             event.getServers().forEach(server -> ItemMonitor.stopProgress(server.getId()));
             refresh(RESTORE_SELECTION);",2018-06-22T08:12:38Z,71
"@@ -410,7 +410,13 @@ public List<ItemAction<Server>> actions() {
                                 .build());
                     }
                 }
-                // add kill action regardless of server state to kill servers which might show a wrong state
+                // add destroy and kill action regardless of state
+                // to destroy and kill servers which might show a wrong state
+                actions.add(new ItemAction.Builder<Server>()
+                        .title(resources.constants().destroy())
+                        .handler(serverActions::destroy)
+                        .constraint(Constraint.executable(serverConfigTemplate(item), DESTROY))
+                        .build());
                 actions.add(new ItemAction.Builder<Server>()
                         .title(resources.constants().kill())
                         .handler(serverActions::kill)",2018-06-22T08:12:38Z,23
"@@ -20,7 +20,7 @@
  * operations, but for the various GWT events.
  */
 public enum Action {
-    RELOAD, RESTART, SUSPEND, RESUME, START, STOP, KILL;
+    RELOAD, RESTART, SUSPEND, RESUME, START, STOP, DESTROY, KILL;
 
     public static boolean isStarting(Action action) {
         return action == RELOAD || action == RESTART || action == RESUME || action == START;",2018-06-22T08:12:38Z,19
"@@ -300,6 +300,46 @@ public void start(ServerGroup serverGroup) {
         }
     }
 
+    public void destroy(ServerGroup serverGroup) {
+        List<Server> startedServers = serverGroup.getServers(Server::isStarted);
+        DialogFactory.showConfirmation(resources.messages().destroy(serverGroup.getName()),
+                resources.messages().destroyServerGroupQuestion(serverGroup.getName()),
+                () -> {
+                    prepare(serverGroup, startedServers, Action.DESTROY);
+                    Operation operation = new Operation.Builder(serverGroup.getAddress(), DESTROY_SERVERS).build();
+                    dispatcher.execute(operation,
+                            result -> repeatCompositeUntil(dispatcher, timeout(serverGroup, Action.DESTROY),
+                                    readServerConfigStatus(startedServers),
+                                    checkServerConfigStatus(startedServers.size(), STOPPED, DISABLED))
+                                    .subscribe(new ServerGroupTimeoutCallback(serverGroup, startedServers,
+                                            resources.messages().destroyServerGroupSuccess(serverGroup.getName()))),
+                            new ServerGroupFailedCallback(serverGroup, startedServers,
+                                    resources.messages().destroyServerError(serverGroup.getName())),
+                            new ServerGroupExceptionCallback(serverGroup, startedServers,
+                                    resources.messages().destroyServerError(serverGroup.getName())));
+                });
+    }
+
+    public void kill(ServerGroup serverGroup) {
+        List<Server> startedServers = serverGroup.getServers(Server::isStarted);
+        DialogFactory.showConfirmation(resources.messages().kill(serverGroup.getName()),
+                resources.messages().killServerGroupQuestion(serverGroup.getName()),
+                () -> {
+                    prepare(serverGroup, startedServers, Action.KILL);
+                    Operation operation = new Operation.Builder(serverGroup.getAddress(), KILL_SERVERS).build();
+                    dispatcher.execute(operation,
+                            result -> repeatCompositeUntil(dispatcher, timeout(serverGroup, Action.KILL),
+                                    readServerConfigStatus(startedServers),
+                                    checkServerConfigStatus(startedServers.size(), STOPPED, DISABLED))
+                                    .subscribe(new ServerGroupTimeoutCallback(serverGroup, startedServers,
+                                            resources.messages().killServerGroupSuccess(serverGroup.getName()))),
+                            new ServerGroupFailedCallback(serverGroup, startedServers,
+                                    resources.messages().killServerError(serverGroup.getName())),
+                            new ServerGroupExceptionCallback(serverGroup, startedServers,
+                                    resources.messages().killServerError(serverGroup.getName())));
+                });
+    }
+
     private int timeout(ServerGroup serverGroup, Action action) {
         int timeout = DEFAULT_TIMEOUT;
         switch (action) {",2018-06-22T08:12:38Z,96
"@@ -112,7 +112,8 @@ public class ServerActions {
     public static final int SERVER_STOP_TIMEOUT = 5;
     public static final int SERVER_RELOAD_TIMEOUT = 10;
     public static final int SERVER_RESTART_TIMEOUT = SERVER_STOP_TIMEOUT + SERVER_START_TIMEOUT;
-    private static final int SERVER_KILL_TIMEOUT = 5;
+    private static final int SERVER_DESTROY_TIMEOUT = SERVER_STOP_TIMEOUT + 5;
+    private static final int SERVER_KILL_TIMEOUT = SERVER_STOP_TIMEOUT + 5;
     @NonNls private static final Logger logger = LoggerFactory.getLogger(ServerActions.class);
 
     private static AddressTemplate serverConfigTemplate(Server server) {
@@ -518,6 +519,24 @@ public void stopNow(Server server) {
                 new ServerExceptionCallback(server, resources.messages().stopServerError(server.getName())));
     }
 
+    public void destroy(Server server) {
+        DialogFactory.showConfirmation(resources.messages().destroy(server.getName()),
+                resources.messages().destroyServerQuestion(server.getName()),
+                () -> {
+                    prepare(server, Action.DESTROY);
+                    Operation operation = new Operation.Builder(server.getServerConfigAddress(), DESTROY).build();
+                    dispatcher.execute(operation,
+                            result -> repeatOperationUntil(dispatcher, SERVER_DESTROY_TIMEOUT,
+                                    readServerConfigStatus(server), checkServerConfigStatus(STOPPED, DISABLED))
+                                    .subscribe(new ServerTimeoutCallback(server, Action.DESTROY,
+                                            resources.messages().destroyServerSuccess(server.getName()))),
+                            new ServerFailedCallback(server,
+                                    resources.messages().destroyServerError(server.getName())),
+                            new ServerExceptionCallback(server,
+                                    resources.messages().destroyServerError(server.getName())));
+                });
+    }
+
     public void kill(Server server) {
         DialogFactory.showConfirmation(resources.messages().kill(server.getName()),
                 resources.messages().killServerQuestion(server.getName()),",2018-06-22T08:12:38Z,93
"@@ -226,6 +226,8 @@ public interface ModelDescriptionConstants {
     String DESCRIPTION = ""description"";
     String DESTINATION_ADDRESS = ""destination-address"";
     String DESTINATION_PORT = ""destination-port"";
+    String DESTROY = ""destroy"";
+    String DESTROY_SERVERS = ""destroy-servers"";
     String DIR_CONTEXT = ""dir-context"";
     String DIRECT_VERIFICATION = ""direct-verification"";
     String DISABLED = ""disabled"";
@@ -410,6 +412,7 @@ public interface ModelDescriptionConstants {
     String KEYCLOAK = ""keycloak"";
     String KEYCLOAK_SERVER_URL = ""keycloak-server-url"";
     String KILL = ""kill"";
+    String KILL_SERVERS = ""kill-servers"";
     String LARGEST_THREAD_COUNT = ""largest-thread-count"";
     String LAST_CONNECTED = ""last-connected"";
     String LAST_UPDATED_TIME = ""last-updated-time"";",2018-06-22T08:12:38Z,109
"@@ -118,6 +118,8 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String deploymentSuccessful();
     String deployments();
     String description();
+
+    String destroy();
     String details();
     String directory();
     String disable();",2018-06-22T08:12:38Z,100
"@@ -132,6 +132,20 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml deploymentUnknownState(String name);
     String deprecated(String since, String reason);
     String destinationFilterDescription();
+
+    String destroy(String name);
+
+    SafeHtml destroyServerError(String name);
+
+    SafeHtml destroyServerQuestion(String name);
+
+    SafeHtml destroyServerSuccess(String name);
+
+    SafeHtml destroyServerGroupError(String name);
+
+    SafeHtml destroyServerGroupQuestion(String name);
+
+    SafeHtml destroyServerGroupSuccess(String name);
     SafeHtml disableSSLManagementQuestion(String serverName);
     SafeHtml disableSSLManagementError(String cause);
     SafeHtml disableSSLManagementSuccess();
@@ -253,13 +267,16 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml jpaStatisticsDisabled(String name, String deployment);
 
     String kill(String name);
-
     SafeHtml killServerError(String name);
-
     SafeHtml killServerQuestion(String name);
-
     SafeHtml killServerSuccess(String name);
 
+    SafeHtml killServerGroupError(String name);
+
+    SafeHtml killServerGroupQuestion(String name);
+
+    SafeHtml killServerGroupSuccess(String name);
+
     SafeHtml largeLogFile(String size);
     SafeHtml lastOperationException();
     SafeHtml lastOperationFailed();",2018-06-22T08:12:38Z,94
"@@ -94,6 +94,7 @@ deploymentInProgress=Deployment in progress
 deploymentSuccessful=Deployment successful
 deployments=Deployments
 description=Description
+destroy=Destroy
 details=Details
 directory=directory
 disable=Disable",2018-06-22T08:12:38Z,100
"@@ -111,6 +111,13 @@ deploymentSuccessful=<strong>{0}</strong> has been successfully deployed.
 deploymentUnknownState=The state of deployment <strong>{0}</strong> is unknown.
 deprecated=Deprecated since {0}, reason: {1}
 destinationFilterDescription=Filter by: name, type, deployment
+destroy=Destroy {0}
+destroyServerError=Failed to destroy server <strong>{0}</strong>.
+destroyServerQuestion=Are you sure you want to destroy the server <strong>{0}</strong>?
+destroyServerSuccess=Server <strong>{0}</strong> successfully destroyed.
+destroyServerGroupError=Failed to destroy server group <strong>{0}</strong>.
+destroyServerGroupQuestion=Are you sure you want to destroy the server group <strong>{0}</strong>?
+destroyServerGroupSuccess=Server group <strong>{0}</strong> successfully destroyed.
 disableSSLManagementQuestion=Do you want to disable SSL of the HTTP Management Console ? Also, choose below if you want to reload {0} ? If not, you must reload it manually later and point the browser to the unsecured URL address of HTTP Management Console.
 disableSSLManagementSuccess=The SSL was successfully deactivated from the HTTP Management Console.
 disableSSLManagementError=There wan an error trying to remove SSL from the HTTP Management Console. Cause: {0}.
@@ -227,6 +234,9 @@ kill=Kill {0}
 killServerError=Failed to kill server <strong>{0}</strong>.
 killServerQuestion=Are you sure you want to kill the server <strong>{0}</strong>?
 killServerSuccess=Server <strong>{0}</strong> successfully killed.
+killServerGroupError=Failed to kill server group <strong>{0}</strong>.
+killServerGroupQuestion=Are you sure you want to kill the server group <strong>{0}</strong>?
+killServerGroupSuccess=Server group <strong>{0}</strong> successfully killed.
 largeLogFile=The log file is larger than <strong>{0}</strong>. Please not that the download of large log files can take longer.
 lastOperationException=Unable to execute last operation
 lastOperationFailed=Last operation failed",2018-06-22T08:12:38Z,94
"@@ -22,9 +22,7 @@
 
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
-import elemental.client.Browser;
 import elemental.dom.Element;
-import org.jboss.hal.ballroom.dialog.DialogFactory;
 import org.jboss.hal.core.datasource.DataSource;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderColumn;
@@ -66,6 +64,7 @@ public class DataSourceColumn extends FinderColumn<DataSource> {
     private final EventBus eventBus;
     private final StatementContext statementContext;
     private final Resources resources;
+    private final Finder finder;
     private Server server;
 
     @Inject
@@ -86,8 +85,10 @@ public DataSourceColumn(final ServerActions serverActions,
         this.eventBus = eventBus;
         this.statementContext = statementContext;
         this.resources = resources;
+        this.finder = finder;
 
         setItemsProvider((context, callback) -> {
+            // TODO Support standalone mode
             ResourceAddress serverAddress = AddressTemplate.of(""/{selected.host}/{selected.server}"")
                     .resolve(statementContext);
             ResourceAddress dataSourceAddress = DATA_SOURCE_SUBSYSTEM_TEMPLATE.resolve(statementContext);
@@ -203,27 +204,33 @@ ResourceAddress dataSourceAddress(DataSource dataSource) {
                 : DATA_SOURCE_TEMPLATE.resolve(statementContext, dataSource.getName());
     }
 
+    private ResourceAddress dataSourceConfigurationAddress(DataSource dataSource) {
+        String profile = server.get(PROFILE_NAME).asString();
+        return AddressTemplate.of(""/profile=*/subsystem=datasources/data-source=*"")
+                .resolve(statementContext, profile, dataSource.getName());
+    }
+
     void enableDataSource(DataSource dataSource) {
-        Browser.getWindow().alert(Names.NYI);
+        ResourceAddress address = dataSourceConfigurationAddress(dataSource);
+        Operation operation = new Operation.Builder(WRITE_ATTRIBUTE_OPERATION, address)
+                .param(NAME, ENABLED)
+                .param(VALUE, true)
+                .build();
+        dispatcher.execute(operation, result -> {
+            MessageEvent.fire(eventBus, Message.success(resources.messages().dataSourceEnabled(dataSource.getName())));
+            finder.refresh();
+        });
     }
 
     void enableStatistics(DataSource dataSource) {
-        if (dataSource.isEnabled()) {
-            DialogFactory.confirmation(resources.constants().enableStatistics(),
-                    resources.messages().enableStatisticsOnEnabledDataSource(dataSource.getName(),
-                            statementContext.selectedServer()),
-                    () -> {
-                        Browser.getWindow().alert(Names.NYI);
-                        return true;
-                    });
-        } else {
-            DialogFactory.confirmation(resources.constants().enableStatistics(),
-                    resources.messages().enableStatisticsOnDisabledDataSource(dataSource.getName(),
-                            statementContext.selectedServer()),
-                    () -> {
-                        Browser.getWindow().alert(Names.NYI);
-                        return true;
-                    });
-        }
+        ResourceAddress address = dataSourceConfigurationAddress(dataSource);
+        Operation operation = new Operation.Builder(WRITE_ATTRIBUTE_OPERATION, address)
+                .param(NAME, STATISTICS_ENABLED)
+                .param(VALUE, true)
+                .build();
+        dispatcher.execute(operation, result -> {
+            MessageEvent.fire(eventBus, Message.success(resources.messages().statisticsEnabled(dataSource.getName())));
+            finder.refresh();
+        });
     }
 }
\ No newline at end of file",2016-07-17T16:10:52Z,246
"@@ -85,20 +85,12 @@ class DataSourcePreview extends PreviewContent<DataSource> {
         previewBuilder().add(needsRestartWarning);
 
         noStatisticsWarning = new Alert(Icons.WARNING,
-                new SafeHtmlBuilder()
-                        .append(resources.messages().dataSourceStatisticsDisabled(dataSource.getName()))
-                        .appendEscaped("" "")
-                        .append(resources.messages().staleStatistics())
-                        .toSafeHtml(),
+                resources.messages().dataSourceStatisticsDisabled(dataSource.getName()),
                 resources.constants().enableStatistics(), event -> column.enableStatistics(dataSource));
         previewBuilder().add(noStatisticsWarning);
 
         disabledWarning = new Alert(Icons.WARNING,
-                new SafeHtmlBuilder()
-                        .append(resources.messages().dataSourceDisabledNoStatistics(dataSource.getName()))
-                        .appendEscaped("" "")
-                        .append(resources.messages().staleStatistics())
-                        .toSafeHtml(),
+                resources.messages().dataSourceDisabledNoStatistics(dataSource.getName()),
                 resources.constants().enable(), event -> column.enableDataSource(dataSource));
         previewBuilder().add(disabledWarning);
 ",2016-07-17T16:10:52Z,247
"@@ -131,19 +131,32 @@ private class RefreshFunction implements Function<FunctionContext> {
         public void execute(final Control<FunctionContext> control) {
             FinderColumn column = getColumn(segment.getColumnId());
             if (column != null) {
-                column.refresh(() -> {
-                    if (column.contains(segment.getItemId())) {
-                        column.markSelected(segment.getItemId());
-                        column.selectedRow().click();
-                        control.proceed();
-                    } else {
-                        logger.error(""Error in Finder.RefreshFunction: Unable to select item '{}' in column '{}'"",
-                                segment.getItemId(), segment.getColumnId());
+                // refresh the existing column
+                column.refresh(() -> selectItem(column, control));
+            } else {
+                // append the column
+                appendColumn(segment.getColumnId(), new AsyncCallback<FinderColumn>() {
+                    @Override
+                    public void onFailure(final Throwable throwable) {
                         control.abort();
                     }
+
+                    @Override
+                    public void onSuccess(final FinderColumn finderColumn) {
+                        selectItem(finderColumn, control);
+                    }
                 });
+            }
+        }
+
+        private void selectItem(FinderColumn column, Control<FunctionContext> control) {
+            if (column.contains(segment.getItemId())) {
+                column.markSelected(segment.getItemId());
+                control.getContext().push(column);
+                control.proceed();
             } else {
-                logger.error(""Error in Finder.RefreshFunction: Unable to find column '{}'"", segment.getColumnId());
+                logger.error(""Error in Finder.RefreshFunction: Unable to select item '{}' in column '{}'"",
+                        segment.getItemId(), segment.getColumnId());
                 control.abort();
             }
         }
@@ -426,6 +439,13 @@ public void reset(final String token, final String initialColumn, final PreviewC
         updateHistory();
     }
 
+    /**
+     * Refreshes the current path.
+     */
+    public void refresh() {
+        refresh(getContext().getPath());
+    }
+
     /**
      * Refreshes the specified path.
      * <p>
@@ -434,6 +454,7 @@ public void reset(final String token, final String initialColumn, final PreviewC
      */
     public void refresh(FinderPath path) {
         if (!path.isEmpty()) {
+
             int index = 0;
             Function[] functions = new Function[path.size()];
             for (FinderSegment segment : path) {
@@ -446,7 +467,14 @@ public void refresh(FinderPath path) {
                         public void onFailure(final FunctionContext context) {}
 
                         @Override
-                        public void onSuccess(final FunctionContext context) {}
+                        public void onSuccess(final FunctionContext context) {
+                            if (!context.emptyStack()) {
+                                FinderColumn column = context.pop();
+                                if (column.selectedRow() != null) {
+                                    column.selectedRow().click();
+                                }
+                            }
+                        }
                     }, functions);
         }
     }",2016-07-17T16:10:52Z,248
"@@ -59,6 +59,7 @@
 import static org.jboss.hal.dmr.ModelNodeHelper.getOrDefault;
 
 /**
+ * TODO Support standalone mode
  * @author Harald Pehl
  */
 public class ServerActions {",2016-07-17T16:10:52Z,93
"@@ -68,8 +68,6 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     String duplicateResource(String type);
 
     SafeHtml emptyModelNodeForm();
-    SafeHtml enableStatisticsOnDisabledDataSource(String name, String server);
-    SafeHtml enableStatisticsOnEnabledDataSource(String name, String server);
     SafeHtml endpointError(String url);
     SafeHtml endpointOk(String url);
 
@@ -176,11 +174,15 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml serverTimeout(String name);
     SafeHtml serverUndefined(String name);
 
+    SafeHtml staleStatistics();
+
     SafeHtml startServerGroupError(String name);
     SafeHtml startServerGroupSuccess(String name);
     SafeHtml startServerError(String name);
     SafeHtml startServerSuccess(String name);
 
+    SafeHtml statisticsEnabled(String name);
+
     String stop(String name);
     SafeHtml stopServerGroupError(String name);
     SafeHtml stopServerGroupQuestion(String name);
@@ -197,8 +199,6 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml suspendServerQuestion(String name);
     SafeHtml suspendServerSuccess(String name);
 
-    SafeHtml staleStatistics();
-
     SafeHtml testConnectionError();
     SafeHtml testConnectionSuccess();
     SafeHtml topologyError();",2016-07-17T16:10:52Z,94
"@@ -40,8 +40,6 @@ deploymentReplaced[\=1]=<strong>One</strong> deployment has been replaced.
 domainControllerTimeout=The domain controller <strong>{0}</strong> does not respond. Please check the log files and refresh this page after the domain controller is up and running again.
 duplicateResource=A {0} with this name already exists.
 emptyModelNodeForm=<strong>No attributes.</strong> This resource doesn&#39;t contain attributes or only complex attributes which are currently not supported.
-enableStatisticsOnDisabledDataSource=The data source <strong>{0}</strong> is currently disabled. In order to enable statistics, <ol><li>the <code>statistics-enabled</code> flag will be set to <code>true</>,</li><li>the data source will be enabled and</li><li>the server <strong>{1}</strong> will be reloaded.</li></ol>
-enableStatisticsOnEnabledDataSource=The data source <strong>{0}</strong> is currently enabled. In order to enable statistics, <ol><li>the data source will be disabled,<li>the <code>statistics-enabled</code> flag will be set to <code>true</>,</li><li>the data source will be re-enabled and</li><li>the server <strong>{1}</strong> will be reloaded.</li></ol>
 endpointError=The management interface does not respond. Please make sure<ul><li>you have added users to be able to access the admin console</li><li>the management interface is up and running</li><li><a href=""#"" class=""alert-link"">{0}</a> is configured as an allowed origin</li></ul>
 endpointOk=The management interface at <a href=""#"" class=""alert-link"">{0}</a> is up and running.
 flushConnectionSuccess=Flush connection successful
@@ -140,6 +138,7 @@ startServerError=Failed to start server <strong>{0}</strong>.
 startServerGroupError=Failed to start server group <strong>{0}</strong>.
 startServerGroupSuccess=Server group <strong>{0}</strong> successfully started.
 startServerSuccess=Server <strong>{0}</strong> successfully started.
+statisticsEnabled=Statistics for <strong>{0}</strong> successfully enabled.
 stop=Stop {0}
 stopServerError=Failed to stop server <strong>{0}</strong>.
 stopServerGroupError=Failed to stop server group <strong>{0}</strong>.",2016-07-17T16:10:52Z,94
"@@ -47,6 +47,8 @@ public static class Api {
         @JsMethod(namespace = GLOBAL, name = ""$"")
         public static native Api element(HTMLInputElement element);
 
+        public native boolean bootstrapSwitch();
+
         public native boolean bootstrapSwitch(String method);
 
         public native void bootstrapSwitch(String method, boolean param);",2019-03-20T19:30:39Z,99
"@@ -25,6 +25,7 @@
 import org.jboss.hal.resources.CSS;
 import org.jboss.hal.resources.Ids;
 
+import static org.jboss.gwt.elemento.core.Elements.i;
 import static org.jboss.gwt.elemento.core.Elements.*;
 import static org.jboss.gwt.elemento.core.EventType.bind;
 import static org.jboss.gwt.elemento.core.EventType.change;
@@ -161,8 +162,13 @@ private void switchToExpressionMode() {
         @Override
         public void attach() {
             super.attach();
-            inputElement.classList.add(bootstrapSwitch);
-            SwitchBridge.Api.element(inputElement).onChange((event, state) -> modifyValue(state));
+            HTMLElement editElement = SwitchItem.this.element(EDITING);
+            if (Elements.isVisible(editElement) && editElement.querySelector(""."" + bootstrapSwitchContainer) == null) {
+                inputElement.classList.add(bootstrapSwitch);
+                SwitchBridge.Api api = SwitchBridge.Api.element(inputElement);
+                api.bootstrapSwitch();
+                api.onChange((event, state) -> modifyValue(state));
+            }
         }
 
         @Override",2019-03-20T19:30:39Z,192
"@@ -56,6 +56,7 @@ public interface CSS {
     String bootstrapError = ""bootstrap-error"";
     String bootstrapSelect = ""bootstrap-select"";
     String bootstrapSwitch = ""bootstrap-switch"";
+    String bootstrapSwitchContainer = ""bootstrap-switch-container"";
     String breadcrumb = ""breadcrumb"";
     String breakTooltip = ""break-tooltip"";
     String btn = ""btn"";",2019-03-20T19:30:39Z,159
"@@ -27,7 +27,7 @@
 public class DataSourceTemplate {
 
     @SuppressWarnings(""HardCodedStringLiteral"")
-    enum Vendor {
+    public enum Vendor {
         H2(""H2""),
         POSTGRE_SQL(""PostgreSQL""),
         MYSQL(""MySQL""),
@@ -36,7 +36,7 @@ enum Vendor {
         DB2(""IBM DB2""),
         SYBASE(""Sybase"");
 
-        private final String label;
+        public final String label;
 
         Vendor(String label) {
             this.label = label;",2018-06-28T18:24:04Z,80
"@@ -104,6 +104,7 @@ public DataSourceTemplates() {
                     dataSource.get(JNDI_NAME).set(""java:/PostgresDS"");
                     dataSource.get(DRIVER_NAME).set(POSTGRESQL);
                     dataSource.get(CONNECTION_URL).set(""jdbc:postgresql://localhost:5432/postgresdb"");
+                    dataSource.get(DATASOURCE_CLASS).set(""org.postgresql.ds.PGSimpleDataSource"");
                     dataSource.get(USER_NAME).set(ADMIN);
                     dataSource.get(PASSWORD).set(ADMIN);
                     dataSource.get(BACKGROUND_VALIDATION).set(true);
@@ -192,6 +193,7 @@ public DataSourceTemplates() {
                     dataSource.get(JNDI_NAME).set(""java:/OracleDS"");
                     dataSource.get(DRIVER_NAME).set(ORACLE);
                     dataSource.get(CONNECTION_URL).set(""jdbc:oracle:thin:@localhost:1521:orcalesid"");
+                    dataSource.get(DATASOURCE_CLASS).set(""oracle.jdbc.pool.OracleDataSource"");
                     dataSource.get(USER_NAME).set(ADMIN);
                     dataSource.get(PASSWORD).set(ADMIN);
                     dataSource.get(BACKGROUND_VALIDATION).set(true);
@@ -243,6 +245,7 @@ public DataSourceTemplates() {
                     dataSource.get(DRIVER_NAME).set(SQLSERVER);
                     dataSource.get(CONNECTION_URL)
                             .set(""jdbc:microsoft:sqlserver://localhost:1433;DatabaseName=MyDatabase"");
+                    dataSource.get(DATASOURCE_CLASS).set(""com.microsoft.sqlserver.jdbc.SQLServerDataSource"");
                     dataSource.get(USER_NAME).set(ADMIN);
                     dataSource.get(PASSWORD).set(ADMIN);
                     dataSource.get(BACKGROUND_VALIDATION).set(true);",2018-06-28T18:24:04Z,80
"@@ -63,7 +63,7 @@ class ChooseTemplateStep extends WizardStep<Context, State> {
                                         String id = ((HTMLInputElement) event.target).value;
                                         wizard().getContext().template = templates.getTemplate(id);
                                     }))
-                            .add(span().textContent(template.getId())))
+                            .add(span().textContent(template.getVendor().label)))
                     .asElement());
         }
 ",2018-06-28T18:24:04Z,143
"@@ -26,6 +26,7 @@
 import org.jboss.hal.core.finder.FinderContext;
 import org.jboss.hal.core.finder.FinderPathFactory;
 import org.jboss.hal.core.finder.FinderSegment;
+import org.jboss.hal.core.finder.ItemActionFactory;
 import org.jboss.hal.core.finder.PreviewContent;
 import org.jboss.hal.core.finder.StaticItem;
 import org.jboss.hal.core.finder.StaticItemColumn;
@@ -36,6 +37,7 @@
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.flow.Progress;
 import org.jboss.hal.meta.security.SecurityContextRegistry;
+import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
@@ -75,6 +77,7 @@ public BrowseByColumn(Finder finder,
             SecurityContextRegistry securityContextRegistry,
             @Footer Provider<Progress> progress,
             EventBus eventBus,
+            ItemActionFactory itemActionFactory,
             Dispatcher dispatcher,
             Places places,
             FinderPathFactory finderPathFactory,
@@ -97,6 +100,11 @@ public BrowseByColumn(Finder finder,
                                 .nextColumn(Ids.SERVER_GROUP)
                                 .onPreview(new PreviewContent<>(Names.SERVER_GROUPS,
                                         resources.previews().runtimeServerGroups()))
+                                .build(),
+                        new StaticItem.Builder(Names.MANAGEMENT_OPERATIONS)
+                                .onPreview(new PreviewContent<>(Names.MANAGEMENT_OPERATIONS,
+                                        resources.previews().runtimeManagementOperations()))
+                                .action(itemActionFactory.view(NameTokens.MANAGEMENT_OPERATIONS))
                                 .build()
                 ));
     }",2018-12-27T19:52:32Z,208
"@@ -75,7 +75,6 @@
 import static org.jboss.hal.client.runtime.host.HostColumn.HOST_CONFIGURATION_CHANGES_ADDRESS;
 import static org.jboss.hal.client.runtime.host.HostColumn.HOST_CONNECTION_ADDRESS;
 import static org.jboss.hal.client.runtime.host.HostColumn.HOST_MANAGEMENT_OPERATIONS_ADDRESS;
-import static org.jboss.hal.client.runtime.managementoperations.ManagementOperationsPresenter.MANAGEMENT_OPERATIONS_TEMPLATE;
 import static org.jboss.hal.core.finder.FinderColumn.RefreshMode.RESTORE_SELECTION;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.flow.Flow.series;
@@ -267,11 +266,6 @@ public List<ItemAction<Host>> actions() {
                             actions.add(itemActionFactory.placeRequest(resources.constants().configurationChanges(),
                                     ccPlaceRequest, Constraint.executable(HOST_CONFIGURATION_CHANGES_TEMPLATE, ADD)));
                         }
-                        PlaceRequest moPlaceRequest = new PlaceRequest.Builder()
-                                .nameToken(NameTokens.MANAGEMENT_OPERATIONS).build();
-                        actions.add(itemActionFactory.placeRequest(resources.constants().managementOperations(),
-                                moPlaceRequest, Constraint.executable(MANAGEMENT_OPERATIONS_TEMPLATE,
-                                        READ_RESOURCE_OPERATION)));
                         // TODO Add additional operations like :reload(admin-mode=true), :clean-obsolete-content or :take-snapshot
                         actions.add(ItemAction.separator());
                         actions.add(new ItemAction.Builder<Host>()",2018-12-27T19:52:32Z,5
"@@ -55,9 +55,8 @@ static ExecutionStatus find(String name) {
 
 
     private String address;
-    private boolean nonProgressing;
 
-    ManagementOperations(NamedNode node, String nonProgressingId) {
+    ManagementOperations(NamedNode node) {
         super(node.getName(), node.asModelNode());
         StringBuilder builder = new StringBuilder();
         builder.append(""/"");
@@ -69,7 +68,6 @@ static ExecutionStatus find(String name) {
             }
         }
         this.address = builder.toString();
-        this.nonProgressing = nonProgressingId != null && nonProgressingId.equals(node.getName());
     }
 
     public String getAccessMechanism() {
@@ -81,7 +79,19 @@ public String getAddress() {
     }
 
     public boolean isNonProgressing() {
-        return nonProgressing;
+        return hasDefined(HAL_NON_PROGRESSING) && get(HAL_NON_PROGRESSING).asBoolean();
+    }
+
+    public void setAsNonProgressing() {
+        get(HAL_NON_PROGRESSING).set(true);
+    }
+
+    public String getActiveAddressHost() {
+        return hasDefined(HAL_ACTIVE_ADDRESS_HOST) ? get(HAL_ACTIVE_ADDRESS_HOST).asString() : null;
+    }
+
+    public String getActiveAddressServer() {
+        return hasDefined(HAL_ACTIVE_ADDRESS_SERVER) ? get(HAL_ACTIVE_ADDRESS_SERVER).asString() : null;
     }
 
     public String getCallerThread() {",2018-12-27T19:52:32Z,249
"@@ -81,6 +81,12 @@ public HTMLElement getStatusElement() {
     public SafeHtml getDescriptionHtml() {
         SafeHtmlBuilder html = new SafeHtmlBuilder();
         html.append(resources.messages().operationLabel(operation.getOperation()));
+        if (operation.getActiveAddressHost() != null) {
+            html.append(resources.messages().operationHost(operation.getActiveAddressHost()));
+        }
+        if (operation.getActiveAddressServer() != null) {
+            html.append(resources.messages().operationServer(operation.getActiveAddressServer()));
+        }
         html.append(resources.messages().addressLabel(operation.getAddress()));
         html.append(resources.messages().callerThreadLabel(operation.getCallerThread()));
         html.append(resources.messages()",2018-12-27T19:52:32Z,250
"@@ -15,10 +15,14 @@
  */
 package org.jboss.hal.client.runtime.managementoperations;
 
+import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 import javax.inject.Inject;
+import javax.inject.Provider;
 
+import com.google.common.base.Joiner;
 import com.google.gwt.safehtml.shared.SafeHtmlUtils;
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.client.annotations.NameToken;
@@ -35,33 +39,50 @@
 import org.jboss.hal.dmr.Composite;
 import org.jboss.hal.dmr.CompositeResult;
 import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.ModelType;
 import org.jboss.hal.dmr.NamedNode;
 import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.Property;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.flow.FlowContext;
+import org.jboss.hal.flow.Outcome;
+import org.jboss.hal.flow.Progress;
+import org.jboss.hal.flow.Task;
 import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Footer;
 import org.jboss.hal.spi.Message;
 import org.jboss.hal.spi.MessageEvent;
 import org.jboss.hal.spi.Requires;
+import rx.Completable;
+import rx.Single;
 
+import static java.util.stream.Collectors.toList;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
+import static org.jboss.hal.flow.Flow.series;
 import static org.jboss.hal.meta.token.NameTokens.MANAGEMENT_OPERATIONS;
 
 public class ManagementOperationsPresenter extends
         ApplicationFinderPresenter<ManagementOperationsPresenter.MyView, ManagementOperationsPresenter.MyProxy> {
 
+    private static final String EQ = ""="";
+    private static final String WILDCARD = ""*"";
+    private static final String WFLYDM_0089 = ""WFLYDM0089"";
+    private AddressTemplate MGMT_OPERATIONS_TEMPLATE = AddressTemplate.of(""/core-service=management/service=management-operations"");
     public static final String MANAGEMENT_OPERATIONS_ADDRESS = ""{selected.host}/core-service=management/service=management-operations"";
-    public static final String ACTIVE_OPERATIONS_ADDRESS = ""{selected.host}/core-service=management/service=management-operations/active-operation=*"";
-    public static final AddressTemplate MANAGEMENT_OPERATIONS_TEMPLATE = AddressTemplate.of(
-            MANAGEMENT_OPERATIONS_ADDRESS);
-    public static final AddressTemplate ACTIVE_OPERATIONS_TEMPLATE = AddressTemplate.of(ACTIVE_OPERATIONS_ADDRESS);
+    private static final String ACTIVE_OPERATIONS_ADDRESS = ""{selected.host}/core-service=management/service=management-operations/active-operation=*"";
+    public static final AddressTemplate MANAGEMENT_OPERATIONS_TEMPLATE = AddressTemplate.of(MANAGEMENT_OPERATIONS_ADDRESS);
+    static final AddressTemplate ACTIVE_OPERATIONS_TEMPLATE = AddressTemplate.of(ACTIVE_OPERATIONS_ADDRESS);
 
     private final FinderPathFactory finderPathFactory;
     private final Dispatcher dispatcher;
     private final StatementContext statementContext;
+    private Provider<Progress> progress;
     private final Resources resources;
     private EventBus eventBus;
     private Environment environment;
@@ -75,13 +96,15 @@ public ManagementOperationsPresenter(EventBus eventBus,
             FinderPathFactory finderPathFactory,
             Dispatcher dispatcher,
             StatementContext statementContext,
+            @Footer Provider<Progress> progress,
             Resources resources) {
         super(eventBus, view, myProxy, finder);
         this.eventBus = eventBus;
         this.environment = environment;
         this.finderPathFactory = finderPathFactory;
         this.dispatcher = dispatcher;
         this.statementContext = statementContext;
+        this.progress = progress;
         this.resources = resources;
     }
 
@@ -93,7 +116,18 @@ protected void onBind() {
 
     @Override
     public FinderPath finderPath() {
-        return environment.isStandalone() ? finderPathFactory.runtimeServerPath() : finderPathFactory.runtimeHostPath();
+        if (environment.isStandalone()) {
+            // in standalone mode, the Management Operations option is on a drop down as the StandaloneServerColumn
+            // generic type is Server, doesn't accomodate a static option to add the Management Operations
+            // and changing the column to a StaticItemColumn would require too much change for little return
+            return finderPathFactory.runtimeServerPath()
+                    .append(Ids.RUNTIME_SUBSYSTEM, MANAGEMENT_OPERATIONS,
+                            resources.constants().monitor(), Names.MANAGEMENT_OPERATIONS);
+        } else {
+            return new FinderPath()
+                    .append(Ids.DOMAIN_BROWSE_BY, Ids.MANAGEMENT_OPERATIONS,
+                            Names.RUNTIME, Names.MANAGEMENT_OPERATIONS);
+        }
     }
 
     public StatementContext getStatementContext() {
@@ -102,68 +136,354 @@ public StatementContext getStatementContext() {
 
     @Override
     protected void reload() {
-        ResourceAddress addressFindNP = MANAGEMENT_OPERATIONS_TEMPLATE.resolve(statementContext);
-        Operation operationFindNP = new Operation.Builder(addressFindNP, FIND_NON_PROGRESSING_OPERATION)
-                .build();
+        if (environment.isStandalone()) {
 
-        ResourceAddress addressMO = MANAGEMENT_OPERATIONS_TEMPLATE.resolve(statementContext);
-        Operation operationMO = new Operation.Builder(addressMO, READ_CHILDREN_RESOURCES_OPERATION)
-                .param(CHILD_TYPE, ACTIVE_OPERATION)
-                .build();
+            ResourceAddress addressFindNP = MANAGEMENT_OPERATIONS_TEMPLATE.resolve(statementContext);
+            Operation operationFindNP = new Operation.Builder(addressFindNP, FIND_NON_PROGRESSING_OPERATION)
+                    .build();
 
-        dispatcher.execute(new Composite(operationFindNP, operationMO), (CompositeResult result) -> {
+            ResourceAddress addressMO = MANAGEMENT_OPERATIONS_TEMPLATE.resolve(statementContext);
+            Operation operationMO = new Operation.Builder(addressMO, READ_CHILDREN_RESOURCES_OPERATION)
+                    .param(CHILD_TYPE, ACTIVE_OPERATION)
+                    .build();
 
-            ModelNode resultNP = result.step(0).get(RESULT);
-            ModelNode resultOperations = result.step(1).get(RESULT);
-            final String nonProgressingId = resultNP.isDefined() ? resultNP.asString() : null;
-            getView().update(asNamedNodes(resultOperations.asPropertyList()), nonProgressingId);
+            dispatcher.execute(new Composite(operationFindNP, operationMO), (CompositeResult result) -> {
+                ModelNode resultNP = result.step(0).get(RESULT);
+                ModelNode resultOperations = result.step(1).get(RESULT);
+                final String nonProgressingId = resultNP.isDefined() ? resultNP.asString() : null;
 
-        });
+                List<ManagementOperations> activeOps = asNamedNodes(resultOperations.asPropertyList()).stream()
+                        .map(ManagementOperations::new)
+                        .peek(activeOp -> {
+                            if (nonProgressingId != null && nonProgressingId.equals(activeOp.getName())) {
+                                activeOp.setAsNonProgressing();
+                            }
+                        })
+                        .collect(toList());
+
+                getView().update(activeOps);
+            });
+        } else {
+
+            // return available hosts, to later call a find-non-progressing-operation on each host
+            Task<FlowContext> hostsTask = context -> {
+                ResourceAddress address = new ResourceAddress();
+                Operation operation = new Operation.Builder(address, READ_CHILDREN_NAMES_OPERATION)
+                        .param(CHILD_TYPE, HOST)
+                        .build();
+                return dispatcher.execute(operation)
+                        .doOnSuccess(result -> {
+                            List<String> hosts = result.asList().stream()
+                                    .map(ModelNode::asString)
+                                    .collect(toList());
+                            context.set(HOSTS, hosts);
+                        })
+                        .toCompletable();
+            };
+
+            // return running servers, to later call a find-non-progressing-operation on each runtime server
+            Task<FlowContext> serversTask = context -> {
+                // /host=*/server=*:query(select=[host,name],where={server-state=running})
+                ResourceAddress address = new ResourceAddress()
+                        .add(HOST, WILDCARD)
+                        .add(SERVER, WILDCARD);
+                Operation operation = new Operation.Builder(address, QUERY)
+                        .param(SELECT, new ModelNode().add(HOST).add(NAME))
+                        .param(WHERE, new ModelNode().set(SERVER_STATE, ""running""))
+                        .build();
+                return dispatcher.execute(operation)
+                        .doOnSuccess(result -> {
+                            List<String> servers = Collections.emptyList();
+                            if (result != null && result.isDefined()) {
+                                servers = result.asList().stream()
+                                        .map(r -> hostServerAddress(r.get(RESULT)))
+                                        .collect(toList());
+                            }
+                            context.set(""servers"", servers);
+                        })
+                        .toCompletable();
+            };
+
+            // call find-non-progressing-operation and read-resource of active operations
+            // on each host and server
+            Task<FlowContext> findNonProgressingTask = context -> {
+
+                List<String> hosts = context.get(HOSTS);
+                List<String> servers = context.get(""servers"");
+
+                Composite composite = new Composite();
+                for (String host : hosts) {
+                    ResourceAddress address = new ResourceAddress().add(HOST, host)
+                            .add(CORE_SERVICE, MANAGEMENT)
+                            .add(SERVICE, MANAGEMENT_OPERATIONS);
+                    Operation operation = new Operation.Builder(address, FIND_NON_PROGRESSING_OPERATION).build();
+                    composite.add(operation);
+
+                    ResourceAddress ad = new ResourceAddress(address.clone()).add(ACTIVE_OPERATION, WILDCARD);
+                    Operation operationMO = new Operation.Builder(ad, READ_RESOURCE_OPERATION)
+                            .build();
+                    composite.add(operationMO);
+                }
+                if (!servers.isEmpty()) {
+                    for (String server : servers) {
+                        ResourceAddress address = AddressTemplate.of(server)
+                                .append(MGMT_OPERATIONS_TEMPLATE)
+                                .resolve(statementContext);
+                        Operation findOp = new Operation.Builder(address, FIND_NON_PROGRESSING_OPERATION).build();
+                        composite.add(findOp);
+
+                        ResourceAddress ad = new ResourceAddress(address.clone()).add(ACTIVE_OPERATION, WILDCARD);
+                        Operation operation = new Operation.Builder(ad, READ_RESOURCE_OPERATION).build();
+                        composite.add(operation);
+                    }
+                }
+                return dispatcher.execute(composite)
+                        .doOnSuccess(response -> {
+                            List<String> nonProgressingOps = new ArrayList<>();
+                            List<ManagementOperations> ops = new ArrayList<>();
+                            for (ModelNode r : response) {
+                                ModelNode result = r.get(RESULT);
+                                if (result != null && result.isDefined()) {
+                                    ModelType type = result.getType();
+                                    // if model is LIST it is the list of active operations
+                                    if (ModelType.LIST.equals(type)) {
+                                        for (ModelNode op : result.asList()) {
+                                            ModelNode opResult = op.get(RESULT);
+                                            // the result has two addresses
+                                            // 1) the active-operation address itself, example
+                                            //  /host=master/server=server-three/core-service=management/service=management-operations/active-operation=1940701884
+                                            // 2) the resource address
+                                            //  /host=master/server=server-three/subsystem=elytron/filesystem-realm=file1
+                                            // the active-operation address should be store to later use it to cancel, if needed
+                                            // the resource address is displayed to the user
+                                            ModelNode activeOpAddress = op.get(ADDRESS);
+                                            opResult.get(HAL_ACTIVE_OP_ADDRESS).set(activeOpAddress);
+                                            String opId = null;
+                                            List<Property> activeOperationAddressList = activeOpAddress.asPropertyList();
+                                            for (Property p : activeOperationAddressList) {
+                                                if (p.getName().equals(ACTIVE_OPERATION)) {
+                                                    opId = p.getValue().asString();
+                                                }
+                                                // the result doesn't show the full address of a running server
+                                                // store the host and server to later show in the view
+                                                if (p.getName().equals(HOST)) {
+                                                    opResult.get(HAL_ACTIVE_ADDRESS_HOST).set(p.getValue().asString());
+                                                }
+                                                if (p.getName().equals(SERVER)) {
+                                                    opResult.get(HAL_ACTIVE_ADDRESS_SERVER).set(p.getValue().asString());
+                                                }
+                                            }
+                                            NamedNode node = new NamedNode(opId, opResult);
+                                            ManagementOperations activeOp = new ManagementOperations(node);
+                                            ops.add(activeOp);
+                                        }
+                                    } else {
+                                        nonProgressingOps.add(result.asString());
+                                    }
+                                }
+                            }
+                            // if there are non progressing operations, mark them in the list
+                            if (!nonProgressingOps.isEmpty()) {
+                                Collections.sort(nonProgressingOps);
+                                for (ManagementOperations mop : ops) {
+                                    if (nonProgressingOps.indexOf(mop.getName()) > -1) {
+                                        mop.setAsNonProgressing();
+                                    }
+                                }
+                            }
+                            context.set(""active-operations"", ops);
+                        })
+                        .toCompletable();
+            };
+
+            series(new FlowContext(progress.get()), hostsTask, serversTask, findNonProgressingTask)
+                    .subscribe(new Outcome<FlowContext>() {
+                        @Override
+                        public void onError(FlowContext context, Throwable error) {
+                            MessageEvent.fire(getEventBus(), Message.error(SafeHtmlUtils.fromString(
+                                    ""Error loading management operations: "" + error.getMessage())));
+                        }
+
+                        @Override
+                        public void onSuccess(FlowContext context) {
+                            List<ManagementOperations> ops = context.get(""active-operations"");
+                            getView().update(ops);
+                        }
+                    });
+        }
     }
 
     void cancelNonProgressingOperation() {
-        ResourceAddress address = MANAGEMENT_OPERATIONS_TEMPLATE.resolve(statementContext);
-        Operation operation = new Operation.Builder(address, CANCEL_NON_PROGRESSING_OPERATION)
-                .build();
-        dispatcher.execute(operation,
-                result -> {
-                    MessageEvent.fire(eventBus,
-                            Message.info(resources.messages().cancelledOperation(result.asString())));
-                    reload();
-                },
-                (operation1, failure) -> {
-                    MessageEvent.fire(eventBus, Message.error(SafeHtmlUtils.fromString(failure)));
-                    reload();
-                },
-                (operation1, exception) -> {
-                    MessageEvent.fire(eventBus,
-                            Message.error(SafeHtmlUtils.fromString(exception.getMessage())));
-                    reload();
-                });
+        if (environment.isStandalone()) {
+            ResourceAddress address = MANAGEMENT_OPERATIONS_TEMPLATE.resolve(statementContext);
+            Operation operation = new Operation.Builder(address, CANCEL_NON_PROGRESSING_OPERATION)
+                    .build();
+            dispatcher.execute(operation,
+                    result -> {
+                        MessageEvent.fire(eventBus,
+                                Message.info(resources.messages().cancelledOperation(result.asString())));
+                        reload();
+                    },
+                    (operation1, failure) -> {
+                        // the cancel-non-progressing-operation returns an exception message if there are no
+                        // operation to cancel, handle this a non error in HAL
+                        if (failure.contains(WFLYDM_0089)) {
+                            MessageEvent.fire(eventBus, Message.success(SafeHtmlUtils.fromString(failure)));
+                        } else {
+                            MessageEvent.fire(eventBus, Message.error(SafeHtmlUtils.fromString(failure)));
+                        }
+                        reload();
+                    },
+                    (operation1, ex) -> {
+                        // the cancel-non-progressing-operation returns an exception message if there are no
+                        // operation to cancel, handle this a non error in HAL
+                        if (ex.getMessage().contains(WFLYDM_0089)) {
+                            MessageEvent.fire(eventBus, Message.success(SafeHtmlUtils.fromString(ex.getMessage())));
+                        } else {
+                            MessageEvent.fire(eventBus, Message.error(SafeHtmlUtils.fromString(ex.getMessage())));
+                        }
+                        reload();
+                    });
+        } else {
+            Composite composite = new Composite();
+            // return running hosts, to later call a cancel-non-progressing-operation on each host
+            ResourceAddress rootAddress = new ResourceAddress();
+            Operation opHosts = new Operation.Builder(rootAddress, READ_CHILDREN_NAMES_OPERATION)
+                    .param(CHILD_TYPE, HOST)
+                    .build();
+            composite.add(opHosts);
+
+            ResourceAddress address = new ResourceAddress()
+                    .add(HOST, WILDCARD)
+                    .add(SERVER, WILDCARD);
+            Operation opRunningServers = new Operation.Builder(address, QUERY)
+                    .param(SELECT, new ModelNode().add(HOST).add(NAME))
+                    .param(WHERE, new ModelNode().set(SERVER_STATE, ""running""))
+                    .build();
+            composite.add(opRunningServers);
+
+            dispatcher.execute(composite, (CompositeResult compositeResult) -> {
+
+                // available hosts
+                List<String> hosts = compositeResult.step(0).get(RESULT).asList().stream()
+                        .map(ModelNode::asString)
+                        .collect(toList());
+
+                // runing servers
+                List<String> servers = Collections.emptyList();
+                ModelNode result = compositeResult.step(1);
+                if (result != null && result.isDefined()) {
+                    servers = result.get(RESULT).asList().stream()
+                            .map(r -> hostServerAddress(r.get(RESULT)))
+                            .collect(toList());
+                }
+
+                // run each :cancel-non-progressing-operation on a specific task
+                // because the :cancel-non-progressing-operation returns as a failure
+                // for this case, continue to run the next task
+                List<Task<FlowContext>> tasks = new ArrayList<>(hosts.size());
+                for (String host : hosts) {
+                    // call cancel-non-progressing-operation on each host
+                    Task<FlowContext> task = context -> {
+                        ResourceAddress hostAddress = new ResourceAddress().add(HOST, host)
+                                .add(CORE_SERVICE, MANAGEMENT)
+                                .add(SERVICE, MANAGEMENT_OPERATIONS);
+                        return buildCancelOperation(hostAddress, context);
+                    };
+                    tasks.add(task);
+                }
+
+                for (String server : servers) {
+                    // call cancel-non-progressing-operation on each server
+                    Task<FlowContext> task = context -> {
+                        ResourceAddress serverAddress = AddressTemplate.of(server)
+                                .append(MGMT_OPERATIONS_TEMPLATE)
+                                .resolve(statementContext);
+                        return buildCancelOperation(serverAddress, context);
+                    };
+                    tasks.add(task);
+                }
+
+                series(new FlowContext(progress.get()), tasks)
+                        .subscribe(new Outcome<FlowContext>() {
+                            @Override
+                            public void onError(FlowContext context, Throwable error) {
+                                MessageEvent.fire(getEventBus(), Message.error(SafeHtmlUtils.fromString(
+                                        ""Error loading management operations: "" + error.getMessage())));
+                            }
+
+                            @Override
+                            public void onSuccess(FlowContext context) {
+                                if (context.emptyStack()) {
+                                    // display the standard message if there is no cancelled operation
+                                    MessageEvent.fire(eventBus,
+                                            Message.success(SafeHtmlUtils.fromString(context.get(WFLYDM_0089))));
+                                } else {
+                                    // display the cancelled non progressing operation ids
+                                    List<String> canceledOps = new ArrayList<>();
+                                    while (!context.emptyStack()) {
+                                        canceledOps.add(context.pop());
+                                    }
+                                    String ids = Joiner.on("", "").join(canceledOps);
+                                    MessageEvent.fire(eventBus,
+                                            Message.success(resources.messages().cancelledOperation(ids)));
+                                }
+                                reload();
+                            }
+                        });
+            });
+        }
+    }
+
+    private Completable buildCancelOperation(ResourceAddress address, FlowContext context) {
+        Operation operation = new Operation.Builder(address, CANCEL_NON_PROGRESSING_OPERATION).build();
+        return dispatcher.execute(operation)
+                .doOnSuccess(result -> {
+                    if (result.isDefined()) {
+                        context.push(result.asString());
+                    }
+                })
+                .onErrorResumeNext(ex -> {
+                    // the cancel-non-progressing-operation returns an exception message if there are no
+                    // operation to cancel, handle this a non error in HAL
+                    if (ex.getMessage().contains(WFLYDM_0089)) {
+                        context.set(WFLYDM_0089, ex.getMessage());
+                        return Single.just(new ModelNode());
+                    } else {
+                        return Single.error(ex);
+                    }
+                })
+                .toCompletable();
     }
 
     public void cancel(ManagementOperations item) {
         DialogFactory.showConfirmation(resources.constants().cancelActiveOperation(),
                 resources.messages().cancelActiveOperation(item.getName()),
                 () -> {
-                    ResourceAddress address = ACTIVE_OPERATIONS_TEMPLATE.resolve(statementContext, item.getName());
-                    Operation operation = new Operation.Builder(address, CANCEL_OPERATION)
-                            .build();
+                    ResourceAddress address;
+                    if (environment.isStandalone()) {
+                        address = ACTIVE_OPERATIONS_TEMPLATE.resolve(statementContext, item.getName());
+                    } else {
+                        address = new ResourceAddress(item.get(HAL_ACTIVE_OP_ADDRESS));
+                    }
+                    Operation operation = new Operation.Builder(address, CANCEL_OPERATION).build();
                     dispatcher.execute(operation, result -> reload());
                 });
     }
 
+    private String hostServerAddress(ModelNode model) {
+        return HOST + EQ + model.get(HOST).asString() + ""/"" + SERVER + EQ + model.get(NAME).asString();
+    }
 
     // @formatter:off
     @ProxyCodeSplit
     @NameToken(MANAGEMENT_OPERATIONS)
     @Requires({MANAGEMENT_OPERATIONS_ADDRESS, ACTIVE_OPERATIONS_ADDRESS})
     public interface MyProxy extends ProxyPlace<ManagementOperationsPresenter> {
-
     }
 
     public interface MyView extends HalView, HasPresenter<ManagementOperationsPresenter> {
-        void update(List<NamedNode> nodes, String nonProgressingOperation);
+        void update(List<ManagementOperations> activeOperations);
     }
     // @formatter:on
 }",2018-12-27T19:52:32Z,251
"@@ -24,7 +24,6 @@
 import org.jboss.hal.ballroom.dataprovider.DataProvider;
 import org.jboss.hal.core.mbui.listview.ModelNodeListView;
 import org.jboss.hal.core.mvp.HalViewImpl;
-import org.jboss.hal.dmr.NamedNode;
 import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.resources.Constants;
@@ -34,7 +33,6 @@
 import org.jboss.hal.resources.Resources;
 
 import static java.util.Comparator.comparing;
-import static java.util.stream.Collectors.toList;
 import static org.jboss.hal.client.runtime.managementoperations.ManagementOperationsPresenter.ACTIVE_OPERATIONS_TEMPLATE;
 import static org.jboss.hal.client.runtime.managementoperations.ManagementOperationsPresenter.MANAGEMENT_OPERATIONS_TEMPLATE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
@@ -73,13 +71,17 @@ public ManagementOperationsView(MetadataRegistry metadataRegistry, Resources res
                 .toolbarAttribute(new Toolbar.Attribute<>(ACCESS_MECHANISM, constants.accessMechanism(),
                         (node, filter) -> node.getAccessMechanism().toLowerCase().equals(filter.toLowerCase()),
                         comparing(ManagementOperations::getAccessMechanism)))
-                .toolbarAttribute(new Toolbar.Attribute<>(OPERATION, resources.constants().operation(),
-                        (model, filter) -> model.getOperation().contains(filter), null))
                 .toolbarAttribute(new Toolbar.Attribute<>(ADDRESS, resources.constants().address(),
-                        (model, filter) -> model.getAddress().contains(filter), null))
+                        // filter by three address attributes: address, host and server
+                        (model, filter) -> model.getAddress().contains(filter)
+                                || (model.getActiveAddressHost() != null && model.getActiveAddressHost().contains(filter))
+                                || (model.getActiveAddressServer() != null && model.getActiveAddressServer().contains(filter)),
+                        null))
                 .toolbarAttribute(new Toolbar.Attribute<>(EXECUTION_STATUS, resources.constants().executionStatus(),
                         (node, filter) -> node.getExecutionStatus().toLowerCase().contains(filter.toLowerCase()),
                         comparing(ManagementOperations::getExecutionStatus)))
+                .toolbarAttribute(new Toolbar.Attribute<>(OPERATION, resources.constants().operation(),
+                        (model, filter) -> model.getOperation().contains(filter), null))
                 .toolbarAction(new Toolbar.Action(Ids.build(ACTIVE_OPERATION, Ids.REFRESH),
                         constants.reload(), findDescription, () -> presenter.reload()))
                 .toolbarAction(new Toolbar.Action(Ids.build(ACTIVE_OPERATION, Ids.CANCEL_NON_PROGRESSING_OPERATION),
@@ -98,12 +100,9 @@ public void setPresenter(ManagementOperationsPresenter presenter) {
     }
 
     @Override
-    public void update(List<NamedNode> nodes, String nonProgressingOperation) {
-        List<ManagementOperations> operations = nodes.stream()
-                .map((NamedNode node) -> new ManagementOperations(node, nonProgressingOperation))
-                .collect(toList());
-        dataProvider.update(operations);
-        if (operations.isEmpty()) {
+    public void update(List<ManagementOperations> activeOperations) {
+        dataProvider.update(activeOperations);
+        if (activeOperations.isEmpty()) {
             listView.showEmptyState(EMPTY);
         }
     }",2018-12-27T19:52:32Z,252
"@@ -62,7 +62,6 @@
 import static org.jboss.hal.client.runtime.configurationchanges.ConfigurationChangesPresenter.HOST_CONFIGURATION_CHANGES_ADDRESS;
 import static org.jboss.hal.client.runtime.configurationchanges.ConfigurationChangesPresenter.HOST_CONFIGURATION_CHANGES_TEMPLATE;
 import static org.jboss.hal.client.runtime.managementoperations.ManagementOperationsPresenter.MANAGEMENT_OPERATIONS_ADDRESS;
-import static org.jboss.hal.client.runtime.managementoperations.ManagementOperationsPresenter.MANAGEMENT_OPERATIONS_TEMPLATE;
 import static org.jboss.hal.client.runtime.server.StandaloneServerColumn.MANAGEMENT_ADDRESS;
 import static org.jboss.hal.core.finder.FinderColumn.RefreshMode.RESTORE_SELECTION;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
@@ -180,11 +179,6 @@ public List<ItemAction<Server>> actions() {
                         actions.add(itemActionFactory.placeRequest(resources.constants().configurationChanges(),
                                 ccPlaceRequest, Constraint.executable(HOST_CONFIGURATION_CHANGES_TEMPLATE, ADD)));
                     }
-                    PlaceRequest moPlaceRequest = new PlaceRequest.Builder()
-                            .nameToken(NameTokens.MANAGEMENT_OPERATIONS).build();
-                    actions.add(itemActionFactory.placeRequest(resources.constants().managementOperations(),
-                            moPlaceRequest, Constraint.executable(MANAGEMENT_OPERATIONS_TEMPLATE,
-                                    READ_RESOURCE_OPERATION)));
                     actions.add(new ItemAction.Builder<Server>()
                             .title(resources.constants().editURL())
                             .handler(itm -> serverActions.editUrl(itm, () -> refresh(RESTORE_SELECTION)))",2018-12-27T19:52:32Z,50
"@@ -122,6 +122,10 @@ public SubsystemColumn(Finder finder,
                 items.add(new SubsystemMetadata.Builder(Ids.SERVER_RUNTIME_STATUS, resources.constants().status())
                         .token(NameTokens.SERVER_RUNTIME)
                         .build());
+                items.add(new SubsystemMetadata.Builder(Ids.MANAGEMENT_OPERATIONS, resources.constants().managementOperations())
+                        .token(NameTokens.MANAGEMENT_OPERATIONS)
+                        .preview(resources.previews().runtimeManagementOperations())
+                        .build());
                 items.addAll(existingSubsystems.values().stream()
                         .sorted(comparing(SubsystemMetadata::getTitle))
                         .collect(toList()));",2018-12-27T19:52:32Z,119
"@@ -337,9 +337,13 @@ public interface ModelDescriptionConstants {
     String GROUPING_HANDLER = ""grouping-handler"";
     String HA_POLICY = ""ha-policy"";
     // HAL_* attributes are used internally only!
+    String HAL_ACTIVE_OP_ADDRESS = ""hal-active-op-address"";
+    String HAL_ACTIVE_ADDRESS_HOST = ""hal-active-address-host"";
+    String HAL_ACTIVE_ADDRESS_SERVER = ""hal-active-address-server"";
     String HAL_INDEX = ""hal-index"";
     String HAL_LABEL = ""hal-label"";
     String HAL_LENGTH = ""hal-length"";
+    String HAL_NON_PROGRESSING = ""hal-non-progressing"";
     String HAL_RECURSIVE = ""hal-recursive"";
     String HANDLER = ""handler"";
     String HANDLERS = ""handlers"";",2018-12-27T19:52:32Z,109
"@@ -482,6 +482,7 @@ public interface Ids {
     String MAIL_SESSION_ITEM = ""mail-session-item"";
     String MAIL_SESSION_REFRESH = ""mail-session-refresh"";
     String MANAGEMENT = ""management"";
+    String MANAGEMENT_OPERATIONS = ""mgmt-operations"";
     String MEMBERSHIP = ""membership"";
     String MEMBERSHIP_EXCLUDE = ""membership-exclude"";
     String MEMBERSHIP_INCLUDE = ""membership-include"";",2018-12-27T19:52:32Z,111
"@@ -263,6 +263,8 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml obtainCertificateError(String alias, String resource, String error);
     SafeHtml obtainCertificateSuccess(String alias, String resource);
     SafeHtml operationLabel(String name);
+    SafeHtml operationHost(String name);
+    SafeHtml operationServer(String name);
     SafeHtml pageNotFound(String invalidHistoryToken);
     SafeHtml patchAddError(String patchId, String error);
     SafeHtml patchHostNeedsRestart(String hostname);",2018-12-27T19:52:32Z,94
"@@ -215,6 +215,7 @@ public interface Names {
     String MANAGEMENT_INTERFACE = ""Management Interface"";
     String MANAGEMENT_CONSOLE = ""Management Console"";
     String MANAGEMENT_MODEL = ""Management Model"";
+    String MANAGEMENT_OPERATIONS = ""Management Operations"";
     String MAPPERS_DECODERS = ""Mappers / Decoders"";
     String MAPPING_MODULE = ""Mapping Module"";
     String MASTER = ""Master"";",2018-12-27T19:52:32Z,112
"@@ -281,7 +281,7 @@ public interface Previews extends ClientBundleWithLookup {
     ExternalTextResource managementExtensions();
 
 
-    // ------------------------------------------------------ runtime
+    // ------------------------------------------------------ patching
 
     @Source(""previews/patching/patching.html"")
     ExternalTextResource patching();
@@ -324,6 +324,9 @@ public interface Previews extends ClientBundleWithLookup {
     @Source(""previews/runtime/logfiles.html"")
     ExternalTextResource runtimeLogFiles();
 
+    @Source(""previews/runtime/management-operations.html"")
+    ExternalTextResource runtimeManagementOperations();
+
     @Source(""previews/runtime/messaging-server.html"")
     ExternalTextResource runtimeMessagingServer();
 ",2018-12-27T19:52:32Z,134
"@@ -330,6 +330,8 @@ noWrite=No write behaviour has been defined for this store. Please choose a beha
 obtainCertificateError=There was an error to obtain the certificate for alias <strong>{0}</strong> of Key Store <strong>{1}</strong>. Cause: {2}
 obtainCertificateSuccess=The certificate identified by alias <strong>{0}</strong> of Key Store <strong>{1}</strong> was obtained with success.
 operationLabel=<p>Operation: <strong>{0}</strong></p>
+operationHost=<p>Host: <strong>{0}</strong></p>
+operationServer=<p>Server: <strong>{0}</strong></p>
 operations={0, number} operations
 pageNotFound=Page <strong>{0}</strong> not found.
 patchAddError=There is an error installing patch {0}. Reason: {1}",2018-12-27T19:52:32Z,94
"@@ -326,6 +326,8 @@ noPatchesForHost=N\u00e3o h\u00e1 corre\u00e7\u00f5es instaladas para este servi
 obtainCertificateError=Ocorreu um erro ao obter o certificado para o alias <strong>{0}</strong> de armazenamento de chaves <strong>{1}</strong>. Causa: {2}
 obtainCertificateSuccess=O certificado identificado pelo alias <strong>{0}</strong> de armazenamento de chaves <strong>{1}</strong> foi obtido com \u00EAxito.
 operationLabel=<p>Opera\u00E7\u00E3o: <strong>{0}</strong></p>
+operationHost=<p>Host: <strong>{0}</strong></p>
+operationServer=<p>Server: <strong>{0}</strong></p>
 operations={0, number} opera\u00E7\u00F5es
 pageNotFound=P\u00E1gina <strong>{0}</strong> n\u00E3o encontrada.
 patchAddError=Ocorreu um erro ao instalar o patch {0}. Motivo: {1}",2018-12-27T19:52:32Z,94
"@@ -0,0 +1,5 @@
+<p>A management operation is an operation that is performed on the ${build.shortName} and is related to administration scope. The HTTP handling related to application usage (ejb, rest, jms, etc) are not registered as a management operation.</p>
+<p>Adding a deployment, changing of datasource's password, increasing thread-pools are examples of management operations.</p>
+<p>There are management operations that needs exclusive locks to write to resources, if this exlcusive lock is held more than 15s, it is considered a non progressing operation and it will be reported in this view.</p>
+<p>The management operations view, allows the administrator to list all running management operations of a standalone server or all hosts and servers of the domain. It also allows to cancel any active management operation or cancel all the non progressing operations.</p>
+",2018-12-27T19:52:32Z,253
"@@ -19,7 +19,7 @@
     ""javascript-auto-complete"": ""1.0.4"",
     ""jquery"": ""~2.2.4"",
     ""jstree"": ""~3.3.3"",
-    ""patternfly"": ""~3.23.0"",
+    ""patternfly"": ""~3.23.1"",
     ""tagmanager"": ""~3.0.2"",
     ""zeroclipboard"": ""^2.2.0""
   },",2017-03-31T08:41:08Z,213
"@@ -17,7 +17,6 @@
 
 import javax.inject.Inject;
 
-import com.google.gwt.user.client.Window;
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.client.PresenterWidget;
 import com.gwtplatform.mvp.client.proxy.PlaceManager;
@@ -29,6 +28,7 @@
 import org.jboss.hal.client.tools.MacroOptionsDialog;
 import org.jboss.hal.config.Endpoints;
 import org.jboss.hal.config.Environment;
+import org.jboss.hal.config.Settings;
 import org.jboss.hal.config.semver.Version;
 import org.jboss.hal.core.expression.ExpressionDialog;
 import org.jboss.hal.core.expression.ExpressionResolver;
@@ -45,8 +45,6 @@
 import org.jboss.hal.spi.Message;
 import org.jboss.hal.spi.MessageEvent;
 
-import static org.jboss.hal.resources.Names.NYI;
-
 /**
  * @author Harald Pehl
  */
@@ -66,6 +64,7 @@ public interface MyView extends HalView, HasPresenter<FooterPresenter> {
 
     private final Environment environment;
     private final PlaceManager placeManager;
+    private final Settings settings;
     private final Macros macros;
     private final ExpressionResolver expressionResolver;
     private final Resources resources;
@@ -80,12 +79,14 @@ public FooterPresenter(final EventBus eventBus,
             final Environment environment,
             final Endpoints endpoints,
             final PlaceManager placeManager,
+            final Settings settings,
             final Macros macros,
             final ExpressionResolver expressionResolver,
             final Resources resources) {
         super(eventBus, view);
         this.environment = environment;
         this.placeManager = placeManager;
+        this.settings = settings;
         this.macros = macros;
         this.expressionResolver = expressionResolver;
         this.resources = resources;
@@ -167,6 +168,6 @@ public void onMacroFinished(final MacroFinishedEvent event) {
     }
 
     void onSettings() {
-        Window.alert(NYI);
+        new SettingsDialog(environment, settings, resources).show();
     }
 }",2017-03-31T08:41:08Z,102
"@@ -378,15 +378,15 @@ public void onRolesChanged(final RolesChangedEvent event) {
     }
 
     void runAs(final String role) {
-        DialogFactory.showConfirmation(resources.constants().runAs(),
+        DialogFactory.showConfirmation(resources.constants().runAsRoleTitle(),
                 resources.messages().reloadSettings(), () -> {
                     settings.set(RUN_AS, role);
                     Browser.getWindow().getLocation().reload();
                 });
     }
 
     void clearRunAs() {
-        DialogFactory.showConfirmation(resources.constants().runAs(),
+        DialogFactory.showConfirmation(resources.constants().clearRunAsTitle(),
                 resources.messages().reloadSettings(), () -> {
                     settings.set(RUN_AS, null);
                     Browser.getWindow().getLocation().reload();",2017-03-31T08:41:08Z,95
"@@ -0,0 +1,107 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.skeleton;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import com.google.gwt.core.client.GWT;
+import elemental.client.Browser;
+import org.jboss.hal.ballroom.dialog.DialogFactory;
+import org.jboss.hal.ballroom.form.NumberSelectItem;
+import org.jboss.hal.config.Environment;
+import org.jboss.hal.config.Settings;
+import org.jboss.hal.config.Settings.Key;
+import org.jboss.hal.core.mbui.dialog.ModifyResourceDialog;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.Property;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Resources;
+
+import static java.util.Comparator.naturalOrder;
+import static org.jboss.hal.config.Settings.Key.COLLECT_USER_DATA;
+import static org.jboss.hal.config.Settings.Key.LOCALE;
+import static org.jboss.hal.config.Settings.Key.PAGE_LENGTH;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.ALLOWED;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.ATTRIBUTES;
+
+/**
+ * @author Harald Pehl
+ */
+class SettingsDialog {
+
+    private static final SettingsResources RESOURCES = GWT.create(SettingsResources.class);
+
+    private final Settings settings;
+    private final ModelNodeForm<ModelNode> form;
+    private final ModifyResourceDialog dialog;
+    private final boolean multipleLocales;
+    private boolean changes;
+
+    SettingsDialog(final Environment environment, final Settings settings, final Resources resources) {
+        this.settings = settings;
+        this.changes = false;
+
+        List<String> locales = environment.getLocales();
+        locales.sort(naturalOrder());
+        multipleLocales = locales.size() > 1;
+
+        Metadata metadata = Metadata.staticDescription(RESOURCES.settings());
+        if (multipleLocales) {
+            Property locale = metadata.getDescription().findAttribute(ATTRIBUTES, LOCALE.key());
+            if (locale != null && locale.getValue().hasDefined(ALLOWED)) {
+                locales.forEach(l -> locale.getValue().get(ALLOWED).add(l));
+            }
+        }
+
+        List<String> attributes = new ArrayList<>();
+        attributes.add(COLLECT_USER_DATA.key());
+        if (multipleLocales) {
+            attributes.add(LOCALE.key());
+        }
+        attributes.add(PAGE_LENGTH.key());
+        form = new ModelNodeForm.Builder<>(Ids.SETTINGS_FORM, metadata)
+                .include(attributes)
+                .customFormItem(PAGE_LENGTH.key(),
+                        attributeDescription -> new NumberSelectItem(PAGE_LENGTH.key(), new long[]{10, 20, 50}))
+                .build();
+
+        dialog = new ModifyResourceDialog(resources.constants().settings(), form,
+                (form, changedValues) -> {
+                    changedValues.forEach((key, value) -> settings.set(Key.from(key), value));
+                    changes = !changedValues.isEmpty();
+                },
+                () -> {
+                    if (changes) {
+                        DialogFactory.showConfirmation(resources.constants().settings(),
+                                resources.messages().reloadSettings(),
+                                () -> Browser.getWindow().getLocation().reload());
+                    }
+                });
+    }
+
+    void show() {
+        ModelNode modelNode = new ModelNode();
+        modelNode.get(COLLECT_USER_DATA.key()).set(settings.get(COLLECT_USER_DATA).asBoolean());
+        if (multipleLocales) {
+            modelNode.get(LOCALE.key()).set(settings.get(LOCALE).value());
+        }
+        modelNode.get(PAGE_LENGTH.key()).set(settings.get(PAGE_LENGTH).asInt(Settings.DEFAULT_PAGE_LENGTH));
+        dialog.show(modelNode);
+    }
+}",2017-03-31T08:41:08Z,254
"@@ -0,0 +1,28 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.skeleton;
+
+import com.google.gwt.resources.client.ClientBundle;
+import com.google.gwt.resources.client.TextResource;
+
+/**
+ * @author Harald Pehl
+ */
+public interface SettingsResources extends ClientBundle {
+
+    @Source(""settings.base64"")
+    TextResource settings();
+}",2017-03-31T08:41:08Z,255
"@@ -0,0 +1 @@
+bwAAAAIAB2NvbW1lbnRzALxUaGlzIGZpbGUgaXMgbm90IHVzZWQhIEl0J3MganVzdCBoZXJlIHRvIGdlbmVyYXRlIHRoZSBiYXNlNjQgZW5jb2RlZCB2ZXJzaW9uIHVzaW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9oYWwvZG1yLmNtZC4gUGxlYXNlIGtlZXAgdGhlIGF0dHJpYnV0ZXMgaW4gc3luYyB3aXRoIG9yZy5qYm9zcy5oYWwuY29uZmlnLlNldHRpbmdzLktleQAKYXR0cmlidXRlc28AAAADABFjb2xsZWN0LXVzZXItZGF0YW8AAAADAAR0eXBldFoAC2Rlc2NyaXB0aW9ucwDHRW5hYmxlIFVzYWdlIERhdGEgQ29sbGVjdGlvbjogVGhlIEFkbWluIENvbnNvbGUgaGFzIHRoZSBjYXBhYmlsaXR5IHRvIGNvbGxlY3QgdXNhZ2UgZGF0YSB2aWEgR29vZ2xlIEFuYWx5dGljcy4gVGhpcyBkYXRhIHdpbGwgYmUgdXNlZCBleGNsdXNpdmVseSBieSBSZWQgSGF0IHRvIGltcHJvdmUgdGhlIGNvbnNvbGUgaW4gZnV0dXJlIHJlbGVhc2VzLgAIbmlsbGFibGVaAQAGbG9jYWxlbwAAAAQABHR5cGV0cwALZGVzY3JpcHRpb25zABxUaGUgdXNlciBpbnRlcmZhY2UgbGFuZ3VhZ2UuAAhuaWxsYWJsZVoAAAdhbGxvd2VkbAAAAAAAC3BhZ2UtbGVuZ3RobwAAAAMABHR5cGV0SQALZGVzY3JpcHRpb25zADdUaGUgbnVtYmVyIG9mIGl0ZW1zIHdoaWNoIGFyZSBkaXNwbGF5ZWQgaW4gdGFibGUgcGFnZXMuAAhuaWxsYWJsZVoB",2017-03-31T08:41:08Z,256
"@@ -0,0 +1,21 @@
+{
+    ""comment"" => ""This file is not used! It's just here to generate the base64 encoded version using https://github.com/hal/dmr.cmd. Please keep the attributes in sync with org.jboss.hal.config.Settings.Key"",
+    ""attributes"" => {
+        ""collect-user-data"" => {
+            ""type"" => BOOLEAN,
+            ""description"" => ""Enable Usage Data Collection: The Admin Console has the capability to collect usage data via Google Analytics. This data will be used exclusively by Red Hat to improve the console in future releases."",
+            ""nillable"" => true
+        },
+        ""locale"" => {
+            ""type"" => STRING,
+            ""description"" => ""The user interface language."",
+            ""nillable"" => false,
+            ""allowed"" => [],
+        },
+        ""page-length"" => {
+            ""type"" => INT,
+            ""description"" => ""The number of items which are displayed in table pages."",
+            ""nillable"" => true
+        }
+    }
+}",2017-03-31T08:41:08Z,257
"@@ -115,7 +115,7 @@ public static class Builder {
         private boolean closeIcon;
         private boolean closeOnEsc;
         private boolean fadeIn;
-        private Callback onClose;
+        private Callback closed;
 
         public Builder(final String title) {
             this.title = title;
@@ -221,8 +221,8 @@ public Builder closeOnEsc(boolean closeOnEsc) {
             return this;
         }
 
-        public Builder onClose(Callback onClose) {
-            this.onClose = onClose;
+        public Builder closed(Callback closed) {
+            this.closed = closed;
             return this;
         }
 
@@ -329,14 +329,14 @@ private static void reset() {
     // ------------------------------------------------------ dialog instance
 
     private final boolean closeOnEsc;
-    private final Callback onClose;
+    private final Callback closed;
     private final Map<Integer, ButtonElement> buttons;
     private final List<Attachable> attachables;
 
     Dialog(final Builder builder) {
         reset();
         this.closeOnEsc = builder.closeOnEsc;
-        this.onClose = builder.onClose;
+        this.closed = builder.closed;
         this.buttons = new HashMap<>();
         this.attachables = new ArrayList<>();
 
@@ -412,10 +412,10 @@ public void show() {
      */
     void close() {
         attachables.forEach(Attachable::detach);
-        if (onClose != null) {
-            onClose.execute();
-        }
         $(SELECTOR_ID).modal(""hide"");
+        if (closed != null) {
+            closed.execute();
+        }
     }
 
 ",2017-03-31T08:41:08Z,187
"@@ -37,6 +37,7 @@
 abstract class AbstractAppearance<T> implements Appearance<T> {
 
     static final String LABEL_ELEMENT = ""labelElement"";
+    static final String INPUT_CONTAINER = ""inputContainer"";
     static final Messages MESSAGES = GWT.create(Messages.class);
     protected static final Constants CONSTANTS = GWT.create(Constants.class);
 ",2017-03-31T08:41:08Z,258
"@@ -47,7 +47,6 @@
 @SuppressWarnings(""WeakerAccess"")
 public abstract class EditingAppearance<T> extends AbstractAppearance<T> {
 
-    private static final String INPUT_CONTAINER = ""inputContainer"";
     private static final String EXPRESSION_BUTTON = ""expressionButton"";
     private static final String SUGGEST_BUTTON = ""suggestButton"";
     private static final String PEEK_BUTTON = ""peekButton"";",2017-03-31T08:41:08Z,259
"@@ -39,7 +39,7 @@ private static class NumberReadOnlyAppearance extends ReadOnlyAppearance<Long> {
 
         @Override
         protected String name() {
-            return ""NumberReadOnlyAppearance"";
+            return ""NumberSelectReadOnlyAppearance"";
         }
     }
 
@@ -52,7 +52,7 @@ private static class NumberEditingAppearance extends EditingAppearance<Long> {
 
         @Override
         protected String name() {
-            return ""NumberEditingAppearance"";
+            return ""NumberSelectEditingAppearance"";
         }
 
         @Override",2017-03-31T08:41:08Z,133
"@@ -0,0 +1,261 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.ballroom.form;
+
+import java.util.EnumSet;
+import java.util.HashMap;
+import java.util.Map;
+
+import elemental.dom.Element;
+import elemental.html.ButtonElement;
+import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.hal.ballroom.LabelBuilder;
+import org.jboss.hal.dmr.model.Deprecation;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.UIConstants;
+
+import static org.jboss.gwt.elemento.core.EventType.click;
+import static org.jboss.hal.ballroom.form.Decoration.*;
+import static org.jboss.hal.ballroom.form.Form.State.EDITING;
+import static org.jboss.hal.ballroom.form.Form.State.READONLY;
+import static org.jboss.hal.resources.CSS.*;
+
+/**
+ * A form item to select from a small set of distinct numbers using a button group.
+ *
+ * @author Harald Pehl
+ */
+public class NumberSelectItem extends AbstractFormItem<Long> {
+
+    private static class NumberSelectReadOnlyAppearance extends ReadOnlyAppearance<Long> {
+
+        NumberSelectReadOnlyAppearance() {
+            super(EnumSet.of(DEFAULT, DEPRECATED, HINT, RESTRICTED));
+        }
+
+        @Override
+        protected String name() {
+            return ""NumberSelectReadOnlyAppearance"";
+        }
+    }
+
+
+    private class NumberSelectEditingAppearance extends AbstractAppearance<Long> {
+
+        private static final String BUTTON_GROUP = ""buttonGroup"";
+        private static final String NUMBER = ""number"";
+
+        private final Map<Long, ButtonElement> buttons;
+        private final Element buttonGroup;
+        private final Element helpBlock;
+        private final Element inputContainer;
+        private final Element root;
+
+        NumberSelectEditingAppearance(long[] numbers) {
+            super(EnumSet.of(DEPRECATED, ENABLED, INVALID, REQUIRED));
+            this.buttons = new HashMap<>();
+
+            // @formatter:off
+            Elements.Builder builder = new Elements.Builder()
+                .div().css(formGroup)
+                    .label().css(controlLabel, halFormLabel).rememberAs(LABEL_ELEMENT).end()
+                    .div().css(halFormInput).rememberAs(INPUT_CONTAINER)
+                        .div().css(btnGroup).attr(UIConstants.ROLE, UIConstants.GROUP).rememberAs(BUTTON_GROUP);
+                            for (long number : numbers) {
+                                String value = String.valueOf(number);
+                                builder.button()
+                                        .data(NUMBER, value)
+                                        .css(btn, btnDefault)
+                                        .on(click, event -> {
+                                            showValue(number);
+                                            modifyValue(number);
+                                        })
+                                        .rememberAs(value)
+                                        .textContent(value)
+                                        .end();
+                                buttons.put(number, builder.referenceFor(value));
+                            }
+                        builder.end()
+                    .end()
+                .end();
+            // @formatter:on
+
+            helpBlock = Appearance.helpBlock();
+            buttonGroup = builder.referenceFor(BUTTON_GROUP);
+            labelElement = builder.referenceFor(LABEL_ELEMENT);
+            inputContainer = builder.referenceFor(INPUT_CONTAINER);
+            root = builder.build();
+        }
+
+        @Override
+        protected String name() {
+            return ""NumberSelectEditingAppearance"";
+        }
+
+        @Override
+        public void attach() {
+            // noop
+        }
+
+        @Override
+        public Element asElement() {
+            return root;
+        }
+
+        @Override
+        public void setId(final String id) {
+            this.id = Ids.build(id, EDITING.name().toLowerCase());
+            root.getDataset().setAt(FORM_ITEM_GROUP, this.id);
+            buttonGroup.setId(this.id);
+            labelElement.setHtmlFor(this.id);
+        }
+
+        @Override
+        public void setName(final String name) {
+            // noop
+        }
+
+        @Override
+        public void showValue(final Long value) {
+            buttons.forEach((number, button) -> {
+                if (number.equals(value)) {
+                    button.getClassList().remove(btnDefault);
+                    button.getClassList().add(btnPrimary);
+                } else {
+                    button.getClassList().remove(btnPrimary);
+                    button.getClassList().add(btnDefault);
+                }
+            });
+        }
+
+        @Override
+        public void clearValue() {
+            buttons.values().forEach(button -> button.getClassList().remove(btnPrimary));
+        }
+
+        @Override
+        <C> void safeApply(final Decoration decoration, final C context) {
+            switch (decoration) {
+
+                case DEPRECATED:
+                    markAsDeprecated((Deprecation) context);
+                    break;
+
+                case ENABLED:
+                    buttons.values().forEach(button -> button.setDisabled(false));
+                    break;
+
+                case INVALID:
+                    helpBlock.setTextContent(String.valueOf(context));
+                    root.getClassList().add(hasError);
+                    inputContainer.appendChild(helpBlock);
+                    break;
+
+                case REQUIRED:
+                    markAsRequired();
+                    break;
+
+                // unsupported
+                case DEFAULT:
+                case EXPRESSION:
+                case HINT:
+                case SENSITIVE:
+                case SUGGESTIONS:
+                    break;
+            }
+        }
+
+        @Override
+        void safeUnapply(final Decoration decoration) {
+            switch (decoration) {
+
+                case DEPRECATED:
+                    clearDeprecation();
+                    break;
+
+                case ENABLED:
+                    buttons.values().forEach(button -> button.setDisabled(true));
+                    break;
+
+                case INVALID:
+                    root.getClassList().remove(hasError);
+                    Elements.failSafeRemove(inputContainer, helpBlock);
+                    break;
+
+                case REQUIRED:
+                    clearRequired();
+                    break;
+
+                // unsupported
+                case DEFAULT:
+                case EXPRESSION:
+                case HINT:
+                case SENSITIVE:
+                case SUGGESTIONS:
+                    break;
+            }
+        }
+
+        @Override
+        public int getTabIndex() {
+            return buttonGroup.getTabIndex();
+        }
+
+        @Override
+        public void setAccessKey(final char key) {
+            // noop
+        }
+
+        @Override
+        public void setFocus(final boolean focused) {
+            if (focused) {
+                buttonGroup.focus();
+            } else {
+                buttonGroup.blur();
+            }
+        }
+
+        @Override
+        public void setTabIndex(final int index) {
+            buttonGroup.setTabIndex(index);
+        }
+    }
+
+
+    public NumberSelectItem(final String name, final long[] numbers) {
+        this(name, new LabelBuilder().label(name), numbers);
+    }
+
+    public NumberSelectItem(final String name, final String label, final long[] numbers) {
+        super(name, label, null);
+
+        // read-only appearance
+        addAppearance(READONLY, new NumberSelectReadOnlyAppearance());
+
+        // editing appearance
+        addAppearance(EDITING, new NumberSelectEditingAppearance(numbers));
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return false;
+    }
+
+    @Override
+    public boolean supportsExpressions() {
+        return false;
+    }
+}",2017-03-31T08:41:08Z,260
"@@ -40,8 +40,6 @@
  */
 abstract class SelectBoxEditingAppearance<T> extends AbstractAppearance<T> {
 
-    private static final String INPUT_CONTAINER = ""inputContainer"";
-
     final SelectElement selectElement;
     private final Element root;
     private final Element inputContainer;",2017-03-31T08:41:08Z,261
"@@ -27,20 +27,39 @@
  */
 public class Settings {
 
+    @SuppressWarnings(""DuplicateStringLiteralInspection"")
     public enum Key {
         COLLECT_USER_DATA(""collect-user-data"", true),
         LOCALE(""locale"", true),
         PAGE_LENGTH(""page-length"", true),
         RUN_AS(""run-as"", false);
 
+        public static Key from(@NonNls String key) {
+            switch (key) {
+                case ""collect-user-data"":
+                    return COLLECT_USER_DATA;
+                case ""locale"":
+                    return LOCALE;
+                case ""page-length"":
+                    return PAGE_LENGTH;
+                case ""run-as"":
+                    return RUN_AS;
+                default:
+                    return null;
+            }
+        }
+
         private final String key;
         private final boolean persistent;
 
         Key(@NonNls final String key, final boolean persistent) {
-
             this.key = key;
             this.persistent = persistent;
         }
+
+        public String key() {
+            return key;
+        }
     }
 
 
@@ -74,7 +93,7 @@ public String value() {
 
 
     @Inject
-    public static Settings INSTANCE;
+    public static Settings INSTANCE; // use only if no DI is available!
     public static final String DEFAULT_LOCALE = ""en"";
     public static final int DEFAULT_PAGE_LENGTH = 10;
     private static final int EXPIRES = 365; // days
@@ -86,7 +105,7 @@ public Settings() {
     }
 
     public <T> void load(Key key, T defaultValue) {
-        String value = Cookies.get(key(key));
+        String value = Cookies.get(cookieName(key));
         if (value == null) {
             if (defaultValue != null) {
                 value = String.valueOf(defaultValue);
@@ -102,17 +121,17 @@ public Value get(Key key) {
     public <T> void set(Key key, T value) {
         values.put(key, new Value(value != null ? String.valueOf(value) : null));
         if (value == null) {
-            Cookies.remove(key(key));
+            Cookies.remove(cookieName(key));
         } else {
             if (key.persistent) {
-                Cookies.set(key(key), String.valueOf(value), EXPIRES);
+                Cookies.set(cookieName(key), String.valueOf(value), EXPIRES);
             } else {
-                Cookies.set(key(key), String.valueOf(value));
+                Cookies.set(cookieName(key), String.valueOf(value));
             }
         }
     }
 
-    private String key(Key key) {
+    private String cookieName(Key key) {
         return Ids.build(Ids.COOKIE_PREFIX, key.key);
     }
 }",2017-03-31T08:41:08Z,262
"@@ -45,17 +45,23 @@ public interface Callback {
      * Callback#onModify(Form, Map)}.
      */
     public ModifyResourceDialog(final String title, final Form<ModelNode> form, final Callback callback) {
+        this(title, form, callback, null);
+    }
+
+    public ModifyResourceDialog(final String title, final Form<ModelNode> form, final Callback callback,
+            org.jboss.hal.spi.Callback closed) {
         form.setSaveCallback((f, changedValues) -> saveForm(callback, f, changedValues));
-        init(title, form);
+        init(title, form, closed);
     }
 
-    private void init(final String title, final Form<ModelNode> form) {
+    private void init(final String title, final Form<ModelNode> form, final org.jboss.hal.spi.Callback closed) {
         this.form = form;
         this.dialog = new Dialog.Builder(title)
                 .add(form.asElement())
                 .saveCancel(form::save)
                 .size(Size.MEDIUM)
                 .closeOnEsc(true)
+                .closed(closed)
                 .build();
         this.dialog.registerAttachable(form);
     }",2017-03-31T08:41:08Z,263
"@@ -67,6 +67,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String clear();
     String clearMessages();
     String clearRunAs();
+    String clearRunAsTitle();
     String clone();
     String cloneProfile();
     String close();
@@ -357,6 +358,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String role();
     String roles();
     String runAs();
+    String runAsRoleTitle();
     String running();
 
     String sameOrigin();",2017-03-31T08:41:08Z,100
"@@ -460,6 +460,7 @@ public interface Ids {
     String SERVER_STATUS_MAIN_ATTRIBUTES_FORM = build(SERVER_STATUS, ""main-attributes"", FORM_SUFFIX);
     String SERVER_STATUS_SYSTEM_PROPERTIES_ENTRY = build(SERVER_STATUS, ""system-properties"", ENTRY_SUFFIX);
     String SERVER_STATUS_SYSTEM_PROPERTIES_TABLE = build(SERVER_STATUS, ""system-properties"", TABLE_SUFFIX);
+    String SETTINGS_FORM = ""settings-form"";
     String SOCKET_BINDING_GROUP = ""socket-binding-group"";
     String SOCKET_BINDING_GROUP_ADD = build(SOCKET_BINDING_GROUP, ADD_SUFFIX);
     String SOCKET_BINDING_GROUP_REFRESH = build(SOCKET_BINDING_GROUP, REFRESH_SUFFIX);",2017-03-31T08:41:08Z,111
"@@ -26,6 +26,7 @@ chooseTemplate=Choose Template
 clear=Clear
 clearMessages=Clear Messages
 clearRunAs=Clear run as role
+clearRunAsTitle=Clear Run as Role
 clone=Clone
 cloneProfile=Clone Profile
 close=Close
@@ -301,6 +302,7 @@ review=Review
 role=Role
 roles=Roles
 runAs=Run as
+runAsRoleTitle=Run as Role
 running=Running
 sameOrigin=Bundled console
 save=Save",2017-03-31T08:41:08Z,100
"@@ -101,6 +101,8 @@
 import org.jboss.hal.client.configuration.subsystem.messaging.RemoteActiveMQPresenter;
 import org.jboss.hal.client.configuration.subsystem.microprofile.Mbui_MicroProfileConfigView;
 import org.jboss.hal.client.configuration.subsystem.microprofile.MicroProfileConfigPresenter;
+import org.jboss.hal.client.configuration.subsystem.microprofile.MicroProfileMetricsPresenter;
+import org.jboss.hal.client.configuration.subsystem.microprofile.MicroProfileMetricsView;
 import org.jboss.hal.client.configuration.subsystem.modcluster.Mbui_ModclusterView;
 import org.jboss.hal.client.configuration.subsystem.modcluster.ModclusterPresenter;
 import org.jboss.hal.client.configuration.subsystem.remoting.Mbui_RemotingView;
@@ -512,6 +514,11 @@ protected void configure() {
                 MicroProfileHealthView.class,
                 MicroProfileHealthPresenter.MyProxy.class);
 
+        bindPresenter(MicroProfileMetricsPresenter.class,
+                MicroProfileMetricsPresenter.MyView.class,
+                MicroProfileMetricsView.class,
+                MicroProfileMetricsPresenter.MyProxy.class);
+
         bindPresenter(ModclusterPresenter.class,
                 ModclusterPresenter.MyView.class,
                 Mbui_ModclusterView.class,",2018-11-14T12:11:44Z,44
"@@ -19,7 +19,9 @@
 
 interface AddressTemplates {
 
-    String MICROPROFILE_CONFIG_SUBSYSTEM_ADDRESS = ""/{selected.profile}/subsystem=microprofile-config-smallrye"";
+    String MICRO_PROFILE_CONFIG_ADDRESS = ""/{selected.profile}/subsystem=microprofile-config-smallrye"";
+    String MICRO_PROFILE_METRICS_ADDRESS = ""/{selected.profile}/subsystem=microprofile-metrics-smallrye"";
 
-    AddressTemplate MICROPROFILE_CONFIG_SUBSYSTEM_TEMPLATE = AddressTemplate.of(MICROPROFILE_CONFIG_SUBSYSTEM_ADDRESS);
+    AddressTemplate MICRO_PROFILE_CONFIG_TEMPLATE = AddressTemplate.of(MICRO_PROFILE_CONFIG_ADDRESS);
+    AddressTemplate MICRO_PROFILE_METRICS_TEMPLATE = AddressTemplate.of(MICRO_PROFILE_METRICS_ADDRESS);
 }",2018-11-14T12:11:44Z,264
"@@ -21,7 +21,6 @@
 import com.gwtplatform.mvp.client.annotations.NameToken;
 import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
 import com.gwtplatform.mvp.client.proxy.ProxyPlace;
-import org.jboss.hal.core.ComplexAttributeOperations;
 import org.jboss.hal.core.CrudOperations;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderPath;
@@ -35,8 +34,8 @@
 import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.spi.Requires;
 
-import static org.jboss.hal.client.configuration.subsystem.microprofile.AddressTemplates.MICROPROFILE_CONFIG_SUBSYSTEM_ADDRESS;
-import static org.jboss.hal.client.configuration.subsystem.microprofile.AddressTemplates.MICROPROFILE_CONFIG_SUBSYSTEM_TEMPLATE;
+import static org.jboss.hal.client.configuration.subsystem.microprofile.AddressTemplates.MICRO_PROFILE_CONFIG_ADDRESS;
+import static org.jboss.hal.client.configuration.subsystem.microprofile.AddressTemplates.MICRO_PROFILE_CONFIG_TEMPLATE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.MICROPROFILE_CONFIG_SMALLRYE;
 
 public class MicroProfileConfigPresenter
@@ -46,7 +45,6 @@ public class MicroProfileConfigPresenter
     private final CrudOperations crud;
     private final FinderPathFactory finderPathFactory;
     private final StatementContext statementContext;
-    private final ComplexAttributeOperations ca;
 
     @Inject
     public MicroProfileConfigPresenter(EventBus eventBus,
@@ -55,13 +53,11 @@ public MicroProfileConfigPresenter(EventBus eventBus,
             Finder finder,
             CrudOperations crud,
             FinderPathFactory finderPathFactory,
-            StatementContext statementContext,
-            ComplexAttributeOperations ca) {
+            StatementContext statementContext) {
         super(eventBus, view, myProxy, finder);
         this.crud = crud;
         this.finderPathFactory = finderPathFactory;
         this.statementContext = statementContext;
-        this.ca = ca;
     }
 
     @Override
@@ -72,7 +68,7 @@ protected void onBind() {
 
     @Override
     public ResourceAddress resourceAddress() {
-        return MICROPROFILE_CONFIG_SUBSYSTEM_TEMPLATE.resolve(statementContext);
+        return MICRO_PROFILE_CONFIG_TEMPLATE.resolve(statementContext);
     }
 
     @Override
@@ -82,15 +78,15 @@ public FinderPath finderPath() {
 
     @Override
     protected void reload() {
-        crud.readRecursive(MICROPROFILE_CONFIG_SUBSYSTEM_TEMPLATE.resolve(statementContext),
+        crud.readRecursive(MICRO_PROFILE_CONFIG_TEMPLATE.resolve(statementContext),
                 result -> getView().update(result));
     }
 
 
     // @formatter:off
     @ProxyCodeSplit
-    @NameToken(NameTokens.MICROPROFILE_CONFIG)
-    @Requires(MICROPROFILE_CONFIG_SUBSYSTEM_ADDRESS)
+    @NameToken(NameTokens.MICRO_PROFILE_CONFIG)
+    @Requires(MICRO_PROFILE_CONFIG_ADDRESS)
     public interface MyProxy extends ProxyPlace<MicroProfileConfigPresenter> {
     }
 ",2018-11-14T12:11:44Z,265
"@@ -0,0 +1,97 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.microprofile;
+
+import javax.inject.Inject;
+
+import com.google.web.bindery.event.shared.EventBus;
+import com.gwtplatform.mvp.client.annotations.NameToken;
+import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
+import com.gwtplatform.mvp.client.proxy.ProxyPlace;
+import org.jboss.hal.core.CrudOperations;
+import org.jboss.hal.core.finder.Finder;
+import org.jboss.hal.core.finder.FinderPath;
+import org.jboss.hal.core.finder.FinderPathFactory;
+import org.jboss.hal.core.mvp.ApplicationFinderPresenter;
+import org.jboss.hal.core.mvp.HalView;
+import org.jboss.hal.core.mvp.HasPresenter;
+import org.jboss.hal.core.mvp.SupportsExpertMode;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.meta.token.NameTokens;
+import org.jboss.hal.spi.Requires;
+
+import static org.jboss.hal.client.configuration.subsystem.microprofile.AddressTemplates.MICRO_PROFILE_METRICS_ADDRESS;
+import static org.jboss.hal.client.configuration.subsystem.microprofile.AddressTemplates.MICRO_PROFILE_METRICS_TEMPLATE;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.MICROPROFILE_METRICS_SMALLRYE;
+
+public class MicroProfileMetricsPresenter
+        extends ApplicationFinderPresenter<MicroProfileMetricsPresenter.MyView, MicroProfileMetricsPresenter.MyProxy>
+        implements SupportsExpertMode {
+
+    private final CrudOperations crud;
+    private final FinderPathFactory finderPathFactory;
+    private final StatementContext statementContext;
+
+    @Inject
+    public MicroProfileMetricsPresenter(EventBus eventBus,
+            MyView view,
+            MyProxy myProxy,
+            Finder finder,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext) {
+        super(eventBus, view, myProxy, finder);
+        this.crud = crud;
+        this.finderPathFactory = finderPathFactory;
+        this.statementContext = statementContext;
+    }
+
+    @Override
+    protected void onBind() {
+        super.onBind();
+        getView().setPresenter(this);
+    }
+
+    @Override
+    public ResourceAddress resourceAddress() {
+        return MICRO_PROFILE_METRICS_TEMPLATE.resolve(statementContext);
+    }
+
+    @Override
+    public FinderPath finderPath() {
+        return finderPathFactory.configurationSubsystemPath(MICROPROFILE_METRICS_SMALLRYE);
+    }
+
+    @Override
+    protected void reload() {
+        crud.read(MICRO_PROFILE_METRICS_TEMPLATE, result -> getView().update(result));
+    }
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @Requires(MICRO_PROFILE_METRICS_ADDRESS)
+    @NameToken(NameTokens.MICRO_PROFILE_METRICS)
+    public interface MyProxy extends ProxyPlace<MicroProfileMetricsPresenter> {
+    }
+
+    public interface MyView extends HalView, HasPresenter<MicroProfileMetricsPresenter> {
+        void update(ModelNode payload);
+    }
+    // @formatter:on
+}",2018-11-14T12:11:44Z,266
"@@ -0,0 +1,66 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.microprofile;
+
+import javax.inject.Inject;
+
+import elemental2.dom.HTMLElement;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.core.mvp.HalViewImpl;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.MetadataRegistry;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+
+import static org.jboss.gwt.elemento.core.Elements.h;
+import static org.jboss.gwt.elemento.core.Elements.p;
+import static org.jboss.hal.ballroom.LayoutBuilder.column;
+import static org.jboss.hal.ballroom.LayoutBuilder.row;
+import static org.jboss.hal.client.configuration.subsystem.microprofile.AddressTemplates.MICRO_PROFILE_METRICS_TEMPLATE;
+
+public class MicroProfileMetricsView extends HalViewImpl implements MicroProfileMetricsPresenter.MyView {
+
+    private final Form<ModelNode> form;
+    private MicroProfileMetricsPresenter presenter;
+
+    @Inject
+    public MicroProfileMetricsView(MetadataRegistry metadataRegistry) {
+        Metadata metadata = metadataRegistry.lookup(MICRO_PROFILE_METRICS_TEMPLATE);
+        form = new ModelNodeForm.Builder<>(Ids.MICRO_PROFILE_METRICS_FORM, metadata)
+                .build();
+        registerAttachable(form);
+
+        HTMLElement root = row()
+                .add(column()
+                        .add(h(1).textContent(Names.MICROPROFILE_METRICS))
+                        .add(p().textContent(metadata.getDescription().getDescription()))
+                        .add(form))
+                .asElement();
+        initElement(root);
+    }
+
+    @Override
+    public void setPresenter(MicroProfileMetricsPresenter presenter) {
+        this.presenter = presenter;
+    }
+
+    @Override
+    public void update(ModelNode payload) {
+        form.view(payload);
+    }
+}",2018-11-14T12:11:44Z,267
"@@ -42,7 +42,7 @@
 import static org.jboss.hal.client.runtime.subsystem.microprofile.health.AddressTemplates.MICROPROFILE_HEALTH_ADDRESS;
 import static org.jboss.hal.client.runtime.subsystem.microprofile.health.AddressTemplates.MICROPROFILE_HEALTH_TEMPLATE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.CHECK;
-import static org.jboss.hal.resources.Ids.MICROPROFILE_HEALTH;
+import static org.jboss.hal.resources.Ids.MICRO_PROFILE_HEALTH;
 
 public class MicroProfileHealthPresenter
         extends ApplicationFinderPresenter<MicroProfileHealthPresenter.MyView, MicroProfileHealthPresenter.MyProxy>
@@ -84,7 +84,7 @@ public ResourceAddress resourceAddress() {
     @Override
     public FinderPath finderPath() {
         return finderPathFactory.runtimeServerPath()
-                .append(Ids.RUNTIME_SUBSYSTEM, MICROPROFILE_HEALTH,
+                .append(Ids.RUNTIME_SUBSYSTEM, MICRO_PROFILE_HEALTH,
                         resources.constants().monitor(), Names.MICROPROFILE_HEALTH);
     }
 
@@ -104,7 +104,7 @@ StatementContext getStatementContext() {
     // @formatter:off
     @ProxyCodeSplit
     @Requires(MICROPROFILE_HEALTH_ADDRESS)
-    @NameToken(NameTokens.MICROPROFILE_HEALTH)
+    @NameToken(NameTokens.MICRO_PROFILE_HEALTH)
     public interface MyProxy extends ProxyPlace<MicroProfileHealthPresenter> {
     }
 ",2018-11-14T12:11:44Z,122
"@@ -39,7 +39,7 @@
 import static org.jboss.hal.ballroom.LayoutBuilder.row;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.resources.Ids.FORM;
-import static org.jboss.hal.resources.Ids.MICROPROFILE_HEALTH;
+import static org.jboss.hal.resources.Ids.MICRO_PROFILE_HEALTH;
 import static org.jboss.hal.resources.Ids.TABLE;
 
 public class MicroProfileHealthView extends HalViewImpl implements MicroProfileHealthPresenter.MyView {
@@ -58,13 +58,13 @@ public MicroProfileHealthView(Resources resources, MicroProfileHealthCheckResour
 
         Metadata metadata = Metadata.staticDescription(mpCheckResource.checksOperationDescription());
 
-        checkTable = new ModelNodeTable.Builder<>(Ids.build(MICROPROFILE_HEALTH, TABLE), metadata)
+        checkTable = new ModelNodeTable.Builder<>(Ids.build(MICRO_PROFILE_HEALTH, TABLE), metadata)
                 .button(resources.constants().refresh(), table -> presenter.reload())
                 .column(Names.NAME, (cell, type, row, meta) -> row.get(NAME).asString())
                 .column(Names.STATE, (cell, type, row, meta) -> row.get(STATE).asString())
                 .build();
 
-        checkForm = new ModelNodeForm.Builder<>(Ids.build(MICROPROFILE_HEALTH, FORM), metadata)
+        checkForm = new ModelNodeForm.Builder<>(Ids.build(MICRO_PROFILE_HEALTH, FORM), metadata)
                 .includeRuntime()
                 .readOnly()
                 .unsorted()",2018-11-14T12:11:44Z,123
"@@ -135,8 +135,13 @@ public Subsystems(Resources resources) {
                 .build());
         addConfiguration(new SubsystemMetadata.Builder(MICROPROFILE_CONFIG_SMALLRYE, Names.MICROPROFILE_CONFIG)
                 .subtitle(Names.SMALLRYE)
-                .token(NameTokens.MICROPROFILE_CONFIG)
-                .preview(resources.previews().configurationMicroprofileConfig())
+                .token(NameTokens.MICRO_PROFILE_CONFIG)
+                .preview(resources.previews().configurationMicroProfileConfig())
+                .build());
+        addConfiguration(new SubsystemMetadata.Builder(MICROPROFILE_METRICS_SMALLRYE, Names.MICROPROFILE_METRICS)
+                .subtitle(Names.SMALLRYE)
+                .token(NameTokens.MICRO_PROFILE_METRICS)
+                .preview(resources.previews().configurationMicroProfileMetrics())
                 .build());
         addConfiguration(new SubsystemMetadata.Builder(MODCLUSTER, Names.MODCLUSTER)
                 .nextColumn(Ids.MODCLUSTER_PROXY)
@@ -243,7 +248,7 @@ public Subsystems(Resources resources) {
                 .preview(resources.previews().runtimeMessagingServer())
                 .build());
         addRuntime(new SubsystemMetadata.Builder(MICROPROFILE_HEALTH_SMALLRYE, Names.MICROPROFILE_HEALTH)
-                .token(NameTokens.MICROPROFILE_HEALTH)
+                .token(NameTokens.MICRO_PROFILE_HEALTH)
                 .build());
         addRuntime(new SubsystemMetadata.Builder(TRANSACTIONS, Names.TRANSACTION)
                 .token(NameTokens.TRANSACTIONS_RUNTIME)",2018-11-14T12:11:44Z,37
"@@ -512,6 +512,7 @@ public interface ModelDescriptionConstants {
     String METRIC = ""metric"";
     String MICROPROFILE_CONFIG_SMALLRYE = ""microprofile-config-smallrye"";
     String MICROPROFILE_HEALTH_SMALLRYE = ""microprofile-health-smallrye"";
+    String MICROPROFILE_METRICS_SMALLRYE = ""microprofile-metrics-smallrye"";
     String MIME_MAPPING = ""mime-mapping"";
     String MIN = ""min"";
     String MIN_POOL_SIZE = ""min-pool-size"";",2018-11-14T12:11:44Z,109
"@@ -85,8 +85,9 @@ public interface NameTokens {
     String MESSAGING_SERVER_CLUSTERING = ""messaging-server-clustering"";
     String MESSAGING_SERVER_DESTINATION = ""messaging-server-destination"";
     String MESSAGING_SERVER_HA_POLICY = ""messaging-server-ha-policy"";
-    String MICROPROFILE_CONFIG = ""micro-profile-config"";
-    String MICROPROFILE_HEALTH = ""micro-profile-health"";
+    String MICRO_PROFILE_CONFIG = ""micro-profile-config"";
+    String MICRO_PROFILE_HEALTH = ""micro-profile-health"";
+    String MICRO_PROFILE_METRICS = ""micro-profile-metrics"";
     String MODCLUSTER = ModelDescriptionConstants.MODCLUSTER;
     String MODEL_BROWSER = ""model-browser"";
     String PATCHING = ""patching"";",2018-11-14T12:11:44Z,46
"@@ -547,7 +547,8 @@ public interface Ids {
     String MESSAGING_SERVER_RUNTIME = ""msg-server-r"";
     String MESSAGING_SERVER_RUNTIME_REFRESH = ""msg-server-r-refresh"";
     String MESSAGING_SERVER_SETTINGS = ""msg-server-settings"";
-    String MICROPROFILE_HEALTH = ""microprofile-health"";
+    String MICRO_PROFILE_HEALTH = ""microprofile-health"";
+    String MICRO_PROFILE_METRICS_FORM = ""microprofile-metrics-form"";
     String MODCLUSTER_PROXY = ""modcluster-proxy"";
     String MODCLUSTER_PROXY_ADD = ""modcluster-proxy-add"";
     String MODCLUSTER_PROXY_REFRESH = ""modcluster-proxy-refresh"";",2018-11-14T12:11:44Z,111
"@@ -229,6 +229,7 @@ public interface Names {
     String MESSAGING_REMOTE_ACTIVEMQ = ""Remote ActiveMQ"";
     String MICROPROFILE_CONFIG = ""Microprofile Config"";
     String MICROPROFILE_HEALTH = ""MicroProfile Health"";
+    String MICROPROFILE_METRICS = ""MicroProfile Metrics"";
     String MIME_MAPPING = ""Mime Mapping"";
     String MINIMUM_PERMISSIONS = ""Minimum Permissions"";
     String MISSING_DEPENDENCIES = ""Missing Dependencies"";",2018-11-14T12:11:44Z,112
"@@ -140,7 +140,10 @@ public interface Previews extends ClientBundleWithLookup {
     ExternalTextResource configurationMail();
 
     @Source(""previews/configuration/microprofile-config.html"")
-    ExternalTextResource configurationMicroprofileConfig();
+    ExternalTextResource configurationMicroProfileConfig();
+
+    @Source(""previews/configuration/microprofile-metrics.html"")
+    ExternalTextResource configurationMicroProfileMetrics();
 
     @Source(""previews/configuration/messaging.html"")
     ExternalTextResource configurationMessaging();",2018-11-14T12:11:44Z,134
"@@ -0,0 +1,18 @@
+<!--
+  ~ Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<p>Support Eclipse MicroProfile Metrics in WildFly. The integration uses the
+    <a href=""https://github.com/smallrye/smallrye-metrics/"">SmallRye</a> component to provide the MicroProfile Metrics implementation.
+</p>",2018-11-14T12:11:44Z,268
"@@ -22,6 +22,7 @@ interface AddressTemplates {
     // @formatter:off
     String ELYTRON_SUBSYSTEM_ADDRESS = ""{selected.host}/{selected.server}/subsystem=elytron"";
     AddressTemplate ELYTRON_SUBSYSTEM_TEMPLATE = AddressTemplate.of(ELYTRON_SUBSYSTEM_ADDRESS);
+    AddressTemplate ELYTRON_PROFILE_TEMPLATE = AddressTemplate.of(""{selected.profile}/subsystem=elytron"");
 
     // ------------------------------------------------------ address (a-z)
 ",2018-08-14T22:43:29Z,269
"@@ -36,6 +36,7 @@
 import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.security.Constraint;
+import org.jboss.hal.resources.Constants;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
@@ -66,15 +67,18 @@ public class KeyStoreElement implements IsElement<HTMLElement>, Attachable {
     KeyStoreElement(Resources resources, Metadata metadata) {
 
         LabelBuilder labelBuilder = new LabelBuilder();
+        Constants cons = resources.constants();
         table = new ModelNodeTable.Builder<NamedNode>(id(TABLE), metadata)
-                .button(new Button<>(resources.constants().load(),
-                        table -> presenter.loadKeyStore(table.selectedRow().getName()),
+                .button(new Button<>(cons.load(), table -> presenter.loadKeyStore(table.selectedRow().getName()),
                         Constraint.executable(KEY_STORE_TEMPLATE, LOAD)))
-                .button(new Button<>(resources.constants().store(),
-                        table -> presenter.storeKeyStore(table.selectedRow().getName()),
+                .button(new Button<>(cons.store(), table -> presenter.storeKeyStore(table.selectedRow().getName()),
                         Constraint.executable(KEY_STORE_TEMPLATE, STORE)))
+                .button(new Button<>(cons.generateKeyPair(), table -> generateKeyPair(metadata),
+                        Constraint.executable(KEY_STORE_TEMPLATE, GENERATE_KEY_PAIR)))
+                .button(new Button<>(cons.importCertificate(), table -> importCertificate(metadata),
+                        Constraint.executable(KEY_STORE_TEMPLATE, IMPORT_CERTIFICATE)))
                 .column(NAME, (cell, t, row, meta) -> row.getName())
-                .column(new InlineAction<>(resources.constants().aliases(),
+                .column(new InlineAction<>(cons.aliases(),
                         row -> {
                             selectedKeystore = row.getName();
                             showAliases(metadata.getTemplate(), row.getName());
@@ -94,29 +98,29 @@ public class KeyStoreElement implements IsElement<HTMLElement>, Attachable {
                 .asElement();
 
         aliasesTable = new ModelNodeTable.Builder<>(id(ALIAS, TABLE), metadata)
-                .button(new Button<>(resources.constants().changeAlias(),
-                        table -> changeAlias(metadata, table.selectedRow().asString()),
+                .button(new Button<>(cons.changeAlias(), table -> changeAlias(metadata, table.selectedRow().asString()),
                         Constraint.executable(KEY_STORE_TEMPLATE, CHANGE_ALIAS)))
-                .button(new Button<>(resources.constants().exportCertificate(),
+                .button(new Button<>(cons.exportCertificate(),
                         table -> exportCertificate(metadata, table.selectedRow().asString()),
                         Constraint.executable(KEY_STORE_TEMPLATE, EXPORT_CERTIFICATE)))
-                .button(new Button<>(resources.constants().generateCSR(),
-                        labelBuilder.label(GENERATE_CERTIFICATE_SIGNING_REQUEST),
+                .button(new Button<>(cons.generateCSR(), labelBuilder.label(GENERATE_CERTIFICATE_SIGNING_REQUEST),
                         table -> generateCSR(metadata, table.selectedRow().asString()),
                         Constraint.executable(KEY_STORE_TEMPLATE, GENERATE_CERTIFICATE_SIGNING_REQUEST)))
-                .button(new Button<>(resources.constants().generateKeyPair(),
-                        table -> generateKeyPair(metadata),
-                        Constraint.executable(KEY_STORE_TEMPLATE, GENERATE_KEY_PAIR)))
-                .button(new Button<>(resources.constants().importCertificate(),
-                        table -> importCertificate(metadata),
-                        Constraint.executable(KEY_STORE_TEMPLATE, IMPORT_CERTIFICATE)))
-                .button(new Button<>(resources.constants().removeAlias(),
+                .button(new Button<>(cons.removeAlias(),
                         table -> removeKeyStoreAlias(metadata, table.selectedRow().asString()),
                         Constraint.executable(KEY_STORE_TEMPLATE, REMOVE_ALIAS)))
-                .button(new Button<>(resources.constants().details(),
-                        resources.constants().viewDetailsAlias(),
+                .button(new Button<>(cons.details(), cons.viewDetailsAlias(),
                         table -> readKeystoreAlias(metadata, table.selectedRow().asString()),
                         Constraint.executable(KEY_STORE_TEMPLATE, READ_ALIAS)))
+                .button(new Button<>(cons.obtain(), cons.obtainCertificate(),
+                        table -> obtainCertificate(metadata, table.selectedRow().asString()),
+                        Constraint.executable(KEY_STORE_TEMPLATE, OBTAIN_CERTIFICATE)))
+                .button(new Button<>(cons.revoke(), cons.revokeCertificate(),
+                        table -> revokeCertificate(metadata, table.selectedRow().asString()),
+                        Constraint.executable(KEY_STORE_TEMPLATE, REVOKE_CERTIFICATE)))
+                .button(new Button<>(cons.verifyRenew(), cons.verifyRenewCertificate(),
+                        table -> verifyRenewCertificate(metadata, table.selectedRow().asString()),
+                        Constraint.executable(KEY_STORE_TEMPLATE, SHOULD_RENEW_CERTIFICATE)))
                 .column(ALIAS, (cell, t, row, meta) -> row.asString())
                 .build();
 
@@ -128,15 +132,15 @@ public class KeyStoreElement implements IsElement<HTMLElement>, Attachable {
                 .build();
 
         HTMLElement aliasesSection = section()
-                .add(h(1).textContent(resources.constants().aliases()))
+                .add(h(1).textContent(cons.aliases()))
                 .add(aliasesTable)
                 .add(formAlias)
                 .asElement();
 
         pages = new Pages(id(PAGES), id(PAGE), mainSection);
         pages.addPage(id(PAGE), id(ALIAS, PAGE),
                 () -> Names.KEY_STORE + "": "" + selectedKeystore,
-                () -> resources.constants().aliases(), aliasesSection);
+                () -> cons.aliases(), aliasesSection);
 
         root = section()
                 .add(pages)
@@ -160,23 +164,33 @@ public void attach() {
         // disable table buttons if there is no selected row
         table.enableButton(0, false);
         table.enableButton(1, false);
+        table.enableButton(2, false);
+        table.enableButton(3, false);
 
         aliasesTable.enableButton(0, false);
         aliasesTable.enableButton(1, false);
         aliasesTable.enableButton(2, false);
+        aliasesTable.enableButton(3, false);
+        aliasesTable.enableButton(4, false);
         aliasesTable.enableButton(5, false);
         aliasesTable.enableButton(6, false);
+        aliasesTable.enableButton(7, false);
 
         table.onSelectionChange(table1 -> {
             table.enableButton(0, table1.hasSelection());
             table.enableButton(1, table1.hasSelection());
+            table.enableButton(2, table1.hasSelection());
+            table.enableButton(3, table1.hasSelection());
         });
         aliasesTable.onSelectionChange(table1 -> {
             table1.enableButton(0, table1.hasSelection());
             table1.enableButton(1, table1.hasSelection());
             table1.enableButton(2, table1.hasSelection());
+            table1.enableButton(3, table1.hasSelection());
+            table1.enableButton(4, table1.hasSelection());
             table1.enableButton(5, table1.hasSelection());
             table1.enableButton(6, table1.hasSelection());
+            table1.enableButton(7, table1.hasSelection());
             if (table1.hasSelection()) {
                 String alias = table1.selectedRow().asString();
                 String value = aliasDetailsMapping.get(alias);
@@ -249,12 +263,24 @@ private void generateCSR(Metadata metadata, String alias) {
         presenter.generateCSR(metadata, selectedKeystore, alias);
     }
 
+    private void obtainCertificate(Metadata metadata, String alias) {
+        presenter.obtainCertificate(metadata, selectedKeystore, alias);
+    }
+
+    private void revokeCertificate(Metadata metadata, String alias) {
+        presenter.revokeCertificate(metadata, selectedKeystore, alias);
+    }
+
+    private void verifyRenewCertificate(Metadata metadata, String alias) {
+        presenter.verifyRenewCertificate(metadata, selectedKeystore, alias);
+    }
+
     private void generateKeyPair(Metadata metadata) {
-        presenter.generateKeyPair(metadata, selectedKeystore, this::updateAliases);
+        presenter.generateKeyPair(metadata, table.selectedRow().getName());
     }
 
     private void importCertificate(Metadata metadata) {
-        presenter.importCertificate(metadata, selectedKeystore, this::updateAliases);
+        presenter.importCertificate(metadata, table.selectedRow().getName());
     }
 
 }",2018-08-14T22:43:29Z,270
"@@ -53,8 +53,6 @@
 import org.jboss.hal.spi.Message;
 import org.jboss.hal.spi.MessageEvent;
 import org.jboss.hal.spi.Requires;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import static org.jboss.gwt.elemento.core.Elements.p;
 import static org.jboss.hal.client.runtime.subsystem.elytron.AddressTemplates.*;
@@ -133,7 +131,6 @@ private Operation operation(AddressTemplate template) {
     }
 
     // ----------------- certificate authority account
-static Logger _log = LoggerFactory.getLogger(""org.jboss"");
 
     void createAccount(String name) {
         Metadata metadata = metadataRegistry.lookup(CERTIFICATE_AUTHORITY_ACCOUNT_TEMPLATE)
@@ -224,7 +221,7 @@ void updateAccount(String name) {
         Dialog dialog = new Dialog.Builder(title)
                 .add(p().textContent(resources.messages().updateAccountQuestion(name)).asElement())
                 .add(form.asElement())
-                .primary(resources.constants().create(), form::save)
+                .primary(resources.constants().update(), form::save)
                 .size(Dialog.Size.MEDIUM)
                 .closeOnEsc(true)
                 .cancel()
@@ -273,7 +270,7 @@ void changeAccountKey(String name) {
         Dialog dialog = new Dialog.Builder(title)
                 .add(p().textContent(resources.messages().changeAccountKeyQuestion(name)).asElement())
                 .add(form.asElement())
-                .primary(resources.constants().create(), form::save)
+                .primary(resources.constants().change(), form::save)
                 .size(Dialog.Size.MEDIUM)
                 .closeOnEsc(true)
                 .cancel()",2018-08-14T22:43:29Z,271
"@@ -15,23 +15,32 @@
  */
 package org.jboss.hal.client.runtime.subsystem.elytron;
 
+import java.util.ArrayList;
 import java.util.Collections;
+import java.util.Date;
 import java.util.List;
 import java.util.function.Consumer;
 
 import javax.inject.Inject;
+import javax.inject.Provider;
 
 import com.google.gwt.safehtml.shared.SafeHtml;
 import com.google.gwt.safehtml.shared.SafeHtmlUtils;
+import com.google.gwt.user.datepicker.client.CalendarUtil;
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.client.annotations.NameToken;
 import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
 import com.gwtplatform.mvp.client.proxy.ProxyPlace;
 import elemental2.dom.HTMLElement;
+import org.jboss.hal.ballroom.Alert;
+import org.jboss.hal.ballroom.Format;
 import org.jboss.hal.ballroom.LabelBuilder;
+import org.jboss.hal.ballroom.autocomplete.SuggestCapabilitiesAutoComplete;
 import org.jboss.hal.ballroom.dialog.Dialog;
 import org.jboss.hal.ballroom.dialog.DialogFactory;
 import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.config.Environment;
+import org.jboss.hal.core.SuccessfulOutcome;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderPath;
 import org.jboss.hal.core.finder.FinderPathFactory;
@@ -48,29 +57,39 @@
 import org.jboss.hal.dmr.Operation;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.flow.FlowContext;
+import org.jboss.hal.flow.Progress;
+import org.jboss.hal.flow.Task;
 import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.token.NameTokens;
+import org.jboss.hal.resources.Icons;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Footer;
 import org.jboss.hal.spi.Message;
 import org.jboss.hal.spi.MessageEvent;
 import org.jboss.hal.spi.Requires;
 
+import static org.jboss.gwt.elemento.core.Elements.div;
+import static org.jboss.gwt.elemento.core.Elements.p;
 import static org.jboss.hal.client.runtime.subsystem.elytron.AddressTemplates.*;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
+import static org.jboss.hal.flow.Flow.series;
+import static org.jboss.hal.resources.Ids.FORM;
 
 public class StoresPresenter extends ApplicationFinderPresenter<StoresPresenter.MyView, StoresPresenter.MyProxy>
         implements SupportsExpertMode {
 
     private static final String SPACE = "" "";
-
+    private Environment environment;
     private final FinderPathFactory finderPathFactory;
     private final StatementContext statementContext;
     private Resources resources;
+    private Provider<Progress> progress;
     private Dispatcher dispatcher;
 
     @Inject
@@ -79,12 +98,16 @@ public StoresPresenter(EventBus eventBus,
             MyProxy proxy,
             Resources resources,
             Finder finder,
+            @Footer Provider<Progress> progress,
             Dispatcher dispatcher,
+            Environment environment,
             FinderPathFactory finderPathFactory,
             StatementContext statementContext) {
         super(eventBus, view, proxy, finder);
         this.resources = resources;
+        this.progress = progress;
         this.dispatcher = dispatcher;
+        this.environment = environment;
         this.finderPathFactory = finderPathFactory;
         this.statementContext = statementContext;
     }
@@ -123,15 +146,15 @@ protected void reload() {
         });
     }
 
+    // ----------------- credential store
+
     private Operation operation(AddressTemplate template) {
         return new Operation.Builder(template.getParent().resolve(statementContext), READ_CHILDREN_RESOURCES_OPERATION)
                 .param(INCLUDE_RUNTIME, true)
                 .param(CHILD_TYPE, template.lastName())
                 .build();
     }
 
-    // ----------------- credential store
-
     void reloadCredentialStore(String name) {
         Operation operation = new Operation.Builder(CREDENTIAL_STORE_TEMPLATE.resolve(statementContext, name), RELOAD)
                 .build();
@@ -183,6 +206,9 @@ void addAlias(Metadata metadata, String name, Consumer<List<ModelNode>> callback
         dialog.show();
     }
 
+
+    // ----------------- key store
+
     void setSecret(Metadata metadata, String name, String alias) {
         AddressTemplate template = metadata.getTemplate();
         String resource = Names.CREDENTIAL_STORE + SPACE + name;
@@ -196,23 +222,23 @@ void setSecret(Metadata metadata, String name, String alias) {
         model.get(ALIAS).set(alias);
         form.getFormItem(ALIAS).setEnabled(false);
         form.edit(model);
-        DialogFactory.buildConfirmation(resources.constants().setSecret(), question, formElement, Dialog.Size.MEDIUM, () -> {
-            ResourceAddress address = template.resolve(statementContext, name);
-            Operation addOp = new Operation.Builder(address, REMOVE_ALIAS)
-                    .param(ALIAS, alias)
-                    .build();
-            dispatcher.execute(addOp, result -> MessageEvent.fire(getEventBus(),
-                    Message.success(resources.messages().setSecretPasswordSuccess(alias, resource))),
-                    (operation, failure) -> MessageEvent.fire(getEventBus(),
-                            Message.error(resources.messages().setSecretPasswordError(alias, resource, failure))),
-                    (operation, ex) -> MessageEvent.fire(getEventBus(),
-                            Message.error(resources.messages().setSecretPasswordError(alias, resource, ex.getMessage()))));
-
-        }).show();
-    }
-
+        DialogFactory.buildConfirmation(resources.constants().setSecret(), question, formElement, Dialog.Size.MEDIUM,
+                () -> {
+                    ResourceAddress address = template.resolve(statementContext, name);
+                    Operation addOp = new Operation.Builder(address, REMOVE_ALIAS)
+                            .param(ALIAS, alias)
+                            .build();
+                    dispatcher.execute(addOp, result -> MessageEvent.fire(getEventBus(),
+                            Message.success(resources.messages().setSecretPasswordSuccess(alias, resource))),
+                            (operation, failure) -> MessageEvent.fire(getEventBus(),
+                                    Message.error(
+                                            resources.messages().setSecretPasswordError(alias, resource, failure))),
+                            (operation, ex) -> MessageEvent.fire(getEventBus(),
+                                    Message.error(resources.messages()
+                                            .setSecretPasswordError(alias, resource, ex.getMessage()))));
 
-    // ----------------- key store
+                }).show();
+    }
 
     void loadKeyStore(String name) {
         Operation operation = new Operation.Builder(KEY_STORE_TEMPLATE.resolve(statementContext, name), LOAD)
@@ -232,7 +258,7 @@ void storeKeyStore(String name) {
         Operation operation = new Operation.Builder(KEY_STORE_TEMPLATE.resolve(statementContext, name), STORE)
                 .build();
         dispatcher.execute(operation, result -> MessageEvent.fire(getEventBus(),
-                        Message.success(resources.messages().storeSuccess(name))),
+                Message.success(resources.messages().storeSuccess(name))),
                 (operation1, failure) -> MessageEvent.fire(getEventBus(),
                         Message.error(resources.messages().storeError(name, failure))),
                 (operation1, exception) -> MessageEvent.fire(getEventBus(),
@@ -242,62 +268,85 @@ void storeKeyStore(String name) {
     void changeAlias(Metadata metadata, String name, String alias, Consumer<List<ModelNode>> callback) {
         AddressTemplate template = metadata.getTemplate();
         String resource = Names.KEY_STORE + SPACE + name;
-        Metadata opMetadata = metadata.forOperation(CHANGE_ALIAS);
-        SafeHtml question = SafeHtmlUtils.fromString(opMetadata.getDescription().getDescription());
-        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(template.lastName(), CHANGE_ALIAS), opMetadata)
+        metadata = metadata.forOperation(CHANGE_ALIAS);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(template.lastName(), CHANGE_ALIAS), metadata)
                 .build();
-        form.attach();
-        HTMLElement formElement = form.asElement();
-        ModelNode model = new ModelNode();
-        model.get(ALIAS).set(alias);
-        form.getFormItem(ALIAS).setEnabled(false);
-        form.edit(model);
-        DialogFactory.buildConfirmation(resources.constants().changeAlias(), question, formElement, Dialog.Size.MEDIUM, () -> {
-            form.save();
+        form.setSaveCallback((form1, changedValues) -> {
             String newAlias = form.getModel().get(""new-alias"").asString();
-            Composite composite = new Composite();
             ResourceAddress address = template.resolve(statementContext, name);
-            Operation addOp = new Operation.Builder(address, CHANGE_ALIAS)
-                    .payload(form.getModel())
-                    .build();
-            composite.add(addOp);
-            Operation operation = new Operation.Builder(address, READ_ALIASES_OPERATION)
-                    .build();
-            composite.add(operation);
 
-            dispatcher.execute(composite, (CompositeResult result) -> {
-                        MessageEvent.fire(getEventBus(),
-                                Message.success(resources.messages().changeAliasSuccess(alias, newAlias, resource)));
-                        ModelNode aliases = result.step(1).get(RESULT);
-                        if (aliases.isDefined()) {
-                            callback.accept(aliases.asList());
-                        } else {
-                            callback.accept(Collections.emptyList());
+            List<Task<FlowContext>> tasks = new ArrayList<>();
+            tasks.add(flowContext -> {
+                Operation operation = new Operation.Builder(address, CHANGE_ALIAS)
+                        .payload(form.getModel())
+                        .build();
+
+                return dispatcher.execute(operation)
+                        .toCompletable();
+            });
+            tasks.add(flowContext -> {
+                Operation operation = new Operation.Builder(KEY_STORE_TEMPLATE.resolve(statementContext, name), STORE)
+                        .build();
+
+                return dispatcher.execute(operation)
+                        .toCompletable();
+            });
+            tasks.add(flowContext -> {
+                Operation operation = new Operation.Builder(address, READ_ALIASES_OPERATION)
+                        .build();
+
+                return dispatcher.execute(operation)
+                        .doOnSuccess(flowContext::push)
+                        .toCompletable();
+            });
+
+            series(new FlowContext(progress.get()), tasks)
+                    .subscribe(new SuccessfulOutcome<FlowContext>(getEventBus(), resources) {
+                        @Override
+                        public void onSuccess(FlowContext flowContext) {
+                            MessageEvent.fire(getEventBus(),
+                                    Message.success(
+                                            resources.messages().changeAliasSuccess(alias, newAlias, resource)));
+                            ModelNode aliases = flowContext.pop();
+                            if (aliases.isDefined()) {
+                                callback.accept(aliases.asList());
+                            } else {
+                                callback.accept(Collections.emptyList());
+                            }
                         }
-                    },
-                    (op, failure) -> MessageEvent.fire(getEventBus(),
-                            Message.error(resources.messages().changeAliasError(alias, newAlias, resource, failure))),
-                    (op, ex) -> MessageEvent.fire(getEventBus(),
-                            Message.error(resources.messages().changeAliasError(alias, newAlias, resource, ex.getMessage()))));
 
-        }).show();
+                        @Override
+                        public void onError(FlowContext context, Throwable ex) {
+                            MessageEvent.fire(getEventBus(),
+                                    Message.error(
+                                            resources.messages()
+                                                    .changeAliasError(alias, newAlias, resource, ex.getMessage())));
+                        }
+                    });
+        });
+        ModelNode model = new ModelNode();
+        model.get(ALIAS).set(alias);
+        form.getFormItem(ALIAS).setEnabled(false);
+        Dialog dialog = new Dialog.Builder(resources.constants().changeAlias())
+                .add(p().textContent(metadata.getDescription().getDescription()).asElement())
+                .add(form.asElement())
+                .primary(resources.constants().change(), form::save)
+                .size(Dialog.Size.MEDIUM)
+                .closeOnEsc(true)
+                .cancel()
+                .build();
+        dialog.registerAttachable(form);
+        dialog.show();
+        form.edit(model);
     }
 
     void exportCertificate(Metadata metadata, String name, String alias) {
         AddressTemplate template = metadata.getTemplate();
         String resource = Names.KEY_STORE + SPACE + name;
-        Metadata opMetadata = metadata.forOperation(EXPORT_CERTIFICATE);
-        SafeHtml question = SafeHtmlUtils.fromString(opMetadata.getDescription().getDescription());
-        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(template.lastName(), EXPORT_CERTIFICATE), opMetadata)
+        metadata = metadata.forOperation(EXPORT_CERTIFICATE);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(template.lastName(), EXPORT_CERTIFICATE), metadata)
                 .build();
-        form.attach();
-        HTMLElement formElement = form.asElement();
-        ModelNode model = new ModelNode();
-        model.get(ALIAS).set(alias);
-        form.getFormItem(ALIAS).setEnabled(false);
-        form.edit(model);
-        DialogFactory.buildConfirmation(resources.constants().exportCertificate(), question, formElement, Dialog.Size.MEDIUM, () -> {
-            form.save();
+        form.setSaveCallback((form1, changedValues) -> {
             ResourceAddress address = template.resolve(statementContext, name);
             Operation operation = new Operation.Builder(address, EXPORT_CERTIFICATE)
                     .payload(form.getModel())
@@ -308,26 +357,33 @@ void exportCertificate(Metadata metadata, String name, String alias) {
                     (op, failure) -> MessageEvent.fire(getEventBus(),
                             Message.error(resources.messages().exportCertificateError(alias, path, resource, failure))),
                     (op, ex) -> MessageEvent.fire(getEventBus(),
-                            Message.error(resources.messages().exportCertificateError(alias, path, resource, ex.getMessage()))));
-
-        }).show();
+                            Message.error(resources.messages()
+                                    .exportCertificateError(alias, path, resource, ex.getMessage()))));
+        });
+        ModelNode model = new ModelNode();
+        model.get(ALIAS).set(alias);
+        form.getFormItem(ALIAS).setEnabled(false);
+        Dialog dialog = new Dialog.Builder(resources.constants().exportCertificate())
+                .add(p().textContent(metadata.getDescription().getDescription()).asElement())
+                .add(form.asElement())
+                .primary(resources.constants().export(), form::save)
+                .size(Dialog.Size.MEDIUM)
+                .closeOnEsc(true)
+                .cancel()
+                .build();
+        dialog.registerAttachable(form);
+        dialog.show();
+        form.edit(model);
     }
 
     void generateCSR(Metadata metadata, String name, String alias) {
         AddressTemplate template = metadata.getTemplate();
         String resource = Names.KEY_STORE + SPACE + name;
         Metadata opMetadata = metadata.forOperation(GENERATE_CERTIFICATE_SIGNING_REQUEST);
-        SafeHtml question = SafeHtmlUtils.fromString(opMetadata.getDescription().getDescription());
-        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(template.lastName(), GENERATE_CERTIFICATE_SIGNING_REQUEST), opMetadata)
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(
+                Ids.build(template.lastName(), GENERATE_CERTIFICATE_SIGNING_REQUEST), opMetadata)
                 .build();
-        form.attach();
-        HTMLElement formElement = form.asElement();
-        ModelNode model = new ModelNode();
-        model.get(ALIAS).set(alias);
-        form.getFormItem(ALIAS).setEnabled(false);
-        form.edit(model);
-        DialogFactory.buildConfirmation(resources.constants().generateCSR(), question, formElement, Dialog.Size.MEDIUM, () -> {
-            form.save();
+        form.setSaveCallback((form1, changedValues) -> {
             ResourceAddress address = template.resolve(statementContext, name);
             Operation operation = new Operation.Builder(address, GENERATE_CERTIFICATE_SIGNING_REQUEST)
                     .payload(form.getModel())
@@ -338,103 +394,314 @@ void generateCSR(Metadata metadata, String name, String alias) {
                     (op, failure) -> MessageEvent.fire(getEventBus(),
                             Message.error(resources.messages().generateCSRError(alias, path, resource, failure))),
                     (op, ex) -> MessageEvent.fire(getEventBus(),
-                            Message.error(resources.messages().generateCSRError(alias, path, resource, ex.getMessage()))));
+                            Message.error(
+                                    resources.messages().generateCSRError(alias, path, resource, ex.getMessage()))));
+        });
+        ModelNode model = new ModelNode();
+        model.get(ALIAS).set(alias);
+        form.getFormItem(ALIAS).setEnabled(false);
+        Dialog dialog = new Dialog.Builder(resources.constants().generateCSR())
+                .add(p().textContent(metadata.getDescription().getDescription()).asElement())
+                .add(form.asElement())
+                .primary(resources.constants().generate(), form::save)
+                .size(Dialog.Size.MEDIUM)
+                .closeOnEsc(true)
+                .cancel()
+                .build();
+        dialog.registerAttachable(form);
+        dialog.show();
+        form.edit(model);
 
-        }).show();
     }
 
-    void generateKeyPair(Metadata metadata, String name, Consumer<List<ModelNode>> callback) {
+    void generateKeyPair(Metadata metadata, String name) {
         AddressTemplate template = metadata.getTemplate();
         String resource = Names.KEY_STORE + SPACE + name;
-        Metadata opMetadata = metadata.forOperation(GENERATE_KEY_PAIR);
-        SafeHtml question = SafeHtmlUtils.fromString(opMetadata.getDescription().getDescription());
-        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(template.lastName(), GENERATE_KEY_PAIR), opMetadata)
+        metadata = metadata.forOperation(GENERATE_KEY_PAIR);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(template.lastName(), GENERATE_KEY_PAIR), metadata)
                 .build();
-        form.attach();
-        HTMLElement formElement = form.asElement();
-        form.edit(new ModelNode());
-        DialogFactory.buildConfirmation(resources.constants().generateKeyPair(), question, formElement,
-                Dialog.Size.MEDIUM, () -> {
-                    form.save();
-                    ResourceAddress address = template.resolve(statementContext, name);
-                    Composite composite = new Composite();
-                    Operation operation = new Operation.Builder(address, GENERATE_KEY_PAIR)
-                            .payload(form.getModel())
-                            .build();
-                    composite.add(operation);
-                    Operation opRead = new Operation.Builder(address, READ_ALIASES_OPERATION)
-                            .build();
-                    composite.add(opRead);
-                    String alias = form.getModel().get(ALIAS).asString();
-
-                    dispatcher.execute(composite, (CompositeResult result) -> {
-                                MessageEvent.fire(getEventBus(),
-                                        Message.success(resources.messages().generateKeyPairSuccess(alias, resource)));
-                                ModelNode aliases = result.step(1).get(RESULT);
-                                if (aliases.isDefined()) {
-                                    callback.accept(aliases.asList());
-                                } else {
-                                    callback.accept(Collections.emptyList());
-                                }
-                            },
-                            (op, failure) -> MessageEvent.fire(getEventBus(),
+        form.setSaveCallback((form1, changedValues) -> {
+            ResourceAddress address = template.resolve(statementContext, name);
+            String alias = form.getModel().get(ALIAS).asString();
+            List<Task<FlowContext>> tasks = new ArrayList<>();
+            tasks.add(flowContext -> {
+                Operation operation = new Operation.Builder(address, GENERATE_KEY_PAIR)
+                        .payload(form.getModel())
+                        .build();
+
+                return dispatcher.execute(operation)
+                        .toCompletable();
+            });
+            tasks.add(flowContext -> {
+                Operation operation = new Operation.Builder(KEY_STORE_TEMPLATE.resolve(statementContext, name), STORE)
+                        .build();
+
+                return dispatcher.execute(operation)
+                        .toCompletable();
+            });
+            tasks.add(flowContext -> {
+                Operation operation = new Operation.Builder(address, READ_ALIASES_OPERATION)
+                        .build();
+
+                return dispatcher.execute(operation)
+                        .toCompletable();
+            });
+
+            series(new FlowContext(progress.get()), tasks)
+                    .subscribe(new SuccessfulOutcome<FlowContext>(getEventBus(), resources) {
+                        @Override
+                        public void onSuccess(FlowContext flowContext) {
+                            MessageEvent.fire(getEventBus(),
+                                    Message.success(resources.messages().generateKeyPairSuccess(alias, resource)));
+                        }
+
+                        @Override
+                        public void onError(FlowContext context, Throwable ex) {
+                            MessageEvent.fire(getEventBus(),
                                     Message.error(
-                                            resources.messages().generateKeyPairError(alias, resource, failure))),
-                            (op, ex) -> MessageEvent.fire(getEventBus(),
-                                    Message.error(resources.messages()
-                                            .generateKeyPairError(alias, resource, ex.getMessage()))));
+                                            resources.messages()
+                                                    .generateKeyPairError(alias, resource, ex.getMessage())));
+                        }
+                    });
+        });
 
-                }).show();
+        Dialog dialog = new Dialog.Builder(resources.constants().generateKeyPair())
+                .add(p().textContent(metadata.getDescription().getDescription()).asElement())
+                .add(form.asElement())
+                .primary(resources.constants().generate(), form::save)
+                .size(Dialog.Size.MEDIUM)
+                .closeOnEsc(true)
+                .cancel()
+                .build();
+        dialog.registerAttachable(form);
+        dialog.show();
+        form.edit(new ModelNode());
     }
 
-    void importCertificate(Metadata metadata, String name, Consumer<List<ModelNode>> callback) {
+    void importCertificate(Metadata metadata, String name) {
         AddressTemplate template = metadata.getTemplate();
         String resource = Names.KEY_STORE + SPACE + name;
-        Metadata opMetadata = metadata.forOperation(IMPORT_CERTIFICATE);
-        SafeHtml question = SafeHtmlUtils.fromString(opMetadata.getDescription().getDescription());
-        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(template.lastName(), IMPORT_CERTIFICATE), opMetadata)
+        metadata = metadata.forOperation(IMPORT_CERTIFICATE);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(template.lastName(), IMPORT_CERTIFICATE), metadata)
                 .build();
-        HTMLElement formElement = form.asElement();
-        form.attach();
-        form.edit(new ModelNode());
-        DialogFactory.buildConfirmation(resources.constants().importCertificate(), question, formElement,
-                Dialog.Size.MEDIUM, () -> {
-                    form.save();
-                    ModelNode payload = form.getModel();
-                    String path = payload.get(PATH).asString();
-                    if (!payload.hasDefined(VALIDATE)) {
-                        payload.get(VALIDATE).set(false);
-                    }
-                    ResourceAddress address = template.resolve(statementContext, name);
-                    Composite composite = new Composite();
-                    Operation operation = new Operation.Builder(address, IMPORT_CERTIFICATE)
-                            .payload(payload)
-                            .build();
-                    composite.add(operation);
-                    Operation opRead = new Operation.Builder(address, READ_ALIASES_OPERATION)
-                            .build();
-                    composite.add(opRead);
-                    String alias = payload.get(ALIAS).asString();
-                    dispatcher.execute(composite, (CompositeResult result) -> {
-                                MessageEvent.fire(getEventBus(),
-                                        Message.success(resources.messages().importCertificateSuccess(alias, path, resource)));
-                                ModelNode aliases = result.step(1).get(RESULT);
-                                if (aliases.isDefined()) {
-                                    callback.accept(aliases.asList());
-                                } else {
-                                    callback.accept(Collections.emptyList());
-                                }
-                            },
-                            (op, failure) -> MessageEvent.fire(getEventBus(),
+        form.setSaveCallback((form1, changedValues) -> {
+            ModelNode payload = form.getModel();
+            String path = payload.get(PATH).asString();
+            if (!payload.hasDefined(VALIDATE)) {
+                payload.get(VALIDATE).set(false);
+            }
+            ResourceAddress address = template.resolve(statementContext, name);
+            String alias = payload.get(ALIAS).asString();
+            List<Task<FlowContext>> tasks = new ArrayList<>();
+            tasks.add(flowContext -> {
+                Operation operation = new Operation.Builder(address, IMPORT_CERTIFICATE)
+                        .payload(payload)
+                        .build();
+
+                return dispatcher.execute(operation)
+                        .doOnError(ex -> MessageEvent.fire(getEventBus(),
+                                Message.error(resources.messages()
+                                        .importCertificateError(alias, path, resource, ex.getMessage()))))
+                        .toCompletable();
+            });
+            tasks.add(flowContext -> {
+                Operation operation = new Operation.Builder(KEY_STORE_TEMPLATE.resolve(statementContext, name), STORE)
+                        .build();
+
+                return dispatcher.execute(operation)
+                        .doOnError(ex -> MessageEvent.fire(getEventBus(),
+                                Message.error(resources.messages().storeError(resource, ex.getMessage()))))
+                        .toCompletable();
+            });
+            tasks.add(flowContext -> {
+                Operation operation = new Operation.Builder(address, READ_ALIASES_OPERATION)
+                        .build();
+
+                return dispatcher.execute(operation)
+                        .doOnError(ex -> MessageEvent.fire(getEventBus(),
+                                Message.error(resources.messages().readAliasesError(resource, ex.getMessage()))))
+                        .toCompletable();
+            });
+
+            series(new FlowContext(progress.get()), tasks)
+                    .subscribe(new SuccessfulOutcome<FlowContext>(getEventBus(), resources) {
+                        @Override
+                        public void onSuccess(FlowContext flowContext) {
+                            MessageEvent.fire(getEventBus(),
+                                    Message.success(
+                                            resources.messages().importCertificateSuccess(alias, path, resource)));
+                        }
+
+                        @Override
+                        public void onError(FlowContext context, Throwable ex) {
+                            MessageEvent.fire(getEventBus(),
                                     Message.error(
-                                            resources.messages().importCertificateError(alias, path, resource, failure))),
-                            (op, ex) -> MessageEvent.fire(getEventBus(),
-                                    Message.error(resources.messages()
-                                            .importCertificateError(alias, path, resource, ex.getMessage()))));
+                                            resources.messages().removeAliasError(alias, resource, ex.getMessage())));
+                        }
+                    });
+        });
 
-                }).show();
+        Dialog dialog = new Dialog.Builder(resources.constants().importCertificate())
+                .add(p().textContent(metadata.getDescription().getDescription()).asElement())
+                .add(form.asElement())
+                .primary(resources.constants().importt(), form::save)
+                .size(Dialog.Size.MEDIUM)
+                .closeOnEsc(true)
+                .cancel()
+                .build();
+        dialog.registerAttachable(form);
+        dialog.show();
+        form.edit(new ModelNode());
+    }
+
+    void obtainCertificate(Metadata metadata, String name, String alias) {
+        metadata = metadata.forOperation(OBTAIN_CERTIFICATE);
+        String id = Ids.build(KEY_STORE, OBTAIN_CERTIFICATE, FORM);
+        String title = new LabelBuilder().label(CERTIFICATE_AUTHORITY_ACCOUNT);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata)
+                .build();
+        form.setSaveCallback((form1, changedValues) -> {
+            ResourceAddress address = KEY_STORE_TEMPLATE.resolve(statementContext, name);
+            Operation operation = new Operation.Builder(address, OBTAIN_CERTIFICATE)
+                    .payload(form.getModel())
+                    .build();
+            dispatcher.execute(operation, result -> MessageEvent.fire(getEventBus(),
+                    Message.success(resources.messages().obtainCertificateSuccess(alias, name))),
+                    (operation1, failure) -> MessageEvent.fire(getEventBus(),
+                            Message.error(resources.messages().obtainCertificateError(alias, name, failure))),
+                    (operation1, ex) -> MessageEvent.fire(getEventBus(),
+                            Message.error(resources.messages().obtainCertificateError(alias, name, ex.getMessage()))));
+        });
+        Dialog dialog = new Dialog.Builder(title)
+                .add(p().textContent(metadata.getDescription().getDescription()).asElement())
+                .add(form.asElement())
+                .primary(resources.constants().obtain(), form::save)
+                .size(Dialog.Size.MEDIUM)
+                .closeOnEsc(true)
+                .cancel()
+                .build();
+        dialog.registerAttachable(form);
+        ModelNode model = new ModelNode();
+        model.get(ALIAS).set(alias);
+        form.getFormItem(ALIAS).setEnabled(false);
+        if (!environment.isStandalone()) {
+            // the capability reference the /profile=* resource and the template attached to the metadata
+            // points to the {selected.host}/{selected.server}, so we need to register the template to the profile
+            String capability = metadata.getDescription()
+                    .get(ATTRIBUTES)
+                    .get(CERTIFICATE_AUTHORITY_ACCOUNT)
+                    .get(CAPABILITY_REFERENCE)
+                    .asString();
+            form.getFormItem(CERTIFICATE_AUTHORITY_ACCOUNT)
+                    .registerSuggestHandler(
+                            new SuggestCapabilitiesAutoComplete(dispatcher, statementContext, capability,
+                                    ELYTRON_PROFILE_TEMPLATE));
+        }
+        dialog.show();
+        form.edit(model);
+    }
+
+    void revokeCertificate(Metadata metadata, String name, String alias) {
+        metadata = metadata.forOperation(REVOKE_CERTIFICATE);
+        String id = Ids.build(KEY_STORE, REVOKE_CERTIFICATE, FORM);
+        String title = new LabelBuilder().label(CERTIFICATE_AUTHORITY_ACCOUNT);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata)
+                .build();
+        form.setSaveCallback((form1, changedValues) -> {
+            ResourceAddress address = KEY_STORE_TEMPLATE.resolve(statementContext, name);
+            Operation operation = new Operation.Builder(address, REVOKE_CERTIFICATE)
+                    .payload(form.getModel())
+                    .build();
+            dispatcher.execute(operation, result -> MessageEvent.fire(getEventBus(),
+                    Message.success(resources.messages().revokeCertificateSuccess(alias, name))),
+                    (operation1, failure) -> MessageEvent.fire(getEventBus(),
+                            Message.error(resources.messages().revokeCertificateError(alias, name, failure))),
+                    (operation1, ex) -> MessageEvent.fire(getEventBus(),
+                            Message.error(resources.messages().revokeCertificateError(alias, name, ex.getMessage()))));
+        });
+        Dialog dialog = new Dialog.Builder(title)
+                .add(p().textContent(metadata.getDescription().getDescription()).asElement())
+                .add(form.asElement())
+                .primary(resources.constants().revoke(), form::save)
+                .size(Dialog.Size.MEDIUM)
+                .closeOnEsc(true)
+                .cancel()
+                .build();
+        dialog.registerAttachable(form);
+        ModelNode model = new ModelNode();
+        model.get(ALIAS).set(alias);
+        form.getFormItem(ALIAS).setEnabled(false);
+        if (!environment.isStandalone()) {
+            // the capability reference the /profile=* resource and the template attached to the metadata
+            // points to the {selected.host}/{selected.server}, so we need to register the template to the profile
+            String capability = metadata.getDescription()
+                    .get(ATTRIBUTES)
+                    .get(CERTIFICATE_AUTHORITY_ACCOUNT)
+                    .get(CAPABILITY_REFERENCE)
+                    .asString();
+            form.getFormItem(CERTIFICATE_AUTHORITY_ACCOUNT)
+                    .registerSuggestHandler(
+                            new SuggestCapabilitiesAutoComplete(dispatcher, statementContext, capability,
+                                    ELYTRON_PROFILE_TEMPLATE));
+        }
+        dialog.show();
+        form.edit(model);
     }
 
+    void verifyRenewCertificate(Metadata metadata, String name, String alias) {
+        metadata = metadata.forOperation(SHOULD_RENEW_CERTIFICATE);
+        String id = Ids.build(KEY_STORE, SHOULD_RENEW_CERTIFICATE, FORM);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata)
+                .build();
+        form.setSaveCallback((form1, changedValues) -> {
+            ResourceAddress address = KEY_STORE_TEMPLATE.resolve(statementContext, name);
+            Operation operation = new Operation.Builder(address, SHOULD_RENEW_CERTIFICATE)
+                    .payload(form.getModel())
+                    .build();
+            dispatcher.execute(operation, result -> {
+                        int days = result.get(""days-to-expiry"").asInt();
+                        Date dueDate = new Date();
+                        CalendarUtil.addDaysToDate(dueDate, days);
+
+                        HTMLElement content;
+                        if (days < 1) {
+                            Alert warning = new Alert(Icons.WARNING, resources.messages().certificateExpired(alias));
+                            content = div().add(warning).asElement();
+                        } else {
+                            SafeHtml description = resources.messages()
+                                    .certificateShouldRenew(days, alias, Format.mediumDateTime(dueDate));
+                                content = p().innerHtml(description).asElement();
+                        }
+
+                        new Dialog.Builder(resources.constants().verifyRenewCertificate())
+                                .primary(resources.constants().ok(), null)
+                                .size(Dialog.Size.MEDIUM)
+                                .add(content)
+                                .build()
+                                .show();
+
+
+                    },
+                    (operation1, failure) -> MessageEvent.fire(getEventBus(),
+                            Message.error(resources.messages().verifyRenewError(alias, name, failure))),
+                    (operation1, ex) -> MessageEvent.fire(getEventBus(),
+                            Message.error(resources.messages().verifyRenewError(alias, name, ex.getMessage()))));
+        });
+        Dialog dialog = new Dialog.Builder(resources.constants().verifyRenewCertificate())
+                .add(p().textContent(metadata.getDescription().getDescription()).asElement())
+                .add(form.asElement())
+                .primary(resources.constants().verifyRenew(), form::save)
+                .size(Dialog.Size.MEDIUM)
+                .closeOnEsc(true)
+                .cancel()
+                .build();
+        dialog.registerAttachable(form);
+        dialog.show();
+        ModelNode model = new ModelNode();
+        model.get(ALIAS).set(alias);
+        form.getFormItem(ALIAS).setEnabled(false);
+        form.edit(model);
+    }
 
     // ----------------- common methods
 
@@ -466,31 +733,59 @@ void removeAlias(Metadata metadata, String name, String alias, Consumer<List<Mod
         SafeHtml question = resources.messages().removeAliasQuestion(alias, resource);
         DialogFactory.showConfirmation(resources.constants().removeAlias(), question, () -> {
             ResourceAddress address = template.resolve(statementContext, name);
-            Composite composite = new Composite();
-            Operation addOp = new Operation.Builder(address, REMOVE_ALIAS)
-                    .param(ALIAS, alias)
-                    .build();
 
-            composite.add(addOp);
-            Operation operation = new Operation.Builder(address, READ_ALIASES_OPERATION)
-                    .build();
-            composite.add(operation);
-
-            dispatcher.execute(composite, (CompositeResult result) -> {
-                        MessageEvent.fire(getEventBus(),
-                                Message.success(resources.messages().addSuccess(ALIAS, alias, resource)));
-                        ModelNode aliases = result.step(1).get(RESULT);
-                        if (aliases.isDefined()) {
-                            callback.accept(aliases.asList());
-                        } else {
-                            callback.accept(Collections.emptyList());
+            List<Task<FlowContext>> tasks = new ArrayList<>();
+            tasks.add(flowContext -> {
+                Operation operation = new Operation.Builder(address, REMOVE_ALIAS)
+                        .param(ALIAS, alias)
+                        .build();
+
+                return dispatcher.execute(operation)
+                        .doOnError(ex -> MessageEvent.fire(getEventBus(),
+                                Message.error(resources.messages().removeAliasError(alias, resource, ex.getMessage()))))
+                        .toCompletable();
+            });
+            tasks.add(flowContext -> {
+                Operation operation = new Operation.Builder(KEY_STORE_TEMPLATE.resolve(statementContext, name), STORE)
+                        .build();
+
+                return dispatcher.execute(operation)
+                        .doOnError(ex -> MessageEvent.fire(getEventBus(),
+                                Message.error(resources.messages().storeError(resource, ex.getMessage()))))
+                        .toCompletable();
+            });
+            tasks.add(flowContext -> {
+                Operation operation = new Operation.Builder(address, READ_ALIASES_OPERATION)
+                        .build();
+
+                return dispatcher.execute(operation)
+                        .doOnSuccess(flowContext::push)
+                        .doOnError(ex -> MessageEvent.fire(getEventBus(),
+                                Message.error(resources.messages().readAliasesError(resource, ex.getMessage()))))
+                        .toCompletable();
+            });
+
+            series(new FlowContext(progress.get()), tasks)
+                    .subscribe(new SuccessfulOutcome<FlowContext>(getEventBus(), resources) {
+                        @Override
+                        public void onSuccess(FlowContext flowContext) {
+                            MessageEvent.fire(getEventBus(),
+                                    Message.success(resources.messages().removeAliasSuccess(alias, resource)));
+                            ModelNode aliases = flowContext.pop();
+                            if (aliases.isDefined()) {
+                                callback.accept(aliases.asList());
+                            } else {
+                                callback.accept(Collections.emptyList());
+                            }
                         }
-                    },
-                    (op, failure) -> MessageEvent.fire(getEventBus(),
-                            Message.error(resources.messages().addError(ALIAS, alias, resource, failure))),
-                    (op, ex) -> MessageEvent.fire(getEventBus(),
-                            Message.error(resources.messages().addError(ALIAS, alias, resource, ex.getMessage()))));
 
+                        @Override
+                        public void onError(FlowContext context, Throwable ex) {
+                            MessageEvent.fire(getEventBus(),
+                                    Message.error(
+                                            resources.messages().removeAliasError(alias, resource, ex.getMessage())));
+                        }
+                    });
         });
     }
 ",2018-08-14T22:43:29Z,272
"@@ -217,9 +217,12 @@ public void add(String name, ResourceAddress address, @Nullable ModelNode payloa
             builder.payload(payload);
         }
         dispatcher.execute(builder.build(), result -> {
-            MessageEvent.fire(eventBus, Message.success(successMessage));
-            callback.execute(name, address);
-        });
+                    MessageEvent.fire(eventBus, Message.success(successMessage));
+                    callback.execute(name, address);
+                }, (operation, failure) -> MessageEvent.fire(eventBus,
+                Message.error(resources.messages().addResourceError(name, failure))),
+                (operation, exception) -> MessageEvent.fire(eventBus,
+                        Message.error(resources.messages().addResourceError(name, exception.getMessage()))));
     }
 
 
@@ -372,9 +375,12 @@ public void addSingleton(String type, ResourceAddress address, @Nullable ModelNo
     @JsIgnore
     public void addSingleton(String type, Operation operation, AddSingletonCallback callback) {
         dispatcher.execute(operation, result -> {
-            MessageEvent.fire(eventBus, Message.success(resources.messages().addSingleResourceSuccess(type)));
-            callback.execute(operation.getAddress());
-        });
+                    MessageEvent.fire(eventBus, Message.success(resources.messages().addSingleResourceSuccess(type)));
+                    callback.execute(operation.getAddress());
+                }, (operation1, failure) -> MessageEvent.fire(eventBus,
+                Message.error(resources.messages().addSingleResourceError(type, failure))),
+                (operation1, exception) -> MessageEvent.fire(eventBus,
+                        Message.error(resources.messages().addSingleResourceError(type, exception.getMessage()))));
     }
 
 ",2018-08-14T22:43:29Z,273
"@@ -549,6 +549,7 @@ public interface ModelDescriptionConstants {
     String NUMBER_OF_TRANSACTIONS = ""number-of-transactions"";
     String OBJECT = ""object"";
     String OFF_HEAP = ""off-heap"";
+    String OBTAIN_CERTIFICATE = ""obtain-certificate"";
     String OOB = ""oob"";
     String OP = ""operation"";
     String OPERATION = ""operation"";
@@ -726,6 +727,7 @@ public interface ModelDescriptionConstants {
     String RESULT = ""result"";
     String RESUME = ""resume"";
     String RESUME_SERVERS = ""resume-servers"";
+    String REVOKE_CERTIFICATE = ""revoke-certificate"";
     String ROLE = ""role"";
     String ROLE_MAP = ""role-map"";
     String ROLE_MAPPING = ""role-mapping"";
@@ -789,6 +791,7 @@ public interface ModelDescriptionConstants {
     String SHARED_STORE_COLOCATED = ""shared-store-colocated"";
     String SHARED_STORE_MASTER = ""shared-store-master"";
     String SHARED_STORE_SLAVE = ""shared-store-slave"";
+    String SHOULD_RENEW_CERTIFICATE = ""should-renew-certificate"";
     String SHOW_HISTORY_OPERATION = ""show-history"";
     String SHUTDOWN = ""shutdown"";
     String SIMPLE_PERMISSION_MAPPER = ""simple-permission-mapper"";",2018-08-14T22:43:29Z,109
"@@ -175,6 +175,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String expiredSessions();
     String explode();
     String exploded();
+    String export();
     String exportCertificate();
     String expression();
     String expressionResolver();
@@ -198,6 +199,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String fromDeployment();
 
     String getMetadata();
+    String generate();
     String generateCSR();
     String generateKeyPair();
     String globalSettings();
@@ -293,6 +295,8 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String httpManagementInterface();
 
     String identity();
+    // contains two t as the import is a reserved word
+    String importt();
     String importCertificate();
     String inactive();
     String includeRole();
@@ -396,6 +400,8 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String notEnabled();
     String nothingSelected();
 
+    String obtain();
+    String obtainCertificate();
     String of();
     String ok();
     String opened();
@@ -483,6 +489,8 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String results();
     String resume();
     String review();
+    String revoke();
+    String revokeCertificate();
     String role();
     String roles();
     String rollback();
@@ -593,6 +601,8 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String users();
 
     String validation();
+    String verifyRenew();
+    String verifyRenewCertificate();
     String view();
     String viewDetailsAlias();
     String viewInEditor();",2018-08-14T22:43:29Z,100
"@@ -33,6 +33,7 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml addressLabel(String address);
     SafeHtml addServerHostHelp();
     String addServerTitle();
+    SafeHtml addSingleResourceError(String type, String error);
     SafeHtml addSingleResourceSuccess(String type);
     SafeHtml allContentAlreadyDeployedToServerGroup(String serverGroup);
     SafeHtml allMailServersExist();
@@ -56,6 +57,9 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml cannotDownloadExploded();
 
     SafeHtml capabilityReference(String capability);
+    SafeHtml certificateExpired(String alias);
+    SafeHtml certificateShouldRenew(int days, String alias, String dueDate);
+    // String certificateShouldNotRenew(int days, String dueDate);
     SafeHtml changeAccountKeyError(String name, String error);
     String changeAccountKeyQuestion(String name);
     SafeHtml changeAccountKeySuccess(String name);
@@ -364,6 +368,8 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml normalLogFile(String size);
     String notifications(@PluralCount int count);
 
+    SafeHtml obtainCertificateError(String alias, String resource, String error);
+    SafeHtml obtainCertificateSuccess(String alias, String resource);
     SafeHtml operationLabel(String name);
     String operations(int size);
 
@@ -423,7 +429,9 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml reloadServerSuccess(String name);
     SafeHtml reloadSettings();
 
+    SafeHtml removeAliasError(String alias, String resource, String error);
     SafeHtml removeAliasQuestion(String alias, String resource);
+    SafeHtml removeAliasSuccess(String alias, String resource);
     String removeConfirmationTitle(String name);
     SafeHtml removeConfirmationQuestion(String name);
     SafeHtml removeConfigurationChangesQuestion(String type, String name);
@@ -495,6 +503,8 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml resumeServerGroupSuccess(String name);
     SafeHtml resumeServerError(String name);
     SafeHtml resumeServerSuccess(String name);
+    SafeHtml revokeCertificateError(String alias, String resource, String error);
+    SafeHtml revokeCertificateSuccess(String alias, String resource);
     String roleColumnFilterDescription();
     SafeHtml rollbackError(String failure);
     SafeHtml rollbackInProgress(String patchid);
@@ -616,6 +626,8 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     String uptime(String uptime);
     String used(double value);
 
+    SafeHtml verifyRenewError(String alias, String resource, String error);
+    SafeHtml verifyRenewSuccess(String alias, String resource);
     String view(String type);
 
     SafeHtml writeBehaviour(String current, String switchTo);",2018-08-14T22:43:29Z,94
"@@ -148,6 +148,7 @@ expire=Expire
 expiredSessions=Expired Sessions
 explode=Explode
 exploded=exploded
+export=Export
 exportCertificate=Export certificate
 expression=Expression
 expressionResolver=Expression Resolver
@@ -169,6 +170,7 @@ formErrors=The following errors occurred\:
 formResetDesc=Resets all non required fields to their initial or default values.
 fromDeployment=part of a deployment
 getMetadata=Get Metadata
+generate=Generate
 generateCSR=Generate CSR
 generateKeyPair=Generate Key Pair
 globalSettings=Global Settings
@@ -261,6 +263,7 @@ hostsUsingThisHandler=Hosts using this handler
 hour=hour
 hours=hours
 httpManagementInterface=HTTP Management Interface
+importt=Import
 importCertificate=Import Certificate
 identity=identity
 inactive=inactive
@@ -356,6 +359,9 @@ noWrite=No Write Behaviour
 notANumber=Not a number
 notEnabled=Not Enabled
 nothingSelected=Nothing selected
+obtain=Obtain
+obtainCertificate=Obtain Certificate
+obtainCertificateError=
 of=of
 ok=Ok
 openInExternalWindow=Open in external window
@@ -440,6 +446,8 @@ restricted=The permissions for your role don't allow to access this data.
 results=Results
 resume=Resume
 review=Review
+revoke=Revoke
+revokeCertificate=Revoke Certificate
 role=Role
 roles=Roles
 rollback=Rollback
@@ -544,6 +552,8 @@ used=Used
 user=User
 users=Users
 validation=Validation
+verifyRenew=Verify Renew
+verifyRenewCertificate=Verify Renew of Certificate
 view=View
 viewDetailsAlias=View the alias details
 viewInEditor=View in Editor",2018-08-14T22:43:29Z,100
"@@ -87,13 +87,15 @@ error=Erro
 excludeRole=Excluir Fun\u00E7\u00E3o
 expiredSessions=Sess\u00f5es Expiradas
 explode=Expandir
+export=Exportar
 exportCertificate=Exportar certificado
 expression=Express\u00E3o
 failed=Falhou
 filter=Flitro
 finish=Concluir
 finished=Conclu\u00EDdo
 getMetadata=Ler Metadata
+generate=Gerar
 generateCSR=Gerar CSR
 generateKeyPair=Gerar Par de Chaves
 group=Grupo
@@ -176,6 +178,7 @@ hour=hora
 hours=horas
 httpManagementInterface=Interface de Gerenciamento HTTP
 identity=identidade
+importt=Importar
 importCertificate=Importar Certificado
 includes=Inclui
 initialize=Inicializar
@@ -213,6 +216,8 @@ next=Pr\u00F3ximo
 no=N\u00E3o
 noAttributes=N\u00E3o h\u00E1 atributos
 nothingSelected=Nada selecionado
+obtain=Obter
+obtainCertificate=Obter Certificado
 of=de
 ok=Ok
 opened=Aberto
@@ -267,6 +272,8 @@ restart=Reiniciar
 results=Resultados
 resume=Retomar
 review=Revis\u00E3o
+revoke=Revogar
+revokeCertificate=Revogar Certificado
 role=Fun\u00E7\u00E3o
 roles=Pap\u00E9is
 rollback=Reverter
@@ -328,6 +335,8 @@ used=Usado
 user=Usu\u00E1rio
 users=Usu\u00E1rios
 validation=Valida\u00E7\u00E3o
+verifyRenew=Verificar Renova\u00e7\u00e3o
+verifyRenewCertificate=Verificar Renova\u00e7\u00e3o de Certificado
 view=Visualizar
 viewDetailsAlias=Ver os detalhes de um alias
 xaProperties=Propriedades XA",2018-08-14T22:43:29Z,100
"@@ -11,6 +11,7 @@ addResourceTitle=Add {0}
 addressLabel=<p>Address: <strong>{0}</strong></p>
 addServerHostHelp=The name of the host contoller that is responsible for managing this server.
 addServerTitle=Add Server
+addSingleResourceError=Failed to add singleton resource {0}, cause: {1}
 addSingleResourceSuccess=<strong>{0}</strong> successfully added.
 allContentAlreadyDeployedToServerGroup=All content already deployed to server group <strong>{0}</strong>.
 allMailServersExist=All mails servers already exist.
@@ -30,8 +31,10 @@ cancelledOperation=The management operation <strong>{0}</strong> was cancelled.
 cannotBrowseUnmanaged=The reading of contents of unmanaged deployments is not supported.
 cannotDownloadExploded=Cannot download an exploded deployment.
 capabilityReference=References the capability <code>{0}</code>
+certificateExpired=The certificate identified by alias {0} should be renewed.
+certificateShouldRenew=<p>In {0} days the certificate identified by alias {1} should be renewed.</p><p>The certificate will expire in {2}.</p>
 changeAccountKeyError=There was an error to change the account key for <strong>{0}</strong>. Cause: {1}
-changeAccountKeyQuestion=Do you really want to change the key for account <strong>{0}</strong> ?
+changeAccountKeyQuestion=Do you really want to change the key for account {0} ?
 changeAccountKeySuccess=The account key for <strong>{0}</strong> was successfully changed.
 changePrioritySuccess=The priority has been successfully changed to <strong>{0, number}</strong>.
 changeAliasError=Failed to change alias <strong>{0}</strong> to <strong>{1}</strong> for <strong>{2}</strong>. Cause: {3}.
@@ -71,7 +74,7 @@ contentUndeployed=Content <strong>{0}</strong> successfully undeployed from sele
 contentUndeployedFromServerGroup=Content <strong>{0}</strong> successfully undeployed from server group <strong>{1}</strong>.
 copyServerTitle=Copy server
 createAccountError=There was an error to create the account for <strong>{0}</strong>. Cause: {1}
-createAccountQuestion=Do you really want to create account for <strong>{0}</strong> ?
+createAccountQuestion=Do you really want to create account for {0} ?
 createAccountSuccess=The account for <strong>{0}</strong> was successfully created.
 credentialReferenceAddConfirmation=The resource contains a value for <strong>&#39;{0}&#39;</strong> which is mutual exclusive to &#39;Credential Reference&#39;.<br/>Do you want remove the value for &#39;{0}&#39; and add &#39;Credential Reference&#39;?
 credentialReferenceAddressError=Unable to access credential reference: No address available.
@@ -89,7 +92,7 @@ datasourceRuntimeFilterDescription=Filter by: name, xa, normal, enabled/disabled
 dataSourceStatisticsDisabled=Statistics are not enabled for data source {0}. You can enable them by clicking the button below. This will modify the data source <strong>configuration</strong> and you will need to reload the server.
 dataSourceStatisticsFromDeployment=Statistics are not available for data sources contained in a deployment. Please add the data source in the configuration section, to get statistics.
 deactivateAccountError=There was an error to deactivate the account for <strong>{0}</strong>. Cause: {1}
-deactivateAccountQuestion=Do you really want to deactivate account for <strong>{0}</strong> ?
+deactivateAccountQuestion=Do you really want to deactivate account for {0} ?
 deactivateAccountSuccess=The account for <strong>{0}</strong> was successfully deactivated.
 deployedTo=The content <strong>{0}</strong> is deployed to the following server groups:
 deploymentActive=The deployment <strong>{0}</strong> is enabled and active.
@@ -317,6 +320,8 @@ normalLogFile=The log file has a size of <strong>{0}</strong>.
 notifications={0, number} Notifications
 notifications[\=0]=No Notifications
 notifications[\=1]=One Notification
+obtainCertificateError=There was an error to obtain the certificate for alias <strong>{0}</strong> of Key Store <strong>{1}</strong>. Cause: {2}
+obtainCertificateSuccess=The certificate identified by alias <strong>{0}</strong> of Key Store <strong>{1}</strong> was retrieved with success.
 operationLabel=<p>Operation: <strong>{0}</strong></p>
 operations={0, number} operations
 pageNotFound=Page <strong>{0}</strong> not found.
@@ -374,7 +379,9 @@ reloadServerGroupSuccess=Server group <strong>{0}</strong> successfully reloaded
 reloadServerQuestion=Are you sure you want to reload the server <strong>{0}</strong>?
 reloadServerSuccess=Server <strong>{0}</strong> successfully reloaded.
 reloadSettings=The settings will not take effect until the console is reloaded. Do you want to reload now?
+removeAliasError=There was and error trying to remove the alias <strong>{0}</strong> from Key Store <strong>{1}</strong>. Cause: {2}
 removeAliasQuestion=Do you really want to remove the alias <strong>{0}</strong> from <strong>{1}</strong> ?
+removeAliasSuccess=The alias <strong>{0}</strong> was successfully removed from Key Store <strong>{1}</strong>.
 removeConfirmationQuestion=Do you really want to remove <strong>{0}</strong>?
 removeConfigurationChangesQuestion=Do you really want to disable the configuration changes for {0} <strong>{1}</strong>.
 removeContentQuestion=Do you really want to remove <strong>{1}</strong> from <strong>{0}</strong>?
@@ -444,6 +451,8 @@ resumeServerError=Failed to resume server <strong>{0}</strong>.
 resumeServerGroupError=Failed to resume server group <strong>{0}</strong>.
 resumeServerGroupSuccess=Server group <strong>{0}</strong> successfully resumed.
 resumeServerSuccess=Server <strong>{0}</strong> successfully resumed.
+revokeCertificateError=There was an error to revoke the certificate for alias <strong>{0}</strong> of Key Store <strong>{1}</strong>. Cause: {2}
+revokeCertificateSuccess=The certificate identified by alias <strong>{0}</strong> of Key Store <strong>{1}</strong> was revoked with success.
 roleColumnFilterDescription=Filter by: role name, role type or scope
 runningTimeLabel=<p>Running Time: <strong>{0}</strong></p>
 saveIdentityError=There was and error trying to save an identity <strong>{0}</strong> to <strong>{1}</strong>. Cause: {2}
@@ -549,5 +558,7 @@ uploadInProgress=<strong>{0}</strong> is being uploaded. Please wait until the u
 uploadSuccessful=<strong>{0}</strong> has been successfully uploaded to the content repository.
 uptime=Uptime: {0}
 used={0}% used
+verifyRenewError=There was an error to verify if the certificate should be renewed for alias <strong>{0}</strong> of Key Store <strong>{1}</strong>. Cause: {2}
+verifyRenewSuccess=The renewal check of certificate identified by alias <strong>{0}</strong> of Key Store <strong>{1}</strong> was verified with success.
 view=View {0}
 writeBehaviour=This store currently uses a <strong>{0}</strong> behaviour. Use the button below to switch to <strong>{1}</strong>.",2018-08-14T22:43:29Z,94
"@@ -4,12 +4,15 @@ addKeyStoreError=Falha ao adicionar o key-store {0}.
 addResourceError=Falha ao adicionar recurso {0}, motivo: {1}
 addServerHostHelp=O nome do servidor de controle respons\u00e1vel por gerenciar este servidor.
 addServerTitle=Adicionar servidor
+addSingleResourceError=Falha ao adicionar recurso singleton {0}, motivo: {1}
 addSuccess=A {0} <strong>{1}</strong> foi adicionada com sucesso no <strong>{2}</strong>.
 allSingletonsExist=Todos os recursos singleton j\u00E1 foram adicionados.
 cannotBrowseUnmanaged=A leitura de conte\u00fado de deployments n\u00e3o gerenciados (unmanaged) n\u00e3o \u00e9 suportado.
 cannotDownloadExploded=N\u00e3o \u00e9 poss\u00edvel realizar o download de um deployment aberto (exploded).
+certificateExpired=O certificado identificado pelo alias {0} deve ser renovado.
+certificateShouldRenew=<p>Em {0} dias o certificado identificado pelo alias {1} dever\u00e1 ser renovado.</p><p> O certificado ir\u00e1 expirar em {2}.</p>
 changeAccountKeyError=Houve um erro ao atualizar a chave da conta de <strong>{0}</strong>. Causa: {1}
-changeAccountKeyQuestion=Voc\u00ea deseja atualizar a chave de conta de <strong>{0}</strong> ?
+changeAccountKeyQuestion=Voc\u00ea deseja atualizar a chave de conta de {0} ?
 changeAccountKeySuccess=A chave da conta de <strong>{0}</strong> foi atualizada com sucesso.
 changeAliasError=Falha ao modificar o alias <strong>{0}</strong> para <strong>{1}</strong> em <strong>{2}</strong>. Causa: {3}.
 changeAliasSuccess=O alias <strong>{0}</strong> foi modificado com sucesso para <strong>{1}</strong> em <strong>{2}</strong>.
@@ -24,12 +27,12 @@ configurePatchTitle=Configurar corre\u00e7\u00e3o
 contentFilterDescription=Filtrar por: nome, managed, exploded, archived, server group
 copyServerTitle=Copiar servidor
 createAccountError=Houve um erro ao criar a conta de <strong>{0}</strong>. Causa: {1}
-createAccountKeyQuestion=Voc\u00ea deseja criar a conta para <strong>{0}</strong> ?
+createAccountKeyQuestion=Voc\u00ea deseja criar a conta para {0} ?
 createAccountSuccess=A conta de <strong>{0}</strong> foi criada com sucesso.
 datasourceFilterDescription=Filtrar por: nome, xa, normal, enabled/disabled, deployment
 datasourceRuntimeFilterDescription=Filtrar por: nome, xa, normal, enabled/disabled
 deactivateAccountError=Houve um erro ao desativar a conta de <strong>{0}</strong>. Causa: {1}
-deactivateAccountKeyQuestion=Voc\u00ea deseja desativar a conta de <strong>{0}</strong> ?
+deactivateAccountQuestion=Voc\u00ea deseja desativar a conta de {0} ?
 deactivateAccountSuccess=A conta de <strong>{0}</strong> foi desativada com sucesso.
 deploymentStandaloneColumnFilterDescription=Filtrar por: nome ou status da instala\u00e7\u00e3o
 destinationFilterDescription=Filtrar por: nome, tipo ou deployment
@@ -97,6 +100,8 @@ notifications[\=0]=Nenhuma notifica\u00E7\u00E3o
 notifications[\=1]=Uma notifica\u00E7\u00E3o
 noPatchesForHost=N\u00e3o h\u00e1 corre\u00e7\u00f5es instaladas para este servidor de controle.
 noSelectedPatch=Nenhum arquivo de corre\u00e7\u00e3o selecionado. Por favor selecione um arquivo de corre\u00e7\u00e3o para enviar.
+obtainCertificateError=Houve um erro ao obter o certificado de alias <strong>{0}</strong> do Key Store <strong>{1}</strong>. Causa: {2}
+obtainCertificateSuccess=O certificado identificado pelo alias <strong>{0}</strong> do Key Store <strong>{1}</strong> foi obtido com sucesso.
 patchAddError=Ocorreu um erro na instala\u00e7\u00e3o da corre\u00e7\u00e3o {0}. Motivo: {1}
 patchHostNeedsRestart=O servidor de controle <strong>{0}</strong> precisa ser reiniciado. Uma corre\u00e7\u00e3o n\u00e3o pode ser adicionada ou removida antes do servidor de controle ser reiniciado.
 patchInProgress=<strong>{0}</strong> est\u00e1 sendo instalado. Por favor, aguarde a instala\u00e7\u00e3o terminar.
@@ -118,7 +123,9 @@ reloadConsoleRedirect=Por raz\u00f5es de seguran\u00e7a (redirecionamento entre
 reloadConsoleTimeout=O {0} n\u00e3o responde. Se a Interface HTTP de Gerenciamento foi configurada com SSL, \u00e9 poss\u00edvel que o navegador n\u00e3o confia no certificado SSL e deve ser carregado manualmente <strong><a href=""#"" class=""alert-link"">{1}</a></strong>. Se este n\u00e3o for o caso, veja os logs do navegador e do servidor Widfly.
 reloadError=Falha ao recarregar <strong>{0}</strong>. Causa: {1}.
 reloadSuccess=<strong>{0}</strong> foi recarregado com sucesso.
+removeAliasError=Houve um erro ao tentar remover o alias <strong>{0}</strong> do Key Store <strong>{1}</strong>. Causa: {2}
 removeAliasQuestion=Você deseja realmente remover o alias <strong>{0}</strong> de <strong>{1}</strong> ?
+removeAliasSuccess=O alias <strong>{0}</strong> foi removido com sucesso do Key Store <strong>{1}</strong>.
 removeConfigurationChangesQuestion=Voc\u00ea tem certeza de que quer desativar o log de configura\u00e7\u00f5es para o {0} <strong>{1}</strong>.
 removeConfirmationTitle=Remover {0}
 removeIdentityError=Houve um erro ao tentar remover a identidade <strong>{0}</strong> do <strong>{1}</strong>. Causa: {2}
@@ -129,6 +136,8 @@ resetStatisticsSuccess=As estat\u00edsticas do conector <strong>{0}</strong> for
 resetStatisticsTitle=Limpar estat\u00edsticas
 resourceAdapterColumnFilterDescription=Filtrar por: nome, tipo do adaptador ou se tem suporte a transa\u00e7\u00e3o
 restColumnFilterDescription=Filtrar por: Nome Rest, m\u00e9todo ou tipo de m\u00eddia
+revokeCertificateError=Houve um erro ao revogar o certificado de alias <strong>{0}</strong> do Key Store <strong>{1}</strong>. Causa: {2}
+revokeCertificateSuccess=O certificado identificado pelo alias <strong>{0}</strong> do Key Store <strong>{1}</strong> foi revogado com sucesso.
 roleColumnFilterDescription=Filtrar por: nome da fun\u00e7\u00e3o, tipo da fun\u00e7\u00e3o ou escopo
 rollbackError=Erro ao remover a corre\u00e7\u00e3o, motivo: {0}
 rollbackInProgress=Rollback de <strong>{0}</strong> est\u00e1 em andamento. Por favor, aguarde o rollback terminar.
@@ -147,6 +156,8 @@ testConnectionErrorDomain=O teste de conex\u00e3o requer um servidor em funciona
 unauthorized=Voc\u00EA n\u00E3o tem as permiss\u00F5es para acessar este recurso\!
 undertowListenerProcessingDisabled=A estat\u00edsticas n\u00e3o est\u00e1 habilitada para coletar o tempo de processamento para o conector undertow <strong>{0}</strong> do servidor <strong>{1}</strong>. Voc\u00ea pode habilit\u00e1-lo clicando no bot\u00e3o abaixo. Esta a\u00e7\u00e3o ir\u00e1 alterar o atributo <code>record-request-start-time</code> para <code>true</code> do conector <strong>{0}</strong> do servidor <strong>{1}</strong>.
 unknownError=Erro interno
-updateAccountError=Houve um erro ao atualizar a conta de <strong>{0}</strong>. Causa: {1}
+updateAccountError=Houve um erro ao atualizar a conta de {0}. Causa: {1}
 updateAccountKeyQuestion=Voc\u00ea deseja atualizar a conta de <strong>{0}</strong> ?
 updateAccountSuccess=A conta de <strong>{0}</strong> foi atualizada com sucesso.
+verifyRenewError=Houve um erro ao verificar a renova\u00e7\u00e3o do certificado de alias <strong>{0}</strong> do Key Store <strong>{1}</strong>. Causa: {2}
+verifyRenewSuccess=A checagem de renova\u00e7\u00e3o do certificado identificado pelo alias <strong>{0}</strong> do Key Store <strong>{1}</strong> foi verificado com sucesso.
\ No newline at end of file",2018-08-14T22:43:29Z,94
"@@ -96,7 +96,9 @@
 import org.jboss.hal.client.configuration.subsystem.messaging.Mbui_ConnectionView;
 import org.jboss.hal.client.configuration.subsystem.messaging.Mbui_DestinationView;
 import org.jboss.hal.client.configuration.subsystem.messaging.Mbui_MessagingSubsystemView;
+import org.jboss.hal.client.configuration.subsystem.messaging.Mbui_RemoteActiveMQView;
 import org.jboss.hal.client.configuration.subsystem.messaging.MessagingSubsystemPresenter;
+import org.jboss.hal.client.configuration.subsystem.messaging.RemoteActiveMQPresenter;
 import org.jboss.hal.client.configuration.subsystem.microprofile.Mbui_MicroProfileConfigView;
 import org.jboss.hal.client.configuration.subsystem.microprofile.MicroProfileConfigPresenter;
 import org.jboss.hal.client.configuration.subsystem.modcluster.Mbui_ModclusterView;
@@ -518,6 +520,11 @@ protected void configure() {
                 MailSessionView.class,
                 MailSessionPresenter.MyProxy.class);
 
+        bindPresenter(RemoteActiveMQPresenter.class,
+                RemoteActiveMQPresenter.MyView.class,
+                Mbui_RemoteActiveMQView.class,
+                RemoteActiveMQPresenter.MyProxy.class);
+
         bindPresenter(MessagingSubsystemPresenter.class,
                 MessagingSubsystemPresenter.MyView.class,
                 Mbui_MessagingSubsystemView.class,",2018-10-18T15:29:42Z,44
"@@ -23,6 +23,26 @@ interface AddressTemplates {
 
     String MESSAGING_SUBSYSTEM_ADDRESS = ""/{selected.profile}/subsystem=messaging-activemq"";
     AddressTemplate MESSAGING_SUBSYSTEM_TEMPLATE = AddressTemplate.of(MESSAGING_SUBSYSTEM_ADDRESS);
+    AddressTemplate SOCKET_BINDING_TEMPLATE = AddressTemplate.of(""/socket-binding-group=*/socket-binding=*"");
+
+    String CONNECTOR_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/connector=*"";
+    String IN_VM_CONNECTOR_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/in-vm-connector=*"";
+    String HTTP_CONNECTOR_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/http-connector=*"";
+    String REMOTE_CONNECTOR_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/remote-connector=*"";
+    String DISCOVERY_GROUP_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/discovery-group=*"";
+    String CONNECTION_FACTORY_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/connection-factory=*"";
+    String POOLED_CONNECTION_FACTORY_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/pooled-connection-factory=*"";
+    String EXTERNAL_JMS_QUEUE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/external-jms-queue=*"";
+    String EXTERNAL_JMS_TOPIC_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/external-jms-topic=*"";
+    AddressTemplate CONNECTOR_REMOTE_TEMPLATE = AddressTemplate.of(CONNECTOR_REMOTE_ADDRESS);
+    AddressTemplate IN_VM_CONNECTOR_REMOTE_TEMPLATE = AddressTemplate.of(IN_VM_CONNECTOR_REMOTE_ADDRESS);
+    AddressTemplate HTTP_CONNECTOR_REMOTE_TEMPLATE = AddressTemplate.of(HTTP_CONNECTOR_REMOTE_ADDRESS);
+    AddressTemplate REMOTE_CONNECTOR_REMOTE_TEMPLATE = AddressTemplate.of(REMOTE_CONNECTOR_REMOTE_ADDRESS);
+    AddressTemplate DISCOVERY_GROUP_REMOTE_TEMPLATE = AddressTemplate.of(DISCOVERY_GROUP_REMOTE_ADDRESS);
+    AddressTemplate CONNECTION_FACTORY_REMOTE_TEMPLATE = AddressTemplate.of(CONNECTION_FACTORY_REMOTE_ADDRESS);
+    AddressTemplate POOLED_CONNECTION_FACTORY_REMOTE_TEMPLATE = AddressTemplate.of(POOLED_CONNECTION_FACTORY_REMOTE_ADDRESS);
+    AddressTemplate EXTERNAL_JMS_QUEUE_TEMPLATE = AddressTemplate.of(EXTERNAL_JMS_QUEUE_ADDRESS);
+    AddressTemplate EXTERNAL_JMS_TOPIC_TEMPLATE = AddressTemplate.of(EXTERNAL_JMS_TOPIC_ADDRESS);
 
     String SERVER_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/server=*"";
     String SELECTED_SERVER_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/server="" + SELECTION_EXPRESSION;",2018-10-18T15:29:42Z,127
"@@ -49,6 +49,12 @@ public MessagingCategoryColumn(Finder finder,
                         .action(itemActionFactory.view(places.selectedProfile(NameTokens.MESSAGING).build()))
                         .onPreview(new MessagingSubsystemPreview(crud, resources))
                         .build(),
+                new StaticItem.Builder(resources.constants().remoteActiveMQServer())
+                        .id(Ids.MESSAGING_REMOTE_ACTIVEMQ)
+                        .action(itemActionFactory.view(places.selectedProfile(NameTokens.MESSAGING_REMOTE_ACTIVEMQ).build()))
+                        .onPreview(new PreviewContent<>(Names.MESSAGING_REMOTE_ACTIVEMQ,
+                                resources.previews().configurationMessagingRemoteActiveMQ()))
+                        .build(),
                 new StaticItem.Builder(Names.SERVER)
                         .nextColumn(Ids.MESSAGING_SERVER_CONFIGURATION)
                         .onPreview(new PreviewContent<>(Names.SERVER,",2018-10-18T15:29:42Z,128
"@@ -0,0 +1,229 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.messaging;
+
+import java.util.List;
+import java.util.Map;
+
+import javax.inject.Inject;
+
+import com.google.web.bindery.event.shared.EventBus;
+import com.gwtplatform.mvp.client.annotations.NameToken;
+import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
+import com.gwtplatform.mvp.client.proxy.ProxyPlace;
+import org.jboss.hal.ballroom.autocomplete.ReadChildrenAutoComplete;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.core.CrudOperations;
+import org.jboss.hal.core.finder.Finder;
+import org.jboss.hal.core.finder.FinderPath;
+import org.jboss.hal.core.finder.FinderPathFactory;
+import org.jboss.hal.core.mbui.MbuiPresenter;
+import org.jboss.hal.core.mbui.MbuiView;
+import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
+import org.jboss.hal.core.mbui.dialog.NameItem;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.core.mvp.SupportsExpertMode;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.MetadataRegistry;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.meta.token.NameTokens;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Requires;
+
+import static java.util.Arrays.asList;
+import static org.jboss.hal.client.configuration.subsystem.messaging.AddressTemplates.*;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
+
+public class RemoteActiveMQPresenter
+        extends MbuiPresenter<RemoteActiveMQPresenter.MyView, RemoteActiveMQPresenter.MyProxy>
+        implements SupportsExpertMode {
+
+    private MetadataRegistry metadataRegistry;
+    private final Dispatcher dispatcher;
+    private CrudOperations crud;
+    private FinderPathFactory finderPathFactory;
+    protected final StatementContext statementContext;
+    private Resources resources;
+
+    @Inject
+    public RemoteActiveMQPresenter(
+            EventBus eventBus,
+            RemoteActiveMQPresenter.MyView view,
+            RemoteActiveMQPresenter.MyProxy myProxy,
+            Finder finder,
+            MetadataRegistry metadataRegistry,
+            Dispatcher dispatcher,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext,
+            Resources resources) {
+        super(eventBus, view, myProxy, finder);
+        this.metadataRegistry = metadataRegistry;
+        this.dispatcher = dispatcher;
+        this.crud = crud;
+        this.finderPathFactory = finderPathFactory;
+        this.statementContext = statementContext;
+        this.resources = resources;
+    }
+
+    @Override
+    protected void onBind() {
+        super.onBind();
+        getView().setPresenter(this);
+    }
+
+    @Override
+    public ResourceAddress resourceAddress() {
+        return MESSAGING_SUBSYSTEM_TEMPLATE.resolve(statementContext);
+    }
+
+    @Override
+    public FinderPath finderPath() {
+        return finderPathFactory.configurationSubsystemPath(MESSAGING_ACTIVEMQ)
+                .append(Ids.MESSAGING_CATEGORY, Ids.MESSAGING_REMOTE_ACTIVEMQ,
+                        resources.constants().category(), Names.CONNECTIONS);
+    }
+
+    @Override
+    protected void reload() {
+        ResourceAddress address = MESSAGING_SUBSYSTEM_TEMPLATE.resolve(statementContext);
+        crud.readChildren(address, asList(CONNECTOR, IN_VM_CONNECTOR, HTTP_CONNECTOR, REMOTE_CONNECTOR, DISCOVERY_GROUP,
+                CONNECTION_FACTORY, POOLED_CONNECTION_FACTORY, EXTERNAL_JMS_QUEUE, EXTERNAL_JMS_TOPIC),
+                result -> {
+                    int i = 0;
+                    getView().updateConnector(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateInVmConnector(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateHttpConnector(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateRemoteConnector(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateDiscoveryGroup(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateConnectionFactory(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updatePooledConnectionFactory(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateExternalQueue(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateExternalTopic(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                });
+    }
+
+    void addHttpConnector() {
+        Metadata metadata = metadataRegistry.lookup(HTTP_CONNECTOR_REMOTE_TEMPLATE);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(HTTP_CONNECTOR, Ids.ADD), metadata)
+                .unboundFormItem(new NameItem(), 0)
+                .fromRequestProperties()
+                .requiredOnly()
+                .build();
+        form.getFormItem(SOCKET_BINDING).registerSuggestHandler(
+                new ReadChildrenAutoComplete(dispatcher, statementContext,
+                        AddressTemplate.of(""/socket-binding-group=*/socket-binding=*"")));
+
+        new AddResourceDialog(Names.HTTP_CONNECTOR, form, (name, model) -> {
+            crud.add(Names.HTTP_CONNECTOR, name, HTTP_CONNECTOR_REMOTE_TEMPLATE, model, (n, a) -> reload());
+        }).show();
+    }
+
+    void addRemoteConnector() {
+        Metadata metadata = metadataRegistry.lookup(REMOTE_CONNECTOR_REMOTE_TEMPLATE);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(REMOTE_CONNECTOR, Ids.ADD), metadata)
+                .unboundFormItem(new NameItem(), 0)
+                .fromRequestProperties()
+                .requiredOnly()
+                .build();
+        form.getFormItem(SOCKET_BINDING).registerSuggestHandler(
+                new ReadChildrenAutoComplete(dispatcher, statementContext,
+                        AddressTemplate.of(""/socket-binding-group=*/socket-binding=*"")));
+
+        new AddResourceDialog(Names.REMOTE_CONNECTOR, form, (name, model) -> {
+            crud.add(Names.REMOTE_CONNECTOR, name, REMOTE_CONNECTOR_REMOTE_TEMPLATE, model, (n, a) -> reload());
+        }).show();
+    }
+
+    void addConnectionFactory(RemoteActiveMQSubResource ssr) {
+        Metadata metadata = metadataRegistry.lookup(ssr.template);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(ssr.baseId, Ids.ADD), metadata)
+                .unboundFormItem(new NameItem(), 0)
+                .fromRequestProperties()
+                .include(ENTRIES, DISCOVERY_GROUP, CONNECTORS)
+                .unsorted()
+                .build();
+
+        List<AddressTemplate> connectors = asList(CONNECTOR_REMOTE_TEMPLATE, IN_VM_CONNECTOR_REMOTE_TEMPLATE,
+                HTTP_CONNECTOR_REMOTE_TEMPLATE, REMOTE_CONNECTOR_REMOTE_TEMPLATE);
+
+        form.getFormItem(CONNECTORS).registerSuggestHandler(
+                new ReadChildrenAutoComplete(dispatcher, statementContext, connectors));
+        form.getFormItem(DISCOVERY_GROUP).registerSuggestHandler(
+                new ReadChildrenAutoComplete(dispatcher, statementContext, DISCOVERY_GROUP_REMOTE_TEMPLATE));
+
+        new AddResourceDialog(resources.messages().addResourceTitle(ssr.type), form, (name, model) -> {
+            ResourceAddress address = ssr.template.resolve(statementContext, name);
+            crud.add(ssr.type, name, address, model, (n, a) -> reload());
+        }).show();
+    }
+
+    ResourceAddress pooledConnectionFactoryAddress(String resource) {
+        return resource != null ? POOLED_CONNECTION_FACTORY_REMOTE_TEMPLATE.resolve(statementContext, resource) : null;
+    }
+
+
+    void add(RemoteActiveMQSubResource ssr) {
+        ssr.add(metadataRegistry, statementContext, crud, resources, (n, a) -> reload());
+    }
+
+    void save(RemoteActiveMQSubResource ssr, Form<NamedNode> form, Map<String, Object> changedValues) {
+        ssr.save(form, changedValues, metadataRegistry, statementContext, crud, this::reload);
+    }
+
+    void reset(RemoteActiveMQSubResource ssr, Form<NamedNode> form) {
+        ssr.reset(form, metadataRegistry, statementContext, crud, new Form.FinishReset<NamedNode>(form) {
+            @Override
+            public void afterReset(final Form<NamedNode> form) {
+                reload();
+            }
+        });
+    }
+
+    void remove(RemoteActiveMQSubResource ssr, NamedNode item) {
+        ssr.remove(item, statementContext, crud, this::reload);
+    }
+    // @formatter:off
+    @ProxyCodeSplit
+    @Requires({CONNECTOR_REMOTE_ADDRESS, IN_VM_CONNECTOR_REMOTE_ADDRESS, HTTP_CONNECTOR_REMOTE_ADDRESS,
+            REMOTE_CONNECTOR_REMOTE_ADDRESS, DISCOVERY_GROUP_REMOTE_ADDRESS, CONNECTION_FACTORY_REMOTE_ADDRESS,
+            POOLED_CONNECTION_FACTORY_REMOTE_ADDRESS, EXTERNAL_JMS_QUEUE_ADDRESS, EXTERNAL_JMS_TOPIC_ADDRESS
+    })
+    @NameToken(NameTokens.MESSAGING_REMOTE_ACTIVEMQ)
+    public interface MyProxy extends ProxyPlace<RemoteActiveMQPresenter> {
+    }
+
+    public interface MyView extends MbuiView<RemoteActiveMQPresenter> {
+        void updateConnector(List<NamedNode> connectors);
+        void updateInVmConnector(List<NamedNode> inVmConnectors);
+        void updateHttpConnector(List<NamedNode> httpConnectors);
+        void updateRemoteConnector(List<NamedNode> remoteConnectors);
+        void updateDiscoveryGroup(List<NamedNode> connectorServices);
+        void updateConnectionFactory(List<NamedNode> connectionFactories);
+        void updatePooledConnectionFactory(List<NamedNode> pooledConnectionFactories);
+        void updateExternalQueue(List<NamedNode> nodes);
+        void updateExternalTopic(List<NamedNode> nodes);
+    }
+    // @formatter:on
+}",2018-10-18T15:29:42Z,129
"@@ -0,0 +1,111 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.messaging;
+
+import java.util.Map;
+
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.core.CrudOperations;
+import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
+import org.jboss.hal.dmr.ModelDescriptionConstants;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.MetadataRegistry;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Callback;
+
+import static org.jboss.hal.dmr.ModelDescriptionConstants.EXTERNAL_JMS_QUEUE;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.EXTERNAL_JMS_TOPIC;
+
+enum RemoteActiveMQSubResource {
+
+    CONNECTION_FACTORY(Ids.MESSAGING_CONNECTION_FACTORY, Names.CONNECTION_FACTORY,
+            ModelDescriptionConstants.CONNECTION_FACTORY, AddressTemplates.CONNECTION_FACTORY_REMOTE_TEMPLATE),
+
+    CONNECTOR(Ids.MESSAGING_CONNECTOR, Names.GENERIC_CONNECTOR,
+            ModelDescriptionConstants.CONNECTOR, AddressTemplates.CONNECTOR_REMOTE_TEMPLATE),
+
+    DISCOVERY_GROUP(Ids.MESSAGING_DISCOVERY_GROUP, Names.DISCOVERY_GROUP,
+            ModelDescriptionConstants.DISCOVERY_GROUP, AddressTemplates.DISCOVERY_GROUP_REMOTE_TEMPLATE),
+
+    EXTERNAL_QUEUE(EXTERNAL_JMS_QUEUE, Names.EXTERNAL_JMS_QUEUE,
+            EXTERNAL_JMS_QUEUE, AddressTemplates.EXTERNAL_JMS_QUEUE_TEMPLATE),
+
+    EXTERNAL_TOPIC(EXTERNAL_JMS_TOPIC, Names.EXTERNAL_JMS_TOPIC,
+            EXTERNAL_JMS_TOPIC, AddressTemplates.EXTERNAL_JMS_TOPIC_TEMPLATE),
+
+    HTTP_CONNECTOR(Ids.MESSAGING_HTTP_CONNECTOR, Names.HTTP_CONNECTOR,
+            ModelDescriptionConstants.HTTP_CONNECTOR, AddressTemplates.HTTP_CONNECTOR_REMOTE_TEMPLATE),
+
+    IN_VM_CONNECTOR(Ids.MESSAGING_IN_VM_CONNECTOR, Names.IN_VM_CONNECTOR,
+            ModelDescriptionConstants.IN_VM_CONNECTOR, AddressTemplates.IN_VM_CONNECTOR_REMOTE_TEMPLATE),
+
+    POOLED_CONNECTION_FACTORY(Ids.MESSAGING_POOLED_CONNECTION_FACTORY, Names.POOLED_CONNECTION_FACTORY,
+            ModelDescriptionConstants.POOLED_CONNECTION_FACTORY, AddressTemplates.POOLED_CONNECTION_FACTORY_REMOTE_TEMPLATE),
+
+    REMOTE_CONNECTOR(Ids.MESSAGING_REMOTE_CONNECTOR, Names.REMOTE_CONNECTOR,
+            ModelDescriptionConstants.REMOTE_CONNECTOR, AddressTemplates.REMOTE_CONNECTOR_REMOTE_TEMPLATE);
+
+
+    final String baseId;
+    final String type;
+    final String resource;
+    final AddressTemplate template;
+
+    RemoteActiveMQSubResource(final String baseId, final String type, final String resource, final AddressTemplate template) {
+        this.baseId = baseId;
+        this.type = type;
+        this.resource = resource;
+        this.template = template;
+    }
+
+    void add(MetadataRegistry metadataRegistry, StatementContext statementContext,
+            CrudOperations crud, Resources resources, CrudOperations.AddCallback callback) {
+        Metadata metadata = metadataRegistry.lookup(template);
+        new AddResourceDialog(Ids.build(baseId, Ids.ADD), resources.messages().addResourceTitle(type), metadata,
+                (name, model) -> {
+                    ResourceAddress address = template.resolve(statementContext, name);
+                    crud.add(type, name, address, model, callback);
+                }).show();
+    }
+
+    void save(Form<NamedNode> form, Map<String, Object> changedValues, MetadataRegistry metadataRegistry,
+            StatementContext statementContext, CrudOperations crud, Callback callback) {
+        String name = form.getModel().getName();
+        ResourceAddress address = template.resolve(statementContext, name);
+        Metadata metadata = metadataRegistry.lookup(template);
+        crud.save(type, name, address, changedValues, metadata, callback);
+    }
+
+    void reset(Form<NamedNode> form, MetadataRegistry metadataRegistry, StatementContext statementContext,
+            CrudOperations crud, Callback callback) {
+        String name = form.getModel().getName();
+        ResourceAddress address = template.resolve(statementContext, name);
+        Metadata metadata = metadataRegistry.lookup(template);
+        crud.reset(type, name, address, form, metadata, callback);
+    }
+
+    void remove(NamedNode item, StatementContext statementContext, CrudOperations crud, Callback callback) {
+        String name = item.getName();
+        ResourceAddress address = template.resolve(statementContext, name);
+        crud.remove(type, name, address, callback);
+    }
+}",2018-10-18T15:29:42Z,130
"@@ -0,0 +1,250 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.messaging;
+
+import java.util.List;
+
+import javax.annotation.PostConstruct;
+
+import elemental2.dom.HTMLElement;
+import org.jboss.hal.ballroom.Tabs;
+import org.jboss.hal.ballroom.VerticalNavigation;
+import org.jboss.hal.ballroom.autocomplete.ReadChildrenAutoComplete;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.table.Scope;
+import org.jboss.hal.ballroom.table.Table;
+import org.jboss.hal.core.elytron.CredentialReference;
+import org.jboss.hal.core.mbui.MbuiContext;
+import org.jboss.hal.core.mbui.MbuiViewImpl;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.core.mbui.form.RequireAtLeastOneAttributeValidation;
+import org.jboss.hal.core.mbui.table.ModelNodeTable;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.security.Constraint;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.spi.MbuiElement;
+import org.jboss.hal.spi.MbuiView;
+
+import static java.util.Arrays.asList;
+import static org.jboss.gwt.elemento.core.Elements.h;
+import static org.jboss.gwt.elemento.core.Elements.p;
+import static org.jboss.gwt.elemento.core.Elements.section;
+import static org.jboss.hal.client.configuration.subsystem.messaging.AddressTemplates.*;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafeGet;
+import static org.jboss.hal.resources.CSS.pfIcon;
+import static org.jboss.hal.resources.Ids.MESSAGING_REMOTE_ACTIVEMQ;
+
+@MbuiView
+public abstract class RemoteActiveMQView extends MbuiViewImpl<RemoteActiveMQPresenter>
+        implements RemoteActiveMQPresenter.MyView {
+
+    public static RemoteActiveMQView create(MbuiContext mbuiContext) {
+        return new Mbui_RemoteActiveMQView(mbuiContext);
+    }
+
+    @MbuiElement(""msg-remote-connection-vertical-navigation"") VerticalNavigation navigation;
+    @MbuiElement(""msg-remote-connector-table"") Table<NamedNode> connectorTable;
+    @MbuiElement(""msg-remote-connector-form"") Form<NamedNode> connectorForm;
+    @MbuiElement(""msg-remote-in-vm-connector-table"") Table<NamedNode> inVmConnectorTable;
+    @MbuiElement(""msg-remote-in-vm-connector-form"") Form<NamedNode> inVmConnectorForm;
+    @MbuiElement(""msg-remote-http-connector-table"") Table<NamedNode> httpConnectorTable;
+    @MbuiElement(""msg-remote-http-connector-form"") Form<NamedNode> httpConnectorForm;
+    @MbuiElement(""msg-remote-remote-connector-table"") Table<NamedNode> remoteConnectorTable;
+    @MbuiElement(""msg-remote-remote-connector-form"") Form<NamedNode> remoteConnectorForm;
+    @MbuiElement(""msg-remote-discovery-group-table"") Table<NamedNode> discoveryGroupTable;
+    @MbuiElement(""msg-remote-discovery-group-form"") Form<NamedNode> discoveryGroupForm;
+    @MbuiElement(""msg-remote-connection-factory-table"") Table<NamedNode> connectionFactoryTable;
+    @MbuiElement(""msg-remote-connection-factory-form"") Form<NamedNode> connectionFactoryForm;
+    @MbuiElement(""msg-remote-external-queue-table"") Table<NamedNode> externalQueueTable;
+    @MbuiElement(""msg-remote-external-queue-form"") Form<NamedNode> externalQueueForm;
+    @MbuiElement(""msg-remote-external-topic-table"") Table<NamedNode> externalTopicTable;
+    @MbuiElement(""msg-remote-external-topic-form"") Form<NamedNode> externalTopicForm;
+    private Table<NamedNode> pooledConnectionFactoryTable;
+    private Form<NamedNode> pooledConnectionFactoryForm;
+    private CredentialReference cr;
+    private Form<ModelNode> crForm;
+
+    RemoteActiveMQView(MbuiContext mbuiContext) {
+        super(mbuiContext);
+        cr = new CredentialReference(mbuiContext.eventBus(), mbuiContext.dispatcher(), mbuiContext.ca(),
+                mbuiContext.resources());
+    }
+
+    @PostConstruct
+    void init() {
+        Metadata metadata = mbuiContext.metadataRegistry().lookup(POOLED_CONNECTION_FACTORY_REMOTE_TEMPLATE);
+        crForm = cr.form(Ids.MESSAGING_REMOTE_ACTIVEMQ, metadata, CREDENTIAL_REFERENCE, PASSWORD,
+                () -> pooledConnectionFactoryForm.<String>getFormItem(PASSWORD).getValue(),
+                () -> presenter.pooledConnectionFactoryAddress(
+                        pooledConnectionFactoryTable.hasSelection() ? pooledConnectionFactoryTable.selectedRow()
+                                .getName() : null),
+                () -> presenter.reload());
+        crForm.addFormValidation(
+                new RequireAtLeastOneAttributeValidation<>(asList(STORE, CLEAR_TEXT), mbuiContext.resources()));
+
+        pooledConnectionFactoryTable = new ModelNodeTable.Builder<NamedNode>(
+                Ids.build(MESSAGING_REMOTE_ACTIVEMQ, POOLED_CONNECTION_FACTORY, Ids.TABLE), metadata)
+                .button(mbuiContext.resources().constants().add(),
+                        table -> presenter.addConnectionFactory(RemoteActiveMQSubResource.POOLED_CONNECTION_FACTORY),
+                        Constraint.executable(POOLED_CONNECTION_FACTORY_TEMPLATE, ADD))
+                .button(mbuiContext.resources().constants().remove(),
+                        table -> presenter.remove(RemoteActiveMQSubResource.POOLED_CONNECTION_FACTORY, table.selectedRow()),
+                        Scope.SELECTED,
+                        Constraint.executable(POOLED_CONNECTION_FACTORY_TEMPLATE, REMOVE))
+                .column(NAME, (cell, type, row, meta) -> row.getName())
+                .build();
+
+        pooledConnectionFactoryForm = new ModelNodeForm.Builder<NamedNode>(
+                Ids.build(Ids.MESSAGING_POOLED_CONNECTION_FACTORY, Ids.FORM), metadata)
+                .onSave((form, changedValues) -> presenter
+                        .save(RemoteActiveMQSubResource.POOLED_CONNECTION_FACTORY, form, changedValues))
+                .prepareReset(form -> presenter.reset(RemoteActiveMQSubResource.POOLED_CONNECTION_FACTORY, form))
+                .build();
+        pooledConnectionFactoryForm.addFormValidation(
+                new CredentialReference.AlternativeValidation<>(PASSWORD, () -> crForm.getModel(),
+                        mbuiContext.resources()));
+
+        Tabs tabs = new Tabs(Ids.build(Ids.MESSAGING_REMOTE_ACTIVEMQ, POOLED_CONNECTION_FACTORY, Ids.TAB_CONTAINER));
+        tabs.add(Ids.build(Ids.MESSAGING_REMOTE_ACTIVEMQ, POOLED_CONNECTION_FACTORY, ATTRIBUTES, Ids.TAB),
+                mbuiContext.resources().constants().attributes(), pooledConnectionFactoryForm.asElement());
+        tabs.add(Ids.build(Ids.MESSAGING_REMOTE_ACTIVEMQ, POOLED_CONNECTION_FACTORY, CREDENTIAL_REFERENCE, Ids.TAB),
+                Names.CREDENTIAL_REFERENCE, crForm.asElement());
+
+        HTMLElement htmlSection = section()
+                .add(h(1).textContent(Names.POOLED_CONNECTION_FACTORY))
+                .add(p().textContent(metadata.getDescription().getDescription()))
+                .add(pooledConnectionFactoryTable)
+                .add(tabs)
+                .asElement();
+
+        registerAttachable(pooledConnectionFactoryTable, pooledConnectionFactoryForm, crForm);
+
+        String primId = Ids.build(MESSAGING_REMOTE_ACTIVEMQ, POOLED_CONNECTION_FACTORY, Ids.ITEM);
+        navigation.insertPrimary(primId, null, Names.POOLED_CONNECTION_FACTORY, pfIcon(""replicator""), htmlSection);
+
+    }
+
+    @Override
+    public void attach() {
+        super.attach();
+
+        pooledConnectionFactoryTable.bindForm(pooledConnectionFactoryForm);
+        pooledConnectionFactoryTable.onSelectionChange(t -> {
+            if (t.hasSelection()) {
+                crForm.view(failSafeGet(t.selectedRow(), CREDENTIAL_REFERENCE));
+            }
+        });
+    }
+
+    @Override
+    public void setPresenter(RemoteActiveMQPresenter presenter) {
+        super.setPresenter(presenter);
+
+        // register the suggestion handlers here rather than in a @PostConstruct method
+        // they need a valid presenter reference!
+        List<AddressTemplate> connectors = asList(CONNECTOR_REMOTE_TEMPLATE, IN_VM_CONNECTOR_REMOTE_TEMPLATE,
+                HTTP_CONNECTOR_REMOTE_TEMPLATE, REMOTE_CONNECTOR_REMOTE_TEMPLATE);
+
+        connectionFactoryForm.getFormItem(CONNECTORS).registerSuggestHandler(
+                new ReadChildrenAutoComplete(mbuiContext.dispatcher(), presenter.statementContext, connectors));
+        connectionFactoryForm.getFormItem(DISCOVERY_GROUP).registerSuggestHandler(
+                new ReadChildrenAutoComplete(mbuiContext.dispatcher(), presenter.statementContext,
+                        DISCOVERY_GROUP_REMOTE_TEMPLATE));
+
+        pooledConnectionFactoryForm.getFormItem(CONNECTORS).registerSuggestHandler(
+                new ReadChildrenAutoComplete(mbuiContext.dispatcher(), presenter.statementContext, connectors));
+        pooledConnectionFactoryForm.getFormItem(DISCOVERY_GROUP).registerSuggestHandler(
+                new ReadChildrenAutoComplete(mbuiContext.dispatcher(), presenter.statementContext,
+                        DISCOVERY_GROUP_REMOTE_TEMPLATE));
+
+
+        connectorForm.getFormItem(SOCKET_BINDING).registerSuggestHandler(new ReadChildrenAutoComplete(
+                mbuiContext.dispatcher(), statementContext(), SOCKET_BINDING_TEMPLATE));
+
+        discoveryGroupForm.getFormItem(SOCKET_BINDING).registerSuggestHandler(new ReadChildrenAutoComplete(
+                mbuiContext.dispatcher(), statementContext(), SOCKET_BINDING_TEMPLATE));
+
+        remoteConnectorForm.getFormItem(SOCKET_BINDING).registerSuggestHandler(new ReadChildrenAutoComplete(
+                mbuiContext.dispatcher(), statementContext(), SOCKET_BINDING_TEMPLATE));
+
+        httpConnectorForm.getFormItem(SOCKET_BINDING).registerSuggestHandler(new ReadChildrenAutoComplete(
+                mbuiContext.dispatcher(), statementContext(), SOCKET_BINDING_TEMPLATE));
+    }
+
+    @Override
+    public void updateConnector(List<NamedNode> connectors) {
+        connectorForm.clear();
+        connectorTable.update(connectors);
+        navigation.updateBadge(""msg-remote-connector-item"", connectors.size());
+    }
+
+    @Override
+    public void updateInVmConnector(List<NamedNode> inVmConnectors) {
+        inVmConnectorForm.clear();
+        inVmConnectorTable.update(inVmConnectors);
+        navigation.updateBadge(""msg-remote-in-vm-connector-item"", inVmConnectors.size());
+    }
+
+    @Override
+    public void updateHttpConnector(List<NamedNode> httpConnectors) {
+        httpConnectorForm.clear();
+        httpConnectorTable.update(httpConnectors);
+        navigation.updateBadge(""msg-remote-http-connector-item"", httpConnectors.size());
+    }
+
+    @Override
+    public void updateRemoteConnector(List<NamedNode> remoteConnectors) {
+        remoteConnectorForm.clear();
+        remoteConnectorTable.update(remoteConnectors);
+        navigation.updateBadge(""msg-remote-remote-connector-item"", remoteConnectors.size());
+    }
+
+    @Override
+    public void updateDiscoveryGroup(List<NamedNode> nodes) {
+        discoveryGroupForm.clear();
+        discoveryGroupTable.update(nodes);
+    }
+
+    @Override
+    public void updateConnectionFactory(List<NamedNode> connectionFactories) {
+        connectionFactoryForm.clear();
+        connectionFactoryTable.update(connectionFactories);
+    }
+
+    @Override
+    public void updatePooledConnectionFactory(List<NamedNode> pooledConnectionFactories) {
+        crForm.clear();
+        pooledConnectionFactoryForm.clear();
+        pooledConnectionFactoryTable.update(pooledConnectionFactories);
+    }
+
+    @Override
+    public void updateExternalQueue(List<NamedNode> nodes) {
+        externalQueueForm.clear();
+        externalQueueTable.update(nodes);
+    }
+
+    @Override
+    public void updateExternalTopic(List<NamedNode> nodes) {
+        externalTopicForm.clear();
+        externalTopicTable.update(nodes);
+    }
+}",2018-10-18T15:29:42Z,131
"@@ -0,0 +1,207 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<?xml-model href=""https://raw.githubusercontent.com/hal/hal.next/develop/spi/src/main/resources/org/jboss/hal/spi/MbuiView.rng"" schematypens=""http://relaxng.org/ns/structure/1.0""?>
+<!--
+  ~ Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<view>
+    <vertical-navigation id=""msg-remote-connection-vertical-navigation"">
+
+        <item id=""msg-remote-connector-group-item"" title=""Connector"" icon=""fa fa-link"">
+            <sub-item id=""msg-remote-connector-item"" title=""Generic"">
+                <metadata address=""/{selected.profile}/subsystem=messaging-activemq/connector=*"">
+                    <h1>Generic Connector</h1>
+                    <p>${metadata.getDescription().getDescription()}</p>
+                    <table id=""msg-remote-connector-table"" title=""Generic Connector"" form-ref=""msg-remote-connector-form"">
+                        <actions>
+                            <action title=""${mbuiContext.resources().constants().add()}""
+                                    handler=""${presenter.add(RemoteActiveMQSubResource.CONNECTOR)}"" constraint=""add""/>
+                            <action title=""${mbuiContext.resources().constants().remove()}""
+                                    handler=""${presenter.remove(RemoteActiveMQSubResource.CONNECTOR, table.selectedRow())}""
+                                    scope=""selected"" constraint=""remove""/>
+                        </actions>
+                        <columns>
+                            <column name=""name"" value=""${row.getName()}""/>
+                        </columns>
+                    </table>
+                    <form id=""msg-remote-connector-form"" title=""Generic Connector""
+                          on-save=""${presenter.save(RemoteActiveMQSubResource.CONNECTOR, form, changedValues)}""
+                          prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.CONNECTOR, form)}""/>
+
+                </metadata>
+            </sub-item>
+            <sub-item id=""msg-remote-in-vm-connector-item"" title=""In VM"">
+                <metadata address=""/{selected.profile}/subsystem=messaging-activemq/in-vm-connector=*"">
+                    <h1>In VM Connector</h1>
+                    <p>${metadata.getDescription().getDescription()}</p>
+                    <table id=""msg-remote-in-vm-connector-table"" title=""In VM Connector""
+                           form-ref=""msg-remote-in-vm-connector-form"">
+                        <actions>
+                            <action title=""${mbuiContext.resources().constants().add()}""
+                                    handler=""${presenter.add(RemoteActiveMQSubResource.IN_VM_CONNECTOR)}"" constraint=""add""/>
+                            <action title=""${mbuiContext.resources().constants().remove()}""
+                                    handler=""${presenter.remove(RemoteActiveMQSubResource.IN_VM_CONNECTOR, table.selectedRow())}""
+                                    scope=""selected"" constraint=""remove""/>
+                        </actions>
+                        <columns>
+                            <column name=""name"" value=""${row.getName()}""/>
+                            <column name=""server-id""/>
+                        </columns>
+                    </table>
+                    <form id=""msg-remote-in-vm-connector-form"" title=""In VM Connector""
+                          on-save=""${presenter.save(RemoteActiveMQSubResource.IN_VM_CONNECTOR, form, changedValues)}""
+                          prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.IN_VM_CONNECTOR, form)}""/>
+                </metadata>
+            </sub-item>
+            <sub-item id=""msg-remote-http-connector-item"" title=""HTTP"">
+                <metadata address=""/{selected.profile}/subsystem=messaging-activemq/http-connector=*"">
+                    <h1>HTTP Connector</h1>
+                    <p>${metadata.getDescription().getDescription()}</p>
+                    <table id=""msg-remote-http-connector-table"" title=""HTTP Connector""
+                           form-ref=""msg-remote-http-connector-form"">
+                        <actions>
+                            <action title=""${mbuiContext.resources().constants().add()}""
+                                    handler=""${presenter.addHttpConnector()}"" constraint=""add""/>
+                            <action title=""${mbuiContext.resources().constants().remove()}""
+                                    handler=""${presenter.remove(RemoteActiveMQSubResource.HTTP_CONNECTOR, table.selectedRow())}""
+                                    scope=""selected"" constraint=""remove""/>
+                        </actions>
+                        <columns>
+                            <column name=""name"" value=""${row.getName()}""/>
+                        </columns>
+                    </table>
+                    <form id=""msg-remote-http-connector-form"" title=""HTTP Connector""
+                          on-save=""${presenter.save(RemoteActiveMQSubResource.HTTP_CONNECTOR, form, changedValues)}""
+                          prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.HTTP_CONNECTOR, form)}""/>
+                </metadata>
+            </sub-item>
+            <sub-item id=""msg-remote-remote-connector-item"" title=""Remote"">
+                <metadata address=""/{selected.profile}/subsystem=messaging-activemq/remote-connector=*"">
+                    <h1>Remote Connector</h1>
+                    <p>${metadata.getDescription().getDescription()}</p>
+                    <table id=""msg-remote-remote-connector-table"" title=""Remote Connector""
+                           form-ref=""msg-remote-remote-connector-form"">
+                        <actions>
+                            <action title=""${mbuiContext.resources().constants().add()}""
+                                    handler=""${presenter.addRemoteConnector()}""
+                                    constraint=""add""/>
+                            <action title=""${mbuiContext.resources().constants().remove()}""
+                                    handler=""${presenter.remove(RemoteActiveMQSubResource.REMOTE_CONNECTOR, table.selectedRow())}""
+                                    scope=""selected"" constraint=""remove""/>
+                        </actions>
+                        <columns>
+                            <column name=""name"" value=""${row.getName()}""/>
+                        </columns>
+                    </table>
+                    <form id=""msg-remote-remote-connector-form"" title=""Remote Connector""
+                          on-save=""${presenter.save(RemoteActiveMQSubResource.REMOTE_CONNECTOR, form, changedValues)}""
+                          prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.REMOTE_CONNECTOR, form)}"" />
+                </metadata>
+            </sub-item>
+        </item>
+
+        <item id=""msg-remote-discovery-group-item"" title=""Discovery Group"" icon=""pficon pficon-service"">
+            <metadata address=""/{selected.profile}/subsystem=messaging-activemq/discovery-group=*"">
+                <h1>Discovery Group</h1>
+                <p>${metadata.getDescription().getDescription()}</p>
+                <table id=""msg-remote-discovery-group-table"" title=""Discovery Group""
+                       form-ref=""msg-remote-discovery-group-form"">
+                    <actions>
+                        <action title=""${mbuiContext.resources().constants().add()}""
+                                handler=""${presenter.add(RemoteActiveMQSubResource.DISCOVERY_GROUP)}"" constraint=""add""/>
+                        <action title=""${mbuiContext.resources().constants().remove()}""
+                                handler=""${presenter.remove(RemoteActiveMQSubResource.DISCOVERY_GROUP, table.selectedRow())}""
+                                scope=""selected"" constraint=""remove""/>
+                    </actions>
+                    <columns>
+                        <column name=""name"" value=""${row.getName()}""/>
+                    </columns>
+                </table>
+                <form id=""msg-remote-discovery-group-form"" title=""Discovery Group""
+                      on-save=""${presenter.save(RemoteActiveMQSubResource.DISCOVERY_GROUP, form, changedValues)}""
+                      prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.DISCOVERY_GROUP, form)}"" />
+            </metadata>
+        </item>
+
+        <item id=""msg-remote-connection-factory-item"" title=""Connection Factory"" icon=""fa fa-cubes"">
+            <metadata address=""/{selected.profile}/subsystem=messaging-activemq/connection-factory=*"">
+                <h1>Connection Factory</h1>
+                <p>${metadata.getDescription().getDescription()}</p>
+                <table id=""msg-remote-connection-factory-table"" title=""Connection Factory""
+                       form-ref=""msg-remote-connection-factory-form"">
+                    <actions>
+                        <action title=""${mbuiContext.resources().constants().add()}""
+                                handler=""${presenter.addConnectionFactory(RemoteActiveMQSubResource.CONNECTION_FACTORY)}"" constraint=""add""/>
+                        <action title=""${mbuiContext.resources().constants().remove()}""
+                                handler=""${presenter.remove(RemoteActiveMQSubResource.CONNECTION_FACTORY, table.selectedRow())}""
+                                scope=""selected"" constraint=""remove""/>
+                    </actions>
+                    <columns>
+                        <column name=""name"" value=""${row.getName()}""/>
+                    </columns>
+                </table>
+                <form id=""msg-remote-connection-factory-form"" title=""Connection Factory""
+                      on-save=""${presenter.save(RemoteActiveMQSubResource.CONNECTION_FACTORY, form, changedValues)}""
+                      prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.CONNECTION_FACTORY, form)}""/>
+            </metadata>
+        </item>
+
+        <item id=""msg-remote-external-queue-item"" title=""External JMS Queue"" icon=""fa fa-long-arrow-right"">
+            <metadata address=""/{selected.profile}/subsystem=messaging-activemq/external-jms-queue=*"">
+                <h1>External JMS Queue</h1>
+                <p>${metadata.getDescription().getDescription()}</p>
+                <table id=""msg-remote-external-queue-table"" title=""External JMS Queue""
+                       form-ref=""msg-remote-external-queue-form"">
+                    <actions>
+                        <action title=""${mbuiContext.resources().constants().add()}""
+                                handler=""${presenter.add(RemoteActiveMQSubResource.EXTERNAL_QUEUE)}"" constraint=""add""/>
+                        <action title=""${mbuiContext.resources().constants().remove()}""
+                                handler=""${presenter.remove(RemoteActiveMQSubResource.EXTERNAL_QUEUE, table.selectedRow())}""
+                                scope=""selected"" constraint=""remove""/>
+                    </actions>
+                    <columns>
+                        <column name=""name"" value=""${row.getName()}""/>
+                    </columns>
+                </table>
+                <form id=""msg-remote-external-queue-form"" title=""External JMS Queue""
+                      on-save=""${presenter.save(RemoteActiveMQSubResource.EXTERNAL_QUEUE, form, changedValues)}""
+                      prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.EXTERNAL_QUEUE, form)}""/>
+            </metadata>
+        </item>
+
+        <item id=""msg-remote-external-topic-item"" title=""External JMS Topic"" icon=""fa fa-arrows"">
+            <metadata address=""/{selected.profile}/subsystem=messaging-activemq/external-jms-topic=*"">
+                <h1>External JMS Topic</h1>
+                <p>${metadata.getDescription().getDescription()}</p>
+                <table id=""msg-remote-external-topic-table"" title=""External JMS Topic""
+                       form-ref=""msg-remote-external-topic-form"">
+                    <actions>
+                        <action title=""${mbuiContext.resources().constants().add()}""
+                                handler=""${presenter.add(RemoteActiveMQSubResource.EXTERNAL_TOPIC)}"" constraint=""add""/>
+                        <action title=""${mbuiContext.resources().constants().remove()}""
+                                handler=""${presenter.remove(RemoteActiveMQSubResource.EXTERNAL_TOPIC, table.selectedRow())}""
+                                scope=""selected"" constraint=""remove""/>
+                    </actions>
+                    <columns>
+                        <column name=""name"" value=""${row.getName()}""/>
+                    </columns>
+                </table>
+                <form id=""msg-remote-external-topic-form"" title=""External JMS Topic""
+                      on-save=""${presenter.save(RemoteActiveMQSubResource.EXTERNAL_TOPIC, form, changedValues)}""
+                      prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.EXTERNAL_TOPIC, form)}""/>
+            </metadata>
+        </item>
+
+    </vertical-navigation>
+</view>
\ No newline at end of file",2018-10-18T15:29:42Z,132
"@@ -80,7 +80,7 @@ public void attach() {
             } else {
                 if (!Strings.isNullOrEmpty(stringValue)) {
                     try {
-                        Long value = Long.parseLong(stringValue);
+                        Long value = Long.parseLong(stringValue.trim());
                         modifyValue(value);
                         logger.debug(""modified value to {}"", value);
                     } catch (NumberFormatException ignored) {
@@ -177,10 +177,12 @@ class NumberValidation implements FormItemValidation<Long> {
 
         @Override
         public ValidationResult validate(Long value) {
-            if (!isExpressionValue() && !isEmpty()) {
+            // use the inputElement.value instead of isEmpty because the isEmpty evaluates the getValue() method
+            // the attach method already bind numbers only values, so this validation would always returns numbers only
+            if (!isExpressionValue() && inputElement.value != null) {
                 try {
                     //noinspection ResultOfMethodCallIgnored
-                    Long.parseLong(inputElement.value);
+                    Long.parseLong(inputElement.value.trim());
                     return ValidationResult.OK;
                 } catch (NumberFormatException e) {
                     return ValidationResult.invalid(CONSTANTS.notANumber());",2018-10-18T15:29:42Z,133
"@@ -294,6 +294,8 @@ public interface ModelDescriptionConstants {
     String EXPRESSION = ""expression"";
     String EXPRESSIONS_ALLOWED = ""expressions-allowed"";
     String EXTENSION_POINT = ""extension-point"";
+    String EXTERNAL_JMS_QUEUE = ""external-jms-queue"";
+    String EXTERNAL_JMS_TOPIC = ""external-jms-topic"";
     String FAILED = ""failed"";
     String FAILED_OPERATION = ""failed-operation"";
     String FAILED_SERVICES = ""failed-services"";",2018-10-18T15:29:42Z,109
"@@ -79,6 +79,7 @@ public interface NameTokens {
     String MANAGEMENT_INTERFACE = ""management-interface"";
     String MANAGEMENT_OPERATIONS = ""management-operations"";
     String MESSAGING = ""messaging"";
+    String MESSAGING_REMOTE_ACTIVEMQ = ""msg-remote-activemq"";
     String MESSAGING_SERVER = ""messaging-server"";
     String MESSAGING_SERVER_CONNECTION = ""messaging-server-connection"";
     String MESSAGING_SERVER_CLUSTERING = ""messaging-server-clustering"";",2018-10-18T15:29:42Z,46
"@@ -462,6 +462,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String reloadCRL();
     String reloadRequired();
     String reloadStandaloneTooltip();
+    String remoteActiveMQServer();
     String remoteAddress();
     String remove();
     String removeAlias();",2018-10-18T15:29:42Z,100
"@@ -493,6 +493,7 @@ public interface Ids {
     String MESSAGING_CORE_QUEUE = ""messaging-core-queue"";
     String MESSAGING_DISCOVERY_GROUP = ""messaging-discovery-group"";
     String MESSAGING_DIVERT = ""messaging-divert"";
+    String MESSAGING_REMOTE_ACTIVEMQ = ""msg-remote-activemq"";
     String MESSAGING_GLOBAL_SETTINGS = ""messaging-global-settings"";
     String MESSAGING_GROUPING_HANDLER = ""messaging-grouping-handler"";
     String MESSAGING_HA_CHOOSE_STRATEGY = ""messaging-ha-choose-strategy"";",2018-10-18T15:29:42Z,111
"@@ -116,6 +116,8 @@ public interface Names {
     String EXPIRATION = ""Expiration"";
     String EXTENSION = ""Extension"";
     String EXTENSIONS = ""Extensions"";
+    String EXTERNAL_JMS_QUEUE = ""External JMS Queue"";
+    String EXTERNAL_JMS_TOPIC = ""External JMS Topic"";
 
     String FACTORIES_TRANSFORMERS = ""Factories / Transformers"";
     String FILE = ""File"";
@@ -225,6 +227,7 @@ public interface Names {
     String MEMORY = ""Memory"";
     String MESSAGE_DRIVEN_BEAN = ""Message Driven Bean"";
     String MESSAGING = ""Messaging"";
+    String MESSAGING_REMOTE_ACTIVEMQ = ""Remote ActiveMQ"";
     String MIME_MAPPING = ""Mime Mapping"";
     String MINIMUM_PERMISSIONS = ""Minimum Permissions"";
     String MISSING_DEPENDENCIES = ""Missing Dependencies"";",2018-10-18T15:29:42Z,112
"@@ -154,6 +154,9 @@ public interface Previews extends ClientBundleWithLookup {
     @Source(""previews/configuration/messaging-destinations.html"")
     ExternalTextResource configurationMessagingDestinations();
 
+    @Source(""previews/configuration/messaging-remote-activemq.html"")
+    ExternalTextResource configurationMessagingRemoteActiveMQ();
+
     @Source(""previews/configuration/messaging-ha-policy.html"")
     ExternalTextResource configurationMessagingHaPolicy();
 ",2018-10-18T15:29:42Z,134
"@@ -420,6 +420,7 @@ reloadCRL=Reload CRL
 reloadRequired=Reload Required
 reloadStandaloneTooltip=The server configuration has changed. Click here to reload the server.
 remoteAddress=Remote Address
+remoteActiveMQServer=Remote ActiveMQ Server
 remove=Remove
 removeAlias=Remove Alias
 removeIdentity=Remove identity",2018-10-18T15:29:42Z,100
"@@ -418,6 +418,7 @@ reloadCRL=Recarregar CRL
 reloadRequired=Recarregamento necess\u00E1rio
 reloadStandaloneTooltip=A configura\u00E7\u00E3o do servidor foi alterada. Clique aqui para recarregar o servidor.
 remoteAddress=Endere\u00E7o remoto
+remoteActiveMQServer=Servidor ActiveMQ Remoto
 remove=Remover
 removeAlias=Remover alias
 removeContent=Remover Conte\u00FAdo",2018-10-18T15:29:42Z,100
"@@ -0,0 +1,26 @@
+<p>Contains the configuration for discover groups, connector, connection factory, queues and topics to a remote ActiveMQ Artemis server:</p>
+
+<h2>Connectors</h2>
+<p>A connector defines how to connect to a remote ActiveMQ Artemis server.</p>
+
+<p>For more information about connectors, see the
+    <a target=""_blank"" href=""https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.1/html/configuring_messaging/acceptors_and_connectors"">Connectors documentation</a>.
+</p>
+
+<h2>Discovery Groups</h2>
+<p>A discovery group defines how connector information is received from a broadcast endpoint, for example, a UDP multicast address or JGroup channel.</p>
+<p>A discovery group maintains a list of connectors, one for each broadcast by a different server. As it receives broadcasts on the broadcast endpoint from a particular server, it updates its entry in the list for that server. If it has not received a broadcast from a particular server for a length of time it will remove that server’s entry from its list.</p>
+
+
+<h2>Connection Factories</h2>
+<p>By default, the ${build.shortName} messaging subsystem provides the <code>InVmConnectionFactory</code> and
+    <code>RemoteConnectionFactory</code> connection factories, as well as the
+    <code>activemq-ra</code> pooled connection factory.
+</p>
+
+<p>Pooled connection factories allow you to configure the inbound and outbound connectors of the remote ActiveMQ Artemis resource adapter. For more information on configuring a pooled-connection-factory to connect to a remote ActiveMQ Artemis server, see
+    <a target=""_blank"" href=""https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.1/html/configuring_messaging/resource_adapters#use_provided_amq_adapter"">Using the Integrated Resource Adapter for Remote Connections</a>.
+</p>
+
+<h2>External Queue / Topic</h2>
+<p>The queues and topics that exists in the remote ActiveMQ Artemis server.</p>",2018-10-18T15:29:42Z,135
"@@ -23,20 +23,16 @@
 import com.google.gwt.safehtml.shared.SafeHtml;
 import com.google.web.bindery.event.shared.EventBus;
 import org.jboss.gwt.flow.Progress;
-import org.jboss.hal.ballroom.dialog.BlockingDialog;
-import org.jboss.hal.ballroom.dialog.Dialog;
 import org.jboss.hal.ballroom.dialog.DialogFactory;
-import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.client.patching.wizard.ApplyPatchWizard;
+import org.jboss.hal.client.patching.wizard.RollbackWizard;
 import org.jboss.hal.config.Environment;
 import org.jboss.hal.core.finder.ColumnAction;
 import org.jboss.hal.core.finder.ColumnActionFactory;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderColumn;
 import org.jboss.hal.core.finder.ItemAction;
 import org.jboss.hal.core.finder.ItemDisplay;
-import org.jboss.hal.core.finder.ItemMonitor;
-import org.jboss.hal.core.mbui.form.ModelNodeForm;
 import org.jboss.hal.core.runtime.host.Host;
 import org.jboss.hal.core.runtime.host.HostActions;
 import org.jboss.hal.core.runtime.server.Server;
@@ -82,8 +78,6 @@ public class PatchesColumn extends FinderColumn<ModelNode> {
     private ServerActions serverActions;
     private Provider<Progress> progress;
     private Resources resources;
-    // flag set in the restart servers dialog
-    private BlockingDialog restartServersDialog;
 
     @Inject
     public PatchesColumn(final Finder finder,
@@ -171,67 +165,12 @@ private void rollback(final String patchId) {
 
                             @Override
                             public void onMetadata(final Metadata metadata) {
-                                ModelNode model = new ModelNode();
-                                model.get(PATCH_ID).set(patchId);
-                                ResourceAddress address = PATCHING_TEMPLATE.resolve(statementContext);
-                                Metadata operationMetadata = metadata.forOperation(ROLLBACK_OPERATION);
-                                String id = Ids.build(Ids.HOST, statementContext.selectedHost(), CORE_SERVICE,
-                                        PATCHING, patchId, ROLLBACK_OPERATION);
-                                Form<ModelNode> form = new ModelNodeForm.Builder<>(id, operationMetadata)
-                                        .unsorted()
-                                        .build();
-                                form.getFormItem(PATCH_ID).setEnabled(false);
-                                Dialog dialog = new Dialog.Builder(resources.constants().rollback())
-                                        .add(form.asElement())
-                                        .closeIcon(true)
-                                        .closeOnEsc(true)
-                                        .primary(resources.constants().rollback(), () -> {
-                                            if (form.save()) {
-                                                ModelNode payload = form.getModel();
-                                                // reset-configuration is a required attribute, if the user doesn't set it, meaning it should be false
-                                                // it will not be added into the payload, but we must forcibly set as false to satisfy the required=true metadata
-                                                if (!payload.hasDefined(RESET_CONFIGURATION)) {
-                                                    payload.get(RESET_CONFIGURATION).set(false);
-                                                }
-                                                String idProgress = Ids.build(Ids.HOST,
-                                                        statementContext.selectedHost(), CORE_SERVICE, PATCHING,
-                                                        patchId, ""rollback-progress"");
-                                                ItemMonitor.startProgress(idProgress);
-                                                Operation operation = new Operation.Builder(address,
-                                                        ROLLBACK_OPERATION)
-                                                        .payload(payload)
-                                                        .build();
-                                                dispatcher.execute(operation, result2 -> {
-                                                    ItemMonitor.stopProgress(idProgress);
-                                                    MessageEvent.fire(eventBus,
-                                                            Message.success(resources.messages()
-                                                                    .patchSucessfullyRemoved(patchId)));
-                                                    refresh(RESTORE_SELECTION);
-                                                }, (operation1, failure) -> {
-                                                    ItemMonitor.stopProgress(idProgress);
-                                                    MessageEvent.fire(eventBus,
-                                                            Message.error(resources.messages()
-                                                                    .patchRemovedError(failure)));
-                                                    refresh(RESTORE_SELECTION);
-                                                }, (operation1, exception) -> {
-                                                    ItemMonitor.stopProgress(idProgress);
-                                                    MessageEvent.fire(eventBus,
-                                                            Message.error(resources.messages()
-                                                                    .patchRemovedError(exception.getMessage())));
-                                                    refresh(RESTORE_SELECTION);
-                                                });
-                                                return true;
-                                            }
-                                            return false;
-                                        })
-                                        .cancel()
-                                        .build();
-                                dialog.registerAttachable(form);
-                                dialog.show();
-                                form.edit(model);
+                                Metadata metadataRollback = metadata.forOperation(ROLLBACK_OPERATION);
+                                new RollbackWizard(resources, environment, patchId, metadataRollback, statementContext,
+                                        dispatcher, progress, serverActions, () -> refresh(RESTORE_SELECTION))
+                                        .show();
                             }
-                        })
-        );
+                        }));
     }
 
     private void ageoutHistory() {
@@ -268,7 +207,7 @@ private void applyPatch() {
                             @Override
                             public void onMetadata(final Metadata metadata) {
                                 Metadata metadataOp = metadata.forOperation(PATCH);
-                                new ApplyPatchWizard(resources, environment, metadataOp, eventBus, statementContext,
+                                new ApplyPatchWizard(resources, environment, metadataOp, statementContext,
                                         dispatcher, progress, serverActions, () -> refresh(RESTORE_SELECTION))
                                         .show();
                             }",2017-08-17T17:54:48Z,274
"@@ -15,12 +15,10 @@
  */
 package org.jboss.hal.client.patching.wizard;
 
-import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import javax.inject.Provider;
 
-import com.google.web.bindery.event.shared.EventBus;
 import org.jboss.gwt.flow.Async;
 import org.jboss.gwt.flow.Control;
 import org.jboss.gwt.flow.Function;
@@ -53,18 +51,15 @@ public class ApplyPatchWizard {
     static class UploadPatch implements Function<FunctionContext> {
 
         private final Dispatcher dispatcher;
-        private EventBus eventBus;
         private StatementContext statementContext;
-        private Resources resources;
         private ServerActions serverActions;
         private PatchContext patchContext;
 
-        UploadPatch(final EventBus eventBus, final StatementContext statementContext, final Dispatcher dispatcher,
-                final Resources resources, final ServerActions serverActions, final PatchContext patchContext) {
-            this.eventBus = eventBus;
+        UploadPatch(final StatementContext statementContext, final Dispatcher dispatcher,
+                final ServerActions serverActions, final PatchContext patchContext) {
+
             this.statementContext = statementContext;
             this.dispatcher = dispatcher;
-            this.resources = resources;
             this.serverActions = serverActions;
             this.patchContext = patchContext;
         }
@@ -79,7 +74,6 @@ public void execute(final Control<FunctionContext> control) {
                 }
             }
 
-
             ResourceAddress address = PATCHING_TEMPLATE.resolve(statementContext);
             Operation.Builder opBuilder = new Operation.Builder(address, PATCH)
                     .param(OVERRIDE_ALL, patchContext.overrideAll)
@@ -111,25 +105,22 @@ public void execute(final Control<FunctionContext> control) {
     }
 
 
-    private Wizard<PatchContext, PatchState> wizard;
     private Resources resources;
     private Environment environment;
     private Metadata metadataOp;
-    private EventBus eventBus;
     private StatementContext statementContext;
     private Dispatcher dispatcher;
     private Provider<Progress> progress;
     private ServerActions serverActions;
     private Callback callback;
 
     public ApplyPatchWizard(final Resources resources, final Environment environment, final Metadata metadata,
-            final EventBus eventBus, final StatementContext statementContext, final Dispatcher dispatcher,
-            final Provider<Progress> progress, final ServerActions serverActions, Callback callback) {
+            final StatementContext statementContext, final Dispatcher dispatcher, final Provider<Progress> progress,
+            final ServerActions serverActions, Callback callback) {
 
         this.resources = resources;
         this.environment = environment;
         this.metadataOp = metadata;
-        this.eventBus = eventBus;
         this.statementContext = statementContext;
         this.dispatcher = dispatcher;
         this.progress = progress;
@@ -144,11 +135,11 @@ public void show() {
 
         checkServersState(servers -> {
             if (servers != null) {
-                wb.addStep(CHECK_SERVERS, new CheckRunningServersStep(resources, serverActions, servers,
+                wb.addStep(CHECK_SERVERS, new CheckRunningServersStep(resources, servers,
                         statementContext.selectedHost()));
             }
             wb.addStep(UPLOAD, new UploadPatchStep(resources.constants().uploadPatch(), messages.noSelectedPatch()))
-            .addStep(CONFIGURE, new ConfigurationStep(environment, metadataOp, resources))
+            .addStep(CONFIGURE, new ConfigurationStep(metadataOp, resources))
 
             .onBack((context, currentState) -> {
                 PatchState previous = null;
@@ -182,10 +173,10 @@ public void show() {
             .stayOpenAfterFinish()
             .onFinish((wzd, context) -> {
                 String name = context.file.name;
-                wzd.showProgress(resources.constants().uploadInProgress(), messages.uploadInProgress(name));
+                wzd.showProgress(resources.constants().patchInProgress(), messages.patchInProgress(name));
 
                 Function[] functions = {
-                        new UploadPatch(eventBus, statementContext, dispatcher, resources, serverActions,
+                        new UploadPatch(statementContext, dispatcher, serverActions,
                                 context)
                 };
                 new Async<FunctionContext>(progress.get()).waterfall(
@@ -202,14 +193,14 @@ public void onFailure(final FunctionContext functionContext) {
                             public void onSuccess(final FunctionContext functionContext) {
                                 callback.execute();
                                 wzd.showSuccess(
-                                        resources.constants().uploadSuccessful(),
-                                        messages.uploadSuccessful(name),
-                                        messages.view(Names.CONTENT),
+                                        resources.constants().patchSuccessful(),
+                                        messages.patchSucessfullyApplied(name),
+                                        messages.view(Names.PATCH),
                                         cxt -> { /* nothing to do, content is already selected */ });
                             }
                         }, functions);
             });
-            wizard = wb.build();
+            Wizard<PatchContext, PatchState> wizard = wb.build();
             wizard.show();
         });
     }
@@ -234,20 +225,17 @@ private void checkServersState(Dispatcher.SuccessCallback<List<Property>> callba
 
             dispatcher.execute(operation, result -> {
                 List<Property> servers = result.asPropertyList();
-                List<String> serversString = new ArrayList<>();
                 boolean anyServerStarted = false;
                 for (Iterator<Property> iter = servers.iterator(); iter.hasNext(); ) {
                     Property serverProp = iter.next();
                     Server server = new Server(host, serverProp);
                     if (!server.isStopped()) {
-                        serversString.add(serverProp.getName());
                         anyServerStarted = true;
                     } else {
                         iter.remove();
                     }
                 }
                 if (anyServerStarted) {
-                    //String serversList = Joiner.on("", "").join(serversString);
                     callback.onSuccess(servers);
                 } else {
                     callback.onSuccess(null);",2017-08-17T17:54:48Z,275
"@@ -23,7 +23,6 @@
 import elemental2.dom.HTMLElement;
 import org.jboss.gwt.elemento.core.InputType;
 import org.jboss.hal.ballroom.wizard.WizardStep;
-import org.jboss.hal.core.runtime.server.ServerActions;
 import org.jboss.hal.dmr.Property;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Resources;
@@ -40,30 +39,18 @@ public class CheckRunningServersStep extends WizardStep<PatchContext, PatchState
 
     private final HTMLElement root;
     private Boolean restartServers;
-    private ServerActions serverActions;
     private List<Property> servers;
-    private String host;
 
-    public CheckRunningServersStep(final Resources resources, final ServerActions serverActions, List<Property> servers, String host) {
+    public CheckRunningServersStep(final Resources resources, List<Property> servers, String host) {
         super(resources.messages().patchStopAllServersTitle());
-        this.serverActions = serverActions;
         this.servers = servers;
-        this.host = host;
 
         List<String> serversList = new ArrayList<>();
         servers.forEach(p -> serversList.add(p.getName()));
 
         String serverStr = Joiner.on("", "").join(serversList);
         SafeHtml description = resources.messages().patchStopAllServersQuestion(serverStr, host);
 
-        /*
-        root = div()
-                .add(div().innerHtml(description))
-                .add(div().css(blankSlatePf)
-                        .add(button(""Yes, stop all servers"").css(btn, btnLg, btnPrimary)
-                                .on(click, event -> restartServers())))
-                .asElement();
-*/
         String radioName = Ids.build(HOST, PATCHING, ""choose-restart"");
         root = div().css(formHorizontal)
                 .add(p().innerHtml(description))",2017-08-17T17:54:48Z,276
"@@ -21,7 +21,6 @@
 import elemental2.dom.HTMLElement;
 import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.ballroom.wizard.WizardStep;
-import org.jboss.hal.config.Environment;
 import org.jboss.hal.core.mbui.form.ModelNodeForm;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.meta.Metadata;
@@ -36,11 +35,9 @@
 public class ConfigurationStep extends WizardStep<PatchContext, PatchState> {
 
     private final Form<ModelNode> form;
-    private final Environment environment;
 
-    public ConfigurationStep(final Environment environment, final Metadata metadata, final Resources resources) {
+    public ConfigurationStep(final Metadata metadata, final Resources resources) {
         super(resources.messages().configurePatchTitle());
-        this.environment = environment;
 
         form = new ModelNodeForm.Builder<>(Ids.PATCH_UPLOAD_NAMES_FORM, metadata)
                 .exclude(""input-stream-index"")",2017-08-17T17:54:48Z,40
"@@ -22,11 +22,21 @@
 
 public class PatchContext {
 
+    // used only on apply patch wizard
     public File file;
+
+    // used only on rollback wizard
+    public String patchId;
+    public boolean rollbackTo;
+    public boolean resetConfiguration;
+
+    // shared properties used on apply patch and rollback
     public boolean overrideAll;
     public boolean overrideModules;
     public List<String> override;
     public List<String> preserve;
+
+    // properties used by check running servers step
     public boolean restartServers;
     public List<Property> servers;
 }",2017-08-17T17:54:48Z,277
"@@ -16,5 +16,13 @@
 package org.jboss.hal.client.patching.wizard;
 
 public enum PatchState {
-    CHECK_SERVERS, UPLOAD, CONFIGURE
+
+    // used on apply patch and rollback
+    CHECK_SERVERS,
+
+    // used only on apply patch wizard
+    UPLOAD, CONFIGURE,
+
+    // used only on rollback wizard
+    ROLLBACK
 }",2017-08-17T17:54:48Z,278
"@@ -0,0 +1,105 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.patching.wizard;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import elemental2.dom.HTMLElement;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.wizard.WizardStep;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Resources;
+
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+
+public class RollbackStep extends WizardStep<PatchContext, PatchState> {
+
+    private final Form<ModelNode> form;
+    private ModelNode model;
+
+    public RollbackStep(final Metadata metadata, final Resources resources, final String host,
+            final String patchId) {
+        super(resources.constants().rollback());
+
+        model = new ModelNode();
+        model.get(PATCH_ID).set(patchId);
+        String id = Ids.build(Ids.HOST, host, CORE_SERVICE, PATCHING, patchId, ROLLBACK_OPERATION);
+        form = new ModelNodeForm.Builder<>(id, metadata)
+                .unsorted()
+                .build();
+        form.getFormItem(PATCH_ID).setEnabled(false);
+        //form.edit(model);
+
+        registerAttachable(form);
+    }
+
+    @Override
+    public HTMLElement asElement() {
+        return form.asElement();
+    }
+
+    @Override
+    public void reset(final PatchContext context) {
+        context.rollbackTo = false;
+        context.resetConfiguration = false;
+        context.overrideAll = false;
+        context.overrideModules = false;
+        context.override = new ArrayList<>();
+        context.preserve = new ArrayList<>();
+        context.patchId = model.get(PATCH_ID).asString();
+    }
+
+    @Override
+    protected void onShow(final PatchContext context) {
+        form.edit(model);
+    }
+
+    @Override
+    protected boolean onNext(final PatchContext context) {
+        boolean valid = form.save();
+        if (valid) {
+            context.rollbackTo = form.getFormItem(ROLLBACK_TO).isUndefined() ? false
+                    : form.<Boolean>getFormItem(ROLLBACK_TO).getValue();
+            context.resetConfiguration = form.getFormItem(RESET_CONFIGURATION).isUndefined() ? false
+                    : form.<Boolean>getFormItem(RESET_CONFIGURATION).getValue();
+            context.overrideAll = form.getFormItem(OVERRIDE_ALL).isUndefined() ? false
+                    : form.<Boolean>getFormItem(OVERRIDE_ALL).getValue();
+            context.overrideModules = form.getFormItem(OVERRIDE_MODULE).isUndefined() ? false
+                    : form.<Boolean>getFormItem(OVERRIDE_MODULE).getValue();
+            context.override = form.getFormItem(OVERRIDE).isUndefined() ? null
+                    : form.<List<String>>getFormItem(OVERRIDE).getValue();
+            context.preserve = form.getFormItem(PRESERVE).isUndefined() ? null
+                    : form.<List<String>>getFormItem(PRESERVE).getValue();
+        }
+        return valid;
+    }
+
+    @Override
+    protected boolean onBack(PatchContext context) {
+        form.cancel();
+        return true;
+    }
+
+    @Override
+    protected boolean onCancel(PatchContext context) {
+        form.cancel();
+        return true;
+    }
+}",2017-08-17T17:54:48Z,279
"@@ -0,0 +1,243 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.patching.wizard;
+
+import java.util.Iterator;
+import java.util.List;
+import javax.inject.Provider;
+
+import org.jboss.gwt.flow.Async;
+import org.jboss.gwt.flow.Control;
+import org.jboss.gwt.flow.Function;
+import org.jboss.gwt.flow.FunctionContext;
+import org.jboss.gwt.flow.Outcome;
+import org.jboss.gwt.flow.Progress;
+import org.jboss.hal.ballroom.wizard.Wizard;
+import org.jboss.hal.config.Environment;
+import org.jboss.hal.core.runtime.server.Server;
+import org.jboss.hal.core.runtime.server.ServerActions;
+import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.Property;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.resources.Messages;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Callback;
+
+import static org.jboss.hal.client.patching.PatchesColumn.PATCHING_TEMPLATE;
+import static org.jboss.hal.client.patching.wizard.PatchState.CHECK_SERVERS;
+import static org.jboss.hal.client.patching.wizard.PatchState.ROLLBACK;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+
+public class RollbackWizard {
+
+    static class RollbackFunction implements Function<FunctionContext> {
+
+        private final Dispatcher dispatcher;
+        private StatementContext statementContext;
+        private ServerActions serverActions;
+        private PatchContext patchContext;
+
+        RollbackFunction(final StatementContext statementContext, final Dispatcher dispatcher,
+                final ServerActions serverActions, final PatchContext patchContext) {
+
+            this.statementContext = statementContext;
+            this.dispatcher = dispatcher;
+            this.serverActions = serverActions;
+            this.patchContext = patchContext;
+        }
+
+        @Override
+        public void execute(final Control<FunctionContext> control) {
+
+            if (patchContext.restartServers) {
+                for (Property serverProp : patchContext.servers) {
+                    Server server = new Server(statementContext.selectedHost(), serverProp);
+                    serverActions.stopNow(server);
+                }
+            }
+
+            ResourceAddress address = PATCHING_TEMPLATE.resolve(statementContext);
+            Operation.Builder opBuilder = new Operation.Builder(address, ROLLBACK_OPERATION)
+                    .param(PATCH_ID, patchContext.patchId)
+                    .param(ROLLBACK_TO, patchContext.rollbackTo)
+                    .param(RESET_CONFIGURATION, patchContext.resetConfiguration)
+                    .param(OVERRIDE_ALL, patchContext.overrideAll)
+                    .param(OVERRIDE_MODULE, patchContext.overrideModules);
+
+            if (patchContext.override != null) {
+                opBuilder.param(OVERRIDE, patchContext.override.toArray(new String[patchContext.override.size()]));
+            }
+            if (patchContext.preserve != null) {
+                opBuilder.param(PRESERVE, patchContext.preserve.toArray(new String[patchContext.preserve.size()]));
+            }
+            Operation operation = opBuilder.build();
+
+            dispatcher.execute(operation,
+                    result -> {
+                        control.proceed();
+                    },
+
+                    (op, failure) -> {
+                        control.getContext().failed(failure);
+                        control.abort();
+                    },
+
+                    (op, exception) -> {
+                        control.getContext().failed(exception);
+                        control.abort();
+                    });
+        }
+    }
+
+
+    private Resources resources;
+    private Environment environment;
+    private String patchId;
+    private Metadata metadata;
+    private StatementContext statementContext;
+    private Dispatcher dispatcher;
+    private Provider<Progress> progress;
+    private ServerActions serverActions;
+    private Callback callback;
+
+    public RollbackWizard(final Resources resources, final Environment environment, final String patchId,
+            final Metadata metadata,
+            final StatementContext statementContext, final Dispatcher dispatcher, final Provider<Progress> progress,
+            final ServerActions serverActions, Callback callback) {
+
+        this.resources = resources;
+        this.environment = environment;
+        this.patchId = patchId;
+        this.metadata = metadata;
+        this.statementContext = statementContext;
+        this.dispatcher = dispatcher;
+        this.progress = progress;
+        this.serverActions = serverActions;
+        this.callback = callback;
+    }
+
+    public void show() {
+        Messages messages = resources.messages();
+        Wizard.Builder<PatchContext, PatchState> wb = new Wizard.Builder<>(resources.constants().rollback(), new PatchContext());
+
+        checkServersState(servers -> {
+            if (servers != null) {
+                wb.addStep(CHECK_SERVERS, new CheckRunningServersStep(resources, servers,
+                        statementContext.selectedHost()));
+            }
+            wb.addStep(ROLLBACK, new RollbackStep(metadata, resources, statementContext.selectedHost(), patchId))
+
+            .onBack((context, currentState) -> {
+                PatchState previous = null;
+                switch (currentState) {
+                    case CHECK_SERVERS:
+                        break;
+                    case ROLLBACK:
+                        previous = CHECK_SERVERS;
+                        break;
+                }
+                return previous;
+            })
+            .onNext((context, currentState) -> {
+                PatchState next = null;
+                switch (currentState) {
+                    case CHECK_SERVERS:
+                        next = ROLLBACK;
+                        break;
+                    case ROLLBACK:
+                        break;
+                }
+                return next;
+            })
+
+            .stayOpenAfterFinish()
+            .onFinish((wzd, context) -> {
+                String name = context.patchId;
+                wzd.showProgress(resources.constants().rollbackInProgress(), messages.rollbackInProgress(name));
+
+                Function[] functions = {
+                        new RollbackFunction(statementContext, dispatcher, serverActions, context)
+                };
+                new Async<FunctionContext>(progress.get()).waterfall(
+                        new FunctionContext(),
+                        new Outcome<FunctionContext>() {
+                            @Override
+                            public void onFailure(final FunctionContext functionContext) {
+                                wzd.showError(resources.constants().rollbackError(),
+                                        messages.rollbackError(functionContext.getError()),
+                                        functionContext.getError());
+                            }
+
+                            @Override
+                            public void onSuccess(final FunctionContext functionContext) {
+                                callback.execute();
+                                wzd.showSuccess(
+                                        resources.constants().rollbackSuccessful(),
+                                        messages.rollbackSucessful(name),
+                                        messages.view(Names.PATCH),
+                                        cxt -> { /* nothing to do, content is already selected */ });
+                            }
+                        }, functions);
+            });
+            Wizard<PatchContext, PatchState> wizard = wb.build();
+            wizard.show();
+        });
+    }
+
+    /**
+     * Checks if each servers of a host is stopped, if the server is started, asks the user to stop them.
+     * It is a good practice to apply/rollback a patch to a stopped server to prevent application and internal services
+     * from failing.
+     */
+    private void checkServersState(Dispatcher.SuccessCallback<List<Property>> callback) {
+
+        if (environment.isStandalone()) {
+            callback.onSuccess(null);
+        } else {
+
+            String host = statementContext.selectedHost();
+            ResourceAddress address = new ResourceAddress().add(HOST, host);
+            Operation operation = new Operation.Builder(address, READ_CHILDREN_RESOURCES_OPERATION)
+                    .param(INCLUDE_RUNTIME, true)
+                    .param(CHILD_TYPE, SERVER_CONFIG)
+                    .build();
+
+            dispatcher.execute(operation, result -> {
+                List<Property> servers = result.asPropertyList();
+                boolean anyServerStarted = false;
+                for (Iterator<Property> iter = servers.iterator(); iter.hasNext(); ) {
+                    Property serverProp = iter.next();
+                    Server server = new Server(host, serverProp);
+                    if (!server.isStopped()) {
+                        anyServerStarted = true;
+                    } else {
+                        iter.remove();
+                    }
+                }
+                if (anyServerStarted) {
+                    callback.onSuccess(servers);
+                } else {
+                    callback.onSuccess(null);
+                }
+            });
+        }
+    }
+
+}",2017-08-17T17:54:48Z,280
"@@ -348,6 +348,8 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String output();
 
     String patchError();
+    String patchInProgress();
+    String patchSuccessful();
     String pattern();
     String pause();
     String pending();
@@ -400,6 +402,9 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String role();
     String roles();
     String rollback();
+    String rollbackError();
+    String rollbackInProgress();
+    String rollbackSuccessful();
     String runAs();
     String runAsRoleTitle();
     String running();",2017-08-17T17:54:48Z,100
"@@ -246,6 +246,7 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml pageNotFound(String invalidHistoryToken);
     String patchLatestInstalledLabel();
     SafeHtml patchHostNeedsRestart(String hostname);
+    SafeHtml patchInProgress(String patch);
     SafeHtml patchRestartDomainControllerQuestion(String hostname);
     SafeHtml patchRestartHostControllerQuestion(String hostname);
     SafeHtml patchRestartStandaloneQuestion();
@@ -255,9 +256,10 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml patchStopServersDialogMessage1();
     SafeHtml patchStopServersDialogMessage2();
     SafeHtml patchAddError(String patchId, String error);
-    SafeHtml patchSucessfullyRemoved(String patchId);
+    SafeHtml rollbackSucessful(String patchId);
     SafeHtml pauseQueueSuccess(String name);
-    SafeHtml patchRemovedError(String failure);
+    SafeHtml rollbackError(String failure);
+    SafeHtml rollbackInProgress(String patchid);
     String profileIncludes(String includes);
     SafeHtml profileNotUsedInServerGroups();
     SafeHtml profileUsedInServerGroups(SafeHtml serverGroupLinks);",2017-08-17T17:54:48Z,94
"@@ -293,6 +293,8 @@ operations=Operations
 or=or
 orDragItHere=or drag it here
 output=Output
+patchInProgress=Patch in progress
+patchSuccessful=Patch successful
 patchError=Patch failed
 pattern=Pattern
 pause=Pause
@@ -344,6 +346,9 @@ review=Review
 role=Role
 roles=Roles
 rollback=Rollback
+rollbackError=Rollback error
+rollbackInProgress=Rollback in progress
+rollbackSuccessful=Rollback successful
 runAs=Run as
 runAsRoleTitle=Run as Role
 running=Running",2017-08-17T17:54:48Z,100
"@@ -1,2 +1,8 @@
 patchError=Falha na aplica\u00e7\u00e3o da corre\u00e7\u00e3o
-uploadPatch=Enviar corre\u00e7\u00e3o
\ No newline at end of file
+patchInProgress=Corre\u00e7\u00e3o em andamento
+patchSuccessful=Corre\u00e7\u00e3o instalada com sucesso
+uploadPatch=Enviar corre\u00e7\u00e3o
+rollback=Rollback
+rollbackError=Rollback com erro
+rollbackInProgress=Rollback em andamento
+rollbackSuccessful=Rollback efetuado com sucesso
\ No newline at end of file",2017-08-17T17:54:48Z,100
"@@ -194,8 +194,10 @@ patchLatestInstalledLabel=Latest applied patch
 patchHostNeedsRestart=The host <strong>{0}</strong> needs to be restarted. A patch cannot be added or rolled back before the host is restarted.
 patchSucessfullyApplied=Patch {0} successfully installed.
 patchAddError=There is an error installing patch {0}. Reason: {1}
-patchSucessfullyRemoved=Patch <strong>{0}</strong> successfully removed.
-patchRemovedError=Rollback error, cause: {0}
+patchInProgress=<strong>{0}</strong> is being applied. Please wait until the patch has installed.
+rollbackSucessful=Patch <strong>{0}</strong> successfully removed.
+rollbackInProgress=Rollback of <strong>{0}</strong> is in progress. Please wait until the rollback has finished.
+rollbackError=Rollback error, cause: {0}
 patchRestartHostControllerQuestion=<p>The host <strong>{0}</strong> needs to be restarted. A patch cannot be added or rolled back before the host is restarted.</p><p>Are you sure you want to restart the host controller <strong>{0}</strong> ?</p>
 patchRestartStandaloneQuestion=<p>The server needs to be restarted. A patch cannot be added or rolled back before the server is restarted.</p><p>Are you sure you want to restart the server ?</p>
 patchRestartDomainControllerQuestion=<p>The host <strong>{0}</strong> needs to be restarted. A patch cannot be added or rolled back before the host is restarted.</p><p>Are you sure you want to restart the domain controller <strong>{0}</strong>? The console won&#39;t be available until the domain controller has been successfully restarted.</p>",2017-08-17T17:54:48Z,94
"@@ -13,8 +13,10 @@ patchLatestInstalledLabel=\u00daltima corre\u00e7\u00e3o instalada
 patchHostNeedsRestart=O servidor de controle <strong>{0}</strong> precisa ser reiniciado. Uma corre\u00e7\u00e3o n\u00e3o pode ser adicionada ou removida antes do servidor de controle ser reiniciado.
 patchSucessfullyApplied=Corre\u00e7\u00e3o {0} instalada com sucesso.
 patchAddError=Ocorreu um erro na instala\u00e7\u00e3o da corre\u00e7\u00e3o {0}. Motivo: {1}
-patchSucessfullyRemoved=Corre\u00e7\u00e3o <strong>{0}</strong> removida com sucesso.
-patchRemovedError=Erro ao remover a corre\u00e7\u00e3o, motivo: {0}
+patchInProgress=<strong>{0}</strong> est\u00e1 sendo instalado. Por favor, aguarde a instala\u00e7\u00e3o terminar.
+rollbackInProgress=Rollback de <strong>{0}</strong> est\u00e1 em andamento. Por favor, aguarde o rollback terminar.
+rollbackSucessful=Corre\u00e7\u00e3o <strong>{0}</strong> removida com sucesso.
+rollbackError=Erro ao remover a corre\u00e7\u00e3o, motivo: {0}
 patchRestartHostControllerQuestion=<p>O servidor de controle <strong>{0}</strong> precisa ser reiniciado. Uma corre\u00e7\u00e3o n\u00e3o pode ser adicionada ou removida antes do servidor de controle ser reiniciado.</p><p>Voc\u00ea tem certeza de que quer reiniciar o servi\u00e7o de controle <strong>{0}</strong> ?</p>
 patchRestartDomainControllerQuestion=<p>O servidor de controle de dom\u00ednio <strong>{0}</strong> precisa ser reiniciado. Uma corre\u00e7\u00e3o n\u00e3o pode ser adicionada ou removida antes do servidor de controle ser reiniciado.</p><p>Voc\u00ea tem certeza de que quer reiniciar o servi\u00e7o de controle <strong>{0}</strong></p> ? <p>O console de gerenciamento web ficar\u00e1 indispon\u00edvel at\u00e9 que o servidor de controle de dom\u00ednio (Domain Controller) seja iniciado corretamente.</p>
 patchRestartStandaloneQuestion=<p>O servidor precisa ser reiniciado. Uma corre\u00e7\u00e3o n\u00e3o pode ser adicionada ou removida antes do servidor reiniciado.</p><p>Voc\u00ea tem certeza de que quer reiniciar o servidor ?</p><p>O console de gerenciamento web ficar\u00e1 indispon\u00edvel at\u00e9 que o servidor seja iniciado corretamente.</p>",2017-08-17T17:54:48Z,94
"@@ -20,6 +20,7 @@
 import com.google.web.bindery.event.shared.EventBus;
 import elemental2.dom.CSSProperties;
 import elemental2.dom.HTMLElement;
+import org.jboss.gwt.elemento.core.Elements;
 import org.jboss.hal.ballroom.Tabs;
 import org.jboss.hal.config.Environment;
 import org.jboss.hal.core.deployment.Deployment;
@@ -106,8 +107,14 @@ public void reset() {
     @Override
     public void update(Deployment deployment, int tab) {
         if (supportsReadContent) {
-            browseContent.setContent(deployment);
-            tabs.showTab(tab);
+            HTMLElement contentElement = tabs.tabElement(Ids.CONTENT_TAB);
+            if (deployment.isManaged()) {
+                browseContent.setContent(deployment);
+                tabs.showTab(tab);
+            } else {
+                tabs.showTab(1);
+            }
+            Elements.setVisible(contentElement, deployment.isManaged());
         }
         deploymentModel.update(deployment, () -> presenter.enable(deployment.getName()));
     }",2018-05-03T15:30:55Z,281
"@@ -146,6 +146,14 @@ public void onShow(String id, JsCallback callback) {
         }
     }
 
+    public HTMLElement tabElement(String id) {
+        HTMLElement selectedTab = null;
+        if (id != null) {
+            selectedTab = (HTMLElement) tabs.querySelector(""li > a[href='#"" + id + ""']""); //NON-NLS
+        }
+        return selectedTab;
+    }
+
 
     @JsType(isNative = true)
     static class Api {",2018-05-03T15:30:55Z,51
"@@ -221,6 +221,7 @@ public FormItem<?> createFrom(Property property) {
                 }
                 if (readOnly) {
                     formItem.setEnabled(false);
+                    formItem.setExpressionAllowed(false);
                 }
             }
         }",2018-05-03T15:30:55Z,101
"@@ -54,6 +54,8 @@
 import org.jboss.hal.client.configuration.subsystem.mail.MailSessionView;
 import org.jboss.hal.client.configuration.subsystem.transactions.Mbui_TransactionView_Provider;
 import org.jboss.hal.client.configuration.subsystem.transactions.TransactionPresenter;
+import org.jboss.hal.client.deployment.DeploymentDetailPresenter;
+import org.jboss.hal.client.deployment.DeploymentDetailView;
 import org.jboss.hal.client.deployment.DeploymentPresenter;
 import org.jboss.hal.client.deployment.DeploymentView;
 import org.jboss.hal.client.homepage.HomepagePresenter;
@@ -170,6 +172,11 @@ protected void configure() {
                 DeploymentView.class,
                 DeploymentPresenter.MyProxy.class);
 
+        bindPresenter(DeploymentDetailPresenter.class,
+                DeploymentDetailPresenter.MyView.class,
+                DeploymentDetailView.class,
+                DeploymentDetailPresenter.MyProxy.class);
+
         bindTemplatedPresenter(DeploymentScannerPresenter.class,
                 DeploymentScannerPresenter.MyView.class,
                 Mbui_DeploymentScannerView_Provider.class,",2016-09-20T13:05:53Z,44
"@@ -25,11 +25,7 @@
 import org.jboss.hal.dmr.ModelNodeHelper;
 import org.jboss.hal.dmr.Property;
 
-import static org.jboss.hal.dmr.ModelDescriptionConstants.DISABLED;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.ENABLED;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.STATUS;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.SUBDEPLOYMENT;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.SUBSYSTEM;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 
 /**
  * A deployment on a specific server.
@@ -126,6 +122,10 @@ public boolean isEnabled() {
         return enabled.isDefined() ? enabled.asBoolean() : false;
     }
 
+    boolean isExploded() {
+        return get(EXPLODED).asBoolean(false);
+    }
+
     public Status getStatus() {
         return ModelNodeHelper.asEnumValue(this, STATUS, Status::valueOf, Status.UNDEFINED);
     }",2016-09-20T13:05:53Z,65
"@@ -22,13 +22,14 @@
 
 import com.google.gwt.safehtml.shared.SafeHtml;
 import com.google.web.bindery.event.shared.EventBus;
+import elemental.client.Browser;
 import elemental.dom.Element;
+import elemental.html.SpanElement;
 import org.jboss.gwt.flow.Async;
 import org.jboss.gwt.flow.Function;
 import org.jboss.gwt.flow.FunctionContext;
 import org.jboss.gwt.flow.Outcome;
 import org.jboss.gwt.flow.Progress;
-import org.jboss.hal.ballroom.dialog.DialogFactory;
 import org.jboss.hal.ballroom.js.JsHelper;
 import org.jboss.hal.ballroom.wizard.Wizard;
 import org.jboss.hal.client.deployment.Deployment.Status;
@@ -46,6 +47,7 @@
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderColumn;
 import org.jboss.hal.core.finder.ItemAction;
+import org.jboss.hal.core.finder.ItemActionFactory;
 import org.jboss.hal.core.finder.ItemDisplay;
 import org.jboss.hal.core.finder.ItemMonitor;
 import org.jboss.hal.core.runtime.server.Server;
@@ -55,7 +57,7 @@
 import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.MetadataRegistry;
-import org.jboss.hal.resources.Icons;
+import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
@@ -69,9 +71,9 @@
 import static org.jboss.hal.client.deployment.DeploymentColumn.DEPLOYMENT_ADDRESS;
 import static org.jboss.hal.client.deployment.wizard.UploadState.NAMES;
 import static org.jboss.hal.client.deployment.wizard.UploadState.UPLOAD;
-import static org.jboss.hal.core.finder.FinderColumn.RefreshMode.CLEAR_SELECTION;
 import static org.jboss.hal.core.finder.FinderColumn.RefreshMode.RESTORE_SELECTION;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.resources.CSS.fontAwesome;
 import static org.jboss.hal.resources.CSS.pfIcon;
 
 /**
@@ -96,6 +98,7 @@ public class DeploymentColumn extends FinderColumn<Deployment> {
     @Inject
     public DeploymentColumn(final Finder finder,
             final ColumnActionFactory columnActionFactory,
+            final ItemActionFactory itemActionFactory,
             final Environment environment,
             final Dispatcher dispatcher,
             final EventBus eventBus,
@@ -120,8 +123,9 @@ public DeploymentColumn(final Finder finder,
                 })
 
                 .useFirstActionAsBreadcrumbHandler()
-                .withFilter()
-        );
+                .pinnable()
+                .showCount()
+                .withFilter());
 
         this.environment = environment;
         this.dispatcher = dispatcher;
@@ -153,18 +157,21 @@ public String getTitle() {
             public String getTooltip() {
                 if (item.getStatus() == Status.FAILED) {
                     return resources.constants().failed();
-                } else {
-                    return item.isEnabled() ? resources.constants().enabled() : resources.constants().disabled();
-                }
+                } else if (item.getStatus() == Status.STOPPED) {
+                    return resources.constants().stopped();
+                } else if (item.getStatus() == Status.OK) {
+                    return resources.constants().activeLower();
+                } else
+                    return item.isEnabled() ? resources.constants().enabled() : resources.constants()
+                            .disabled();
             }
 
             @Override
             public Element getIcon() {
-                if (item.getStatus() == Status.FAILED) {
-                    return Icons.error();
-                } else {
-                    return item.isEnabled() ? Icons.ok() : Icons.disabled();
-                }
+                String icon = item.isExploded() ? fontAwesome(""folder-open"") : fontAwesome(""archive"");
+                SpanElement spanElement = Browser.getDocument().createSpanElement();
+                spanElement.setClassName(icon);
+                return spanElement;
             }
 
             @Override
@@ -175,20 +182,15 @@ public String getFilterData() {
             @Override
             public List<ItemAction<Deployment>> actions() {
                 List<ItemAction<Deployment>> actions = new ArrayList<>();
+                actions.add(itemActionFactory.view(NameTokens.DEPLOYMENT_DETAIL,
+                        Ids.DEPLOYMENT, item.getName()));
                 if (item.isEnabled()) {
                     actions.add(new ItemAction<>(resources.constants().disable(), deployment -> disable(deployment)));
                 } else {
                     actions.add(new ItemAction<>(resources.constants().enable(), deployment -> enable(deployment)));
                 }
-                actions.add(new ItemAction<>(resources.constants().remove(),
-                        deployment -> DialogFactory.showConfirmation(
-                                resources.messages().removeResourceConfirmationTitle(item.getName()),
-                                resources.messages().removeResourceConfirmationQuestion(item.getName()),
-                                () -> {
-                                    ResourceAddress address = new ResourceAddress().add(DEPLOYMENT, item.getName());
-                                    Operation operation = new Operation.Builder(REMOVE, address).build();
-                                    dispatcher.execute(operation, result -> refresh(CLEAR_SELECTION));
-                                })));
+                actions.add(itemActionFactory.remove(Names.DEPLOYMENT, item.getName(), DEPLOYMENT_TEMPLATE,
+                        DeploymentColumn.this));
                 return actions;
             }
         });",2016-09-20T13:05:53Z,65
"@@ -0,0 +1,92 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.deployment;
+
+import javax.inject.Inject;
+
+import com.google.web.bindery.event.shared.EventBus;
+import com.gwtplatform.mvp.client.annotations.NameToken;
+import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
+import com.gwtplatform.mvp.client.proxy.ProxyPlace;
+import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
+import org.jboss.hal.config.Environment;
+import org.jboss.hal.core.finder.Finder;
+import org.jboss.hal.core.finder.FinderPath;
+import org.jboss.hal.core.finder.FinderPathFactory;
+import org.jboss.hal.core.mvp.ApplicationPresenter;
+import org.jboss.hal.core.mvp.PatternFlyView;
+import org.jboss.hal.dmr.model.ResourceAddress;
+import org.jboss.hal.meta.token.NameTokens;
+
+import static org.jboss.hal.dmr.ModelDescriptionConstants.DEPLOYMENT;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.SERVER_GROUP;
+
+/**
+ * @author Harald Pehl
+ */
+public class DeploymentDetailPresenter extends ApplicationPresenter<DeploymentDetailPresenter.MyView, DeploymentDetailPresenter.MyProxy> {
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @NameToken(NameTokens.DEPLOYMENT_DETAIL)
+    public interface MyProxy extends ProxyPlace<DeploymentDetailPresenter> {}
+
+    public interface MyView extends PatternFlyView {
+        void setRoot(ResourceAddress root);
+    }
+    // @formatter:on
+
+    private final Environment environment;
+    private final FinderPathFactory finderPathFactory;
+    private ResourceAddress address;
+
+    @Inject
+    public DeploymentDetailPresenter(final EventBus eventBus,
+            final MyView view,
+            final MyProxy proxy,
+            final Environment environment,
+            final Finder finder,
+            final FinderPathFactory finderPathFactory) {
+        super(eventBus, view, proxy, finder);
+        this.environment = environment;
+        this.finderPathFactory = finderPathFactory;
+        this.address = ResourceAddress.ROOT;
+    }
+
+    @Override
+    public void prepareFromRequest(final PlaceRequest request) {
+        super.prepareFromRequest(request);
+        if (!environment.isStandalone()) {
+            String serverGroup = request.getParameter(SERVER_GROUP, null);
+            String deployment = request.getParameter(DEPLOYMENT, null);
+            address = new ResourceAddress().add(SERVER_GROUP, serverGroup).add(DEPLOYMENT, deployment);
+        } else {
+            String deployment = request.getParameter(DEPLOYMENT, null);
+            address = new ResourceAddress().add(DEPLOYMENT, deployment);
+        }
+    }
+
+    @Override
+    protected void onReset() {
+        super.onReset();
+        getView().setRoot(address);
+    }
+
+    @Override
+    protected FinderPath finderPath() {
+        return finderPathFactory.deployment(address.lastValue());
+    }
+}",2016-09-20T13:05:53Z,65
"@@ -0,0 +1,41 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.deployment;
+
+import javax.inject.Inject;
+
+import org.jboss.hal.core.modelbrowser.ModelBrowser;
+import org.jboss.hal.core.mvp.PatternFlyViewImpl;
+import org.jboss.hal.dmr.model.ResourceAddress;
+
+/**
+ * @author Harald Pehl
+ */
+public class DeploymentDetailView extends PatternFlyViewImpl implements DeploymentDetailPresenter.MyView {
+
+    private final ModelBrowser modelBrowser;
+
+    @Inject
+    public DeploymentDetailView(ModelBrowser modelBrowser) {
+        this.modelBrowser = modelBrowser;
+        initElements(modelBrowser);
+    }
+
+    @Override
+    public void setRoot(final ResourceAddress root) {
+        modelBrowser.setRoot(root, false);
+    }
+}",2016-09-20T13:05:53Z,65
"@@ -16,38 +16,56 @@
 package org.jboss.hal.client.deployment;
 
 import org.jboss.hal.ballroom.Alert;
+import org.jboss.hal.ballroom.LabelBuilder;
+import org.jboss.hal.client.deployment.Deployment.Status;
 import org.jboss.hal.core.finder.PreviewAttributes;
+import org.jboss.hal.core.finder.PreviewAttributes.PreviewAttribute;
 import org.jboss.hal.core.finder.PreviewContent;
 import org.jboss.hal.resources.Icons;
 import org.jboss.hal.resources.Resources;
 
 import static java.util.Arrays.asList;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.RUNTIME_NAME;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.STATUS;
-import static org.jboss.hal.resources.Names.DEPLOYMENT;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 
 /**
  * @author Harald Pehl
  */
 class DeploymentPreview extends PreviewContent<Deployment> {
 
+    static final String LAST_ENABLED_AT = ""Last enabled at"";
+    static final String LAST_DISABLED_AT = ""Last disabled at"";
+
     DeploymentPreview(final DeploymentColumn column, final Deployment deployment, final Resources resources) {
         super(deployment.getName());
 
-        if (deployment.isEnabled()) {
-            previewBuilder()
-                    .add(new Alert(Icons.OK, resources.messages().resourceEnabled(DEPLOYMENT, deployment.getName()),
-                            resources.constants().disable(), event -> column.disable(deployment)));
-
+        if (deployment.getStatus() == Status.FAILED) {
+            previewBuilder().add(new Alert(Icons.ERROR, resources.messages().deploymentFailed(deployment.getName())));
+        } else if (deployment.getStatus() == Status.STOPPED) {
+            previewBuilder().add(new Alert(Icons.STOPPED, resources.messages().deploymentStopped(deployment.getName()),
+                    resources.constants().enable(), event -> column.enable(deployment)));
+        } else if (deployment.getStatus() == Status.OK) {
+            previewBuilder().add(new Alert(Icons.OK, resources.messages().deploymentActive(deployment.getName()),
+                    resources.constants().disable(), event -> column.disable(deployment)));
         } else {
-            previewBuilder()
-                    .add(new Alert(Icons.DISABLED,
-                            resources.messages().resourceDisabled(DEPLOYMENT, deployment.getName()),
-                            resources.constants().enable(), event -> column.enable(deployment)));
+            if (deployment.isEnabled()) {
+                previewBuilder().add(new Alert(Icons.OK, resources.messages().deploymentEnabled(deployment.getName()),
+                        resources.constants().disable(), event -> column.disable(deployment)));
+            } else {
+                previewBuilder()
+                        .add(new Alert(Icons.DISABLED, resources.messages().deploymentDisabled(deployment.getName()),
+                                resources.constants().enable(), event -> column.enable(deployment)));
+            }
         }
 
-        PreviewAttributes<Deployment> attributes = new PreviewAttributes<>(deployment,
-                asList(RUNTIME_NAME, ""disabled-timestamp"", ""enabled-timestamp"", STATUS)).end();
+        PreviewAttributes<Deployment> attributes = new PreviewAttributes<>(deployment, asList(NAME, RUNTIME_NAME));
+        attributes.append(MANAGED);
+        attributes.append(EXPLODED);
+        attributes.append(ENABLED);
+        attributes.append(model -> new PreviewAttribute(new LabelBuilder().label(STATUS),
+                deployment.getStatus().name()));
+        attributes.append(model -> new PreviewAttribute(LAST_ENABLED_AT, deployment.getEnabledTime()));
+        attributes.append(model -> new PreviewAttribute(LAST_DISABLED_AT, deployment.getDisabledTime()));
+        attributes.end();
         previewBuilder().addAll(attributes);
     }
 }",2016-09-20T13:05:53Z,65
"@@ -20,10 +20,13 @@
 
 import com.google.common.base.Joiner;
 import com.google.web.bindery.event.shared.EventBus;
+import com.gwtplatform.mvp.client.proxy.PlaceManager;
+import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
 import elemental.dom.Element;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderColumn;
 import org.jboss.hal.core.finder.ItemDisplay;
+import org.jboss.hal.core.mvp.Places;
 import org.jboss.hal.core.runtime.group.ServerGroup;
 import org.jboss.hal.core.runtime.group.ServerGroupSelectionEvent;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
@@ -52,13 +55,23 @@ public class ServerGroupColumn extends FinderColumn<ServerGroup> {
     public ServerGroupColumn(final Finder finder,
             final Dispatcher dispatcher,
             final EventBus eventBus,
+            final PlaceManager placeManager,
+            final Places places,
             final Resources resources) {
 
         super(new FinderColumn.Builder<ServerGroup>(finder, Ids.DEPLOYMENT_SERVER_GROUP, Names.SERVER_GROUP)
+
                 // TODO Change the security context (server group scoped roles!)
                 .onItemSelect(serverGroup -> eventBus.fireEvent(new ServerGroupSelectionEvent(serverGroup.getName())))
+
+                .onBreadcrumbItem((item, context) -> {
+                    // switch server group in place request parameter of specific presenter
+                    PlaceRequest current = placeManager.getCurrentPlaceRequest();
+                    PlaceRequest update = places.replaceParameter(current, SERVER_GROUP, item.getName()).build();
+                    placeManager.revealPlace(update);
+                })
+
                 .pinnable()
-                .showCount()
                 .withFilter());
 
         setItemRenderer(item -> new ItemDisplay<ServerGroup>() {",2016-09-20T13:05:53Z,282
"@@ -23,6 +23,7 @@
 import com.google.common.collect.Lists;
 import com.google.gwt.safehtml.shared.SafeHtml;
 import com.google.web.bindery.event.shared.EventBus;
+import com.gwtplatform.mvp.client.proxy.PlaceManager;
 import elemental.dom.Element;
 import org.jboss.gwt.flow.Async;
 import org.jboss.gwt.flow.Function;
@@ -115,13 +116,15 @@ public ServerGroupDeploymentColumn(final Finder finder,
             final Environment environment,
             final EventBus eventBus,
             final Dispatcher dispatcher,
+            final PlaceManager placeManager,
             final Places places,
             final StatementContext statementContext,
             final MetadataRegistry metadataRegistry,
             final @Footer Provider<Progress> progress,
             final Resources resources) {
 
         super(new FinderColumn.Builder<ServerGroupDeployment>(finder, Ids.SERVER_GROUP_DEPLOYMENT, Names.DEPLOYMENT)
+                .useFirstActionAsBreadcrumbHandler()
                 .pinnable()
                 .showCount()
                 .withFilter());",2016-09-20T13:05:53Z,81
"@@ -31,16 +31,15 @@
 import org.jboss.hal.resources.Resources;
 
 import static java.util.Arrays.asList;
+import static org.jboss.hal.client.deployment.DeploymentPreview.LAST_DISABLED_AT;
+import static org.jboss.hal.client.deployment.DeploymentPreview.LAST_ENABLED_AT;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 
 /**
  * @author Harald Pehl
  */
 class ServerGroupDeploymentPreview extends PreviewContent<ServerGroupDeployment> {
 
-    private static final String LAST_ENABLED_AT = ""Last enabled at"";
-    private static final String LAST_DISABLED_AT = ""Last disabled at"";
-
     ServerGroupDeploymentPreview(final ServerGroupDeploymentColumn column, final ServerGroupDeployment sgd,
             final Places places, final Resources resources) {
         super(sgd.getName());
@@ -50,7 +49,8 @@ class ServerGroupDeploymentPreview extends PreviewContent<ServerGroupDeployment>
             if (deployment.getStatus() == Status.FAILED) {
                 previewBuilder().add(new Alert(Icons.ERROR, resources.messages().deploymentFailed(sgd.getName())));
             } else if (deployment.getStatus() == Status.STOPPED) {
-                previewBuilder().add(new Alert(Icons.STOPPED, resources.messages().deploymentStopped(sgd.getName())));
+                previewBuilder().add(new Alert(Icons.STOPPED, resources.messages().deploymentStopped(sgd.getName()),
+                        resources.constants().enable(), event -> column.enable(sgd)));
             } else if (deployment.getStatus() == Status.OK) {
                 previewBuilder().add(new Alert(Icons.OK, resources.messages().deploymentActive(sgd.getName()),
                         resources.constants().disable(), event -> column.disable(sgd)));",2016-09-20T13:05:53Z,33
"@@ -52,6 +52,7 @@ public NamesStep(final Environment environment, final Metadata metadata, final R
             builder.include(ENABLED);
         }
         form = builder.build();
+        registerAttachable(form);
     }
 
     @Override",2016-09-20T13:05:53Z,283
"@@ -81,11 +81,19 @@ public FinderPath subsystemPath(String subsystem) {
     // ------------------------------------------------------ deployment
 
     public FinderPath deployment(String deployment) {
-        return environment.isStandalone()
-                ? new FinderPath().append(Ids.DEPLOYMENT, Ids.asId(deployment))
-                : new FinderPath().append(Ids.DEPLOYMENT_BROWSE_BY, Ids.asId(Names.SERVER_GROUPS))
-                .append(Ids.DEPLOYMENT_SERVER_GROUP, Ids.serverGroup(statementContext.selectedServerGroup()))
-                .append(Ids.DEPLOYMENT, Ids.asId(deployment));
+        if (environment.isStandalone()) {
+            return new FinderPath().append(Ids.DEPLOYMENT, Ids.deployment(deployment),
+                    Names.DEPLOYMENT, deployment);
+        } else {
+            String serverGroup = statementContext.selectedServerGroup();
+            return new FinderPath()
+                    .append(Ids.DEPLOYMENT_BROWSE_BY, Ids.asId(Names.SERVER_GROUPS),
+                            resources.constants().browseBy(), Names.SERVER_GROUPS)
+                    .append(Ids.DEPLOYMENT_SERVER_GROUP, Ids.serverGroup(serverGroup),
+                            Names.SERVER_GROUP, serverGroup)
+                    .append(Ids.SERVER_GROUP_DEPLOYMENT, Ids.serverGroupDeployment(serverGroup, deployment),
+                            Names.DEPLOYMENT, deployment);
+        }
     }
 
 ",2016-09-20T13:05:53Z,284
"@@ -107,7 +107,7 @@ public interface Ids {
     String DATA_SOURCE_RUNTIME_POOL_TAB = build(DATA_SOURCE_RUNTIME, ""pool"", TAB_SUFFIX);
     String DEPLOYMENT = ""deployment"";
     String DEPLOYMENT_ADD_ACTIONS = build(DEPLOYMENT, ""add-actions"");
-    String DEPLOYMENT_BROWSE_BY = build(DEPLOYMENT, ""browse-by"");
+    String DEPLOYMENT_BROWSE_BY = ""deployment-browse-by""; // must be a constant expression!
     String DEPLOYMENT_UNMANAGED_ADD = build(DEPLOYMENT, ""unmanaged"", ADD_SUFFIX);
     String DEPLOYMENT_REFRESH = build(DEPLOYMENT, REFRESH_SUFFIX);
     String DEPLOYMENT_SERVER_GROUP = ""deployment-sg"";",2016-09-20T13:05:53Z,111
"@@ -258,9 +258,9 @@ public JcaView(Dispatcher dispatcher,
         Metadata dwmMetadata = metadataRegistry.lookup(DISTRIBUTED_WORKMANAGER_TEMPLATE);
 
         Form<ModelNode> dwmAddForm = new ModelNodeForm.Builder<>(Ids.JCA_DISTRIBUTED_WORKMANAGER_ADD, dwmMetadata)
-                .fromRequestProperties()
                 .include(NAME, ELYTRON_ENABLED)
                 .unsorted()
+                .addOnly()
                 .build();
         AddResourceDialog dwmAddDialog = new AddResourceDialog(resources.messages().addResourceTitle(dwmType),
                 dwmAddForm, (name, model) -> presenter.add(dwmType, name, DISTRIBUTED_WORKMANAGER_TEMPLATE, model));",2017-11-24T08:21:35Z,285
"@@ -372,5 +372,28 @@
                 </plugins>
             </build>
         </profile>
+        <profile>
+            <id>i18n</id>
+            <build>
+                <plugins>
+                    <plugin>
+                        <groupId>net.ltgt.gwt.maven</groupId>
+                        <artifactId>gwt-maven-plugin</artifactId>
+                        <executions>
+                            <execution>
+                                <id>generate-i18n-module</id>
+                                <phase>generate-resources</phase>
+                                <goals>
+                                    <goal>generate-module</goal>
+                                </goals>
+                                <configuration>
+                                    <moduleTemplate>${project.basedir}/src/main/module-i18n.gwt.xml</moduleTemplate>
+                                </configuration>
+                            </execution>
+                        </executions>
+                    </plugin>
+                </plugins>
+            </build>
+        </profile>
     </profiles>
 </project>",2018-08-09T12:05:40Z,160
"@@ -0,0 +1,57 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<module>
+    <inherits name=""com.google.common.cache.Cache""/>
+    <inherits name=""com.google.common.collect.Collect""/>
+    <inherits name=""com.gwtplatform.mvp.MvpWithEntryPoint""/>
+    <inherits name=""elemental2.core.Core""/>
+    <inherits name=""elemental2.dom.Dom""/>
+    <inherits name=""elemental2.webstorage.WebStorage""/>
+    <inherits name=""com.intendia.rxgwt.RxElemento""/>
+    <inherits name=""org.jboss.gwt.elemento.Core""/>
+    <inherits name=""org.jboss.gwt.elemento.Template""/>
+    <inherits name=""ru.finam.slf4jgwt.logging.gwt.Logging""/>
+
+    <set-configuration-property name=""gwtp.prebootstrapper""
+                                value=""org.jboss.hal.client.bootstrap.HalPreBootstrapper""/>
+    <set-configuration-property name=""gwtp.bootstrapper""
+                                value=""org.jboss.hal.client.bootstrap.HalBootstrapper""/>
+    <extend-configuration-property name=""gin.ginjector.modules""
+                                   value=""org.jboss.hal.client.gin.CompositeModule""/>
+
+    <define-configuration-property name=""hal.version"" is-multi-valued=""false""/>
+    <set-configuration-property name=""hal.version"" value=""3.0.3-SNAPSHOT""/>
+
+    <set-configuration-property name=""CssResource.enableGss"" value=""true""/>
+
+    <extend-property name=""locale"" values=""en,de,es,fr,pt_BR,zh_Hans,ja""/>
+    <set-property-fallback name=""locale"" value=""en""/>
+    <set-property name=""locale"" value=""en,de,es,fr,pt_BR,zh_Hans,ja""/>
+
+    <!-- We do our own log setup -->
+    <replace-with class=""com.google.gwt.logging.client.LogConfiguration.LogConfigurationImplNull"">
+        <when-type-is class=""com.google.gwt.logging.client.LogConfiguration.LogConfigurationImplNull""/>
+    </replace-with>
+    <replace-with class=""org.jboss.hal.client.logging.LogHandler"">
+        <when-type-is class=""com.google.gwt.logging.client.ConsoleLogHandler""/>
+    </replace-with>
+    <set-property name=""gwt.logging.enabled"" value=""TRUE""/>
+    <set-property name=""gwt.logging.logLevel"" value=""FINE""/>
+    <set-property name=""user.agent"" value=""gecko1_8,safari""/>
+
+    <collapse-all-properties/>
+</module>",2018-08-09T12:05:40Z,286
"@@ -38,15 +38,15 @@ public TestableStatementContext() {
 
 
     @Override
-    public String resolve(final String placeholder) {
+    public String resolve(String placeholder, AddressTemplate template) {
         if (SELECTION_KEY.equals(placeholder)) {
             return ""selection"";
         }
         return null;
     }
 
     @Override
-    public String[] resolveTuple(final String placeholder) {
+    public String[] resolveTuple(String placeholder, AddressTemplate template) {
         Tuple t = Tuple.from(placeholder);
         if (t != null && context.containsKey(t)) {
             String value = context.get(t);",2018-08-09T12:05:40Z,287
"@@ -60,7 +60,10 @@ public ServerColumn(final Finder finder,
         super(new FinderColumn.Builder<NamedNode>(finder, Ids.MESSAGING_SERVER, Names.SERVER)
 
                 .columnAction(columnActionFactory.add(Ids.MESSAGING_SERVER_ADD, Names.SERVER, SERVER_TEMPLATE,
-                        Ids::messagingServer))
+                        name -> {
+                            //noinspection Convert2MethodRef
+                            return Ids.messagingServer(name);
+                        }))
                 .columnAction(columnActionFactory.refresh(Ids.MESSAGING_SERVER_REFRESH))
 
                 .itemsProvider((context, callback) -> crud.readChildren(MESSAGING_SUBSYSTEM_TEMPLATE, SERVER,",2017-07-12T15:31:07Z,288
"@@ -165,7 +165,7 @@ public BrowseContentView(final Dispatcher dispatcher, final Resources resources)
                             .end()
                         .end()
                     .end()
-                    .div().css(marginTopLarge, marginBottomLarge)
+                    .div().css(marginTopSmall, marginBottomLarge)
                         .add(editor.asElement())
                     .end()
                 .end()
@@ -216,7 +216,7 @@ private void adjustHeight() {
         int height = Skeleton.applicationHeight();
         int searchHeight = treeSearch.asElement().getOffsetHeight();
         int treeHeight = height - 2 * MARGIN_BIG - searchHeight - 2 * MARGIN_SMALL;
-        int editorHeight = height - 3 * MARGIN_BIG - editorControls.getOffsetHeight();
+        int editorHeight = height - 2 * MARGIN_BIG - MARGIN_SMALL - editorControls.getOffsetHeight();
         editorHeight = max(editorHeight, MIN_HEIGHT);
 
         treeContainer.getStyle().setHeight(treeHeight, PX);
@@ -240,9 +240,12 @@ public void setContent(final JsArrayOf<Node<ContentEntry>> nodes) {
             if (!""ready"".equals(selectionContext.action)) { //NON-NLS
                 boolean hasSelection = !selectionContext.selected.isEmpty();
                 if (hasSelection) {
-                    if (selectionContext.node.id == Ids.CONTENT_TREE_ROOT) {
+                    if (selectionContext.node.id.equals(Ids.CONTENT_TREE_ROOT)) {
                         // root node
-                        editorStatus.setTextContent(resources.constants().nothingSelected());
+                        ResourceAddress address = new ResourceAddress().add(DEPLOYMENT, presenter.getContent());
+                        Operation operation = new Operation.Builder(READ_CONTENT, address).build();
+                        downloadLink.setAttribute(""href"", dispatcher.downloadUrl(operation)); //NON-NLS
+                        editorStatus.setTextContent(presenter.getContent());
                         editor.getEditor().getSession().setValue("""");
                     } else {
                         ContentEntry contentEntry = selectionContext.node.data;",2016-09-23T12:37:14Z,289
"@@ -22,6 +22,7 @@
 
 import com.google.gwt.safehtml.shared.SafeHtml;
 import com.google.web.bindery.event.shared.EventBus;
+import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
 import elemental.client.Browser;
 import elemental.dom.Element;
 import elemental.html.SpanElement;
@@ -184,6 +185,9 @@ public List<ItemAction<Deployment>> actions() {
                 List<ItemAction<Deployment>> actions = new ArrayList<>();
                 actions.add(itemActionFactory.view(NameTokens.DEPLOYMENT_DETAIL,
                         Ids.DEPLOYMENT, item.getName()));
+                actions.add(itemActionFactory.placeRequest(resources.constants().browse(),
+                        new PlaceRequest.Builder().nameToken(NameTokens.BROWSE_CONTENT)
+                                .with(CONTENT, item.getName()).build()));
                 if (item.isEnabled()) {
                     actions.add(new ItemAction<>(resources.constants().disable(), deployment -> disable(deployment)));
                 } else {",2016-09-23T12:37:14Z,65
"@@ -138,9 +138,11 @@ public ServerGroupDeploymentColumn(final Finder finder,
         this.resources = resources;
 
         List<ColumnAction<ServerGroupDeployment>> addActions = new ArrayList<>();
-        addActions.add(new ColumnAction<>(Ids.SERVER_GROUP_DEPLOYMENT_UPLOAD, resources.constants().uploadDeployment(),
+        addActions.add(new ColumnAction<>(Ids.SERVER_GROUP_DEPLOYMENT_UPLOAD,
+                resources.constants().uploadNewDeployment(),
                 column -> uploadAndDeploy()));
-        addActions.add(new ColumnAction<>(Ids.SERVER_GROUP_DEPLOYMENT_ADD, resources.constants().deployContent(),
+        addActions.add(new ColumnAction<>(Ids.SERVER_GROUP_DEPLOYMENT_ADD,
+                resources.constants().deployExistingContent(),
                 column -> addDeploymentFromContentRepository()));
         addActions.add(new ColumnAction<>(Ids.SERVER_GROUP_DEPLOYMENT_UNMANAGED_ADD,
                 resources.messages().addResourceTitle(Names.UNMANAGED_DEPLOYMENT),",2016-09-23T12:37:14Z,81
"@@ -64,7 +64,7 @@ public Element asElement() {
     public void reset(final UploadContext context) {
         context.name = """";
         context.runtimeName = """";
-        context.enabled = true;
+        context.enabled = false;
     }
 
     @Override
@@ -86,6 +86,9 @@ protected boolean onNext(final UploadContext context) {
         if (valid) {
             context.name = nameItem.getValue();
             context.runtimeName = form.<String>getFormItem(RUNTIME_NAME).getValue();
+            if (environment.isStandalone()) {
+                context.enabled = form.<Boolean>getFormItem(ENABLED).getValue();
+            }
         }
         return valid;
     }",2016-09-23T12:37:14Z,283
"@@ -51,6 +51,10 @@ h2.underline {
   margin-top: @margin-large;
 }
 
+.margin-top-small {
+  margin-top: @margin-small;
+}
+
 .with-progress {
   animation: progress-animation 1s linear infinite;
   background-size: 40px 40px;",2016-09-23T12:37:14Z,290
"@@ -175,6 +175,7 @@ public interface CSS {
     String marginRightSmall = ""margin-right-small"";
     String marginLeft5 = ""margin-left-5"";
     String marginTopLarge = ""margin-top-large"";
+    String marginTopSmall = ""margin-top-small"";
     String messageDetails = ""message-details"";
     String messageDetailsPre = ""message-details-pre"";
     String modal = ""modal"";",2016-09-23T12:37:14Z,159
"@@ -86,6 +86,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String defaultValue();
     String deploy();
     String deployContent();
+    String deployExistingContent();
     String deploymentAttributes();
     String deploymentError();
     String deploymentInProgress();
@@ -367,6 +368,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String uploadDeployment();
     String uploadError();
     String uploadInProgress();
+    String uploadNewDeployment();
     String uploadSuccessful();
     String used();
     String user();",2016-09-23T12:37:14Z,100
"@@ -44,6 +44,7 @@ days=days
 defaultValue=Default value
 deploy=Deploy
 deployContent=Deploy Content
+deployExistingContent=Deploy existing content
 deploymentAttributes=Deployment attributes
 deploymentError=Deployment failed
 deploymentInProgress=Deployment in progress
@@ -309,6 +310,7 @@ uploadContent=Upload Content
 uploadDeployment=Upload Deployment
 uploadError=Upload failed
 uploadInProgress=Upload in progress
+uploadNewDeployment=Upload new deployment
 uploadSuccessful=Upload successful
 used=Used
 user=User",2016-09-23T12:37:14Z,100
"@@ -21,7 +21,6 @@
 
 import javax.inject.Inject;
 
-import com.google.web.bindery.event.shared.EventBus;
 import elemental2.dom.HTMLElement;
 import org.jboss.hal.core.CrudOperations;
 import org.jboss.hal.core.finder.ColumnAction;
@@ -33,10 +32,11 @@
 import org.jboss.hal.core.finder.ItemAction;
 import org.jboss.hal.core.finder.ItemActionFactory;
 import org.jboss.hal.core.finder.ItemDisplay;
+import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
 import org.jboss.hal.core.mvp.Places;
 import org.jboss.hal.dmr.Property;
 import org.jboss.hal.dmr.ResourceAddress;
-import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.security.Constraint;
@@ -47,7 +47,6 @@
 import org.jboss.hal.spi.AsyncColumn;
 import org.jboss.hal.spi.Requires;
 
-import static elemental2.dom.DomGlobal.alert;
 import static java.util.Arrays.stream;
 import static java.util.Collections.emptyList;
 import static java.util.stream.Collectors.toList;
@@ -72,14 +71,17 @@ private static String findCacheContainer(FinderPath path) {
         return null;
     }
 
+    private final CrudOperations crud;
+    private final MetadataRegistry metadataRegistry;
+    private final StatementContext statementContext;
+    private final Resources resources;
+
     @Inject
     public CacheColumn(Finder finder,
             ColumnActionFactory columnActionFactory,
             ItemActionFactory itemActionFactory,
-            Dispatcher dispatcher,
             CrudOperations crud,
             Places places,
-            EventBus eventBus,
             MetadataRegistry metadataRegistry,
             StatementContext statementContext,
             Resources resources) {
@@ -112,6 +114,10 @@ public CacheColumn(Finder finder,
                 .useFirstActionAsBreadcrumbHandler()
                 .withFilter()
         );
+        this.crud = crud;
+        this.metadataRegistry = metadataRegistry;
+        this.statementContext = statementContext;
+        this.resources = resources;
 
         List<ColumnAction<Cache>> addActions = new ArrayList<>();
         for (CacheType cacheType : CacheType.values()) {
@@ -181,6 +187,15 @@ public List<ItemAction<Cache>> actions() {
     }
 
     private void addCache(CacheType cacheType) {
-        alert(""Add "" + cacheType.type + "": "" + Names.NYI);
+        Metadata metadata = metadataRegistry.lookup(cacheType.template);
+        AddResourceDialog dialog = new AddResourceDialog(Ids.build(cacheType.baseId, Ids.ADD),
+                resources.messages().addResourceTitle(cacheType.type), metadata,
+                (name, model) -> {
+                    String cacheContainer = findCacheContainer(getFinder().getContext().getPath());
+                    ResourceAddress address = cacheType.template.resolve(statementContext, cacheContainer, name);
+                    crud.add(cacheType.type, name, address, model,
+                            (n, a) -> this.refresh(Ids.build(cacheType.baseId, name)));
+                });
+        dialog.show();
     }
 }",2018-07-02T09:03:24Z,291
"@@ -15,6 +15,8 @@
  */
 package org.jboss.hal.client.configuration.subsystem.infinispan;
 
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Map;
 
 import com.google.web.bindery.event.shared.EventBus;
@@ -31,19 +33,26 @@
 import org.jboss.hal.core.mbui.form.ModelNodeForm;
 import org.jboss.hal.core.mvp.ApplicationFinderPresenter;
 import org.jboss.hal.core.mvp.SupportsExpertMode;
+import org.jboss.hal.dmr.Composite;
+import org.jboss.hal.dmr.CompositeResult;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.NamedNode;
 import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.Property;
 import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Message;
+import org.jboss.hal.spi.MessageEvent;
 
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafePropertyList;
 
 abstract class CachePresenter<V extends CacheView, Proxy_ extends ProxyPlace<?>>
         extends ApplicationFinderPresenter<V, Proxy_>
@@ -54,12 +63,14 @@ abstract class CachePresenter<V extends CacheView, Proxy_ extends ProxyPlace<?>>
 
     private final FinderPathFactory finderPathFactory;
     private final CrudOperations crud;
+    private final Dispatcher dispatcher;
     private final MetadataRegistry metadataRegistry;
     private final StatementContext statementContext;
     private final Resources resources;
     private final CacheType cacheType;
     private String cacheContainer;
     private String cache;
+    private Memory memory;
     private Store store;
 
     CachePresenter(EventBus eventBus,
@@ -68,13 +79,15 @@ abstract class CachePresenter<V extends CacheView, Proxy_ extends ProxyPlace<?>>
             Finder finder,
             FinderPathFactory finderPathFactory,
             CrudOperations crud,
+            Dispatcher dispatcher,
             MetadataRegistry metadataRegistry,
             StatementContext statementContext,
             Resources resources,
             CacheType cacheType) {
         super(eventBus, view, proxy_, finder);
         this.finderPathFactory = finderPathFactory;
         this.crud = crud;
+        this.dispatcher = dispatcher;
         this.metadataRegistry = metadataRegistry;
         this.statementContext = statementContext;
         this.resources = resources;
@@ -103,7 +116,23 @@ public FinderPath finderPath() {
     @Override
     protected void reload() {
         crud.readRecursive(resourceAddress(),
-                result -> getView().update(new Cache(cache, cacheType, result)));
+                result -> {
+                    List<Property> properties = failSafePropertyList(result, MEMORY);
+                    for (Property property : properties) {
+                        if (property.getValue().isDefined()) {
+                            memory = Memory.fromResource(property.getName());
+                            break;
+                        }
+                    }
+                    properties = failSafePropertyList(result, STORE);
+                    for (Property property : properties) {
+                        if (property.getValue().isDefined()) {
+                            store = Store.fromResource(property.getName());
+                            break;
+                        }
+                    }
+                    getView().update(new Cache(cache, cacheType, result));
+                });
     }
 
 
@@ -188,8 +217,22 @@ public void afterReset(Form<ModelNode> f) {
                 });
     }
 
-    void switchMemory(Memory memory) {
-
+    void switchMemory(Memory newMemory) {
+        if (newMemory != null && newMemory != this.memory) {
+            List<Operation> operations = new ArrayList<>();
+            if (this.memory != null) {
+                operations.add(new Operation.Builder(memoryAddress(this.memory), REMOVE).build());
+            }
+            operations.add(new Operation.Builder(memoryAddress(newMemory), ADD).build());
+            Composite composite = new Composite(operations)
+                    .addHeader(ALLOW_RESOURCE_SERVICE_RESTART, true);
+            dispatcher.execute(composite, (CompositeResult result) -> {
+                MessageEvent.fire(getEventBus(),
+                        Message.success(resources.messages().addSingleResourceSuccess(newMemory.type)));
+                this.memory = newMemory;
+                reload();
+            });
+        }
     }
 
     private AddressTemplate memoryTemplate(Memory memory) {
@@ -245,7 +288,48 @@ public void afterReset(Form<ModelNode> f) {
     }
 
     void switchStore(Store newStore) {
-        store = newStore;
+        if (newStore != null && newStore != this.store) {
+            List<Operation> operations = new ArrayList<>();
+            if (this.store != null) {
+                operations.add(new Operation.Builder(storeAddress(this.store), REMOVE).build());
+            }
+
+            if (newStore.addWithDialog) {
+                Metadata metadata = metadataRegistry.lookup(
+                        cacheType.template.append(STORE + EQUALS + newStore.resource));
+                String id = Ids.build(cacheType.baseId, newStore.baseId, Ids.ADD);
+                Form<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata) // custom form w/o unbound name item
+                        .fromRequestProperties()
+                        .requiredOnly()
+                        .build();
+                AddResourceDialog dialog = new AddResourceDialog(resources.messages().addResourceTitle(newStore.type),
+                        form, (name, model) -> {
+                    operations.add(new Operation.Builder(storeAddress(newStore), ADD)
+                            .payload(model)
+                            .build());
+                    Composite composite = new Composite(operations)
+                            .addHeader(ALLOW_RESOURCE_SERVICE_RESTART, true);
+                    dispatcher.execute(composite, (CompositeResult result) -> {
+                        MessageEvent.fire(getEventBus(),
+                                Message.success(resources.messages().addSingleResourceSuccess(newStore.type)));
+                        this.store = newStore;
+                        reload();
+                    });
+                });
+                dialog.show();
+
+            } else {
+                operations.add(new Operation.Builder(storeAddress(newStore), ADD).build());
+                Composite composite = new Composite(operations)
+                        .addHeader(ALLOW_RESOURCE_SERVICE_RESTART, true);
+                dispatcher.execute(composite, (CompositeResult result) -> {
+                    MessageEvent.fire(getEventBus(),
+                            Message.success(resources.messages().addSingleResourceSuccess(newStore.type)));
+                    this.store = newStore;
+                    reload();
+                });
+            }
+        }
     }
 
     private AddressTemplate storeTemplate(Store store) {
@@ -306,6 +390,14 @@ public void afterReset(Form<ModelNode> f) {
     }
 
     void switchWrite(Write currentWrite, Write newWrite) {
+        List<Operation> operations = new ArrayList<>();
+        operations.add(new Operation.Builder(writeAddress(currentWrite), REMOVE).build());
+        operations.add(new Operation.Builder(writeAddress(newWrite), ADD).build());
+        dispatcher.execute(new Composite(operations), (CompositeResult result) -> {
+            MessageEvent.fire(getEventBus(),
+                    Message.success(resources.messages().addSingleResourceSuccess(newWrite.type)));
+            reload();
+        });
     }
 
     private AddressTemplate writeTemplate(Write write) {",2018-07-02T09:03:24Z,292
"@@ -21,15 +21,14 @@
 import org.jboss.hal.core.finder.PreviewAttributes;
 import org.jboss.hal.core.finder.PreviewAttributes.PreviewAttribute;
 import org.jboss.hal.core.finder.PreviewContent;
-import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Property;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Strings;
 
 import static java.util.Arrays.asList;
 import static java.util.Collections.sort;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
-import static org.jboss.hal.dmr.ModelNodeHelper.failSafeGet;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafePropertyList;
 
 class CachePreview extends PreviewContent<Cache> {
 
@@ -77,13 +76,10 @@ class CachePreview extends PreviewContent<Cache> {
     }
 
     private String definedSingleton(Cache cache, String name) {
-        ModelNode modelNode = failSafeGet(cache, name);
-        if (modelNode.isDefined()) {
-            List<Property> properties = modelNode.asPropertyList();
-            for (Property property : properties) {
-                if (property.getValue().isDefined()) {
-                    return property.getName();
-                }
+        List<Property> properties = failSafePropertyList(cache, name);
+        for (Property property : properties) {
+            if (property.getValue().isDefined()) {
+                return property.getName();
             }
         }
         return """";",2018-07-02T09:03:24Z,293
"@@ -25,6 +25,7 @@
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderPathFactory;
 import org.jboss.hal.core.mvp.SupportsExpertMode;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.token.NameTokens;
@@ -44,11 +45,12 @@ public DistributedCachePresenter(EventBus eventBus,
             MyProxy myProxy,
             Finder finder,
             FinderPathFactory finderPathFactory,
-            CrudOperations crudOperations,
+            CrudOperations crud,
+            Dispatcher dispatcher,
             MetadataRegistry metadataRegistry,
             StatementContext statementContext,
             Resources resources) {
-        super(eventBus, view, myProxy, finder, finderPathFactory, crudOperations, metadataRegistry, statementContext,
+        super(eventBus, view, myProxy, finder, finderPathFactory, crud, dispatcher, metadataRegistry, statementContext,
                 resources, DISTRIBUTED);
     }
 ",2018-07-02T09:03:24Z,294
"@@ -25,6 +25,7 @@
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderPathFactory;
 import org.jboss.hal.core.mvp.SupportsExpertMode;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.token.NameTokens;
@@ -44,11 +45,12 @@ public InvalidationCachePresenter(EventBus eventBus,
             MyProxy myProxy,
             Finder finder,
             FinderPathFactory finderPathFactory,
-            CrudOperations crudOperations,
+            CrudOperations crud,
+            Dispatcher dispatcher,
             MetadataRegistry metadataRegistry,
             StatementContext statementContext,
             Resources resources) {
-        super(eventBus, view, myProxy, finder, finderPathFactory, crudOperations, metadataRegistry, statementContext,
+        super(eventBus, view, myProxy, finder, finderPathFactory, crud, dispatcher, metadataRegistry, statementContext,
                 resources, INVALIDATION);
     }
 ",2018-07-02T09:03:24Z,295
"@@ -25,6 +25,7 @@
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderPathFactory;
 import org.jboss.hal.core.mvp.SupportsExpertMode;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.token.NameTokens;
@@ -44,11 +45,12 @@ public LocalCachePresenter(EventBus eventBus,
             MyProxy myProxy,
             Finder finder,
             FinderPathFactory finderPathFactory,
-            CrudOperations crudOperations,
+            CrudOperations crud,
+            Dispatcher dispatcher,
             MetadataRegistry metadataRegistry,
             StatementContext statementContext,
             Resources resources) {
-        super(eventBus, view, myProxy, finder, finderPathFactory, crudOperations, metadataRegistry, statementContext,
+        super(eventBus, view, myProxy, finder, finderPathFactory, crud, dispatcher, metadataRegistry, statementContext,
                 resources, LOCAL);
     }
 ",2018-07-02T09:03:24Z,296
"@@ -81,7 +81,7 @@ class MemoryElement implements IsElement<HTMLElement>, Attachable, HasPresenter<
                                 .textContent(resources.constants().switchMemory()))
                         .add(selectMemory)
                         .asElement())
-                .add(h(1).textContent(Names.MEMORY + "": "")
+                .add(h(1).textContent(Names.MEMORY)
                         .add(currentMemory = span().asElement()))
                 .add(p().textContent(resources.constants().cacheMemory()))
                 .addAll(memoryForms.values().stream().map(Form::asElement).collect(toList()))
@@ -146,7 +146,7 @@ public void setPresenter(CachePresenter presenter) {
     void update(List<Property> memories) {
         Memory memory = Memory.fromResource(memories.get(0).getName());
         if (memory != null) {
-            currentMemory.textContent = memory.type;
+            currentMemory.textContent = "": "" + memory.type;
             SelectBoxBridge.Single.element(selectMemory).setValue(memory.resource);
 
             ModelNode memoryNode = memories.get(0).getValue();",2018-07-02T09:03:24Z,297
"@@ -25,6 +25,7 @@
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderPathFactory;
 import org.jboss.hal.core.mvp.SupportsExpertMode;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.token.NameTokens;
@@ -44,11 +45,12 @@ public ReplicatedCachePresenter(EventBus eventBus,
             MyProxy myProxy,
             Finder finder,
             FinderPathFactory finderPathFactory,
-            CrudOperations crudOperations,
+            CrudOperations crud,
+            Dispatcher dispatcher,
             MetadataRegistry metadataRegistry,
             StatementContext statementContext,
             Resources resources) {
-        super(eventBus, view, myProxy, finder, finderPathFactory, crudOperations, metadataRegistry, statementContext,
+        super(eventBus, view, myProxy, finder, finderPathFactory, crud, dispatcher, metadataRegistry, statementContext,
                 resources, REPLICATED);
     }
 ",2018-07-02T09:03:24Z,298
"@@ -25,6 +25,7 @@
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderPathFactory;
 import org.jboss.hal.core.mvp.SupportsExpertMode;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.token.NameTokens;
@@ -44,11 +45,12 @@ public ScatteredCachePresenter(EventBus eventBus,
             MyProxy myProxy,
             Finder finder,
             FinderPathFactory finderPathFactory,
-            CrudOperations crudOperations,
+            CrudOperations crud,
+            Dispatcher dispatcher,
             MetadataRegistry metadataRegistry,
             StatementContext statementContext,
             Resources resources) {
-        super(eventBus, view, myProxy, finder, finderPathFactory, crudOperations, metadataRegistry, statementContext,
+        super(eventBus, view, myProxy, finder, finderPathFactory, crud, dispatcher, metadataRegistry, statementContext,
                 resources, SCATTERED);
     }
 ",2018-07-02T09:03:24Z,299
"@@ -123,7 +123,7 @@ class StoreElement implements IsElement<HTMLElement>, Attachable, HasPresenter<C
                                 .textContent(resources.constants().switchStore()))
                         .add(selectStore)
                         .asElement())
-                .add(h(1).textContent(Names.STORE + "": "")
+                .add(h(1).textContent(Names.STORE)
                         .add(currentStore = span().asElement()))
                 .add(p().textContent(resources.constants().cacheStore()))
                 .add(emptyState)
@@ -223,7 +223,7 @@ void update(List<Property> stores) {
         } else {
             Store store = Store.fromResource(stores.get(0).getName());
             if (store != null) {
-                currentStore.textContent = store.type;
+                currentStore.textContent = "": "" + store.type;
                 SelectBoxBridge.Single.element(selectStore).setValue(store.resource);
 
                 ModelNode storeNode = stores.get(0).getValue();",2018-07-02T09:03:24Z,300
"@@ -108,18 +108,20 @@ public Composite fromChangeSet(ResourceAddress address, Map<String, Object> chan
             if (intersection.isEmpty()) {
 
                 // the easy part: no conflicts
-                if (!alternatives.isEmpty()) {
-                    logger.debug(""Add undefine operations for alternatives [{}]"", String.join("", "", alternatives));
-                    alternatives.forEach(alternative -> {
+                alternatives.forEach(alternative -> {
+                    if (resourceDescription.isDeprecated(ATTRIBUTES, alternative)) {
+                        logger.debug(""Skip undefine operations for deprecated alternative {}"", alternative);
+                    } else {
+                        logger.debug(""Add undefine operations for alternative {}"", alternative);
                         operations.putIfAbsent(alternative, undefineAttribute(address, alternative));
                         List<String> requires = resourceDescription.findRequires(ATTRIBUTES, alternative);
                         if (!requires.isEmpty()) {
                             logger.debug(""Add undefine operations for attributes which require {}: [{}]"", alternative,
                                     String.join("", "", requires));
                             requires.forEach(r -> operations.putIfAbsent(r, undefineAttribute(address, r)));
                         }
-                    });
-                }
+                    }
+                });
 
             } else {
                 // possible conflicts: one or more alternatives are also in the change-set
@@ -202,7 +204,7 @@ Composite resetResource(ResourceAddress address, Set<String> attributes,
 
         // collect all attributes from the 'requires' list of this attribute
         // HashMultimap<String, String> requires = HashMultimap.create();
-        final TreeSet<String> requires = new TreeSet<>();
+        TreeSet<String> requires = new TreeSet<>();
         ModelNode attributesDescription = description.get(ATTRIBUTES);
         attributes.forEach(attribute -> {
             ModelNode attributeDescription = attributesDescription.get(attribute);",2018-05-11T14:54:05Z,21
"@@ -40,9 +40,7 @@ public ResourceDescription(ModelNode payload) {
         set(payload);
     }
 
-    /**
-     * @return the resource description
-     */
+    /** @return the resource description */
     @JsProperty
     public String getDescription() {
         return get(DESCRIPTION).asString();
@@ -167,32 +165,36 @@ public boolean isDefaultValue(String path, String name, Object value) {
         return false;
     }
 
+    @JsIgnore
+    public boolean isDeprecated(String path, String name) {
+        Property property = findAttribute(path, name);
+        if (property != null) {
+            ModelNode attribute = property.getValue();
+            return ModelNodeHelper.failSafeBoolean(attribute, DEPRECATED);
+        }
+        return false;
+    }
+
 
     // ------------------------------------------------------ JS methods
 
-    /**
-     * @return the attribute descriptions
-     */
+    /** @return the attribute descriptions */
     @JsMethod(name = ""getAttributes"")
     @EsReturn(""Property[]"")
     public Property[] jsGetAttributes() {
         List<Property> attributes = getAttributes(ATTRIBUTES);
         return attributes.toArray(new Property[attributes.size()]);
     }
 
-    /**
-     * @return the request properties of the add operation
-     */
+    /** @return the request properties of the add operation */
     @JsMethod(name = ""getRequestProperties"")
     @EsReturn(""Property[]"")
     public Property[] jsGetRequestProperties() {
         List<Property> attributes = getAttributes(OPERATIONS + ""/"" + ADD + ""/"" + REQUEST_PROPERTIES);
         return attributes.toArray(new Property[attributes.size()]);
     }
 
-    /**
-     * @return the operation descriptions
-     */
+    /** @return the operation descriptions */
     @JsProperty(name = ""operations"")
     @EsReturn(""Property[]"")
     public Property[] jsOperations() {",2018-05-11T14:54:05Z,24
"@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-self.importScripts(""polyfill.min.js"", ""pouchdb.min.js"");
+self.importScripts(""polyfill.js"", ""pouchdb.min.js"");
 
 self.addEventListener(""message"", function (e) {
     var db = new PouchDB(e.data.database);",2018-08-09T11:15:44Z,204
"@@ -105,7 +105,7 @@ public JGroupsPresenter(EventBus eventBus,
                 new FilteringStatementContext.Filter() {
                     @Override
                     @SuppressWarnings(""HardCodedStringLiteral"")
-                    public String filter(String filterKey) {
+                    public String filter(String filterKey, AddressTemplate template) {
                         switch (filterKey) {
                             case ""selected.channel"":
                                 return currentChannel;
@@ -120,7 +120,7 @@ public String filter(String filterKey) {
                     }
 
                     @Override
-                    public String[] filterTuple(String placeholder) {
+                    public String[] filterTuple(String placeholder, AddressTemplate template) {
                         return null;
                     }
                 });",2018-08-09T11:15:44Z,301
"@@ -42,6 +42,7 @@
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Operation;
 import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.FilteringStatementContext;
 import org.jboss.hal.meta.FilteringStatementContext.Filter;
 import org.jboss.hal.meta.Metadata;
@@ -94,15 +95,15 @@ public ApplicationSecurityDomainPresenter(
         this.statementContext = new FilteringStatementContext(statementContext,
                 new Filter() {
                     @Override
-                    public String filter(String placeholder) {
+                    public String filter(String placeholder, AddressTemplate template) {
                         if (SELECTION_KEY.equals(placeholder)) {
                             return appSecurityDomain;
                         }
                         return null;
                     }
 
                     @Override
-                    public String[] filterTuple(String placeholder) {
+                    public String[] filterTuple(String placeholder, AddressTemplate template) {
                         return null;
                     }
                 });",2018-08-09T11:15:44Z,302
"@@ -132,7 +132,7 @@ public ServerPresenter(
         this.statementContext = new FilteringStatementContext(statementContext,
                 new Filter() {
                     @Override
-                    public String filter(String placeholder) {
+                    public String filter(String placeholder, AddressTemplate template) {
                         if (SELECTION_KEY.equals(placeholder)) {
                             return serverName;
                         } else if (HOST.equals(placeholder)) {
@@ -142,7 +142,7 @@ public String filter(String placeholder) {
                     }
 
                     @Override
-                    public String[] filterTuple(String placeholder) {
+                    public String[] filterTuple(String placeholder, AddressTemplate template) {
                         return null;
                     }
                 });",2018-08-09T11:15:44Z,47
"@@ -40,6 +40,7 @@
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.NamedNode;
 import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.FilteringStatementContext;
 import org.jboss.hal.meta.FilteringStatementContext.Filter;
 import org.jboss.hal.meta.Metadata;
@@ -91,7 +92,7 @@ public WebservicePresenter(EventBus eventBus,
         this.metadataRegistry = metadataRegistry;
         this.statementContext = new FilteringStatementContext(statementContext, new Filter() {
             @Override
-            public String filter(String resource) {
+            public String filter(String resource, AddressTemplate template) {
                 switch (resource) {
                     case CONFIG_TYPE:
                         return configType.resource;
@@ -108,7 +109,7 @@ public String filter(String resource) {
             }
 
             @Override
-            public String[] filterTuple(String placeholder) {
+            public String[] filterTuple(String placeholder, AddressTemplate template) {
                 return null;
             }
         });",2018-08-09T11:15:44Z,303
"@@ -30,6 +30,7 @@
 import org.jboss.hal.core.runtime.host.HostSelectionEvent.HostSelectionHandler;
 import org.jboss.hal.core.runtime.server.ServerSelectionEvent;
 import org.jboss.hal.core.runtime.server.ServerSelectionEvent.ServerSelectionHandler;
+import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.StatementContext;
 import org.jetbrains.annotations.NonNls;
 import org.slf4j.Logger;
@@ -63,13 +64,13 @@ public CoreStatementContext(Environment environment, EventBus eventBus) {
         eventBus.addHandler(ServerSelectionEvent.getType(), this);
     }
 
-    public String resolve(String resource) {
+    public String resolve(String resource, AddressTemplate template) {
         // not supported
         return null;
     }
 
     @Override
-    public String[] resolveTuple(String placeholder) {
+    public String[] resolveTuple(String placeholder, AddressTemplate template) {
         if (!environment.isStandalone()) {
             Tuple validTuple = Tuple.from(placeholder);
             if (validTuple != null) {",2018-08-09T11:15:44Z,12
"@@ -317,8 +317,7 @@ public AddressTemplate append(AddressTemplate template) {
      */
     @JsIgnore
     public AddressTemplate subTemplate(int fromIndex, int toIndex) {
-        LinkedList<Token> subTokens = new LinkedList<>();
-        subTokens.addAll(this.tokens.subList(fromIndex, toIndex));
+        LinkedList<Token> subTokens = new LinkedList<>(this.tokens.subList(fromIndex, toIndex));
         return AddressTemplate.of(join(this.optional, subTokens));
     }
 
@@ -453,9 +452,9 @@ public ResourceAddress resolve(StatementContext context, @EsParam(""...string"") S
                 if (tokenRef.startsWith(""{"")) {
                     tokenRef = tokenRef.substring(1, tokenRef.length() - 1);
                     if (!tupleMemory.contains(tokenRef)) {
-                        if (context.resolveTuple(tokenRef) != null) {
+                        if (context.resolveTuple(tokenRef, this) != null) {
                             tupleMemory.memorize(tokenRef,
-                                    Lists.<String[]>newArrayList(context.resolveTuple(tokenRef)));
+                                    Lists.<String[]>newArrayList(context.resolveTuple(tokenRef, this)));
                         }
                     }
                     resolvedValue = tupleMemory.next(tokenRef);
@@ -501,8 +500,8 @@ private String resolveSome(StatementContext context, Memory<String> memory, Stri
         if (input.startsWith(""{"")) {
             input = input.substring(1, input.length() - 1);
             if (!memory.contains(input)) {
-                if (context.resolve(input) != null) {
-                    memory.memorize(input, Lists.newArrayList(context.resolve(input)));
+                if (context.resolve(input, this) != null) {
+                    memory.memorize(input, Lists.newArrayList(context.resolve(input, this)));
                 }
             }
             resolved = memory.next(input);",2018-08-09T11:15:44Z,43
"@@ -27,15 +27,15 @@ public FilteringStatementContext(StatementContext delegate, Filter filter) {
     }
 
     @Override
-    public String resolve(String placeholder) {
-        String filtered = filter.filter(placeholder);
-        return filtered != null ? filtered : delegate.resolve(placeholder);
+    public String resolve(String placeholder, AddressTemplate template) {
+        String filtered = filter.filter(placeholder, template);
+        return filtered != null ? filtered : delegate.resolve(placeholder, template);
     }
 
     @Override
-    public String[] resolveTuple(String placeholder) {
-        String[] filtered = filter.filterTuple(placeholder);
-        return filtered != null ? filtered : delegate.resolveTuple(placeholder);
+    public String[] resolveTuple(String placeholder, AddressTemplate template) {
+        String[] filtered = filter.filterTuple(placeholder, template);
+        return filtered != null ? filtered : delegate.resolveTuple(placeholder, template);
     }
 
     @Override
@@ -75,8 +75,8 @@ public String selectedServer() {
      */
     public interface Filter {
 
-        String filter(String resource);
+        String filter(String placeholder, AddressTemplate template);
 
-        String[] filterTuple(String placeholder);
+        String[] filterTuple(String placeholder, AddressTemplate template);
     }
 }",2018-08-09T11:15:44Z,10
"@@ -23,18 +23,18 @@ public class SelectionAwareStatementContext extends FilteringStatementContext im
     public static final String SELECTION_KEY = ""selection"";
     public static final String SELECTION_EXPRESSION = ""{"" + SELECTION_KEY + ""}"";
 
-    public SelectionAwareStatementContext(final StatementContext delegate, final Supplier<String> selection) {
+    public SelectionAwareStatementContext(StatementContext delegate, Supplier<String> selection) {
         super(delegate, new Filter() {
             @Override
-            public String filter(final String placeholder) {
+            public String filter(String placeholder, AddressTemplate template) {
                 if (SELECTION_KEY.equals(placeholder)) {
                     return selection.get();
                 }
                 return null;
             }
 
             @Override
-            public String[] filterTuple(final String placeholder) {
+            public String[] filterTuple(String placeholder, AddressTemplate template) {
                 return null;
             }
         });",2018-08-09T11:15:44Z,304
"@@ -48,7 +48,7 @@ enum Tuple {
         private final String name;
         private final String resource;
 
-        Tuple(final String name, final String resource) {
+        Tuple(String name, String resource) {
             this.name = name;
             this.resource = resource;
         }
@@ -76,12 +76,12 @@ public static Tuple from(String name) {
     StatementContext NOOP = new StatementContext() {
 
         @Override
-        public String resolve(String placeholder) {
+        public String resolve(String placeholder, AddressTemplate template) {
             return placeholder;
         }
 
         @Override
-        public String[] resolveTuple(String placeholder) {
+        public String[] resolveTuple(String placeholder, AddressTemplate template) {
             return new String[]{placeholder, placeholder};
         }
 
@@ -117,51 +117,35 @@ public String selectedServer() {
     };
 
 
-    /**
-     * Resolves a single value.
-     */
+    /** Resolves a single value. */
     @JsIgnore
-    String resolve(String placeholder);
+    String resolve(String placeholder, AddressTemplate template);
 
-    /**
-     * Resolves a tuple.
-     */
+    /** Resolves a tuple. */
     @JsIgnore
-    String[] resolveTuple(String placeholder);
+    String[] resolveTuple(String placeholder, AddressTemplate template);
 
-    /**
-     * @return the domain controller
-     */
+    /** @return the domain controller */
     @JsProperty(name = ""domainController"")
     String domainController();
 
-    /**
-     * @return the selected profile
-     */
+    /** @return the selected profile */
     @JsProperty(name = ""selectedProfile"")
     String selectedProfile();
 
-    /**
-     * @return the selected server group
-     */
+    /** @return the selected server group */
     @JsProperty(name = ""selectedServerGroup"")
     String selectedServerGroup();
 
-    /**
-     * @return the selected host
-     */
+    /** @return the selected host */
     @JsProperty(name = ""selectedHost"")
     String selectedHost();
 
-    /**
-     * @return the selected server config
-     */
+    /** @return the selected server config */
     @JsProperty(name = ""selectedServerConfig"")
     String selectedServerConfig();
 
-    /**
-     * @return the selected server
-     */
+    /** @return the selected server */
     @JsProperty(name = ""selectedServer"")
     String selectedServer();
 }",2018-08-09T11:15:44Z,78
"@@ -19,6 +19,9 @@
 import java.util.function.Function;
 
 import org.jboss.hal.dmr.ResourceAddress;
+import org.jetbrains.annotations.NonNls;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import static java.util.stream.Collectors.toList;
 
@@ -29,7 +32,7 @@
  * <p>
  * The following parts of a resource address are modified by this function:
  * <ul>
- * <li>{@code host}</li>
+ * <li>{@code host} (only if segments &gt; 1)</li>
  * <li>{@code server-group}</li>
  * <li>{@code server} (if it's the 2nd segment of the address)</li>
  * <li>{@code server-config} (if it's the 2nd segment of the address)</li>
@@ -45,6 +48,8 @@
  */
 public class ResourceDescriptionAddressProcessor implements Function<ResourceAddress, ResourceAddress> {
 
+    @NonNls private static final Logger logger = LoggerFactory.getLogger(ResourceDescriptionAddressProcessor.class);
+
     @Override
     public ResourceAddress apply(ResourceAddress address) {
         ResourceAddress modified = new ResourceAddress();
@@ -56,6 +61,7 @@ public ResourceAddress apply(ResourceAddress address) {
             SegmentProcessor.process(segments, segment -> modified.add(segment[0], segment[1]));
         }
 
+        logger.debug(""{} -> {}"", address, modified);
         return modified;
     }
 }",2018-08-09T11:15:44Z,24
"@@ -16,6 +16,7 @@
 package org.jboss.hal.meta.description;
 
 import org.jboss.hal.config.Environment;
+import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.FilteringStatementContext;
 import org.jboss.hal.meta.StatementContext;
 
@@ -26,22 +27,25 @@ public class ResourceDescriptionStatementContext extends FilteringStatementConte
     public ResourceDescriptionStatementContext(StatementContext delegate, Environment environment) {
         super(delegate, new Filter() {
             @Override
-            public String filter(String placeholder) {
+            public String filter(String placeholder, AddressTemplate template) {
                 if (SELECTION_KEY.equals(placeholder)) {
                     return ""*"";
                 }
-                return delegate.resolve(placeholder);
+                return delegate.resolve(placeholder, template);
             }
 
             @Override
-            public String[] filterTuple(String placeholder) {
+            public String[] filterTuple(String placeholder, AddressTemplate template) {
                 if (!environment.isStandalone()) {
                     Tuple t = Tuple.from(placeholder);
                     if (t != null) {
+                        if (t == Tuple.SELECTED_HOST && template.size() == 1) {
+                            return delegate.resolveTuple(placeholder, template);
+                        }
                         return new String[]{t.resource(), ""*""};
                     }
                 }
-                return delegate.resolveTuple(placeholder);
+                return delegate.resolveTuple(placeholder, template);
             }
         });
     }",2018-08-09T11:15:44Z,24
"@@ -20,6 +20,9 @@
 
 import com.google.common.base.Splitter;
 import org.jboss.hal.meta.AddressTemplate;
+import org.jetbrains.annotations.NonNls;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.StreamSupport.stream;
@@ -46,8 +49,12 @@
  */
 class ResourceDescriptionTemplateProcessor implements Function<AddressTemplate, AddressTemplate> {
 
+    @NonNls private static final Logger logger = LoggerFactory.getLogger(ResourceDescriptionTemplateProcessor.class);
+
     @Override
     public AddressTemplate apply(AddressTemplate template) {
+        AddressTemplate modified = AddressTemplate.ROOT;
+
         if (template != null && !AddressTemplate.ROOT.equals(template)) {
             List<String[]> segments = stream(template.spliterator(), false)
                     .map(segment -> {
@@ -70,8 +77,10 @@ public AddressTemplate apply(AddressTemplate template) {
                     builder.append(""="").append(segment[1]);
                 }
             });
-            return AddressTemplate.of(builder.toString());
+            modified = AddressTemplate.of(builder.toString());
         }
-        return AddressTemplate.ROOT;
+
+        logger.debug(""{} -> {}"", template, modified);
+        return modified;
     }
 }",2018-08-09T11:15:44Z,24
"@@ -25,12 +25,18 @@ final class SegmentProcessor {
     static void process(List<String[]> segments, Consumer<String[]> consumer) {
         if (segments != null) {
             int index = 0;
+            int length = segments.size();
             for (String[] segment : segments) {
                 String key = segment[0];
                 String value = segment[1];
                 if (key != null && value != null) {
                     switch (key) {
                         case HOST:
+                            if (length > 1 && index == 0) {
+                                value = ""*"";
+                            }
+                            break;
+
                         case PROFILE:
                         case SERVER_GROUP:
                             if (index == 0) {",2018-08-09T11:15:44Z,305
"@@ -58,7 +58,7 @@ public RrdResult parse(CompositeResult compositeResult) throws ParserException {
                     if (result.isDefined()) {
                         ResourceAddress operationAddress = operationAddress(index);
                         ResourceAddress resultAddress = new ResourceAddress(modelNode.get(ADDRESS));
-                        ResourceAddress resolvedAddress = adjustAddress(operationAddress, resultAddress);
+                        ResourceAddress resolvedAddress = makeFqAddress(operationAddress, resultAddress);
 
                         new SingleRrdParser(rrdResult).parse(resolvedAddress, result);
                     }
@@ -85,7 +85,7 @@ private ResourceAddress operationAddress(int index) {
     }
 
     @SuppressWarnings(""DuplicateStringLiteralInspection"")
-    private ResourceAddress adjustAddress(ResourceAddress operationAddress, ResourceAddress resultAddress) {
+    private ResourceAddress makeFqAddress(ResourceAddress operationAddress, ResourceAddress resultAddress) {
         ResourceAddress resolved = resultAddress;
         List<Property> operationSegments = operationAddress.asPropertyList();
         List<Property> resultSegments = resultAddress.asPropertyList();",2018-08-09T11:15:44Z,306
"@@ -16,6 +16,7 @@
 package org.jboss.hal.meta.security;
 
 import org.jboss.hal.config.Environment;
+import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.FilteringStatementContext;
 import org.jboss.hal.meta.StatementContext;
 
@@ -26,15 +27,15 @@ public class SecurityContextStatementContext extends FilteringStatementContext {
     public SecurityContextStatementContext(StatementContext delegate, Environment environment) {
         super(delegate, new Filter() {
             @Override
-            public String filter(String placeholder) {
+            public String filter(String placeholder, AddressTemplate template) {
                 if (SELECTION_KEY.equals(placeholder)) {
                     return ""*"";
                 }
-                return delegate.resolve(placeholder);
+                return delegate.resolve(placeholder, template);
             }
 
             @Override
-            public String[] filterTuple(String placeholder) {
+            public String[] filterTuple(String placeholder, AddressTemplate template) {
                 if (!environment.isStandalone()) {
                     Tuple t = Tuple.from(placeholder);
                     if (t != null) {
@@ -43,7 +44,7 @@ public String[] filterTuple(String placeholder) {
                             case SELECTED_HOST:
                             case SELECTED_GROUP:
                             case SELECTED_SERVER:
-                                return delegate.resolveTuple(placeholder);
+                                return delegate.resolveTuple(placeholder, template);
 
                             case SELECTED_PROFILE:
                             case SELECTED_SERVER_CONFIG:
@@ -53,7 +54,7 @@ public String[] filterTuple(String placeholder) {
                         }
                     }
                 }
-                return delegate.resolveTuple(placeholder);
+                return delegate.resolveTuple(placeholder, template);
             }
         });
     }",2018-08-09T11:15:44Z,42
"@@ -0,0 +1,34 @@
+/*
+ * Copyright 2015-2018 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.modcluster;
+
+import org.jboss.hal.meta.AddressTemplate;
+
+public interface AddressTemplates {
+
+    String MODCLUSTER_ADDRESS = ""/{selected.profile}/subsystem=modcluster"";
+    String PROXY_ADDRESS = ""/{selected.profile}/subsystem=modcluster/proxy=*"";
+    String DYNAMIC_LOAD_PROVIDER_ADDRESS = ""/{selected.profile}/subsystem=modcluster/proxy=*/dynamic-load-provider=configuration"";
+    String CUSTOM_LOAD_METRIC_ADDRESS = ""/{selected.profile}/subsystem=modcluster/proxy=*/dynamic-load-provider=configuration/custom-load-metric=*"";
+    String LOAD_METRIC_ADDRESS = ""/{selected.profile}/subsystem=modcluster/proxy=*/dynamic-load-provider=configuration/load-metric=*"";
+
+    AddressTemplate MODCLUSTER_TEMPLATE = AddressTemplate.of(MODCLUSTER_ADDRESS);
+    AddressTemplate PROXY_TEMPLATE = AddressTemplate.of(PROXY_ADDRESS);
+    AddressTemplate DYNAMIC_LOAD_PROVIDER_TEMPLATE = AddressTemplate.of(DYNAMIC_LOAD_PROVIDER_ADDRESS);
+    AddressTemplate CUSTOM_LOAD_METRIC_TEMPLATE = AddressTemplate.of(CUSTOM_LOAD_METRIC_ADDRESS);
+    AddressTemplate LOAD_METRIC_TEMPLATE = AddressTemplate.of(LOAD_METRIC_ADDRESS);
+
+}",2018-08-01T20:53:55Z,307
"@@ -15,12 +15,19 @@
  */
 package org.jboss.hal.client.configuration.subsystem.modcluster;
 
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+
 import javax.inject.Inject;
 
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.client.annotations.NameToken;
 import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
 import com.gwtplatform.mvp.client.proxy.ProxyPlace;
+import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.table.Table;
 import org.jboss.hal.core.CrudOperations;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderPath;
@@ -30,33 +37,50 @@
 import org.jboss.hal.core.mvp.SupportsExpertMode;
 import org.jboss.hal.dmr.ModelDescriptionConstants;
 import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.Operation;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.token.NameTokens;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
 import org.jboss.hal.spi.Requires;
 
+import static org.jboss.hal.client.configuration.subsystem.modcluster.AddressTemplates.*;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.NAME;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.READ_RESOURCE_OPERATION;
+import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafeGet;
+import static org.jboss.hal.resources.Ids.ADD;
+import static org.jboss.hal.resources.Ids.CUSTOM_LOAD_METRIC;
+import static org.jboss.hal.resources.Ids.FORM;
+import static org.jboss.hal.resources.Ids.LOAD_METRIC;
+
 public class ModclusterPresenter
         extends MbuiPresenter<ModclusterPresenter.MyView, ModclusterPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    static final String ROOT_ADDRESS = ""/{selected.profile}/subsystem=modcluster/mod-cluster-config=configuration"";
-    private static final AddressTemplate ROOT_TEMPLATE = AddressTemplate.of(ROOT_ADDRESS);
-
     private final CrudOperations crud;
+    private MetadataRegistry metadataRegistry;
     private final FinderPathFactory finderPathFactory;
     private final StatementContext statementContext;
+    private String proxyName;
 
     @Inject
     public ModclusterPresenter(EventBus eventBus,
             MyView view,
             MyProxy myProxy,
             Finder finder,
             CrudOperations crud,
+            MetadataRegistry metadataRegistry,
             FinderPathFactory finderPathFactory,
             StatementContext statementContext) {
         super(eventBus, view, myProxy, finder);
         this.crud = crud;
+        this.metadataRegistry = metadataRegistry;
         this.finderPathFactory = finderPathFactory;
         this.statementContext = statementContext;
     }
@@ -67,31 +91,133 @@ protected void onBind() {
         getView().setPresenter(this);
     }
 
+    @Override
+    public void prepareFromRequest(PlaceRequest request) {
+        super.prepareFromRequest(request);
+        proxyName = request.getParameter(NAME, null);
+    }
+
     @Override
     public ResourceAddress resourceAddress() {
-        return ROOT_TEMPLATE.resolve(statementContext);
+        return PROXY_TEMPLATE.resolve(statementContext, proxyName);
     }
 
     @Override
     public FinderPath finderPath() {
-        return finderPathFactory.configurationSubsystemPath(ModelDescriptionConstants.MODCLUSTER);
+        return finderPathFactory.configurationSubsystemPath(ModelDescriptionConstants.MODCLUSTER)
+                .append(Ids.MODCLUSTER_PROXY, Ids.modclusterProxy(proxyName), Names.PROXY, proxyName);
     }
 
     @Override
     protected void reload() {
-        crud.read(ROOT_TEMPLATE, 2, result -> getView().updateConfiguration(result));
+        crud.read(PROXY_TEMPLATE.replaceWildcards(proxyName), 2, result -> {
+            getView().updateConfiguration(result);
+            ModelNode dynLoadProvModel = failSafeGet(result, ""dynamic-load-provider/configuration"");
+            if (dynLoadProvModel.isDefined()) {
+                getView().updateDynamicLoadProvider(dynLoadProvModel);
+
+                // update custom load metric
+                ModelNode customLoadMetricModel = failSafeGet(result, ""dynamic-load-provider/configuration/custom-load-metric"");
+                List<NamedNode> customLoadMetricNamedNodes = Collections.emptyList();
+                if (customLoadMetricModel.isDefined()) {
+                    customLoadMetricNamedNodes = asNamedNodes(customLoadMetricModel.asPropertyList());
+                }
+                getView().updateCustomLoadMetrics(customLoadMetricNamedNodes);
+
+                // update load metric
+                ModelNode loadMetricModel = failSafeGet(result, ""dynamic-load-provider/configuration/load-metric"");
+                List<NamedNode> loadMetricNamedNodes = Collections.emptyList();
+                if (loadMetricModel.isDefined()) {
+                    loadMetricNamedNodes = asNamedNodes(loadMetricModel.asPropertyList());
+                }
+                getView().updateLoadMetrics(loadMetricNamedNodes);
+            } else {
+                getView().updateDynamicLoadProvider(dynLoadProvModel);
+                getView().updateCustomLoadMetrics(Collections.emptyList());
+                getView().updateLoadMetrics(Collections.emptyList());
+            }
+        });
+    }
+
+    public String getProxyName() {
+        return proxyName;
+    }
+
+    public Operation dynamicLoadProviderOperation() {
+        AddressTemplate template = DYNAMIC_LOAD_PROVIDER_TEMPLATE.replaceWildcards(proxyName);
+        return new Operation.Builder(template.resolve(statementContext), READ_RESOURCE_OPERATION).build();
+    }
+
+    public void addDynamicLoadProvider() {
+        String id = Ids.build(""dynamic-load-provider"", FORM, ADD);
+        AddressTemplate template = DYNAMIC_LOAD_PROVIDER_TEMPLATE.replaceWildcards(proxyName);
+        crud.addSingleton(id, Names.DYNAMIC_LOAD_PROVIDER, template, address -> reload());
+    }
+
+    public void removeDynamicLoadProvider() {
+        AddressTemplate template = DYNAMIC_LOAD_PROVIDER_TEMPLATE.replaceWildcards(proxyName);
+        crud.removeSingleton(Names.DYNAMIC_LOAD_PROVIDER, template, this::reload);
     }
 
+    // =================== custom load metric
+    public void addCustomLoadMetric() {
+        String id = Ids.build(CUSTOM_LOAD_METRIC, FORM, ADD);
+        AddressTemplate template = CUSTOM_LOAD_METRIC_TEMPLATE.replaceWildcards(proxyName);
+        crud.add(id, Names.CUSTOM_LOAD_METRIC, template, (name, address) -> reload());
+    }
+
+    public void removeCustomLoadMetric(Table<NamedNode> table) {
+        AddressTemplate template = CUSTOM_LOAD_METRIC_TEMPLATE.replaceWildcards(proxyName);
+        crud.remove(Names.CUSTOM_LOAD_METRIC, table.selectedRow().getName(), template, this::reload);
+    }
+
+    public void saveCustomLoadMetric(Form<NamedNode> form, Map<String, Object> changedValues) {
+        AddressTemplate template = CUSTOM_LOAD_METRIC_TEMPLATE.replaceWildcards(proxyName);
+        crud.save(Names.CUSTOM_LOAD_METRIC, form.getModel().getName(), template, changedValues, this::reload);
+    }
+
+    public void prepareResetCustomLoadMetric(Form<NamedNode> form) {
+        AddressTemplate template = CUSTOM_LOAD_METRIC_TEMPLATE.replaceWildcards(proxyName);
+        Metadata metadata = metadataRegistry.lookup(CUSTOM_LOAD_METRIC_TEMPLATE);
+        crud.reset(Names.CUSTOM_LOAD_METRIC, form.getModel().getName(), template, form, metadata, this::reload);
+    }
+
+
+    // =================== load metric
+    public void addLoadMetric() {
+        String id = Ids.build(LOAD_METRIC, FORM, ADD);
+        AddressTemplate template = LOAD_METRIC_TEMPLATE.replaceWildcards(proxyName);
+        crud.add(id, Names.LOAD_METRIC, template, (name, address) -> reload());
+    }
+
+    public void removeLoadMetric(Table<NamedNode> table) {
+        AddressTemplate template = LOAD_METRIC_TEMPLATE.replaceWildcards(proxyName);
+        crud.remove(Names.LOAD_METRIC, table.selectedRow().getName(), template, this::reload);
+    }
+
+    public void saveLoadMetric(Form<NamedNode> form, Map<String, Object> changedValues) {
+        AddressTemplate template = LOAD_METRIC_TEMPLATE.replaceWildcards(proxyName);
+        crud.save(Names.LOAD_METRIC, form.getModel().getName(), template, changedValues, this::reload);
+    }
+
+    public void prepareResetLoadMetric(Form<NamedNode> form) {
+        AddressTemplate template = LOAD_METRIC_TEMPLATE.replaceWildcards(proxyName);
+        Metadata metadata = metadataRegistry.lookup(LOAD_METRIC_TEMPLATE);
+        crud.reset(Names.LOAD_METRIC, form.getModel().getName(), template, form, metadata, this::reload);
+    }
 
     // @formatter:off
     @ProxyCodeSplit
-    @Requires(ROOT_ADDRESS)
+    @Requires(PROXY_ADDRESS)
     @NameToken(NameTokens.MODCLUSTER)
     public interface MyProxy extends ProxyPlace<ModclusterPresenter> {
     }
 
     public interface MyView extends MbuiView<ModclusterPresenter> {
         void updateConfiguration(ModelNode payload);
+        void updateDynamicLoadProvider(ModelNode payload);
+        void updateCustomLoadMetrics(List<NamedNode> nodes);
+        void updateLoadMetrics(List<NamedNode> nodes);
     }
     // @formatter:on
 }",2018-08-01T20:53:55Z,308
"@@ -15,15 +15,35 @@
  */
 package org.jboss.hal.client.configuration.subsystem.modcluster;
 
+import java.util.List;
+
+import javax.annotation.PostConstruct;
+
+import elemental2.dom.Element;
+import elemental2.dom.HTMLElement;
+import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.hal.ballroom.Alert;
 import org.jboss.hal.ballroom.VerticalNavigation;
 import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.table.Table;
 import org.jboss.hal.core.mbui.MbuiContext;
 import org.jboss.hal.core.mbui.MbuiViewImpl;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
 import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.resources.Icons;
+import org.jboss.hal.resources.Names;
 import org.jboss.hal.spi.MbuiElement;
 import org.jboss.hal.spi.MbuiView;
 
-import static org.jboss.hal.dmr.ModelNodeHelper.failSafeGet;
+import static org.jboss.gwt.elemento.core.Elements.div;
+import static org.jboss.gwt.elemento.core.Elements.h;
+import static org.jboss.gwt.elemento.core.Elements.p;
+import static org.jboss.gwt.elemento.core.Elements.section;
+import static org.jboss.hal.client.configuration.subsystem.modcluster.AddressTemplates.DYNAMIC_LOAD_PROVIDER_TEMPLATE;
+import static org.jboss.hal.resources.Names.DYNAMIC_LOAD_PROVIDER;
 
 @MbuiView
 @SuppressWarnings(""DuplicateStringLiteralInspection"")
@@ -33,17 +53,91 @@ public static ModclusterView create(final MbuiContext mbuiContext) {
         return new Mbui_ModclusterView(mbuiContext);
     }
 
-    @MbuiElement(""modcluster-vertical-navigation"") VerticalNavigation navigation;
-    @MbuiElement(""modcluster-configuration"") Form<ModelNode> configurationForm;
-    @MbuiElement(""modcluster-ssl-form"") Form<ModelNode> sslForm;
+    @MbuiElement(""proxy-vertical-navigation"") VerticalNavigation navigation;
+    @MbuiElement(""proxy-conf-form"") Form<ModelNode> configurationForm;
+    @MbuiElement(""load-metrics-table"") Table<NamedNode> loadMetricTable;
+    @MbuiElement(""load-metrics-form"") Form<NamedNode> loadMetricForm;
+    @MbuiElement(""custom-load-metrics-table"") Table<NamedNode> customLoadMetricTable;
+    @MbuiElement(""custom-load-metrics-form"") Form<NamedNode> customLoadMetricForm;
+    private Form<ModelNode> dynamicLoadProviderForm;
+    private Alert alertDynamicLoadProvider = new Alert(Icons.WARNING,
+            mbuiContext.resources().messages().dynamicLoadProviderWarning());
+    private Alert alertDynamicLoadProvider2 = new Alert(Icons.WARNING,
+            mbuiContext.resources().messages().dynamicLoadProviderWarning());
 
     ModclusterView(final MbuiContext mbuiContext) {
         super(mbuiContext);
     }
 
+    @PostConstruct
+    void init() {
+        Metadata metadata = mbuiContext.metadataRegistry().lookup(DYNAMIC_LOAD_PROVIDER_TEMPLATE);
+        dynamicLoadProviderForm = new ModelNodeForm.Builder<>(""dynamic-load-provider-form"", metadata)
+                .singleton(
+                        () -> presenter.dynamicLoadProviderOperation(),
+                        () -> presenter.addDynamicLoadProvider())
+                .prepareRemove(form -> presenter.removeDynamicLoadProvider())
+                .onSave((form, changedValues) -> {
+                    String name = presenter.getProxyName();
+                    AddressTemplate template = DYNAMIC_LOAD_PROVIDER_TEMPLATE.replaceWildcards(
+                            presenter.getProxyName());
+                    saveForm(Names.DYNAMIC_LOAD_PROVIDER, name, template.resolve(mbuiContext.statementContext(), name),
+                            changedValues, metadata);
+                })
+                .prepareReset(form -> {
+                    String name = presenter.getProxyName();
+                    AddressTemplate template = DYNAMIC_LOAD_PROVIDER_TEMPLATE.replaceWildcards(
+                            presenter.getProxyName());
+                    resetForm(Names.DYNAMIC_LOAD_PROVIDER, name, template.resolve(mbuiContext.statementContext(), name),
+                            form, metadata);
+                })
+                .build();
+        HTMLElement dynamicLoadProviderElement = section()
+                .add(div()
+                        .add(h(1).textContent(Names.DYNAMIC_LOAD_PROVIDER))
+                        .add(p().textContent(metadata.getDescription().getDescription()))
+                        .asElement())
+                .add(dynamicLoadProviderForm)
+                .asElement();
+        navigation.insertPrimary(""dynamic-load-provider-item"", ""custom-load-metrics-item"", DYNAMIC_LOAD_PROVIDER,
+                ""fa fa-shield"", dynamicLoadProviderElement);
+        registerAttachable(dynamicLoadProviderForm);
+    }
+
+    @Override
+    public void attach() {
+        super.attach();
+        Element customLoadMetricElement = asElement().querySelector(""section[data-vn-item-for=custom-load-metrics-item] > div"");
+        Element loadMetricElement = asElement().querySelector(""section[data-vn-item-for=load-metrics-item] > div"");
+        loadMetricElement.appendChild(alertDynamicLoadProvider.asElement());
+        customLoadMetricElement.appendChild(alertDynamicLoadProvider2.asElement());
+    }
+
     @Override
     public void updateConfiguration(final ModelNode payload) {
         configurationForm.view(payload);
-        sslForm.view(failSafeGet(payload, ""ssl/configuration"")); //NON-NLS
+    }
+
+    @Override
+    public void updateDynamicLoadProvider(ModelNode payload) {
+        dynamicLoadProviderForm.view(payload);
+        // the dynamic-load-provider=configuration resource is a parent resource of the load-metrics tables
+        // disable the ""add"" buttons if there is no dynamic-load-provider=configuration
+        customLoadMetricTable.enableButton(0, payload.isDefined());
+        loadMetricTable.enableButton(0, payload.isDefined());
+        Elements.setVisible(alertDynamicLoadProvider.asElement(), !payload.isDefined());
+        Elements.setVisible(alertDynamicLoadProvider2.asElement(), !payload.isDefined());
+    }
+
+    @Override
+    public void updateCustomLoadMetrics(List<NamedNode> nodes) {
+        customLoadMetricForm.clear();
+        customLoadMetricTable.update(nodes);
+    }
+
+    @Override
+    public void updateLoadMetrics(List<NamedNode> nodes) {
+        loadMetricForm.clear();
+        loadMetricTable.update(nodes);
     }
 }",2018-08-01T20:53:55Z,309
"@@ -0,0 +1,154 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.modcluster;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.inject.Inject;
+
+import com.google.web.bindery.event.shared.EventBus;
+import elemental2.dom.HTMLElement;
+import org.jboss.hal.core.finder.ColumnActionFactory;
+import org.jboss.hal.core.finder.Finder;
+import org.jboss.hal.core.finder.FinderColumn;
+import org.jboss.hal.core.finder.ItemAction;
+import org.jboss.hal.core.finder.ItemActionFactory;
+import org.jboss.hal.core.finder.ItemDisplay;
+import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
+import org.jboss.hal.core.mvp.Places;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.MetadataRegistry;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.meta.token.NameTokens;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.AsyncColumn;
+import org.jboss.hal.spi.Message;
+import org.jboss.hal.spi.MessageEvent;
+import org.jboss.hal.spi.Requires;
+
+import static java.util.stream.Collectors.toList;
+import static org.jboss.hal.client.configuration.subsystem.modcluster.AddressTemplates.MODCLUSTER_TEMPLATE;
+import static org.jboss.hal.client.configuration.subsystem.modcluster.AddressTemplates.PROXY_ADDRESS;
+import static org.jboss.hal.client.configuration.subsystem.modcluster.AddressTemplates.PROXY_TEMPLATE;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.resources.Ids.FORM;
+import static org.jboss.hal.resources.Ids.build;
+
+@AsyncColumn(Ids.MODCLUSTER_PROXY)
+@Requires(PROXY_ADDRESS)
+public class ProxyColumn extends FinderColumn<NamedNode> {
+
+    @Inject
+    protected ProxyColumn(Finder finder,
+            ColumnActionFactory columnActionFactory,
+            ItemActionFactory itemActionFactory,
+            EventBus eventBus,
+            Dispatcher dispatcher,
+            StatementContext statementContext,
+            MetadataRegistry metadataRegistry,
+            Places places,
+            Resources resources) {
+
+        super(new Builder<NamedNode>(finder, Ids.MODCLUSTER_PROXY, Names.PROXY)
+                .withFilter()
+                .filterDescription(resources.messages().proxyColumnFilterDescription())
+                .useFirstActionAsBreadcrumbHandler());
+
+        setItemsProvider((context, callback) -> {
+            ResourceAddress address = MODCLUSTER_TEMPLATE.resolve(statementContext);
+            Operation op = new Operation.Builder(address, READ_RESOURCE_OPERATION)
+                    .param(RECURSIVE, true).build();
+
+            dispatcher.execute(op, result -> {
+                List<NamedNode> proxies = result.get(PROXY).asPropertyList().stream()
+                        .map(NamedNode::new)
+                        .collect(toList());
+                callback.onSuccess(proxies);
+            });
+        });
+
+        addColumnAction(columnActionFactory.add(Ids.MODCLUSTER_PROXY_ADD, Names.PROXY, PROXY_TEMPLATE,
+                column -> {
+                    String id = build(Ids.MODCLUSTER_PROXY, ADD, FORM);
+                    Metadata metadata = metadataRegistry.lookup(PROXY_TEMPLATE);
+                    AddResourceDialog dialog = new AddResourceDialog(id,
+                            resources.messages().addResourceTitle(Names.PROXY), metadata,
+                            (name, modelNode) -> {
+                                if (modelNode != null) {
+                                    ResourceAddress address = AddressTemplates.PROXY_TEMPLATE
+                                            .resolve(statementContext, name);
+                                    Operation operation = new Operation.Builder(address, ADD)
+                                            .param(PROXY, name)
+                                            .payload(modelNode)
+                                            .build();
+                                    dispatcher.execute(operation, result -> {
+                                        MessageEvent.fire(eventBus,
+                                                Message.success(resources.messages()
+                                                        .addResourceSuccess(Names.PROXY, name)));
+                                        column.refresh(Ids.modclusterProxy(name));
+                                    });
+                                }
+                            });
+                    dialog.show();
+                }));
+        addColumnAction(columnActionFactory.refresh(Ids.MODCLUSTER_PROXY_REFRESH));
+
+        setItemRenderer(proxyNode -> new ItemDisplay<NamedNode>() {
+            @Override
+            public String getId() {
+                return Ids.modclusterProxy(proxyNode.getName());
+            }
+
+            @Override
+            public String getTitle() {
+                return proxyNode.getName();
+            }
+
+            @Override
+            public HTMLElement asElement() {
+                return ItemDisplay
+                        .withSubtitle(proxyNode.getName(), proxyNode.get(CONNECTOR).asString());
+            }
+
+            @Override
+            public String getFilterData() {
+                List<String> data = new ArrayList<>();
+                data.add(proxyNode.getName());
+                data.add(proxyNode.get(CONNECTOR).asString());
+                return String.join("" "", data);
+            }
+
+            @Override
+            public List<ItemAction<NamedNode>> actions() {
+                List<ItemAction<NamedNode>> actions = new ArrayList<>();
+                actions.add(itemActionFactory.view(places.selectedProfile(NameTokens.MODCLUSTER)
+                        .with(NAME, proxyNode.getName()).build()));
+                actions.add(itemActionFactory.remove(Names.PROXY, proxyNode.getName(),
+                        AddressTemplates.PROXY_TEMPLATE, ProxyColumn.this));
+                return actions;
+            }
+        });
+
+        setPreviewCallback(proxy -> new ProxyPreview(proxy));
+    }
+}",2018-08-01T20:53:55Z,310
"@@ -0,0 +1,39 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.modcluster;
+
+import org.jboss.hal.core.finder.PreviewAttributes;
+import org.jboss.hal.core.finder.PreviewContent;
+import org.jboss.hal.dmr.NamedNode;
+
+class ProxyPreview extends PreviewContent<NamedNode> {
+
+    ProxyPreview(final NamedNode proxyNode) {
+        super(proxyNode.getName());
+
+        PreviewAttributes<NamedNode> attributes = new PreviewAttributes<>(proxyNode);
+        attributes.append(""advertise"");
+        attributes.append(""advertise-socket"");
+        attributes.append(""balancer"");
+        attributes.append(""connector"");
+        attributes.append(""node-timeout"");
+        attributes.append(""proxies"");
+        attributes.append(""proxy-list"");
+        attributes.append(""sticky-session"");
+        attributes.append(""worker-timeout"");
+        previewBuilder().addAll(attributes);
+    }
+}",2018-08-01T20:53:55Z,311
"@@ -23,7 +23,7 @@
                 <h1>Configuration Changes</h1>
                 <p>${metadata.getDescription().getDescription()}</p>
                 <singleton-form id=""core-mgmt-conf-change-form"" title=""Configuration Changes""  auto-save=""true""
-                    add-handler=""${presenter.addConfigurationChanges())}"" reset=""true"" />
+                    add-handler=""${presenter.addConfigurationChanges()}"" reset=""true"" />
             </metadata>
         </item>
 ",2018-08-01T20:53:55Z,312
"@@ -16,20 +16,22 @@
   ~ limitations under the License.
   -->
 <view>
-    <vertical-navigation id=""modcluster-vertical-navigation"">
-        <item id=""modcluster-configuration-item"" title=""Configuration"" icon=""pficon pficon-settings"">
-            <metadata address=""/{selected.profile}/subsystem=modcluster/mod-cluster-config=configuration"">
+    <vertical-navigation id=""proxy-vertical-navigation"">
+        <item id=""proxy-item"" title=""Configuration"" icon=""pficon pficon-settings"">
+            <metadata address=""/{selected.profile}/subsystem=modcluster/proxy=*"">
                 <h1>Configuration</h1>
                 <p>${metadata.getDescription().getDescription()}</p>
-                <form id=""modcluster-configuration"" title=""Configuration"" auto-save=""true"" reset=""true"">
+                <form id=""proxy-conf-form"" title=""Configuration"" auto-save=""true"" reset=""true""
+                      name-resolver=""${presenter.getProxyName()}"">
                     <attributes>
                         <group id=""advertising"" title=""Advertising"">
+                            <attribute name=""advertise""/>
+                            <attribute name=""advertise-security-key""/>
+                            <attribute name=""advertise-socket""/>
+                            <attribute name=""balancer""/>
                             <attribute name=""connector""/>
                             <attribute name=""load-balancing-group""/>
-                            <attribute name=""balancer""/>
-                            <attribute name=""advertise-socket""/>
-                            <attribute name=""advertise-security-key""/>
-                            <attribute name=""advertise""/>
+                            <attribute name=""simple-load-provider""/>
                         </group>
                         <group id=""sessions"" title=""Sessions"">
                             <attribute name=""sticky-session""/>
@@ -39,43 +41,70 @@
                         <group id=""web-contexts"" title=""Web Contexts"">
                             <attribute name=""auto-enable-context""/>
                             <attribute name=""excluded-contexts""/>
+                            <attribute name=""session-draining-strategy""/>
                         </group>
                         <group id=""proxies"" title=""Proxies"">
-                            <attribute name=""proxy-url""/>
                             <attribute name=""proxies""/>
+                            <attribute name=""proxy-url""/>
+                            <attribute name=""ssl-context""/>
                         </group>
                         <group id=""networking"" title=""Networking"">
-                            <attribute name=""node-timeout""/>
-                            <attribute name=""socket-timeout""/>
-                            <attribute name=""stop-context-timeout""/>
-                            <attribute name=""max-attempts""/>
                             <attribute name=""flush-packets""/>
                             <attribute name=""flush-wait""/>
+                            <attribute name=""max-attempts""/>
+                            <attribute name=""node-timeout""/>
                             <attribute name=""ping""/>
+                            <attribute name=""smax""/>
+                            <attribute name=""socket-timeout""/>
+                            <attribute name=""status-interval""/>
+                            <attribute name=""stop-context-timeout""/>
                             <attribute name=""ttl""/>
                             <attribute name=""worker-timeout""/>
                         </group>
                     </attributes>
                 </form>
             </metadata>
         </item>
-
-        <item id=""modcluster-ssl-item"" title=""SSL"" icon=""fa fa-lock"">
-            <metadata
-                    address=""/{selected.profile}/subsystem=modcluster/mod-cluster-config=configuration/ssl=configuration"">
-                <h1>SSL</h1>
-                <p>${metadata.getDescription().getDescription()}</p>
-                <singleton-form id=""modcluster-ssl-form"" title=""SSL"" auto-save=""true"" reset=""true"">
-                    <attributes>
-                        <attribute name=""key-alias""/>
-                        <attribute name=""password""/>
-                        <attribute name=""ca-certificate-file""/>
-                        <attribute name=""certificate-key-file""/>
-                        <attribute name=""cipher-suite""/>
-                        <attribute name=""ca-revocation-url""/>
-                        <attribute name=""protocol""/>
-                    </attributes>
-                </singleton-form>
+        <item id=""custom-load-metrics-item"" title=""Custom Load Metrics"" icon=""pficon pficon-service"">
+            <metadata address=""/{selected.profile}/subsystem=modcluster/proxy=*/dynamic-load-provider=configuration/custom-load-metric=*"">
+            <h1>Custom Load Metrics</h1>
+            <p>${metadata.getDescription().getDescription()}</p>
+            <table id=""custom-load-metrics-table"" title=""Custom Load Metrics""
+                   form-ref=""custom-load-metrics-form"">
+                <actions>
+                    <action title=""${mbuiContext.resources().constants().add()}""
+                            handler=""${presenter.addCustomLoadMetric()}"" constraint=""add""/>
+                    <action title=""${mbuiContext.resources().constants().remove()}""
+                            handler=""${presenter.removeCustomLoadMetric(table)}"" scope=""selected"" constraint=""remove""/>
+                </actions>
+                <columns>
+                    <column name=""name"" value=""${row.getName()}""/>
+                </columns>
+            </table>
+            <form id=""custom-load-metrics-form"" title=""Custom Load Metric""
+                  on-save=""${presenter.saveCustomLoadMetric(form, changedValues)}""
+                  prepare-reset=""${presenter.prepareResetCustomLoadMetric(form)}"" />
+            </metadata>
+        </item>
+        <item id=""load-metrics-item"" title=""Load Metrics"" icon=""fa fa-map"">
+            <metadata address=""/{selected.profile}/subsystem=modcluster/proxy=*/dynamic-load-provider=configuration/load-metric=*"">
+            <h1>Load Metrics</h1>
+            <p>${metadata.getDescription().getDescription()}</p>
+            <table id=""load-metrics-table"" title=""Load Metrics""
+                   form-ref=""load-metrics-form"">
+                <actions>
+                    <action title=""${mbuiContext.resources().constants().add()}""
+                            handler=""${presenter.addLoadMetric()}"" constraint=""add""/>
+                    <action title=""${mbuiContext.resources().constants().remove()}""
+                            handler=""${presenter.removeLoadMetric(table)}"" scope=""selected"" constraint=""remove""/>
+                </actions>
+                <columns>
+                    <column name=""name"" value=""${row.getName()}""/>
+                </columns>
+            </table>
+            <form id=""load-metrics-form"" title=""Load Metric""
+                  on-save=""${presenter.saveLoadMetric(form, changedValues)}""
+                  prepare-reset=""${presenter.prepareResetLoadMetric(form)}"" />
             </metadata>
         </item>
     </vertical-navigation>",2018-08-01T20:53:55Z,313
"@@ -139,7 +139,7 @@ public Subsystems(Resources resources) {
                 .preview(resources.previews().configurationMicroprofileConfig())
                 .build());
         addConfiguration(new SubsystemMetadata.Builder(MODCLUSTER, Names.MODCLUSTER)
-                .token(NameTokens.MODCLUSTER)
+                .nextColumn(Ids.MODCLUSTER_PROXY)
                 .preview(resources.previews().configurationModcluster())
                 .build());
         addConfiguration(new SubsystemMetadata.Builder(NAMING, ""Naming"")",2018-08-01T20:53:55Z,37
"@@ -619,6 +619,7 @@ public interface ModelDescriptionConstants {
     String PROVIDER_MODULE = ""provider-module"";
     String PROVIDER_SASL_SERVER_FACTORY = ""provider-sasl-server-factory"";
     String PROXIES = ""proxies"";
+    String PROXY = ""proxy"";
     String PRUNE_EXPIRED = ""prune-expired"";
     String PRUNE_DISCONNECTED = ""prune-disconnected"";
     String QUERY = ""query"";",2018-08-01T20:53:55Z,109
"@@ -108,7 +108,7 @@ public final class ${context.subclass} extends ${context.base} {
                 () -> new Operation.Builder(${form.metadata.name}Template.resolve(mbuiContext.statementContext()), READ_RESOURCE_OPERATION).build(),
                 <#if form.metadata.singleton>
                     <#if form.addHandler??>
-                () -> ${form.addHandler}
+                () -> ${form.addHandler})
                     <#else>
                 () -> addSingleton(""${form.selector}"", ${form.title}, ${form.metadata.name}Template))
                     </#if>",2018-08-01T20:53:55Z,314
"@@ -121,6 +121,7 @@ public interface Ids {
     String CONTENT_TREE_SEARCH = ""content-tree-search"";
     String CONTENT_UNMANAGED_ADD = ""content-unmanaged-add"";
     String COOKIE = ""hal-cookie"";
+    String CUSTOM_LOAD_METRIC = ""custom-load-metric"";
     String DATA_SOURCE_ADD = ""ds-configuration-add"";
     String DATA_SOURCE_ADD_ACTIONS = ""ds-configuration-add-actions"";
     String DATA_SOURCE_CONFIGURATION = ""ds-configuration"";
@@ -439,6 +440,7 @@ public interface Ids {
     String JPA_RUNTIME_QUERY_CACHE_ITEM = ""jpa-runtime-query-cache-item"";
     String JPA_RUNTIME_STATISTICS_DISABLED = ""jpa-runtime-statistics-disabled"";
     String JPA_RUNTIME_TAB_CONTAINER = ""jpa-runtime-tab-container"";
+    String LOAD_METRIC = ""load-metric"";
     String LOCAL_CACHE = ""local-cache"";
     String LOG_FILE = ""lf"";
     String LOG_FILE_EDITOR = ""lf-editor"";
@@ -534,6 +536,9 @@ public interface Ids {
     String MESSAGING_SERVER_RUNTIME = ""msg-server-r"";
     String MESSAGING_SERVER_RUNTIME_REFRESH = ""msg-server-r-refresh"";
     String MESSAGING_SERVER_SETTINGS = ""msg-server-settings"";
+    String MODCLUSTER_PROXY = ""modcluster-proxy"";
+    String MODCLUSTER_PROXY_ADD = ""modcluster-proxy-add"";
+    String MODCLUSTER_PROXY_REFRESH = ""modcluster-proxy-refresh"";
     String MODEL_BROWSER = ""model-browser"";
     String MODEL_BROWSER_CREATE_SINGLETON_FORM = ""model-browser-create-singleton-form"";
     String MODEL_BROWSER_ROOT = ""model-browser-root"";
@@ -852,6 +857,10 @@ static String mailSession(String name) {
         return build(""ms"", name);
     }
 
+    static String modclusterProxy(String name) {
+        return build(""mcp"", name);
+    }
+
     static String messagingServer(String name) {
         return build(""msgs"", name);
     }",2018-08-01T20:53:55Z,111
"@@ -162,6 +162,7 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml duplicateAuthenticationModule();
     String duplicateAuthenticationModuleReason();
     String duplicateResource(String type);
+    SafeHtml dynamicLoadProviderWarning();
 
     String ejbFilterDescription();
     SafeHtml emptyModelNodeForm();
@@ -374,6 +375,7 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     String profileIncludes(String includes);
     SafeHtml profileNotUsedInServerGroups();
     SafeHtml profileUsedInServerGroups(SafeHtml serverGroupLinks);
+    String proxyColumnFilterDescription();
     SafeHtml propertiesHint();
     SafeHtml pruneDisconnectedQuestion();
     SafeHtml pruneExpiredQuestion();",2018-08-01T20:53:55Z,94
"@@ -86,6 +86,7 @@ public interface Names {
     String CUSTOM = ""Custom"";
     String CUSTOM_ACTION_HANDLER = ""Custom ActionHandler"";
     String CUSTOM_FORMATTER = ""Custom Formatter"";
+    String CUSTOM_LOAD_METRIC = ""Custom Load Metric"";
     String CUSTOM_MODIFIABLE_REALM = ""Custom Modifiable Realm"";
     String CUSTOM_POLICY = ""Custom Policy"";
 
@@ -102,6 +103,7 @@ public interface Names {
     String DISTRIBUTED_CACHE = ""Distributed Cache"";
     String DIVERT = ""Divert"";
     String DOMAIN_CONTROLLER = ""Domain Controller"";
+    String DYNAMIC_LOAD_PROVIDER = ""Dynamic Load Provider"";
 
     String EE = ""EE"";
     String EJB3 = ""EJB"";
@@ -192,6 +194,7 @@ public interface Names {
     String LDAP_REALM = ""LDAP Realm"";
     String LISTENER = ""Listener"";
     String LIVE_ONLY = ""Live Only"";
+    String LOAD_METRIC = ""Load Metric"";
     String LOCAL_CACHE = ""Local Cache"";
     String LOCAL_OUTBOUND_CONNECTION = ""Local Outbound Connection"";
     String LOCATION = ""Location"";
@@ -270,6 +273,7 @@ public interface Names {
     String PROFILES = ""Profiles"";
     String PROPERTIES_REALM = ""Properties Realm"";
     String PROTOCOL = ""Protocol"";
+    String PROXY = ""Proxy"";
 
     String QUERY = ""Query"";
     String QUERY_CACHE = ""Query Cache"";",2018-08-01T20:53:55Z,112
"@@ -133,6 +133,7 @@ dropSubscriptionsSuccess=All subscriptions successfully dropped form topic <stro
 duplicateAuthenticationModule=Unable to create authentication module.
 duplicateAuthenticationModuleReason=The security domain already has a JASPI authentication module. To add a classic authentication module, switch to the expert mode and remove the JSAP configuration first.
 duplicateResource=A {0} with this name already exists.
+dynamicLoadProviderWarning=To use the Load Metric feature, it is required to have a Dynamic Load Provider, but it doesn''t exist. Use the menu on the left to navigate to the Dynamic Load Provider and add it.
 ejbFilterDescription=Filter by: name, type, deployment
 emptyModelNodeForm=<strong>No attributes.</strong> This resource doesn&#39;t contain attributes or only complex attributes which are currently not supported.
 enableSSLConfirmationDescription=Confirm the values below. When you choose to continue, all resources will be created and configured.
@@ -328,6 +329,7 @@ pauseQueueSuccess=Queue <strong>{0}</strong> successfully paused.
 profileIncludes=The profile includes the following profiles: {0}.
 profileNotUsedInServerGroups=The profile is not used in any server group.
 profileUsedInServerGroups=The profile is used in the following server groups: {0}.
+proxyColumnFilterDescription=Filter by: Proxy name or connector.
 propertiesHint=Add new properties as <em>key=value</em> pairs. Press <abbr class=""key"" title=""RETURN"">&crarr;</abbr> to add and <abbr class=""key"" title=""BACKSPACE"">&#x232B</abbr> to remove them.
 pruneDisconnectedQuestion=Are you sure you want to prune all disconnected hosts? This will prune information about all disconnected hosts.
 pruneExpiredQuestion=Are you sure you want to prune expired hosts? This will prune information about disconnected hosts whose last activity was more than a week ago.",2018-08-01T20:53:55Z,94
"@@ -29,6 +29,7 @@ disableSSLManagementError=Houve um erro ao tentar remover o suporte a SSL do Con
 disableSSLUndertowQuestion=Voc\u00ea quer desativar o SSL do servi\u00e7o HTTPS do Undertow <strong>{0}</strong> ? Voc\u00ea dever\u00e1 escolher um Security Realm da lista abaixo, pois ele \u00e9 um atributo requerido quando se remove o SSL Context.
 disableSSLUndertowSuccess=O SSL foi desativado com sucesso do servi\u00e7o HTTPS do Undertow <strong>{0}</strong>.
 disableSSLUndertowError=Houve um erro ao tentar remover o suporte a SSL do servi\u00e7o HTTPS do Undertow <strong>{0}</strong>. Causa: {0}
+dynamicLoadProviderWarning=Para usar a funcionalidade de Load Metrics, é necessário ter um Dynamic Load Provider, mas ele não existe. Use o menu da esquerda para navegar para o item Dynamic Load Provider e adicione ele.
 ejbFilterDescription=Filtrar por: nome, tipo ou deployment
 enableSSLConfirmationDescription=Confirme os valores abaixo. Quando continuar, todos os recursos ser\u00e3o criados e configurados.
 enableManagementSSLDescription=Esta tarefa ir\u00e1 proteger a interface de gerenciamento web ao usar um certificado para criptografar a comunica\u00e7\u00e3o entre o browser e o Wildfly apenas. As configura\u00e7\u00f5es da interface nativa n\u00e3o ser\u00e1 modificada. Depois desta opera\u00e7\u00e3o for finalizada, voc\u00ea poder\u00e1 desabilitar o SSL da interface de gerenciamento, mas os recursos do subsistema elytron n\u00e3o ser\u00e3o removidos. Se voc\u00ea desejar alterar qualquer configura\u00e7\u00e3o aqui realizada, poder\u00e1 usar o model browser ou jboss-cli.sh.
@@ -96,6 +97,7 @@ patchRestartHostControllerQuestion=<p>O servidor de controle <strong>{0}</strong
 patchRestartDomainControllerQuestion=<p>O servidor de controle de dom\u00ednio <strong>{0}</strong> precisa ser reiniciado. Uma corre\u00e7\u00e3o n\u00e3o pode ser adicionada ou removida antes do servidor de controle ser reiniciado.</p><p>Voc\u00ea tem certeza de que quer reiniciar o servi\u00e7o de controle <strong>{0}</strong></p> ? <p>O console de gerenciamento web ficar\u00e1 indispon\u00edvel at\u00e9 que o servidor de controle de dom\u00ednio (Domain Controller) seja iniciado corretamente.</p>
 patchRestartStandaloneQuestion=<p>O servidor precisa ser reiniciado. Uma corre\u00e7\u00e3o n\u00e3o pode ser adicionada ou removida antes do servidor reiniciado.</p><p>Voc\u00ea tem certeza de que quer reiniciar o servidor ?</p><p>O console de gerenciamento web ficar\u00e1 indispon\u00edvel at\u00e9 que o servidor seja iniciado corretamente.</p>
 patchStopAllServersQuestion=<p>A aplica\u00e7\u00e3o da corre\u00e7\u00e3o ir\u00e1 substituir arquivos da instala\u00e7\u00e3o, para evitar conflitos e problemas para as aplica\u00e7\u00f5es instaladas e em funcionamento nos servidores \u00e9 altamente recomend\u00e1vel que pare todos os servidores em funcionamento sob o controlador <strong>{1}</strong>.</p><p>Voc\u00ea quer parar os seguintes servidores <strong>{0}</strong> do servi\u00e7o de controle (Host Controller) <strong>{1}</strong> ?</p><p>Cada servidor ser\u00e1 parado imediatamente.</p>
+proxyColumnFilterDescription=Filtrar por: Nome do Proxy ou conector.
 reloadError=Falha ao recarregar <strong>{0}</strong>. Causa: {1}.
 reloadCRLError=Falha ao recarregar a lista de revoga\u00e7\u00e3o de certificados do Trust Manager <strong>{0}</strong>. Causa: {1}.
 reloadCRLSuccess=A lista de revoga\u00e7\u00e3o de certificados do Trust Manager <strong>{0}</strong> foi recarregada com sucesso.",2018-08-01T20:53:55Z,94
"@@ -38,7 +38,7 @@ enum ServletContainerSetting {
     final String resource;
     final String icon;
 
-    ServletContainerSetting(final String baseId, final String type, final String resource, final String icon) {
+    ServletContainerSetting(String baseId, String type, String resource, String icon) {
         this.baseId = baseId;
         this.type = type;
         this.resource = resource;",2018-06-26T18:10:17Z,104
"@@ -72,23 +72,23 @@ class JpaPreview extends PreviewContent<JpaStatistic> {
                 .primaryAction(resources.constants().gotoDeployment(), () -> placeManager.revealPlace(placeRequest))
                 .build();
 
-        openedSessions = new Utilization(resources.constants().opened(), resources.constants().sessions(),
+        openedSessions = new Utilization(resources.constants().opened(), Names.SESSIONS,
                 environment.isStandalone(), false);
-        closedSessions = new Utilization(resources.constants().closed(), resources.constants().sessions(),
+        closedSessions = new Utilization(resources.constants().closed(), Names.SESSIONS,
                 environment.isStandalone(), false);
 
         getHeaderContainer().appendChild(refresh = refreshLink(() -> update(jpaStatistic)));
         previewBuilder()
                 .add(noStatistics)
-                .add(header = h(2).textContent(resources.constants().sessions()).asElement())
+                .add(header = h(2).textContent(Names.SESSIONS).asElement())
                 .add(openedSessions)
                 .add(closedSessions);
 
         Elements.setVisible(noStatistics.asElement(), false);
     }
 
     @Override
-    public void update(final JpaStatistic jpaStatistics) {
+    public void update(JpaStatistic jpaStatistics) {
         Operation operation = new Operation.Builder(jpaStatistics.getAddress(), READ_RESOURCE_OPERATION)
                 .param(INCLUDE_RUNTIME, true)
                 .param(RECURSIVE, true)
@@ -97,7 +97,7 @@ public void update(final JpaStatistic jpaStatistics) {
     }
 
     @SuppressWarnings(""HardCodedStringLiteral"")
-    private void internalUpdate(final JpaStatistic statistic) {
+    private void internalUpdate(JpaStatistic statistic) {
         boolean statisticsEnabled = statistic.isStatisticsEnabled();
 
         Elements.setVisible(noStatistics.asElement(), !statisticsEnabled);",2018-06-26T18:10:17Z,105
"@@ -24,22 +24,23 @@
 
 class LogFile extends ModelNode {
 
+    // TODO Move to ModelDescriptionConstants
     private static final String FILE_NAME = ""file-name"";
     private static final String FILE_SIZE = ""file-size"";
     private static final String LAST_MODIFIED_DATE = ""last-modified-date"";
     private static final String LAST_MODIFIED_TIMESTAMP = ""last-modified-timestamp"";
 
-    LogFile(final ModelNode node) {
+    LogFile(ModelNode node) {
         set(node);
     }
 
-    LogFile(final String name, final ModelNode node) {
+    LogFile(String name, ModelNode node) {
         set(node);
         get(FILE_NAME).set(name);
     }
 
     public String getFilename() {
-        return get(FILE_NAME).asString(); //NON-NLS
+        return get(FILE_NAME).asString();
     }
 
     public Date getLastModifiedDate() {",2018-06-26T18:10:17Z,74
"@@ -19,13 +19,7 @@
 import java.util.List;
 
 import javax.inject.Inject;
-import javax.inject.Provider;
 
-import com.google.gwt.safehtml.shared.SafeHtml;
-import com.google.web.bindery.event.shared.EventBus;
-import elemental2.dom.HTMLElement;
-import org.jboss.hal.ballroom.dialog.Dialog;
-import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.config.Environment;
 import org.jboss.hal.core.deployment.DeploymentResource;
 import org.jboss.hal.core.finder.ColumnActionFactory;
@@ -35,33 +29,21 @@
 import org.jboss.hal.core.finder.ItemAction;
 import org.jboss.hal.core.finder.ItemActionFactory;
 import org.jboss.hal.core.finder.ItemDisplay;
-import org.jboss.hal.core.mbui.form.OperationFormBuilder;
 import org.jboss.hal.core.mvp.Places;
 import org.jboss.hal.core.runtime.server.ServerActions;
 import org.jboss.hal.dmr.Composite;
 import org.jboss.hal.dmr.CompositeResult;
-import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Operation;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
-import org.jboss.hal.flow.Progress;
-import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.StatementContext;
-import org.jboss.hal.meta.processing.MetadataProcessor;
-import org.jboss.hal.meta.security.Constraint;
 import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
 import org.jboss.hal.spi.AsyncColumn;
-import org.jboss.hal.spi.Footer;
-import org.jboss.hal.spi.Message;
-import org.jboss.hal.spi.MessageEvent;
 import org.jboss.hal.spi.Requires;
 
-import static org.jboss.gwt.elemento.core.Elements.div;
-import static org.jboss.gwt.elemento.core.Elements.p;
-import static org.jboss.hal.ballroom.dialog.Dialog.Size.MEDIUM;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_DEPLOYMENT_ADDRESS;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_DEPLOYMENT_TEMPLATE;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_SUBDEPLOYMENT_TEMPLATE;
@@ -71,51 +53,16 @@
 @Requires(WEB_DEPLOYMENT_ADDRESS)
 public class DeploymentColumn extends FinderColumn<DeploymentResource> {
 
-    /**
-     * The regular Dialogs in DialogFactory uses button with a simple Callback that closes the dialog, even when
-     * the form contains errors as ""required fields"" not set. This custom dialog uses a
-     * <code>Dialog.ResultCallback</code>
-     * that returns a boolean, thus the dialog is closed only if there are no form errors.
-     */
-    private static Dialog buildConfirmation(Resources resources, String title, SafeHtml question, HTMLElement element,
-            Dialog.ResultCallback confirm) {
-        HTMLElement content;
-        if (element != null) {
-            content = div()
-                    .add(p().innerHtml(question))
-                    .add(element)
-                    .asElement();
-        } else {
-            content = p().innerHtml(question).asElement();
-        }
-
-        return new Dialog.Builder(title)
-                .primary(resources.constants().invalidate(), confirm)
-                .secondary(resources.constants().cancel(), null)
-                .size(MEDIUM)
-                .add(content)
-                .build();
-    }
-
-    private Dispatcher dispatcher;
-    private EventBus eventBus;
-    private Resources resources;
-    private Provider<Progress> progress;
-    private MetadataProcessor metadataProcessor;
-
     @Inject
     public DeploymentColumn(Finder finder,
             FinderPathFactory finderPathFactory,
             ColumnActionFactory columnActionFactory,
             ItemActionFactory itemActionFactory,
             Dispatcher dispatcher,
-            EventBus eventBus,
             Places places,
-            MetadataProcessor metadataProcessor,
             StatementContext statementContext,
             Environment environment,
             ServerActions serverActions,
-            @Footer Provider<Progress> progress,
             Resources resources) {
 
         super(new Builder<DeploymentResource>(finder, Ids.UNDERTOW_RUNTIME_DEPLOYMENT, Names.DEPLOYMENT)
@@ -142,91 +89,33 @@ public DeploymentColumn(Finder finder,
                         callback.onSuccess(deployments);
                     });
                 })
-                .onPreview(item -> new DeploymentPreview(item, finderPathFactory, places, resources, environment,
-                        dispatcher, statementContext, serverActions))
-                .useFirstActionAsBreadcrumbHandler()
-                .withFilter()
-                .showCount()
-        );
-
-        this.dispatcher = dispatcher;
-        this.eventBus = eventBus;
-        this.resources = resources;
-        this.progress = progress;
-        this.metadataProcessor = metadataProcessor;
-
-        setItemRenderer(item -> new ItemDisplay<DeploymentResource>() {
-            @Override
-            public String getId() {
-                return Ids.asId(item.getPath());
-            }
-
-            @Override
-            public String getTitle() {
-                return item.getPath();
-            }
-
-            @Override
-            public List<ItemAction<DeploymentResource>> actions() {
-                List<ItemAction<DeploymentResource>> actions = new ArrayList<>();
-                actions.add(itemActionFactory.view(places.selectedProfile(NameTokens.UNDERTOW_RUNTIME_DEPLOYMENT_VIEW)
-                        .with(DEPLOYMENT, item.getDeployment())
-                        .with(SUBDEPLOYMENT, item.getSubdeployment())
-                        .build()));
-                actions.add(new ItemAction.Builder<DeploymentResource>()
-                        .title(resources.constants().invalidateSession())
-                        .constraint(Constraint.executable(WEB_DEPLOYMENT_TEMPLATE, INVALIDATE_SESSION_OPERATION))
-                        .handler(itm -> invalidateSession(itm))
-                        .build());
-                return actions;
-            }
-        });
-    }
-
-    private void invalidateSession(DeploymentResource item) {
-        metadataProcessor.lookup(WEB_DEPLOYMENT_TEMPLATE, progress.get(),
-                new MetadataProcessor.MetadataCallback() {
+                .itemRenderer(item -> new ItemDisplay<DeploymentResource>() {
                     @Override
-                    public void onMetadata(Metadata metadata) {
-                        String id = Ids.build(INVALIDATE_SESSION_OPERATION, Ids.FORM);
-                        Form<ModelNode> form = new OperationFormBuilder<>(id, metadata, INVALIDATE_SESSION_OPERATION)
-                                .build();
+                    public String getId() {
+                        return Ids.asId(item.getPath());
+                    }
 
-                        // uses a custom dialog that only closes a dialog if there are no form errors
-                        Dialog dialog = buildConfirmation(resources,
-                                resources.messages().invalidateSessionTitle(),
-                                resources.messages().invalidateSessionQuestion(),
-                                form.asElement(), () -> {
-                                    boolean formOk = form.save();
-                                    if (formOk) {
-                                        String sessionId = form.<String>getFormItem(SESSION_ID).getValue();
-                                        Operation operation = new Operation.Builder(item.getAddress(),
-                                                INVALIDATE_SESSION_OPERATION)
-                                                .param(SESSION_ID, sessionId)
-                                                .build();
-                                        dispatcher.execute(operation, result -> {
-                                            if (result.asBoolean()) {
-                                                MessageEvent.fire(eventBus, Message.success(
-                                                        resources.messages().invalidateSessionSuccess(sessionId)));
-                                            } else {
-                                                MessageEvent.fire(eventBus, Message.warning(
-                                                        resources.messages().invalidateSessionNotExist(sessionId)));
-                                            }
-                                        }, (operation1, failure) -> MessageEvent.fire(eventBus, Message.error(
-                                                resources.messages().invalidateSessionError(sessionId, failure))));
-                                    }
-                                    return formOk;
-                                });
-                        dialog.show();
-                        form.edit(new ModelNode());
+                    @Override
+                    public String getTitle() {
+                        return item.getPath();
                     }
 
                     @Override
-                    public void onError(Throwable error) {
-                        MessageEvent
-                                .fire(eventBus,
-                                        Message.error(resources.messages().metadataError(), error.getMessage()));
+                    public List<ItemAction<DeploymentResource>> actions() {
+                        List<ItemAction<DeploymentResource>> actions = new ArrayList<>();
+                        actions.add(itemActionFactory.view(
+                                places.selectedProfile(NameTokens.UNDERTOW_RUNTIME_DEPLOYMENT_VIEW)
+                                        .with(DEPLOYMENT, item.getDeployment())
+                                        .with(SUBDEPLOYMENT, item.getSubdeployment())
+                                        .build()));
+                        return actions;
                     }
-                });
+                })
+                .onPreview(item -> new DeploymentPreview(item, finderPathFactory, places, resources, environment,
+                        dispatcher, statementContext, serverActions))
+                .useFirstActionAsBreadcrumbHandler()
+                .withFilter()
+                .showCount()
+        );
     }
 }",2018-06-26T18:10:17Z,72
"@@ -15,49 +15,74 @@
  */
 package org.jboss.hal.client.runtime.subsystem.undertow;
 
+import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 import javax.inject.Inject;
+import javax.inject.Provider;
 
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.client.annotations.NameToken;
 import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
 import com.gwtplatform.mvp.client.proxy.ProxyPlace;
 import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
+import org.jboss.hal.ballroom.dialog.DialogFactory;
+import org.jboss.hal.core.SuccessfulOutcome;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderPath;
 import org.jboss.hal.core.finder.FinderPathFactory;
 import org.jboss.hal.core.mvp.ApplicationFinderPresenter;
 import org.jboss.hal.core.mvp.HalView;
 import org.jboss.hal.core.mvp.HasPresenter;
 import org.jboss.hal.core.mvp.SupportsExpertMode;
+import org.jboss.hal.dmr.Composite;
+import org.jboss.hal.dmr.CompositeResult;
+import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.NamedNode;
 import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.Property;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.flow.FlowContext;
+import org.jboss.hal.flow.Progress;
+import org.jboss.hal.flow.Task;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Footer;
+import org.jboss.hal.spi.Message;
+import org.jboss.hal.spi.MessageEvent;
 import org.jboss.hal.spi.Requires;
+import org.jetbrains.annotations.NotNull;
+import rx.Completable;
 
+import static java.util.stream.Collectors.toList;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_DEPLOYMENT_ADDRESS;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_DEPLOYMENT_TEMPLATE;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_SUBDEPLOYMENT_ADDRESS;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_SUBDEPLOYMENT_TEMPLATE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
 import static org.jboss.hal.dmr.ModelNodeHelper.failSafePropertyList;
+import static org.jboss.hal.flow.Flow.series;
 
 public class DeploymentPresenter
         extends ApplicationFinderPresenter<DeploymentPresenter.MyView, DeploymentPresenter.MyProxy>
         implements SupportsExpertMode {
 
+    private static final String SERVLETS = ""servlets"";
+    private static final String WEBSOCKETS = ""websockets"";
+    private static final String SESSION_IDS = ""session-ids"";
+    private static final String SESSIONS = ""sessions"";
+
     private final Dispatcher dispatcher;
     private final FinderPathFactory finderPathFactory;
     private final StatementContext statementContext;
     private final Resources resources;
+    private final Provider<Progress> progress;
     private String deploymentName;
     private String subdeploymentName;
 
@@ -70,12 +95,14 @@ public DeploymentPresenter(
             Dispatcher dispatcher,
             FinderPathFactory finderPathFactory,
             StatementContext statementContext,
-            Resources resources) {
+            Resources resources,
+            @Footer Provider<Progress> progress) {
         super(eventBus, view, myProxy, finder);
         this.dispatcher = dispatcher;
         this.finderPathFactory = finderPathFactory;
         this.statementContext = statementContext;
         this.resources = resources;
+        this.progress = progress;
     }
 
     @Override
@@ -107,26 +134,123 @@ public FinderPath finderPath() {
 
     @Override
     protected void reload() {
-        ResourceAddress address;
-        if (subdeploymentName == null) {
-            address = WEB_DEPLOYMENT_TEMPLATE.resolve(statementContext, deploymentName);
-        } else {
-            address = WEB_SUBDEPLOYMENT_TEMPLATE.resolve(statementContext, deploymentName, subdeploymentName);
-        }
-        Operation operation = new Operation.Builder(address, READ_RESOURCE_OPERATION)
+        ResourceAddress address = deploymentAddress();
+
+        // task 1: read sessions ids, servlets and websockets
+        Operation readResourceOp = new Operation.Builder(address, READ_RESOURCE_OPERATION)
                 .param(INCLUDE_RUNTIME, true)
                 .param(RECURSIVE, true)
                 .build();
-        dispatcher.execute(operation, result -> {
-            getView().updateServlets(asNamedNodes(failSafePropertyList(result, SERVLET)));
-            getView().updateWebsockets(asNamedNodes(failSafePropertyList(result, WEBSOCKET)));
-        });
+        Operation listSessionsOp = new Operation.Builder(address, LIST_SESSIONS).build();
+        Task<FlowContext> task1 = context -> dispatcher.execute(new Composite(readResourceOp, listSessionsOp))
+                .doOnSuccess((CompositeResult result) -> {
+                    ModelNode readResourceResult = result.step(0).get(RESULT);
+                    List<NamedNode> servlets = asNamedNodes(failSafePropertyList(readResourceResult, SERVLET));
+                    List<NamedNode> websockets = asNamedNodes(failSafePropertyList(readResourceResult, WEBSOCKET));
+
+                    // sorted session ids (important for step 2!)
+                    ModelNode listSessionsResult = result.step(1).get(RESULT);
+                    List<String> sessionIds = listSessionsResult.isDefined()
+                            ? listSessionsResult.asList().stream().map(ModelNode::asString).sorted().collect(toList())
+                            : Collections.emptyList();
+
+                    context.set(SERVLETS, servlets);
+                    context.set(WEBSOCKETS, websockets);
+                    context.set(SESSION_IDS, sessionIds);
+                })
+                .toCompletable();
+
+        // task 2: read session creation and last access times
+        Task<FlowContext> task2 = context -> {
+            List<String> sessionIds = context.get(SESSION_IDS);
+            if (sessionIds.isEmpty()) {
+                context.set(SESSIONS, Collections.emptyList());
+                return Completable.complete();
+            } else {
+                List<Operation> operations = new ArrayList<>();
+                for (String id : sessionIds) {
+                    operations.add(new Operation.Builder(address, GET_SESSION_CREATION_TIME)
+                            .param(SESSION_ID, id)
+                            .build());
+                    operations.add(new Operation.Builder(address, GET_SESSION_LAST_ACCESSED_TIME)
+                            .param(SESSION_ID, id)
+                            .build());
+                }
+                return dispatcher.execute(new Composite(operations))
+                        .doOnSuccess((CompositeResult result) -> {
+                            int i = 0;
+                            List<Session> sessions = new ArrayList<>();
+                            for (String sessionId : sessionIds) {
+                                ModelNode modelNode = new ModelNode();
+                                if (result.step(i).isDefined() && result.step(i).get(RESULT).isDefined()) {
+                                    modelNode.get(CREATION_TIME).set(result.step(i).get(RESULT));
+                                }
+                                if (result.step(i + 1).isDefined() && result.step(i + 1).get(RESULT).isDefined()) {
+                                    modelNode.get(LAST_ACCESSED_TIME).set(result.step(i + 1).get(RESULT));
+                                }
+                                sessions.add(new Session(sessionId, modelNode));
+                                i++;
+                            }
+                            context.set(SESSIONS, sessions);
+                        })
+                        .toCompletable();
+            }
+        };
+
+        series(new FlowContext(progress.get()), task1, task2)
+                .subscribe(new SuccessfulOutcome<FlowContext>(getEventBus(), resources) {
+                    @Override
+                    public void onSuccess(FlowContext context) {
+                        List<Session> sessions = context.get(SESSIONS);
+                        List<NamedNode> servlets = context.get(SERVLETS);
+                        List<NamedNode> websockets = context.get(WEBSOCKETS);
+
+                        getView().updateSessions(sessions);
+                        getView().updateServlets(servlets);
+                        getView().updateWebsockets(websockets);
+                    }
+                });
     }
 
     StatementContext getStatementContext() {
         return statementContext;
     }
 
+    void invalidateSession(Session session) {
+        DialogFactory.showConfirmation(resources.constants().invalidateSession(),
+                resources.messages().invalidateSessionQuestion(), () -> {
+                    Operation operation = new Operation.Builder(deploymentAddress(), INVALIDATE_SESSION)
+                            .param(SESSION_ID, session.getSessionId())
+                            .build();
+                    dispatcher.execute(operation,
+                            result -> {
+                                MessageEvent.fire(getEventBus(), Message.success(
+                                        resources.messages().invalidateSessionSuccess()));
+                                reload();
+                            },
+                            (op, failure) -> MessageEvent.fire(getEventBus(),
+                                    Message.error(resources.messages().invalidateSessionError(failure))));
+                });
+    }
+
+    void listSessionAttributes(Session session) {
+        Operation operation = new Operation.Builder(deploymentAddress(), LIST_SESSION_ATTRIBUTES)
+                .param(SESSION_ID, session.getSessionId())
+                .build();
+        dispatcher.execute(operation, result -> getView().updateSessionAttributes(result.asPropertyList()));
+    }
+
+    @NotNull
+    private ResourceAddress deploymentAddress() {
+        ResourceAddress address;
+        if (subdeploymentName == null) {
+            address = WEB_DEPLOYMENT_TEMPLATE.resolve(statementContext, deploymentName);
+        } else {
+            address = WEB_SUBDEPLOYMENT_TEMPLATE.resolve(statementContext, deploymentName, subdeploymentName);
+        }
+        return address;
+    }
+
 
     // @formatter:off
     @ProxyCodeSplit
@@ -136,6 +260,8 @@ public interface MyProxy extends ProxyPlace<DeploymentPresenter> {
     }
 
     public interface MyView extends HalView, HasPresenter<DeploymentPresenter> {
+        void updateSessions(List<Session> sessions);
+        void updateSessionAttributes(List<Property> attributes);
         void updateServlets(List<NamedNode> model);
         void updateWebsockets(List<NamedNode> model);
     }",2018-06-26T18:10:17Z,79
"@@ -132,7 +132,7 @@ class DeploymentPreview extends PreviewContent<DeploymentResource> {
                 .build();
         registerAttachable(sessions);
         sessionsElement = section()
-                .add(h(2, resources.constants().sessions()))
+                .add(h(2, Names.SESSIONS))
                 .add(sessions)
                 .asElement();
 ",2018-06-26T18:10:17Z,25
"@@ -20,35 +20,43 @@
 import javax.inject.Inject;
 
 import elemental2.dom.HTMLElement;
+import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.hal.ballroom.Format;
 import org.jboss.hal.ballroom.VerticalNavigation;
 import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.table.Scope;
 import org.jboss.hal.ballroom.table.Table;
 import org.jboss.hal.core.mbui.form.ModelNodeForm;
 import org.jboss.hal.core.mbui.table.ModelNodeTable;
 import org.jboss.hal.core.mvp.HalViewImpl;
 import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.Property;
 import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.security.Constraint;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
 
-import static org.jboss.gwt.elemento.core.Elements.h;
-import static org.jboss.gwt.elemento.core.Elements.p;
-import static org.jboss.gwt.elemento.core.Elements.section;
+import static org.jboss.gwt.elemento.core.Elements.*;
+import static org.jboss.gwt.elemento.core.Elements.table;
 import static org.jboss.hal.ballroom.LayoutBuilder.column;
 import static org.jboss.hal.ballroom.LayoutBuilder.row;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_DEPLOYMENT_SERVLET_TEMPLATE;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_DEPLOYMENT_TEMPLATE;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_DEPLOYMENT_WEBSOCKETS_TEMPLATE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
-import static org.jboss.hal.resources.CSS.pfIcon;
+import static org.jboss.hal.resources.CSS.*;
+import static org.jboss.hal.resources.CSS.table;
 import static org.jboss.hal.resources.Ids.FORM;
+import static org.jboss.hal.resources.Ids.SESSION;
 import static org.jboss.hal.resources.Ids.UNDERTOW_RUNTIME;
 
 public class DeploymentView extends HalViewImpl implements DeploymentPresenter.MyView {
 
+    private final Table<Session> sessionTable;
+    private final HTMLElement attributesElement;
+    private final HTMLElement attributesTableBody;
     private final Table<NamedNode> servletsTable;
     private final Form<NamedNode> servletsForm;
     private final Table<NamedNode> websocketsTable;
@@ -57,8 +65,40 @@ public class DeploymentView extends HalViewImpl implements DeploymentPresenter.M
     private DeploymentPresenter presenter;
 
     @Inject
-    @SuppressWarnings({""ConstantConditions"", ""HardCodedStringLiteral""})
-    public DeploymentView(final MetadataRegistry metadataRegistry, final Resources resources) {
+    public DeploymentView(MetadataRegistry metadataRegistry, Resources resources) {
+
+        // ------------------------------------------------------ sessions
+
+        String id = Ids.build(UNDERTOW, DEPLOYMENT, SESSION);
+        sessionTable = new ModelNodeTable.Builder<Session>(id, Metadata.empty())
+                .button(resources.constants().reload(), table -> presenter.reload(),
+                        Constraint.executable(WEB_DEPLOYMENT_TEMPLATE, LIST_SESSIONS))
+                .button(resources.constants().invalidateSession(),
+                        table -> presenter.invalidateSession(table.selectedRow()), Scope.SELECTED,
+                        Constraint.executable(WEB_DEPLOYMENT_TEMPLATE, INVALIDATE_SESSION))
+                .column(SESSION_ID, Names.SESSION_ID, (cell, type, row, meta) -> row.getName())
+                .column(CREATION_TIME, resources.constants().creationTime(),
+                        (cell, type, row, meta) -> Format.shortDateTime(row.getCreationTime()))
+                .column(LAST_ACCESSED_TIME, resources.constants().lastAccessedTime(),
+                        (cell, type, row, meta) -> Format.shortDateTime(row.getLastAccessTime()))
+                .build();
+
+        attributesElement = div().css(marginTopLarge)
+                .add(h(2, resources.constants().attributes()))
+                .add(table().css(table, tableStriped, attributes)
+                        .add(thead()
+                                .add(tr()
+                                        .add(th().textContent(Names.NAME))
+                                        .add(th().textContent(Names.VALUE))))
+                        .add(attributesTableBody = tbody().asElement()))
+                .asElement();
+        Elements.setVisible(attributesElement, false);
+
+        HTMLElement sessionSection = section()
+                .add(h(1).textContent(Names.SESSIONS))
+                .add(sessionTable)
+                .add(attributesElement)
+                .asElement();
 
         // ------------------------------------------------------ servlets
 
@@ -108,14 +148,17 @@ public DeploymentView(final MetadataRegistry metadataRegistry, final Resources r
                 .add(websocketsForm)
                 .asElement();
 
+        // ------------------------------------------------------ navigation & root
+
         navigation = new VerticalNavigation();
-        navigation.addPrimary(Ids.build(UNDERTOW, DEPLOYMENT, SERVLET, Ids.ITEM), Names.SERVLET, pfIcon(""enterprise""),
-                servletSection);
+        navigation.addPrimary(Ids.build(UNDERTOW, DEPLOYMENT, SESSION, Ids.ITEM), Names.SESSIONS,
+                pfIcon(""users""), sessionSection);
+        navigation.addPrimary(Ids.build(UNDERTOW, DEPLOYMENT, SERVLET, Ids.ITEM), Names.SERVLET,
+                fontAwesome(""code""), servletSection);
         navigation.addPrimary(Ids.build(UNDERTOW, DEPLOYMENT, WEBSOCKET, Ids.ITEM), Names.WEBSOCKETS,
-                pfIcon(""replicator""),
-                websocketSection);
+                fontAwesome(""exchange""), websocketSection);
 
-        registerAttachable(navigation, servletsTable, servletsForm, websocketsTable, websocketsForm);
+        registerAttachable(navigation, sessionTable, servletsTable, servletsForm, websocketsTable, websocketsForm);
 
         initElement(row()
                 .add(column()
@@ -126,23 +169,48 @@ public DeploymentView(final MetadataRegistry metadataRegistry, final Resources r
     @SuppressWarnings(""ConstantConditions"")
     public void attach() {
         super.attach();
+        sessionTable.onSelectionChange(table -> {
+            if (table.hasSelection()) {
+                presenter.listSessionAttributes(table.selectedRow());
+            } else {
+                Elements.setVisible(attributesElement, false);
+            }
+        });
         servletsTable.bindForm(servletsForm);
         websocketsTable.bindForm(websocketsForm);
     }
 
     @Override
-    public void setPresenter(final DeploymentPresenter presenter) {
+    public void setPresenter(DeploymentPresenter presenter) {
         this.presenter = presenter;
     }
 
     @Override
-    public void updateServlets(final List<NamedNode> model) {
+    public void updateSessions(List<Session> sessions) {
+        sessionTable.update(sessions);
+        Elements.setVisible(attributesElement, sessionTable.hasSelection());
+    }
+
+    @Override
+    public void updateSessionAttributes(List<Property> attributes) {
+        Elements.removeChildrenFrom(attributesTableBody);
+        for (Property attribute : attributes) {
+            attributesTableBody.appendChild(tr()
+                    .add(td().textContent(attribute.getName()))
+                    .add(td().textContent(attribute.getValue().asString()))
+                    .asElement());
+        }
+        Elements.setVisible(attributesElement, !attributes.isEmpty());
+    }
+
+    @Override
+    public void updateServlets(List<NamedNode> model) {
         servletsForm.clear();
         servletsTable.update(model);
     }
 
     @Override
-    public void updateWebsockets(final List<NamedNode> model) {
+    public void updateWebsockets(List<NamedNode> model) {
         websocketsForm.clear();
         websocketsTable.update(model);
     }",2018-06-26T18:10:17Z,62
"@@ -0,0 +1,44 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.runtime.subsystem.undertow;
+
+import java.util.Date;
+
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.NamedNode;
+
+import static org.jboss.hal.dmr.ModelDescriptionConstants.CREATION_TIME;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.LAST_ACCESSED_TIME;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafeDate;
+
+class Session extends NamedNode {
+
+    Session(String sessionId, ModelNode modelNode) {
+        super(sessionId, modelNode);
+    }
+
+    String getSessionId() {
+        return getName();
+    }
+
+    Date getCreationTime() {
+        return failSafeDate(this, CREATION_TIME);
+    }
+
+    Date getLastAccessTime() {
+        return failSafeDate(this, LAST_ACCESSED_TIME);
+    }
+}",2018-06-26T18:10:17Z,106
"@@ -23,6 +23,7 @@
 import com.google.gwt.i18n.shared.DateTimeFormat;
 import com.google.gwt.i18n.shared.DateTimeFormat.PredefinedFormat;
 import org.jboss.hal.resources.Constants;
+import org.jboss.hal.resources.Names;
 
 public final class Format {
 
@@ -36,19 +37,19 @@ public final class Format {
 
 
     public static String timestamp(Date date) {
-        return TIMESTAMP.format(date);
+        return date != null ? TIMESTAMP.format(date) : Names.NOT_AVAILABLE;
     }
 
     public static String time(Date date) {
-        return TIME_MEDIUM.format(date);
+        return date != null ? TIME_MEDIUM.format(date) : Names.NOT_AVAILABLE;
     }
 
     public static String shortDateTime(Date date) {
-        return DATE_TIME_SHORT.format(date);
+        return date != null ? DATE_TIME_SHORT.format(date) : Names.NOT_AVAILABLE;
     }
 
     public static String mediumDateTime(Date date) {
-        return DATE_TIME_MEDIUM.format(date);
+        return date != null ? DATE_TIME_MEDIUM.format(date) : Names.NOT_AVAILABLE;
     }
 
     public static String humanReadableFileSize(long size) {",2018-06-26T18:10:17Z,107
"@@ -85,9 +85,7 @@ public void attach() {
         applySecurity();
     }
 
-    /**
-     * Shortcut for {@code super.select(data, NamedNode::getName)}
-     */
+    /** Shortcut for {@code super.select(data, NamedNode::getName)} */
     public void select(T data) {
         if (!identifierChecked) {
             checkIdentifier(data);
@@ -96,24 +94,21 @@ public void select(T data) {
     }
 
     @Override
-    public void select(final T data, final Function<T, String> identifier) {
+    public void select(T data, Function<T, String> identifier) {
         super.select(data, identifier);
         applySecurity();
     }
 
-    /**
-     * Shortcut for {@code super.update(data, NamedNode::getName)}
-     */
-    public void update(final Iterable<T> data) {
+    /** Shortcut for {@code super.update(data, NamedNode::getName)} */
+    public void update(Iterable<T> data) {
         if (!identifierChecked) {
             checkIdentifier(Iterables.isEmpty(data) ? null : data.iterator().next());
         }
         update(data, RESET, identifier);
     }
 
     @Override
-    public void update(final Iterable<T> data, final RefreshMode mode, final Function<T, String> identifier) {
-
+    public void update(Iterable<T> data, RefreshMode mode, Function<T, String> identifier) {
         super.update(data, mode, identifier);
         applySecurity();
     }
@@ -171,7 +166,7 @@ public static class Builder<T extends ModelNode> extends GenericOptionsBuilder<B
         private final ColumnFactory columnFactory;
 
         @JsIgnore
-        public Builder(@NonNls final String id, final Metadata metadata) {
+        public Builder(@NonNls String id, Metadata metadata) {
             this.id = id;
             this.metadata = metadata;
             this.columnFactory = new ColumnFactory();
@@ -213,18 +208,7 @@ protected Builder<T> that() {
             return this;
         }
 
-        @Override
-        protected void validate() {
-            super.validate();
-            if (!metadata.getDescription().hasDefined(ATTRIBUTES)) {
-                throw new IllegalStateException(
-                        ""No attributes found in resource description\n"" + metadata.getDescription());
-            }
-        }
-
-        /**
-         * Creates and returns the table.
-         */
+        /** Creates and returns the table. */
         @EsReturn(""Table"")
         public ModelNodeTable<T> build() {
             return new ModelNodeTable<>(this);
@@ -246,7 +230,7 @@ public ModelNodeTable<T> build() {
          */
         @JsMethod(name = ""add"")
         @EsReturn(""TableBuilder"")
-        public Builder<T> jsAdd(final String type,
+        public Builder<T> jsAdd(String type,
                 @EsParam(""AddressTemplate|string"") Object template,
                 @EsParam(""string[]"") String[] attributes,
                 @EsParam(""function(name: string, address: ResourceAddress)"") AddCallback callback) {",2018-06-26T18:10:17Z,108
"@@ -179,6 +179,7 @@ public interface ModelDescriptionConstants {
     String CRAWLER_SESSION_MANAGEMENT = ""crawler-session-management"";
     String CREATE = ""create"";
     String CREATE_TIME = ""create-time"";
+    String CREATION_TIME = ""creation-time"";
     String CREDENTIAL_REFERENCE = ""credential-reference"";
     String CREDENTIAL_STORE = ""credential-store"";
     String CURRENT_THREAD_COUNT = ""current-thread-count"";
@@ -310,6 +311,8 @@ public interface ModelDescriptionConstants {
     String FULL_REPLACE_DEPLOYMENT = ""full-replace-deployment"";
     String GENERATE_CERTIFICATE_SIGNING_REQUEST = ""generate-certificate-signing-request"";
     String GENERATE_KEY_PAIR = ""generate-key-pair"";
+    String GET_SESSION_CREATION_TIME = ""get-session-creation-time"";
+    String GET_SESSION_LAST_ACCESSED_TIME = ""get-session-last-accessed-time"";
     String GLOBAL_MODULES = ""global-modules"";
     String GROUP = ""group"";
     String GROUPS_ATTRIBUTE = ""groups-attribute"";
@@ -368,7 +371,7 @@ public interface ModelDescriptionConstants {
     String INSTANCE_ID = ""instance-id"";
     String INTERFACE = ""interface"";
     String INTERNAL = ""internal"";
-    String INVALIDATE_SESSION_OPERATION = ""invalidate-session"";
+    String INVALIDATE_SESSION = ""invalidate-session"";
     String INVALIDATION = ""invalidation"";
     String INVOCATIONS = ""invocations"";
     String IO = ""io"";
@@ -414,6 +417,7 @@ public interface ModelDescriptionConstants {
     String KILL = ""kill"";
     String KILL_SERVERS = ""kill-servers"";
     String LARGEST_THREAD_COUNT = ""largest-thread-count"";
+    String LAST_ACCESSED_TIME = ""last-accessed-time"";
     String LAST_CONNECTED = ""last-connected"";
     String LAST_UPDATED_TIME = ""last-updated-time"";
     String LAUNCH_TYPE = ""launch-type"";
@@ -428,6 +432,8 @@ public interface ModelDescriptionConstants {
     String LIST_CHANGES_OPERATION = ""list-changes"";
     String LIST_MESSAGES = ""list-messages"";
     String LIST_REMOVE_OPERATION = ""list-remove"";
+    String LIST_SESSION_ATTRIBUTES = ""list-session-attributes"";
+    String LIST_SESSIONS = ""list-sessions"";
     String LISTENER = ""listener"";
     String LIVE_ONLY = ""live-only"";
     String LOAD = ""load"";",2018-06-26T18:10:17Z,109
"@@ -110,7 +110,15 @@ public static Date failSafeDate(ModelNode modelNode, String path) {
         ModelNode attribute = failSafeGet(modelNode, path);
         if (attribute.isDefined()) {
             try {
-                return ISO_8601.parse(attribute.asString());
+                String date = attribute.asString();
+                if (date.indexOf('[') != -1 && date.endsWith(""]"")) {
+                    // Strip zone ID which comes from using
+                    // java.time.format.DateTimeFormatter.ISO_ZONED_DATE_TIME instead of
+                    // java.time.format.DateTimeFormatter.ISO_DATE_TIME
+                    // see https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_ZONED_DATE_TIME
+                    date = date.substring(0, date.indexOf('['));
+                }
+                return ISO_8601.parse(date);
             } catch (IllegalArgumentException ignore) { }
         }
         return null;",2018-06-26T18:10:17Z,110
"@@ -101,6 +101,8 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String copyToClipboard();
     String count();
     String counter();
+
+    String creationTime();
     String currentPage();
     String custom();
 
@@ -309,8 +311,11 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String kill();
 
     String largest();
-    String lastPage();
+
+    String lastAccessedTime();
     String lastModified();
+
+    String lastPage();
     String load();
     String loading();
     String loadingPleaseWait();
@@ -493,8 +498,6 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String serverUrlCustom();
     String serverUrlManagementModel();
     String sessionTime();
-    String sessions();
-    String sessionsCreated();
     String sessionsAvgAliveTime();
     String sessionsMaxAliveTime();
     String setIdentityPasswordTitle();",2018-06-26T18:10:17Z,100
"@@ -635,6 +635,7 @@ public interface Ids {
     String SERVER_STATUS_SYSTEM_PROPERTIES_ITEM = ""server-runtime-system-properties-item"";
     String SERVER_URL_FORM = ""server-url-form"";
     String SERVER_URL_STORAGE = ""hal-local-storage-server-url"";
+    String SESSION = ""session"";
     String SETTINGS_FORM = ""settings-form"";
     String SOCKET_BINDING_GROUP = ""socket-binding-group"";
     String SOCKET_BINDING_GROUP_ADD = ""socket-binding-group-add"";",2018-06-26T18:10:17Z,111
"@@ -253,11 +253,9 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     String invalidJNDIName();
     String invalidLength();
     String invalidRange(long value, long min, long max);
-    String invalidateSessionTitle();
     SafeHtml invalidateSessionQuestion();
-    SafeHtml invalidateSessionSuccess(String sessionId);
-    SafeHtml invalidateSessionError(String sessionId, String cause);
-    SafeHtml invalidateSessionNotExist(String sessionId);
+    SafeHtml invalidateSessionSuccess();
+    SafeHtml invalidateSessionError(String cause);
 
     String jdbcDriverColumnFilterDescription();
     SafeHtml jdbcDriverDeploymentHint();
@@ -318,6 +316,7 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
 
     SafeHtml nearCacheUndefined();
     SafeHtml newContentSuccess(String deployment, String file);
+
     String noBootErrors();
     SafeHtml noChanges();
     SafeHtml noContent();",2018-06-26T18:10:17Z,94
"@@ -308,6 +308,7 @@ public interface Names {
     String SERVER_GROUPS = ""Server Groups"";
     String SERVLET = ""Servlet"";
     String SERVLET_CONTAINER = ""Servlet Container"";
+    String SESSION_ID = ""Session ID"";
     String SESSIONS = ""Sessions"";
     String SHARED_STORE_COLOCATED = ""Shared Store Colocated"";
     String SHARED_STORE_MASTER = ""Shared Store Master"";",2018-06-26T18:10:17Z,112
"@@ -78,6 +78,7 @@ copy=Copy
 copyToClipboard=Copy to clipboard
 count=Count
 counter=Counter
+creationTime=Creation Time
 currentPage=Current Page
 custom=Custom
 data=Data
@@ -276,8 +277,9 @@ jndiNames=JNDI Names
 jndiTree=JNDI Tree
 kill=Kill
 largest=Largest
-lastPage=Last Page
+lastAccessedTime=Last Accessed Time
 lastModified=Last Modified
+lastPage=Last Page
 load=Load
 loading=Loading
 loadingPleaseWait=Loading, please wait...
@@ -451,10 +453,8 @@ serverGroupScopedRole=Server Group Scoped Role
 serverName=Server Name
 serverUrlCustom=Custom URL specified by the user. Use the server drop down to change or reset the URL.
 serverUrlManagementModel=URL read from the management model. If this does not reflect the public URL, you can specify a custom URL using the server drop down.
-sessions=Sessions
 sessionsAvgAliveTime=Session Average Alive Time
 sessionsMaxAliveTime=Session Maximum Alive Time
-sessionsCreated=Sessions Created
 sessionTime=Session Time
 setIdentityPasswordTitle=Set password for an identity
 setSecret=Set secret",2018-06-26T18:10:17Z,100
"@@ -214,11 +214,9 @@ includeAllHelpText=Configure if all authenticated users should be automatically
 initError=Failed to initialize Key Manager <strong>{0}</strong>. Cause: {1}.
 initSuccess=The Key Manager <strong>{0}</strong> was successfully initialized.
 invalidLength=Invalid length, it must be exactly 16 characters.
-invalidateSessionTitle=Invalidate session
-invalidateSessionQuestion=Invalidates a session related to a web application.
-invalidateSessionSuccess=Session <strong>{0}</strong> successfully invalidated.
-invalidateSessionError=Session <strong>{0}</strong> was not invalidated. Cause: {1}
-invalidateSessionNotExist=Session <strong>{0}</strong> doesn''t exist.
+invalidateSessionQuestion=Do you really want to invalidate the selected session?
+invalidateSessionSuccess=Session successfully invalidated.
+invalidateSessionError=Session was not invalidated. Cause: {0}
 invalidExtensionJson=The URL could not be parsed as JSON. Please make sure the extension metadata contains valid JSON.
 invalidExtensionMetadata=The extension metadata is missing required attributes. See <a target=""_blank"" href=""{0}"">{0}</a> for more details.
 invalidFormat=Invalid format",2018-06-26T18:10:17Z,94
"@@ -63,11 +63,9 @@ identityPasswordScramDigest=Uma senha do tipo scram digest.
 identityPasswordSimpleDigest=Uma senha do tipo simple digest.
 initError=Falha ao inicializar o Key Manager <strong>{0}</strong>. Causa: {1}.
 initSuccess=O Key Manager <strong>{0}</strong> foi inicializado com sucesso.
-invalidateSessionTitle=Invalidar sess\u00e3o
 invalidateSessionQuestion=Invalida uma sess\u00e3o relacionada a uma aplica\u00e7\u00e3o web.
-invalidateSessionSuccess=Sess\u00e3o <strong>{0}</strong> invalidada com sucesso.
-invalidateSessionError=Sess\u00e3o <strong>{0}</strong> n\u00e3o foi invalidaa. Causa: {1}
-invalidateSessionNotExist=Sess\u00e3o <strong>{0}</strong> n\u00e3o existe.
+invalidateSessionSuccess=Sess\u00e3o invalidada com sucesso.
+invalidateSessionError=Sess\u00e3o n\u00e3o foi invalidaa. Causa: {0}
 importCertificateError=Falha ao importar o certificado com alias <strong>{0}</strong> do caminho <strong>{1}</strong> em <strong>{2}</strong>. Causa: {3}.
 importCertificateSuccess=O certificado com alias <strong>{0}</strong> foi importado com sucesso do caminho <strong>{1}</strong> em <strong>{2}</strong>.
 jdbcDriverColumnFilterDescription=Filtrar por: Nome do driver ou tipo de instala\u00e7\u00e3o",2018-06-26T18:10:17Z,94
"@@ -10,7 +10,7 @@
     ""graceful-fs"": ""^4.1.4"",
     ""gulp"": ""^3.9.1"",
     ""gulp-copy"": ""0.0.2"",
-    ""gulp-less"": ""^3.0.5"",
+    ""gulp-less"": ""^3.1.0"",
     ""gulp-cssnano"": ""^2.1.1"",
     ""gulp-rename"": ""^1.2.2"",
     ""gulp-watch"": ""^4.3.6"",",2016-09-13T23:15:50Z,214
"@@ -48,41 +48,6 @@
   }
 }
 
-.wizard-header {
-  h1 {
-    font-size: 18px;
-    font-weight: 300;
-    margin-top: 0;
-  }
-
-  .wizard-progress {
-    background-color: #d1d1d1;
-    height: 2px;
-    margin-bottom: 10px;
-    position: relative;
-
-    .indicator {
-      background-color: #39a5dc;
-      display: block;
-      height: 100%;
-      overflow: hidden;
-      position: relative;
-      width: 0;
-    }
-  }
-}
-
-.wizard-step {
-  height: 350px;
-  max-height: 350px;
-  min-height: 350px;
-  overflow-y: scroll;
-
-  .radio {
-    margin-left: 5px;
-  }
-}
-
 .message-details {
   .timestamp {
     color: #8b8d8f;",2016-09-13T23:15:50Z,315
"@@ -1,4 +1,4 @@
-// Customizing Bootstrap and PatternFly payload according to
+// Customizing Bootstrap and PatternFly payload inspired by
 // http://blog.andresgalante.com/howto/2015/03/06/patternfly-part-2.html
 
 
@@ -7,27 +7,15 @@
  * Fonts
  */
 @import ""../../../bower_components/patternfly/less/fonts"";
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/variables"";
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/mixins"";
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/path"";
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/core"";
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/larger"";
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/fixed-width"";
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/list"";
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/bordered-pulled"";
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/animated"";
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/rotated-flipped"";
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/stacked"";
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/icons"";
+@import ""../../../bower_components/patternfly/less/lib/font-awesome/font-awesome"";
 
 
 
 /*!
- * Bootstrap v3.3.5 (http://getbootstrap.com)
- * Copyright 2011-2015 Twitter, Inc.
+ * Bootstrap v3.3.7 (http://getbootstrap.com)
+ * Copyright 2011-2016 Twitter, Inc.
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
-
 // Core variables and mixins (don't touch)
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/variables"";
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/mixins"";
@@ -53,29 +41,29 @@
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/input-groups"";
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/navs"";
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/navbar"";
-@import ""../../../bower_components/patternfly/less/lib/bootstrap/breadcrumbs"";
+//@import ""../../../bower_components/patternfly/less/lib/bootstrap/breadcrumbs"";
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/pagination"";
 //@import ""../../../bower_components/patternfly/less/lib/bootstrap/pager"";
-//@import ""../../../bower_components/patternfly/less/lib/bootstrap/labels"";
+@import ""../../../bower_components/patternfly/less/lib/bootstrap/labels"";
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/badges"";
 //@import ""../../../bower_components/patternfly/less/lib/bootstrap/jumbotron"";
 //@import ""../../../bower_components/patternfly/less/lib/bootstrap/thumbnails"";
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/alerts"";
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/progress-bars"";
-//@import ""../../../bower_components/patternfly/less/lib/bootstrap/media"";
+@import ""../../../bower_components/patternfly/less/lib/bootstrap/media"";
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/list-group"";
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/panels"";
-//@import ""../../../bower_components/patternfly/less/lib/bootstrap/responsive-embed"";
+@import ""../../../bower_components/patternfly/less/lib/bootstrap/responsive-embed"";
 //@import ""../../../bower_components/patternfly/less/lib/bootstrap/wells"";
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/close"";
 
-// Components w/ JavaScript
+// Components w/ JavaScript (disable components we don't use)
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/modals"";
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/tooltip"";
-//@import ""../../../bower_components/patternfly/less/lib/bootstrap/popovers"";
+@import ""../../../bower_components/patternfly/less/lib/bootstrap/popovers"";
 //@import ""../../../bower_components/patternfly/less/lib/bootstrap/carousel"";
 
-// Utility classes
+// Utility classes (don't touch)
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/utilities"";
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/responsive-utilities"";
 
@@ -89,76 +77,84 @@
 
 
 /*
- * PatternFly
- */
-// Bootstrap variables and mixins
-@import ""../../../bower_components/patternfly/less/lib/bootstrap/variables.less"";
-@import ""../../../bower_components/patternfly/less/lib/bootstrap/mixins.less"";
-// Font Awesome variables
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/variables.less"";
-
+ * PatternFly additions to Bootstrap
+*/
 // Bootstrap-Combobox
-@import ""../../../bower_components/patternfly/less/lib/bootstrap-combobox/combobox.less"";
+@import ""../../../bower_components/patternfly/less/lib/bootstrap-combobox/combobox"";
 // Bootstrap-Datepicker
-//@import ""../../../bower_components/patternfly/less/lib/bootstrap-datepicker/datepicker3.less"";
+@import ""../../../bower_components/patternfly/less/lib/bootstrap-datepicker/datepicker3"";
 // Bootstrap-Select
-@import ""../../../bower_components/patternfly/less/lib/bootstrap-select/bootstrap-select.less"";
+@import ""../../../bower_components/patternfly/less/lib/bootstrap-select/bootstrap-select"";
 // Bootstrap Switch
-@import ""../../../bower_components/patternfly/less/lib/bootstrap-switch/bootstrap-switch.less"";
+@import ""../../../bower_components/patternfly/less/lib/bootstrap-switch/bootstrap-switch"";
 // Bootstrap Touchspin
-//@import (less) ""../../../bower_components/patternfly/less/lib/bootstrap-touchspin/jquery.bootstrap-touchspin.css"";
+@import (less) ""../../../bower_components/patternfly/less/lib/bootstrap-touchspin/jquery.bootstrap-touchspin.css"";
 // C3 charts
 @import (less) ""../../../bower_components/patternfly/less/lib/c3/c3.css"";
+// Bootstrap-DateTimePicker
+@import ""../../../bower_components/patternfly/less/lib/eonasdan-bootstrap-datetimepicker/bootstrap-datetimepicker-build"";
+
 
-@import ""../../../bower_components/patternfly/less/alerts.less"";
-@import ""../../../bower_components/patternfly/less/badges.less"";
-@import ""../../../bower_components/patternfly/less/breadcrumbs.less"";
-@import ""../../../bower_components/patternfly/less/buttons.less"";
-@import ""../../../bower_components/patternfly/less/dropdowns.less"";
-@import ""../../../bower_components/patternfly/less/forms.less"";
-@import ""../../../bower_components/patternfly/less/labels.less"";
-@import ""../../../bower_components/patternfly/less/list-group.less"";
-@import ""../../../bower_components/patternfly/less/modals.less"";
-@import ""../../../bower_components/patternfly/less/pager.less"";
-@import ""../../../bower_components/patternfly/less/pagination.less"";
-@import ""../../../bower_components/patternfly/less/panels.less"";
-@import ""../../../bower_components/patternfly/less/popovers.less"";
-@import ""../../../bower_components/patternfly/less/progress-bars.less"";
-@import ""../../../bower_components/patternfly/less/tables.less"";
-@import ""../../../bower_components/patternfly/less/tabs.less"";
-@import ""../../../bower_components/patternfly/less/tooltip.less"";
-@import ""../../../bower_components/patternfly/less/type.less"";
-
-@import ""../../../bower_components/patternfly/less/variables.less"";
-@import ""../../../bower_components/patternfly/less/mixins.less"";
-@import ""../../../bower_components/patternfly/less/blank-slate.less"";
-@import ""../../../bower_components/patternfly/less/bootstrap-combobox.less"";
-//@import ""../../../bower_components/patternfly/less/bootstrap-datepicker.less"";
-@import ""../../../bower_components/patternfly/less/bootstrap-select.less"";
-@import ""../../../bower_components/patternfly/less/bootstrap-switch.less"";
-//@import ""../../../bower_components/patternfly/less/bootstrap-touchspin.less"";
-//@import ""../../../bower_components/patternfly/less/bootstrap-treeview.less"";
-@import ""../../../bower_components/patternfly/less/cards.less"";
-@import ""../../../bower_components/patternfly/less/charts.less"";
-@import ""../../../bower_components/patternfly/less/close.less"";
-@import ""../../../bower_components/patternfly/less/datatables.less"";
-@import ""../../../bower_components/patternfly/less/footer.less"";
-@import ""../../../bower_components/patternfly/less/icons.less"";
-@import ""../../../bower_components/patternfly/less/infotip.less"";
-@import ""../../../bower_components/patternfly/less/layouts.less"";
-@import ""../../../bower_components/patternfly/less/list-view.less"";
-//@import ""../../../bower_components/patternfly/less/login.less"";
-@import ""../../../bower_components/patternfly/less/navbar.less"";
-@import ""../../../bower_components/patternfly/less/navbar-alt.less"";
-@import ""../../../bower_components/patternfly/less/navbar-vertical.less"";
-@import ""../../../bower_components/patternfly/less/nav-vertical-alt.less"";
-@import ""../../../bower_components/patternfly/less/search.less"";
-@import ""../../../bower_components/patternfly/less/sidebar.less"";
-@import ""../../../bower_components/patternfly/less/spinner.less"";
-@import ""../../../bower_components/patternfly/less/syntax-highlighting.less"";
-@import ""../../../bower_components/patternfly/less/toast.less"";
-@import ""../../../bower_components/patternfly/less/toolbar.less"";
-@import ""../../../bower_components/patternfly/less/vertical-nav.less"";
+
+/*
+ * PatternFly
+ */
+@import ""../../../bower_components/patternfly/less/variables"";
+@import ""../../../bower_components/patternfly/less/mixins"";
+
+@import ""../../../bower_components/patternfly/less/alerts"";
+@import ""../../../bower_components/patternfly/less/badges"";
+@import ""../../../bower_components/patternfly/less/breadcrumbs"";
+@import ""../../../bower_components/patternfly/less/buttons"";
+@import ""../../../bower_components/patternfly/less/dropdowns"";
+@import ""../../../bower_components/patternfly/less/forms"";
+@import ""../../../bower_components/patternfly/less/labels"";
+@import ""../../../bower_components/patternfly/less/list-group"";
+@import ""../../../bower_components/patternfly/less/modals"";
+@import ""../../../bower_components/patternfly/less/pager"";
+@import ""../../../bower_components/patternfly/less/pagination"";
+@import ""../../../bower_components/patternfly/less/panels"";
+@import ""../../../bower_components/patternfly/less/popovers"";
+@import ""../../../bower_components/patternfly/less/progress-bars"";
+@import ""../../../bower_components/patternfly/less/tables"";
+@import ""../../../bower_components/patternfly/less/tabs"";
+@import ""../../../bower_components/patternfly/less/tooltip"";
+@import ""../../../bower_components/patternfly/less/type"";
+
+@import ""../../../bower_components/patternfly/less/about-modal"";
+@import ""../../../bower_components/patternfly/less/blank-slate"";
+@import ""../../../bower_components/patternfly/less/bootstrap-combobox"";
+@import ""../../../bower_components/patternfly/less/bootstrap-datepicker"";
+@import ""../../../bower_components/patternfly/less/bootstrap-select"";
+@import ""../../../bower_components/patternfly/less/bootstrap-switch"";
+@import ""../../../bower_components/patternfly/less/bootstrap-touchspin"";
+//@import ""../../../bower_components/patternfly/less/bootstrap-treeview"";
+@import ""../../../bower_components/patternfly/less/cards"";
+@import ""../../../bower_components/patternfly/less/card-view"";
+@import ""../../../bower_components/patternfly/less/charts"";
+@import ""../../../bower_components/patternfly/less/close"";
+@import ""../../../bower_components/patternfly/less/datatables"";
+@import ""../../../bower_components/patternfly/less/footer"";
+@import ""../../../bower_components/patternfly/less/icons"";
+@import ""../../../bower_components/patternfly/less/infotip"";
+@import ""../../../bower_components/patternfly/less/layouts"";
+@import ""../../../bower_components/patternfly/less/links"";
+@import ""../../../bower_components/patternfly/less/list-view"";
+//@import ""../../../bower_components/patternfly/less/login"";
+@import ""../../../bower_components/patternfly/less/navbar"";
+@import ""../../../bower_components/patternfly/less/navbar-alt"";
+@import ""../../../bower_components/patternfly/less/navbar-vertical"";
+@import ""../../../bower_components/patternfly/less/nav-vertical-alt"";
+@import ""../../../bower_components/patternfly/less/notifications-drawer"";
+@import ""../../../bower_components/patternfly/less/search"";
+@import ""../../../bower_components/patternfly/less/sidebar"";
+@import ""../../../bower_components/patternfly/less/spinner"";
+@import ""../../../bower_components/patternfly/less/syntax-highlighting"";
+@import ""../../../bower_components/patternfly/less/time-picker"";
+@import ""../../../bower_components/patternfly/less/toast"";
+@import ""../../../bower_components/patternfly/less/toolbar"";
+@import ""../../../bower_components/patternfly/less/vertical-nav"";
+@import ""../../../bower_components/patternfly/less/wizard"";
 
 
 ",2016-09-13T23:15:50Z,139
"@@ -36,6 +36,7 @@
 import org.jboss.hal.ballroom.dialog.Modal.ModalOptions;
 import org.jboss.hal.resources.Constants;
 import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.UIConstants;
 
 import static org.jboss.gwt.elemento.core.EventType.click;
 import static org.jboss.hal.ballroom.dialog.Modal.$;
@@ -266,9 +267,8 @@ public Dialog build() {
     private static final String CLOSE_ICON_ELEMENT = ""closeIcon"";
     private static final String DIALOG_ELEMENT = ""dialog"";
     private static final String FOOTER_ELEMENT = ""footer"";
-    private static final String ID = ""hal-modal"";
     private static final String LABEL = ""label"";
-    private static final String SELECTOR_ID = ""#"" + ID;
+    private static final String SELECTOR_ID = ""#"" + Ids.HAL_MODAL;
     private static final String TITLE_ELEMENT = ""title"";
 
     private static final Element root;
@@ -282,20 +282,19 @@ public Dialog build() {
 
 
     static {
-        String labelId = Ids.build(ID, LABEL);
         // @formatter:off
         Elements.Builder rootBuilder = new Elements.Builder()
-            .div().id(ID).css(modal)
+            .div().id(Ids.HAL_MODAL).css(modal)
                     .attr(ROLE, DIALOG_ELEMENT)
                     .attr(TABINDEX, ""-1"")
-                    .aria(""labeledby"", labelId)
+                    .aria(""labeledby"", Ids.HAL_MODAL_TITLE)
                 .div().css(modalDialog).attr(""role"", ""document"").rememberAs(DIALOG_ELEMENT) //NON-NLS
                     .div().css(modalContent)
                         .div().css(modalHeader)
                             .button().css(close).aria(LABEL, CONSTANTS.close()).rememberAs(CLOSE_ICON_ELEMENT)
                                 .span().css(pfIcon(""close"")).aria(HIDDEN, String.valueOf(true)).end()
                             .end()
-                            .h(4).css(modalTitle).id(labelId).rememberAs(TITLE_ELEMENT).end()
+                            .h(4).css(modalTitle).id(Ids.HAL_MODAL_TITLE).rememberAs(TITLE_ELEMENT).end()
                         .end()
                         .div().css(modalBody).rememberAs(BODY_ELEMENT).end()
                         .div().css(modalFooter).rememberAs(FOOTER_ELEMENT).end()
@@ -315,8 +314,8 @@ public Dialog build() {
     }
 
     private static void initEventHandler() {
-        $(SELECTOR_ID).on(""shown.bs.modal"", () -> Dialog.open = true);
-        $(SELECTOR_ID).on(""hidden.bs.modal"", () -> Dialog.open = false);
+        $(SELECTOR_ID).on(UIConstants.SHOWN_MODAL, () -> Dialog.open = true);
+        $(SELECTOR_ID).on(UIConstants.HIDDEN_MODAL, () -> Dialog.open = false);
     }
 
     private static void reset() {",2016-09-13T23:15:50Z,187
"@@ -25,18 +25,18 @@
 import static org.jboss.hal.resources.UIConstants.OBJECT;
 
 @JsType(isNative = true)
-abstract class Modal {
+public abstract class Modal {
 
     @JsFunction
     @FunctionalInterface
-    interface ModalHandler {
+    public interface ModalHandler {
 
         void handle();
     }
 
 
     @JsType(isNative = true, namespace = GLOBAL, name = OBJECT)
-    static class ModalOptions {
+    public static class ModalOptions {
 
         public String backdrop;
         public boolean keyboard;
@@ -52,11 +52,11 @@ public static ModalOptions create(final boolean closeOnEsc) {
 
 
     @JsMethod(namespace = GLOBAL)
-    native static Modal $(@NonNls String selector);
+    public native static Modal $(@NonNls String selector);
 
-    native void modal(ModalOptions modalOptions);
+    public native void modal(ModalOptions modalOptions);
 
-    native void modal(@NonNls String action);
+    public native void modal(@NonNls String action);
 
-    native void on(@NonNls String event, ModalHandler handler);
+    public native void on(@NonNls String event, ModalHandler handler);
 }",2016-09-13T23:15:50Z,316
"@@ -15,25 +15,28 @@
  */
 package org.jboss.hal.ballroom.wizard;
 
+import java.util.EnumSet;
+import java.util.HashMap;
+import java.util.LinkedHashMap;
+import java.util.Map;
+
 import com.google.common.collect.Iterables;
 import com.google.gwt.core.client.GWT;
+import elemental.client.Browser;
 import elemental.dom.Element;
 import elemental.html.ButtonElement;
 import org.jboss.gwt.elemento.core.Elements;
 import org.jboss.hal.ballroom.Attachable;
-import org.jboss.hal.ballroom.dialog.Dialog;
-import org.jboss.hal.ballroom.dialog.Dialog.Size;
-import org.jboss.hal.resources.CSS;
+import org.jboss.hal.ballroom.dialog.Modal.ModalOptions;
 import org.jboss.hal.resources.Constants;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.UIConstants;
 
-import java.util.EnumSet;
-import java.util.LinkedHashMap;
-import java.util.Map;
-
-import static elemental.css.CSSStyleDeclaration.Unit.PCT;
-import static java.lang.Math.min;
-import static java.lang.Math.round;
+import static org.jboss.hal.ballroom.dialog.Modal.$;
 import static org.jboss.hal.resources.CSS.*;
+import static org.jboss.hal.resources.UIConstants.HIDDEN;
+import static org.jboss.hal.resources.UIConstants.ROLE;
+import static org.jboss.hal.resources.UIConstants.TABINDEX;
 
 /**
  * General purpose wizard relying on a context for the common data and an enum representing the states of the different
@@ -67,17 +70,101 @@ public interface CancelCallback<C> {
     }
 
 
+    // ------------------------------------------------------ wizard singleton
+
     private static final Constants CONSTANTS = GWT.create(Constants.class);
-    private static final String INDICATOR_ELEMENT = ""indicatorElement"";
-    private static final String HEADER_ELEMENT = ""headerElement"";
-    private static final String STEPS_CONTAINER = ""stepsContainer"";
+    private static final String BACK_ELEMENT = ""prev"";
+    private static final String CANCEL_ELEMENT = ""cancel"";
+    private static final String CLOSE_ICON_ELEMENT = ""closeIcon"";
+    private static final String LABEL = ""label"";
+    private static final String MAIN_CONTAINER = ""mainContainer"";
+    private static final String NEXT_ELEMENT = ""next"";
+    private static final String SELECTOR_ID = ""#"" + Ids.HAL_WIZARD;
+    private static final String STEPS_LIST = ""steps"";
+    private static final String TITLE_ELEMENT = ""title"";
+
+    private static final Element root;
+    private static final Element closeIcon;
+    private static final Element title;
+    private static final Element stepsList;
+    private static final Element main;
+    private static final ButtonElement cancel;
+    private static final ButtonElement back;
+    private static final ButtonElement next;
+
+    private static boolean open;
+
+
+    static {
+        // @formatter:off
+        Elements.Builder rootBuilder = new Elements.Builder()
+            .div().id(Ids.HAL_WIZARD).css(modal)
+                    .attr(ROLE, ""wizard"") //NON-NLS
+                    .attr(TABINDEX, ""-1"")
+                    .aria(""labeledby"", Ids.HAL_WIZARD_TITLE)
+                .div().css(modalDialog, modalLarge, wizardPf)
+                    .div().css(modalContent)
+                        .div().css(modalHeader)
+                            .button().css(close).aria(LABEL, CONSTANTS.close()).rememberAs(CLOSE_ICON_ELEMENT)
+                                .span().css(pfIcon(""close"")).aria(HIDDEN, String.valueOf(true)).end()
+                            .end()
+                            .h(4).css(modalTitle).id(Ids.HAL_WIZARD_TITLE).rememberAs(TITLE_ELEMENT).end()
+                        .end()
+                        .div().css(modalBody, wizardPfBody, clearfix)
+                            .div().css(wizardPfSteps)
+                                .ul().css(wizardPfStepsIndicator).rememberAs(STEPS_LIST)
+                                .end()
+                            .end()
+                            .div().css(wizardPfMain).rememberAs(MAIN_CONTAINER)
+                            .end()
+                        .end()
+                        .div().css(modalFooter, wizardPfFooter)
+                            .button().css(btn, btnDefault, btnCancel).rememberAs(CANCEL_ELEMENT)
+                                .textContent(CONSTANTS.cancel())
+                                .end()
+                            .button().css(btn, btnDefault).rememberAs(BACK_ELEMENT)
+                                .span().css(fontAwesome(""angle-left"")).end()
+                                .span().textContent(CONSTANTS.back()).end()
+                            .end()
+                            .button().css(btn, btnPrimary).rememberAs(NEXT_ELEMENT)
+                                .span().textContent(CONSTANTS.next()).end()
+                                .span().css(fontAwesome(""angle-right"")).end()
+                            .end()
+                        .end()
+                    .end()
+                .end()
+            .end();
+        // @formatter:on
+
+        root = rootBuilder.build();
+        closeIcon = rootBuilder.referenceFor(CLOSE_ICON_ELEMENT);
+        title = rootBuilder.referenceFor(TITLE_ELEMENT);
+        stepsList = rootBuilder.referenceFor(STEPS_LIST);
+        main = rootBuilder.referenceFor(MAIN_CONTAINER);
+        cancel = rootBuilder.referenceFor(CANCEL_ELEMENT);
+        back = rootBuilder.referenceFor(BACK_ELEMENT);
+        next = rootBuilder.referenceFor(NEXT_ELEMENT);
+
+        Browser.getDocument().getBody().appendChild(root);
+        initEventHandler();
+    }
+
+    private static void initEventHandler() {
+        $(SELECTOR_ID).on(UIConstants.SHOWN_MODAL, () -> Wizard.open = true);
+        $(SELECTOR_ID).on(UIConstants.HIDDEN_MODAL, () -> Wizard.open = false);
+    }
+
+    private static void reset() {
+        Elements.removeChildrenFrom(stepsList);
+        Elements.removeChildrenFrom(main);
+    }
+
+
+    // ------------------------------------------------------ wizard instance
 
     private final String id;
     private final LinkedHashMap<S, WizardStep<C, S>> steps;
-    private final Element header;
-    private final Element indicator;
-    private final Element stepsContainer;
-    private final Dialog dialog;
+    private final Map<S, Element> stepIndicators;
     private final C context;
     private final FinishCallback<C> finishCallback;
     private final CancelCallback<C> cancelCallback;
@@ -99,37 +186,40 @@ protected Wizard(final String id, final String title, final C context,
         this.finishCallback = finishCallback;
         this.cancelCallback = cancelCallback;
         this.steps = new LinkedHashMap<>();
-
-        // @formatter:off
-        Elements.Builder body = new Elements.Builder()
-            .header().css(wizardHeader)
-                .h(1).css(wizardHeader).rememberAs(HEADER_ELEMENT).end()
-                .div().css(wizardProgress)
-                    .span().css(CSS.indicator).rememberAs(INDICATOR_ELEMENT).end()
-                .end()
-            .end()
-            .section().css(wizardStep).rememberAs(STEPS_CONTAINER).end();
-        // @formatter:on
-
-        this.header = body.referenceFor(HEADER_ELEMENT);
-        this.indicator = body.referenceFor(INDICATOR_ELEMENT);
-        this.stepsContainer = body.referenceFor(STEPS_CONTAINER);
-        this.dialog = new Dialog.Builder(title)
-                .closeOnEsc(true)
-                .size(Size.MEDIUM)
-                .add(body.elements())
-                .secondary(-100, CONSTANTS.cancel(), this::onCancel)
-                .secondary(CONSTANTS.back(), this::onBack)
-                .primary(CONSTANTS.next(), this::onNext)
-                .build();
+        this.stepIndicators = new HashMap<>();
+
+        reset();
+        Wizard.title.setTextContent(title);
+        closeIcon.setOnclick(event -> onCancel());
+        cancel.setOnclick(event -> onCancel());
+        back.setOnclick(event -> onBack());
+        next.setOnclick(event -> onNext());
     }
 
     private void initSteps() {
+        int index = 1;
         for (Map.Entry<S, WizardStep<C, S>> entry : steps.entrySet()) {
             WizardStep<C, S> step = entry.getValue();
-            Element element = step.asElement();
-            Elements.setVisible(element, false);
-            stepsContainer.appendChild(element);
+
+            // @formatter:off
+            Element li = new Elements.Builder()
+                .li()
+                    .a()
+                        .span().css(wizardPfStepNumber).textContent(String.valueOf(index)).end()
+                        .span().css(wizardPfStepTitle).textContent(step.title).end()
+                    .end()
+                .end()
+            .build();
+            // @formatter:on
+
+            stepIndicators.put(entry.getKey(), li);
+            stepsList.appendChild(li);
+
+            Element stepElement = step.asElement();
+            main.appendChild(stepElement);
+            Elements.setVisible(stepElement, false);
+
+            index++;
         }
     }
 
@@ -146,7 +236,7 @@ protected void addStep(final S state, final WizardStep<C, S> step) {
      */
     public void show() {
         assertSteps();
-        if (stepsContainer.getChildElementCount() == 0) {
+        if (stepsList.getChildElementCount() == 0) {
             initSteps();
         }
 
@@ -156,47 +246,50 @@ public void show() {
         }
         state = initialState();
 
-        dialog.show();
+        if (Wizard.open) {
+            throw new IllegalStateException(
+                    ""Another wizard is still open. Only one wizard can be open at a time. Please close the other wizard!"");
+        }
+        $(SELECTOR_ID).modal(ModalOptions.create(true));
+        $(SELECTOR_ID).modal(""show"");
         pushState(state);
     }
 
     public C getContext() {
         return context;
     }
 
+    private void close() {
+        $(SELECTOR_ID).modal(""hide"");
+    }
+
 
     // ------------------------------------------------------ workflow
 
-    private boolean onCancel() {
+    private void onCancel() {
         if (currentStep().onCancel(context)) {
             cancel();
-            return true;
+            close();
         }
-        return false;
     }
 
-    private boolean onBack() {
+    private void onBack() {
         if (currentStep().onBack(context)) {
             final S previousState = back(state);
             if (previousState != null) {
                 pushState(previousState);
             }
         }
-        return false;
     }
 
-    private boolean onNext() {
+    private void onNext() {
         if (currentStep().onNext(context)) {
             final S nextState = next(state);
             if (nextState != null) {
                 pushState(nextState);
-                return false;
             } else {
                 finish();
-                return true;
             }
-        } else {
-            return false;
         }
     }
 
@@ -208,6 +301,7 @@ private void finish() {
         if (finishCallback != null) {
             finishCallback.onFinish(context);
         }
+        close();
     }
 
     /**
@@ -217,6 +311,7 @@ private void cancel() {
         if (cancelCallback != null) {
             cancelCallback.onCancel(context);
         }
+        close();
     }
 
     /**
@@ -227,33 +322,23 @@ private void cancel() {
     private void pushState(final S state) {
         this.state = state;
 
-        int index = 0;
-        int current = 0;
-        for (Map.Entry<S, WizardStep<C, S>> entry : steps.entrySet()) {
-            if (entry.getKey() == state) {
-                current = index;
+        stepIndicators.forEach((s, element) -> {
+            if (s == state) {
+                element.getClassList().add(active);
+            } else {
+                element.getClassList().remove(active);
             }
-            Elements.setVisible(entry.getValue().asElement(), entry.getKey() == state);
-            index++;
-        }
-        current++;
-        double width = min(round(((double) current / (double) steps.size()) * 100.0), 100.0);
-        setTitle(currentStep().title);
-        indicator.getStyle().setWidth(width, PCT);
+        });
+        steps.forEach((s, step) -> Elements.setVisible(step.asElement(), s == state));
         currentStep().onShow(context);
         for (Attachable attachable : currentStep().attachables) {
             attachable.attach();
         }
-        ButtonElement back = dialog.getButton(Dialog.SECONDARY_POSITION);
+
         back.setDisabled(state == initialState());
-        ButtonElement next = dialog.getButton(Dialog.PRIMARY_POSITION);
         next.setInnerHTML(lastStates().contains(state) ? CONSTANTS.finish() : CONSTANTS.next());
     }
 
-    void setTitle(String title) {
-        header.setInnerText(title);
-    }
-
     /**
      * @return the initial state which is the state of the first added step by default.
      */",2016-09-13T23:15:50Z,226
"@@ -15,14 +15,14 @@
  */
 package org.jboss.hal.ballroom.wizard;
 
-import com.google.common.base.CharMatcher;
-import org.jboss.gwt.elemento.core.IsElement;
-import org.jboss.hal.ballroom.Attachable;
-
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
+import com.google.common.base.CharMatcher;
+import org.jboss.gwt.elemento.core.IsElement;
+import org.jboss.hal.ballroom.Attachable;
+
 /**
  * A step in a wizard. The UI for the step should <string>not</string> contain a header. The header is part of the
  * wizard and will show this step's title.
@@ -100,8 +100,4 @@ protected void registerAttachable(Attachable first, Attachable... rest) {
             Collections.addAll(attachables, rest);
         }
     }
-
-    protected void setTitle(String title) {
-        wizard.setTitle(title);
-    }
 }",2016-09-13T23:15:50Z,317
"@@ -140,7 +140,7 @@ public Element asElement() {
         @Override
         protected void onShow(final SingletonContext context) {
             Elements.removeChildrenFrom(root);
-            setTitle(wizard.getContext().parent.text + ""="" + wizard.getContext().singleton);
+            // setTitle(wizard.getContext().parent.text + ""="" + wizard.getContext().singleton);
             ResourceAddress singletonAddress = wizard.getContext().parent.data.getAddress().getParent()
                     .add(wizard.getContext().parent.text, wizard.getContext().singleton);
             AddressTemplate template = ModelBrowser.asGenericTemplate(wizard.getContext().parent, singletonAddress);",2016-09-13T23:15:50Z,318
"@@ -68,6 +68,16 @@ public static boolean supportsListLogFiles(Version version) {
         return ensureVersion(version, V_2_0_0);
     }
 
+    /**
+     * Check support for {@code :read-content} operation for deployments.
+     *
+     * @return {@code true} if the provided version isn't {@linkplain Version#UNDEFINED undefined} and greater than or
+     * equal {@code 5.0.0}
+     */
+    public static boolean supportsReadContentFromDeployment(Version version) {
+        return ensureVersion(version, V_5_0_0);
+    }
+
     /**
      * Check support for suspend operation and related attributes.
      *",2016-09-13T23:15:50Z,189
"@@ -19,7 +19,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.stream.Collectors;
 import javax.inject.Inject;
 
 import com.google.gwt.user.client.rpc.AsyncCallback;
@@ -35,6 +34,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import static java.util.stream.Collectors.toList;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.NAME;
 
 /**
@@ -100,7 +100,7 @@ public void lookup(final String name, final CapabilitiesCallback callback) {
                         List<AddressTemplate> templates = result.asList().stream()
                                 .map(ModelNode::asString)
                                 .map(AddressTemplate::of)
-                                .collect(Collectors.toList());
+                                .collect(toList());
                         register(name, templates);
                         callback.onSuccess(lookup(name));
                     },",2016-09-13T23:15:50Z,319
"@@ -50,6 +50,7 @@ public interface CSS {
     String blue = ""blue"";
     String bootstrapSwitch = ""bootstrap-switch"";
     String btn = ""btn"";
+    String btnCancel = ""btn-cancel"";
     String btnDefault = ""btn-default"";
     String btnFinder = ""btn-finder"";
     String btnGroup = ""btn-group"";
@@ -289,9 +290,14 @@ public interface CSS {
     String warning = ""warning"";
     String warningTriangleO = ""warning-triangle-o"";
     String withProgress = ""with-progress"";
-    String wizardHeader = ""wizard-header"";
-    String wizardProgress = ""wizard-progress"";
-    String wizardStep = ""wizard-step"";
+    String wizardPf = ""wizard-pf"";
+    String wizardPfBody = ""wizard-pf-body"";
+    String wizardPfFooter = ""wizard-pf-footer"";
+    String wizardPfMain = ""wizard-pf-main"";
+    String wizardPfStepNumber = ""wizard-pf-step-number"";
+    String wizardPfStepTitle = ""wizard-pf-step-title"";
+    String wizardPfSteps = ""wizard-pf-steps"";
+    String wizardPfStepsIndicator = ""wizard-pf-steps-indicator"";
 
     static String column(int columns, String... sizes) {
         if (sizes != null && sizes.length != 0) {",2016-09-13T23:15:50Z,159
"@@ -129,6 +129,11 @@ public interface Ids {
 
     String GROUP = ""group"";
 
+    String HAL_MODAL = ""hal-modal"";
+    String HAL_MODAL_TITLE = build(HAL_MODAL, ""title"");
+    String HAL_WIZARD = ""hal-wizard"";
+    String HAL_WIZARD_TITLE = build(HAL_WIZARD, ""title"");
+
     String HEADER = ""header"";
     String HEADER_CONNECTED_TO = build(HEADER, ""connected-to"");
     String HEADER_MESSAGES = build(HEADER, ""messages"");",2016-09-13T23:15:50Z,111
"@@ -48,6 +48,7 @@ public interface UIConstants {
     String EXPANDED = ""expanded"";
     String GROUP = ""group"";
     String HAS_POPUP = ""haspopup"";
+    String HIDDEN_MODAL = ""hidden.bs.modal"";
     String HREF = ""href"";
     String HIDDEN = ""hidden"";
     String LABELLED_BY = ""labelledby"";
@@ -60,6 +61,7 @@ public interface UIConstants {
     String PRESENTATION = ""presentation"";
     String PROGRESSBAR = ""progressbar"";
     String ROLE = ""role"";
+    String SHOWN_MODAL = ""shown.bs.modal"";
     String TABINDEX = ""tabindex"";
     String TABLIST = ""tablist"";
     String TARGET = ""target"";",2016-09-13T23:15:50Z,320
"@@ -56,6 +56,7 @@ enum Mode {SELECT, ADD}
                 .button(CONSTANTS.remove(), Scope.SELECTED, (event, api) -> {
                     storage.remove(api.selectedRow());
                     api.clear().add(storage.list()).refresh(HOLD);
+                    dialog.setPrimaryButtonDisabled(!table.api().hasSelection());
                 })
                 .column(NAME_KEY)
                 .column(""url"", ""URL"", (cell, type, row, meta) -> row.getUrl()) //NON-NLS
@@ -73,17 +74,9 @@ enum Mode {SELECT, ADD}
                 .include(NAME_KEY, SCHEME, HOST, PORT)
                 .unsorted()
                 .hideButtons()
-                .onCancel(() -> switchTo(SELECT))
-                .onSave((changedValues) -> {
-                    // form is valid here
-                    ModelNode node = new ModelNode();
-                    node.get(NAME_KEY).set(String.valueOf(changedValues.get(NAME_KEY)));
-                    node.get(SCHEME).set(String.valueOf(changedValues.get(SCHEME)));
-                    node.get(HOST).set(String.valueOf(changedValues.get(HOST)));
-                    if (changedValues.containsKey(PORT)) {
-                        node.get(PORT).set((Integer) changedValues.get(PORT));
-                    }
-                    storage.add(new Endpoint(node));
+                .onCancel((form) -> switchTo(SELECT))
+                .onSave((form, changedValues) -> {
+                    storage.add(form.getModel());
                     switchTo(SELECT);
                 })
                 .build();
@@ -106,7 +99,7 @@ enum Mode {SELECT, ADD}
     private void switchTo(final Mode mode) {
         if (mode == SELECT) {
             dialog.setTitle(CONSTANTS.endpointSelectTitle());
-//            table.api().add(storage.list()).refresh(HOLD);
+            table.api().clear().add(storage.list()).refresh(HOLD);
             dialog.setPrimaryButtonLabel(CONSTANTS.endpointConnect());
             dialog.setPrimaryButtonDisabled(!table.api().hasSelection());
             Elements.setVisible(addPage, false);
@@ -117,6 +110,7 @@ private void switchTo(final Mode mode) {
             form.clearValues();
             form.edit(new Endpoint(new ModelNode()));
             dialog.setPrimaryButtonLabel(CONSTANTS.add());
+            dialog.setPrimaryButtonDisabled(false);
             Elements.setVisible(selectPage, false);
             Elements.setVisible(addPage, true);
         }
@@ -125,11 +119,10 @@ private void switchTo(final Mode mode) {
 
     private boolean onPrimary() {
         if (mode == SELECT) {
-            //            manager.onConnect(table.selectedElement());
+            manager.onConnect(table.api().selectedRow());
             return true;
         } else if (mode == ADD) {
             form.save();
-            switchTo(SELECT);
             return false;
         }
         return false;",2016-01-04T11:27:03Z,321
"@@ -66,6 +66,7 @@ public void add(Endpoint endpoint) {
 
     public void remove(Endpoint endpoint) {
         endpoints.remove(endpoint);
+        save();
     }
 
     public void saveSelection(Endpoint selected) {",2016-01-04T11:27:03Z,322
"@@ -239,7 +239,6 @@ public void setText(final String text) {
     public void identifyAs(String id, String... additionalIds) {
         String fq = IdBuilder.build(id, additionalIds);
         setId(fq);
-        setName(fq);
         asElement(EDITING).getDataset().setAt(""formItemGroup"", fq); //NON-NLS
         labelElement.getDataset().setAt(""formItemLabel"", fq); //NON-NLS
         inputElement.asElement().getDataset().setAt(""formItemControl"", fq); //NON-NLS
@@ -395,7 +394,7 @@ public void setFocus(final boolean focus) {
 
     @Override
     public void resetMetaData() {
-        setExpressionValue(null);
+        setExpressionValue(null); // TODO Why?
         setModified(false);
         setUndefined(true);
         clearError();",2016-01-04T11:27:03Z,64
"@@ -61,8 +61,11 @@
  */
 public class DefaultForm<T> extends LazyElement implements Form<T>, SecurityContextAware {
 
-    private final static Constants CONSTANTS = GWT.create(Constants.class);
-    private final static String NOT_INITIALIZED = ""Form element not initialized. Please add this form to the DOM before calling any of the form operations like view(), edit(), save(), cancel() or reset()"";
+    private static final Constants CONSTANTS = GWT.create(Constants.class);
+    private static final String ERROR_MESSAGE = ""errorMessage"";
+    private static final String ERROR_MESSAGES = ""errorMessages"";
+    private static final String MODEL_MUST_NOT_BE_NULL = ""Model must not be null in "";
+    private static final String NOT_INITIALIZED = ""Form element not initialized. Please add this form to the DOM before calling any of the form operations like view(), edit(), save(), cancel() or reset()"";
 
     private final String id;
     private final StateMachine stateMachine;
@@ -82,9 +85,9 @@ public class DefaultForm<T> extends LazyElement implements Form<T>, SecurityCont
     private EventListener exitEditWithEsc;
 
     // accessible in subclasses
-    protected SaveCallback saveCallback;
-    protected ResetCallback resetCallback;
-    protected CancelCallback cancelCallback;
+    protected SaveCallback<T> saveCallback;
+    protected ResetCallback<T> resetCallback;
+    protected CancelCallback<T> cancelCallback;
 
 
     // ------------------------------------------------------ initialization
@@ -170,12 +173,12 @@ private Element editPanel() {
         Elements.Builder errorPanelBuilder = new Elements.Builder()
             .div().css(alert, alertDanger).rememberAs(""errorPanel"")
                 .span().css(pfIcon(""error-circle-o"")).end()
-                .span().rememberAs(""errorMessage"").end()
-                .ul().rememberAs(""errorMessages"").end()
+                .span().rememberAs(ERROR_MESSAGE).end()
+                .ul().rememberAs(ERROR_MESSAGES).end()
             .end();
         // @formatter:on
-        errorMessage = errorPanelBuilder.referenceFor(""errorMessage"");
-        errorMessages = errorPanelBuilder.referenceFor(""errorMessages"");
+        errorMessage = errorPanelBuilder.referenceFor(ERROR_MESSAGE);
+        errorMessages = errorPanelBuilder.referenceFor(ERROR_MESSAGES);
         errorPanel = errorPanelBuilder.build();
         clearErrors();
 
@@ -219,7 +222,7 @@ protected void hideButtons() {
     @Override
     public final void view(final T model) {
         if (model == null) {
-            throw new NullPointerException(""Model must not be null in "" + formId() + "".view(T)"");
+            throw new NullPointerException(MODEL_MUST_NOT_BE_NULL + formId() + "".view(T)"");
         }
         if (!initialized()) {
             throw new IllegalStateException(NOT_INITIALIZED);
@@ -231,7 +234,7 @@ public final void view(final T model) {
     @Override
     public final void edit(final T model) {
         if (model == null) {
-            throw new NullPointerException(""Model must not be null in "" + formId() + "".edit(T)"");
+            throw new NullPointerException(MODEL_MUST_NOT_BE_NULL + formId() + "".edit(T)"");
         }
         if (!initialized()) {
             throw new IllegalStateException(NOT_INITIALIZED);
@@ -247,15 +250,26 @@ public final void save() {
         }
         boolean valid = validate();
         if (valid) {
+            persistModel();
             if (saveCallback != null) {
-                saveCallback.onSave(getChangedValues());
+                saveCallback.onSave(this, getChangedValues());
+            }
+            for (FormItem formItem : formItems.values()) {
+                formItem.resetMetaData();
             }
             execute(SAVE);
         }
     }
 
+    /**
+     * Called from {@link #save()} if {@code validate() == true}. Empty implementation.
+     */
+    @Override
+    public void persistModel() {
+    }
+
     @Override
-    public void setSaveCallback(final SaveCallback saveCallback) {
+    public void setSaveCallback(final SaveCallback<T> saveCallback) {
         this.saveCallback = saveCallback;
     }
 
@@ -276,13 +290,13 @@ public final void cancel() {
         }
         clearErrors();
         if (cancelCallback != null) {
-            cancelCallback.onCancel();
+            cancelCallback.onCancel(this);
         }
         execute(CANCEL);
     }
 
     @Override
-    public void setCancelCallback(final CancelCallback cancelCallback) {
+    public void setCancelCallback(final CancelCallback<T> cancelCallback) {
         this.cancelCallback = cancelCallback;
     }
 
@@ -292,17 +306,17 @@ public final void reset() {
             throw new IllegalStateException(NOT_INITIALIZED);
         }
         if (resetCallback != null) {
-            resetCallback.onReset();
+            resetCallback.onReset(this);
         }
         execute(RESET);
     }
 
     @Override
-    public void setResetCallback(final ResetCallback resetCallback) {
+    public void setResetCallback(final ResetCallback<T> resetCallback) {
         this.resetCallback = resetCallback;
     }
 
-    private String formId() {
+    protected String formId() {
         return ""form("" + id + "")""; //NON-NLS
     }
 
@@ -461,6 +475,14 @@ private boolean validate() {
         return valid;
     }
 
+    @Override
+    public void clearValues() {
+        for (FormItem formItem : formItems.values()) {
+            formItem.clearValue();
+            formItem.resetMetaData();
+        }
+    }
+
     @Override
     public void clearErrors() {
         for (FormItem formItem : formItems.values()) {
@@ -494,11 +516,4 @@ private void showErrors(List<String> messages) {
             Elements.setVisible(errorPanel, true);
         }
     }
-
-    public void clearValues() {
-        for (FormItem formItem : formItems.values()) {
-            formItem.clearValue();
-            formItem.resetMetaData();
-        }
-    }
 }",2016-01-04T11:27:03Z,64
"@@ -36,29 +36,30 @@ enum State {
         READONLY, EDITING
     }
 
+
     enum Operation {
         VIEW, EDIT, CANCEL, SAVE, RESET
     }
 
 
     @FunctionalInterface
-    interface SaveCallback {
+    interface SaveCallback<T> {
 
-        void onSave(Map<String, Object> changedValues);
+        void onSave(Form<T> form, Map<String, Object> changedValues);
     }
 
 
     @FunctionalInterface
-    interface ResetCallback {
+    interface ResetCallback<T> {
 
-        void onReset();
+        void onReset(Form<T> form);
     }
 
 
     @FunctionalInterface
-    interface CancelCallback {
+    interface CancelCallback<T> {
 
-        void onCancel();
+        void onCancel(Form<T> form);
     }
 
 
@@ -81,21 +82,26 @@ interface CancelCallback {
      */
     void save();
 
-    void setSaveCallback(SaveCallback saveCallback);
+    /**
+     * Make the changes in edit mode persistent.
+     */
+    void persistModel();
+
+    void setSaveCallback(SaveCallback<T> saveCallback);
 
     /**
      * Cancels any modifications to the model.
      */
     void cancel();
 
-    void setCancelCallback(CancelCallback cancelCallback);
+    void setCancelCallback(CancelCallback<T> cancelCallback);
 
     /**
      * Resets the model.
      */
     void reset();
 
-    void setResetCallback(ResetCallback resetCallback);
+    void setResetCallback(ResetCallback<T> resetCallback);
 
     /**
      * @return the current model.
@@ -121,6 +127,8 @@ interface CancelCallback {
      */
     void invalidate(String formItem, String message);
 
+    void clearValues();
+
     /**
      * Clears all error markers.
      */",2016-01-04T11:27:03Z,323
"@@ -41,12 +41,12 @@ public class NumberItem extends AbstractFormItem<Long> {
     /**
      * As defined by https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER
      */
-    private static final long MIN_SAFE_NUMBER = -9007199254740991l;
+    public static final long MIN_SAFE_NUMBER = -9007199254740991l;
 
     /**
      * As defined by https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER
      */
-    private static final long MAX_SAFE_NUMBER = 9007199254740991l;
+    public static final long MAX_SAFE_NUMBER = 9007199254740991l;
 
     private final static Constants CONSTANTS = GWT.create(Constants.class);
     private final static Messages MESSAGES = GWT.create(Messages.class);",2016-01-04T11:27:03Z,133
"@@ -36,19 +36,16 @@
 import static org.jboss.hal.resources.CSS.selectpicker;
 
 /**
+ * TODO isModified() does not work!
  * @author Harald Pehl
  */
 public class SelectBoxItem extends AbstractFormItem<String> {
 
     private SelectBoxElement comboBox;
 
     public SelectBoxItem(final String name, final String label, List<String> values) {
-        this(name, label, values, null);
-    }
-
-    public SelectBoxItem(final String name, final String label, List<String> values, String defaultValue) {
         super(name, label);
-        setValues(values, defaultValue);
+        setValues(values);
     }
 
     @Override
@@ -65,15 +62,22 @@ protected InputElement<String> newInputElement() {
         return comboBox;
     }
 
-    public void setValues(List<String> values, String defaultValue) {
-        comboBox.setValues(values, defaultValue);
+    public void setValues(List<String> values) {
+        comboBox.setValues(values);
     }
 
     @Override
     public boolean supportsExpressions() {
         return false;
     }
 
+    @Override
+    public boolean isUndefined() {
+        // As for now a select box has always a value and is as such never undefined
+        // TODO Check if there's a use case when the user wants to clear / undefine the select box
+        return false;
+    }
+
 
     static class SelectBoxElement extends InputElement<String> {
 
@@ -88,7 +92,9 @@ static class SelectBoxElement extends InputElement<String> {
             indexedValues = HashBiMap.create();
         }
 
-        void setValues(List<String> values, String defaultValue) {
+        void setValues(List<String> values) {
+            String currentValue = getValue();
+
             indexedValues.clear();
             Elements.removeChildrenFrom(element);
 
@@ -98,10 +104,10 @@ void setValues(List<String> values, String defaultValue) {
                 OptionElement option = Browser.getDocument().createOptionElement();
                 option.setText(value);
                 element.appendChild(option);
-                if (defaultValue != null && defaultValue.equals(value)) {
+                indexedValues.put(i, value);
+                if (value.equals(currentValue)) {
                     defaultIndex = i;
                 }
-                indexedValues.put(i, value);
                 i++;
             }
             element.setSelectedIndex(defaultIndex);
@@ -145,7 +151,7 @@ public void setEnabled(final boolean b) {
         public String getValue() {
             int selectedIndex = element.getSelectedIndex();
             if (indexedValues.containsKey(selectedIndex)) {
-                indexedValues.get(selectedIndex);
+                return indexedValues.get(selectedIndex);
             }
             return null;
         }",2016-01-04T11:27:03Z,8
"@@ -25,6 +25,7 @@
 import jsinterop.annotations.JsOverlay;
 import jsinterop.annotations.JsProperty;
 import jsinterop.annotations.JsType;
+import org.jboss.hal.resources.Names;
 
 import java.util.Collections;
 import java.util.List;
@@ -200,10 +201,10 @@ public final boolean hasSelection() {
 
     @JsOverlay
     public final Api<T> onSelect(SelectionHandler<T> handler) {
-        on(""select"", new SelectCallback<T>() { //NON-NLS
+        on(Names.SELECT, new SelectCallback<T>() {
             @Override
             public void onSelect(final Object event, final Api<T> api, final String type) {
-                if (""row"".equals(type)) { //NON-NLS
+                if (Names.ROW.equals(type)) {
                     handler.onSelect(api, api.selectedRow());
                 }
             }
@@ -213,10 +214,10 @@ public void onSelect(final Object event, final Api<T> api, final String type) {
 
     @JsOverlay
     public final Api<T> onDeselect(DeselectionHandler<T> handler) {
-        on(""deselect"", new SelectCallback<T>() { //NON-NLS
+        on(Names.DESELECT, new SelectCallback<T>() {
             @Override
             public void onSelect(final Object event, final Api<T> api, final String type) {
-                if (""row"".equals(type)) { //NON-NLS
+                if (Names.ROW.equals(type)) {
                     handler.onDeselect(api);
                 }
             }
@@ -226,10 +227,18 @@ public void onSelect(final Object event, final Api<T> api, final String type) {
 
     @JsOverlay
     public final Api<T> onSelectionChange(SelectionChangeHandler<T> handler) {
-        on(""select deselect"", new SelectCallback<T>() { //NON-NLS
+        on(Names.SELECT, new SelectCallback<T>() {
             @Override
             public void onSelect(final Object event, final Api<T> api, final String type) {
-                if (""row"".equals(type)) { //NON-NLS
+                if (Names.ROW.equals(type)) {
+                    handler.onSelectionChanged(api);
+                }
+            }
+        });
+        on(Names.DESELECT, new SelectCallback<T>() {
+            @Override
+            public void onSelect(final Object event, final Api<T> api, final String type) {
+                if (Names.ROW.equals(type)) {
                     handler.onSelectionChanged(api);
                 }
             }",2016-01-04T11:27:03Z,324
"@@ -26,7 +26,6 @@
 import com.gwtplatform.mvp.client.Presenter;
 import com.gwtplatform.mvp.client.proxy.Proxy;
 import com.gwtplatform.mvp.client.proxy.RevealContentHandler;
-import org.jboss.hal.ballroom.PatternFly;
 
 /**
  * A presenter which calls {@link PatternFly#initComponents()} when it's {@linkplain #onReveal() revealed}. Extend from",2016-01-04T11:27:03Z,35
"@@ -21,17 +21,25 @@
  */
 package org.jboss.hal.core.mbui.form;
 
+import com.google.common.collect.Lists;
 import org.jboss.hal.ballroom.form.CheckBoxItem;
 import org.jboss.hal.ballroom.form.FormItem;
 import org.jboss.hal.ballroom.form.FormItemProvider;
 import org.jboss.hal.ballroom.form.NumberItem;
+import org.jboss.hal.ballroom.form.SelectBoxItem;
 import org.jboss.hal.ballroom.form.TextBoxItem;
 import org.jboss.hal.core.mbui.LabelBuilder;
 import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.ModelNodeHelper;
 import org.jboss.hal.dmr.ModelType;
 import org.jboss.hal.dmr.Property;
 
-import static org.jboss.hal.dmr.ModelDescriptionConstants.TYPE;
+import java.util.List;
+
+import static java.util.Collections.emptyList;
+import static org.jboss.hal.ballroom.form.NumberItem.MAX_SAFE_NUMBER;
+import static org.jboss.hal.ballroom.form.NumberItem.MIN_SAFE_NUMBER;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 
 /**
  * @author Harald Pehl
@@ -49,6 +57,7 @@ public FormItem<?> createFrom(final Property attributeDescription) {
         String name = attributeDescription.getName();
         String label = labelBuilder.label(attributeDescription);
         ModelNode modelNode = attributeDescription.getValue();
+
         if (modelNode.hasDefined(TYPE)) {
             ModelType type = modelNode.get(TYPE).asType();
             switch (type) {
@@ -57,8 +66,11 @@ public FormItem<?> createFrom(final Property attributeDescription) {
                 case DOUBLE:
                 case INT:
                 case LONG:
-                    formItem = new NumberItem(name, label);
+                    long min = modelNode.get(MIN).asLong(MIN_SAFE_NUMBER);
+                    long max = modelNode.get(MAX).asLong(MAX_SAFE_NUMBER);
+                    formItem = new NumberItem(name, label, min, max);
                     break;
+
                 case BOOLEAN:
                     formItem = new CheckBoxItem(name, label);
                     break;
@@ -73,14 +85,29 @@ public FormItem<?> createFrom(final Property attributeDescription) {
                 case PROPERTY:
                     break;
                 case STRING:
-                    formItem = new TextBoxItem(name, label);
+                    List<ModelNode> allowedNodes = ModelNodeHelper
+                            .getOrDefault(modelNode, () -> modelNode.get(ALLOWED).asList(), emptyList());
+                    List<String> allowedValues = Lists.transform(allowedNodes, ModelNode::asString);
+                    if (allowedValues.isEmpty()) {
+                        formItem = new TextBoxItem(name, label);
+                    } else {
+                        formItem = new SelectBoxItem(name, label, allowedValues);
+                    }
                     break;
                 case TYPE:
                     break;
                 case UNDEFINED:
                     break;
             }
+
+            if (formItem != null) {
+                formItem.setRequired(!modelNode.get(NILLABLE).asBoolean(true));
+                if (formItem.supportsExpressions()) {
+                    formItem.setExpressionAllowed(modelNode.get(EXPRESSION_ALLOWED).asBoolean(false));
+                }
+            }
         }
+
         return formItem;
     }
 }",2016-01-04T11:27:03Z,101
"@@ -34,19 +34,25 @@
 import org.jboss.hal.core.mbui.LabelBuilder;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.ModelNodeHelper;
+import org.jboss.hal.dmr.ModelType;
 import org.jboss.hal.dmr.Property;
 import org.jboss.hal.meta.description.ResourceDescription;
 import org.jboss.hal.meta.security.SecurityContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.math.BigDecimal;
+import java.math.BigInteger;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelType.BIG_DECIMAL;
+import static org.jboss.hal.dmr.ModelType.BIG_INTEGER;
+import static org.jboss.hal.dmr.ModelType.INT;
 
 /**
  * @author Harald Pehl
@@ -68,9 +74,9 @@ public static class Builder<T extends ModelNode> {
         boolean unsorted;
         boolean includeRuntime;
         boolean hideButtons;
-        SaveCallback saveCallback;
-        CancelCallback cancelCallback;
-        ResetCallback resetCallback;
+        SaveCallback<T> saveCallback;
+        CancelCallback<T> cancelCallback;
+        ResetCallback<T> resetCallback;
 
 
         // ------------------------------------------------------ configure required and optional settings
@@ -139,17 +145,17 @@ public Builder<T> customFormItem(final String attribute, final FormItemProvider
             return this;
         }
 
-        public Builder<T> onSave(final SaveCallback saveCallback) {
+        public Builder<T> onSave(final SaveCallback<T> saveCallback) {
             this.saveCallback = saveCallback;
             return this;
         }
 
-        public Builder<T> onCancel(final CancelCallback cancelCallback) {
+        public Builder<T> onCancel(final CancelCallback<T> cancelCallback) {
             this.cancelCallback = cancelCallback;
             return this;
         }
 
-        public Builder<T> onReset(final ResetCallback resetCallback) {
+        public Builder<T> onReset(final ResetCallback<T> resetCallback) {
             this.resetCallback = resetCallback;
             return this;
         }
@@ -212,12 +218,14 @@ private String formId() {
 
     private static final Logger logger = LoggerFactory.getLogger(ModelNodeForm.class);
 
+    private final ResourceDescription resourceDescription;
     private final FormItemProvider defaultFormItemProvider;
     private final Map<String, SaveOperationStep> saveOperations;
 
     private ModelNodeForm(final Builder<T> builder) {
         super(builder.id, builder.stateMachine(), builder.securityContext);
 
+        this.resourceDescription = builder.resourceDescription;
         this.defaultFormItemProvider = new DefaultFormItemProvider();
         this.saveOperations = builder.saveOperations;
         this.saveCallback = builder.saveCallback;
@@ -252,4 +260,73 @@ private ModelNodeForm(final Builder<T> builder) {
             }
         }
     }
+
+    @Override
+    public void persistModel() {
+        T model = getModel();
+
+        for (FormItem formItem : getFormItems()) {
+            String name = formItem.getName();
+            ModelNode attribute = model.get(name);
+
+            if (formItem.isUndefined()) {
+                attribute.set(ModelType.UNDEFINED);
+
+            } else if (formItem.isModified()) {
+                ModelNode attributeDescription = resourceDescription.find(name);
+                if (attributeDescription == null) {
+                    //noinspection HardCodedStringLiteral
+                    logger.error(""{}: Unable to persist '{}': No attribute description found in\n{}"", formId(), name,
+                            resourceDescription);
+                    continue;
+                }
+                ModelType type = attributeDescription.get(TYPE).asType();
+                Object value = formItem.getValue();
+                switch (type) {
+                    case BOOLEAN:
+                        attribute.set((Boolean) value);
+                        break;
+
+                    case BIG_INTEGER:
+                    case INT:
+                    case LONG:
+                        Long longValue = (Long) value;
+                        if (type == BIG_INTEGER) {
+                            attribute.set(BigInteger.valueOf(longValue));
+                        } else if (type == INT) {
+                            attribute.set(longValue.intValue());
+                        } else {
+                            attribute.set(longValue);
+                        }
+                        break;
+
+                    case BIG_DECIMAL:
+                    case DOUBLE:
+                        Double doubleValue = (Double) value;
+                        if (type == BIG_DECIMAL) {
+                            attribute.set(BigDecimal.valueOf(doubleValue));
+                        } else {
+                            attribute.set(doubleValue);
+                        }
+                        break;
+
+                    case STRING:
+                        attribute.set(String.valueOf(value));
+                        break;
+
+                    case BYTES:
+                    case EXPRESSION:
+                    case LIST:
+                    case OBJECT:
+                    case PROPERTY:
+                    case TYPE:
+                    case UNDEFINED:
+                        //noinspection HardCodedStringLiteral
+                        logger.warn(""{}: persisting form field '{}' to type '{}' not yet implemented"", formId(), name,
+                                type);
+                        break;
+                }
+            }
+        }
+    }
 }",2016-01-04T11:27:03Z,60
"@@ -61,6 +61,7 @@ public interface ModelDescriptionConstants {
     String DOMAIN_RESULTS = ""domain-results"";
     String EXCEPTIONS = ""exceptions"";
     String EXECUTE = ""execute"";
+    String EXPRESSION_ALLOWED = ""expression-allowed"";
     String EXTENSION = ""extension"";
     String FAILED = ""failed"";
     String FAILURE_DESCRIPTION = ""failure-description"";",2016-01-04T11:27:03Z,109
"@@ -24,6 +24,7 @@
 import com.google.common.base.Splitter;
 import com.google.common.base.Strings;
 import com.google.common.collect.Iterables;
+import com.google.inject.Provider;
 
 /**
  * Static helper methods for dealing with {@link ModelNode}s.
@@ -63,4 +64,16 @@ public static ModelNode failSafeGet(final ModelNode modelNode, final String path
 
         return undefined;
     }
+
+    public static <T> T getOrDefault(final ModelNode modelNode, Provider<T> provider, T defaultValue) {
+        T result = defaultValue;
+        if (modelNode != null) {
+            try {
+                result = provider.get();
+            } catch (Throwable t) {
+                result = defaultValue;
+            }
+        }
+        return result;
+    }
 }",2016-01-04T11:27:03Z,110
"@@ -61,12 +61,34 @@ public List<Property> getAttributes() {
         return get(ATTRIBUTES).asPropertyList();
     }
 
+    public List<Property> getRequiredAttributes() {
+        if (hasAttributes()) {
+            Iterable<Property> required = Iterables.filter(getAttributes(),
+                    requestProperty -> requestProperty.getValue().hasDefined(NILLABLE) &&
+                            !requestProperty.getValue().get(NILLABLE).asBoolean());
+            return Lists.newArrayList(required);
+
+        } else {
+            return Collections.emptyList();
+        }
+    }
+
+    public List<Property> getRequestProperties() {
+        String path = OPERATIONS + ""."" + ADD + ""."" + REQUEST_PROPERTIES;
+        ModelNode requestProperties = ModelNodeHelper.failSafeGet(this, path);
+        if (requestProperties.isDefined()) {
+            return requestProperties.asPropertyList();
+        } else {
+            return Collections.emptyList();
+        }
+    }
+
     public List<Property> getRequiredRequestProperties() {
         String path = OPERATIONS + ""."" + ADD + ""."" + REQUEST_PROPERTIES;
         ModelNode requestProperties = ModelNodeHelper.failSafeGet(this, path);
 
         if (requestProperties.isDefined()) {
-            Iterable<Property> required = Iterables.filter(requestProperties.asPropertyList(),
+            Iterable<Property> required = Iterables.filter(getRequestProperties(),
                     requestProperty -> requestProperty.getValue().hasDefined(REQUIRED) &&
                             requestProperty.getValue().get(REQUIRED).asBoolean());
             return Lists.newArrayList(required);
@@ -76,15 +98,13 @@ public List<Property> getRequiredRequestProperties() {
         }
     }
 
-    public List<Property> getRequiredAttributes() {
-        if (hasAttributes()) {
-            Iterable<Property> required = Iterables.filter(get(ATTRIBUTES).asPropertyList(),
-                    requestProperty -> requestProperty.getValue().hasDefined(NILLABLE) &&
-                            !requestProperty.getValue().get(NILLABLE).asBoolean());
-            return Lists.newArrayList(required);
-
-        } else {
-            return Collections.emptyList();
+    public ModelNode find(String name) {
+        List<Property> properties = hasAttributes() ? getAttributes() : getRequestProperties();
+        for (Property property : properties) {
+            if (name.equals(property.getName())) {
+                return property.getValue();
+            }
         }
+        return null;
     }
 }",2016-01-04T11:27:03Z,24
"@@ -30,6 +30,7 @@ public interface Names {
 
     String CONFIGURATION = ""Configuration"";
     String DEPLOYMENTS = ""Deployments"";
+    String DESELECT = ""deselect"";
     String FAILURE = ""failure"";
     String GET = ""GET"";
     String HOST = ""host"";
@@ -41,8 +42,10 @@ public interface Names {
     String PORT = ""port"";
     String RESTRICTED = ""restricted"";
     String ROLE = ""role"";
+    String ROW = ""row"";
     String RUNTIME = ""Runtime"";
     String SCHEME = ""scheme"";
+    String SELECT = ""select"";
     String SELECTED = ""selected"";
     String TOGGLE = ""toggle"";
     String TOOLTIP = ""tooltip"";",2016-01-04T11:27:03Z,112
"@@ -267,11 +267,11 @@ private void showWizard(List<DataSource> dataSources, List<JdbcDriver> drivers,
                         case DRIVER:
                             previous = NAMES;
                             break;
-                        case PROPERTIES:
+                        case XA_PROPERTIES:
                             previous = DRIVER;
                             break;
                         case CONNECTION:
-                            previous = context.isXa() ? PROPERTIES : DRIVER;
+                            previous = context.isXa() ? XA_PROPERTIES : DRIVER;
                             break;
                         case REVIEW:
                             previous = CONNECTION;
@@ -289,9 +289,9 @@ private void showWizard(List<DataSource> dataSources, List<JdbcDriver> drivers,
                             next = DRIVER;
                             break;
                         case DRIVER:
-                            next = context.isXa() ? PROPERTIES : CONNECTION;
+                            next = context.isXa() ? XA_PROPERTIES : CONNECTION;
                             break;
-                        case PROPERTIES:
+                        case XA_PROPERTIES:
                             next = CONNECTION;
                             break;
                         case CONNECTION:
@@ -332,7 +332,7 @@ private void showWizard(List<DataSource> dataSources, List<JdbcDriver> drivers,
         builder.addStep(NAMES, new NamesStep(dataSources, dataSourceMetadata, resources));
         builder.addStep(DRIVER, new DriverStep(drivers, driverMetadata, resources));
         if (xa) {
-            builder.addStep(PROPERTIES, new PropertiesStep(resources));
+            builder.addStep(XA_PROPERTIES, new PropertiesStep(resources));
         }
         builder.addStep(CONNECTION, new ConnectionStep(dataSourceMetadata, resources, xa));
         builder.addStep(REVIEW, new ReviewStep(dataSourceMetadata, resources, xa));",2016-12-01T12:41:25Z,80
"@@ -19,5 +19,5 @@
  * @author Harald Pehl
  */
 public enum State {
-    CHOOSE_TEMPLATE, NAMES, DRIVER, PROPERTIES, CONNECTION, REVIEW
+    CHOOSE_TEMPLATE, NAMES, DRIVER, XA_PROPERTIES, CONNECTION, REVIEW
 }",2016-12-01T12:41:25Z,149
"@@ -24,12 +24,11 @@
 import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.ballroom.form.FormItem;
 import org.jboss.hal.ballroom.form.PropertiesItem;
-import org.jboss.hal.ballroom.table.Api.RefreshMode;
-import org.jboss.hal.ballroom.table.DataTable;
 import org.jboss.hal.core.mbui.MbuiContext;
 import org.jboss.hal.core.mbui.MbuiViewImpl;
 import org.jboss.hal.core.mbui.form.FailSafeForm;
 import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.core.mbui.table.NamedNodeTable;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Property;
 import org.jboss.hal.dmr.model.NamedNode;
@@ -67,14 +66,14 @@ public static RemotingView create(final MbuiContext mbuiContext) {
     @MbuiElement(""remoting-vertical-navigation"") VerticalNavigation navigation;
     @MbuiElement(""remoting-endpoint-configuration"") Form<ModelNode> endpointConfigurationForm;
 
-    @MbuiElement(""remoting-connector-table"") DataTable<NamedNode> connectorTable;
-    @MbuiElement(""remoting-http-connector-table"") DataTable<NamedNode> httpConnectorTable;
+    @MbuiElement(""remoting-connector-table"") NamedNodeTable<NamedNode> connectorTable;
+    @MbuiElement(""remoting-http-connector-table"") NamedNodeTable<NamedNode> httpConnectorTable;
 
-    @MbuiElement(""remoting-local-outbound-table"") DataTable<NamedNode> localOutboundTable;
+    @MbuiElement(""remoting-local-outbound-table"") NamedNodeTable<NamedNode> localOutboundTable;
     @MbuiElement(""remoting-local-outbound-form"") Form<NamedNode> localOutboundForm;
-    @MbuiElement(""remoting-outbound-table"") DataTable<NamedNode> outboundTable;
+    @MbuiElement(""remoting-outbound-table"") NamedNodeTable<NamedNode> outboundTable;
     @MbuiElement(""remoting-outbound-form"") Form<NamedNode> outboundForm;
-    @MbuiElement(""remoting-remote-outbound-table"") DataTable<NamedNode> remoteOutboundTable;
+    @MbuiElement(""remoting-remote-outbound-table"") NamedNodeTable<NamedNode> remoteOutboundTable;
     @MbuiElement(""remoting-remote-outbound-form"") Form<NamedNode> remoteOutboundForm;
 
     private Form<NamedNode> connectorForm;
@@ -94,7 +93,7 @@ void init() {
         // remote connector
         Metadata connectorMetadata = mbuiContext.metadataRegistry().lookup(CONNECTOR_TEMPLATE);
         connectorForm = new ModelNodeForm.Builder<NamedNode>(Ids.REMOTING_CONNECTOR_FORM, connectorMetadata)
-                .unboundFormItem(new PropertiesItem(PROPERTY, mbuiContext.resources().constants().properties()), 1)
+                .unboundFormItem(new PropertiesItem(PROPERTY), 1)
                 .onSave((form, changedValues) -> presenter.saveConnector(form, changedValues))
                 .build();
         registerAttachable(connectorForm);
@@ -103,7 +102,7 @@ void init() {
         Metadata connectorSecurityMetadata = mbuiContext.metadataRegistry().lookup(CONNECTOR_SECURITY_TEMPLATE);
         Form<ModelNode> csf = new ModelNodeForm.Builder<>(Ids.REMOTING_CONNECTOR_SECURITY_FORM,
                 connectorSecurityMetadata)
-                .unboundFormItem(new PropertiesItem(PROPERTY, mbuiContext.resources().constants().properties()), 2)
+                .unboundFormItem(new PropertiesItem(PROPERTY), 2)
                 .onSave((form, changedValues) -> presenter.saveConnectorSecurity(form, changedValues))
                 .build();
         connectorSecurityForm = new FailSafeForm<>(mbuiContext.dispatcher(),
@@ -143,7 +142,7 @@ void init() {
         Metadata httpConnectorMetadata = mbuiContext.metadataRegistry().lookup(HTTP_CONNECTOR_TEMPLATE);
         httpConnectorForm = new ModelNodeForm.Builder<NamedNode>(Ids.REMOTING_HTTP_CONNECTOR_FORM,
                 httpConnectorMetadata)
-                .unboundFormItem(new PropertiesItem(PROPERTY, mbuiContext.resources().constants().properties()), 2)
+                .unboundFormItem(new PropertiesItem(PROPERTY), 2)
                 .onSave((form, changedValues) -> presenter.saveHttpConnector(form, changedValues))
                 .build();
         registerAttachable(httpConnectorForm);
@@ -153,7 +152,7 @@ void init() {
                 .lookup(HTTP_CONNECTOR_SECURITY_TEMPLATE);
         Form<ModelNode> hcsf = new ModelNodeForm.Builder<>(Ids.REMOTING_HTTP_CONNECTOR_SECURITY_FORM,
                 httpConnectorSecurityMetadata)
-                .unboundFormItem(new PropertiesItem(PROPERTY, mbuiContext.resources().constants().properties()), 2)
+                .unboundFormItem(new PropertiesItem(PROPERTY), 2)
                 .onSave((form, changedValues) -> presenter.saveHttpConnectorSecurity(form, changedValues))
                 .build();
         httpConnectorSecurityForm = new FailSafeForm<>(mbuiContext.dispatcher(),
@@ -212,46 +211,31 @@ public void attach() {
     public void update(final ModelNode payload) {
         endpointConfigurationForm.view(failSafeGet(payload, ""configuration/endpoint"")); //NON-NLS
 
-        connectorTable.api()
-                .clear()
-                .add(asNamedNodes(failSafePropertyList(payload, CONNECTOR_TEMPLATE.lastKey())))
-                .refresh(RefreshMode.RESET);
         connectorForm.clear();
         connectorForm.getFormItem(PROPERTY).clearValue();
         connectorSecurityForm.clear();
         connectorSecurityForm.getFormItem(PROPERTY).clearValue();
         connectorSecurityPolicyForm.clear();
+        connectorTable.update(asNamedNodes(failSafePropertyList(payload, CONNECTOR_TEMPLATE.lastKey())));
 
-        httpConnectorTable.api()
-                .clear()
-                .add(asNamedNodes(failSafePropertyList(payload, HTTP_CONNECTOR_TEMPLATE.lastKey())))
-                .refresh(RefreshMode.RESET);
         httpConnectorForm.clear();
         httpConnectorForm.getFormItem(PROPERTY).clearValue();
         httpConnectorSecurityForm.clear();
         httpConnectorSecurityForm.getFormItem(PROPERTY).clearValue();
         httpConnectorSecurityPolicyForm.clear();
+        httpConnectorTable.update(asNamedNodes(failSafePropertyList(payload, HTTP_CONNECTOR_TEMPLATE.lastKey())));
 
-        localOutboundTable.api()
-                .clear()
-                .add(asNamedNodes(failSafePropertyList(payload, LOCAL_OUTBOUND_TEMPLATE.lastKey())))
-                .refresh(RefreshMode.RESET);
         localOutboundForm.clear();
         localOutboundForm.getFormItem(PROPERTY).clearValue();
+        localOutboundTable.update(asNamedNodes(failSafePropertyList(payload, LOCAL_OUTBOUND_TEMPLATE.lastKey())));
 
-        outboundTable.api()
-                .clear()
-                .add(asNamedNodes(failSafePropertyList(payload, OUTBOUND_TEMPLATE.lastKey())))
-                .refresh(RefreshMode.RESET);
         outboundForm.clear();
         outboundForm.getFormItem(PROPERTY).clearValue();
+        outboundTable.update(asNamedNodes(failSafePropertyList(payload, OUTBOUND_TEMPLATE.lastKey())));
 
-        remoteOutboundTable.api()
-                .clear()
-                .add(asNamedNodes(failSafePropertyList(payload, REMOTE_OUTBOUND_TEMPLATE.lastKey())))
-                .refresh(RefreshMode.RESET);
         remoteOutboundForm.clear();
         remoteOutboundForm.getFormItem(PROPERTY).clearValue();
+        remoteOutboundTable.update(asNamedNodes(failSafePropertyList(payload, REMOTE_OUTBOUND_TEMPLATE.lastKey())));
     }
 
     @Override",2016-12-01T12:41:25Z,325
"@@ -15,7 +15,6 @@
  */
 package org.jboss.hal.client.configuration.subsystem.resourceadapter;
 
-import org.jboss.hal.ballroom.LabelBuilder;
 import org.jboss.hal.ballroom.form.CreationContext;
 import org.jboss.hal.ballroom.form.PropertiesItem;
 
@@ -25,7 +24,7 @@
 class MappingsItem extends PropertiesItem {
 
     MappingsItem(final String name) {
-        super(name, new LabelBuilder().label(name));
+        super(name);
     }
 
     @Override",2016-12-01T12:41:25Z,326
"@@ -18,6 +18,7 @@
 import java.util.List;
 import java.util.Map;
 
+import com.google.gwt.safehtml.shared.SafeHtmlUtils;
 import elemental.client.Browser;
 import elemental.dom.Element;
 import org.jboss.gwt.elemento.core.Elements;
@@ -32,6 +33,7 @@
 import org.jboss.hal.core.mbui.form.ModelNodeForm;
 import org.jboss.hal.core.mbui.table.ModelNodeTable;
 import org.jboss.hal.core.mbui.table.NamedNodeTable;
+import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Property;
 import org.jboss.hal.dmr.model.NamedNode;
 import org.jboss.hal.dmr.model.ResourceAddress;
@@ -44,6 +46,7 @@
 import static org.jboss.hal.client.configuration.subsystem.webservice.AddressTemplates.CLIENT_CONFIG_TEMPLATE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafeGet;
 import static org.jboss.hal.dmr.ModelNodeHelper.failSafePropertyList;
 import static org.jboss.hal.resources.CSS.columnAction;
 import static org.jboss.hal.resources.Ids.ADD_SUFFIX;
@@ -112,9 +115,10 @@ class ConfigElement implements IsElement, Attachable {
                 .build();
         configTable = new NamedNodeTable<>(Ids.build(baseId, TABLE_SUFFIX), configOptions);
 
-        configProperties = new PropertiesItem(PROPERTY, mbuiContext.resources().constants().properties());
+        ModelNode propertyHelp = failSafeGet(configMetadata.getDescription(), ""children/property/description"");
+        configProperties = new PropertiesItem(PROPERTY);
         configForm = new ModelNodeForm.Builder<NamedNode>(Ids.build(baseId, FORM_SUFFIX), configMetadata)
-                .unboundFormItem(configProperties)
+                .unboundFormItem(configProperties, 0, SafeHtmlUtils.fromString(propertyHelp.asString()))
                 .onSave((form, changedValues) -> mbuiContext.po()
                         .saveWithProperties(Names.CLIENT_CONFIG, form.getModel().getName(), CLIENT_CONFIG_TEMPLATE,
                                 form, changedValues, PROPERTY, presenter::reload))",2016-12-01T12:41:25Z,327
"@@ -120,8 +120,7 @@
                     <form id=""remoting-local-outbound-form"" title=""Local Outbound""
                           on-save=""{{presenter.saveLocalOutbound(form, changedValues)}}"">
                         <attributes>
-                            <attribute
-                                    form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""property"", mbuiContext.resources().constants().properties())}}'/>
+                            <attribute form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""property"")}}'/>
                             <attribute name=""outbound-socket-binding-ref"">
                                 <suggest-handler>
                                     <templates>
@@ -152,8 +151,7 @@
                     <form id=""remoting-outbound-form"" title=""Outbound""
                           on-save=""{{presenter.saveOutbound(form, changedValues)}}"">
                         <attributes>
-                            <attribute
-                                    form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""property"", mbuiContext.resources().constants().properties())}}'/>
+                            <attribute form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""property"")}}'/>
                             <attribute name=""uri""/>
                         </attributes>
                     </form>
@@ -197,8 +195,7 @@
                                     </templates>
                                 </suggest-handler>
                             </attribute>
-                            <attribute
-                                    form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""property"", mbuiContext.resources().constants().properties())}}'/>
+                            <attribute form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""property"")}}'/>
                             <attribute name=""protocol""/>
                             <attribute name=""security-realm""/>
                             <attribute name=""username""/>",2016-12-01T12:41:25Z,328
"@@ -31,7 +31,7 @@
                             <attribute name=""bootstrap-context""/>
                             <attribute name=""module""/>
                             <attribute
-                                    form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""config-properties"", mbuiContext.resources().constants().properties())}}'/>
+                                    form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""config-properties"")}}'/>
                             <attribute name=""statistics-enabled""/>
                             <attribute name=""transaction-support""/>
                         </group>
@@ -79,7 +79,7 @@
                             <attribute name=""connectable""/>
                             <attribute name=""enabled""/>
                             <attribute
-                                    form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""config-properties"", mbuiContext.resources().constants().properties())}}'/>
+                                    form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""config-properties"")}}'/>
                         </group>
                         <group id=""resource-adapter-connection-definition-pool""
                                title=""{{mbuiContext.resources().constants().pool()}}"">
@@ -129,7 +129,7 @@
                         <attribute name=""enabled""/>
                         <attribute name=""jndi-name""/>
                         <attribute
-                                form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""config-properties"", mbuiContext.resources().constants().properties())}}'/>
+                                form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""config-properties"")}}'/>
                         <attribute name=""use-java-context""/>
                     </attributes>
                 </form>",2016-12-01T12:41:25Z,329
"@@ -67,7 +67,7 @@ final class Mbui_UnboundFormItemView extends UnboundFormItemView {
 
         form = new ModelNodeForm.Builder<org.jboss.hal.dmr.ModelNode>(""form"", metadata0)
                 .include(""foo"")
-                .unboundFormItem(new org.jboss.hal.ballroom.form.PropertiesItem(""bar"", new org.jboss.hal.ballroom.LabelBuilder().label(""bar"")), 1)
+                .unboundFormItem(new org.jboss.hal.ballroom.form.PropertiesItem(""bar""), 1)
                 .unsorted()
                 .onSave((form, changedValues) -> saveSingletonForm(""Form"", metadata0Template.resolve(mbuiContext.statementContext()), changedValues))
                 .build();",2016-12-01T12:41:25Z,330
"@@ -21,7 +21,7 @@
         <form id=""form"" title=""Form"" auto-save=""true"">
             <attributes>
                 <attribute name=""foo""/>
-                <attribute form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""bar"", new org.jboss.hal.ballroom.LabelBuilder().label(""bar""))}}'/>
+                <attribute form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""bar"")}}'/>
             </attributes>
         </form>
     </metadata>",2016-12-01T12:41:25Z,331
"@@ -28,6 +28,7 @@
 import elemental.client.Browser;
 import elemental.dom.Element;
 import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.hal.ballroom.LabelBuilder;
 import org.jboss.hal.ballroom.form.TagsManager.Bridge;
 import org.jboss.hal.resources.CSS;
 import org.jboss.hal.resources.Ids;
@@ -48,6 +49,10 @@ public class PropertiesItem extends AbstractFormItem<Map<String, String>> {
     private PropertiesElement propertiesElement;
     private Element tagsContainer;
 
+    public PropertiesItem(final String name) {
+        super(name, new LabelBuilder().label(name), null, EMPTY_CONTEXT);
+    }
+
     public PropertiesItem(final String name, final String label) {
         super(name, label, null, EMPTY_CONTEXT);
     }",2016-12-01T12:41:25Z,196
"@@ -297,15 +297,13 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String processors();
     String productName();
     String productVersion();
-    String properties();
     String providedBy();
 
     String refresh();
     String releaseName();
     String releaseVersion();
     String reload();
     String remove();
-    String removeResource();
     String rename();
     String replace();
     String replaceContent();",2016-12-01T12:41:25Z,100
"@@ -243,14 +243,12 @@ preview=Preview
 processors=Processors
 productName=Product Name
 productVersion=Product Version
-properties=Properties
 providedBy=Provided by
 refresh=Refresh
 releaseName=Release Name
 releaseVersion=Release Version
 reload=Reload
 remove=Remove
-removeResource=Remove Resource
 rename=Rename
 replace=Replace
 replaceContent=Replace Content",2016-12-01T12:41:25Z,100
"@@ -348,9 +348,6 @@ static class UploadOrReplace implements Function<FunctionContext> {
             this.enabled = enabled;
         }
 
-        static java.util.logging.Logger _log = java.util.logging.Logger.getLogger(""org.jboss"");
-
-
         @Override
         public void execute(final Control<FunctionContext> control) {
             boolean replace;
@@ -376,7 +373,6 @@ public void execute(final Control<FunctionContext> control) {
             }
             Operation operation = builder.build();
             operation.get(CONTENT).add().get(""input-stream-index"").set(0); //NON-NLS
-            _log.info(""deploy operation: "" + operation);
 
             dispatcher.upload(file, operation,
                     result -> {",2017-08-09T18:57:21Z,65
"@@ -94,8 +94,7 @@ public void execute(final Control<FunctionContext> control) {
                     .param(INCLUDE_RUNTIME, true)
                     .build();
 
-            Operation opPatches = new Operation.Builder(patchingAddress,
-                    READ_RESOURCE_OPERATION)
+            Operation opPatches = new Operation.Builder(patchingAddress, READ_RESOURCE_OPERATION)
                     .param(INCLUDE_RUNTIME, true)
                     .param(RECURSIVE, true)
                     .build();
@@ -254,7 +253,7 @@ public HTMLElement getIcon() {
 
             @Override
             public String nextColumn() {
-                return Ids.PATCHES_HOST;
+                return Ids.PATCHING;
             }
 
             @Override
@@ -283,8 +282,7 @@ private static List<NamedNode> orderedHostWithDomainControllerAsFirstElement(Lis
                 .sorted(comparing(NamedNode::getName))
                 .collect(toList());
         NamedNode domainController = null;
-        for (Iterator<NamedNode> iterator = hosts.iterator();
-                iterator.hasNext() && domainController == null; ) {
+        for (Iterator<NamedNode> iterator = hosts.iterator(); iterator.hasNext() && domainController == null; ) {
             NamedNode host = iterator.next();
             if (host.get(MASTER).asBoolean()) {
                 domainController = host;",2017-08-09T18:57:21Z,205
"@@ -72,11 +72,12 @@ class HostPatchesPreview extends RuntimePreview<NamedNode> {
         attributes = new PreviewAttributes<>(host)
                 .append(model -> {
                     String latest = model.get(CORE_SERVICE_PATCHING).get(""cumulative-patch-id"").asString();
-                    // when there is no patch installed, the above attribute returns as ""base""
+                    // if there is no patch installed, the above attribute returns as ""base""
+                    // so, lets display an informative message as there is no patch installed.
                     if (""base"".equals(latest)) {
-                        latest = ""No patch installed for this host."";
+                        latest = resources.messages().noPatchesForHost();
                     }
-                    return new PreviewAttributes.PreviewAttribute(""Latest applied patch"", latest);
+                    return new PreviewAttributes.PreviewAttribute(resources.messages().patchLatestInstalledLabel(), latest);
                 });
         previewBuilder().addAll(attributes);
         update(host);",2017-08-09T18:57:21Z,206
"@@ -16,11 +16,12 @@
 package org.jboss.hal.client.patching;
 
 import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.List;
-import java.util.logging.Logger;
 import javax.inject.Inject;
 import javax.inject.Provider;
 
+import com.google.common.base.Joiner;
 import com.google.gwt.safehtml.shared.SafeHtml;
 import com.google.gwt.safehtml.shared.SafeHtmlUtils;
 import com.google.web.bindery.event.shared.EventBus;
@@ -48,15 +49,18 @@
 import org.jboss.hal.core.mbui.form.ModelNodeForm;
 import org.jboss.hal.core.runtime.host.Host;
 import org.jboss.hal.core.runtime.host.HostActions;
+import org.jboss.hal.core.runtime.server.Server;
+import org.jboss.hal.core.runtime.server.ServerActions;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Operation;
 import org.jboss.hal.dmr.Property;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.Metadata;
-import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.meta.processing.MetadataProcessor;
+import org.jboss.hal.meta.processing.SuccessfulMetadataCallback;
 import org.jboss.hal.meta.security.Constraint;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Messages;
@@ -71,46 +75,103 @@
 import static org.jboss.hal.client.patching.wizard.PatchState.UPLOAD;
 import static org.jboss.hal.core.finder.FinderColumn.RefreshMode.RESTORE_SELECTION;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.meta.StatementContext.Tuple.SELECTED_HOST;
 import static org.jboss.hal.resources.Ids.ADD_SUFFIX;
 import static org.jboss.hal.resources.Ids.PATCHES_AGEOUT;
 
 /**
  * @author Claudio Miranda
  */
-@Column(Ids.PATCHES_HOST)
+@Column(Ids.PATCHING)
 public class PatchesColumn extends FinderColumn<ModelNode> {
 
-    static final String SELECTED_PATCHING_ADDRESS = ""/{selected.host}/core-service=patching"";
-    static final AddressTemplate SELECTED_PATCHING_TEMPLATE = AddressTemplate.of(SELECTED_PATCHING_ADDRESS);
-    static Logger _log = Logger.getLogger(""org.jboss"");
+    static class UploadPatch implements Function<FunctionContext> {
+
+        private final Dispatcher dispatcher;
+        private EventBus eventBus;
+        private StatementContext statementContext;
+        private Resources resources;
+        private PatchContext patchContext;
+
+        UploadPatch(final EventBus eventBus, final StatementContext statementContext, final Dispatcher dispatcher,
+                final Resources resources, final PatchContext patchContext) {
+            this.eventBus = eventBus;
+            this.statementContext = statementContext;
+            this.dispatcher = dispatcher;
+            this.resources = resources;
+            this.patchContext = patchContext;
+        }
+
+        @Override
+        public void execute(final Control<FunctionContext> control) {
+            ResourceAddress address = PATCHING_TEMPLATE.resolve(statementContext);
+            Operation.Builder opBuilder = new Operation.Builder(address, PATCH)
+                    .param(OVERRIDE_ALL, patchContext.overrideAll)
+                    .param(OVERRIDE_MODULE, patchContext.overrideModules);
+            if (patchContext.override != null) {
+                opBuilder.param(OVERRIDE, patchContext.override.toArray(new String[patchContext.override.size()]));
+            }
+            if (patchContext.preserve != null) {
+                opBuilder.param(PRESERVE, patchContext.preserve.toArray(new String[patchContext.preserve.size()]));
+            }
+
+            Operation operation = opBuilder.build();
+
+            operation.get(CONTENT).add().get(""input-stream-index"").set(0); //NON-NLS
+
+            dispatcher.upload(patchContext.file, operation,
+                    result -> {
+                        MessageEvent.fire(eventBus,
+                                Message.success(resources.messages().patchSucessfullyApplied(patchContext.file.name)));
+                        control.proceed();
+                    },
+
+                    (op, failure) -> {
+                        MessageEvent.fire(eventBus,
+                                Message.error(resources.messages().patchAddError(patchContext.file.name, failure)));
+                        control.proceed();
+                    },
+
+                    (op, exception) -> {
+                        MessageEvent.fire(eventBus, Message.error(
+                                resources.messages().patchAddError(patchContext.file.name, exception.getMessage())));
+                        control.proceed();
+                    });
+        }
+    }
+
+
+    static final AddressTemplate PATCHING_TEMPLATE = AddressTemplate.of(SELECTED_HOST, ""core-service=patching"");
 
     private EventBus eventBus;
     private Dispatcher dispatcher;
-    private MetadataRegistry metadataRegistry;
     private StatementContext statementContext;
     private Environment environment;
     private HostActions hostActions;
+    private MetadataProcessor metadataProcessor;
+    private ServerActions serverActions;
     private Provider<Progress> progress;
     private Resources resources;
 
     @Inject
     public PatchesColumn(final Finder finder,
             final EventBus eventBus,
             final Dispatcher dispatcher,
-            final MetadataRegistry metadataRegistry,
             final StatementContext statementContext,
             final Environment environment,
             final HostActions hostActions,
+            final MetadataProcessor metadataProcessor,
+            final ServerActions serverActions,
             @Footer final Provider<Progress> progress,
             final ColumnActionFactory columnActionFactory,
             final Resources resources) {
 
-        super(new Builder<ModelNode>(finder, Ids.PATCHES_HOST, Names.PATCHES)
+        super(new Builder<ModelNode>(finder, Ids.PATCHING, Names.PATCHES)
 
                 .columnAction(columnActionFactory.refresh(Ids.PATCHES_REFRESH))
 
                 .itemsProvider((context, callback) -> {
-                    ResourceAddress address = SELECTED_PATCHING_TEMPLATE.resolve(statementContext);
+                    ResourceAddress address = PATCHING_TEMPLATE.resolve(statementContext);
                     Operation operation = new Operation.Builder(address, SHOW_HISTORY_OPERATION).build();
                     dispatcher.execute(operation, result -> callback.onSuccess(result.asList()));
                 })
@@ -122,10 +183,11 @@ public PatchesColumn(final Finder finder,
         );
         this.eventBus = eventBus;
         this.dispatcher = dispatcher;
-        this.metadataRegistry = metadataRegistry;
         this.statementContext = statementContext;
         this.environment = environment;
         this.hostActions = hostActions;
+        this.metadataProcessor = metadataProcessor;
+        this.serverActions = serverActions;
         this.progress = progress;
         this.resources = resources;
 
@@ -147,7 +209,7 @@ public List<ItemAction<ModelNode>> actions() {
                 actions.add(new ItemAction.Builder<ModelNode>()
                         .title(resources.constants().rollback())
                         .handler(item1 -> rollback(item1.get(PATCH_ID).asString()))
-                        .constraint(Constraint.executable(SELECTED_PATCHING_TEMPLATE, ROLLBACK_OPERATION))
+                        .constraint(Constraint.executable(PATCHING_TEMPLATE, ROLLBACK_OPERATION))
                         .build());
 
                 return actions;
@@ -171,202 +233,236 @@ public List<ItemAction<ModelNode>> actions() {
 
     private void rollback(final String patchId) {
 
-        ModelNode model = new ModelNode();
-        model.get(PATCH_ID).set(patchId);
-        ResourceAddress address = SELECTED_PATCHING_TEMPLATE.resolve(statementContext);
-        Metadata metadata = metadataRegistry.lookup(SELECTED_PATCHING_TEMPLATE);
-        Metadata operationMetadata = metadata.forOperation(ROLLBACK_OPERATION);
-        String id = Ids
-                .build(Ids.HOST, statementContext.selectedHost(), CORE_SERVICE, PATCHING, patchId, ROLLBACK_OPERATION);
-        Form<ModelNode> form = new ModelNodeForm.Builder<>(id, operationMetadata)
-                .unsorted()
-                .build();
-        form.getFormItem(PATCH_ID).setEnabled(false);
-        Dialog dialog = new Dialog.Builder(resources.constants().rollback())
-                .add(form.asElement())
-                .closeIcon(true)
-                .closeOnEsc(true)
-                .primary(resources.constants().rollback(), () -> {
-                    if (form.save()) {
-                        ModelNode payload = form.getModel();
-                        // reset-configuration is a required attribute, if the user doesn't set it, meaning it should be false
-                        // it will not be added into the payload, but we must forcibly set as false to satisfy the required=true metadata
-                        if (!payload.hasDefined(RESET_CONFIGURATION)) {
-                            payload.get(RESET_CONFIGURATION).set(false);
-                        }
-                        Operation operation = new Operation.Builder(address, ROLLBACK_OPERATION)
-                                .payload(payload)
-                                .build();
-                        dispatcher.execute(operation, result -> {
-                            MessageEvent.fire(eventBus,
-                                    Message.success(resources.messages().patchSucessfullyRemoved(patchId)));
-                            refresh(RESTORE_SELECTION);
-                        });
-                        return true;
-                    }
-                    return false;
-                })
-                .cancel()
-                .build();
-        dialog.registerAttachable(form);
-        dialog.show();
-        form.edit(model);
+        // check the host controller for restart-required
+        checkHostState(_result ->
+                // check the servers, advise to stop them before apply/rollback a patch
+                checkServersState(_result1 -> {
+
+                    metadataProcessor.lookup(PATCHING_TEMPLATE, progress.get(),
+                            new SuccessfulMetadataCallback(eventBus, resources) {
+
+                                @Override
+                                public void onMetadata(final Metadata metadata) {
+                                    ModelNode model = new ModelNode();
+                                    model.get(PATCH_ID).set(patchId);
+                                    ResourceAddress address = PATCHING_TEMPLATE.resolve(statementContext);
+                                    Metadata operationMetadata = metadata.forOperation(ROLLBACK_OPERATION);
+                                    String id = Ids.build(Ids.HOST, statementContext.selectedHost(), CORE_SERVICE, PATCHING, patchId, ROLLBACK_OPERATION);
+                                    Form<ModelNode> form = new ModelNodeForm.Builder<>(id, operationMetadata)
+                                            .unsorted()
+                                            .build();
+                                    form.getFormItem(PATCH_ID).setEnabled(false);
+                                    Dialog dialog = new Dialog.Builder(resources.constants().rollback())
+                                            .add(form.asElement())
+                                            .closeIcon(true)
+                                            .closeOnEsc(true)
+                                            .primary(resources.constants().rollback(), () -> {
+                                                if (form.save()) {
+                                                    ModelNode payload = form.getModel();
+                                                    // reset-configuration is a required attribute, if the user doesn't set it, meaning it should be false
+                                                    // it will not be added into the payload, but we must forcibly set as false to satisfy the required=true metadata
+                                                    if (!payload.hasDefined(RESET_CONFIGURATION)) {
+                                                        payload.get(RESET_CONFIGURATION).set(false);
+                                                    }
+                                                    Operation operation = new Operation.Builder(address, ROLLBACK_OPERATION)
+                                                            .payload(payload)
+                                                            .build();
+                                                    dispatcher.execute(operation, result2 -> {
+                                                        MessageEvent.fire(eventBus,
+                                                                Message.success(resources.messages()
+                                                                        .patchSucessfullyRemoved(patchId)));
+                                                        refresh(RESTORE_SELECTION);
+                                                    });
+                                                    return true;
+                                                }
+                                                return false;
+                                            })
+                                            .cancel()
+                                            .build();
+                                    dialog.registerAttachable(form);
+                                    dialog.show();
+                                    form.edit(model);
+                                }
+                            });
+                }));
     }
 
     private void ageoutHistory() {
 
-        ResourceAddress address = SELECTED_PATCHING_TEMPLATE.resolve(statementContext);
-        Metadata metadata = metadataRegistry.lookup(SELECTED_PATCHING_TEMPLATE);
-        Metadata operationMetadata = metadata.forOperation(AGEOUT_HISTORY_OPERATION);
-        Messages messages = resources.messages();
-        // prepend the ageout-history description to let user know the intended action.
-        SafeHtml message = messages.cleanPatchHistoryQuestion(operationMetadata.getDescription().getDescription());
-
-        DialogFactory.showConfirmation(messages.cleanPatchHistory(), message, () -> {
-            Operation operation = new Operation.Builder(address, AGEOUT_HISTORY_OPERATION).build();
-            dispatcher.execute(operation, result -> {
-                MessageEvent
-                        .fire(eventBus, Message.success(SafeHtmlUtils.fromString(messages.cleanPatchHistorySuccess())));
-                refresh(RESTORE_SELECTION);
-            });
 
-        });
+        metadataProcessor
+                .lookup(PATCHING_TEMPLATE, progress.get(), new SuccessfulMetadataCallback(eventBus, resources) {
+                    @Override
+                    public void onMetadata(final Metadata metadata) {
+                        ResourceAddress address = PATCHING_TEMPLATE.resolve(statementContext);
+                        Metadata operationMetadata = metadata.forOperation(AGEOUT_HISTORY_OPERATION);
+                        Messages messages = resources.messages();
+                        // prepend the ageout-history description to let user know the intended action.
+                        SafeHtml message = messages
+                                .cleanPatchHistoryQuestion(operationMetadata.getDescription().getDescription());
+
+                        DialogFactory.showConfirmation(messages.cleanPatchHistory(), message, () -> {
+                            Operation operation = new Operation.Builder(address, AGEOUT_HISTORY_OPERATION).build();
+                            dispatcher.execute(operation, result -> {
+                                MessageEvent
+                                        .fire(eventBus, Message.success(
+                                                SafeHtmlUtils.fromString(messages.cleanPatchHistorySuccess())));
+                                refresh(RESTORE_SELECTION);
+                            });
+                        });
+                    }
+                });
     }
 
     private void applyPatch() {
 
-        checkHostState(result -> {
-
-            Metadata metadata = metadataRegistry.lookup(SELECTED_PATCHING_TEMPLATE);
-            Metadata metadataOp = metadata.forOperation(PATCH);
-            Wizard<PatchContext, PatchState> wizard = new Wizard.Builder<PatchContext, PatchState>(
-                    resources.messages().addResourceTitle(Names.PATCH), new PatchContext())
-
-                    .addStep(UPLOAD, new PatchContentStep(resources))
-                    .addStep(NAMES, new PatchNamesStep(environment, metadataOp, resources))
-
-                    .onBack((context, currentState) -> currentState == NAMES ? UPLOAD : null)
-                    .onNext((context, currentState) -> currentState == UPLOAD ? NAMES : null)
-
-                    .stayOpenAfterFinish()
-                    .onFinish((wzd, context) -> {
-                        String name = context.file.name;
-                        wzd.showProgress(resources.constants().uploadInProgress(),
-                                resources.messages().uploadInProgress(name));
-
-                        Function[] functions = {
-                                new UploadPatch(eventBus, statementContext, environment, dispatcher, resources, context)
-                        };
-                        new Async<FunctionContext>(progress.get()).waterfall(new FunctionContext(),
-                                new Outcome<FunctionContext>() {
-                                    @Override
-                                    public void onFailure(final FunctionContext functionContext) {
-                                        wzd.showError(resources.constants().uploadError(),
-                                                resources.messages().uploadError(name), functionContext.getError());
-                                    }
-
-                                    @Override
-                                    public void onSuccess(final FunctionContext functionContext) {
-                                        refresh(Ids.content(name));
-                                        wzd.showSuccess(resources.constants().uploadSuccessful(),
-                                                resources.messages().uploadSuccessful(name),
-                                                resources.messages().view(Names.CONTENT),
-                                                cxt -> { /* nothing to do, content is already selected */ });
-                                    }
-                                }, functions);
-                    })
-                    .build();
-            wizard.show();
-        });
+        // check the host controller for restart-required
+        checkHostState(result ->
+            // check the servers, advise to stop them before apply/rollback a patch
+            checkServersState(result1 -> {
+
+                metadataProcessor.lookup(PATCHING_TEMPLATE, progress.get(),
+                    new SuccessfulMetadataCallback(eventBus, resources) {
+                        @Override
+                        public void onMetadata(final Metadata metadata) {
+                            Metadata metadataOp = metadata.forOperation(PATCH);
+                            final Messages messages = resources.messages();
+                            Wizard<PatchContext, PatchState> wizard = new Wizard.Builder<PatchContext, PatchState>(messages.addResourceTitle(Names.PATCH), new PatchContext())
+
+                                .addStep(UPLOAD, new PatchContentStep(resources))
+                                .addStep(NAMES, new PatchNamesStep(environment, metadataOp, resources))
+
+                                .onBack((context, currentState) -> currentState == NAMES ? UPLOAD : null)
+                                .onNext((context, currentState) -> currentState == UPLOAD ? NAMES : null)
+
+                                .stayOpenAfterFinish()
+                                .onFinish((wzd, context) -> {
+                                    String name = context.file.name;
+                                    wzd.showProgress(resources.constants().uploadInProgress(), messages.uploadInProgress(name));
+
+                                    Function[] functions = {
+                                            new UploadPatch(eventBus, statementContext, dispatcher, resources, context)
+                                    };
+                                    new Async<FunctionContext>(progress.get()).waterfall(new FunctionContext(),
+                                        new Outcome<FunctionContext>() {
+                                            @Override
+                                            public void onFailure(final FunctionContext functionContext) {
+                                                wzd.showError(resources.constants().uploadError(), messages.uploadError(name),functionContext.getError());
+                                            }
+
+                                            @Override
+                                            public void onSuccess(final FunctionContext functionContext) {
+                                                refresh(Ids.content(name));
+                                                wzd.showSuccess(resources.constants().uploadSuccessful(), messages.uploadSuccessful(name), messages.view(Names.CONTENT),
+                                                        cxt -> { /* nothing to do, content is already selected */ });
+                                            }
+                                        }, functions);
+                                })
+                                .build();
+                            wizard.show();
+                        }
+                    });
+
+            }));
     }
 
     /**
-     * Checks if the host is in restart mode, if yes then asks user to restart host, as it must be restarted before
+     * Checks if the host or server is in restart mode, if yes then asks user to restart host/server, as it must be restarted before
      * a patch can be installed or to call a rollback on a installed patch.
      *
      * @param callback
      */
     private void checkHostState(Dispatcher.SuccessCallback callback) {
 
-        ResourceAddress address = new ResourceAddress().add(HOST, statementContext.selectedHost());
-        Operation operation = new Operation.Builder(address, READ_RESOURCE_OPERATION)
-                .param(INCLUDE_RUNTIME, true)
-                .build();
+        Messages messages = resources.messages();
+        if (environment.isStandalone()) {
+            Operation operation = new Operation.Builder(ResourceAddress.root(), READ_RESOURCE_OPERATION)
+                    .param(INCLUDE_RUNTIME, true)
+                    .param(ATTRIBUTES_ONLY, true)
+                    .build();
 
-        dispatcher.execute(operation, result -> {
+            dispatcher.execute(operation, result -> {
+                Server.STANDALONE.addServerAttributes(result);
+                if (Server.STANDALONE.needsRestart()) {
+                    serverActions.restartStandalone(Server.STANDALONE, messages.patchRestartStandaloneQuestion());
+                } else {
+                    callback.onSuccess(null);
+                }
+            });
+        } else {
+            ResourceAddress address = new ResourceAddress().add(HOST, statementContext.selectedHost());
+            Operation operation = new Operation.Builder(address, READ_RESOURCE_OPERATION)
+                    .param(INCLUDE_RUNTIME, true)
+                    .param(ATTRIBUTES_ONLY, true)
+                    .build();
 
-            Property prop = new Property(statementContext.selectedHost(), result);
-            Host host = new Host(prop);
-            if (host.needsRestart()) {
-                SafeHtml question = host.isDomainController()
-                        ? resources.messages().patchRestartDomainControllerQuestion(host.getName())
-                        : resources.messages().patchRestartHostControllerQuestion(host.getName());
+            dispatcher.execute(operation, result -> {
 
-                hostActions.restart(host, question);
-            } else {
-                callback.onSuccess(null);
-            }
-        });
+                Property prop = new Property(statementContext.selectedHost(), result);
+                Host host = new Host(prop);
+                if (host.needsRestart()) {
+                    SafeHtml question = host.isDomainController()
+                            ? messages.patchRestartDomainControllerQuestion(host.getName())
+                            : messages.patchRestartHostControllerQuestion(host.getName());
+
+                    hostActions.restart(host, question);
+                } else {
+                    callback.onSuccess(null);
+                }
+            });
+        }
 
     }
 
     /**
+     * Checks if each servers of a host is stopped, if the server is started, asks the user to stop them.
+     * It is a good practice to apply/rollback a patch to a stopped server to prevent application and internal services
+     * from failing.
      *
+     * @param callback
      */
-    static class UploadPatch implements Function<FunctionContext> {
-
-        private EventBus eventBus;
-        private StatementContext statementContext;
-        private final Environment environment;
-        private final Dispatcher dispatcher;
-        private Resources resources;
-        private PatchContext patchContext;
-
-        UploadPatch(final EventBus eventBus, final StatementContext statementContext, final Environment environment,
-                final Dispatcher dispatcher, final Resources resources, final PatchContext patchContext) {
-            this.eventBus = eventBus;
-            this.statementContext = statementContext;
-            this.environment = environment;
-            this.dispatcher = dispatcher;
-            this.resources = resources;
-            this.patchContext = patchContext;
-        }
+    private void checkServersState(Dispatcher.SuccessCallback callback) {
 
-        @Override
-        public void execute(final Control<FunctionContext> control) {
-            _log.info(""UploadPatch content: "" + patchContext.file.name);
-            ResourceAddress address = SELECTED_PATCHING_TEMPLATE.resolve(statementContext);
-            Operation.Builder opBuilder = new Operation.Builder(address, PATCH)
-                    .param(OVERRIDE_ALL, patchContext.overrideAll)
-                    .param(OVERRIDE_MODULE, patchContext.overrideModules);
-            if (patchContext.override != null)
-                opBuilder.param(OVERRIDE, patchContext.override.toArray(new String[patchContext.override.size()]));
-            if (patchContext.preserve != null)
-                opBuilder.param(PRESERVE, patchContext.preserve.toArray(new String[patchContext.preserve.size()]));
-
-            Operation operation = opBuilder.build();
+        if (environment.isStandalone()) {
+            callback.onSuccess(null);
+        } else {
 
-            operation.get(CONTENT).add().get(""input-stream-index"").set(0); //NON-NLS
-            _log.info(""upload patch operation: "" + operation);
-
-            dispatcher.upload(patchContext.file, operation,
-                    result -> {
-                        _log.info(""callback patch upload result: "" + result);
-                        MessageEvent.fire(eventBus, Message.success(resources.messages().patchSucessfullyApplied(patchContext.file.name)));
-                        control.proceed();
-                    },
-
-                    (op, failure) -> {
-                        MessageEvent.fire(eventBus, Message.error(resources.messages().patchAddError(patchContext.file.name, failure)));
-                        _log.info(""callback failure patch upload: "" + failure);
-                        control.proceed();
-                    },
+            String host = statementContext.selectedHost();
+            ResourceAddress address = new ResourceAddress().add(HOST, host);
+            Operation operation = new Operation.Builder(address, READ_CHILDREN_RESOURCES_OPERATION)
+                    .param(INCLUDE_RUNTIME, true)
+                    .param(CHILD_TYPE, SERVER_CONFIG)
+                    .build();
 
-                    (op, exception) -> {
-                        MessageEvent.fire(eventBus, Message.error(resources.messages().patchAddError(patchContext.file.name, exception.getMessage())));
-                        _log.info(""callback exception patch upload: "" + exception);
-                        control.proceed();
-                    });
+            dispatcher.execute(operation, result -> {
+                List<Property> servers = result.asPropertyList();
+                List<String> serversString = new ArrayList<>();
+                boolean anyServerStarted = false;
+                for (Iterator<Property> iter = servers.iterator(); iter.hasNext(); ) {
+                    Property serverProp = iter.next();
+                    Server server = new Server(host, serverProp);
+                    if (!server.isStopped()) {
+                        serversString.add(serverProp.getName());
+                        anyServerStarted = true;
+                    } else {
+                        iter.remove();
+                    }
+                }
+
+                if (anyServerStarted) {
+                    String serversList = Joiner.on("", "").join(serversString);
+                    SafeHtml question = resources.messages().patchStopAllServersQuestion(serversList, host);
+                    DialogFactory.showConfirmation(resources.messages().patchStopAllServersTitle(), question,
+                            () -> {
+                                for (Property serverProp : servers) {
+                                    Server server = new Server(host, serverProp);
+                                    serverActions.stopNow(server);
+                                }
+                            });
+                } else {
+                    callback.onSuccess(null);
+                }
+            });
         }
     }
 ",2017-08-09T18:57:21Z,274
"@@ -60,7 +60,7 @@ public PatchingFinderPresenter(
 
     @Override
     protected String initialColumn() {
-        return environment.isStandalone() ? Ids.PATCHING_STANDALONE : Ids.PATCHING_DOMAIN;
+        return environment.isStandalone() ? Ids.PATCHING : Ids.PATCHING_DOMAIN;
     }
 
     @Override",2017-08-09T18:57:21Z,332
"@@ -17,7 +17,6 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.logging.Logger;
 
 import elemental2.dom.HTMLElement;
 import org.jboss.hal.ballroom.form.Form;
@@ -36,12 +35,11 @@
 
 public class PatchNamesStep extends WizardStep<PatchContext, PatchState> {
 
-    static Logger _log = Logger.getLogger(""org.jboss"");
     private final Form<ModelNode> form;
     private final Environment environment;
 
     public PatchNamesStep(final Environment environment, final Metadata metadata, final Resources resources) {
-        super(""Configure patch"");
+        super(resources.messages().configurePatchTitle());
         this.environment = environment;
 
         form = new ModelNodeForm.Builder<>(Ids.PATCH_UPLOAD_NAMES_FORM, metadata)",2017-08-09T18:57:21Z,40
"@@ -201,53 +201,56 @@ public void restart(Server server) {
     }
 
     private void restartStandalone(Server server) {
+        restartStandalone(server, resources.messages().restartStandaloneQuestion(server.getName()));
+    }
+
+    public void restartStandalone(Server server, SafeHtml question) {
         String title = resources.messages().restart(server.getName());
-        DialogFactory.showConfirmation(title,
-                resources.messages().restartStandaloneQuestion(server.getName()), () -> {
-                    // execute the restart with a little delay to ensure the confirmation dialog is closed
-                    // before the next dialog is opened (only one modal can be open at a time!)
-                    setTimeout((o) -> {
-
-                        prepare(server, Action.RESTART);
-                        BlockingDialog pendingDialog = DialogFactory
-                                .buildLongRunning(title,
-                                        resources.messages().restartStandalonePending(server.getName()));
-                        pendingDialog.show();
-                        Operation operation = new Operation.Builder(ResourceAddress.root(), SHUTDOWN)
-                                .param(RESTART, true)
-                                .build();
-                        Operation ping = new Operation.Builder(ResourceAddress.root(), READ_RESOURCE_OPERATION).build();
-                        dispatcher.execute(operation,
-
-                                result -> new TimeoutHandler(dispatcher, SERVER_RESTART_TIMEOUT)
-                                        .execute(ping, new TimeoutHandler.Callback() {
-                                            @Override
-                                            public void onSuccess() {
-                                                // wait a little bit before event handlers try to use the restarted server
-                                                setTimeout((o) -> {
-                                                    pendingDialog.close();
-                                                    finish(Server.STANDALONE, Result.SUCCESS, Message.success(
-                                                            resources.messages()
-                                                                    .restartServerSuccess(server.getName())));
-                                                }, 666);
-                                            }
-
-                                            @Override
-                                            public void onTimeout() {
-                                                pendingDialog.close();
-                                                DialogFactory.buildBlocking(title,
-                                                        resources.messages().restartStandaloneTimeout(server.getName()))
-                                                        .show();
-                                                finish(Server.STANDALONE, Result.TIMEOUT, null);
-                                            }
-                                        }),
-                                (o1, failure) -> finish(Server.STANDALONE, Result.ERROR,
-                                        Message.error(resources.messages().restartServerError(server.getName()))),
-                                (o2, exception) -> finish(Server.STANDALONE, Result.ERROR,
-                                        Message.error(resources.messages().restartServerError(server.getName()))));
-
-                    }, SHORT_TIMEOUT);
-                });
+        DialogFactory.showConfirmation(title, question, () -> {
+            // execute the restart with a little delay to ensure the confirmation dialog is closed
+            // before the next dialog is opened (only one modal can be open at a time!)
+            setTimeout((o) -> {
+
+                prepare(server, Action.RESTART);
+                BlockingDialog pendingDialog = DialogFactory
+                        .buildLongRunning(title,
+                                resources.messages().restartStandalonePending(server.getName()));
+                pendingDialog.show();
+                Operation operation = new Operation.Builder(ResourceAddress.root(), SHUTDOWN)
+                        .param(RESTART, true)
+                        .build();
+                Operation ping = new Operation.Builder(ResourceAddress.root(), READ_RESOURCE_OPERATION).build();
+                dispatcher.execute(operation,
+
+                        result -> new TimeoutHandler(dispatcher, SERVER_RESTART_TIMEOUT)
+                                .execute(ping, new TimeoutHandler.Callback() {
+                                    @Override
+                                    public void onSuccess() {
+                                        // wait a little bit before event handlers try to use the restarted server
+                                        setTimeout((o) -> {
+                                            pendingDialog.close();
+                                            finish(Server.STANDALONE, Result.SUCCESS, Message.success(
+                                                    resources.messages()
+                                                            .restartServerSuccess(server.getName())));
+                                        }, 666);
+                                    }
+
+                                    @Override
+                                    public void onTimeout() {
+                                        pendingDialog.close();
+                                        DialogFactory.buildBlocking(title,
+                                                resources.messages().restartStandaloneTimeout(server.getName()))
+                                                .show();
+                                        finish(Server.STANDALONE, Result.TIMEOUT, null);
+                                    }
+                                }),
+                        (o1, failure) -> finish(Server.STANDALONE, Result.ERROR,
+                                Message.error(resources.messages().restartServerError(server.getName()))),
+                        (o2, exception) -> finish(Server.STANDALONE, Result.ERROR,
+                                Message.error(resources.messages().restartServerError(server.getName()))));
+
+            }, SHORT_TIMEOUT);
+        });
     }
 
     private void reloadRestart(Server server, Operation operation, Action action, int timeout,
@@ -399,6 +402,27 @@ public void onError(final Throwable error) {
                 });
     }
 
+    /**
+     * Call <code>/host={host}/server-config={sever}:stop(blocking=false)</code> the intended action is to immediately
+     * stop the server.
+     *
+     * @param server
+     */
+    public void stopNow(Server server) {
+        prepare(server, Action.STOP);
+        Operation operation = new Operation.Builder(server.getServerConfigAddress(), STOP)
+                .param(BLOCKING, false)
+                .build();
+        dispatcher.execute(operation, result -> new TimeoutHandler(dispatcher, SERVER_STOP_TIMEOUT).execute(
+                readServerConfigStatus(server),
+                checkServerConfigStatus(STOPPED, DISABLED),
+                new ServerTimeoutCallback(server, Action.STOP,
+                        resources.messages().stopServerSuccess(server.getName()))),
+                new ServerFailedCallback(server, resources.messages().stopServerError(server.getName())),
+                new ServerExceptionCallback(server, resources.messages().stopServerError(server.getName())));
+
+    }
+
     public void kill(Server server) {
         DialogFactory.showConfirmation(resources.messages().kill(server.getName()),
                 resources.messages().killServerQuestion(server.getName()),",2017-08-09T18:57:21Z,93
"@@ -525,12 +525,10 @@ public interface Ids {
     String MODEL_BROWSER_ROOT = build(MODEL_BROWSER, ""root"");
     String PATCH_ADD = build(""patch"", ADD_SUFFIX);
     String PATCH_UPLOAD_NAMES_FORM = build(""patch"", ""names"", FORM_SUFFIX);
-    String PATCHES = ""patches"";
-    String PATCHES_AGEOUT = build(PATCHES, ""ageout-history"");
-    String PATCHES_HOST = ""patches-host"";
-    String PATCHES_REFRESH = build(PATCHES, REFRESH_SUFFIX);
+    String PATCHING = ""patching"";
+    String PATCHES_AGEOUT = build(PATCHING, ""ageout-history"");
+    String PATCHES_REFRESH = build(PATCHING, REFRESH_SUFFIX);
     String PATCHING_DOMAIN = ""patching-domain"";
-    String PATCHING_STANDALONE = ""patching-standalone"";
     String PREVIEW_ID = build(FINDER, ""preview"");
     String PROFILE = ""profile"";
     String PROFILE_ADD = build(PROFILE, ADD_SUFFIX);",2017-08-09T18:57:21Z,111
"@@ -71,6 +71,7 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     String cleanPatchHistorySuccess();
     SafeHtml cloneProfileSuccess(String from, String to);
     SafeHtml closeToLogout();
+    String configurePatchTitle();
     SafeHtml configuredMailServer(String servers);
     String connectedTo(String url);
     SafeHtml contentAdded(@PluralCount int size);
@@ -221,6 +222,7 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml noLogFile();
     SafeHtml noMacrosDescription(String startMacro);
     String nonEmptyRequires(String fields);
+    String noPatchesForHost();
     SafeHtml noReferenceServerPreview(String deployment, String attribute1, String attribute2, String serverGroup, String historyToken);
     SafeHtml noReferenceServerEmptyState(String deployment, String serverGroup);
     SafeHtml noReset();
@@ -237,10 +239,14 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     String operations(int size);
 
     SafeHtml pageNotFound(String invalidHistoryToken);
+    String patchLatestInstalledLabel();
     SafeHtml patchHostNeedsRestart(String hostname);
     SafeHtml patchRestartDomainControllerQuestion(String hostname);
     SafeHtml patchRestartHostControllerQuestion(String hostname);
+    SafeHtml patchRestartStandaloneQuestion();
     SafeHtml patchSucessfullyApplied(String patchId);
+    String patchStopAllServersTitle();
+    SafeHtml patchStopAllServersQuestion(String servers, String host);
     SafeHtml patchAddError(String patchId, String error);
     SafeHtml patchSucessfullyRemoved(String patchId);
     SafeHtml pauseQueueSuccess(String name);",2017-08-09T18:57:21Z,94
"@@ -28,6 +28,7 @@ cleanPatchHistoryQuestion={0} This action will prevent rollback of installed pat
 cleanPatchHistorySuccess=Patch history successfully cleaned.
 cloneProfileSuccess=Profile <strong>{0}</strong> successfully cloned to <strong>{1}</strong>.
 closeToLogout=In order to logout, please close the current window / tab and reopen the console.
+configurePatchTitle=Configure patch
 configuredMailServer=Configured mail servers: {0}
 connectedTo=Connected to {0}
 contentAdded=<strong>{0}</strong> content items have been added.
@@ -169,6 +170,7 @@ noMessagesSelected=No messages selected!
 noLogFile=No log file specified.
 noMacrosDescription=No macros have been recorded so far. To record a macro choose <strong>{0}</strong> from the tools menu.
 nonEmptyRequires=Required if {0} is set.
+noPatchesForHost=No patch installed for this host.
 noReferenceServerEmptyState=No runtime information available for deployment <strong>{0}</strong>. The server group {1} does not contain a running server, which contains this deployment. Goto server group {1} and start a server in order to see runtime related information.
 noReferenceServerPreview=Runtime attributes such as &#39;{1}&#39; or &#39;{2}&#39; could not be read for <strong>{0}</strong>. No running server was found, which contains this deployment. Goto server group <a href=""{4}"">{3}</a> and start a server in order to see all details.
 noReset=None of the attributes could be reset.
@@ -183,12 +185,16 @@ noWrite=No write behaviour has been defined for this store. Please choose a beha
 normalLogFile=The log file has a size of <strong>{0}</strong>.
 operations={0, number} operations
 pageNotFound=Page <strong>{0}</strong> not found.
+patchLatestInstalledLabel=Latest applied patch
 patchHostNeedsRestart=The host <strong>{0}</strong> needs to be restarted. A patch cannot be added or rolled back before the host is restarted.
 patchSucessfullyApplied=Patch {0} successfully installed.
 patchAddError=There is an error installing patch {0}. Reason: {1}
 patchSucessfullyRemoved=Patch <strong>{0}</strong> successfully removed.
 patchRestartHostControllerQuestion=<p>The host <strong>{0}</strong> needs to be restarted. A patch cannot be added or rolled back before the host is restarted.</p><p>Are you sure you want to restart the host controller <strong>{0}</strong> ?</p>
+patchRestartStandaloneQuestion=<p>The server needs to be restarted. A patch cannot be added or rolled back before the server is restarted.</p><p>Are you sure you want to restart the server ?</p>
 patchRestartDomainControllerQuestion=<p>The host <strong>{0}</strong> needs to be restarted. A patch cannot be added or rolled back before the host is restarted.</p><p>Are you sure you want to restart the domain controller <strong>{0}</strong>? The console won&#39;t be available until the domain controller has been successfully restarted.</p>
+patchStopAllServersTitle=Stop servers
+patchStopAllServersQuestion=<p>The patching mechanism will replace library files, to avoid conflicts and problems for applications deployed and running on servers, it is highly recommended to shutdown all servers running under host <strong>{1}</strong>.</p><p>Do you want to stop the following servers <strong>{0}</strong> from host <strong>{1}</strong> ?</p><p>Each server will shutdown immediately.</p>
 pauseQueueSuccess=Queue <strong>{0}</strong> successfully paused.
 profileIncludes=The profile includes the following profiles: {0}.
 profileNotUsedInServerGroups=The profile is not used in any server group.",2017-08-09T18:57:21Z,94
"@@ -1,8 +1,15 @@
 cleanPatchHistory=Limpar o hist\u00f3rico de corre\u00e7\u00f5es
 cleanPatchHistoryQuestion={0} Esta a\u00e7\u00e3o ir\u00e1 prevenir o rollback das corre\u00e7\u00f5es j\u00e1 instaladas e n\u00e3o pode ser desfeita. <p>Voc\u00ea realmente quer limpar o hist\u00f3rico de corre\u00e7\u00f5es ?</p>
 cleanPatchHistorySuccess=Limpeza do histórico de correções feita com sucesso.
+configurePatchTitle=Configurar corre\u00e7\u00e3o
 noSelectedPatch=Nenhum arquivo de corre\u00e7\u00e3o selecionado. Por favor selecione um arquivo de corre\u00e7\u00e3o para enviar.
+noPatchesForHost=N\u00e3o h\u00e1 corre\u00e7\u00f5es instaladas para este servidor de controle.
+patchLatestInstalledLabel=\u00daltima corre\u00e7\u00e3o instalada
 patchHostNeedsRestart=O servidor de controle <strong>{0}</strong> precisa ser reiniciado. Uma corre\u00e7\u00e3o n\u00e3o pode ser adicionada ou removida antes do servidor de controle ser reiniciado.
 patchSucessfullyApplied=Corre\u00e7\u00e3o {0} instalada com sucesso.
 patchAddError=Ocorreu um erro na instala\u00e7\u00e3o da corre\u00e7\u00e3o {0}. Motivo: {1}
 patchSucessfullyRemoved=Corre\u00e7\u00e3o <strong>{0}</strong> removida com sucesso.
+patchRestartHostControllerQuestion=<p>O servidor de controle <strong>{0}</strong> precisa ser reiniciado. Uma corre\u00e7\u00e3o n\u00e3o pode ser adicionada ou removida antes do servidor de controle ser reiniciado.</p><p>Voc\u00ea tem certeza de que quer reiniciar o servi\u00e7o de controle <strong>{0}</strong> ?</p>
+patchRestartDomainControllerQuestion=<p>O servidor de controle de dom\u00ednio <strong>{0}</strong> precisa ser reiniciado. Uma corre\u00e7\u00e3o n\u00e3o pode ser adicionada ou removida antes do servidor de controle ser reiniciado.</p><p>Voc\u00ea tem certeza de que quer reiniciar o servi\u00e7o de controle <strong>{0}</strong></p> ? <p>O console de gerenciamento web ficar\u00e1 indispon\u00edvel at\u00e9 que o servidor de controle de dom\u00ednio (Domain Controller) seja iniciado corretamente.</p>
+patchRestartStandaloneQuestion=<p>O servidor precisa ser reiniciado. Uma corre\u00e7\u00e3o n\u00e3o pode ser adicionada ou removida antes do servidor reiniciado.</p><p>Voc\u00ea tem certeza de que quer reiniciar o servidor ?</p><p>O console de gerenciamento web ficar\u00e1 indispon\u00edvel at\u00e9 que o servidor seja iniciado corretamente.</p>
+patchStopAllServersQuestion=<p>A aplica\u00e7\u00e3o da corre\u00e7\u00e3o ir\u00e1 substituir arquivos da instala\u00e7\u00e3o, para evitar conflitos e problemas para as aplica\u00e7\u00f5es instaladas e em funcionamento nos servidores \u00e9 altamente recomend\u00e1vel que pare todos os servidores em funcionamento sob o controlador <strong>{1}</strong>.</p><p>Voc\u00ea quer parar os seguintes servidores <strong>{0}</strong> do servi\u00e7o de controle (Host Controller) <strong>{1}</strong> ?</p><p>Cada servidor ser\u00e1 parado imediatamente.</p>",2017-08-09T18:57:21Z,94
"@@ -18,7 +18,7 @@
     ""js-cookie"": ""~2.1.3"",
     ""javascript-auto-complete"": ""1.0.4"",
     ""jquery"": ""~2.2.4"",
-    ""jstree"": ""~3.3.3"",
+    ""jstree"": ""~3.3.4"",
     ""patternfly"": ""~3.26.1"",
     ""tagmanager"": ""~3.0.2"",
     ""zeroclipboard"": ""^2.2.0""",2017-10-07T20:47:42Z,213
"@@ -15,7 +15,6 @@
  */
 package org.jboss.hal.client.deployment;
 
-import java.util.List;
 import java.util.Set;
 import java.util.function.Consumer;
 
@@ -39,7 +38,7 @@
 import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.ballroom.form.TextBoxItem;
 import org.jboss.hal.ballroom.tree.Node;
-import org.jboss.hal.ballroom.tree.SelectionChangeHandler.SelectionContext;
+import org.jboss.hal.ballroom.tree.SelectionContext;
 import org.jboss.hal.ballroom.tree.Tree;
 import org.jboss.hal.core.Strings;
 import org.jboss.hal.core.deployment.Content;
@@ -56,13 +55,14 @@
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
-import org.jboss.hal.spi.Callback;
+import org.jboss.hal.resources.UIConstants;
 import org.jboss.hal.spi.Message;
 import org.jboss.hal.spi.MessageEvent;
 import rx.Completable;
 
 import static com.google.common.base.Strings.isNullOrEmpty;
 import static com.google.common.base.Strings.nullToEmpty;
+import static elemental2.dom.DomGlobal.alert;
 import static elemental2.dom.DomGlobal.window;
 import static java.lang.Math.max;
 import static java.util.Collections.emptyList;
@@ -75,10 +75,11 @@
 import static org.jboss.hal.ballroom.Skeleton.MARGIN_SMALL;
 import static org.jboss.hal.ballroom.Skeleton.applicationHeight;
 import static org.jboss.hal.ballroom.Skeleton.applicationOffset;
+import static org.jboss.hal.client.deployment.ContentParser.NODE_ID;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.resources.CSS.*;
 
-/** UI element to browse the content of an item from the content repository. */
+/** UI element to browse and modify the content of an item from the content repository. */
 class BrowseContentElement implements IsElement, Attachable {
 
     @SuppressWarnings(""HardCodedStringLiteral"")
@@ -138,28 +139,28 @@ class BrowseContentElement implements IsElement, Attachable {
     private final Dispatcher dispatcher;
     private final EventBus eventBus;
     private final Resources resources;
-    private final Callback refreshCallback;
 
-    private final ContentParser contentParser;
+    private final HTMLElement root;
     private final Search treeSearch;
     private Tree<ContentEntry> tree;
     private final EmptyState pleaseSelect;
     private final EmptyState deploymentPreview;
     private final EmptyState unsupportedFileType;
-    private AceEditor editor;
+    private final AceEditor editor;
 
-    private final HTMLElement addRemoveControls;
-    private final HTMLButtonElement removeButton;
+    private final HTMLButtonElement collapseButton;
+    private final HTMLButtonElement addContentButton;
+    private final HTMLButtonElement uploadContentButton;
+    private final HTMLElement downloadContentLink;
+    private final HTMLButtonElement removeContentButton;
     private final HTMLElement treeContainer;
     private final HTMLElement editorControls;
     private final HTMLElement editorStatus;
-    private final HTMLElement downloadButton;
-    private final HTMLButtonElement saveButton;
+    private final HTMLButtonElement saveContentButton;
     private final HTMLElement previewContainer;
     private final HTMLElement previewHeader;
     private final HTMLElement previewImageContainer;
     private final HTMLImageElement previewImage;
-    private final HTMLElement root;
 
     private Content content;
     private int surroundingHeight;
@@ -168,41 +169,30 @@ class BrowseContentElement implements IsElement, Attachable {
     // ------------------------------------------------------ ui setup
 
     @SuppressWarnings(""ConstantConditions"")
-    BrowseContentElement(Dispatcher dispatcher, EventBus eventBus, Resources resources, Callback refreshCallback) {
+    BrowseContentElement(Dispatcher dispatcher, EventBus eventBus, Resources resources) {
         this.dispatcher = dispatcher;
         this.eventBus = eventBus;
         this.resources = resources;
-        this.refreshCallback = refreshCallback;
-        this.contentParser = new ContentParser();
         this.surroundingHeight = 0;
 
-        treeSearch = new Search.Builder(Ids.CONTENT_TREE_SEARCH,
-                query -> {
-                    if (tree.api() != null) {
-                        tree.api().search(query);
-                    }
-                })
-                .onClear(() -> {
-                    if (tree.api() != null) {
-                        tree.api().clearSearch();
-                    }
-                })
+        treeSearch = new Search.Builder(Ids.CONTENT_TREE_SEARCH, query -> tree.search(query))
+                .onClear(() -> tree.clearSearch())
                 .build();
         treeSearch.asElement().classList.add(marginLeftSmall);
 
-        Search contentSearch = new Search.Builder(Ids.CONTENT_SEARCH,
-                query -> editor.getEditor().find(query))
-                .onPrevious(query -> editor.getEditor().findPrevious())
-                .onNext(query -> editor.getEditor().findNext())
-                .build();
-
         Options editorOptions = new Options();
         editorOptions.readOnly = false;
         editorOptions.showGutter = true;
         editorOptions.showLineNumbers = true;
         editorOptions.showPrintMargin = false;
         editor = new AceEditor(Ids.CONTENT_EDITOR, editorOptions);
 
+        Search contentSearch = new Search.Builder(Ids.CONTENT_SEARCH,
+                query -> editor.getEditor().find(query))
+                .onPrevious(query -> editor.getEditor().findPrevious())
+                .onNext(query -> editor.getEditor().findNext())
+                .build();
+
         pleaseSelect = new EmptyState.Builder(resources.constants().nothingSelected())
                 .icon(Icons.INFO)
                 .description(resources.constants().noContentSelected())
@@ -217,9 +207,9 @@ class BrowseContentElement implements IsElement, Attachable {
                 .icon(Icons.UNKNOWN)
                 .description(resources.constants().unsupportedFileTypeDescription())
                 .primaryAction(resources.constants().download(),
-                        () -> window.location.assign(downloadUrl((tree.api().getSelected().data))))
+                        () -> window.location.assign(downloadUrl((tree.getSelected().data))))
                 .secondaryAction(resources.constants().viewInEditor(),
-                        () -> viewInEditor(tree.api().getSelected().data))
+                        () -> viewInEditor(tree.getSelected().data))
                 .build();
 
         root = row()
@@ -228,29 +218,42 @@ class BrowseContentElement implements IsElement, Attachable {
                                 .add(div().css(btnToolbar)
                                         .add(div().css(btnGroup)
                                                 .add(button().css(btn, btnDefault)
-                                                        .on(click, event -> refreshCallback.execute())
+                                                        .on(click, event -> refresh())
                                                         .title(resources.constants().refresh())
                                                         .add(i().css(fontAwesome(CSS.refresh))))
-                                                .add(button().css(btn, btnDefault)
-                                                        .on(click, event -> collapse(tree.api().getSelected()))
+                                                .add(collapseButton = button().css(btn, btnDefault)
+                                                        .on(click, event -> {
+                                                            Node<ContentEntry> selection = tree.getSelected();
+                                                            if (selection != null) {
+                                                                tree.selectNode(selection.id, true);
+                                                            }
+                                                        })
                                                         .title(resources.constants().collapse())
-                                                        .add(i().css(fontAwesome(""minus"")))))
-                                        .add(addRemoveControls = div().css(btnGroup)
-                                                .add(button().css(btn, btnDefault)
-                                                        .on(click, event -> newContent())
-                                                        .title(resources.constants().newContent())
-                                                        .add(i().css(fontAwesome(""file-o""))))
-                                                .add(button().css(btn, btnDefault)
+                                                        .add(i().css(fontAwesome(""minus"")))
+                                                        .asElement()))
+                                        .add(div().css(btnGroup)
+                                                .add(addContentButton = button().css(btn, btnDefault)
                                                         .on(click, event -> addContent())
+                                                        .title(resources.constants().newContent())
+                                                        .add(i().css(fontAwesome(""file-o"")))
+                                                        .asElement())
+                                                .add(uploadContentButton = button().css(btn, btnDefault)
+                                                        .on(click, event -> uploadContent())
                                                         .title(resources.constants().uploadContent())
                                                         .title(resources.constants().addContent())
-                                                        .add(i().css(fontAwesome(""upload""))))
-                                                .add(removeButton = button().css(btn, btnDefault)
+                                                        .add(i().css(fontAwesome(""upload"")))
+                                                        .asElement())
+                                                .add(downloadContentLink = a().css(btn, btnDefault)
+                                                        .title(resources.constants().download())
+                                                        .attr(UIConstants.TARGET, ""_blank"") //NON-NLS
+                                                        .attr(UIConstants.ROLE, UIConstants.BUTTON)
+                                                        .add(span().css(fontAwesome(""download"")))
+                                                        .asElement())
+                                                .add(removeContentButton = button().css(btn, btnDefault)
                                                         .on(click, event -> removeContent())
                                                         .title(resources.constants().removeContent())
                                                         .add(i().css(pfIcon(""remove"")))
-                                                        .asElement())
-                                                .asElement()))
+                                                        .asElement())))
                                 .add(treeSearch))
                         .add(treeContainer = div().css(CSS.treeContainer).asElement()))
                 .add(column(8)
@@ -271,14 +274,10 @@ class BrowseContentElement implements IsElement, Attachable {
                                                         .textContent(resources.constants().nothingSelected())
                                                         .asElement()))
                                         .add(div().css(editorButtons)
-                                                .add(saveButton = button().css(btn, btnDefault, clickable)
+                                                .add(saveContentButton = button().css(btn, btnDefault, clickable)
                                                         .on(click, event -> saveContent())
                                                         .title(resources.constants().save())
                                                         .add(span().css(fontAwesome(""floppy-o"")))
-                                                        .asElement())
-                                                .add(downloadButton = a().css(btn, btnDefault, clickable)
-                                                        .title(resources.constants().download())
-                                                        .add(span().css(fontAwesome(""download"")))
                                                         .asElement()))
                                         .asElement())
                                 .add(editor)
@@ -287,7 +286,7 @@ class BrowseContentElement implements IsElement, Attachable {
                                 .add(unsupportedFileType)))
                 .asElement();
 
-        saveButton.disabled = true;
+        saveContentButton.disabled = true;
         Elements.setVisible(pleaseSelect.asElement(), true);
         Elements.setVisible(editorControls, false);
         Elements.setVisible(editor.asElement(), false);
@@ -326,16 +325,19 @@ void setSurroundingHeight(int surroundingHeight) {
     }
 
     private void adjustHeight() {
-        int treeOffset = (int) (applicationOffset() + 2 * MARGIN_BIG + treeSearch.asElement().offsetHeight + MARGIN_SMALL + surroundingHeight);
+        int treeOffset = (int) (applicationOffset() +
+                2 * MARGIN_BIG + treeSearch.asElement().offsetHeight + MARGIN_SMALL + surroundingHeight);
         int previewHeaderHeight = (int) previewHeader.offsetHeight;
-        int previewOffset = applicationOffset() + 2 * MARGIN_BIG + MARGIN_SMALL + previewHeaderHeight + surroundingHeight;
+        int previewOffset = applicationOffset() +
+                2 * MARGIN_BIG + MARGIN_SMALL + previewHeaderHeight + surroundingHeight;
 
         treeContainer.style.height = vh(treeOffset);
         previewImageContainer.style.height = vh(previewOffset);
     }
 
     private void adjustEditorHeight() {
-        int editorHeight = (int) (applicationHeight() - 2 * MARGIN_BIG - MARGIN_SMALL - editorControls.offsetHeight - surroundingHeight);
+        int editorHeight = (int) (applicationHeight() -
+                2 * MARGIN_BIG - MARGIN_SMALL - editorControls.offsetHeight - surroundingHeight);
 
         if (Elements.isVisible(editor.asElement())) {
             editor.asElement().style.height = height(px(max(editorHeight, MIN_HEIGHT)));
@@ -344,113 +346,18 @@ private void adjustEditorHeight() {
     }
 
 
-    // ------------------------------------------------------ ui visibility / states
+    // ------------------------------------------------------ CRUD content methods
 
-    void setContent(Content content, ModelNode browseContentResult) {
+    void setContent(Content content) {
         this.content = content;
-        Elements.setVisible(addRemoveControls, content.isExploded());
-
-        Array<Node<ContentEntry>> nodes = new Array<>();
-        Node<ContentEntry> root = new Node.Builder<>(Ids.CONTENT_TREE_ROOT, content.getName(), new ContentEntry())
-                .root()
-                .folder()
-                .open()
-                .build();
-        List<ModelNode> modelNodes = browseContentResult.isDefined() ? browseContentResult.asList() : emptyList();
-        contentParser.parse(nodes, root, modelNodes);
-
-        tree = new Tree<>(Ids.CONTENT_TREE, nodes);
-        Elements.removeChildrenFrom(treeContainer);
-        treeContainer.appendChild(tree.asElement());
-        tree.attach();
-        tree.onSelectionChange((event, selectionContext) -> {
-            if (!""ready"".equals(selectionContext.action)) { //NON-NLS
-                selectNode(selectionContext);
-            }
-        });
-        noSelection();
-    }
-
-    private void noSelection() {
-        removeButton.disabled = true;
-        Elements.setVisible(pleaseSelect.asElement(), true);
-        Elements.setVisible(editorControls, false);
-        Elements.setVisible(editor.asElement(), false);
-        Elements.setVisible(deploymentPreview.asElement(), false);
-        Elements.setVisible(unsupportedFileType.asElement(), false);
-        Elements.setVisible(previewContainer, false);
-    }
-
-    private void deploymentPreview() {
-        removeButton.disabled = true;
-        Elements.setVisible(pleaseSelect.asElement(), false);
-        Elements.setVisible(editorControls, false);
-        Elements.setVisible(editor.asElement(), false);
-        Elements.setVisible(deploymentPreview.asElement(), !content.isExploded());
-        Elements.setVisible(unsupportedFileType.asElement(), false);
-        Elements.setVisible(previewContainer, false);
-
-        deploymentPreview.setHeader(content.getName());
-        deploymentPreview.setPrimaryAction(resources.constants().download(),
-                () -> window.location.assign(downloadUrl(null)));
-    }
-
-    private void directory() {
-        removeButton.disabled = true;
-        Elements.setVisible(pleaseSelect.asElement(), false);
-        Elements.setVisible(editorControls, false);
-        Elements.setVisible(editor.asElement(), false);
-        Elements.setVisible(deploymentPreview.asElement(), false);
-        Elements.setVisible(unsupportedFileType.asElement(), false);
-        Elements.setVisible(previewContainer, false);
-    }
-
-    private void viewInEditor(ContentEntry contentEntry) {
-        removeButton.disabled = false;
-        Elements.setVisible(pleaseSelect.asElement(), false);
-        Elements.setVisible(editorControls, true);
-        Elements.setVisible(editor.asElement(), true);
-        Elements.setVisible(deploymentPreview.asElement(), false);
-        Elements.setVisible(unsupportedFileType.asElement(), false);
-        Elements.setVisible(previewContainer, false);
-        adjustEditorHeight();
-
-        editorStatus.textContent = contentEntry.name + "" - "" + Format.humanReadableFileSize(contentEntry.fileSize);
-        downloadButton.setAttribute(""href"", downloadUrl(contentEntry)); //NON-NLS
-        loadContent(contentEntry, result -> {
-            saveButton.disabled = true;
-            editor.setModeFromPath(contentEntry.name);
-            editor.getEditor().getSession().setValue(result);
-            editor.getEditor().getSession().on(""change"", delta -> saveButton.disabled = false); //NON-NLS
-        });
-    }
-
-    private void viewInPreview(ContentEntry contentEntry) {
-        removeButton.disabled = false;
-        Elements.setVisible(pleaseSelect.asElement(), false);
-        Elements.setVisible(editorControls, false);
-        Elements.setVisible(editor.asElement(), false);
-        Elements.setVisible(deploymentPreview.asElement(), false);
-        Elements.setVisible(unsupportedFileType.asElement(), false);
-        Elements.setVisible(previewContainer, true);
+        Elements.setVisible(addContentButton, content.isExploded());
+        Elements.setVisible(uploadContentButton, content.isExploded());
+        Elements.setVisible(removeContentButton, content.isExploded());
 
-        previewImage.src = downloadUrl(contentEntry);
+        browseContent().subscribe(this::noSelection);
     }
 
-    private void unsupportedFileType() {
-        removeButton.disabled = false;
-        Elements.setVisible(pleaseSelect.asElement(), false);
-        Elements.setVisible(editorControls, false);
-        Elements.setVisible(editor.asElement(), false);
-        Elements.setVisible(deploymentPreview.asElement(), false);
-        Elements.setVisible(unsupportedFileType.asElement(), true);
-        Elements.setVisible(previewContainer, false);
-    }
-
-
-    // ------------------------------------------------------ event handler
-
-    private void newContent() {
+    private void addContent() {
         NameItem nameItem = new NameItem();
         TextBoxItem pathItem = new TextBoxItem(TARGET_PATH);
         Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.CONTENT_NEW, Metadata.empty())
@@ -467,24 +374,91 @@ private void newContent() {
             Operation operation = new Operation.Builder(address, ADD_CONTENT)
                     .param(CONTENT, new ModelNode().add(contentNode))
                     .build();
-            dispatcher.upload(file(nameItem.getValue(), """"), operation, result -> {
-                refreshCallback.execute();
-                MessageEvent.fire(eventBus,
-                        Message.success(resources.messages().newContentSuccess(content.getName(), path)));
-            });
+            dispatcher.upload(file(nameItem.getValue(), """"), operation)
+                    .toCompletable()
+                    .andThen(browseContent())
+                    .andThen(awaitTreeReady())
+                    .subscribe(() -> {
+                        MessageEvent.fire(eventBus,
+                                Message.success(resources.messages().newContentSuccess(content.getName(), path)));
+                        tree.selectNode(NODE_ID.apply(path));
+                    });
         });
         pathItem.setValue(selectedPath());
         dialog.show();
     }
 
-    private void addContent() {
+    private void uploadContent() {
+        alert(Names.NYI);
+    }
 
+    private Completable browseContent() {
+        ResourceAddress address = new ResourceAddress().add(DEPLOYMENT, content.getName());
+        Operation operation = new Operation.Builder(address, BROWSE_CONTENT).build();
+        return dispatcher.execute(operation)
+                .doOnSuccess(result -> {
+                    Node<ContentEntry> root = new Node.Builder<>(Ids.CONTENT_TREE_ROOT, content.getName(),
+                            new ContentEntry())
+                            .root()
+                            .folder()
+                            .open()
+                            .build();
+                    Array<Node<ContentEntry>> nodes = new Array<>();
+                    new ContentParser().parse(root, nodes, result.isDefined() ? result.asList() : emptyList());
+
+                    if (tree != null) {
+                        tree.destroy();
+                        tree = null;
+                    }
+                    tree = new Tree<>(Ids.CONTENT_TREE, nodes);
+                    Elements.removeChildrenFrom(treeContainer);
+                    treeContainer.appendChild(tree.asElement());
+                    tree.attach();
+                    tree.onSelectionChange((event, selectionContext) -> {
+                        if (!""ready"".equals(selectionContext.action)) { //NON-NLS
+                            onNodeSelected(selectionContext);
+                        }
+                    });
+                })
+                .toCompletable();
+    }
+
+    private void loadContent(ContentEntry contentEntry, Consumer<String> successCallback) {
+        if (!contentEntry.directory) {
+            ResourceAddress address = new ResourceAddress().add(DEPLOYMENT, content.getName());
+            Operation operation = new Operation.Builder(address, READ_CONTENT)
+                    .param(PATH, contentEntry.path)
+                    .build();
+            dispatcher.download(operation, successCallback);
+        }
+    }
+
+    private String downloadUrl(ContentEntry contentEntry) {
+        ResourceAddress address = new ResourceAddress().add(DEPLOYMENT, content.getName());
+        Operation.Builder builder = new Operation.Builder(address, READ_CONTENT);
+        if (contentEntry != null) {
+            builder.param(PATH, contentEntry.path);
+        }
+        return dispatcher.downloadUrl(builder.build());
+    }
+
+    private void refresh() {
+        String selectedId = selectedId();
+        browseContent()
+                .andThen(awaitTreeReady())
+                .subscribe(() -> {
+                    if (selectedId != null) {
+                        tree.selectNode(selectedId);
+                    }
+                });
     }
 
     private void saveContent() {
-        Node<ContentEntry> selection = tree.api().getSelected();
+        Node<ContentEntry> selection = tree.getSelected();
         if (selection != null) {
-            String filename = Strings.substringAfterLast(selection.data.path, ""/"");
+            String filename = selection.data.path.contains(""/"")
+                    ? Strings.substringAfterLast(selection.data.path, ""/"")
+                    : selection.data.path;
             String editorContent = editor.getEditor().getSession().getValue();
             ResourceAddress address = new ResourceAddress().add(DEPLOYMENT, content.getName());
             ModelNode contentNode = new ModelNode();
@@ -493,19 +467,21 @@ private void saveContent() {
             Operation operation = new Operation.Builder(address, ADD_CONTENT)
                     .param(CONTENT, new ModelNode().add(contentNode))
                     .build();
-            dispatcher.upload(file(filename, editorContent), operation, result -> {
-                saveButton.disabled = true;
-                MessageEvent.fire(eventBus,
-                        Message.success(resources.messages().saveContentSuccess(content.getName(), filename)));
-                Completable refresh = Completable.fromAction(refreshCallback::execute);
-                Completable select = Completable.fromAction(() -> tree.select(selection.id, false));
-                refresh.andThen(select).subscribe();
-            });
+            dispatcher.upload(file(filename, editorContent), operation)
+                    .doOnSuccess(result -> saveContentButton.disabled = true)
+                    .toCompletable()
+                    .andThen(browseContent())
+                    .andThen(awaitTreeReady())
+                    .subscribe(() -> {
+                        MessageEvent.fire(eventBus,
+                                Message.success(resources.messages().saveContentSuccess(content.getName(), filename)));
+                        tree.selectNode(selection.id);
+                    });
         }
     }
 
     private void removeContent() {
-        Node<ContentEntry> selection = tree.api().getSelected();
+        Node<ContentEntry> selection = tree.getSelected();
         if (selection != null) {
             String path = selection.data.path;
             DialogFactory.showConfirmation(resources.constants().removeContent(),
@@ -514,22 +490,24 @@ private void removeContent() {
                         Operation operation = new Operation.Builder(address, REMOVE_CONTENT)
                                 .param(PATHS, new ModelNode().add(path))
                                 .build();
-                        dispatcher.execute(operation, result -> {
-                            refreshCallback.execute();
-                            MessageEvent.fire(eventBus, Message.success(
-                                    resources.messages().removeContentSuccess(content.getName(), path)));
-                        });
+                        dispatcher.execute(operation)
+                                .toCompletable()
+                                .andThen(browseContent())
+                                .andThen(awaitTreeReady())
+                                .subscribe(() -> {
+                                    MessageEvent.fire(eventBus, Message.success(
+                                            resources.messages().removeContentSuccess(content.getName(), path)));
+                                    noSelection();
+                                });
                     });
         }
     }
 
-    private void collapse(Node<ContentEntry> node) {
-        if (node != null) {
-            tree.select(node.id, true);
-        }
-    }
 
-    private void selectNode(SelectionContext<ContentEntry> selection) {
+    // ------------------------------------------------------ UI state
+
+    private void onNodeSelected(SelectionContext<ContentEntry> selection) {
+        collapseButton.disabled = selection.selected.length == 0;
         if (selection.selected.length != 0) {
             if (selection.node.id.equals(Ids.CONTENT_TREE_ROOT)) {
                 deploymentPreview();
@@ -551,7 +529,7 @@ private void selectNode(SelectionContext<ContentEntry> selection) {
                         viewInPreview(contentEntry);
 
                     } else {
-                        unsupportedFileType();
+                        unsupportedFileType(contentEntry);
                     }
                 }
             }
@@ -561,12 +539,119 @@ private void selectNode(SelectionContext<ContentEntry> selection) {
         }
     }
 
+    private void noSelection() {
+        collapseButton.disabled = true;
+        downloadContentLink.classList.add(disabled);
+        removeContentButton.disabled = true;
+
+        Elements.setVisible(pleaseSelect.asElement(), true);
+        Elements.setVisible(editorControls, false);
+        Elements.setVisible(editor.asElement(), false);
+        Elements.setVisible(deploymentPreview.asElement(), false);
+        Elements.setVisible(unsupportedFileType.asElement(), false);
+        Elements.setVisible(previewContainer, false);
+    }
+
+    private void deploymentPreview() {
+        downloadContentLink.setAttribute(UIConstants.HREF, downloadUrl(null));
+        downloadContentLink.setAttribute(UIConstants.DOWNLOAD, content.getName());
+        downloadContentLink.classList.remove(disabled);
+        removeContentButton.disabled = true;
+
+        Elements.setVisible(pleaseSelect.asElement(), false);
+        Elements.setVisible(editorControls, false);
+        Elements.setVisible(editor.asElement(), false);
+        Elements.setVisible(deploymentPreview.asElement(), !content.isExploded());
+        Elements.setVisible(unsupportedFileType.asElement(), false);
+        Elements.setVisible(previewContainer, false);
+
+        deploymentPreview.setHeader(content.getName());
+        deploymentPreview.setPrimaryAction(resources.constants().download(),
+                () -> window.location.assign(downloadUrl(null)));
+    }
+
+    private void directory() {
+        downloadContentLink.removeAttribute(UIConstants.HREF);
+        downloadContentLink.removeAttribute(UIConstants.DOWNLOAD);
+        downloadContentLink.classList.add(disabled);
+        removeContentButton.disabled = true;
+
+        Elements.setVisible(pleaseSelect.asElement(), false);
+        Elements.setVisible(editorControls, false);
+        Elements.setVisible(editor.asElement(), false);
+        Elements.setVisible(deploymentPreview.asElement(), false);
+        Elements.setVisible(unsupportedFileType.asElement(), false);
+        Elements.setVisible(previewContainer, false);
+    }
+
+    private void viewInEditor(ContentEntry contentEntry) {
+        downloadContentLink.setAttribute(UIConstants.HREF, downloadUrl(contentEntry));
+        downloadContentLink.setAttribute(UIConstants.DOWNLOAD, contentEntry.name);
+        downloadContentLink.classList.remove(disabled);
+        removeContentButton.disabled = false;
+
+        Elements.setVisible(pleaseSelect.asElement(), false);
+        Elements.setVisible(editorControls, true);
+        Elements.setVisible(editor.asElement(), true);
+        Elements.setVisible(deploymentPreview.asElement(), false);
+        Elements.setVisible(unsupportedFileType.asElement(), false);
+        Elements.setVisible(previewContainer, false);
+        adjustEditorHeight();
+
+        editorStatus.textContent = contentEntry.name + "" - "" + Format.humanReadableFileSize(contentEntry.fileSize);
+        loadContent(contentEntry, result -> {
+            saveContentButton.disabled = true;
+            editor.setModeFromPath(contentEntry.name);
+            editor.getEditor().getSession().setValue(result);
+            editor.getEditor().getSession().on(""change"", delta -> saveContentButton.disabled = false); //NON-NLS
+        });
+    }
+
+    private void viewInPreview(ContentEntry contentEntry) {
+        downloadContentLink.setAttribute(UIConstants.HREF, downloadUrl(contentEntry));
+        downloadContentLink.setAttribute(UIConstants.DOWNLOAD, contentEntry.name);
+        downloadContentLink.classList.remove(disabled);
+        removeContentButton.disabled = false;
+        previewImage.src = downloadUrl(contentEntry);
+
+        Elements.setVisible(pleaseSelect.asElement(), false);
+        Elements.setVisible(editorControls, false);
+        Elements.setVisible(editor.asElement(), false);
+        Elements.setVisible(deploymentPreview.asElement(), false);
+        Elements.setVisible(unsupportedFileType.asElement(), false);
+        Elements.setVisible(previewContainer, true);
+    }
+
+    private void unsupportedFileType(ContentEntry contentEntry) {
+        downloadContentLink.setAttribute(UIConstants.HREF, downloadUrl(contentEntry));
+        downloadContentLink.setAttribute(UIConstants.DOWNLOAD, contentEntry.name);
+        downloadContentLink.classList.remove(disabled);
+        removeContentButton.disabled = false;
+
+        Elements.setVisible(pleaseSelect.asElement(), false);
+        Elements.setVisible(editorControls, false);
+        Elements.setVisible(editor.asElement(), false);
+        Elements.setVisible(deploymentPreview.asElement(), false);
+        Elements.setVisible(unsupportedFileType.asElement(), true);
+        Elements.setVisible(previewContainer, false);
+    }
+
 
     // ------------------------------------------------------ helper methods
 
+    private String selectedId() {
+        if (tree != null) {
+            Node<ContentEntry> selection = tree.getSelected();
+            if (selection != null) {
+                return selection.id;
+            }
+        }
+        return null;
+    }
+
     private String selectedPath() {
         String path = null;
-        Node<ContentEntry> selection = tree.api().getSelected();
+        Node<ContentEntry> selection = tree.getSelected();
         if (selection != null && !selection.id.equals(Ids.CONTENT_TREE_ROOT)) {
             path = Strings.strip(selection.data.path, ""/"");
             if (!selection.data.directory) {
@@ -589,22 +674,7 @@ private File file(String name, String content) {
         return new File(new ConstructorContentsArrayUnionType[]{contents}, name);
     }
 
-    private void loadContent(ContentEntry contentEntry, Consumer<String> successCallback) {
-        if (!contentEntry.directory) {
-            ResourceAddress address = new ResourceAddress().add(DEPLOYMENT, content.getName());
-            Operation operation = new Operation.Builder(address, READ_CONTENT)
-                    .param(PATH, contentEntry.path)
-                    .build();
-            dispatcher.download(operation, successCallback);
-        }
-    }
-
-    private String downloadUrl(ContentEntry contentEntry) {
-        ResourceAddress address = new ResourceAddress().add(DEPLOYMENT, content.getName());
-        Operation.Builder builder = new Operation.Builder(address, READ_CONTENT);
-        if (contentEntry != null) {
-            builder.param(PATH, contentEntry.path);
-        }
-        return dispatcher.downloadUrl(builder.build());
+    private Completable awaitTreeReady() {
+        return Completable.fromEmitter(emitter -> tree.onReady((event, any) -> emitter.onCompleted()));
     }
 }",2017-10-07T20:47:42Z,156
"@@ -29,17 +29,16 @@
 import org.jboss.hal.core.finder.FinderPathFactory;
 import org.jboss.hal.core.mvp.ApplicationFinderPresenter;
 import org.jboss.hal.core.mvp.HalView;
-import org.jboss.hal.core.mvp.HasPresenter;
-import org.jboss.hal.dmr.Composite;
-import org.jboss.hal.dmr.CompositeResult;
-import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Operation;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.ManagementModel;
 import org.jboss.hal.meta.token.NameTokens;
 
-import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.CONTENT;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.DEPLOYMENT;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.INCLUDE_RUNTIME;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.READ_RESOURCE_OPERATION;
 
 public class BrowseContentPresenter
         extends ApplicationFinderPresenter<BrowseContentPresenter.MyView, BrowseContentPresenter.MyProxy> {
@@ -49,8 +48,8 @@ public class BrowseContentPresenter
     @NameToken(NameTokens.BROWSE_CONTENT)
     public interface MyProxy extends ProxyPlace<BrowseContentPresenter> {}
 
-    public interface MyView extends HalView, HasPresenter<BrowseContentPresenter> {
-        void setContent(Content content, ModelNode browseContentResult);
+    public interface MyView extends HalView {
+        void setContent(Content content);
     }
     // @formatter:on
 
@@ -73,12 +72,6 @@ public BrowseContentPresenter(EventBus eventBus,
         this.environment = environment;
     }
 
-    @Override
-    protected void onBind() {
-        super.onBind();
-        getView().setPresenter(this);
-    }
-
     @Override
     public void prepareFromRequest(PlaceRequest request) {
         super.prepareFromRequest(request);
@@ -94,16 +87,12 @@ public FinderPath finderPath() {
     protected void reload() {
         if (ManagementModel.supportsReadContentFromDeployment(environment.getManagementVersion())) {
             ResourceAddress address = new ResourceAddress().add(DEPLOYMENT, content);
-            Operation readContent = new Operation.Builder(address, READ_RESOURCE_OPERATION)
+            Operation operation = new Operation.Builder(address, READ_RESOURCE_OPERATION)
                     .param(INCLUDE_RUNTIME, true)
                     .build();
-            Operation browseContent = new Operation.Builder(address, BROWSE_CONTENT).build();
-            dispatcher.execute(new Composite(readContent, browseContent), (CompositeResult result) -> {
-                Content content = new Content(result.step(0).get(RESULT));
-                ModelNode browseContentResult = result.step(1).get(RESULT);
-                getView().setContent(content, browseContentResult);
-            });
+            dispatcher.execute(operation, result -> getView().setContent(new Content(result)));
+        } else {
+            // TODO Fallback when browse-content is not supported
         }
-        // TODO Fallback when browse-content is not supported
     }
 }",2017-10-07T20:47:42Z,333
"@@ -20,34 +20,22 @@
 import com.google.web.bindery.event.shared.EventBus;
 import org.jboss.hal.core.deployment.Content;
 import org.jboss.hal.core.mvp.HalViewImpl;
-import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.resources.Resources;
 
 public class BrowseContentView extends HalViewImpl implements BrowseContentPresenter.MyView {
 
     private final BrowseContentElement browseContent;
-    private BrowseContentPresenter presenter;
 
     @Inject
     public BrowseContentView(Dispatcher dispatcher, EventBus eventBus, Resources resources) {
-        this.browseContent = new BrowseContentElement(dispatcher, eventBus, resources, () -> presenter.reload());
+        browseContent = new BrowseContentElement(dispatcher, eventBus, resources);
+        registerAttachable(browseContent);
         initElement(browseContent);
     }
 
     @Override
-    public void attach() {
-        super.attach();
-        browseContent.attach();
-    }
-
-    @Override
-    public void setPresenter(BrowseContentPresenter presenter) {
-        this.presenter = presenter;
-    }
-
-    @Override
-    public void setContent(Content content, ModelNode browseContentResult) {
-        browseContent.setContent(content, browseContentResult);
+    public void setContent(Content content) {
+        browseContent.setContent(content);
     }
 }",2017-10-07T20:47:42Z,289
"@@ -19,6 +19,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.function.Function;
 
 import com.google.common.base.Splitter;
 import com.google.common.collect.Iterables;
@@ -38,8 +39,10 @@ class ContentParser {
     private static final String DIRECTORY = ""directory"";
     private static final String FILE_SIZE = ""file-size"";
 
+    static final Function<String, String> NODE_ID = path -> Ids.build(""bct"", path, ""node"");
+
     @SuppressWarnings(""unchecked"")
-    void parse(Array<Node<ContentEntry>> nodes, Node<ContentEntry> root, List<ModelNode> content) {
+    void parse(Node<ContentEntry> root, Array<Node<ContentEntry>> nodes, List<ModelNode> content) {
         nodes.push(root);
 
         Map<String, Node<ContentEntry>> nodesByPath = new HashMap<>();
@@ -86,8 +89,7 @@ private ContentEntry contentEntry(ModelNode node) {
     @SuppressWarnings(""unchecked"")
     private Node<ContentEntry> pushFolder(Array<Node<ContentEntry>> nodes, Node<ContentEntry> parent,
             ContentEntry contentEntry) {
-        Node<ContentEntry> node = new Node.Builder<>(Ids.build(parent.id, Ids.uniqueId()), contentEntry.name,
-                contentEntry)
+        Node<ContentEntry> node = new Node.Builder<>(NODE_ID.apply(contentEntry.path), contentEntry.name, contentEntry)
                 .parent(parent.id)
                 .folder()
                 .build();
@@ -98,8 +100,7 @@ private Node<ContentEntry> pushFolder(Array<Node<ContentEntry>> nodes, Node<Cont
     @SuppressWarnings(""unchecked"")
     private Node<ContentEntry> pushEntry(Array<Node<ContentEntry>> nodes, Node<ContentEntry> parent,
             ContentEntry contentEntry) {
-        Node<ContentEntry> node = new Node.Builder<>(Ids.build(parent.id, Ids.uniqueId()), contentEntry.name,
-                contentEntry)
+        Node<ContentEntry> node = new Node.Builder<>(NODE_ID.apply(contentEntry.path), contentEntry.name, contentEntry)
                 .parent(parent.id)
                 .icon(fontAwesome(""file-text-o""))
                 .build();",2017-10-07T20:47:42Z,48
"@@ -23,7 +23,6 @@
 import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
 import com.gwtplatform.mvp.client.proxy.ProxyPlace;
 import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
-import org.jboss.hal.config.Environment;
 import org.jboss.hal.core.deployment.Deployment;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderPath;
@@ -32,14 +31,10 @@
 import org.jboss.hal.core.mvp.HalView;
 import org.jboss.hal.core.mvp.HasPresenter;
 import org.jboss.hal.core.runtime.server.Server;
-import org.jboss.hal.dmr.Composite;
-import org.jboss.hal.dmr.CompositeResult;
-import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Operation;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.flow.Progress;
-import org.jboss.hal.meta.ManagementModel;
 import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.resources.Resources;
 import org.jboss.hal.spi.Footer;
@@ -48,7 +43,10 @@
 import org.jboss.hal.spi.Requires;
 
 import static org.jboss.hal.client.deployment.StandaloneDeploymentColumn.DEPLOYMENT_ADDRESS;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.DEPLOY;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.DEPLOYMENT;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.INCLUDE_RUNTIME;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.READ_RESOURCE_OPERATION;
 
 public class StandaloneDeploymentPresenter extends
         ApplicationFinderPresenter<StandaloneDeploymentPresenter.MyView, StandaloneDeploymentPresenter.MyProxy> {
@@ -61,14 +59,13 @@ public interface MyProxy extends ProxyPlace<StandaloneDeploymentPresenter> {}
 
     public interface MyView extends HalView, HasPresenter<StandaloneDeploymentPresenter> {
         void reset();
-        void update(Deployment deployment, ModelNode browseContentResult, int tab);
+        void update(Deployment deployment, int tab);
     }
     // @formatter:on
 
     private final FinderPathFactory finderPathFactory;
     private final Dispatcher dispatcher;
     private final Provider<Progress> progress;
-    private final Environment environment;
     private final Resources resources;
     private String deployment;
 
@@ -80,13 +77,11 @@ public StandaloneDeploymentPresenter(EventBus eventBus,
             FinderPathFactory finderPathFactory,
             Dispatcher dispatcher,
             @Footer Provider<Progress> progress,
-            Environment environment,
             Resources resources) {
         super(eventBus, view, proxy, finder);
         this.finderPathFactory = finderPathFactory;
         this.dispatcher = dispatcher;
         this.progress = progress;
-        this.environment = environment;
         this.resources = resources;
     }
 
@@ -112,35 +107,26 @@ protected void reload() {
     }
 
     private void reload(int tab) {
-        boolean supportsBrowseContent = ManagementModel.supportsReadContentFromDeployment(
-                environment.getManagementVersion());
         ResourceAddress address = new ResourceAddress().add(DEPLOYMENT, deployment);
-        Operation readDeployment = new Operation.Builder(address, READ_RESOURCE_OPERATION)
+        Operation operation = new Operation.Builder(address, READ_RESOURCE_OPERATION)
                 .param(INCLUDE_RUNTIME, true)
                 .build();
-        Operation browseContent = new Operation.Builder(address, BROWSE_CONTENT).build();
-        Composite composite = new Composite(readDeployment);
-        if (supportsBrowseContent) {
-            composite.add(browseContent);
-        }
-        dispatcher.execute(composite, (CompositeResult result) -> {
-            Deployment deployment = new Deployment(Server.STANDALONE, result.step(0).get(RESULT));
-            ModelNode browseContentResult = supportsBrowseContent ? result.step(1).get(RESULT) : new ModelNode();
+        dispatcher.execute(operation, result -> {
             getView().reset();
-            getView().update(deployment, browseContentResult, tab);
+            getView().update(new Deployment(Server.STANDALONE, result), tab);
         });
     }
 
     void enable(String deployment) {
-        ResourceAddress address = new ResourceAddress().add(DEPLOYMENT, deployment);
         progress.get().reset();
         progress.get().tick();
+        ResourceAddress address = new ResourceAddress().add(DEPLOYMENT, deployment);
         Operation operation = new Operation.Builder(address, DEPLOY).build();
         dispatcher.execute(operation, result -> {
             progress.get().finish();
-            reload(1); // stay on model browser tab
-            MessageEvent
-                    .fire(getEventBus(), Message.success(resources.messages().deploymentEnabledSuccess(deployment)));
+            MessageEvent.fire(getEventBus(),
+                    Message.success(resources.messages().deploymentEnabledSuccess(deployment)));
+            reload(1);
         });
     }
 }",2017-10-07T20:47:42Z,334
"@@ -25,7 +25,6 @@
 import org.jboss.hal.core.deployment.Deployment;
 import org.jboss.hal.core.modelbrowser.ModelBrowser;
 import org.jboss.hal.core.mvp.HalViewImpl;
-import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.ManagementModel;
 import org.jboss.hal.resources.Ids;
@@ -48,7 +47,7 @@ public class StandaloneDeploymentView extends HalViewImpl implements StandaloneD
     public StandaloneDeploymentView(Dispatcher dispatcher, ModelBrowser modelBrowser,
             Environment environment, EventBus eventBus, Resources resources) {
         supportsReadContent = ManagementModel.supportsReadContentFromDeployment(environment.getManagementVersion());
-        browseContent = new BrowseContentElement(dispatcher, eventBus, resources, () -> presenter.reload());
+        browseContent = new BrowseContentElement(dispatcher, eventBus, resources);
         deploymentModel = new DeploymentModelElement(modelBrowser, resources);
 
         if (supportsReadContent) {
@@ -102,9 +101,9 @@ public void reset() {
     }
 
     @Override
-    public void update(Deployment deployment, ModelNode browseContentResult, int tab) {
+    public void update(Deployment deployment, int tab) {
         if (supportsReadContent) {
-            browseContent.setContent(deployment, browseContentResult);
+            browseContent.setContent(deployment);
             tabs.showTab(tab);
         }
         deploymentModel.update(deployment, () -> presenter.enable(deployment.getName()));",2017-10-07T20:47:42Z,281
"@@ -59,17 +59,8 @@ public class JndiView extends HalViewImpl implements JndiPresenter.MyView {
     @Inject
     public JndiView(JndiResources jndiResources, Resources resources) {
 
-        search = new Search.Builder(Ids.JNDI_SEARCH,
-                query -> {
-                    if (tree.api() != null) {
-                        tree.api().search(query);
-                    }
-                })
-                .onClear(() -> {
-                    if (tree.api() != null) {
-                        tree.api().clearSearch();
-                    }
-                })
+        search = new Search.Builder(Ids.JNDI_SEARCH, query -> tree.search(query))
+                .onClear(() -> tree.clearSearch())
                 .build();
 
         Metadata metadata = Metadata.staticDescription(jndiResources.jndi());
@@ -89,7 +80,12 @@ public JndiView(JndiResources jndiResources, Resources resources) {
                                                 .on(click, event -> presenter.reload())
                                                 .add(i().css(fontAwesome(CSS.refresh))))
                                         .add(button().css(btn, btnDefault)
-                                                .on(click, event -> collapse(tree.api().getSelected()))
+                                                .on(click, event -> {
+                                                    Node<JndiContext> selection = tree.getSelected();
+                                                    if (selection != null) {
+                                                        tree.selectNode(selection.id, true);
+                                                    }
+                                                })
                                                 .add(i().css(fontAwesome(""minus"")))))
                                 .add(search))
                         .add(treeContainer = div().css(CSS.treeContainer).asElement()))
@@ -119,12 +115,6 @@ private void adjustHeight() {
         treeContainer.style.height = vh(offset);
     }
 
-    private void collapse(final Node<JndiContext> node) {
-        if (node != null) {
-            tree.select(node.id, true);
-        }
-    }
-
     @Override
     @SuppressWarnings(""HardCodedStringLiteral"")
     public void update(final ModelNode jndi) {",2017-10-07T20:47:42Z,335
"@@ -16,49 +16,39 @@
 package org.jboss.hal.ballroom.tree;
 
 import jsinterop.annotations.JsMethod;
-import jsinterop.annotations.JsOverlay;
 import jsinterop.annotations.JsType;
 import org.jboss.hal.ballroom.JsCallback;
 
 @JsType(isNative = true)
-public class Api<T> {
+class Api<T> {
 
-    @JsMethod(name = ""close_node"")
-    public native void closeNode(String id);
-
-    @JsMethod(name = ""open_node"")
-    public native void openNode(String id);
-
-    @JsMethod(name = ""open_node"")
-    public native void openNode(String id, JsCallback callback);
+    @JsMethod
+    native void close_node(String id);
 
-    @JsMethod(name = ""refresh_node"")
-    public native void refreshNode(String id);
+    @JsMethod
+    native void deselect_all(boolean suppressEvent);
 
-    @JsMethod(name = ""get_node"")
-    public native Node<T> getNode(String id);
+    @JsMethod
+    native Node<T>[] get_selected(boolean full);
 
     @JsMethod
-    public native Node<T>[] get_selected(boolean full);
+    native void select_node(String id, boolean suppressEvent, boolean preventOpen);
 
-    @JsOverlay
-    public final Node<T> getSelected() {
-        Node<T>[] selected = get_selected(true);
-        return selected.length == 0 ? null : selected[0];
-    }
+    @JsMethod
+    native Node<T> get_node(String id);
 
-    @JsMethod(name = ""select_node"")
-    public native void selectNode(String id, boolean suppressEvent, boolean preventOpen);
+    @JsMethod
+    native void open_node(String id, JsCallback callback);
 
-    @JsMethod(name = ""deselect_all"")
-    public native void deselectAll(boolean suppressEvent);
+    @JsMethod
+    native void refresh_node(String id);
 
     @JsMethod
-    public native void search(String query);
+    native void search(String query);
 
-    @JsMethod(name = ""clear_search"")
-    public native void clearSearch();
+    @JsMethod
+    native void clear_search();
 
     @JsMethod
-    public native void destroy(boolean keepHtml);
+    native void destroy(boolean keepHtml);
 }",2017-10-07T20:47:42Z,336
"@@ -0,0 +1,36 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.ballroom.tree;
+
+import jsinterop.annotations.JsMethod;
+import jsinterop.annotations.JsType;
+import org.jetbrains.annotations.NonNls;
+
+import static jsinterop.annotations.JsPackage.GLOBAL;
+
+@JsType(isNative = true)
+class Bridge<T> {
+
+    @JsMethod(namespace = GLOBAL, name = ""$"")
+    native static <T> Bridge<T> select(String selector);
+
+    native void jstree(Options options);
+
+    @SuppressWarnings(""SameParameterValue"")
+    native Api<T> jstree(boolean _true);
+
+    native <E> void on(@NonNls String event, EventHandler<E> handler);
+}",2017-10-07T20:47:42Z,67
"@@ -0,0 +1,26 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.ballroom.tree;
+
+import elemental2.dom.Event;
+import jsinterop.annotations.JsFunction;
+
+@JsFunction
+@FunctionalInterface
+public interface EventHandler<E> {
+
+    void onEvent(Event event, E payload);
+}",2017-10-07T20:47:42Z,337
"@@ -15,28 +15,16 @@
  */
 package org.jboss.hal.ballroom.tree;
 
-import elemental2.dom.Event;
-import jsinterop.annotations.JsFunction;
 import jsinterop.annotations.JsType;
 
 import static jsinterop.annotations.JsPackage.GLOBAL;
 import static org.jboss.hal.resources.UIConstants.OBJECT;
 
-/** ActionHandler when the selection changes. */
-@JsFunction
-@FunctionalInterface
-public interface SelectionChangeHandler<T> {
+@JsType(isNative = true, namespace = GLOBAL, name = OBJECT)
+public class SelectionContext<T> {
 
-    @JsType(isNative = true, namespace = GLOBAL, name = OBJECT)
-    class SelectionContext<T> {
-        public String action;
-        public Api<T> api;
-        public Node<T> node;
-        public String[] selected;
-    }
-
-    /**
-     * Called when a selection changed. That is when an item is selected <em>or</em> deselected.
-     */
-    void onSelectionChanged(Event event, SelectionContext<T> context);
+    public String action;
+    public Api<T> api;
+    public Node<T> node;
+    public String[] selected;
 }",2017-10-07T20:47:42Z,68
"@@ -16,45 +16,25 @@
 package org.jboss.hal.ballroom.tree;
 
 import elemental2.core.Array;
+import elemental2.dom.Element;
 import elemental2.dom.HTMLElement;
-import jsinterop.annotations.JsMethod;
-import jsinterop.annotations.JsType;
 import org.jboss.gwt.elemento.core.IsElement;
 import org.jboss.hal.ballroom.Attachable;
+import org.jboss.hal.ballroom.JsCallback;
 
 import static elemental2.dom.DomGlobal.document;
-import static jsinterop.annotations.JsPackage.GLOBAL;
 import static org.jboss.gwt.elemento.core.Elements.div;
 
 public class Tree<T> implements IsElement, Attachable {
 
-    @JsType(isNative = true)
-    public static class Bridge<T> {
-
-        @JsMethod(namespace = GLOBAL, name = ""$"")
-        public native static <T> Bridge<T> select(String selector);
-
-        public native void jstree(Options options);
-
-        /**
-         * Adds a selection change callback.
-         */
-        public native void on(String event, SelectionChangeHandler<T> handler);
-
-        public native Api<T> jstree(boolean _true);
-    }
-
-
     private static final String ROOT_NODE = ""#"";
-    private static final String CHANGED_EVENT = ""changed.jstree"";
 
     private final String id;
     private final HTMLElement div;
     private final Options options;
     private Bridge<T> bridge;
     private Api<T> api;
 
-
     /**
      * Creates a tree with the specified root node. All other nodes are loaded on demand using the provided callback.
      */
@@ -115,45 +95,90 @@ public HTMLElement asElement() {
      */
     @Override
     public void attach() {
-        if (api == null) {
+        if (bridge == null || api == null) {
             // TODO check security context and adjust options if necessary
             bridge = Bridge.select(""#"" + id);
             bridge.jstree(options);
             api = bridge.jstree(true);
         }
     }
 
+    private Bridge<T> bridge() {
+        if (bridge == null || api == null) {
+            throw unattached();
+        }
+        return bridge;
+    }
 
-    // ------------------------------------------------------ API access
 
-    /**
-     * Getter for the {@link org.jboss.hal.ballroom.tree.Api} instance.
-     *
-     * @throws IllegalStateException if the API wasn't initialized using {@link #attach()}
-     */
-    public Api<T> api() {
-        if (api == null) {
-            throw new IllegalStateException(
-                    ""Tree('"" + id + ""') is not attached. Call Tree.attach() before using any of the API methods!"");
+    private Api<T> api() {
+        if (bridge == null || api == null) {
+            throw unattached();
         }
         return api;
     }
 
-    public final void onSelectionChange(SelectionChangeHandler<T> handler) {
-        if (bridge == null) {
-            throw new IllegalStateException(
-                    ""Tree('"" + id + ""') is not attached. Call Tree.attach() before you register callbacks!"");
-        }
-        bridge.on(CHANGED_EVENT, handler);
+    private IllegalStateException unattached() {
+        return new IllegalStateException(
+                ""Tree('"" + id + ""') is not attached. Call Tree.attach() before using any of the API methods!"");
+    }
+
+
+    // ------------------------------------------------------ methods
+
+    public void destroy() {
+        api().destroy(false);
+    }
+
+    public Node<T> getNode(String id) {
+        return api().get_node(id);
     }
 
-    public void select(final String id, final boolean closeSelected) {
-        api().deselectAll(true);
-        api().selectNode(id, false, false);
+    public Node<T> getSelected() {
+        Node<T>[] selected = api().get_selected(true);
+        return selected.length == 0 ? null : selected[0];
+    }
+
+    public void openNode(String id, JsCallback callback) {
+        api().open_node(id, callback);
+    }
+
+    public void refreshNode(String id) {
+        api().refresh_node(id);
+    }
+
+    public void selectNode(String id) {
+        selectNode(id, false);
+    }
+
+    public void selectNode(String id, boolean closeSelected) {
+        api().deselect_all(true);
+        api().select_node(id, false, false);
         if (closeSelected) {
-            api().closeNode(id);
+            api().close_node(id);
         }
-        asElement().focus();
-        document.getElementById(id).scrollIntoView(false);
+        Element element = document.getElementById(id);
+        if (element != null) {
+            element.scrollIntoView(false);
+        }
+    }
+
+    public void search(String query) {
+        api().search(query);
+    }
+
+    public void clearSearch() {
+        api().clear_search();
+    }
+
+
+    // ------------------------------------------------------ events
+
+    public void onReady(EventHandler<Void> handler) {
+        bridge().on(""ready.jstree"", handler);
+    }
+
+    public void onSelectionChange(EventHandler<SelectionContext<T>> handler) {
+        bridge().on(""changed.jstree"", handler);
     }
 }",2017-10-07T20:47:42Z,338
"@@ -63,7 +63,7 @@ class ChildrenPanel implements HasElements, Attachable {
         //noinspection HardCodedStringLiteral
         Options<String> options = new OptionsBuilder<String>()
                 .column(""resource"", Names.RESOURCE, (cell, type, row, meta) -> row)
-                .column(resources.constants().view(), row -> modelBrowser.tree.api().openNode(parent.id,
+                .column(resources.constants().view(), row -> modelBrowser.tree.openNode(parent.id,
                         () -> modelBrowser.select(uniqueId(parent, row), false)))
                 .button(resources.constants().add(), table -> modelBrowser.add(parent, table.getRows()))
 ",2017-10-07T20:47:42Z,113
"@@ -32,7 +32,7 @@
 import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.ballroom.form.Form.FinishReset;
 import org.jboss.hal.ballroom.tree.Node;
-import org.jboss.hal.ballroom.tree.SelectionChangeHandler.SelectionContext;
+import org.jboss.hal.ballroom.tree.SelectionContext;
 import org.jboss.hal.ballroom.tree.Tree;
 import org.jboss.hal.ballroom.wizard.Wizard;
 import org.jboss.hal.core.CrudOperations;
@@ -121,8 +121,8 @@ private class OpenNodeTask implements Task<FlowContext> {
         @Override
         public Completable call(FlowContext context) {
             return Completable.fromEmitter(emitter -> {
-                if (tree.api().getNode(id) != null) {
-                    tree.api().openNode(id, emitter::onCompleted);
+                if (tree.getNode(id) != null) {
+                    tree.openNode(id, emitter::onCompleted);
                 } else {
                     emitter.onCompleted();
                 }
@@ -179,17 +179,17 @@ public ModelBrowser(CrudOperations crud,
 
         buttonGroup = div().css(btnGroup, modelBrowserButtons)
                 .add(filter = button().css(btn, btnDefault)
-                        .on(click, event -> filter(tree.api().getSelected()))
+                        .on(click, event -> filter(tree.getSelected()))
                         .title(resources.constants().filter())
                         .add(i().css(fontAwesome(CSS.filter)))
                         .asElement())
                 .add(refresh = button().css(btn, btnDefault)
-                        .on(click, event -> refresh(tree.api().getSelected()))
+                        .on(click, event -> refresh(tree.getSelected()))
                         .title(resources.constants().refresh())
                         .add(i().css(fontAwesome(CSS.refresh)))
                         .asElement())
                 .add(collapse = button().css(btn, btnDefault)
-                        .on(click, event -> collapse(tree.api().getSelected()))
+                        .on(click, event -> collapse(tree.getSelected()))
                         .title(resources.constants().collapse())
                         .add(i().css(fontAwesome(""minus"")))
                         .asElement())
@@ -261,11 +261,11 @@ private void emptyTree() {
 
     private void filter(Node<Context> node) {
         if (node != null && node.parent != null) {
-            Node<Context> parent = tree.api().getNode(node.parent);
+            Node<Context> parent = tree.getNode(node.parent);
             FilterInfo filterInfo = new FilterInfo(parent, node);
             filterStack.add(filterInfo);
             filter(filterInfo);
-            tree.api().openNode(MODEL_BROWSER_ROOT, () -> tree.select(MODEL_BROWSER_ROOT, false));
+            tree.openNode(MODEL_BROWSER_ROOT, () -> tree.selectNode(MODEL_BROWSER_ROOT));
         }
     }
 
@@ -289,7 +289,7 @@ private void filter(FilterInfo filter) {
         }
 
         // reset tree
-        tree.api().destroy(false);
+        tree.destroy();
         initTree(filter.address, filter.text);
     }
 
@@ -314,7 +314,7 @@ public void onError(FlowContext context, Throwable error) {
 
                         @Override
                         public void onSuccess(FlowContext context) {
-                            tree.select(previousFilter.node.id, false);
+                            tree.selectNode(previousFilter.node.id);
                         }
                     });
         }
@@ -323,13 +323,13 @@ public void onSuccess(FlowContext context) {
     private void refresh(final Node<Context> node) {
         if (node != null) {
             updateNode(node);
-            tree.api().refreshNode(node.id);
+            tree.refreshNode(node.id);
         }
     }
 
     private void collapse(Node<Context> node) {
         if (node != null) {
-            tree.select(node.id, true);
+            tree.selectNode(node.id, true);
         }
     }
 
@@ -375,7 +375,7 @@ private void updateBreadcrumb(Node<Context> node) {
     }
 
     private void showResourceView(Node<Context> node, ResourceAddress address) {
-        Node<Context> parent = tree.api().getNode(node.parent);
+        Node<Context> parent = tree.getNode(node.parent);
         AddressTemplate template = asGenericTemplate(parent, address);
         metadataProcessor.lookup(template, progress.get(), new SuccessfulMetadataCallback(eventBus, resources) {
             @Override
@@ -473,20 +473,20 @@ private ResourceAddress fqAddress(Node<Context> parent, String child) {
     }
 
     void remove(ResourceAddress address) {
-        crud.remove(address.lastName(), address.lastValue(), address, () -> refresh(tree.api().getSelected()));
+        crud.remove(address.lastName(), address.lastValue(), address, () -> refresh(tree.getSelected()));
     }
 
     void save(ResourceAddress address, Map<String, Object> changedValues, Metadata metadata) {
         crud.save(address.lastName(), address.lastValue(), address, changedValues, metadata,
-                () -> refresh(tree.api().getSelected()));
+                () -> refresh(tree.getSelected()));
     }
 
     void reset(ResourceAddress address, Form<ModelNode> form, Metadata metadata) {
         crud.reset(address.lastName(), address.lastValue(), address, form, metadata,
                 new FinishReset<ModelNode>(form) {
                     @Override
                     public void afterReset(final Form<ModelNode> form) {
-                        refresh(tree.api().getSelected());
+                        refresh(tree.getSelected());
                     }
                 });
     }
@@ -527,8 +527,8 @@ public void setRoot(ResourceAddress root, boolean updateBreadcrumb) {
         dispatcher.execute(ping,
                 result -> {
                     initTree(root, resource);
-                    tree.api().openNode(MODEL_BROWSER_ROOT, () -> resourcePanel.tabs.showTab(0));
-                    tree.select(MODEL_BROWSER_ROOT, false);
+                    tree.openNode(MODEL_BROWSER_ROOT, () -> resourcePanel.tabs.showTab(0));
+                    tree.selectNode(MODEL_BROWSER_ROOT);
 
                     adjustHeight();
                 },
@@ -551,7 +551,7 @@ public void setRoot(ResourceAddress root, boolean updateBreadcrumb) {
     }
 
     public void select(final String id, final boolean closeSelected) {
-        tree.select(id, closeSelected);
+        tree.selectNode(id, closeSelected);
     }
 
     @Override",2017-10-07T20:47:42Z,114
"@@ -50,7 +50,7 @@ public static class Segment {
         List<Node<Context>> nodes = new ArrayList<>();
         while (current != null && !Ids.MODEL_BROWSER_ROOT.equals(current.id)) {
             nodes.add(current);
-            current = modelBrowser.tree.api().getNode(current.parent);
+            current = modelBrowser.tree.getNode(current.parent);
         }
         Collections.reverse(nodes);
 ",2017-10-07T20:47:42Z,339
"@@ -27,9 +27,7 @@ public interface UIConstants {
     /** The default polling interval used for {@code setInterval()} */
     double POLLING_INTERVAL = 3333;
 
-    /**
-     * The timeout until a non-sticky message is hidden
-     */
+    /** The timeout until a non-sticky message is hidden */
     double MESSAGE_TIMEOUT = 6000; // ms
 
     long RELOAD_MESSAGE_ID = 5102007;
@@ -42,7 +40,6 @@ public interface UIConstants {
     String BODY = ""body"";
     String BUTTON = ""button"";
     String CHECKED = ""checked"";
-    String COMBOBOX = ""combobox"";
     String COLLAPSE = ""collapse"";
     String CONSTRAINT = ""constraint"";
     String CONTAINER = ""container"";
@@ -68,7 +65,6 @@ public interface UIConstants {
     String NAME = ""name"";
     String NBSP = ""&nbsp;"";
     String OBJECT = ""Object"";
-    String OPTION = ""option"";
     String PLACEHOLDER = ""placeholder"";
     String PLACEMENT = ""placement"";
     String PRESENTATION = ""presentation"";
@@ -90,7 +86,6 @@ public interface UIConstants {
     String VALUE = ""value"";
     String WIDTH = ""width"";
 
-
     static String data(String name) {
         return ""data-"" + name; //NON-NLS
     }",2017-10-07T20:47:42Z,320
"@@ -0,0 +1,228 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.elytron;
+
+import java.util.List;
+
+import elemental2.dom.HTMLElement;
+import org.jboss.gwt.elemento.core.IsElement;
+import org.jboss.hal.ballroom.Attachable;
+import org.jboss.hal.ballroom.Pages;
+import org.jboss.hal.ballroom.Tabs;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.table.Table;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.core.mbui.table.ModelNodeTable;
+import org.jboss.hal.core.mbui.table.TableButtonFactory;
+import org.jboss.hal.core.mvp.HasPresenter;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
+
+import static org.jboss.gwt.elemento.core.Elements.h;
+import static org.jboss.gwt.elemento.core.Elements.p;
+import static org.jboss.gwt.elemento.core.Elements.section;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafeList;
+import static org.jboss.hal.dmr.ModelNodeHelper.storeIndex;
+
+/**
+ * @author Claudio Miranda <claudio@redhat.com>
+ */
+public class LdapRealmElement implements IsElement<HTMLElement>, Attachable, HasPresenter<RealmsPresenter> {
+
+    private final Table<NamedNode> ldapRealmTable;
+    private final Form<NamedNode> ldapRealmForm;
+    private final Form<NamedNode> identityMappingForm;
+    private final Form<NamedNode> userPasswordMapperForm;
+    private final Form<NamedNode> otpCredentialMapperForm;
+    private final Form<NamedNode> x509CredentialMapperForm;
+    private final Table<ModelNode> iamTable; // iam = identity mapping -> attribute-mapping
+    private final Form<ModelNode> iamForm;
+    private final Pages pages;
+    private RealmsPresenter presenter;
+    private String selectedLdapRealm;
+    private NewItemAttributesItem newIdentityAttributes;
+    private String selectedIam;
+    private int iamIndex;
+
+    LdapRealmElement(final Metadata metadata, final TableButtonFactory tableButtonFactory, final Resources resources) {
+
+        // LDAP Realm
+        ldapRealmTable = new ModelNodeTable.Builder<NamedNode>(Ids.ELYTRON_LDAP_REALM_TABLE, metadata)
+                .button(tableButtonFactory.add(metadata.getTemplate(), table -> presenter.addLdapRealm()))
+                .button(tableButtonFactory.remove(Names.LDAP_REALM, metadata.getTemplate(),
+                        (table) -> table.selectedRow().getName(), () -> presenter.reloadLdapRealms()))
+                .column(NAME, (cell, type, row, meta) -> row.getName())
+                .column(Names.IDENTITY_ATTRIBUTE_MAPPING, this::showIdentityAttributeMapping, ""15em"") //NON-NLS
+                .build();
+
+        ldapRealmForm = new ModelNodeForm.Builder<NamedNode>(Ids.ELYTRON_LDAP_REALM_FORM, metadata)
+                .onSave((form, changedValues) -> presenter.saveLdapRealm(form, changedValues))
+                .build();
+
+        Metadata identMetadata = metadata.forComplexAttribute(IDENTITY_MAPPING);
+        newIdentityAttributes = new NewItemAttributesItem(""new-identity-attributes"");
+        identityMappingForm = new ModelNodeForm.Builder<NamedNode>(Ids.ELYTRON_LDAP_REALM_FORM, identMetadata)
+                .unboundFormItem(newIdentityAttributes)
+                .onSave((form, changedValues) -> presenter.saveComplexForm(Names.IDENTITY_MAPPING,
+                        ldapRealmTable.selectedRow().getName(), IDENTITY_MAPPING, changedValues, identMetadata))
+                .build();
+
+        Metadata userPwdMetadata = metadata
+                .forComplexAttribute(IDENTITY_MAPPING)
+                .forComplexAttribute(USER_PASSWORD_MAPPER);
+        userPasswordMapperForm = new ModelNodeForm.Builder<NamedNode>(Ids.ELYTRON_LDAP_REALM_FORM, userPwdMetadata)
+                .onSave((form, changedValues) -> presenter.saveComplexForm(Names.USER_PASSWORD_MAPPER,
+                        ldapRealmTable.selectedRow().getName(), IDENTITY_MAPPING + ""."" + USER_PASSWORD_MAPPER,
+                        changedValues, userPwdMetadata))
+                .build();
+
+        Metadata otpMetadata = metadata.forComplexAttribute(IDENTITY_MAPPING)
+                .forComplexAttribute(OTP_CREDENTIAL_MAPPER);
+        otpCredentialMapperForm = new ModelNodeForm.Builder<NamedNode>(Ids.ELYTRON_LDAP_REALM_FORM, otpMetadata)
+                .onSave((form, changedValues) -> presenter.saveComplexForm(Names.OTP_CREDENTIAL_MAPPER,
+                        ldapRealmTable.selectedRow().getName(), IDENTITY_MAPPING + ""."" + OTP_CREDENTIAL_MAPPER,
+                        changedValues, otpMetadata))
+                .build();
+
+        Metadata x509Metadata = metadata.repackageComplexAttribute(IDENTITY_MAPPING + ""."" + X509_CREDENTIAL_MAPPER, false, false, false);
+        x509CredentialMapperForm = new ModelNodeForm.Builder<NamedNode>(Ids.ELYTRON_LDAP_REALM_FORM, x509Metadata)
+                .onSave((form, changedValues) -> presenter.saveComplexForm(Names.X509_CREDENTIAL_MAPPER,
+                        ldapRealmTable.selectedRow().getName(), IDENTITY_MAPPING + ""."" + X509_CREDENTIAL_MAPPER,
+                        changedValues, x509Metadata))
+                .build();
+
+        Tabs tabs = new Tabs();
+        tabs.add(Ids.ELYTRON_LDAP_REALM_TAB, resources.constants().attributes(), ldapRealmForm.asElement());
+        tabs.add(Ids.ELYTRON_IDENTITY_ATTRIBUTE_MAPPING_TAB, Names.IDENTITY_MAPPING, identityMappingForm.asElement());
+        tabs.add(Ids.ELYTRON_USER_PASSWORD_MAPPER_TAB, Names.USER_PASSWORD_MAPPER, userPasswordMapperForm.asElement());
+        tabs.add(Ids.ELYTRON_OTP_CREDENTIAL_MAPPER_TAB, Names.OTP_CREDENTIAL_MAPPER,
+                otpCredentialMapperForm.asElement());
+        tabs.add(Ids.ELYTRON_X509_CREDENTIAL_MAPPER_TAB, Names.X509_CREDENTIAL_MAPPER,
+                x509CredentialMapperForm.asElement());
+
+        HTMLElement ldapRealmSection = section()
+                .add(h(1).textContent(Names.LDAP_REALM))
+                .add(p().textContent(metadata.getDescription().getDescription()))
+                .add(ldapRealmTable)
+                .add(tabs)
+                .asElement();
+
+        // identity mapping - attribute mapping
+        Metadata iamMetadata = metadata
+                .forComplexAttribute(IDENTITY_MAPPING)
+                .forComplexAttribute(ATTRIBUTE_MAPPING);
+        iamTable = new ModelNodeTable.Builder<>(Ids.ELYTRON_IDENTITY_ATTRIBUTE_MAPPING_TABLE, iamMetadata)
+                .button(tableButtonFactory.add(iamMetadata.getTemplate(),
+                        table -> presenter.addIdentityAttributeMapping(selectedLdapRealm)))
+                .button(tableButtonFactory.remove(iamMetadata.getTemplate(),
+                        table -> presenter.removeIdentityAttributeMapping(selectedLdapRealm, iamIndex)))
+                .column(""from"")
+                //.column(""to"")
+                //.column(""reference"")
+                .build();
+        iamForm = new ModelNodeForm.Builder<>(Ids.ELYTRON_IDENTITY_ATTRIBUTE_MAPPING_FORM, iamMetadata)
+                .onSave(((form, changedValues) -> presenter.saveIdentityAttributeMapping(selectedLdapRealm,
+                        form.getModel().get(HAL_INDEX).asInt(), changedValues)))
+                .unsorted()
+                .build();
+        HTMLElement iamSection = section()
+                .add(h(1).textContent(Names.IDENTITY_ATTRIBUTE_MAPPING))
+                .add(p().textContent(iamMetadata.getDescription().getDescription()))
+                .addAll(iamTable, iamForm)
+                .asElement();
+
+        pages = new Pages(Ids.ELYTRON_LDAP_REALM_PAGE, ldapRealmSection);
+        pages.addPage(Ids.ELYTRON_LDAP_REALM_PAGE, Ids.ELYTRON_IDENTITY_ATTRIBUTE_MAPPING_PAGE,
+                () -> Names.LDAP_REALM + "": "" + selectedLdapRealm,
+                () -> Names.IDENTITY_ATTRIBUTE_MAPPING,
+                iamSection);
+    }
+
+    @Override
+    public HTMLElement asElement() {
+        return pages.asElement();
+    }
+
+    @Override
+    public void attach() {
+        ldapRealmTable.attach();
+        ldapRealmForm.attach();
+        identityMappingForm.attach();
+        userPasswordMapperForm.attach();
+        otpCredentialMapperForm.attach();
+        x509CredentialMapperForm.attach();
+        newIdentityAttributes.attach();
+
+        ldapRealmTable.bindForm(ldapRealmForm);
+
+        // special binding because of the nested complex attributes
+        ldapRealmTable.onSelectionChange(table -> {
+            if (table.hasSelection()) {
+                NamedNode row = table.selectedRow();
+                if (row.get(IDENTITY_MAPPING).hasDefined(NEW_IDENTITY_ATTRIBUTES)) {
+                    newIdentityAttributes.setValue(row.get(IDENTITY_MAPPING).get(NEW_IDENTITY_ATTRIBUTES));
+                }
+                identityMappingForm.view(new NamedNode(row.get(IDENTITY_MAPPING)));
+                userPasswordMapperForm.view(new NamedNode(row.get(IDENTITY_MAPPING).get(USER_PASSWORD_MAPPER)));
+                otpCredentialMapperForm.view(new NamedNode(row.get(IDENTITY_MAPPING).get(OTP_CREDENTIAL_MAPPER)));
+                x509CredentialMapperForm.view(new NamedNode(row.get(IDENTITY_MAPPING).get(X509_CREDENTIAL_MAPPER)));
+            } else {
+                newIdentityAttributes.clearValue();
+                userPasswordMapperForm.clear();
+                otpCredentialMapperForm.clear();
+                x509CredentialMapperForm.clear();
+            }
+        });
+
+        iamTable.attach();
+        iamForm.attach();
+        iamTable.bindForm(iamForm);
+
+    }
+
+    @Override
+    public void setPresenter(final RealmsPresenter presenter) {
+        this.presenter = presenter;
+    }
+
+    void update(List<NamedNode> nodes) {
+        ldapRealmForm.clear();
+        ldapRealmTable.update(nodes);
+
+        if (Ids.ELYTRON_IDENTITY_ATTRIBUTE_MAPPING_PAGE.equals(pages.getCurrentId())) {
+            nodes.stream()
+                    .filter(resource -> selectedLdapRealm.equals(resource.getName()))
+                    .findFirst()
+                    .ifPresent(this::showIdentityAttributeMapping);
+        }
+    }
+
+    private void showIdentityAttributeMapping(final NamedNode resourceName) {
+        selectedLdapRealm = resourceName.getName();
+        List<ModelNode> iamNodes = failSafeList(resourceName, IDENTITY_MAPPING + ""/"" + ATTRIBUTE_MAPPING);
+        storeIndex(iamNodes);
+        iamForm.clear();
+        iamTable.update(iamNodes, modelNode -> modelNode.get(""from"").asString());
+        pages.showPage(Ids.ELYTRON_IDENTITY_ATTRIBUTE_MAPPING_PAGE);
+    }
+
+
+}",2017-07-06T06:57:16Z,340
"@@ -108,6 +108,11 @@ public String asString(final ModelNode value) {
                 EnumSet.of(DEFAULT, DEPRECATED, ENABLED, INVALID, REQUIRED, RESTRICTED), new MapMapping());
     }
 
+    NewItemAttributesItem(String attribute) {
+        super(attribute, new LabelBuilder().label(attribute), MESSAGES.newItemAttributesHint(),
+                EnumSet.of(DEFAULT, DEPRECATED, ENABLED, INVALID, REQUIRED, RESTRICTED), new MapMapping());
+    }
+
     @Override
     public void attach() {
         super.attach();",2017-07-06T06:57:16Z,15
"@@ -19,7 +19,9 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.function.Consumer;
 import java.util.function.Function;
+import java.util.logging.Logger;
 import javax.inject.Inject;
 
 import com.google.gwt.safehtml.shared.SafeHtml;
@@ -66,7 +68,6 @@
 
 import static java.util.Arrays.asList;
 import static org.jboss.hal.client.configuration.subsystem.elytron.AddressTemplates.*;
-import static org.jboss.hal.client.configuration.subsystem.elytron.AddressTemplates.JDBC_REALM_ADDRESS;
 import static org.jboss.hal.client.configuration.subsystem.elytron.ResourceView.HAL_INDEX;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
@@ -90,21 +91,9 @@ public class RealmsPresenter extends MbuiPresenter<RealmsPresenter.MyView, Realm
     public interface MyProxy extends ProxyPlace<RealmsPresenter> {}
 
     public interface MyView extends MbuiView<RealmsPresenter> {
-        void updateAggregateRealm(List<NamedNode> model);
-        void updateCachingRealm(List<NamedNode> model);
-        void updateCustomModifiableRealm(List<NamedNode> model);
-        void updateCustomRealm(List<NamedNode> model);
-        void updateFilesystemRealm(List<NamedNode> model);
-        void updateIdentityRealm(List<NamedNode> model);
-        void updateJdbcRealm(List<NamedNode> model);
-        void updateKeyStoreRealm(List<NamedNode> model);
-        void updateLdapRealm(List<NamedNode> model);
-        void updatePropertiesRealm(List<NamedNode> model);
-        void updateTokenRealm(List<NamedNode> model);
-        void updateConstantRealmMapper(List<NamedNode> model);
-        void updateCustomRealmMapper(List<NamedNode> model);
-        void updateMappedRegexRealmMapper(List<NamedNode> model);
-        void updateSimpleRegexRealmMapper(List<NamedNode> model);
+        void updateResourceElement(String resource, List<NamedNode> nodes);
+        void updateJdbcRealm(List<NamedNode> nodes);
+        void updateLdapRealm(List<NamedNode> nodes);
 
     }
     // @formatter:on
@@ -117,14 +106,14 @@ public interface MyView extends MbuiView<RealmsPresenter> {
             ""scram-mapper""
     };
 
-    private EventBus eventBus;
-    private Dispatcher dispatcher;
     private final CrudOperations crud;
     private final ComplexAttributeOperations ca;
     private final FinderPathFactory finderPathFactory;
     private final StatementContext statementContext;
-    private MetadataRegistry metadataRegistry;
     private final Resources resources;
+    private EventBus eventBus;
+    private Dispatcher dispatcher;
+    private MetadataRegistry metadataRegistry;
 
     @Inject
     public RealmsPresenter(final EventBus eventBus,
@@ -167,152 +156,58 @@ public FinderPath finderPath() {
                         resources.constants().settings(), Names.SECURITY_REALMS);
     }
 
-    public void addLDAPRealm() {
-
-        Metadata metadata = metadataRegistry.lookup(LDAP_REALM_TEMPLATE);
-
-        // repackage ""identity-mapping"" as it is a required attribute to be displayed in the form of the ADD dialog.
-        String complexAttributeName = ""identity-mapping"";
-        // the repackaged attribute must be prefixed so, the user knowns where it comes from.
-        Metadata nestedMetadata = metadata.repackageComplexAttribute(complexAttributeName, true, true, true);
-
-        new AddResourceDialog(Ids.build(Ids.ELYTRON_LDAP_REALM, Ids.ADD_SUFFIX),
-                resources.messages().addResourceTitle(Names.ELYTRON_LDAP_REALM), nestedMetadata,
-                (name, model) -> {
-                    // once the model is posted, it must be correctly assembled as the attributes are not correct,
-                    // related to the r-r-d
-                    reassembleComplexAttribute(complexAttributeName, model, true);
-                    ResourceAddress address = LDAP_REALM_TEMPLATE.resolve(statementContext, name);
-                    crud.add(Names.ELYTRON_LDAP_REALM, name, address, model, (name1, address1) -> reload());
-                }).show();
-
-    }
-
-    public void addPropertiesRealm() {
-
-        Metadata metadata = metadataRegistry.lookup(PROPERTIES_REALM_TEMPLATE);
-
-        // repackage ""users-properties"" as it is a required attribute to be displayed in the form of the ADD dialog.
-        String complexAttributeName = ""users-properties"";
-        // the repackaged attribute must be prefixed so, the user knowns where it comes from.
-        Metadata nestedMetadata = metadata.repackageComplexAttribute(complexAttributeName, true, true, true);
-
-        new AddResourceDialog(Ids.build(Ids.ELYTRON_PROPERTIES_REALM, Ids.ADD_SUFFIX),
-                resources.messages().addResourceTitle(Names.ELYTRON_PROPERTIES_REALM), nestedMetadata,
-                (name, model) -> {
-                    reassembleComplexAttribute(complexAttributeName, model, true);
-                    ResourceAddress address = PROPERTIES_REALM_TEMPLATE.resolve(statementContext, name);
-                    crud.add(Names.ELYTRON_PROPERTIES_REALM, name, address, model, (name1, address1) -> reload());
-                }).show();
-
-    }
-
-    /**
-     * Given a model as
-     * <pre>
-     * {
-     *   other-attr: ""value1""
-     *   complexAttr-name1: ""some value 1"",
-     *   complexAttr-name2: ""some value 2""
-     * }
-     * </pre>
-     * This method extracts the complex attribute name and adds the nested attributes into the complex attribute.
-     * If createComplexAttribute=true, the resulting model node is:
-     *
-     * <pre>
-     * {
-     *   other-attr: ""value1""
-     *   complexAttr: {
-     *     name1: ""some value 1"",
-     *     name2: ""some value 2""
-     *     }
-     * }
-     * </pre>
-     *
-     * If createComplexAttribute=false, the resulting model node is:
-     *
-     * <pre>
-     * {
-     *   other-attr: ""value1""
-     *   name1: ""some value 1"",
-     *   name2: ""some value 2""
-     * }
-     * </pre>
-     *
-     * @param complexAttributeName The complex attribute name
-     * @param model The model
-     * @param createComplexAttribute Control if the resulting model should add the complex attribute name, see above example.
-     *
-     */
-    private static void reassembleComplexAttribute(String complexAttributeName, ModelNode model,
-            boolean createComplexAttribute) {
-        if (model.isDefined()) {
-            for (Property property : model.asPropertyList()) {
-                String pName = property.getName();
-
-                String nestedAttrName;
-
-                boolean propertyRepackagedName = pName.length() > complexAttributeName.length()
-                        && complexAttributeName.equals(pName.substring(0, complexAttributeName.length()));
-
-                if (propertyRepackagedName) {
-                    nestedAttrName = pName.substring(complexAttributeName.length() + 1);
-                } else {
-                    continue;
-                }
+    static Logger _log = Logger.getLogger(""org.jboss"");
 
-                if (createComplexAttribute) {
-                    model.get(complexAttributeName).get(nestedAttrName).set(property.getValue());
-                    model.remove(pName);
-                } else {
-                    model.get(nestedAttrName).set(property.getValue());
-                }
-            }
-        }
-    }
 
     @Override
     public void reload() {
 
         ResourceAddress address = ELYTRON_SUBSYSTEM_TEMPLATE.resolve(statementContext);
         crud.readChildren(address, asList(
-                ""aggregate-realm"",
-                ""caching-realm"",
-                ""custom-modifiable-realm"",
-                ""custom-realm"",
-                ""filesystem-realm"",
-                ""identity-realm"",
-                ""jdbc-realm"",
-                ""key-store-realm"",
-                ""ldap-realm"",
-                ""properties-realm"",
-                ""token-realm"",
-                ""constant-realm-mapper"",
-                ""custom-realm-mapper"",
-                ""mapped-regex-realm-mapper"",
-                ""simple-regex-realm-mapper""
+                ElytronResource.AGGREGATE_REALM.resource,
+                ElytronResource.CACHING_REALM.resource,
+                ElytronResource.CUSTOM_MODIFIABLE_REALM.resource,
+                ElytronResource.CUSTOM_REALM.resource,
+                ElytronResource.FILESYSTEM_REALM.resource,
+                ElytronResource.IDENTITY_REALM.resource,
+                ElytronResource.JDBC_REALM.resource,
+                ElytronResource.KEY_STORE_REALM.resource,
+                ElytronResource.LDAP_REALM.resource,
+                ElytronResource.PROPERTIES_REALM.resource,
+                ElytronResource.TOKEN_REALM.resource,
+                ElytronResource.CONSTANT_REALM_MAPPER.resource,
+                ElytronResource.CUSTOM_REALM_MAPPER.resource,
+                ElytronResource.MAPPED_REGEX_REALM_MAPPER.resource,
+                ElytronResource.SIMPLE_REGEX_REALM_MAPPER.resource
                 ),
                 result -> {
                     // @formatter:off
-                    getView().updateAggregateRealm(asNamedNodes(result.step(0).get(RESULT).asPropertyList()));
-                    getView().updateCachingRealm(asNamedNodes(result.step(1).get(RESULT).asPropertyList()));
-                    getView().updateCustomModifiableRealm(asNamedNodes(result.step(2).get(RESULT).asPropertyList()));
-                    getView().updateCustomRealm(asNamedNodes(result.step(3).get(RESULT).asPropertyList()));
-                    getView().updateFilesystemRealm(asNamedNodes(result.step(4).get(RESULT).asPropertyList()));
-                    getView().updateIdentityRealm(asNamedNodes(result.step(5).get(RESULT).asPropertyList()));
-                    getView().updateJdbcRealm(asNamedNodes(result.step(6).get(RESULT).asPropertyList()));
-                    getView().updateKeyStoreRealm(asNamedNodes(result.step(7).get(RESULT).asPropertyList()));
-                    getView().updateLdapRealm(asNamedNodes(result.step(8).get(RESULT).asPropertyList()));
-                    getView().updatePropertiesRealm(asNamedNodes(result.step(9).get(RESULT).asPropertyList()));
-                    getView().updateTokenRealm(asNamedNodes(result.step(10).get(RESULT).asPropertyList()));
-                    getView().updateConstantRealmMapper(asNamedNodes(result.step(11).get(RESULT).asPropertyList()));
-                    getView().updateCustomRealmMapper(asNamedNodes(result.step(12).get(RESULT).asPropertyList()));
-                    getView().updateMappedRegexRealmMapper(asNamedNodes(result.step(13).get(RESULT).asPropertyList()));
-                    getView().updateSimpleRegexRealmMapper(asNamedNodes(result.step(14).get(RESULT).asPropertyList()));
+                    int i = 0;
+                    getView().updateResourceElement(ElytronResource.AGGREGATE_REALM.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateResourceElement(ElytronResource.CACHING_REALM.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateResourceElement(ElytronResource.CUSTOM_MODIFIABLE_REALM.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateResourceElement(ElytronResource.CUSTOM_REALM.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateResourceElement(ElytronResource.FILESYSTEM_REALM.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateResourceElement(ElytronResource.IDENTITY_REALM.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateJdbcRealm(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateResourceElement(ElytronResource.KEY_STORE_REALM.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateLdapRealm(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateResourceElement(ElytronResource.PROPERTIES_REALM.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateResourceElement(ElytronResource.TOKEN_REALM.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateResourceElement(ElytronResource.CONSTANT_REALM_MAPPER.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateResourceElement(ElytronResource.CUSTOM_REALM_MAPPER.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateResourceElement(ElytronResource.MAPPED_REGEX_REALM_MAPPER.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateResourceElement(ElytronResource.SIMPLE_REGEX_REALM_MAPPER.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
                     // @formatter:on
                 });
     }
 
+    void reload(String resource, Consumer<List<NamedNode>> callback) {
+        crud.readChildren(AddressTemplates.ELYTRON_SUBSYSTEM_TEMPLATE, resource,
+                children -> callback.accept(asNamedNodes(children)));
+    }
+
+
     @Override
     public void saveForm(final String title, final String name, final Map<String, Object> changedValues,
             final Metadata metadata) {
@@ -327,8 +222,6 @@ public void saveComplexForm(final String title, final String name, String comple
         String type = new LabelBuilder().label(metadata.getTemplate().lastName());
         ca.save(name, complexAttributeName, type, metadata.getTemplate(), changedValues, this::reload);
 
-        // ResourceAddress address = metadata.getTemplate().resolve(statementContext, name);
-        // crud.save(type, name, complexAttributeName, address, changedValues, metadata, () -> reload());
     }
 
     @Override
@@ -378,34 +271,6 @@ public void resetComplexAttribute(final String type, final String name, final St
         }
     }
 
-    public void launchOnAddJDBCRealm() {
-
-        String complexAttributeName = ""principal-query"";
-        String id = Ids.build(Ids.ELYTRON_JDBC_REALM, Ids.FORM_SUFFIX, Ids.ADD_SUFFIX);
-        Metadata metadata = metadataRegistry.lookup(JDBC_REALM_TEMPLATE);
-        metadata = metadata.repackageComplexAttribute(complexAttributeName, true, true, true);
-        AddResourceDialog dialog = new AddResourceDialog(id, resources.messages().addResourceTitle(""JDBC Realm""),
-                metadata, (name, payload) -> {
-
-            ModelNode nestedAttrs = new ModelNode();
-            // as the ""principal-query"" attribute description is repackaged in the root node
-            // it needs to be re-assembled as a nested attribute of ""principal-query""
-            payload.asPropertyList().forEach(property -> {
-                String _name = property.getName();
-                if (complexAttributeName.equals(_name.substring(0, complexAttributeName.length()))) {
-                    _name = _name.substring(complexAttributeName.length() + 1);
-                    nestedAttrs.get(_name).set(property.getValue());
-                    payload.remove(property.getName());
-                }
-            });
-            payload.get(complexAttributeName).add(nestedAttrs);
-
-            crud.add(""JDBC Realm"", name, JDBC_REALM_TEMPLATE, payload, (name1, address) -> reload());
-        });
-        dialog.show();
-
-    }
-
     @Override
     public void launchAddDialog(Function<String, String> resourceNameFunction, String complexAttributeName,
             Metadata metadata, String title) {
@@ -576,4 +441,182 @@ private String keyMapperAttribute(int pqIndex, String keyMapper) {
     private String attributeMappingAttribute(int pqIndex) {
         return PRINCIPAL_QUERY + ""["" + pqIndex + ""]."" + ATTRIBUTE_MAPPING;
     }
+
+    // ============ LDAP Realm
+
+    public void reloadLdapRealms() {
+        crud.readChildren(AddressTemplates.ELYTRON_SUBSYSTEM_TEMPLATE, ModelDescriptionConstants.LDAP_REALM,
+                children -> getView().updateLdapRealm(asNamedNodes(children)));
+    }
+
+    public void addLdapRealm() {
+
+        Metadata metadata = metadataRegistry.lookup(LDAP_REALM_TEMPLATE);
+
+        // repackage ""identity-mapping"" as it is a required attribute to be displayed in the form of the ADD dialog.
+        // the repackaged attribute must be prefixed so, the user knowns where it comes from.
+        Metadata nestedMetadata = metadata.repackageComplexAttribute(IDENTITY_MAPPING, true, true, true);
+
+        new AddResourceDialog(Ids.ELYTRON_LDAP_REALM_ADD,
+                resources.messages().addResourceTitle(Names.LDAP_REALM), nestedMetadata,
+                (name, model) -> {
+                    // once the model is posted, it must be correctly assembled as the attributes are not correct,
+                    // related to the r-r-d
+                    reassembleComplexAttribute(IDENTITY_MAPPING, model, true);
+                    ResourceAddress address = LDAP_REALM_TEMPLATE.resolve(statementContext, name);
+                    crud.add(Names.LDAP_REALM, name, address, model, (name1, address1) -> reload());
+                }).show();
+
+    }
+
+    public void addLdapRealm2() {
+        Metadata metadata = metadataRegistry.lookup(AddressTemplates.LDAP_REALM_TEMPLATE)
+                .repackageComplexAttribute(IDENTITY_MAPPING, true, true, true);
+        NameItem nameItem = new NameItem();
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.ELYTRON_LDAP_REALM_ADD, metadata)
+                .addOnly()
+                .fromRequestProperties()
+                .requiredOnly()
+                .unboundFormItem(nameItem, 0)
+                .build();
+        AddResourceDialog dialog = new AddResourceDialog(resources.messages().addResourceTitle(Names.LDAP_REALM), form,
+                (n1, model) -> {
+                    ModelNode payload = new ModelNode();
+                    payload.get(IDENTITY_MAPPING).add(model);
+                    _log.info("" add ldap payload: "" + payload);
+                    crud.add(Names.LDAP_REALM, nameItem.getValue(), AddressTemplates.LDAP_REALM_TEMPLATE, payload,
+                            (n2, address) -> reloadLdapRealms());
+                });
+        dialog.show();
+    }
+
+
+    // @formatter:off
+    /**
+     * Given a model as
+     * <pre>
+     * {
+     *   other-attr: ""value1""
+     *   complexAttr-name1: ""some value 1"",
+     *   complexAttr-name2: ""some value 2""
+     * }
+     * </pre>
+     * This method extracts the complex attribute name and adds the nested attributes into the complex attribute.
+     * If createComplexAttribute=true, the resulting model node is:
+     * <p>
+     * <pre>
+     * {
+     *   other-attr: ""value1""
+     *   complexAttr: {
+     *     name1: ""some value 1"",
+     *     name2: ""some value 2""
+     *     }
+     * }
+     * </pre>
+     * <p>
+     * If createComplexAttribute=false, the resulting model node is:
+     * <p>
+     * <pre>
+     * {
+     *   other-attr: ""value1""
+     *   name1: ""some value 1"",
+     *   name2: ""some value 2""
+     * }
+     * </pre>
+     *
+     * @param complexAttributeName   The complex attribute name
+     * @param model                  The model
+     * @param createComplexAttribute Control if the resulting model should add the complex attribute name, see above
+     *                               example.
+     */
+    // @formatter:on
+    private void reassembleComplexAttribute(String complexAttributeName, ModelNode model,
+            boolean createComplexAttribute) {
+        if (model.isDefined()) {
+            for (Property property : model.asPropertyList()) {
+                String pName = property.getName();
+
+                String nestedAttrName;
+
+                boolean propertyRepackagedName = pName.length() > complexAttributeName.length()
+                        && complexAttributeName.equals(pName.substring(0, complexAttributeName.length()));
+
+                if (propertyRepackagedName) {
+                    nestedAttrName = pName.substring(complexAttributeName.length() + 1);
+                } else {
+                    continue;
+                }
+
+                if (createComplexAttribute) {
+                    model.get(complexAttributeName).get(nestedAttrName).set(property.getValue());
+                    model.remove(pName);
+                } else {
+                    model.get(nestedAttrName).set(property.getValue());
+                }
+            }
+        }
+    }
+
+
+    public void saveLdapRealm(final Form<NamedNode> form, final Map<String, Object> changedValues) {
+        crud.save(Names.LDAP_REALM, form.getModel().getName(),
+                AddressTemplates.LDAP_REALM_TEMPLATE, changedValues,
+                this::reloadLdapRealms);
+    }
+
+    public void addIdentityAttributeMapping(final String selectedLdapRealm) {
+
+        Metadata caMetadata = metadataRegistry.lookup(LDAP_REALM_TEMPLATE)
+                .forComplexAttribute(IDENTITY_MAPPING)
+                .forComplexAttribute(ATTRIBUTE_MAPPING);
+        ModelNodeForm.Builder<ModelNode> builder = new ModelNodeForm.Builder<>(
+                Ids.ELYTRON_IDENTITY_ATTRIBUTE_MAPPING_ADD, caMetadata)
+                .addOnly();
+
+        AddResourceDialog dialog = new AddResourceDialog(resources.messages().addResourceTitle(Names.ATTRIBUTE_MAPPING),
+                builder.build(), (name, model) ->
+                ca.listAdd(selectedLdapRealm, IDENTITY_MAPPING + ""."" + ATTRIBUTE_MAPPING,
+                        Names.IDENTITY_ATTRIBUTE_MAPPING, LDAP_REALM_TEMPLATE, model, () -> reloadLdapRealms()));
+        dialog.show();
+
+
+    }
+
+    public void removeIdentityAttributeMapping(final String selectedLdapRealm, final int iamIndex) {
+        ca.remove(selectedLdapRealm, IDENTITY_MAPPING + ""."" + ATTRIBUTE_MAPPING, Names.IDENTITY_ATTRIBUTE_MAPPING,
+                iamIndex, AddressTemplates.LDAP_REALM_TEMPLATE, this::reloadLdapRealms);
+    }
+
+    public void saveIdentityAttributeMapping(final String selectedLdapRealm, final int iamIndex,
+            final Map<String, Object> changedValues) {
+
+        ca.save(selectedLdapRealm, IDENTITY_MAPPING + ""."" + ATTRIBUTE_MAPPING, Names.IDENTITY_ATTRIBUTE_MAPPING,
+                iamIndex, AddressTemplates.LDAP_REALM_TEMPLATE, changedValues,
+                this::reloadLdapRealms);
+
+
+    }
+
+    // ==== properties realm
+
+    public void addPropertiesRealm() {
+
+        Metadata metadata = metadataRegistry.lookup(PROPERTIES_REALM_TEMPLATE);
+
+        // repackage ""users-properties"" as it is a required attribute to be displayed in the form of the ADD dialog.
+        String complexAttributeName = ""users-properties"";
+        // the repackaged attribute must be prefixed so, the user knowns where it comes from.
+        Metadata nestedMetadata = metadata.repackageComplexAttribute(complexAttributeName, true, true, true);
+
+        new AddResourceDialog(Ids.build(Ids.ELYTRON_PROPERTIES_REALM, Ids.ADD_SUFFIX),
+                resources.messages().addResourceTitle(Names.ELYTRON_PROPERTIES_REALM), nestedMetadata,
+                (name, model) -> {
+                    reassembleComplexAttribute(complexAttributeName, model, true);
+                    ResourceAddress address = PROPERTIES_REALM_TEMPLATE.resolve(statementContext, name);
+                    crud.add(Names.ELYTRON_PROPERTIES_REALM, name, address, model, (name1, address1) -> reload());
+                }).show();
+
+    }
+
+
 }",2017-07-06T06:57:16Z,341
"@@ -15,351 +15,236 @@
  */
 package org.jboss.hal.client.configuration.subsystem.elytron;
 
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import javax.inject.Inject;
 
-import org.jboss.hal.ballroom.Attachable;
 import org.jboss.hal.ballroom.VerticalNavigation;
-import org.jboss.hal.core.mbui.table.TableButtonFactory;
+import org.jboss.hal.core.mbui.MbuiContext;
+import org.jboss.hal.core.mbui.ResourceElement;
 import org.jboss.hal.core.mvp.HalViewImpl;
 import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.meta.Metadata;
-import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
-import org.jboss.hal.resources.Resources;
+import org.jetbrains.annotations.NonNls;
 
 import static org.jboss.hal.ballroom.LayoutBuilder.column;
 import static org.jboss.hal.ballroom.LayoutBuilder.row;
-import static org.jboss.hal.client.configuration.subsystem.elytron.AddressTemplates.*;
+import static org.jboss.hal.client.configuration.subsystem.elytron.ElytronResource.*;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.NAME;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.READ_ATTRIBUTE_OPERATION;
 
 /**
  * @author Claudio Miranda <claudio@redhat.com>
  */
-public class RealmsView extends HalViewImpl implements RealmsPresenter.MyView, ElytronView {
-
-    private ResourceView aggregateRealmView;
-    private ResourceView cachingRealmView;
-    private ResourceView customModifiableRealmView;
-    private ResourceView customRealmView;
-    private ResourceView filesystemRealmView;
-    private ResourceView identityRealmView;
-    // private ResourceView jdbcRealmView;
-    private JdbcRealmElement jdbcRealmElement;
-    private ResourceView keystoreRealmView;
-    private ResourceView ldapRealmView;
-    private ResourceView propertiesRealmView;
-    private ResourceView tokenRealmView;
-    private ResourceView constantRealmMapperView;
-    private ResourceView customRealmMapperView;
-    private ResourceView mappedRegexRealmView;
-    private ResourceView simpleRegexRealmView;
+public class RealmsView extends HalViewImpl implements RealmsPresenter.MyView {
+
 
+    private final Map<String, ResourceElement> elements;
+    private JdbcRealmElement jdbcRealmElement;
+    private LdapRealmElement ldapRealmElement;
     private RealmsPresenter presenter;
+    private VerticalNavigation navigation;
 
     @Inject
-    public RealmsView(final MetadataRegistry metadataRegistry,
-            final TableButtonFactory tableButtonFactory,
-            final Resources resources) {
+    public RealmsView(final MbuiContext mbuiContext) {
 
-        VerticalNavigation navigation = new VerticalNavigation();
+        elements = new HashMap<>();
+        navigation = new VerticalNavigation();
         registerAttachable(navigation);
 
         String primaryIdSecurityRealm = ""security-realm-item"";
         String primaryIdRealmMapper = ""realm-mapper-item"";
         navigation.addPrimary(primaryIdSecurityRealm, ""Security Realm"", ""fa fa-file-o"");
         navigation.addPrimary(primaryIdRealmMapper, ""Realm Mappers"", ""fa fa-desktop"");
 
-
-        aggregateRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdSecurityRealm,
-                Ids.ELYTRON_AGGREGATE_REALM, ""Aggregate Realm"", AGGREGATE_REALM_TEMPLATE, this, () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .create();
-
-        cachingRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdSecurityRealm,
-                Ids.ELYTRON_CACHING_REALM, ""Caching Realm"", CACHING_REALM_TEMPLATE, this, () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .create();
-
-        customModifiableRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdSecurityRealm,
-                Ids.ELYTRON_CUSTOM_MODIFIABLE_REALM, ""Custom Modifiable Realm"", CUSTOM_MODIFIABLE_REALM_TEMPLATE, this,
-                () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .create();
-
-        customRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdSecurityRealm,
-                Ids.ELYTRON_CUSTOM_REALM, ""Custom Realm"", CUSTOM_REALM_TEMPLATE, this, () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .create();
-
-        filesystemRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdSecurityRealm,
-                Ids.ELYTRON_FILESYSTEM_REALM, ""Filesystem Realm"", FILESYSTEM_REALM_TEMPLATE, this,
-                () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .create();
-
-        identityRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdSecurityRealm,
-                Ids.ELYTRON_IDENTITY_REALM, ""Identity Realm"", IDENTITY_REALM_TEMPLATE, this, () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .create();
-
-        // jdbcRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdSecurityRealm,
-        //         Ids.ELYTRON_JDBC_REALM, ""JDBC Realm"", JDBC_REALM_ADDRESS, this, () -> presenter.reload())
-        //         .setNavigation(navigation)
-        //         .setMetadataRegistry(metadataRegistry)
-        //         .setTableAddButtonHandler(table -> presenter.launchOnAddJDBCRealm())
-        //         .build()
-        //         .addComplexAttributeAsPage(""principal-query"")
-        //         .create();
-
-        Metadata metadata = metadataRegistry.lookup(AddressTemplates.JDBC_REALM_TEMPLATE);
-        jdbcRealmElement = new JdbcRealmElement(metadata, tableButtonFactory, resources);
+        // ========= security realm
+
+        addResourceElement(AGGREGATE_REALM,
+                AGGREGATE_REALM.resourceElement(mbuiContext,
+                        () -> presenter.reload(AGGREGATE_REALM.resource,
+                                nodes -> updateResourceElement(AGGREGATE_REALM.resource, nodes))),
+                primaryIdSecurityRealm,
+                Ids.build(AGGREGATE_REALM.baseId, Ids.ENTRY_SUFFIX),
+                ""Aggregate Realm"");
+
+        addResourceElement(CACHING_REALM,
+                CACHING_REALM.resourceElement(mbuiContext,
+                        () -> presenter.reload(CACHING_REALM.resource,
+                                nodes -> updateResourceElement(CACHING_REALM.resource, nodes))),
+                primaryIdSecurityRealm,
+                Ids.build(CACHING_REALM.baseId, Ids.ENTRY_SUFFIX),
+                ""Caching Realm"");
+
+        addResourceElement(CUSTOM_MODIFIABLE_REALM,
+                CUSTOM_MODIFIABLE_REALM.resourceElement(mbuiContext,
+                        () -> presenter.reload(CUSTOM_MODIFIABLE_REALM.resource,
+                                nodes -> updateResourceElement(CUSTOM_MODIFIABLE_REALM.resource, nodes))),
+                primaryIdSecurityRealm,
+                Ids.build(CUSTOM_MODIFIABLE_REALM.baseId, Ids.ENTRY_SUFFIX),
+                ""Custom Modifiable Realm"");
+
+        addResourceElement(CUSTOM_REALM,
+                CUSTOM_REALM.resourceElement(mbuiContext,
+                        () -> presenter.reload(CUSTOM_REALM.resource,
+                                nodes -> updateResourceElement(CUSTOM_REALM.resource, nodes))),
+                primaryIdSecurityRealm,
+                Ids.build(CUSTOM_REALM.baseId, Ids.ENTRY_SUFFIX),
+                ""Custom Realm"");
+
+        addResourceElement(FILESYSTEM_REALM,
+                FILESYSTEM_REALM.resourceElement(mbuiContext,
+                        () -> presenter.reload(FILESYSTEM_REALM.resource,
+                                nodes -> updateResourceElement(FILESYSTEM_REALM.resource, nodes))),
+                primaryIdSecurityRealm,
+                Ids.build(FILESYSTEM_REALM.baseId, Ids.ENTRY_SUFFIX),
+                ""Filesystem Realm"");
+
+        addResourceElement(IDENTITY_REALM,
+                IDENTITY_REALM.resourceElement(mbuiContext,
+                        () -> presenter.reload(IDENTITY_REALM.resource,
+                                nodes -> updateResourceElement(IDENTITY_REALM.resource, nodes))),
+                primaryIdSecurityRealm,
+                Ids.build(IDENTITY_REALM.baseId, Ids.ENTRY_SUFFIX),
+                ""Identity Realm"");
+
+        Metadata metadata = mbuiContext.metadataRegistry().lookup(AddressTemplates.JDBC_REALM_TEMPLATE);
+        jdbcRealmElement = new JdbcRealmElement(metadata, mbuiContext.tableButtonFactory(), mbuiContext.resources());
+        registerAttachable(jdbcRealmElement);
         navigation.addSecondary(primaryIdSecurityRealm, Ids.ELYTRON_JDBC_REALM + ""2"", Names.JDBC_REALM,
                 jdbcRealmElement.asElement());
 
-        keystoreRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdSecurityRealm,
-                Ids.ELYTRON_KEY_STORE_REALM, ""Keystore Realm"", KEY_STORE_REALM_TEMPLATE, this, () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .create();
-
-        ldapRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdSecurityRealm,
-                Ids.ELYTRON_LDAP_REALM, ""LDAP Realm"", LDAP_REALM_TEMPLATE, this, () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddButtonHandler(table -> presenter.addLDAPRealm())
-                .build()
-                .addComplexAttributeAsTab(""identity-mapping"")
-                .addComplexAttributeAsTab(""identity-mapping.user-password-mapper"")
-                .addComplexAttributeAsTab(""identity-mapping.otp-credential-mapper"")
-                .addComplexAttributeAsTab(""identity-mapping.x509-credential-mapper"")
-                .create();
-
-        propertiesRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdSecurityRealm,
-                Ids.ELYTRON_PROPERTIES_REALM, ""Properties Realm"", PROPERTIES_REALM_TEMPLATE, this,
-                () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddButtonHandler(table -> presenter.addPropertiesRealm())
-                .build()
-                .addComplexAttributeAsTab(""users-properties"")
-                .addComplexAttributeAsTab(""groups-properties"")
-                .create();
-
-        tokenRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdSecurityRealm,
-                Ids.ELYTRON_TOKEN_REALM, ""Token Realm"", TOKEN_REALM_TEMPLATE, this, () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .addComplexAttributeAsTab(""jwt"")
-                .addComplexAttributeAsTab(""oauth2-introspection"")
-                .create();
-
-        constantRealmMapperView = new ResourceView.Builder(tableButtonFactory, primaryIdRealmMapper,
-                Ids.ELYTRON_CONSTANT_REALM_MAPPER, ""Constant Realm Mapper"", CONSTANT_REALM_MAPPER_TEMPLATE, this,
-                () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .create();
-
-        customRealmMapperView = new ResourceView.Builder(tableButtonFactory, primaryIdRealmMapper,
-                Ids.ELYTRON_CUSTOM_REALM_MAPPER, ""Custom Realm Mapper"", CUSTOM_REALM_MAPPER_TEMPLATE, this,
-                () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .create();
-
-        mappedRegexRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdRealmMapper,
-                Ids.ELYTRON_MAPPED_REGEX_REALM_MAPPER, ""Mapped Regex Realm Mapper"", MAPPED_REGEX_REALM_MAPPER_TEMPLATE,
-                this,
-                () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .create();
-
-        simpleRegexRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdRealmMapper,
-                Ids.ELYTRON_SIMPLE_REGEX_REALM_MAPPER, ""Simple Regex Realm Mapper"", SIMPLE_REGEX_REALM_MAPPER_TEMPLATE,
-                this,
-                () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .create();
+        addResourceElement(KEY_STORE_REALM,
+                KEY_STORE_REALM.resourceElement(mbuiContext,
+                        () -> presenter.reload(KEY_STORE_REALM.resource,
+                                nodes -> updateResourceElement(KEY_STORE_REALM.resource, nodes))),
+                primaryIdSecurityRealm,
+                Ids.build(KEY_STORE_REALM.baseId, Ids.ENTRY_SUFFIX),
+                ""Key Store Realm"");
+
+        Metadata mtLdapRealm = mbuiContext.metadataRegistry().lookup(AddressTemplates.LDAP_REALM_TEMPLATE);
+        ldapRealmElement = new LdapRealmElement(mtLdapRealm, mbuiContext.tableButtonFactory(), mbuiContext.resources());
+        registerAttachable(ldapRealmElement);
+        navigation.addSecondary(primaryIdSecurityRealm, Ids.ELYTRON_LDAP_REALM + ""3"", Names.LDAP_REALM,
+                ldapRealmElement.asElement());
+
+
+        addResourceElement(PROPERTIES_REALM,
+                PROPERTIES_REALM.resourceElementBuilder(mbuiContext,
+                        () -> presenter.reload(PROPERTIES_REALM.resource,
+                                nodes -> updateResourceElement(PROPERTIES_REALM.resource, nodes)))
+                .addComplexObjectAttribute(""groups-properties"", () -> {
+                    ResourceAddress address = AddressTemplates.PROPERTIES_REALM_TEMPLATE.resolve(mbuiContext.statementContext(), ""test"");
+                    return new Operation.Builder(address, READ_ATTRIBUTE_OPERATION)
+                            .param(NAME, ""groups-properties"")
+                            .build();
+                })
+                .addComplexObjectAttribute(""users-properties"", () -> {
+                    ResourceAddress address = AddressTemplates.PROPERTIES_REALM_TEMPLATE.resolve(mbuiContext.statementContext(), ""test"");
+                    return new Operation.Builder(address, READ_ATTRIBUTE_OPERATION)
+                            .param(NAME, ""users-properties"")
+                            .build();
+                })
+                .build(),
+                primaryIdSecurityRealm,
+                Ids.build(PROPERTIES_REALM.baseId, Ids.ENTRY_SUFFIX),
+                ""Properties Realm"");
+
+        addResourceElement(TOKEN_REALM,
+                TOKEN_REALM.resourceElementBuilder(mbuiContext,
+                        () -> presenter.reload(TOKEN_REALM.resource,
+                                nodes -> updateResourceElement(TOKEN_REALM.resource, nodes)))
+                .addComplexObjectAttribute(""jwt"", () -> {
+                    ResourceAddress address = AddressTemplates.PROPERTIES_REALM_TEMPLATE.resolve(mbuiContext.statementContext(), ""test"");
+                    return new Operation.Builder(address, READ_ATTRIBUTE_OPERATION)
+                            .param(NAME, ""jwt"")
+                            .build();
+                })
+                .addComplexObjectAttribute(""oauth2-introspection"", () -> {
+                    ResourceAddress address = AddressTemplates.PROPERTIES_REALM_TEMPLATE.resolve(mbuiContext.statementContext(), ""test"");
+                    return new Operation.Builder(address, READ_ATTRIBUTE_OPERATION)
+                            .param(NAME, ""oauth2-introspection"")
+                            .build();
+                })
+                .build(),
+                primaryIdSecurityRealm,
+                Ids.build(TOKEN_REALM.baseId, Ids.ENTRY_SUFFIX),
+                ""Token Realm"");
+
+        // =========== realm mapper
+
+        addResourceElement(CONSTANT_REALM_MAPPER,
+                CONSTANT_REALM_MAPPER.resourceElement(mbuiContext,
+                        () -> presenter.reload(CONSTANT_REALM_MAPPER.resource,
+                                nodes -> updateResourceElement(CONSTANT_REALM_MAPPER.resource, nodes))),
+                primaryIdRealmMapper,
+                Ids.build(CONSTANT_REALM_MAPPER.baseId, Ids.ENTRY_SUFFIX),
+                ""Constant Realm Mapper"");
+
+        addResourceElement(CUSTOM_REALM_MAPPER,
+                CUSTOM_REALM_MAPPER.resourceElement(mbuiContext,
+                        () -> presenter.reload(CUSTOM_REALM_MAPPER.resource,
+                                nodes -> updateResourceElement(CUSTOM_REALM_MAPPER.resource, nodes))),
+                primaryIdRealmMapper,
+                Ids.build(CUSTOM_REALM_MAPPER.baseId, Ids.ENTRY_SUFFIX),
+                ""Custom Realm Mapper"");
+
+        addResourceElement(MAPPED_REGEX_REALM_MAPPER,
+                MAPPED_REGEX_REALM_MAPPER.resourceElement(mbuiContext,
+                        () -> presenter.reload(MAPPED_REGEX_REALM_MAPPER.resource,
+                                nodes -> updateResourceElement(MAPPED_REGEX_REALM_MAPPER.resource, nodes))),
+                primaryIdRealmMapper,
+                Ids.build(MAPPED_REGEX_REALM_MAPPER.baseId, Ids.ENTRY_SUFFIX),
+                ""Mapped Regex Realm Mapper"");
+
+        addResourceElement(SIMPLE_REGEX_REALM_MAPPER,
+                SIMPLE_REGEX_REALM_MAPPER.resourceElement(mbuiContext,
+                        () -> presenter.reload(SIMPLE_REGEX_REALM_MAPPER.resource,
+                                nodes -> updateResourceElement(SIMPLE_REGEX_REALM_MAPPER.resource, nodes))),
+                primaryIdRealmMapper,
+                Ids.build(SIMPLE_REGEX_REALM_MAPPER.baseId, Ids.ENTRY_SUFFIX),
+                ""Simple Regex Realm Mapper"");
 
         initElement(row()
                 .add(column()
                         .addAll(navigation.panes())));
 
     }
 
-    private void showJDBCRealmsPage(final String s, final String name) {
-    }
-
-    @Override
-    public void registerComponents(final Attachable first, final Attachable... rest) {
-        registerAttachable(first, rest);
-    }
-
-    @Override
-    public void attach() {
-        super.attach();
-
-        aggregateRealmView.bindTableToForm();
-        cachingRealmView.bindTableToForm();
-        customModifiableRealmView.bindTableToForm();
-        customRealmView.bindTableToForm();
-        filesystemRealmView.bindTableToForm();
-        identityRealmView.bindTableToForm();
-        // jdbcRealmView.bindTableToForm();
-        jdbcRealmElement.attach();
-        keystoreRealmView.bindTableToForm();
-        ldapRealmView.bindTableToForm();
-        propertiesRealmView.bindTableToForm();
-        tokenRealmView.bindTableToForm();
-        constantRealmMapperView.bindTableToForm();
-        customRealmMapperView.bindTableToForm();
-        mappedRegexRealmView.bindTableToForm();
-        simpleRegexRealmView.bindTableToForm();
-    }
-
-
-    @Override
-    public void updateAggregateRealm(final List<NamedNode> model) {
-        aggregateRealmView.getForm().clear();
-        aggregateRealmView.getTable().update(model);
-    }
-
-    @Override
-    public void updateCachingRealm(final List<NamedNode> model) {
-        cachingRealmView.getForm().clear();
-        cachingRealmView.getTable().update(model);
-    }
-
-    @Override
-    public void updateCustomModifiableRealm(final List<NamedNode> model) {
-        customModifiableRealmView.getForm().clear();
-        customModifiableRealmView.getTable().update(model);
-    }
-
-    @Override
-    public void updateCustomRealm(final List<NamedNode> model) {
-        customRealmView.getForm().clear();
-        customRealmView.getTable().update(model);
-    }
-
-    @Override
-    public void updateFilesystemRealm(final List<NamedNode> model) {
-        filesystemRealmView.getForm().clear();
-        filesystemRealmView.getTable().update(model);
-    }
-
-    @Override
-    public void updateIdentityRealm(final List<NamedNode> model) {
-        identityRealmView.getForm().clear();
-        identityRealmView.getTable().update(model);
-    }
-
-    @Override
-    public void updateJdbcRealm(final List<NamedNode> model) {
-        // jdbcRealmView.getForm().clear();
-        // jdbcRealmView.getTable().update(model);
-        jdbcRealmElement.update(model);
-    }
-
-    @Override
-    public void updateKeyStoreRealm(final List<NamedNode> model) {
-        keystoreRealmView.getForm().clear();
-        keystoreRealmView.getTable().update(model);
+    private void addResourceElement(ElytronResource resource, ResourceElement element,
+            String primaryId, String secondaryId, @NonNls String text) {
+        elements.put(resource.resource, element);
+        registerAttachable(element);
+        navigation.addSecondary(primaryId, secondaryId, text, element.asElement());
     }
 
-    @Override
-    public void updateLdapRealm(final List<NamedNode> model) {
-        ldapRealmView.getForm().clear();
-        ldapRealmView.getTable().update(model);
-    }
-
-    @Override
-    public void updatePropertiesRealm(final List<NamedNode> model) {
-        propertiesRealmView.getForm().clear();
-        propertiesRealmView.getTable().update(model);
-    }
-
-    @Override
-    public void updateTokenRealm(final List<NamedNode> model) {
-        tokenRealmView.getForm().clear();
-        tokenRealmView.getTable().update(model);
-    }
-
-    @Override
-    public void updateConstantRealmMapper(final List<NamedNode> model) {
-        constantRealmMapperView.getForm().clear();
-        constantRealmMapperView.getTable().update(model);
-    }
 
     @Override
-    public void updateCustomRealmMapper(final List<NamedNode> model) {
-        customRealmMapperView.getForm().clear();
-        customRealmMapperView.getTable().update(model);
+    public void updateResourceElement(String resource, List<NamedNode> nodes) {
+        ResourceElement resourceElement = elements.get(resource);
+        if (resourceElement != null) {
+            resourceElement.update(nodes);
+        }
     }
 
     @Override
-    public void updateMappedRegexRealmMapper(final List<NamedNode> model) {
-        mappedRegexRealmView.getForm().clear();
-        mappedRegexRealmView.getTable().update(model);
+    public void updateJdbcRealm(final List<NamedNode> nodes) {
+        jdbcRealmElement.update(nodes);
     }
 
     @Override
-    public void updateSimpleRegexRealmMapper(final List<NamedNode> model) {
-        simpleRegexRealmView.getForm().clear();
-        simpleRegexRealmView.getTable().update(model);
+    public void updateLdapRealm(final List<NamedNode> nodes) {
+        ldapRealmElement.update(nodes);
     }
 
     @Override
     public void setPresenter(final RealmsPresenter presenter) {
         this.presenter = presenter;
-        aggregateRealmView.setPresenter(presenter);
-        cachingRealmView.setPresenter(presenter);
-        customModifiableRealmView.setPresenter(presenter);
-        customRealmView.setPresenter(presenter);
-        filesystemRealmView.setPresenter(presenter);
-        identityRealmView.setPresenter(presenter);
-        // jdbcRealmView.setPresenter(presenter);
         jdbcRealmElement.setPresenter(presenter);
-        keystoreRealmView.setPresenter(presenter);
-        ldapRealmView.setPresenter(presenter);
-        propertiesRealmView.setPresenter(presenter);
-        tokenRealmView.setPresenter(presenter);
-        constantRealmMapperView.setPresenter(presenter);
-        customRealmMapperView.setPresenter(presenter);
-        mappedRegexRealmView.setPresenter(presenter);
-        simpleRegexRealmView.setPresenter(presenter);
+        ldapRealmElement.setPresenter(presenter);
     }
 }
\ No newline at end of file",2017-07-06T06:57:16Z,342
"@@ -243,6 +243,7 @@ public interface ModelDescriptionConstants {
     String HTTPS_LISTENER = ""https-listener"";
     String ID_COLUMN = ""id-column"";
     String IDENTITY_REALM = ""identity-realm"";
+    String IDENTITY_MAPPING = ""identity-mapping"";
     String IIOP_OPENJDK = ""iiop-openjdk"";
     String IMAP = ""imap"";
     String IN_VM_ACCEPTOR = ""in-vm-acceptor"";
@@ -330,6 +331,7 @@ public interface ModelDescriptionConstants {
     String MULTICAST_ADDRESS = ""multicast-address"";
     String MULTICAST_PORT = ""multicast-port"";
     String NAME = ""name"";
+    String NEW_IDENTITY_ATTRIBUTES = ""new-identity-attributes"";
     String NEW_ITEM_ATTRIBUTES = ""new-item-attributes"";
     String NEW_ITEM_PATH = ""new-item-path"";
     String NEW_ITEM_RDN = ""new-item-rdn"";
@@ -343,6 +345,8 @@ public interface ModelDescriptionConstants {
     String OPERATIONS = ""operations"";
     String OUTBOUND_SOCKET_BINDING_REF = ""outbound-socket-binding-ref"";
     String OUTCOME = ""outcome"";
+    String OTP_CREDENTIAL_MAPPER = ""otp-credential-mapper"";
+
     String PARTITION_HANDLING = ""partition-handling"";
     String PASSWORD = ""password"";
     String PATH = ""path"";
@@ -543,6 +547,7 @@ public interface ModelDescriptionConstants {
     String UNIT = ""unit"";
     String URL = ""url"";
     String USER_NAME = ""user-name"";
+    String USER_PASSWORD_MAPPER = ""user-password-mapper"";
     String USERNAME = ""username"";
     String VALUE = ""value"";
     String VALUE_TYPE = ""value-type"";
@@ -561,5 +566,6 @@ public interface ModelDescriptionConstants {
     String WRITE_ATTRIBUTE_OPERATION = ""write-attribute"";
     String X500_ATTRIBUTE_PRINCIPAL_DECODER = ""x500-attribute-principal-decoder"";
     String XA_DATA_SOURCE = ""xa-data-source"";
+    String X509_CREDENTIAL_MAPPER = ""x509-credential-mapper"";
 }
 ",2017-07-06T06:57:16Z,109
"@@ -213,7 +213,6 @@ public interface Ids {
     String ELYTRON_CUSTOM_ROLE_DECODER = build(ELYTRON, ""custom-role-decoder"");
     String ELYTRON_CUSTOM_ROLE_MAPPER = build(ELYTRON, ""custom-role-mapper"");
     String ELYTRON_DIR_CONTEXT = build(ELYTRON, ""dir-context"");
-    String ELYTRON_FILE_AUDIT_LOG = build(ELYTRON, ""file-audit-log"");
     String ELYTRON_FILESYSTEM_REALM = build(ELYTRON, ""filesystem-realm"");
     String ELYTRON_FILTERING_KEY_STORE = build(ELYTRON, ""filtering-key-store"");
     String ELYTRON_HTTP_AUTHENTICATION_FACTORY = build(ELYTRON, ""http-authentication-factory"");
@@ -222,6 +221,12 @@ public interface Ids {
     String ELYTRON_HTTP_AUTHENTICATION_FACTORY_PAGE = build(ELYTRON, ""http-authentication-factory"", PAGE_SUFFIX);
     String ELYTRON_HTTP_AUTHENTICATION_FACTORY_TABLE = build(ELYTRON, ""http-authentication-factory"", TABLE_SUFFIX);
     String ELYTRON_IDENTITY_REALM = build(ELYTRON, ""identity-realm"");
+    String ELYTRON_IDENTITY_ATTRIBUTE_MAPPING = build(ELYTRON, ""identity-attribute-mapping"");
+    String ELYTRON_IDENTITY_ATTRIBUTE_MAPPING_ADD = build(ELYTRON, ""identity-attribute-mapping"", ADD_SUFFIX);
+    String ELYTRON_IDENTITY_ATTRIBUTE_MAPPING_FORM = build(ELYTRON, ""identity-attribute-mapping"", FORM_SUFFIX);
+    String ELYTRON_IDENTITY_ATTRIBUTE_MAPPING_PAGE = build(ELYTRON, ""identity-attribute-mapping"", PAGE_SUFFIX);
+    String ELYTRON_IDENTITY_ATTRIBUTE_MAPPING_TAB = build(ELYTRON, ""identity-attribute-mapping"", TAB_SUFFIX);
+    String ELYTRON_IDENTITY_ATTRIBUTE_MAPPING_TABLE = build(ELYTRON, ""identity-attribute-mapping"", TABLE_SUFFIX);
     String ELYTRON_JDBC_REALM = build(ELYTRON, ""jdbc-realm"");
     String ELYTRON_JDBC_REALM_ADD = build(ELYTRON_JDBC_REALM, ADD_SUFFIX);
     String ELYTRON_JDBC_REALM_ATTRIBUTE_MAPPING = build(ELYTRON_JDBC_REALM, ""attribute-mapping"");
@@ -246,6 +251,11 @@ public interface Ids {
     String ELYTRON_LDAP_REALM = build(ELYTRON, ""ldap-realm"");
     String ELYTRON_LOGICAL_PERMISSION_MAPPER = build(ELYTRON, ""logical-permission-mapper"");
     String ELYTRON_LOGICAL_ROLE_MAPPER = build(ELYTRON, ""logical-role-mapper"");
+    String ELYTRON_LDAP_REALM_ADD = build(ELYTRON, ""ldap-realm"", ADD_SUFFIX);
+    String ELYTRON_LDAP_REALM_FORM = build(ELYTRON, ""ldap-realm"", FORM_SUFFIX);
+    String ELYTRON_LDAP_REALM_PAGE = build(ELYTRON, ""ldap-realm"", PAGE_SUFFIX);
+    String ELYTRON_LDAP_REALM_TAB = build(ELYTRON, ""ldap-realm"", TAB_SUFFIX);
+    String ELYTRON_LDAP_REALM_TABLE = build(ELYTRON, ""ldap-realm"", TABLE_SUFFIX);
     String ELYTRON_MAPPED_REGEX_REALM_MAPPER = build(ELYTRON, ""mapped-regex-realm-mapper"");
     String ELYTRON_MECHANISM_CONFIGURATIONS = build(ELYTRON, ""mechanism-configurations"");
     String ELYTRON_MECHANISM_CONFIGURATIONS_ADD = build(ELYTRON_MECHANISM_CONFIGURATIONS, ADD_SUFFIX);
@@ -279,6 +289,11 @@ public interface Ids {
     String ELYTRON_SIMPLE_PERMISSION_MAPPER = build(ELYTRON, ""simple-permission-mapper"");
     String ELYTRON_SIMPLE_REGEX_REALM_MAPPER = build(ELYTRON, ""single-regex-realm-mapper"");
     String ELYTRON_SIMPLE_ROLE_DECODER = build(ELYTRON, ""simple-role-decoder"");
+    String ELYTRON_USER_PASSWORD_MAPPER_TAB = build(ELYTRON, ELYTRON_LDAP_REALM, ""user-password-mapper"", TAB_SUFFIX);
+    String ELYTRON_OTP_CREDENTIAL_MAPPER_TAB = build(ELYTRON, ELYTRON_LDAP_REALM, ""otp-credential-mapper"", TAB_SUFFIX);
+    String ELYTRON_X509_CREDENTIAL_MAPPER_TAB = build(ELYTRON, ELYTRON_LDAP_REALM, ""x509-credential-mapper"", TAB_SUFFIX);
+
+    String ELYTRON_FILE_AUDIT_LOG = build(ELYTRON, ""file-audit-log"");
     String ELYTRON_SIZE_AUDIT_LOG = build(ELYTRON, ""size-rotating-file-audit-log"");
     String ELYTRON_SIZE_ROTATING_FILE_AUDIT_LOG = build(ELYTRON, ""size-rotating-file-audit-log"");
     String ELYTRON_SYSLOG_AUDIT_LOG = build(ELYTRON, ""syslog-audit-log"");",2017-07-06T06:57:16Z,111
"@@ -88,7 +88,6 @@ public interface Names {
 
     String EE = ""EE"";
     String ELYTRON = ""Elytron"";
-    String ELYTRON_LDAP_REALM = ""LDAP Realm"";
     String ELYTRON_PROPERTIES_REALM = ""Properties Realm"";
     String ENDPOINT_CONFIGURATION = ""Endpoint Configuration"";
     String ENTITY = ""Entity"";
@@ -129,6 +128,8 @@ public interface Names {
     String HTTPS = ""HTTPS"";
     String HTTPS_LISTENER = ""HTTPS Listener"";
 
+    String IDENTITY_ATTRIBUTE_MAPPING = ""Identity Attribute Mapping"";
+    String IDENTITY_MAPPING = ""Identity Mapping"";
     String IN_VM_ACCEPTOR = ""In VM Acceptor"";
     String IN_VM_CONNECTOR = ""In VM Connector"";
     String INBOUND = ""Inbound"";
@@ -150,6 +151,7 @@ public interface Names {
     String JSP = ""JSP"";
 
     String LDAP_KEY_STORE = ""LDAP Key Store"";
+    String LDAP_REALM = ""LDAP Realm"";
     String LISTENER = ""Listener"";
     String LIVE_ONLY = ""Live Only"";
     String LOCAL_CACHE = ""Local Cache"";
@@ -190,6 +192,7 @@ public interface Names {
     String OTHER_SETTINGS = ""Other Settings"";
     String OUTBOUND_LOCAL = ""Outbound Local"";
     String OUTBOUND_REMOTE = ""Outbound Remote"";
+    String OTP_CREDENTIAL_MAPPER = ""OTP Credential Mapper"";
 
     String PARTITION_HANDLING = ""Partition Handling"";
     String PATCHING = ""Patching"";
@@ -271,6 +274,7 @@ public interface Names {
     String UNKNOWN = ""unknown"";
     String UNMANAGED_DEPLOYMENT = ""Unmanaged Deployment"";
     String URL = ""URL"";
+    String USER_PASSWORD_MAPPER = ""User Password Mapper"";
 
     String VALUE = ""Value"";
 
@@ -282,4 +286,5 @@ public interface Names {
     String WRITE_THROUGH = ""Write Through"";
 
     String XA_DATASOURCE = ""XA Datasource"";
+    String X509_CREDENTIAL_MAPPER = ""X509 Credential Mapper"";
 }",2017-07-06T06:57:16Z,112
"@@ -48,30 +48,18 @@ public class DeploymentScannerPresenter
         extends MbuiPresenter<DeploymentScannerPresenter.MyView, DeploymentScannerPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    // @formatter:off
-    @ProxyCodeSplit
-    @NameToken(NameTokens.DEPLOYMENT_SCANNERS)
-    @Requires({DEPLOYMENTSCANNER_SUBSYSTEM_ADDRESS, DEPLOYMENTSCANNER_ADDRESS})
-    public interface MyProxy extends ProxyPlace<DeploymentScannerPresenter> {}
-
-    public interface MyView extends MbuiView<DeploymentScannerPresenter> {
-        void updateScanners(List<NamedNode> items);
-    }
-    // @formatter:on
-
-
     private final CrudOperations crud;
     private final FinderPathFactory finderPathFactory;
     private final StatementContext statementContext;
 
     @Inject
-    public DeploymentScannerPresenter(final EventBus eventBus,
-            final MyView view,
-            final MyProxy proxy,
-            final Finder finder,
-            final CrudOperations crud,
-            final FinderPathFactory finderPathFactory,
-            final StatementContext statementContext) {
+    public DeploymentScannerPresenter(EventBus eventBus,
+            MyView view,
+            MyProxy proxy,
+            Finder finder,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext) {
         super(eventBus, view, proxy, finder);
         this.crud = crud;
         this.finderPathFactory = finderPathFactory;
@@ -100,4 +88,17 @@ protected void reload() {
                 getView().updateScanners(
                         asNamedNodes(failSafePropertyList(result, DEPLOYMENTSCANNER_TEMPLATE.lastName()))));
     }
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @NameToken(NameTokens.DEPLOYMENT_SCANNERS)
+    @Requires({DEPLOYMENTSCANNER_SUBSYSTEM_ADDRESS, DEPLOYMENTSCANNER_ADDRESS})
+    public interface MyProxy extends ProxyPlace<DeploymentScannerPresenter> {
+    }
+
+    public interface MyView extends MbuiView<DeploymentScannerPresenter> {
+        void updateScanners(List<NamedNode> items);
+    }
+    // @formatter:on
 }",2017-10-16T13:25:42Z,343
"@@ -67,21 +67,8 @@ public class CacheContainerPresenter
         extends ApplicationFinderPresenter<CacheContainerPresenter.MyView, CacheContainerPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    // @formatter:off
-    @ProxyCodeSplit
-    @Requires({CACHE_CONTAINER_ADDRESS, DISTRIBUTED_CACHE_ADDRESS, INVALIDATION_CACHE_ADDRESS, LOCAL_CACHE_ADDRESS,
-            REPLICATED_CACHE_ADDRESS, THREAD_POOL_ADDRESS, TRANSPORT_JGROUPS_ADDRESS})
-    @NameToken(NameTokens.CACHE_CONTAINER)
-    public interface MyProxy extends ProxyPlace<CacheContainerPresenter> {}
-
-    public interface MyView extends HalView, HasPresenter<CacheContainerPresenter> {
-        void update(CacheContainer cacheContainer, boolean jgroups);
-        void updateCacheBackups(Cache cache, List<NamedNode> backups);
-        void updateCacheStore(Cache cache, List<Property> stores);
-    }
-    // @formatter:on
-
-
+    public static final String EQUALS = ""="";
+    public static final String EQ_WILDCARD = ""=*"";
     private final MetadataRegistry metadataRegistry;
     private final Dispatcher dispatcher;
     private final CrudOperations crud;
@@ -94,16 +81,16 @@ public interface MyView extends HalView, HasPresenter<CacheContainerPresenter> {
     private Store store;
 
     @Inject
-    public CacheContainerPresenter(final EventBus eventBus,
-            final CacheContainerPresenter.MyView view,
-            final CacheContainerPresenter.MyProxy myProxy,
-            final Finder finder,
-            final MetadataRegistry metadataRegistry,
-            final Dispatcher dispatcher,
-            final CrudOperations crud,
-            final FinderPathFactory finderPathFactory,
-            final StatementContext statementContext,
-            final Resources resources) {
+    public CacheContainerPresenter(EventBus eventBus,
+            CacheContainerPresenter.MyView view,
+            CacheContainerPresenter.MyProxy myProxy,
+            Finder finder,
+            MetadataRegistry metadataRegistry,
+            Dispatcher dispatcher,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext,
+            Resources resources) {
         super(eventBus, view, myProxy, finder);
         this.metadataRegistry = metadataRegistry;
         this.dispatcher = dispatcher;
@@ -120,7 +107,7 @@ protected void onBind() {
     }
 
     @Override
-    public void prepareFromRequest(final PlaceRequest request) {
+    public void prepareFromRequest(PlaceRequest request) {
         super.prepareFromRequest(request);
         cacheContainer = request.getParameter(NAME, null);
     }
@@ -177,7 +164,7 @@ void resetCacheContainer(Form<ModelNode> form) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE);
         crud.reset(Names.CACHE_CONTAINER, cacheContainer, address, form, metadata, new FinishReset<ModelNode>(form) {
             @Override
-            public void afterReset(final Form<ModelNode> form) {
+            public void afterReset(Form<ModelNode> form) {
                 reload();
             }
         });
@@ -186,34 +173,34 @@ public void afterReset(final Form<ModelNode> form) {
 
     // ------------------------------------------------------ cache
 
-    void addCache(final Cache cache) {
+    void addCache(Cache cache) {
         Metadata metadata = metadataRegistry.lookup(cache.template);
         AddResourceDialog dialog = new AddResourceDialog(Ids.build(cache.baseId, Ids.ADD),
                 resources.messages().addResourceTitle(cache.type), metadata,
                 (name, model) -> crud.add(cache.type, name, cacheAddress(cache, name), model, (n, a) -> reload()));
         dialog.show();
     }
 
-    void saveCache(final Cache cache, final String name, final Map<String, Object> changedValues) {
+    void saveCache(Cache cache, String name, Map<String, Object> changedValues) {
         Metadata metadata = metadataRegistry.lookup(cache.template);
         crud.save(cache.type, name, cacheAddress(cache, name), changedValues, metadata, this::reload);
     }
 
-    void resetCache(final Cache cache, final String name, final Form<NamedNode> form) {
+    void resetCache(Cache cache, String name, Form<NamedNode> form) {
         Metadata metadata = metadataRegistry.lookup(cache.template);
         crud.reset(cache.type, name, cacheAddress(cache, name), form, metadata, new FinishReset<NamedNode>(form) {
             @Override
-            public void afterReset(final Form<NamedNode> form) {
+            public void afterReset(Form<NamedNode> form) {
                 reload();
             }
         });
     }
 
-    void removeCache(final Cache cache, final String name) {
+    void removeCache(Cache cache, String name) {
         crud.remove(cache.type, name, cacheAddress(cache, name), this::reload);
     }
 
-    void selectCache(final Cache cacheType, final String cacheName) {
+    void selectCache(Cache cacheType, String cacheName) {
         this.cacheType = cacheType;
         this.cacheName = cacheName;
     }
@@ -222,59 +209,59 @@ String cacheSegment() {
         return cacheType.type + "": "" + cacheName;
     }
 
-    private ResourceAddress cacheAddress(final Cache cache, final String name) {
+    private ResourceAddress cacheAddress(Cache cache, String name) {
         // cannot use this.cacheType and this.cacheName here, since they might be null
-        return SELECTED_CACHE_CONTAINER_TEMPLATE.append(cache.resource() + ""="" + name).resolve(statementContext);
+        return SELECTED_CACHE_CONTAINER_TEMPLATE.append(cache.resource() + EQUALS + name).resolve(statementContext);
     }
 
 
     // ------------------------------------------------------ cache component
 
-    void addCacheComponent(final Component component) {
+    void addCacheComponent(Component component) {
         crud.addSingleton(component.type, cacheComponentAddress(component), null, address -> reload());
     }
 
-    Operation readCacheComponent(final Component component) {
+    Operation readCacheComponent(Component component) {
         if (cacheType != null && cacheName != null) {
             return new Operation.Builder(cacheComponentAddress(component), READ_RESOURCE_OPERATION).build();
         } else {
             return null;
         }
     }
 
-    void saveCacheComponent(final Component component, final Map<String, Object> changedValues) {
+    void saveCacheComponent(Component component, Map<String, Object> changedValues) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(COMPONENT + ""="" + component.resource));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(COMPONENT + EQUALS + component.resource));
         crud.saveSingleton(component.type, cacheComponentAddress(component), changedValues, metadata, this::reload);
     }
 
-    void resetCacheComponent(final Component component, final Form<ModelNode> form) {
+    void resetCacheComponent(Component component, Form<ModelNode> form) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(COMPONENT + ""="" + component.resource));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(COMPONENT + EQUALS + component.resource));
         crud.resetSingleton(component.type, cacheComponentAddress(component), form, metadata,
                 new FinishReset<ModelNode>(form) {
                     @Override
-                    public void afterReset(final Form<ModelNode> form) {
+                    public void afterReset(Form<ModelNode> form) {
                         reload();
                     }
                 });
     }
 
-    void removeCacheComponent(final Component component, final Form<ModelNode> form) {
+    void removeCacheComponent(Component component, Form<ModelNode> form) {
         crud.removeSingleton(component.type, cacheComponentAddress(component), new FinishRemove<ModelNode>(form) {
             @Override
-            public void afterRemove(final Form<ModelNode> form) {
+            public void afterRemove(Form<ModelNode> form) {
                 reload();
             }
         });
     }
 
-    private ResourceAddress cacheComponentAddress(final Component component) {
+    private ResourceAddress cacheComponentAddress(Component component) {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
-                .append(COMPONENT + ""="" + component.resource)
+                .append(cacheType.resource() + EQUALS + cacheName)
+                .append(COMPONENT + EQUALS + component.resource)
                 .resolve(statementContext);
     }
 
@@ -283,8 +270,8 @@ private ResourceAddress cacheComponentAddress(final Component component) {
 
     void addCacheBackup() {
         Metadata metadata = metadataRegistry.lookup(cacheType.template
-                .append(COMPONENT + ""="" + BACKUPS)
-                .append(BACKUP + ""=*""));
+                .append(COMPONENT + EQUALS + BACKUPS)
+                .append(BACKUP + EQ_WILDCARD));
         AddResourceDialog dialog = new AddResourceDialog(Ids.build(cacheType.baseId, BACKUPS, Ids.ADD),
                 resources.messages().addResourceTitle(Names.BACKUP), metadata,
                 (name, model) -> {
@@ -296,52 +283,52 @@ void addCacheBackup() {
 
     void showCacheBackup() {
         ResourceAddress address = SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
-                .append(COMPONENT + ""="" + BACKUPS)
+                .append(cacheType.resource() + EQUALS + cacheName)
+                .append(COMPONENT + EQUALS + BACKUPS)
                 .resolve(statementContext);
         crud.readChildren(address, BACKUP,
                 children -> getView().updateCacheBackups(cacheType, asNamedNodes(children)));
     }
 
-    void saveCacheBackup(final String name, final Map<String, Object> changedValues) {
+    void saveCacheBackup(String name, Map<String, Object> changedValues) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(COMPONENT + ""="" + BACKUPS)
-                .append(BACKUP + ""=*""));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(COMPONENT + EQUALS + BACKUPS)
+                .append(BACKUP + EQ_WILDCARD));
         crud.save(Names.BACKUP, name, cacheBackupAddress(name), changedValues, metadata, this::showCacheBackup);
     }
 
-    void resetCacheBackup(final String name, final Form<NamedNode> form) {
+    void resetCacheBackup(String name, Form<NamedNode> form) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(COMPONENT + ""="" + BACKUPS)
-                .append(BACKUP + ""=*""));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(COMPONENT + EQUALS + BACKUPS)
+                .append(BACKUP + EQ_WILDCARD));
         crud.reset(Names.BACKUP, name, cacheBackupAddress(name), form, metadata, new FinishReset<NamedNode>(form) {
             @Override
-            public void afterReset(final Form<NamedNode> form) {
+            public void afterReset(Form<NamedNode> form) {
                 showCacheBackup();
             }
         });
     }
 
-    void removeCacheBackup(final String name) {
+    void removeCacheBackup(String name) {
         crud.remove(Names.BACKUP, name, cacheBackupAddress(name), this::showCacheBackup);
     }
 
-    private ResourceAddress cacheBackupAddress(final String name) {
+    private ResourceAddress cacheBackupAddress(String name) {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
-                .append(COMPONENT + ""="" + BACKUPS)
-                .append(BACKUP + ""="" + name)
+                .append(cacheType.resource() + EQUALS + cacheName)
+                .append(COMPONENT + EQUALS + BACKUPS)
+                .append(BACKUP + EQUALS + name)
                 .resolve(statementContext);
     }
 
 
     // ------------------------------------------------------ cache store
 
-    void addCacheStore(final Store store) {
+    void addCacheStore(Store store) {
         if (store.addWithDialog) {
-            Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + ""="" + store.resource));
+            Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + EQUALS + store.resource));
             String id = Ids.build(cacheType.baseId, store.baseId, Ids.ADD);
             Form<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata) // custom form w/o unbound name item
                     .fromRequestProperties()
@@ -367,7 +354,7 @@ void addCacheStore(final Store store) {
 
     void showCacheStore() {
         ResourceAddress address = SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
+                .append(cacheType.resource() + EQUALS + cacheName)
                 .resolve(statementContext);
         crud.readChildren(address, STORE, 2, children -> {
             if (children.isEmpty()) {
@@ -383,30 +370,30 @@ void showCacheStore() {
         });
     }
 
-    void saveCacheStore(final Store store, final Map<String, Object> changedValues) {
-        Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + ""="" + store.resource));
+    void saveCacheStore(Store store, Map<String, Object> changedValues) {
+        Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + EQUALS + store.resource));
         crud.saveSingleton(store.type, cacheStoreAddress(store), changedValues, metadata, this::showCacheStore);
     }
 
-    void resetCacheStore(final Store store, final Form<ModelNode> form) {
-        Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + ""="" + store.resource));
+    void resetCacheStore(Store store, Form<ModelNode> form) {
+        Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + EQUALS + store.resource));
         crud.resetSingleton(store.type, cacheStoreAddress(store), form, metadata, new FinishReset<ModelNode>(form) {
             @Override
-            public void afterReset(final Form<ModelNode> form) {
+            public void afterReset(Form<ModelNode> form) {
                 showCacheStore();
             }
         });
     }
 
-    void switchStore(final Store newStore) {
+    void switchStore(Store newStore) {
         if (newStore != null && newStore != this.store) {
             List<Operation> operations = new ArrayList<>();
             if (this.store != null) {
                 operations.add(new Operation.Builder(cacheStoreAddress(this.store), REMOVE).build());
             }
 
             if (newStore.addWithDialog) {
-                Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + ""="" + newStore.resource));
+                Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + EQUALS + newStore.resource));
                 String id = Ids.build(cacheType.baseId, newStore.baseId, Ids.ADD);
                 Form<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata) // custom form w/o unbound name item
                         .fromRequestProperties()
@@ -448,42 +435,42 @@ String storeSegment() {
         return builder.toString();
     }
 
-    private ResourceAddress cacheStoreAddress(final Store store) {
+    private ResourceAddress cacheStoreAddress(Store store) {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
-                .append(STORE + ""="" + store.resource)
+                .append(cacheType.resource() + EQUALS + cacheName)
+                .append(STORE + EQUALS + store.resource)
                 .resolve(statementContext);
     }
 
 
     // ------------------------------------------------------ write through / behind
 
-    void addWrite(final Write write) {
+    void addWrite(Write write) {
         crud.addSingleton(write.type, writeAddress(write), null, address -> showCacheStore());
     }
 
-    void saveWrite(final Write write, final Map<String, Object> changedValues) {
+    void saveWrite(Write write, Map<String, Object> changedValues) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(STORE + ""="" + store.resource)
-                .append(WRITE + ""="" + write.resource));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(STORE + EQUALS + store.resource)
+                .append(WRITE + EQUALS + write.resource));
         crud.saveSingleton(Names.WRITE_BEHIND, writeAddress(write), changedValues, metadata, this::showCacheStore);
     }
 
-    void resetWrite(final Write write, final Form<ModelNode> form) {
+    void resetWrite(Write write, Form<ModelNode> form) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(STORE + ""="" + store.resource)
-                .append(WRITE + ""="" + write.resource));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(STORE + EQUALS + store.resource)
+                .append(WRITE + EQUALS + write.resource));
         crud.resetSingleton(Names.WRITE_BEHIND, writeAddress(write), form, metadata, new FinishReset<ModelNode>(form) {
             @Override
-            public void afterReset(final Form<ModelNode> form) {
+            public void afterReset(Form<ModelNode> form) {
                 showCacheStore();
             }
         });
     }
 
-    void switchWrite(final Write currentWrite, final Write newWrite) {
+    void switchWrite(Write currentWrite, Write newWrite) {
         List<Operation> operations = new ArrayList<>();
         operations.add(new Operation.Builder(writeAddress(currentWrite), REMOVE).build());
         operations.add(new Operation.Builder(writeAddress(newWrite), ADD).build());
@@ -494,88 +481,88 @@ void switchWrite(final Write currentWrite, final Write newWrite) {
         });
     }
 
-    private ResourceAddress writeAddress(final Write write) {
+    private ResourceAddress writeAddress(Write write) {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
-                .append(STORE + ""="" + store.resource)
-                .append(WRITE + ""="" + write.resource)
+                .append(cacheType.resource() + EQUALS + cacheName)
+                .append(STORE + EQUALS + store.resource)
+                .append(WRITE + EQUALS + write.resource)
                 .resolve(statementContext);
     }
 
 
     // ------------------------------------------------------ tables of jdbc stores
 
-    void saveStoreTable(final Table table, final Map<String, Object> changedValues) {
+    void saveStoreTable(Table table, Map<String, Object> changedValues) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(STORE + ""="" + store.resource)
-                .append(TABLE + ""="" + table.resource));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(STORE + EQUALS + store.resource)
+                .append(TABLE + EQUALS + table.resource));
         crud.saveSingleton(table.type, storeTableAddress(store, table), changedValues, metadata, this::showCacheStore);
     }
 
-    void resetStoreTable(final Table table, final Form<ModelNode> form) {
+    void resetStoreTable(Table table, Form<ModelNode> form) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(STORE + ""="" + store.resource)
-                .append(TABLE + ""="" + table.resource));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(STORE + EQUALS + store.resource)
+                .append(TABLE + EQUALS + table.resource));
         crud.resetSingleton(table.type, storeTableAddress(store, table), form, metadata,
                 new FinishReset<ModelNode>(form) {
                     @Override
-                    public void afterReset(final Form<ModelNode> form) {
+                    public void afterReset(Form<ModelNode> form) {
                         showCacheStore();
                     }
                 });
     }
 
-    private ResourceAddress storeTableAddress(final Store store, final Table table) {
+    private ResourceAddress storeTableAddress(Store store, Table table) {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
-                .append(STORE + ""="" + store.resource)
-                .append(TABLE + ""="" + table.resource)
+                .append(cacheType.resource() + EQUALS + cacheName)
+                .append(STORE + EQUALS + store.resource)
+                .append(TABLE + EQUALS + table.resource)
                 .resolve(statementContext);
     }
 
 
     // ------------------------------------------------------ thread pool
 
-    void addThreadPool(final ThreadPool threadPool) {
+    void addThreadPool(ThreadPool threadPool) {
         crud.addSingleton(threadPool.type, threadPoolAddress(threadPool), null, address -> reload());
     }
 
-    Operation readThreadPool(final ThreadPool threadPool) {
+    Operation readThreadPool(ThreadPool threadPool) {
         return new Operation.Builder(threadPoolAddress(threadPool), READ_RESOURCE_OPERATION).build();
     }
 
-    void saveThreadPool(final ThreadPool threadPool, final Map<String, Object> changedValues) {
+    void saveThreadPool(ThreadPool threadPool, Map<String, Object> changedValues) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(THREAD_POOL + ""="" + threadPool.resource));
+                .append(THREAD_POOL + EQUALS + threadPool.resource));
         crud.saveSingleton(threadPool.type, threadPoolAddress(threadPool), changedValues, metadata, this::reload);
     }
 
-    void resetThreadPool(final ThreadPool threadPool, final Form<ModelNode> form) {
+    void resetThreadPool(ThreadPool threadPool, Form<ModelNode> form) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(THREAD_POOL + ""="" + threadPool.resource));
+                .append(THREAD_POOL + EQUALS + threadPool.resource));
         crud.resetSingleton(threadPool.type, threadPoolAddress(threadPool), form, metadata,
                 new FinishReset<ModelNode>(form) {
                     @Override
-                    public void afterReset(final Form<ModelNode> form) {
+                    public void afterReset(Form<ModelNode> form) {
                         reload();
                     }
                 });
     }
 
-    void removeThreadPool(final ThreadPool threadPool, final Form<ModelNode> form) {
+    void removeThreadPool(ThreadPool threadPool, Form<ModelNode> form) {
         crud.removeSingleton(threadPool.type, threadPoolAddress(threadPool), new FinishRemove<ModelNode>(form) {
             @Override
-            public void afterRemove(final Form<ModelNode> form) {
+            public void afterRemove(Form<ModelNode> form) {
                 reload();
             }
         });
     }
 
-    private ResourceAddress threadPoolAddress(final ThreadPool threadPool) {
+    private ResourceAddress threadPoolAddress(ThreadPool threadPool) {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(THREAD_POOL + ""="" + threadPool.resource)
+                .append(THREAD_POOL + EQUALS + threadPool.resource)
                 .resolve(statementContext);
     }
 
@@ -586,24 +573,43 @@ void addJgroups() {
         crud.addSingleton(Names.JGROUPS, jgroupsAddress(), null, address -> reload());
     }
 
-    void saveJgroups(final Map<String, Object> changedValues) {
-        Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE.append(TRANSPORT + ""="" + JGROUPS));
+    void saveJgroups(Map<String, Object> changedValues) {
+        Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE.append(TRANSPORT + EQUALS + JGROUPS));
         crud.saveSingleton(Names.JGROUPS, jgroupsAddress(), changedValues, metadata, this::reload);
     }
 
-    void resetJgroups(final Form<ModelNode> form) {
-        Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE.append(TRANSPORT + ""="" + JGROUPS));
+    void resetJgroups(Form<ModelNode> form) {
+        Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE.append(TRANSPORT + EQUALS + JGROUPS));
         crud.resetSingleton(Names.JGROUPS, jgroupsAddress(), form, metadata, new FinishReset<ModelNode>(form) {
             @Override
-            public void afterReset(final Form<ModelNode> form) {
+            public void afterReset(Form<ModelNode> form) {
                 reload();
             }
         });
     }
 
     private ResourceAddress jgroupsAddress() {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(TRANSPORT + ""="" + JGROUPS)
+                .append(TRANSPORT + EQUALS + JGROUPS)
                 .resolve(statementContext);
     }
+
+
+    // ------------------------------------------------------ inner classes
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @Requires({CACHE_CONTAINER_ADDRESS, DISTRIBUTED_CACHE_ADDRESS, INVALIDATION_CACHE_ADDRESS, LOCAL_CACHE_ADDRESS,
+            REPLICATED_CACHE_ADDRESS, THREAD_POOL_ADDRESS, TRANSPORT_JGROUPS_ADDRESS})
+    @NameToken(NameTokens.CACHE_CONTAINER)
+    public interface MyProxy extends ProxyPlace<CacheContainerPresenter> {
+    }
+
+    public interface MyView extends HalView, HasPresenter<CacheContainerPresenter> {
+        void update(CacheContainer cacheContainer, boolean jgroups);
+        void updateCacheBackups(Cache cache, List<NamedNode> backups);
+        void updateCacheStore(Cache cache, List<Property> stores);
+    }
+    // @formatter:on
 }",2017-10-16T13:25:42Z,344
"@@ -56,37 +56,6 @@
  */
 class StoreElement implements IsElement<HTMLElement>, Attachable, HasPresenter<CacheContainerPresenter> {
 
-    private static final class StoreTable {
-
-        final Store store;
-        final Table table;
-
-        private StoreTable(final Store store, final Table table) {
-            this.store = store;
-            this.table = table;
-        }
-
-        @Override
-        public boolean equals(final Object o) {
-            if (this == o) { return true; }
-            if (!(o instanceof StoreTable)) { return false; }
-
-            StoreTable that = (StoreTable) o;
-
-            //noinspection SimplifiableIfStatement
-            if (store != that.store) { return false; }
-            return table == that.table;
-        }
-
-        @Override
-        public int hashCode() {
-            int result = store.hashCode();
-            result = 31 * result + table.hashCode();
-            return result;
-        }
-    }
-
-
     private final EmptyState emptyState;
     private final HTMLElement headerForm;
     private final String selectStoreId;
@@ -286,4 +255,40 @@ private void formMode(Store store) {
         Elements.setVisible(headerForm, true);
         tabs.forEach((s, t) -> Elements.setVisible(t.asElement(), s == store));
     }
+
+
+    private static final class StoreTable {
+
+        final Store store;
+        final Table table;
+
+        private StoreTable(final Store store, final Table table) {
+            this.store = store;
+            this.table = table;
+        }
+
+        @Override
+        public boolean equals(final Object o) {
+            if (this == o) {
+                return true;
+            }
+            if (!(o instanceof StoreTable)) {
+                return false;
+            }
+
+            StoreTable that = (StoreTable) o;
+            //noinspection SimplifiableIfStatement
+            if (store != that.store) {
+                return false;
+            }
+            return table == that.table;
+        }
+
+        @Override
+        public int hashCode() {
+            int result = store.hashCode();
+            result = 31 * result + table.hashCode();
+            return result;
+        }
+    }
 }",2017-10-16T13:25:42Z,300
"@@ -126,6 +126,8 @@ public static HaPolicy fromResourceName(String resourceName) {
             case ModelDescriptionConstants.SHARED_STORE_SLAVE:
                 result = SHARED_STORE_SLAVE;
                 break;
+            default:
+                break;
         }
         return result;
     }",2017-10-16T13:25:42Z,345
"@@ -40,18 +40,6 @@ public class ModclusterPresenter
         extends MbuiPresenter<ModclusterPresenter.MyView, ModclusterPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    // @formatter:off
-    @ProxyCodeSplit
-    @Requires(ROOT_ADDRESS)
-    @NameToken(NameTokens.MODCLUSTER)
-    public interface MyProxy extends ProxyPlace<ModclusterPresenter> {}
-
-    public interface MyView extends MbuiView<ModclusterPresenter> {
-        void updateConfiguration(ModelNode payload);
-    }
-    // @formatter:on
-
-
     static final String ROOT_ADDRESS = ""/{selected.profile}/subsystem=modcluster/mod-cluster-config=configuration"";
     private static final AddressTemplate ROOT_TEMPLATE = AddressTemplate.of(ROOT_ADDRESS);
 
@@ -60,13 +48,13 @@ public interface MyView extends MbuiView<ModclusterPresenter> {
     private final StatementContext statementContext;
 
     @Inject
-    public ModclusterPresenter(final EventBus eventBus,
-            final MyView view,
-            final MyProxy myProxy,
-            final Finder finder,
-            final CrudOperations crud,
-            final FinderPathFactory finderPathFactory,
-            final StatementContext statementContext) {
+    public ModclusterPresenter(EventBus eventBus,
+            MyView view,
+            MyProxy myProxy,
+            Finder finder,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext) {
         super(eventBus, view, myProxy, finder);
         this.crud = crud;
         this.finderPathFactory = finderPathFactory;
@@ -93,4 +81,17 @@ public FinderPath finderPath() {
     protected void reload() {
         crud.read(ROOT_TEMPLATE, 2, result -> getView().updateConfiguration(result));
     }
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @Requires(ROOT_ADDRESS)
+    @NameToken(NameTokens.MODCLUSTER)
+    public interface MyProxy extends ProxyPlace<ModclusterPresenter> {
+    }
+
+    public interface MyView extends MbuiView<ModclusterPresenter> {
+        void updateConfiguration(ModelNode payload);
+    }
+    // @formatter:on
 }",2017-10-16T13:25:42Z,308
"@@ -41,17 +41,6 @@ public class RequestControllerPresenter
         extends MbuiPresenter<RequestControllerPresenter.MyView, RequestControllerPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    // @formatter:off
-    @ProxyCodeSplit
-    @Requires(ROOT_ADDRESS)
-    @NameToken(NameTokens.REQUEST_CONTROLLER)
-    public interface MyProxy extends ProxyPlace<RequestControllerPresenter> {}
-
-    public interface MyView extends MbuiView<RequestControllerPresenter> {
-        void update(ModelNode payload);
-    }
-    // @formatter:on
-
     private static final String ROOT_ADDRESS = ""/{selected.profile}/subsystem=request-controller"";
     private static final AddressTemplate ROOT_TEMPLATE = AddressTemplate.of(ROOT_ADDRESS);
 
@@ -60,13 +49,13 @@ public interface MyView extends MbuiView<RequestControllerPresenter> {
     private final StatementContext statementContext;
 
     @Inject
-    public RequestControllerPresenter(final EventBus eventBus,
-            final RequestControllerPresenter.MyView view,
-            final RequestControllerPresenter.MyProxy proxy,
-            final Finder finder,
-            final CrudOperations crud,
-            final FinderPathFactory finderPathFactory,
-            final StatementContext statementContext) {
+    public RequestControllerPresenter(EventBus eventBus,
+            RequestControllerPresenter.MyView view,
+            RequestControllerPresenter.MyProxy proxy,
+            Finder finder,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext) {
         super(eventBus, view, proxy, finder);
         this.crud = crud;
         this.finderPathFactory = finderPathFactory;
@@ -93,4 +82,17 @@ public FinderPath finderPath() {
     protected void reload() {
         crud.readRecursive(ROOT_TEMPLATE, result -> getView().update(result));
     }
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @Requires(ROOT_ADDRESS)
+    @NameToken(NameTokens.REQUEST_CONTROLLER)
+    public interface MyProxy extends ProxyPlace<RequestControllerPresenter> {
+    }
+
+    public interface MyView extends MbuiView<RequestControllerPresenter> {
+        void update(ModelNode payload);
+    }
+    // @formatter:on
 }",2017-10-16T13:25:42Z,346
"@@ -26,18 +26,6 @@
 
 class ResourceAdapter extends NamedNode {
 
-    enum AdapterType {
-        ARCHIVE(Names.ARCHIVE.toLowerCase()), MODULE(Names.MODULE.toLowerCase()), UNKNOWN(Names.NOT_AVAILABLE);
-
-        private final String text;
-
-        AdapterType(final String text) {this.text = text;}
-
-        public String text() {
-            return text;
-        }
-    }
-
     ResourceAdapter(final Property property) {
         super(property);
     }
@@ -66,5 +54,20 @@ String getArchive() {
     String getModule() {
         return hasDefined(MODULE) ? get(MODULE).asString() : null;
     }
+
+
+    enum AdapterType {
+        ARCHIVE(Names.ARCHIVE.toLowerCase()), MODULE(Names.MODULE.toLowerCase()), UNKNOWN(Names.NOT_AVAILABLE);
+
+        private final String text;
+
+        AdapterType(final String text) {
+            this.text = text;
+        }
+
+        public String text() {
+            return text;
+        }
+    }
 }
 ",2017-10-16T13:25:42Z,347
"@@ -45,31 +45,19 @@ public class ResourceAdapterPresenter
         extends MbuiPresenter<ResourceAdapterPresenter.MyView, ResourceAdapterPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    // @formatter:off
-    @ProxyCodeSplit
-    @NameToken(NameTokens.RESOURCE_ADAPTER)
-    @Requires(AddressTemplates.RESOURCE_ADAPTER_ADDRESS)
-    public interface MyProxy extends ProxyPlace<ResourceAdapterPresenter> {}
-
-    public interface MyView extends MbuiView<ResourceAdapterPresenter> {
-        void update(ResourceAdapter resourceAdapter);
-    }
-    // @formatter:on
-
-
     private final CrudOperations crud;
     private final FinderPathFactory finderPathFactory;
     private final StatementContext statementContext;
     private String resourceAdapter;
 
     @Inject
-    public ResourceAdapterPresenter(final EventBus eventBus,
-            final MyView view,
-            final MyProxy myProxy,
-            final Finder finder,
-            final CrudOperations crud,
-            final FinderPathFactory finderPathFactory,
-            final StatementContext statementContext) {
+    public ResourceAdapterPresenter(EventBus eventBus,
+            MyView view,
+            MyProxy myProxy,
+            Finder finder,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext) {
         super(eventBus, view, myProxy, finder);
         this.crud = crud;
         this.finderPathFactory = finderPathFactory;
@@ -83,7 +71,7 @@ protected void onBind() {
     }
 
     @Override
-    public void prepareFromRequest(final PlaceRequest request) {
+    public void prepareFromRequest(PlaceRequest request) {
         super.prepareFromRequest(request);
         resourceAdapter = request.getParameter(NAME, null);
     }
@@ -109,4 +97,17 @@ protected void reload() {
         ResourceAddress address = SELECTED_RESOURCE_ADAPTER_TEMPLATE.resolve(statementContext);
         crud.readRecursive(address, result -> getView().update(new ResourceAdapter(resourceAdapter, result)));
     }
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @NameToken(NameTokens.RESOURCE_ADAPTER)
+    @Requires(AddressTemplates.RESOURCE_ADAPTER_ADDRESS)
+    public interface MyProxy extends ProxyPlace<ResourceAdapterPresenter> {
+    }
+
+    public interface MyView extends MbuiView<ResourceAdapterPresenter> {
+        void update(ResourceAdapter resourceAdapter);
+    }
+    // @formatter:on
 }",2017-10-16T13:25:42Z,348
"@@ -64,21 +64,10 @@ public class TransactionPresenter
         extends MbuiPresenter<TransactionPresenter.MyView, TransactionPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    // @formatter:off
-    @ProxyCodeSplit
-    @NameToken(NameTokens.TRANSACTIONS)
-    @Requires(TRANSACTIONS_SUBSYSTEM_ADDRESS)
-    public interface MyProxy extends ProxyPlace<TransactionPresenter> {}
-
-    public interface MyView extends MbuiView<TransactionPresenter> {
-        void updateConfiguration(ModelNode conf);
-    }
-    // @formatter:on
-
     private static final String PROCESS_ID_UUID = ""process-id-uuid"";
     private static final String PROCESS_ID_SOCKET_BINDING = ""process-id-socket-binding"";
     private static final String PROCESS_ID_SOCKET_MAX_PORTS = ""process-id-socket-max-ports"";
-    private final static ValidationResult invalid = ValidationResult
+    private static final ValidationResult invalid = ValidationResult
             .invalid(""Validation error, see error messages below."");
 
     private final CrudOperations crud;
@@ -89,16 +78,16 @@ public interface MyView extends MbuiView<TransactionPresenter> {
     private final Resources resources;
 
     @Inject
-    public TransactionPresenter(final EventBus eventBus,
-            final MyView view,
-            final MyProxy proxy,
-            final Finder finder,
-            final CrudOperations crud,
-            final FinderPathFactory finderPathFactory,
-            final StatementContext statementContext,
-            final Dispatcher dispatcher,
-            final MetadataRegistry metadataRegistry,
-            final Resources resources) {
+    public TransactionPresenter(EventBus eventBus,
+            MyView view,
+            MyProxy proxy,
+            Finder finder,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext,
+            Dispatcher dispatcher,
+            MetadataRegistry metadataRegistry,
+            Resources resources) {
         super(eventBus, view, proxy, finder);
         this.crud = crud;
         this.finderPathFactory = finderPathFactory;
@@ -177,7 +166,7 @@ void resetProcessForm(Form<ModelNode> form) {
         ResourceAddress address = TRANSACTIONS_SUBSYSTEM_TEMPLATE.resolve(statementContext);
         crud.resetSingleton(""Process"", address, form, metadata, new FinishReset<ModelNode>(form) {
             @Override
-            public void afterReset(final Form<ModelNode> form) {
+            public void afterReset(Form<ModelNode> form) {
                 reload();
             }
         });
@@ -321,4 +310,17 @@ FormValidation<ModelNode> getProcessFormValidation() {
     FormValidation<ModelNode> getJdbcFormValidation() {
         return jdbcFormValidation;
     }
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @NameToken(NameTokens.TRANSACTIONS)
+    @Requires(TRANSACTIONS_SUBSYSTEM_ADDRESS)
+    public interface MyProxy extends ProxyPlace<TransactionPresenter> {
+    }
+
+    public interface MyView extends MbuiView<TransactionPresenter> {
+        void updateConfiguration(ModelNode conf);
+    }
+    // @formatter:on
 }",2017-10-16T13:25:42Z,3
"@@ -101,6 +101,8 @@ public String filter(String resource) {
                         return handlerChainType.resource;
                     case HANDLER_CHAIN_NAME:
                         return handlerChain != null ? handlerChain.getName() : null;
+                    default:
+                        break;
                 }
                 return null;
             }
@@ -346,7 +348,8 @@ private void updateHandlers(ModelNode modelNode) {
     @ProxyCodeSplit
     @NameToken(NameTokens.WEBSERVICES)
     @Requires(AddressTemplates.WEBSERVICES_ADDRESS)
-    public interface MyProxy extends ProxyPlace<WebservicePresenter> {}
+    public interface MyProxy extends ProxyPlace<WebservicePresenter> {
+    }
 
     public interface MyView extends HalView, HasPresenter<WebservicePresenter> {
         void update(ModelNode payload);",2017-10-16T13:25:42Z,303
"@@ -283,7 +283,9 @@
                                     scope=""selected""/>
                         </actions>
                         <columns>
-                            <column name=""name"" title=""{{resources.constants().name()}}""/>
+                            <!-- log formatter resources do not a name attribute,
+                            so we need to provide a value which calls NamedNode.getName() -->
+                            <column name=""name"" title=""{{resources.constants().name()}}"" value=""{{row.getName()}}""/>
                             <column name=""pattern""/>
                         </columns>
                     </table>
@@ -319,7 +321,9 @@
                                     scope=""selected""/>
                         </actions>
                         <columns>
-                            <column name=""name"" title=""{{resources.constants().name()}}""/>
+                            <!-- log formatter resources do not a name attribute,
+                            so we need to provide a value which calls NamedNode.getName() -->
+                            <column name=""name"" title=""{{resources.constants().name()}}"" value=""{{row.getName()}}""/>
                         </columns>
                     </table>
                     <form id=""logging-formatter-custom-form"">",2016-05-12T08:34:58Z,349
"@@ -32,17 +32,17 @@ class ColumnFactory {
         labelBuilder = new LabelBuilder();
     }
 
-    <T extends ModelNode> Column<T> createColumn(final Property attributeDescription) {
+    <T extends ModelNode> Column<T> createColumn(final Property attributeDescription, final String title) {
         String name = attributeDescription.getName();
-        String title = labelBuilder.label(attributeDescription);
+        String resolvedTitle = title != null ? title : labelBuilder.label(attributeDescription);
 
-        // TODO Think about other columns type depending on ModelType
+        // TODO Think about other column types depending on ModelType
         Column.RenderCallback<T, Object> render = (cell, type, row, meta) -> {
             if (row.hasDefined(name)) {
                 return row.get(name).asString();
             }
             return null;
         };
-        return new ColumnBuilder<>(name, title, render).build();
+        return new ColumnBuilder<>(name, resolvedTitle, render).build();
     }
 }",2016-05-12T08:34:58Z,350
"@@ -55,9 +55,13 @@ public Builder<T> columns(@NonNls String first, @NonNls String... rest) {
         }
 
         public Builder<T> column(@NonNls String attribute) {
+            return column(attribute, null);
+        }
+
+        public Builder<T> column(@NonNls String attribute, String title) {
             Property attributeDescription = metadata.getDescription().findAttribute(ATTRIBUTES, attribute);
             if (attributeDescription != null) {
-                Column<T> column = columnFactory.createColumn(attributeDescription);
+                Column<T> column = columnFactory.createColumn(attributeDescription, title);
                 return column(column);
             } else {
                 logger.error(""No attribute description for column '{}' found in resource description\n{}"", //NON-NLS",2016-05-12T08:34:58Z,108
"@@ -15,19 +15,62 @@
  */
 package org.jboss.hal.processor.mbui;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /**
  * @author Harald Pehl
  */
 public class DataTableInfo extends MbuiElementInfo {
 
+    public static class Column {
+
+        private final String name;
+        private final String title;
+        private final String value;
+
+        public Column(final String name, final String title, final String value) {
+            this.name = name;
+            this.title = Handlebars.templateSafeValue(title); // title can be a simple value or an expression
+            this.value = Handlebars.stripHandlebar(value); // value has to be an expression
+        }
+
+        public String getName() {
+            return name;
+        }
+
+        public String getTitle() {
+            return title;
+        }
+
+        public String getValue() {
+            return value;
+        }
+
+        public boolean isSimple() {
+            return title == null && value == null;
+        }
+
+        public boolean isSimpleWithTitle() {
+            return title != null && value == null;
+        }
+
+        public boolean isHasValue() {
+            return value != null;
+        }
+    }
+
+
     private final String typeParameter;
     private final MetadataInfo metadata;
     private FormInfo formRef;
+    private final List<Column> columns;
 
     public DataTableInfo(final String name, final String selector, String typeParameter, MetadataInfo metadata) {
         super(name, selector);
         this.typeParameter = typeParameter;
         this.metadata = metadata;
+        this.columns = new ArrayList<>();
     }
 
     public String getTypeParameter() {
@@ -42,7 +85,24 @@ public FormInfo getFormRef() {
         return formRef;
     }
 
-    public void setFormRef(final FormInfo formRef) {
+    void setFormRef(final FormInfo formRef) {
         this.formRef = formRef;
     }
+
+    public List<Column> getColumns() {
+        return columns;
+    }
+
+    public boolean isOnlySimpleColumns() {
+        for (Column column : columns) {
+            if (!column.isSimple()) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    void addColumn(Column column) {
+        columns.add(column);
+    }
 }",2016-05-12T08:34:58Z,351
"@@ -0,0 +1,44 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.processor.mbui;
+
+/**
+ * @author Harald Pehl
+ */
+final class Handlebars {
+
+    private Handlebars() {}
+
+    static boolean isExpression(String value) {
+        return value != null && value.startsWith(""{{"") && value.endsWith(""}}"");
+    }
+
+    static String stripHandlebar(String pattern) {
+        if (isExpression(pattern)) {
+            int start = ""{{"".length();
+            int end = pattern.length() - ""}}"".length();
+            return pattern.substring(start, end);
+        }
+        return pattern;
+    }
+
+    static String templateSafeValue(final String value) {
+        if (value != null) {
+            return isExpression(value) ? stripHandlebar(value) : ""\"""" + value + ""\"""";
+        }
+        return null;
+    }
+}",2016-05-12T08:34:58Z,91
"@@ -18,6 +18,7 @@
 import java.beans.Introspector;
 import java.io.File;
 import java.io.IOException;
+import java.io.StringWriter;
 import java.lang.annotation.Annotation;
 import java.util.EnumSet;
 import java.util.List;
@@ -61,6 +62,8 @@
 import org.jdom2.JDOMException;
 import org.jdom2.filter.Filters;
 import org.jdom2.input.SAXBuilder;
+import org.jdom2.output.Format;
+import org.jdom2.output.XMLOutputter;
 import org.jdom2.xpath.XPathExpression;
 import org.jdom2.xpath.XPathFactory;
 
@@ -162,7 +165,7 @@ protected void processType(final TypeElement type, final MbuiView mbuiView) {
         MbuiViewContext context = new MbuiViewContext(TypeSimplifier.packageNameOf(type),
                 TypeSimplifier.classNameOf(type), subclass, createMethod);
 
-        // parse and validate the mbui xml
+        // parse and validate the MBUI XML
         xpath = XPathFactory.instance();
         Document document = parseXml(type, mbuiView);
         validateDocument(type, document);
@@ -226,10 +229,10 @@ private Document parseXml(final TypeElement type, final MbuiView mbuiView) {
             return new SAXBuilder().build(file.openReader(true));
 
         } catch (IOException e) {
-            error(type, ""Cannot find MBUI xml \""%s\"". "" +
+            error(type, ""Cannot find MBUI XML \""%s\"". "" +
                     ""Please make sure the file exists and resides in the source path."", fq);
         } catch (JDOMException e) {
-            error(type, ""Cannot parse MBUI xml \""%s\"". Please verify that the file contains valid XML."", fq);
+            error(type, ""Cannot parse MBUI XML \""%s\"". Please verify that the file contains valid XML."", fq);
         }
         return null;
     }
@@ -238,20 +241,20 @@ private void validateDocument(final TypeElement type, final Document document) {
         // verify root element
         org.jdom2.Element root = document.getRootElement();
         if (!root.getName().equals(XmlTags.VIEW)) {
-            error(type, ""Invalid root element in MBUI xml. Allowed: \""%s\"", found: \""%s\""."", XmlTags.VIEW,
+            error(type, ""Invalid root element in MBUI XML. Allowed: \""%s\"", found: \""%s\""."", XmlTags.VIEW,
                     root.getName());
         }
 
         // verify first child
         List<org.jdom2.Element> children = root.getChildren();
         if (children.isEmpty()) {
-            error(type, ""No children found in MBUI xml."");
+            error(type, ""No children found in MBUI XML."");
         } else if (children.size() > 1) {
-            error(type, ""Only one child allowed in MBUI xml."");
+            error(type, ""Only one child allowed in MBUI XML."");
         }
         org.jdom2.Element child = children.get(0);
         if (!(child.getName().equals(XmlTags.VERTICAL_NAVIGATION) || child.getName().equals(XmlTags.METADATA))) {
-            error(type, ""Invalid child of root element in MBUI xml. Allowed: \""%s\"" or \""%s\"", found: \""%s\""."",
+            error(type, ""Invalid child of root element in MBUI XML. Allowed: \""%s\"" or \""%s\"", found: \""%s\""."",
                     XmlTags.VERTICAL_NAVIGATION, XmlTags.METADATA, child.getName());
         }
     }
@@ -262,7 +265,7 @@ private void processMetadata(final TypeElement type, final Document document, fi
         for (org.jdom2.Element element : elements) {
             String template = element.getAttributeValue(""address"");
             if (template == null) {
-                error(type, ""Missing address attribute in metadata element"");
+                error(type, ""Missing address attribute in metadata element \""%s\"""", xmlAsString(element));
             } else {
                 context.addMetadata(template);
             }
@@ -300,28 +303,16 @@ private void processMbuiElements(final TypeElement type, final Document document
                                 processVerticalNavigation(field, document, element, selector, context);
                                 break;
                             case DataTable:
-                                processDataTable(field, document, element, selector, context);
+                                processDataTables(field, document, element, selector, context);
                                 break;
                             case Form:
-                                processForm(field, document, element, selector, context);
+                                processForms(field, document, element, selector, context);
                                 break;
                         }
                     }
                 });
     }
 
-    private ElementType getMbuiElementType(TypeMirror dataElementType) {
-        if (isAssignable(dataElementType, VerticalNavigation.class)) {
-            return VerticalNavigation;
-        } else if (isAssignable(dataElementType, Form.class)) {
-            return Form;
-        } else if (isAssignable(dataElementType, DataTable.class)) {
-            return DataTable;
-        } else {
-            return null;
-        }
-    }
-
     private String getSelector(Element element) {
         String selector = null;
 
@@ -343,30 +334,70 @@ private org.jdom2.Element verifySelector(String selector, Element element, Docum
         List<org.jdom2.Element> elements = expression.evaluate(document);
         if (elements.isEmpty()) {
             error(element,
-                    ""Cannot find a matching element in the MBUI xml with id \""%s\""."", selector);
+                    ""Cannot find a matching element in the MBUI XML with id \""%s\""."", selector);
         } else if (elements.size() > 1) {
             error(element,
-                    ""Found %d matching elements in the MBUI xml with id \""%s\"". Id must be unique."",
+                    ""Found %d matching elements in the MBUI XML with id \""%s\"". Id must be unique."",
                     elements.size(), selector);
         }
         return elements.get(0);
     }
 
+    private ElementType getMbuiElementType(TypeMirror dataElementType) {
+        if (isAssignable(dataElementType, VerticalNavigation.class)) {
+            return VerticalNavigation;
+        } else if (isAssignable(dataElementType, Form.class)) {
+            return Form;
+        } else if (isAssignable(dataElementType, DataTable.class)) {
+            return DataTable;
+        } else {
+            return null;
+        }
+    }
+
     private void processVerticalNavigation(final VariableElement field, final Document document,
             final org.jdom2.Element element, final String selector, final MbuiViewContext context) {
         VerticalNavigationInfo navigationInfo = new VerticalNavigationInfo(field.getSimpleName().toString(), selector);
         context.setVerticalNavigation(navigationInfo);
     }
 
-    private void processDataTable(final VariableElement field, final Document document, final org.jdom2.Element element,
-            final String selector, final MbuiViewContext context) {
+    private void processDataTables(final VariableElement field, final Document document,
+            final org.jdom2.Element element, final String selector, final MbuiViewContext context) {
         MetadataInfo metadata = findMetadata(field, element, context);
         DataTableInfo tableInfo = new DataTableInfo(field.getSimpleName().toString(), selector, getTypeParameter(field),
                 metadata);
         context.addDataTableInfo(tableInfo);
+
+        org.jdom2.Element columnsContainer = element.getChild(""columns"");
+        if (columnsContainer != null) {
+            for (org.jdom2.Element columnElement : columnsContainer.getChildren(""column"")) {
+                String name = columnElement.getAttributeValue(""name"");
+                String title = columnElement.getAttributeValue(""title"");
+                String value = columnElement.getAttributeValue(""value"");
+
+                if (name == null) {
+                    error(field, ""Name is missing for column \""%s\"" in data-table#%s"",
+                            xmlAsString(columnElement), selector);
+                }
+                if (value != null) {
+                    if (!Handlebars.isExpression(value)) {
+                        error(field,
+                                ""Invalid column \""%s\"" in data-table#%s: Value has to be an expression."",
+                                xmlAsString(columnElement), selector);
+                    }
+                    if (title == null) {
+                        error(field,
+                                ""Invalid column \""%s\"" in data-table#%s: If value is given, title is mandatory."",
+                                xmlAsString(columnElement), selector);
+                    }
+                }
+                DataTableInfo.Column column = new DataTableInfo.Column(name, title, value);
+                tableInfo.addColumn(column);
+            }
+        }
     }
 
-    private void processForm(final VariableElement field, final Document document, final org.jdom2.Element element,
+    private void processForms(final VariableElement field, final Document document, final org.jdom2.Element element,
             final String selector, final MbuiViewContext context) {
         MetadataInfo metadata = findMetadata(field, element, context);
         FormInfo formInfo = new FormInfo(field.getSimpleName().toString(), selector, getTypeParameter(field), metadata);
@@ -376,6 +407,11 @@ private void processForm(final VariableElement field, final Document document, f
         if (attributesContainer != null) {
             for (org.jdom2.Element attributeElement : attributesContainer.getChildren(""attribute"")) {
                 String name = attributeElement.getAttributeValue(""name"");
+                if (name == null) {
+                    error(field, ""Name is missing for attribute \""%s\"" in form#%s"", xmlAsString(attributeElement),
+                            selector);
+                }
+
                 FormInfo.Attribute attribute = new FormInfo.Attribute(name);
                 org.jdom2.Element suggestHandler = attributeElement.getChild(""suggest-handler"");
                 if (suggestHandler != null) {
@@ -398,15 +434,13 @@ private MetadataInfo findMetadata(final VariableElement field, final org.jdom2.E
         XPathExpression<org.jdom2.Element> expression = xpath.compile(""ancestor::metadata"", Filters.element());
         org.jdom2.Element metadataElement = expression.evaluateFirst(element);
         if (metadataElement == null) {
-            error(field,
-                    ""Missing metadata ancestor. Please make sure the mapped XML element has a \""<%s/>\"" ancestor element."",
-                    XmlTags.METADATA);
+            error(field, ""Missing metadata ancestor for %s#%s. Please make sure the there's a <%s/> ancestor element."",
+                    element.getName(), element.getAttributeValue(""id""), XmlTags.METADATA);
         } else {
             metadataInfo = context.getMetadataInfo(metadataElement.getAttributeValue(""address""));
             if (metadataInfo == null) {
-                error(field,
-                        ""No metadata found. Please make sure the mapped XML element has a \""<%s/>\"" ancestor element."",
-                        XmlTags.METADATA);
+                error(field, ""No metadata found for %s#%s. Please make sure there's a <%s/> ancestor element."",
+                        element.getName(), element.getAttributeValue(""id""), XmlTags.METADATA);
             }
         }
         return metadataInfo;
@@ -523,4 +557,19 @@ private void processPostConstruct(TypeElement type, final MbuiViewContext contex
                     context.getPostConstructs().size(), PostConstruct.class.getSimpleName());
         }
     }
+
+
+    // ------------------------------------------------------ helper methods
+
+    private String xmlAsString(org.jdom2.Element element) {
+        String asString;
+        StringWriter writer = new StringWriter();
+        try {
+            new XMLOutputter(Format.getCompactFormat()).output(element, writer);
+            asString = writer.toString();
+        } catch (IOException e) {
+            asString = ""<"" + element + ""/>"";
+        }
+        return asString;
+    }
 }",2016-05-12T08:34:58Z,352
"@@ -67,6 +67,19 @@ final class ${context.subclass} extends ${context.base} {
 
         <#list context.dataTables as table>
         Options<${table.typeParameter}> ${table.name}Options = new ModelNodeTable.Builder<${table.typeParameter}>(${table.metadata.name})
+            <#if table.onlySimpleColumns>
+            .columns(<#list table.columns as column>""${column.name}""<#if column_has_next>, </#if></#list>)
+            <#else>
+                <#list table.columns as column>
+                    <#if column.simple>
+            .column(""${column.name}"")
+                    <#elseif column.simpleWithTitle>
+            .column(""${column.name}"", ${column.title})
+                    <#elseif column.hasValue>
+            .column(""${column.name}"", ${column.title}, (cell, type, row, meta) -> ${column.value})
+                    </#if>
+                </#list>
+            </#if>
             .build();
         ${table.name} = new ModelNodeTable<>(""${table.selector}"", ${table.name}Options);
         </#list>",2016-05-12T08:34:58Z,314
"@@ -283,7 +283,9 @@
                                     scope=""selected""/>
                         </actions>
                         <columns>
-                            <column name=""name"" title=""{{resources.constants().name()}}""/>
+                            <!-- log formatter resources do not a name attribute,
+                            so we need to provide a value which calls NamedNode.getName() -->
+                            <column name=""name"" title=""{{resources.constants().name()}}"" value=""{{row.getName()}}""/>
                             <column name=""pattern""/>
                         </columns>
                     </table>
@@ -319,7 +321,9 @@
                                     scope=""selected""/>
                         </actions>
                         <columns>
-                            <column name=""name"" title=""{{resources.constants().name()}}""/>
+                            <!-- log formatter resources do not a name attribute,
+                            so we need to provide a value which calls NamedNode.getName() -->
+                            <column name=""name"" title=""{{resources.constants().name()}}"" value=""{{row.getName()}}""/>
                         </columns>
                     </table>
                     <form id=""logging-formatter-custom-form"">",2016-05-12T08:34:58Z,349
"@@ -32,17 +32,17 @@ class ColumnFactory {
         labelBuilder = new LabelBuilder();
     }
 
-    <T extends ModelNode> Column<T> createColumn(final Property attributeDescription) {
+    <T extends ModelNode> Column<T> createColumn(final Property attributeDescription, final String title) {
         String name = attributeDescription.getName();
-        String title = labelBuilder.label(attributeDescription);
+        String resolvedTitle = title != null ? title : labelBuilder.label(attributeDescription);
 
-        // TODO Think about other columns type depending on ModelType
+        // TODO Think about other column types depending on ModelType
         Column.RenderCallback<T, Object> render = (cell, type, row, meta) -> {
             if (row.hasDefined(name)) {
                 return row.get(name).asString();
             }
             return null;
         };
-        return new ColumnBuilder<>(name, title, render).build();
+        return new ColumnBuilder<>(name, resolvedTitle, render).build();
     }
 }",2016-05-12T08:34:58Z,350
"@@ -55,9 +55,13 @@ public Builder<T> columns(@NonNls String first, @NonNls String... rest) {
         }
 
         public Builder<T> column(@NonNls String attribute) {
+            return column(attribute, null);
+        }
+
+        public Builder<T> column(@NonNls String attribute, String title) {
             Property attributeDescription = metadata.getDescription().findAttribute(ATTRIBUTES, attribute);
             if (attributeDescription != null) {
-                Column<T> column = columnFactory.createColumn(attributeDescription);
+                Column<T> column = columnFactory.createColumn(attributeDescription, title);
                 return column(column);
             } else {
                 logger.error(""No attribute description for column '{}' found in resource description\n{}"", //NON-NLS",2016-05-12T08:34:58Z,108
"@@ -15,19 +15,62 @@
  */
 package org.jboss.hal.processor.mbui;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /**
  * @author Harald Pehl
  */
 public class DataTableInfo extends MbuiElementInfo {
 
+    public static class Column {
+
+        private final String name;
+        private final String title;
+        private final String value;
+
+        public Column(final String name, final String title, final String value) {
+            this.name = name;
+            this.title = Handlebars.templateSafeValue(title); // title can be a simple value or an expression
+            this.value = Handlebars.stripHandlebar(value); // value has to be an expression
+        }
+
+        public String getName() {
+            return name;
+        }
+
+        public String getTitle() {
+            return title;
+        }
+
+        public String getValue() {
+            return value;
+        }
+
+        public boolean isSimple() {
+            return title == null && value == null;
+        }
+
+        public boolean isSimpleWithTitle() {
+            return title != null && value == null;
+        }
+
+        public boolean isHasValue() {
+            return value != null;
+        }
+    }
+
+
     private final String typeParameter;
     private final MetadataInfo metadata;
     private FormInfo formRef;
+    private final List<Column> columns;
 
     public DataTableInfo(final String name, final String selector, String typeParameter, MetadataInfo metadata) {
         super(name, selector);
         this.typeParameter = typeParameter;
         this.metadata = metadata;
+        this.columns = new ArrayList<>();
     }
 
     public String getTypeParameter() {
@@ -42,7 +85,24 @@ public FormInfo getFormRef() {
         return formRef;
     }
 
-    public void setFormRef(final FormInfo formRef) {
+    void setFormRef(final FormInfo formRef) {
         this.formRef = formRef;
     }
+
+    public List<Column> getColumns() {
+        return columns;
+    }
+
+    public boolean isOnlySimpleColumns() {
+        for (Column column : columns) {
+            if (!column.isSimple()) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    void addColumn(Column column) {
+        columns.add(column);
+    }
 }",2016-05-12T08:34:58Z,351
"@@ -0,0 +1,44 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.processor.mbui;
+
+/**
+ * @author Harald Pehl
+ */
+final class Handlebars {
+
+    private Handlebars() {}
+
+    static boolean isExpression(String value) {
+        return value != null && value.startsWith(""{{"") && value.endsWith(""}}"");
+    }
+
+    static String stripHandlebar(String pattern) {
+        if (isExpression(pattern)) {
+            int start = ""{{"".length();
+            int end = pattern.length() - ""}}"".length();
+            return pattern.substring(start, end);
+        }
+        return pattern;
+    }
+
+    static String templateSafeValue(final String value) {
+        if (value != null) {
+            return isExpression(value) ? stripHandlebar(value) : ""\"""" + value + ""\"""";
+        }
+        return null;
+    }
+}",2016-05-12T08:34:58Z,91
"@@ -18,6 +18,7 @@
 import java.beans.Introspector;
 import java.io.File;
 import java.io.IOException;
+import java.io.StringWriter;
 import java.lang.annotation.Annotation;
 import java.util.EnumSet;
 import java.util.List;
@@ -61,6 +62,8 @@
 import org.jdom2.JDOMException;
 import org.jdom2.filter.Filters;
 import org.jdom2.input.SAXBuilder;
+import org.jdom2.output.Format;
+import org.jdom2.output.XMLOutputter;
 import org.jdom2.xpath.XPathExpression;
 import org.jdom2.xpath.XPathFactory;
 
@@ -162,7 +165,7 @@ protected void processType(final TypeElement type, final MbuiView mbuiView) {
         MbuiViewContext context = new MbuiViewContext(TypeSimplifier.packageNameOf(type),
                 TypeSimplifier.classNameOf(type), subclass, createMethod);
 
-        // parse and validate the mbui xml
+        // parse and validate the MBUI XML
         xpath = XPathFactory.instance();
         Document document = parseXml(type, mbuiView);
         validateDocument(type, document);
@@ -226,10 +229,10 @@ private Document parseXml(final TypeElement type, final MbuiView mbuiView) {
             return new SAXBuilder().build(file.openReader(true));
 
         } catch (IOException e) {
-            error(type, ""Cannot find MBUI xml \""%s\"". "" +
+            error(type, ""Cannot find MBUI XML \""%s\"". "" +
                     ""Please make sure the file exists and resides in the source path."", fq);
         } catch (JDOMException e) {
-            error(type, ""Cannot parse MBUI xml \""%s\"". Please verify that the file contains valid XML."", fq);
+            error(type, ""Cannot parse MBUI XML \""%s\"". Please verify that the file contains valid XML."", fq);
         }
         return null;
     }
@@ -238,20 +241,20 @@ private void validateDocument(final TypeElement type, final Document document) {
         // verify root element
         org.jdom2.Element root = document.getRootElement();
         if (!root.getName().equals(XmlTags.VIEW)) {
-            error(type, ""Invalid root element in MBUI xml. Allowed: \""%s\"", found: \""%s\""."", XmlTags.VIEW,
+            error(type, ""Invalid root element in MBUI XML. Allowed: \""%s\"", found: \""%s\""."", XmlTags.VIEW,
                     root.getName());
         }
 
         // verify first child
         List<org.jdom2.Element> children = root.getChildren();
         if (children.isEmpty()) {
-            error(type, ""No children found in MBUI xml."");
+            error(type, ""No children found in MBUI XML."");
         } else if (children.size() > 1) {
-            error(type, ""Only one child allowed in MBUI xml."");
+            error(type, ""Only one child allowed in MBUI XML."");
         }
         org.jdom2.Element child = children.get(0);
         if (!(child.getName().equals(XmlTags.VERTICAL_NAVIGATION) || child.getName().equals(XmlTags.METADATA))) {
-            error(type, ""Invalid child of root element in MBUI xml. Allowed: \""%s\"" or \""%s\"", found: \""%s\""."",
+            error(type, ""Invalid child of root element in MBUI XML. Allowed: \""%s\"" or \""%s\"", found: \""%s\""."",
                     XmlTags.VERTICAL_NAVIGATION, XmlTags.METADATA, child.getName());
         }
     }
@@ -262,7 +265,7 @@ private void processMetadata(final TypeElement type, final Document document, fi
         for (org.jdom2.Element element : elements) {
             String template = element.getAttributeValue(""address"");
             if (template == null) {
-                error(type, ""Missing address attribute in metadata element"");
+                error(type, ""Missing address attribute in metadata element \""%s\"""", xmlAsString(element));
             } else {
                 context.addMetadata(template);
             }
@@ -300,28 +303,16 @@ private void processMbuiElements(final TypeElement type, final Document document
                                 processVerticalNavigation(field, document, element, selector, context);
                                 break;
                             case DataTable:
-                                processDataTable(field, document, element, selector, context);
+                                processDataTables(field, document, element, selector, context);
                                 break;
                             case Form:
-                                processForm(field, document, element, selector, context);
+                                processForms(field, document, element, selector, context);
                                 break;
                         }
                     }
                 });
     }
 
-    private ElementType getMbuiElementType(TypeMirror dataElementType) {
-        if (isAssignable(dataElementType, VerticalNavigation.class)) {
-            return VerticalNavigation;
-        } else if (isAssignable(dataElementType, Form.class)) {
-            return Form;
-        } else if (isAssignable(dataElementType, DataTable.class)) {
-            return DataTable;
-        } else {
-            return null;
-        }
-    }
-
     private String getSelector(Element element) {
         String selector = null;
 
@@ -343,30 +334,70 @@ private org.jdom2.Element verifySelector(String selector, Element element, Docum
         List<org.jdom2.Element> elements = expression.evaluate(document);
         if (elements.isEmpty()) {
             error(element,
-                    ""Cannot find a matching element in the MBUI xml with id \""%s\""."", selector);
+                    ""Cannot find a matching element in the MBUI XML with id \""%s\""."", selector);
         } else if (elements.size() > 1) {
             error(element,
-                    ""Found %d matching elements in the MBUI xml with id \""%s\"". Id must be unique."",
+                    ""Found %d matching elements in the MBUI XML with id \""%s\"". Id must be unique."",
                     elements.size(), selector);
         }
         return elements.get(0);
     }
 
+    private ElementType getMbuiElementType(TypeMirror dataElementType) {
+        if (isAssignable(dataElementType, VerticalNavigation.class)) {
+            return VerticalNavigation;
+        } else if (isAssignable(dataElementType, Form.class)) {
+            return Form;
+        } else if (isAssignable(dataElementType, DataTable.class)) {
+            return DataTable;
+        } else {
+            return null;
+        }
+    }
+
     private void processVerticalNavigation(final VariableElement field, final Document document,
             final org.jdom2.Element element, final String selector, final MbuiViewContext context) {
         VerticalNavigationInfo navigationInfo = new VerticalNavigationInfo(field.getSimpleName().toString(), selector);
         context.setVerticalNavigation(navigationInfo);
     }
 
-    private void processDataTable(final VariableElement field, final Document document, final org.jdom2.Element element,
-            final String selector, final MbuiViewContext context) {
+    private void processDataTables(final VariableElement field, final Document document,
+            final org.jdom2.Element element, final String selector, final MbuiViewContext context) {
         MetadataInfo metadata = findMetadata(field, element, context);
         DataTableInfo tableInfo = new DataTableInfo(field.getSimpleName().toString(), selector, getTypeParameter(field),
                 metadata);
         context.addDataTableInfo(tableInfo);
+
+        org.jdom2.Element columnsContainer = element.getChild(""columns"");
+        if (columnsContainer != null) {
+            for (org.jdom2.Element columnElement : columnsContainer.getChildren(""column"")) {
+                String name = columnElement.getAttributeValue(""name"");
+                String title = columnElement.getAttributeValue(""title"");
+                String value = columnElement.getAttributeValue(""value"");
+
+                if (name == null) {
+                    error(field, ""Name is missing for column \""%s\"" in data-table#%s"",
+                            xmlAsString(columnElement), selector);
+                }
+                if (value != null) {
+                    if (!Handlebars.isExpression(value)) {
+                        error(field,
+                                ""Invalid column \""%s\"" in data-table#%s: Value has to be an expression."",
+                                xmlAsString(columnElement), selector);
+                    }
+                    if (title == null) {
+                        error(field,
+                                ""Invalid column \""%s\"" in data-table#%s: If value is given, title is mandatory."",
+                                xmlAsString(columnElement), selector);
+                    }
+                }
+                DataTableInfo.Column column = new DataTableInfo.Column(name, title, value);
+                tableInfo.addColumn(column);
+            }
+        }
     }
 
-    private void processForm(final VariableElement field, final Document document, final org.jdom2.Element element,
+    private void processForms(final VariableElement field, final Document document, final org.jdom2.Element element,
             final String selector, final MbuiViewContext context) {
         MetadataInfo metadata = findMetadata(field, element, context);
         FormInfo formInfo = new FormInfo(field.getSimpleName().toString(), selector, getTypeParameter(field), metadata);
@@ -376,6 +407,11 @@ private void processForm(final VariableElement field, final Document document, f
         if (attributesContainer != null) {
             for (org.jdom2.Element attributeElement : attributesContainer.getChildren(""attribute"")) {
                 String name = attributeElement.getAttributeValue(""name"");
+                if (name == null) {
+                    error(field, ""Name is missing for attribute \""%s\"" in form#%s"", xmlAsString(attributeElement),
+                            selector);
+                }
+
                 FormInfo.Attribute attribute = new FormInfo.Attribute(name);
                 org.jdom2.Element suggestHandler = attributeElement.getChild(""suggest-handler"");
                 if (suggestHandler != null) {
@@ -398,15 +434,13 @@ private MetadataInfo findMetadata(final VariableElement field, final org.jdom2.E
         XPathExpression<org.jdom2.Element> expression = xpath.compile(""ancestor::metadata"", Filters.element());
         org.jdom2.Element metadataElement = expression.evaluateFirst(element);
         if (metadataElement == null) {
-            error(field,
-                    ""Missing metadata ancestor. Please make sure the mapped XML element has a \""<%s/>\"" ancestor element."",
-                    XmlTags.METADATA);
+            error(field, ""Missing metadata ancestor for %s#%s. Please make sure the there's a <%s/> ancestor element."",
+                    element.getName(), element.getAttributeValue(""id""), XmlTags.METADATA);
         } else {
             metadataInfo = context.getMetadataInfo(metadataElement.getAttributeValue(""address""));
             if (metadataInfo == null) {
-                error(field,
-                        ""No metadata found. Please make sure the mapped XML element has a \""<%s/>\"" ancestor element."",
-                        XmlTags.METADATA);
+                error(field, ""No metadata found for %s#%s. Please make sure there's a <%s/> ancestor element."",
+                        element.getName(), element.getAttributeValue(""id""), XmlTags.METADATA);
             }
         }
         return metadataInfo;
@@ -523,4 +557,19 @@ private void processPostConstruct(TypeElement type, final MbuiViewContext contex
                     context.getPostConstructs().size(), PostConstruct.class.getSimpleName());
         }
     }
+
+
+    // ------------------------------------------------------ helper methods
+
+    private String xmlAsString(org.jdom2.Element element) {
+        String asString;
+        StringWriter writer = new StringWriter();
+        try {
+            new XMLOutputter(Format.getCompactFormat()).output(element, writer);
+            asString = writer.toString();
+        } catch (IOException e) {
+            asString = ""<"" + element + ""/>"";
+        }
+        return asString;
+    }
 }",2016-05-12T08:34:58Z,352
"@@ -67,6 +67,19 @@ final class ${context.subclass} extends ${context.base} {
 
         <#list context.dataTables as table>
         Options<${table.typeParameter}> ${table.name}Options = new ModelNodeTable.Builder<${table.typeParameter}>(${table.metadata.name})
+            <#if table.onlySimpleColumns>
+            .columns(<#list table.columns as column>""${column.name}""<#if column_has_next>, </#if></#list>)
+            <#else>
+                <#list table.columns as column>
+                    <#if column.simple>
+            .column(""${column.name}"")
+                    <#elseif column.simpleWithTitle>
+            .column(""${column.name}"", ${column.title})
+                    <#elseif column.hasValue>
+            .column(""${column.name}"", ${column.title}, (cell, type, row, meta) -> ${column.value})
+                    </#if>
+                </#list>
+            </#if>
             .build();
         ${table.name} = new ModelNodeTable<>(""${table.selector}"", ${table.name}Options);
         </#list>",2016-05-12T08:34:58Z,314
"@@ -283,7 +283,9 @@
                                     scope=""selected""/>
                         </actions>
                         <columns>
-                            <column name=""name"" title=""{{resources.constants().name()}}""/>
+                            <!-- log formatter resources do not a name attribute,
+                            so we need to provide a value which calls NamedNode.getName() -->
+                            <column name=""name"" title=""{{resources.constants().name()}}"" value=""{{row.getName()}}""/>
                             <column name=""pattern""/>
                         </columns>
                     </table>
@@ -319,7 +321,9 @@
                                     scope=""selected""/>
                         </actions>
                         <columns>
-                            <column name=""name"" title=""{{resources.constants().name()}}""/>
+                            <!-- log formatter resources do not a name attribute,
+                            so we need to provide a value which calls NamedNode.getName() -->
+                            <column name=""name"" title=""{{resources.constants().name()}}"" value=""{{row.getName()}}""/>
                         </columns>
                     </table>
                     <form id=""logging-formatter-custom-form"">",2016-05-12T08:34:58Z,349
"@@ -32,17 +32,17 @@ class ColumnFactory {
         labelBuilder = new LabelBuilder();
     }
 
-    <T extends ModelNode> Column<T> createColumn(final Property attributeDescription) {
+    <T extends ModelNode> Column<T> createColumn(final Property attributeDescription, final String title) {
         String name = attributeDescription.getName();
-        String title = labelBuilder.label(attributeDescription);
+        String resolvedTitle = title != null ? title : labelBuilder.label(attributeDescription);
 
-        // TODO Think about other columns type depending on ModelType
+        // TODO Think about other column types depending on ModelType
         Column.RenderCallback<T, Object> render = (cell, type, row, meta) -> {
             if (row.hasDefined(name)) {
                 return row.get(name).asString();
             }
             return null;
         };
-        return new ColumnBuilder<>(name, title, render).build();
+        return new ColumnBuilder<>(name, resolvedTitle, render).build();
     }
 }",2016-05-12T08:34:58Z,350
"@@ -55,9 +55,13 @@ public Builder<T> columns(@NonNls String first, @NonNls String... rest) {
         }
 
         public Builder<T> column(@NonNls String attribute) {
+            return column(attribute, null);
+        }
+
+        public Builder<T> column(@NonNls String attribute, String title) {
             Property attributeDescription = metadata.getDescription().findAttribute(ATTRIBUTES, attribute);
             if (attributeDescription != null) {
-                Column<T> column = columnFactory.createColumn(attributeDescription);
+                Column<T> column = columnFactory.createColumn(attributeDescription, title);
                 return column(column);
             } else {
                 logger.error(""No attribute description for column '{}' found in resource description\n{}"", //NON-NLS",2016-05-12T08:34:58Z,108
"@@ -15,19 +15,62 @@
  */
 package org.jboss.hal.processor.mbui;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /**
  * @author Harald Pehl
  */
 public class DataTableInfo extends MbuiElementInfo {
 
+    public static class Column {
+
+        private final String name;
+        private final String title;
+        private final String value;
+
+        public Column(final String name, final String title, final String value) {
+            this.name = name;
+            this.title = Handlebars.templateSafeValue(title); // title can be a simple value or an expression
+            this.value = Handlebars.stripHandlebar(value); // value has to be an expression
+        }
+
+        public String getName() {
+            return name;
+        }
+
+        public String getTitle() {
+            return title;
+        }
+
+        public String getValue() {
+            return value;
+        }
+
+        public boolean isSimple() {
+            return title == null && value == null;
+        }
+
+        public boolean isSimpleWithTitle() {
+            return title != null && value == null;
+        }
+
+        public boolean isHasValue() {
+            return value != null;
+        }
+    }
+
+
     private final String typeParameter;
     private final MetadataInfo metadata;
     private FormInfo formRef;
+    private final List<Column> columns;
 
     public DataTableInfo(final String name, final String selector, String typeParameter, MetadataInfo metadata) {
         super(name, selector);
         this.typeParameter = typeParameter;
         this.metadata = metadata;
+        this.columns = new ArrayList<>();
     }
 
     public String getTypeParameter() {
@@ -42,7 +85,24 @@ public FormInfo getFormRef() {
         return formRef;
     }
 
-    public void setFormRef(final FormInfo formRef) {
+    void setFormRef(final FormInfo formRef) {
         this.formRef = formRef;
     }
+
+    public List<Column> getColumns() {
+        return columns;
+    }
+
+    public boolean isOnlySimpleColumns() {
+        for (Column column : columns) {
+            if (!column.isSimple()) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    void addColumn(Column column) {
+        columns.add(column);
+    }
 }",2016-05-12T08:34:58Z,351
"@@ -0,0 +1,44 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.processor.mbui;
+
+/**
+ * @author Harald Pehl
+ */
+final class Handlebars {
+
+    private Handlebars() {}
+
+    static boolean isExpression(String value) {
+        return value != null && value.startsWith(""{{"") && value.endsWith(""}}"");
+    }
+
+    static String stripHandlebar(String pattern) {
+        if (isExpression(pattern)) {
+            int start = ""{{"".length();
+            int end = pattern.length() - ""}}"".length();
+            return pattern.substring(start, end);
+        }
+        return pattern;
+    }
+
+    static String templateSafeValue(final String value) {
+        if (value != null) {
+            return isExpression(value) ? stripHandlebar(value) : ""\"""" + value + ""\"""";
+        }
+        return null;
+    }
+}",2016-05-12T08:34:58Z,91
"@@ -18,6 +18,7 @@
 import java.beans.Introspector;
 import java.io.File;
 import java.io.IOException;
+import java.io.StringWriter;
 import java.lang.annotation.Annotation;
 import java.util.EnumSet;
 import java.util.List;
@@ -61,6 +62,8 @@
 import org.jdom2.JDOMException;
 import org.jdom2.filter.Filters;
 import org.jdom2.input.SAXBuilder;
+import org.jdom2.output.Format;
+import org.jdom2.output.XMLOutputter;
 import org.jdom2.xpath.XPathExpression;
 import org.jdom2.xpath.XPathFactory;
 
@@ -162,7 +165,7 @@ protected void processType(final TypeElement type, final MbuiView mbuiView) {
         MbuiViewContext context = new MbuiViewContext(TypeSimplifier.packageNameOf(type),
                 TypeSimplifier.classNameOf(type), subclass, createMethod);
 
-        // parse and validate the mbui xml
+        // parse and validate the MBUI XML
         xpath = XPathFactory.instance();
         Document document = parseXml(type, mbuiView);
         validateDocument(type, document);
@@ -226,10 +229,10 @@ private Document parseXml(final TypeElement type, final MbuiView mbuiView) {
             return new SAXBuilder().build(file.openReader(true));
 
         } catch (IOException e) {
-            error(type, ""Cannot find MBUI xml \""%s\"". "" +
+            error(type, ""Cannot find MBUI XML \""%s\"". "" +
                     ""Please make sure the file exists and resides in the source path."", fq);
         } catch (JDOMException e) {
-            error(type, ""Cannot parse MBUI xml \""%s\"". Please verify that the file contains valid XML."", fq);
+            error(type, ""Cannot parse MBUI XML \""%s\"". Please verify that the file contains valid XML."", fq);
         }
         return null;
     }
@@ -238,20 +241,20 @@ private void validateDocument(final TypeElement type, final Document document) {
         // verify root element
         org.jdom2.Element root = document.getRootElement();
         if (!root.getName().equals(XmlTags.VIEW)) {
-            error(type, ""Invalid root element in MBUI xml. Allowed: \""%s\"", found: \""%s\""."", XmlTags.VIEW,
+            error(type, ""Invalid root element in MBUI XML. Allowed: \""%s\"", found: \""%s\""."", XmlTags.VIEW,
                     root.getName());
         }
 
         // verify first child
         List<org.jdom2.Element> children = root.getChildren();
         if (children.isEmpty()) {
-            error(type, ""No children found in MBUI xml."");
+            error(type, ""No children found in MBUI XML."");
         } else if (children.size() > 1) {
-            error(type, ""Only one child allowed in MBUI xml."");
+            error(type, ""Only one child allowed in MBUI XML."");
         }
         org.jdom2.Element child = children.get(0);
         if (!(child.getName().equals(XmlTags.VERTICAL_NAVIGATION) || child.getName().equals(XmlTags.METADATA))) {
-            error(type, ""Invalid child of root element in MBUI xml. Allowed: \""%s\"" or \""%s\"", found: \""%s\""."",
+            error(type, ""Invalid child of root element in MBUI XML. Allowed: \""%s\"" or \""%s\"", found: \""%s\""."",
                     XmlTags.VERTICAL_NAVIGATION, XmlTags.METADATA, child.getName());
         }
     }
@@ -262,7 +265,7 @@ private void processMetadata(final TypeElement type, final Document document, fi
         for (org.jdom2.Element element : elements) {
             String template = element.getAttributeValue(""address"");
             if (template == null) {
-                error(type, ""Missing address attribute in metadata element"");
+                error(type, ""Missing address attribute in metadata element \""%s\"""", xmlAsString(element));
             } else {
                 context.addMetadata(template);
             }
@@ -300,28 +303,16 @@ private void processMbuiElements(final TypeElement type, final Document document
                                 processVerticalNavigation(field, document, element, selector, context);
                                 break;
                             case DataTable:
-                                processDataTable(field, document, element, selector, context);
+                                processDataTables(field, document, element, selector, context);
                                 break;
                             case Form:
-                                processForm(field, document, element, selector, context);
+                                processForms(field, document, element, selector, context);
                                 break;
                         }
                     }
                 });
     }
 
-    private ElementType getMbuiElementType(TypeMirror dataElementType) {
-        if (isAssignable(dataElementType, VerticalNavigation.class)) {
-            return VerticalNavigation;
-        } else if (isAssignable(dataElementType, Form.class)) {
-            return Form;
-        } else if (isAssignable(dataElementType, DataTable.class)) {
-            return DataTable;
-        } else {
-            return null;
-        }
-    }
-
     private String getSelector(Element element) {
         String selector = null;
 
@@ -343,30 +334,70 @@ private org.jdom2.Element verifySelector(String selector, Element element, Docum
         List<org.jdom2.Element> elements = expression.evaluate(document);
         if (elements.isEmpty()) {
             error(element,
-                    ""Cannot find a matching element in the MBUI xml with id \""%s\""."", selector);
+                    ""Cannot find a matching element in the MBUI XML with id \""%s\""."", selector);
         } else if (elements.size() > 1) {
             error(element,
-                    ""Found %d matching elements in the MBUI xml with id \""%s\"". Id must be unique."",
+                    ""Found %d matching elements in the MBUI XML with id \""%s\"". Id must be unique."",
                     elements.size(), selector);
         }
         return elements.get(0);
     }
 
+    private ElementType getMbuiElementType(TypeMirror dataElementType) {
+        if (isAssignable(dataElementType, VerticalNavigation.class)) {
+            return VerticalNavigation;
+        } else if (isAssignable(dataElementType, Form.class)) {
+            return Form;
+        } else if (isAssignable(dataElementType, DataTable.class)) {
+            return DataTable;
+        } else {
+            return null;
+        }
+    }
+
     private void processVerticalNavigation(final VariableElement field, final Document document,
             final org.jdom2.Element element, final String selector, final MbuiViewContext context) {
         VerticalNavigationInfo navigationInfo = new VerticalNavigationInfo(field.getSimpleName().toString(), selector);
         context.setVerticalNavigation(navigationInfo);
     }
 
-    private void processDataTable(final VariableElement field, final Document document, final org.jdom2.Element element,
-            final String selector, final MbuiViewContext context) {
+    private void processDataTables(final VariableElement field, final Document document,
+            final org.jdom2.Element element, final String selector, final MbuiViewContext context) {
         MetadataInfo metadata = findMetadata(field, element, context);
         DataTableInfo tableInfo = new DataTableInfo(field.getSimpleName().toString(), selector, getTypeParameter(field),
                 metadata);
         context.addDataTableInfo(tableInfo);
+
+        org.jdom2.Element columnsContainer = element.getChild(""columns"");
+        if (columnsContainer != null) {
+            for (org.jdom2.Element columnElement : columnsContainer.getChildren(""column"")) {
+                String name = columnElement.getAttributeValue(""name"");
+                String title = columnElement.getAttributeValue(""title"");
+                String value = columnElement.getAttributeValue(""value"");
+
+                if (name == null) {
+                    error(field, ""Name is missing for column \""%s\"" in data-table#%s"",
+                            xmlAsString(columnElement), selector);
+                }
+                if (value != null) {
+                    if (!Handlebars.isExpression(value)) {
+                        error(field,
+                                ""Invalid column \""%s\"" in data-table#%s: Value has to be an expression."",
+                                xmlAsString(columnElement), selector);
+                    }
+                    if (title == null) {
+                        error(field,
+                                ""Invalid column \""%s\"" in data-table#%s: If value is given, title is mandatory."",
+                                xmlAsString(columnElement), selector);
+                    }
+                }
+                DataTableInfo.Column column = new DataTableInfo.Column(name, title, value);
+                tableInfo.addColumn(column);
+            }
+        }
     }
 
-    private void processForm(final VariableElement field, final Document document, final org.jdom2.Element element,
+    private void processForms(final VariableElement field, final Document document, final org.jdom2.Element element,
             final String selector, final MbuiViewContext context) {
         MetadataInfo metadata = findMetadata(field, element, context);
         FormInfo formInfo = new FormInfo(field.getSimpleName().toString(), selector, getTypeParameter(field), metadata);
@@ -376,6 +407,11 @@ private void processForm(final VariableElement field, final Document document, f
         if (attributesContainer != null) {
             for (org.jdom2.Element attributeElement : attributesContainer.getChildren(""attribute"")) {
                 String name = attributeElement.getAttributeValue(""name"");
+                if (name == null) {
+                    error(field, ""Name is missing for attribute \""%s\"" in form#%s"", xmlAsString(attributeElement),
+                            selector);
+                }
+
                 FormInfo.Attribute attribute = new FormInfo.Attribute(name);
                 org.jdom2.Element suggestHandler = attributeElement.getChild(""suggest-handler"");
                 if (suggestHandler != null) {
@@ -398,15 +434,13 @@ private MetadataInfo findMetadata(final VariableElement field, final org.jdom2.E
         XPathExpression<org.jdom2.Element> expression = xpath.compile(""ancestor::metadata"", Filters.element());
         org.jdom2.Element metadataElement = expression.evaluateFirst(element);
         if (metadataElement == null) {
-            error(field,
-                    ""Missing metadata ancestor. Please make sure the mapped XML element has a \""<%s/>\"" ancestor element."",
-                    XmlTags.METADATA);
+            error(field, ""Missing metadata ancestor for %s#%s. Please make sure the there's a <%s/> ancestor element."",
+                    element.getName(), element.getAttributeValue(""id""), XmlTags.METADATA);
         } else {
             metadataInfo = context.getMetadataInfo(metadataElement.getAttributeValue(""address""));
             if (metadataInfo == null) {
-                error(field,
-                        ""No metadata found. Please make sure the mapped XML element has a \""<%s/>\"" ancestor element."",
-                        XmlTags.METADATA);
+                error(field, ""No metadata found for %s#%s. Please make sure there's a <%s/> ancestor element."",
+                        element.getName(), element.getAttributeValue(""id""), XmlTags.METADATA);
             }
         }
         return metadataInfo;
@@ -523,4 +557,19 @@ private void processPostConstruct(TypeElement type, final MbuiViewContext contex
                     context.getPostConstructs().size(), PostConstruct.class.getSimpleName());
         }
     }
+
+
+    // ------------------------------------------------------ helper methods
+
+    private String xmlAsString(org.jdom2.Element element) {
+        String asString;
+        StringWriter writer = new StringWriter();
+        try {
+            new XMLOutputter(Format.getCompactFormat()).output(element, writer);
+            asString = writer.toString();
+        } catch (IOException e) {
+            asString = ""<"" + element + ""/>"";
+        }
+        return asString;
+    }
 }",2016-05-12T08:34:58Z,352
"@@ -67,6 +67,19 @@ final class ${context.subclass} extends ${context.base} {
 
         <#list context.dataTables as table>
         Options<${table.typeParameter}> ${table.name}Options = new ModelNodeTable.Builder<${table.typeParameter}>(${table.metadata.name})
+            <#if table.onlySimpleColumns>
+            .columns(<#list table.columns as column>""${column.name}""<#if column_has_next>, </#if></#list>)
+            <#else>
+                <#list table.columns as column>
+                    <#if column.simple>
+            .column(""${column.name}"")
+                    <#elseif column.simpleWithTitle>
+            .column(""${column.name}"", ${column.title})
+                    <#elseif column.hasValue>
+            .column(""${column.name}"", ${column.title}, (cell, type, row, meta) -> ${column.value})
+                    </#if>
+                </#list>
+            </#if>
             .build();
         ${table.name} = new ModelNodeTable<>(""${table.selector}"", ${table.name}Options);
         </#list>",2016-05-12T08:34:58Z,314
"@@ -23,9 +23,7 @@
 
 import org.jboss.hal.core.modelbrowser.ModelBrowser;
 import org.jboss.hal.core.mvp.PatternFlyViewImpl;
-import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.dmr.model.ResourceAddress;
-import org.jboss.hal.meta.security.SecurityContext;
 
 import javax.inject.Inject;
 
@@ -34,10 +32,18 @@
  */
 public class PatchingView extends PatternFlyViewImpl implements PatchingPresenter.MyView {
 
+    private final ModelBrowser modelBrowser;
+
     @Inject
-    public PatchingView(Dispatcher dispatcher) {
-        ModelBrowser modelBrowser = new ModelBrowser(dispatcher, SecurityContext.RWX, ResourceAddress.ROOT);
-        registerAttachable(modelBrowser);
+    public PatchingView(ModelBrowser modelBrowser) {
+        this.modelBrowser = modelBrowser;
         initElements(modelBrowser);
     }
+
+
+    @Override
+    public void attach() {
+        super.attach();
+        modelBrowser.setRoot(ResourceAddress.ROOT);
+    }
 }",2016-02-18T15:50:57Z,353
"@@ -16,13 +16,6 @@
     padding-right: 5px;
   }
 
-  .lead {
-    font-size: 14px;
-    font-weight: 500;
-    margin-top: 10px;
-    margin-bottom: 0;
-  }
-
   li {
     font-size: 16px;
 
@@ -47,4 +40,9 @@
 
 .model-browser-content {
   overflow-y: scroll;
+
+  .lead {
+    font-size: 14px;
+  }
+
 }",2016-02-18T15:50:57Z,354
"@@ -28,5 +28,4 @@
  */
 @JsType(isNative = true)
 public class Api<T> {
-
 }",2016-02-18T15:50:57Z,336
"@@ -0,0 +1,51 @@
+/*
+ * JBoss, Home of Professional Open Source.
+ * Copyright 2010, Red Hat, Inc., and individual contributors
+ * as indicated by the @author tags. See the copyright.txt file in the
+ * distribution for a full listing of individual contributors.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.jboss.hal.ballroom.tree;
+
+import elemental.js.events.JsEvent;
+import elemental.js.util.JsArrayOf;
+import jsinterop.annotations.JsFunction;
+import jsinterop.annotations.JsType;
+
+import static jsinterop.annotations.JsPackage.GLOBAL;
+import static org.jboss.hal.resources.UIConstants.OBJECT;
+
+/**
+ * Handler when the selection changes.
+ */
+@JsFunction
+@FunctionalInterface
+public interface SelectionChangeHandler<T> {
+
+    @JsType(isNative = true, namespace = GLOBAL, name = OBJECT)
+    class SelectionContext<T> {
+        public String action;
+        public Api<T> api;
+        public Node<T> node;
+        public JsArrayOf<String> selected;
+    }
+
+    /**
+     * Called when a selection changed. That is when an item is selected <em>or</em> deselected.
+     */
+    void onSelectionChanged(JsEvent event, SelectionContext<T> context);
+}",2016-02-18T15:50:57Z,355
"@@ -28,7 +28,6 @@
 import jsinterop.annotations.JsType;
 import org.jboss.gwt.elemento.core.IsElement;
 import org.jboss.hal.ballroom.Attachable;
-import org.jboss.hal.meta.security.SecurityContext;
 
 import static jsinterop.annotations.JsPackage.GLOBAL;
 
@@ -38,30 +37,34 @@
 public class Tree<T> implements IsElement, Attachable {
 
     @JsType(isNative = true)
-    public static class Bridge {
+    public static class Bridge<T> {
 
         @JsMethod(namespace = GLOBAL, name = ""$"")
-        public native static Bridge select(String selector);
+        public native static <T> Bridge<T> select(String selector);
 
         public native void jstree(Options options);
 
-        public native <T> Api<T> jstree(boolean _true);
+        /**
+         * Adds a selection change callback.
+         */
+        public native void on(String event, SelectionChangeHandler<T> handler);
+
+        public native Api<T> jstree(boolean _true);
     }
 
 
-    public static final String ROOT_NODE = ""#"";
+    private static final String ROOT_NODE = ""#"";
+    private static final String CHANGED_EVENT = ""changed.jstree"";
 
     private final String id;
-    private final SecurityContext securityContext;
     private final Options options;
     private final Element div;
+    private Bridge<T> bridge;
     private Api<T> api;
 
 
-    public Tree(final String id, final SecurityContext securityContext,
-            final Node<T> root, final DataFunction<T> data) {
+    public Tree(final String id, final Node<T> root, final DataFunction<T> data) {
         this.id = id;
-        this.securityContext = securityContext;
         this.options = initOptions(root, data);
         this.div = Browser.getDocument().createDivElement();
         this.div.setId(id);
@@ -108,7 +111,7 @@ public Element asElement() {
     public void attach() {
         if (api == null) {
             // TODO check security context and adjust options if necessary
-            Bridge bridge = Bridge.select(""#"" + id);
+            bridge = Bridge.select(""#"" + id);
             bridge.jstree(options);
             api = bridge.jstree(true);
         }
@@ -121,11 +124,19 @@ public void attach() {
      * Getter for the {@link org.jboss.hal.ballroom.tree.Api} instance.
      * @throws IllegalStateException if the API wasn't initialized using {@link #attach()}
      */
-    public Api api() {
+    public Api<T> api() {
         if (api == null) {
             throw new IllegalStateException(
                     ""Tree('"" + id + ""') is not attached. Call Tree.attach() before using any of the API methods!"");
         }
         return api;
     }
+
+    public final void onSelectionChange(SelectionChangeHandler<T> handler) {
+        if (bridge == null) {
+            throw new IllegalStateException(
+                    ""Tree('"" + id + ""') is not attached. Call Tree.attach() before you register callbacks!"");
+        }
+        bridge.on(CHANGED_EVENT, handler);
+    }
 }",2016-02-18T15:50:57Z,338
"@@ -28,6 +28,7 @@
 import org.jboss.hal.core.finder.ColumnRegistry;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.ItemActionFactory;
+import org.jboss.hal.core.modelbrowser.ModelBrowser;
 import org.jboss.hal.core.ui.UIRegistry;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.spi.Footer;
@@ -40,6 +41,7 @@ public class CoreModule extends AbstractGinModule {
     protected void configure() {
         bind(ColumnRegistry.class).in(Singleton.class);
         bind(Finder.class).in(Singleton.class);
+        bind(ModelBrowser.class);
         bind(ItemActionFactory.class).in(Singleton.class);
         bind(StatementContext.class).to(CoreStatementContext.class).asEagerSingleton(); // to register the event
         bind(UIRegistry.class).in(Singleton.class);",2016-02-18T15:50:57Z,177
"@@ -64,6 +64,7 @@ public FormItem<?> createFrom(final Property attributeDescription) {
         ModelNode modelNode = attributeDescription.getValue();
         boolean required = !modelNode.get(NILLABLE).asBoolean(true);
         boolean expressionAllowed = modelNode.get(EXPRESSION_ALLOWED).asBoolean(false);
+        boolean runtime = modelNode.hasDefined(STORAGE) && RUNTIME.equals(modelNode.get(STORAGE).asString());
         String unit = modelNode.hasDefined(UNIT) ? modelNode.get(UNIT).asString() : null;
 
         if (modelNode.hasDefined(TYPE)) {
@@ -130,8 +131,8 @@ public FormItem<?> createFrom(final Property attributeDescription) {
                 case OBJECT: {
                     if (valueType != null && ModelType.STRING == valueType) {
                         PropertiesItem propertiesItem = new PropertiesItem(name, label);
-                        List<Property> properties = ModelNodeHelper
-                                .getOrDefault(modelNode, () -> modelNode.get(DEFAULT).asPropertyList(), emptyList());
+                        List<Property> properties = ModelNodeHelper.getOrDefault(modelNode, DEFAULT,
+                                () -> modelNode.get(DEFAULT).asPropertyList(), emptyList());
                         if (!properties.isEmpty()) {
                             Map<String, String> defaultValues = new HashMap<>();
                             for (Property property : properties) {
@@ -179,6 +180,9 @@ public FormItem<?> createFrom(final Property attributeDescription) {
                 if (formItem.supportsExpressions()) {
                     formItem.setExpressionAllowed(expressionAllowed);
                 }
+                if (runtime) {
+                    formItem.setEnabled(false);
+                }
             }
         }
 
@@ -187,8 +191,11 @@ public FormItem<?> createFrom(final Property attributeDescription) {
 
 
     private List<String> stringValues(ModelNode modelNode, String property) {
-        List<ModelNode> nodes = ModelNodeHelper
-                .getOrDefault(modelNode, () -> modelNode.get(property).asList(), emptyList());
-        return Lists.transform(nodes, ModelNode::asString);
+        if (modelNode.hasDefined(property)) {
+            List<ModelNode> nodes = ModelNodeHelper.getOrDefault(modelNode, property,
+                    () -> modelNode.get(property).asList(), emptyList());
+            return Lists.transform(nodes, ModelNode::asString);
+        }
+        return emptyList();
     }
 }",2016-02-18T15:50:57Z,101
"@@ -234,6 +234,7 @@ private ModelNodeForm(final Builder<T> builder) {
         String path = builder.createResource ? Joiner.on('.').join(OPERATIONS, ADD, REQUEST_PROPERTIES) : ATTRIBUTES;
         Iterable<Property> allProperties = ModelNodeHelper.failSafeGet(builder.resourceDescription, path)
                 .asPropertyList();
+        //noinspection Guava
         FluentIterable<Property> fi = FluentIterable.from(allProperties).filter(new PropertyFilter(builder));
         Iterable<Property> filtered = builder.unsorted ? fi.toList() :
                 fi.toSortedList((p1, p2) -> p1.getName().compareTo(p2.getName()));",2016-02-18T15:50:57Z,60
"@@ -25,8 +25,7 @@
 import com.google.common.base.Predicates;
 import org.jboss.hal.dmr.Property;
 
-import static org.jboss.hal.dmr.ModelDescriptionConstants.REQUIRED;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.STORAGE;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 
 /**
  * @author Harald Pehl
@@ -40,6 +39,7 @@ class PropertyFilter implements Predicate<Property> {
     }
 
     @Override
+    @SuppressWarnings(""Guava"")
     public boolean apply(final Property property) {
         Predicate<Property> filter;
 
@@ -58,8 +58,8 @@ public boolean apply(final Property property) {
             } else {
                 filter = p -> builder.includes.contains(p.getName());
             }
-            if (builder.includeRuntime) {
-                filter = Predicates.and(filter, p -> ""runtime"".equals(p.getValue().get(STORAGE).asString())); //NON-NLS
+            if (!builder.includeRuntime) {
+                filter = Predicates.and(filter, p -> !RUNTIME.equals(p.getValue().get(STORAGE).asString()));
             }
         }
 ",2016-02-18T15:50:57Z,26
"@@ -21,27 +21,43 @@
  */
 package org.jboss.hal.core.modelbrowser;
 
+import com.google.gwt.user.client.rpc.AsyncCallback;
 import elemental.client.Browser;
 import elemental.dom.Element;
 import org.jboss.gwt.elemento.core.Elements;
 import org.jboss.gwt.elemento.core.HasElements;
+import org.jboss.gwt.flow.Progress;
 import org.jboss.hal.ballroom.Attachable;
 import org.jboss.hal.ballroom.IdBuilder;
 import org.jboss.hal.ballroom.layout.LayoutBuilder;
 import org.jboss.hal.ballroom.tree.Node;
 import org.jboss.hal.ballroom.tree.Tree;
 import org.jboss.hal.core.ui.Skeleton;
+import org.jboss.hal.dmr.Property;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.dmr.model.ResourceAddress;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.description.ResourceDescription;
+import org.jboss.hal.meta.description.ResourceDescriptions;
+import org.jboss.hal.meta.processing.MetadataProcessor;
 import org.jboss.hal.meta.security.SecurityContext;
 import org.jboss.hal.meta.security.SecurityContextAware;
 import org.jboss.hal.resources.CSS;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Footer;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
+import javax.inject.Inject;
+import javax.inject.Provider;
 import java.util.Collections;
+import java.util.Iterator;
 
 import static elemental.css.CSSStyleDeclaration.Unit.PX;
+import static java.util.Collections.singleton;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.PROFILE;
 import static org.jboss.hal.resources.CSS.*;
 
 /**
@@ -53,54 +69,57 @@ public class ModelBrowser implements HasElements, Attachable, SecurityContextAwa
     private static final int MARGIN_SMALL = 10; // margins in modelbrowser.less
     private static final String BREADCRUMB_ELEMENT = ""breadcrumbElement"";
 
+    private static final Logger logger = LoggerFactory.getLogger(ModelBrowser.class);
+
+    private final MetadataProcessor metadataProcessor;
+    private final ResourceDescriptions resourceDescriptions;
+    private final Dispatcher dispatcher;
+    private final Provider<Progress> progress;
+    private final Resources resources;
+
     private final Iterable<Element> rows;
     private final Element header;
     private final Element breadcrumb;
     private final Element buttonGroup;
-    private final Element treeHolder;
-    private final Tree<Context> tree;
+    private final Element treeContainer;
     private final Element content;
+    private final ResourceView resourceView;
+    private Tree<Context> tree;
+    private ResourceAddress root;
 
-    public ModelBrowser(final Dispatcher dispatcher, final SecurityContext securityContext,
-            final ResourceAddress root) {
-        String resource = root == ResourceAddress.ROOT ? Names.MANAGEMENT_MODEL : root.lastValue();
-        if (""*"".equals(resource)) {
-            throw new IllegalArgumentException(""Invalid root address: "" + root +
-                    "". ModelBrowser must be created with a concrete address."");
-        }
+
+    @Inject
+    public ModelBrowser(final MetadataProcessor metadataProcessor,
+            final ResourceDescriptions resourceDescriptions,
+            final Dispatcher dispatcher,
+            @Footer final Provider<Progress> progress,
+            final Resources resources) {
+
+        this.metadataProcessor = metadataProcessor;
+        this.resourceDescriptions = resourceDescriptions;
+        this.dispatcher = dispatcher;
+        this.progress = progress;
+        this.resources = resources;
 
         // @formatter:off
         Elements.Builder builder = new Elements.Builder()
             .header().css(modelBrowserHeader)
-                .ul().css(CSS.breadcrumb).rememberAs(BREADCRUMB_ELEMENT)
-                    .li().span().css(key).innerText(""profiles"").end().span().css(value).innerText(""full"").end().end()
-                    .li().span().css(key).innerText(""subsystem"").end().span().css(value).innerText(""datasources"").end().end()
-                    .li().span().css(key).innerText(""data-source"").end().span().css(value).innerText(""some-data-source"").end().end()
-                    .li().span().css(key).innerText(""fqn"").end().span().css(value).innerText(""org.jboss.hal.core.modelbrowser"").end().end()
-                    .li().span().css(key).innerText(""another-key"").end().span().css(value).innerText(""another-value"").end().end()
-                    .li().span().css(key).innerText(""lore-ipsum"").end().span().css(value).innerText(""dolor-sit-amet"").end().end()
-                .end()
-                .p().css(lead).innerText(""Ein benannter Dateisystempfad, ohne dass ein Spezifizieren des eigentlichen Pfads nötig ist. Falls kein eigentlicher Pfad spezifiziert ist, fungiert dies als Platzhalter im Modell (z.B. auf Domain-Ebene), bis eine voll spezifizierte Pfaddefinition auf niedrigerer Ebene (z.B. auf Host-Ebene, wo verfügbare Adressen bekannt sind) angewendet wird."").end()
+                .ul().css(CSS.breadcrumb).rememberAs(BREADCRUMB_ELEMENT).end()
             .end();
+        // @formatter:on
+
         header = builder.build();
         breadcrumb = builder.referenceFor(BREADCRUMB_ELEMENT);
-        // @formatter:on
 
         buttonGroup = new Elements.Builder()
                 .div().css(btnGroup, modelBrowserButtons)
                 .button().css(btn, btnDefault).add(""i"").css(fontAwesome(""filter"")).end()
                 .button().css(btn, btnDefault).add(""i"").css(fontAwesome(""refresh"")).end()
                 .end()
                 .build();
-
-        Context context = new Context(root, Collections.emptySet());
-        Node<Context> rootNode = new Node.Builder<>(IdBuilder.uniqueId(), resource, context)
-                .folder()
-                .build();
-        tree = new Tree<>(Ids.MODEL_BROWSER, securityContext, rootNode, new ReadChildren(dispatcher));
-        treeHolder = new Elements.Builder().div().css(modelBrowserTree).add(tree.asElement()).end().build();
-
+        treeContainer = new Elements.Builder().div().css(modelBrowserTree).end().build();
         content = new Elements.Builder().div().css(modelBrowserContent).end().build();
+        resourceView = new ResourceView(dispatcher);
 
         // @formatter:off
         rows =  new LayoutBuilder()
@@ -112,7 +131,7 @@ public ModelBrowser(final Dispatcher dispatcher, final SecurityContext securityC
             .row()
                 .column(0, 4)
                     .add(buttonGroup)
-                    .add(treeHolder)
+                    .add(treeContainer)
                 .end()
                 .column(0, 8)
                     .add(content)
@@ -133,7 +152,7 @@ private void adjustHeight() {
         if (navigation > 0 && footer > 0) {
             int height = window - navigation - footer;
             // keep this in sync with the margins in modelbrowser.less
-            treeHolder.getStyle().setHeight(height - 2 * MARGIN_BIG - header - buttonGroup - 2 * MARGIN_SMALL, PX);
+            treeContainer.getStyle().setHeight(height - 2 * MARGIN_BIG - header - buttonGroup - 2 * MARGIN_SMALL, PX);
             content.getStyle().setHeight(height - 2 * MARGIN_BIG - header - 2 * MARGIN_SMALL, PX);
         }
     }
@@ -145,10 +164,115 @@ public Iterable<Element> asElements() {
 
     @Override
     public void attach() {
-        tree.attach();
+        if (tree != null) {
+            tree.attach();
+            tree.onSelectionChange((event, context) -> update(context.node));
+        }
+        updateBreadcrumb(root);
         adjustHeight();
     }
 
+    private void update(Node<Context> node) {
+        Elements.removeChildrenFrom(content);
+
+        if (node == null) {
+            updateBreadcrumb(null);
+        } else {
+            ResourceAddress address = node.data.getAddress();
+            updateBreadcrumb(address);
+
+            if (node.data.isFullyQualified()) {
+                updateDescription(node, asGenericTemplate(address));
+            } else {
+                // TODO Show children
+            }
+        }
+    }
+
+    private void updateBreadcrumb(ResourceAddress address) {
+        Elements.removeChildrenFrom(breadcrumb);
+        if (address == null) {
+            // deselection
+            breadcrumb.appendChild(
+                    new Elements.Builder().li().innerText(resources.constants().nothingSelected()).build());
+
+        } else {
+            if (address == ResourceAddress.ROOT) {
+                Element li = new Elements.Builder().li().innerText(Names.MANAGEMENT_MODEL).build();
+                breadcrumb.appendChild(li);
+
+            } else {
+                for (Property property : address.asPropertyList()) {
+                    Element li = new Elements.Builder().li()
+                            .span().css(key).innerText(property.getName()).end()
+                            .span().css(value).innerText(property.getValue().asString()).end()
+                            .end().build();
+                    breadcrumb.appendChild(li);
+                }
+            }
+        }
+    }
+
+    private void updateDescription(Node<Context> node, AddressTemplate template) {
+        metadataProcessor.process(Ids.MODEL_BROWSER, singleton(template), progress,
+                new AsyncCallback<Void>() {
+                    @Override
+                    public void onFailure(final Throwable throwable) {
+                        logger.error(""Unable to process metadata for {} on node {}({}): {}"", //NON-NLS
+                                template, node.id, node.text, throwable.getMessage());
+                    }
+
+                    @Override
+                    public void onSuccess(final Void aVoid) {
+                        ResourceDescription description = resourceDescriptions.lookup(template);
+                        if (description != null) {
+                            resourceView.update(node.data.getAddress(), description);
+                            content.appendChild(resourceView.asElement());
+                        }
+                    }
+                });
+    }
+
+    private AddressTemplate asGenericTemplate(ResourceAddress address) {
+        StringBuilder builder = new StringBuilder();
+        for (Iterator<Property> iterator = address.asPropertyList().iterator(); iterator.hasNext(); ) {
+            Property property = iterator.next();
+            String name = property.getName();
+
+            if (PROFILE.equals(name)) {
+                builder.append(""{any.profile}""); //NON-NLS
+
+            } else {
+                builder.append(name).append(""="");
+                builder.append(property.getValue().asString());
+            }
+            if (iterator.hasNext()) {
+                builder.append(""/"");
+            }
+        }
+        return AddressTemplate.of(builder.toString());
+    }
+
+
+    // ------------------------------------------------------ public API
+
+    public void setRoot(ResourceAddress root) {
+        this.root = root;
+        String resource = root == ResourceAddress.ROOT ? Names.MANAGEMENT_MODEL : root.lastValue();
+        if (""*"".equals(resource)) {
+            throw new IllegalArgumentException(""Invalid root address: "" + root +
+                    "". ModelBrowser must be created with a concrete address."");
+        }
+        Context context = new Context(root, Collections.emptySet());
+        Node<Context> rootNode = new Node.Builder<>(IdBuilder.uniqueId(), resource, context)
+                .folder()
+                .build();
+        tree = new Tree<>(Ids.MODEL_BROWSER, rootNode, new ReadChildren(dispatcher));
+        Elements.removeChildrenFrom(treeContainer);
+        treeContainer.appendChild(tree.asElement());
+        attach();
+    }
+
     @Override
     public void onSecurityContextChange(final SecurityContext securityContext) {}
 }",2016-02-18T15:50:57Z,114
"@@ -0,0 +1,100 @@
+/*
+ * JBoss, Home of Professional Open Source.
+ * Copyright 2010, Red Hat, Inc., and individual contributors
+ * as indicated by the @author tags. See the copyright.txt file in the
+ * distribution for a full listing of individual contributors.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.jboss.hal.core.modelbrowser;
+
+import com.google.gwt.safehtml.shared.SafeHtml;
+import com.google.gwt.safehtml.shared.SafeHtmlUtils;
+import elemental.dom.Element;
+import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.gwt.elemento.core.IsElement;
+import org.jboss.hal.ballroom.IdBuilder;
+import org.jboss.hal.ballroom.PatternFly;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.dmr.model.Operation;
+import org.jboss.hal.dmr.model.ResourceAddress;
+import org.jboss.hal.meta.description.ResourceDescription;
+import org.jboss.hal.meta.security.SecurityContext;
+import org.jboss.hal.resources.Ids;
+
+import static org.jboss.hal.dmr.ModelDescriptionConstants.INCLUDE_RUNTIME;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.READ_RESOURCE_OPERATION;
+import static org.jboss.hal.resources.CSS.lead;
+
+/**
+ * @author Harald Pehl
+ */
+class ResourceView implements IsElement {
+
+    private static final String DESCRIPTION_ELEMENT = ""descriptionElement"";
+    private static final String FORM_ELEMENT = ""formElement"";
+
+    private final Dispatcher dispatcher;
+    private final Element description;
+    private final Element formContainer;
+    private final Element root;
+
+    ResourceView(final Dispatcher dispatcher) {
+        this.dispatcher = dispatcher;
+
+        // @formatter:off
+        Elements.Builder builder = new Elements.Builder()
+            .div()
+                .p().css(lead).rememberAs(DESCRIPTION_ELEMENT).end()
+                .div().rememberAs(FORM_ELEMENT).end()
+            .end();
+        // @formatter:on
+
+        description = builder.referenceFor(DESCRIPTION_ELEMENT);
+        formContainer = builder.referenceFor(FORM_ELEMENT);
+        root = builder.build();
+    }
+
+    @Override
+    public Element asElement() {
+        return root;
+    }
+
+    void update(ResourceAddress address, ResourceDescription description) {
+        SafeHtml safeHtml = SafeHtmlUtils.fromSafeConstant(description.getDescription());
+        this.description.setInnerHTML(safeHtml.asString());
+
+        Elements.removeChildrenFrom(formContainer);
+        if (description.hasAttributes()) {
+            Operation operation = new Operation.Builder(READ_RESOURCE_OPERATION, address)
+                    .param(INCLUDE_RUNTIME, true)
+                    .build();
+            dispatcher.execute(operation, result -> {
+                ModelNodeForm<ModelNode> form = new ModelNodeForm.Builder<>(
+                        IdBuilder.build(Ids.MODEL_BROWSER, address.lastValue()),
+                        SecurityContext.RWX, description)
+                        .includeRuntime()
+                        .build();
+                formContainer.appendChild(form.asElement());
+                PatternFly.initComponents();
+                form.attach();
+                form.view(result);
+            });
+        }
+    }
+}",2016-02-18T15:50:57Z,356
"@@ -119,6 +119,7 @@ public interface ModelDescriptionConstants {
     String RESPONSE = ""response"";
     String RESULT = ""result"";
     String ROLES = ""HEADER_ROLES"";
+    String RUNTIME = ""runtime"";
     String RUNTIME_NAME = ""runtime-name"";
     String SCHEME = ""scheme"";
     String SERVER = ""server"";",2016-02-18T15:50:57Z,109
"@@ -69,9 +69,10 @@ public static ModelNode failSafeGet(final ModelNode modelNode, final String path
         return undefined;
     }
 
-    public static <T> T getOrDefault(final ModelNode modelNode, Provider<T> provider, T defaultValue) {
+    public static <T> T getOrDefault(final ModelNode modelNode, String attribute,
+            Provider<T> provider, T defaultValue) {
         T result = defaultValue;
-        if (modelNode != null) {
+        if (modelNode != null && modelNode.hasDefined(attribute)) {
             try {
                 result = provider.get();
             } catch (Throwable t) {",2016-02-18T15:50:57Z,110
"@@ -39,8 +39,6 @@
  */
 public class ResourceDescription extends ModelNode {
 
-    public final static ResourceDescription EMPTY = new ResourceDescription();
-
     public ResourceDescription() {
         super();
     }
@@ -54,7 +52,7 @@ public String getDescription() {
     }
 
     public boolean hasAttributes() {
-        return hasDefined(ATTRIBUTES);
+        return hasDefined(ATTRIBUTES) && !get(ATTRIBUTES).asList().isEmpty();
     }
 
     public List<Property> getAttributes() {",2016-02-18T15:50:57Z,24
"@@ -78,60 +78,66 @@ public MetadataProcessor(final Dispatcher dispatcher,
         this.rrdOps = new CreateRrdOperations(statementContext);
     }
 
-    @SuppressWarnings(""HardCodedStringLiteral"")
     public void process(final String token, final Provider<Progress> progress, final AsyncCallback<Void> callback) {
         Set<String> resources = requiredResources.getResources(token);
-        logger.debug(""Token {}: Process required resources on {}"", token, resources);
+        logger.debug(""Token {}: Process required resources on {}"", token, resources); //NON-NLS
         if (resources.isEmpty()) {
-            logger.debug(""Token {}: No required resources found -> callback.onSuccess(null)"", token);
+            logger.debug(""Token {}: No required resources found -> callback.onSuccess(null)"", token); //NON-NLS
             callback.onSuccess(null);
 
         } else {
             // The following lambda makes problems in SuperDevMode!?
             // Set<AddressTemplate> templates = FluentIterable.from(resources).transform(AddressTemplate::of).toSet();
-            //noinspection Convert2Lambda,Anonymous2MethodRef
+            //noinspection Convert2Lambda,Anonymous2MethodRef,Guava
             Set<AddressTemplate> templates = FluentIterable.from(resources).transform(
                     new Function<String, AddressTemplate>() {
                         @Override
                         public AddressTemplate apply(final String template) {
                             return AddressTemplate.of(template);
                         }
                     }).toSet();
+            process(token, templates, progress, callback);
+        }
+    }
 
-            LookupResult lookupResult = lookup.check(token, templates, requiredResources.isRecursive(token));
-            if (lookupResult.allPresent()) {
-                logger.debug(""Token {}: All required resources have been already processed -> callback.onSuccess(null)"", token);
-                callback.onSuccess(null);
-            } else {
-                logger.debug(""Token {}: {}"", token, lookupResult);
-                List<Operation> operations = rrdOps.create(lookupResult);
-                List<List<Operation>> piles = Lists.partition(operations, BATCH_SIZE);
-                List<Composite> composites = Lists.transform(piles, Composite::new);
+    @SuppressWarnings(""HardCodedStringLiteral"")
+    public void process(final String token, final Set<AddressTemplate> templates,
+            final Provider<Progress> progress, final AsyncCallback<Void> callback) {
+        LookupResult lookupResult = lookup.check(token, templates, requiredResources.isRecursive(token));
+        if (lookupResult.allPresent()) {
+            logger.debug(""Token {}: All required resources have been already processed -> callback.onSuccess(null)"",
+                    token);
+            callback.onSuccess(null);
+        } else {
+            logger.debug(""Token {}: {}"", token, lookupResult);
+            List<Operation> operations = rrdOps.create(lookupResult);
+            List<List<Operation>> piles = Lists.partition(operations, BATCH_SIZE);
+            List<Composite> composites = Lists.transform(piles, Composite::new);
 
-                logger.debug(""Token {}: About to execute {} composite operations"", token, composites.size());
-                List<RrdFunction> functions = Lists.transform(composites,
-                        composite -> new RrdFunction(resourceDescriptions, securityFramework, dispatcher, composite));
-                //noinspection Duplicates
-                Outcome<FunctionContext> outcome = new Outcome<FunctionContext>() {
-                    @Override
-                    public void onFailure(final FunctionContext context) {
-                        logger.debug(""Token {}: Failed to process required resources: {}"", token,
-                                context.getErrorMessage());
-                        callback.onFailure(context.getError());
-                    }
+            logger.debug(""Token {}: About to execute {} composite operations"", token, composites.size());
+            List<RrdFunction> functions = Lists.transform(composites,
+                    composite -> new RrdFunction(resourceDescriptions, securityFramework, dispatcher, composite));
+            //noinspection Duplicates
+            Outcome<FunctionContext> outcome = new Outcome<FunctionContext>() {
+                @Override
+                public void onFailure(final FunctionContext context) {
+                    logger.debug(""Token {}: Failed to process required resources: {}"", token,
+                            context.getErrorMessage());
+                    callback.onFailure(context.getError());
+                }
 
-                    @Override
-                    public void onSuccess(final FunctionContext context) {
-                        logger.debug(""Token {}: Successfully processed required resources"", token);
-                        callback.onSuccess(null);
-                    }
-                };
-                if (functions.size() == 1) {
-                    new Async<FunctionContext>(progress.get()).single(new FunctionContext(), outcome, functions.get(0));
-                } else {
-                    new Async<FunctionContext>(progress.get()).waterfall(new FunctionContext(), outcome,
-                            functions.toArray(new RrdFunction[functions.size()]));
+                @Override
+                public void onSuccess(final FunctionContext context) {
+                    logger.debug(""Token {}: Successfully processed required resources"", token);
+                    callback.onSuccess(null);
                 }
+            };
+            if (functions.size() == 1) {
+                new Async<FunctionContext>(progress.get()).single(new FunctionContext(), outcome, functions.get(0));
+            } else {
+                //noinspection SuspiciousToArrayCall
+                new Async<FunctionContext>(progress.get()).waterfall(new FunctionContext(), outcome,
+                        (org.jboss.gwt.flow.Function[]) functions.toArray(new RrdFunction[functions.size()]));
             }
         }
     }",2016-02-18T15:50:57Z,85
"@@ -10,7 +10,7 @@ listHint=Press <abbr class=""key"" title=""RETURN"">&crarr;</abbr> to add new items
 messages=Messages ({0, number})
 messages[\=0]=No messages
 patternMismatch=Value does not match the pattern {0}
-propertiesHint=Add new properties as <em>key=value</em>. Press <abbr class=""key"" title=""RETURN"">&crarr;</abbr> to add and <abbr class=""key"" title=""BACKSPACE"">&#x232B</abbr> to remove them.
+propertiesHint=Add new properties as <em>key=value</em> pairs. Press <abbr class=""key"" title=""RETURN"">&crarr;</abbr> to add and <abbr class=""key"" title=""BACKSPACE"">&#x232B</abbr> to remove them.
 removeConfirmationTitle=Remove {0}
 removeConfirmationQuestion=Do you really want to remove <b>{0}</b>?
 requiredHelp=Required fields are marked with <abbr class=""req"" title=""required""><i class=""fa fa-asterisk""></i></abbr>",2016-02-18T15:50:57Z,94
"@@ -27,7 +27,10 @@ interface AddressTemplates {
     String SELECTED_REMOTE_SITE_ADDRESS = JGROUPS_ADDRESS + ""/stack={selected.stack}/relay=relay.RELAY2/remote-site=*"";
     String PROTOCOL_ADDRESS = JGROUPS_ADDRESS + ""/stack=*/protocol=*"";
     String SELECTED_PROTOCOL_ADDRESS = JGROUPS_ADDRESS + ""/stack={selected.stack}/protocol=*"";
-    String TRANSPORT_THREAD_POOL_ADDRESS = JGROUPS_ADDRESS + ""/stack=*/transport=*/thread-pool=default"";
+    String TRANSPORT_THREAD_POOL_DEFAULT_ADDRESS = JGROUPS_ADDRESS + ""/stack=*/transport=*/thread-pool=default"";
+    String TRANSPORT_THREAD_POOL_INTERNAL_ADDRESS = JGROUPS_ADDRESS + ""/stack=*/transport=*/thread-pool=internal"";
+    String TRANSPORT_THREAD_POOL_OOB_ADDRESS = JGROUPS_ADDRESS + ""/stack=*/transport=*/thread-pool=oob"";
+    String TRANSPORT_THREAD_POOL_TIMER_ADDRESS = JGROUPS_ADDRESS + ""/stack=*/transport=*/thread-pool=timer"";
     String SELECTED_TRANSPORT_THREAD_POOL_ADDRESS = JGROUPS_ADDRESS + ""/stack={selected.stack}/transport=*/thread-pool=*"";
     String TRANSPORT_ADDRESS = JGROUPS_ADDRESS + ""/stack=*/transport=*"";
     String SELECTED_TRANSPORT_ADDRESS = JGROUPS_ADDRESS + ""/stack={selected.stack}/transport=*"";
@@ -47,7 +50,11 @@ interface AddressTemplates {
     AddressTemplate SELECTED_TRANSPORT_TEMPLATE = AddressTemplate.of(SELECTED_TRANSPORT_ADDRESS);
     AddressTemplate SELECTED_TRANSPORT_THREAD_POOL_TEMPLATE = AddressTemplate.of(
             SELECTED_TRANSPORT_THREAD_POOL_ADDRESS);
-    AddressTemplate TRANSPORT_THREAD_POOL_TEMPLATE = AddressTemplate.of(TRANSPORT_THREAD_POOL_ADDRESS);
+    AddressTemplate TRANSPORT_THREAD_POOL_DEFAULT_TEMPLATE = AddressTemplate.of(TRANSPORT_THREAD_POOL_DEFAULT_ADDRESS);
+    AddressTemplate TRANSPORT_THREAD_POOL_INTERNAL_TEMPLATE = AddressTemplate.of(
+            TRANSPORT_THREAD_POOL_INTERNAL_ADDRESS);
+    AddressTemplate TRANSPORT_THREAD_POOL_OOB_TEMPLATE = AddressTemplate.of(TRANSPORT_THREAD_POOL_OOB_ADDRESS);
+    AddressTemplate TRANSPORT_THREAD_POOL_TIMER_TEMPLATE = AddressTemplate.of(TRANSPORT_THREAD_POOL_TIMER_ADDRESS);
     AddressTemplate REMOTE_SITE_TEMPLATE = AddressTemplate.of(REMOTE_SITE_ADDRESS);
     AddressTemplate SELECTED_REMOTE_SITE_TEMPLATE = AddressTemplate.of(SELECTED_REMOTE_SITE_ADDRESS);
     AddressTemplate CHANNEL_TEMPLATE = AddressTemplate.of(CHANNEL_ADDRESS);",2017-11-28T18:12:28Z,357
"@@ -65,7 +65,7 @@ public class ForkElement implements IsElement<HTMLElement>, Attachable, HasPrese
                         table -> presenter.removeResource(SELECTED_CHANNEL_FORK_TEMPLATE,
                                 table.selectedRow().getName(), Names.FORK)))
                 .column(NAME, (cell, t, row, meta) -> row.getName())
-                .column(""Protocols"", row -> {
+                .column(Names.PROTOCOL, row -> {
                     presenter.showChannelProtocol(row);
                     presenter.showChannelInnerPage(PROTOCOL_ID);
                 })
@@ -101,5 +101,7 @@ public void setPresenter(final JGroupsPresenter presenter) {
 
     void update(List<NamedNode> models) {
         table.update(models);
+        // disable ""remove"" button if the table is empty
+        table.enableButton(1, !models.isEmpty());
     }
 }",2017-11-28T18:12:28Z,358
"@@ -15,6 +15,8 @@
  */
 package org.jboss.hal.client.configuration.subsystem.jgroups;
 
+import java.util.List;
+
 import elemental2.dom.HTMLElement;
 import org.jboss.hal.ballroom.Tabs;
 import org.jboss.hal.ballroom.form.Form;
@@ -29,8 +31,7 @@
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
 
-import static org.jboss.hal.client.configuration.subsystem.jgroups.AddressTemplates.SELECTED_TRANSPORT_THREAD_POOL_TEMPLATE;
-import static org.jboss.hal.client.configuration.subsystem.jgroups.AddressTemplates.TRANSPORT_THREAD_POOL_TEMPLATE;
+import static org.jboss.hal.client.configuration.subsystem.jgroups.AddressTemplates.*;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 
 class TransportElement extends GenericElement {
@@ -46,62 +47,67 @@ class TransportElement extends GenericElement {
             String name, String resourceId) {
         super(formMetadata, tableButtonFactory, resources, template, name, resourceId);
 
-        Metadata threadPoolMetadata = metadataRegistry.lookup(TRANSPORT_THREAD_POOL_TEMPLATE);
+        // thread-pool are singletons resources, but each one has different ""default"" values
+        // then, we need specific metadata for each one, for the reset operation to work properly
+        Metadata threadPoolDefaultMetadata = metadataRegistry.lookup(TRANSPORT_THREAD_POOL_DEFAULT_TEMPLATE);
+        Metadata threadPoolInternalMetadata = metadataRegistry.lookup(TRANSPORT_THREAD_POOL_INTERNAL_TEMPLATE);
+        Metadata threadPoolOobMetadata = metadataRegistry.lookup(TRANSPORT_THREAD_POOL_OOB_TEMPLATE);
+        Metadata threadPoolTimerMetadata = metadataRegistry.lookup(TRANSPORT_THREAD_POOL_TIMER_TEMPLATE);
 
         threadPoolDefaultForm = new ModelNodeForm.Builder<>(Ids.JGROUPS_TRANSPORT_THREADPOOL_DEFAULT_FORM,
-                threadPoolMetadata)
+                threadPoolDefaultMetadata)
                 .onSave((form, changedValues) -> {
                     AddressTemplate template1 = SELECTED_TRANSPORT_THREAD_POOL_TEMPLATE
                             .replaceWildcards(table.selectedRow().getName(), DEFAULT);
-                    presenter.saveSingleton(template1, threadPoolMetadata, changedValues,
+                    presenter.saveSingleton(template1, threadPoolDefaultMetadata, changedValues,
                             resources.messages().modifySingleResourceSuccess(Names.THREAD_POOL + "" Default""));
                 })
                 .prepareReset(form -> {
                     AddressTemplate template1 = SELECTED_TRANSPORT_THREAD_POOL_TEMPLATE
                             .replaceWildcards(table.selectedRow().getName(), DEFAULT);
-                    presenter.resetSingleton(template1, Names.THREAD_POOL + "" Default"", form, threadPoolMetadata);
+                    presenter.resetSingleton(template1, Names.THREAD_POOL + "" Default"", form, threadPoolDefaultMetadata);
                 })
                 .build();
         threadPoolTimerForm = new ModelNodeForm.Builder<>(Ids.JGROUPS_TRANSPORT_THREADPOOL_TIMER_FORM,
-                threadPoolMetadata)
+                threadPoolTimerMetadata)
                 .onSave((form, changedValues) -> {
                     AddressTemplate template1 = SELECTED_TRANSPORT_THREAD_POOL_TEMPLATE
                             .replaceWildcards(table.selectedRow().getName(), TIMER);
-                    presenter.saveSingleton(template1, threadPoolMetadata, changedValues,
+                    presenter.saveSingleton(template1, threadPoolTimerMetadata, changedValues,
                             resources.messages().modifySingleResourceSuccess(Names.THREAD_POOL + "" Timer""));
                 })
                 .prepareReset(form -> {
                     AddressTemplate template1 = SELECTED_TRANSPORT_THREAD_POOL_TEMPLATE
                             .replaceWildcards(table.selectedRow().getName(), TIMER);
-                    presenter.resetSingleton(template1, Names.THREAD_POOL + "" Timer"", form, threadPoolMetadata);
+                    presenter.resetSingleton(template1, Names.THREAD_POOL + "" Timer"", form, threadPoolTimerMetadata);
                 })
                 .build();
         threadPoolInternalForm = new ModelNodeForm.Builder<>(Ids.JGROUPS_TRANSPORT_THREADPOOL_INTERNAL_FORM,
-                threadPoolMetadata)
+                threadPoolInternalMetadata)
                 .onSave((form, changedValues) -> {
                     AddressTemplate template1 = SELECTED_TRANSPORT_THREAD_POOL_TEMPLATE
                             .replaceWildcards(table.selectedRow().getName(), INTERNAL);
-                    presenter.saveSingleton(template1, threadPoolMetadata, changedValues,
+                    presenter.saveSingleton(template1, threadPoolInternalMetadata, changedValues,
                             resources.messages().modifySingleResourceSuccess(Names.THREAD_POOL + "" Internal""));
                 })
                 .prepareReset(form -> {
                     AddressTemplate template1 = SELECTED_TRANSPORT_THREAD_POOL_TEMPLATE
                             .replaceWildcards(table.selectedRow().getName(), INTERNAL);
-                    presenter.resetSingleton(template1, Names.THREAD_POOL + "" Internal"", form, threadPoolMetadata);
+                    presenter.resetSingleton(template1, Names.THREAD_POOL + "" Internal"", form, threadPoolInternalMetadata);
                 })
                 .build();
         threadPoolOobForm = new ModelNodeForm.Builder<>(Ids.JGROUPS_TRANSPORT_THREADPOOL_OOB_FORM,
-                threadPoolMetadata)
+                threadPoolOobMetadata)
                 .onSave((form, changedValues) -> {
                     AddressTemplate template1 = SELECTED_TRANSPORT_THREAD_POOL_TEMPLATE
                             .replaceWildcards(table.selectedRow().getName(), OOB);
-                    presenter.saveSingleton(template1, threadPoolMetadata, changedValues,
+                    presenter.saveSingleton(template1, threadPoolOobMetadata, changedValues,
                             resources.messages().modifySingleResourceSuccess(Names.THREAD_POOL + "" OOB""));
                 })
                 .prepareReset(form -> {
                     AddressTemplate template1 = SELECTED_TRANSPORT_THREAD_POOL_TEMPLATE
                             .replaceWildcards(table.selectedRow().getName(), OOB);
-                    presenter.resetSingleton(template1, Names.THREAD_POOL + "" OOB"", form, threadPoolMetadata);
+                    presenter.resetSingleton(template1, Names.THREAD_POOL + "" OOB"", form, threadPoolOobMetadata);
                 })
                 .build();
 
@@ -148,11 +154,6 @@ public void attach() {
                 threadPoolTimerForm.clear();
             }
         });
-
-        // disable the ADD and REMOVE buttons, as the transport is a required singleton resource, but the r-r-d
-        // doesn't says so
-        table.enableButton(0, false);
-        table.enableButton(1, false);
     }
 
     @Override
@@ -163,4 +164,14 @@ public void detach() {
         threadPoolOobForm.detach();
         threadPoolTimerForm.detach();
     }
+
+    @Override
+    void update(List<NamedNode> models) {
+        super.update(models);
+        // disable the ADD and REMOVE buttons, as the transport is a required singleton resource, but the r-r-d
+        // doesn't says so
+        // super.update enables the ""remove"" button if the model is not empty
+        table.enableButton(0, false);
+        table.enableButton(1, false);
+    }
 }",2017-11-28T18:12:28Z,359
"@@ -82,7 +82,10 @@ public void onError(FlowContext context, Throwable error) {
                         @Override
                         public void onSuccess(FlowContext context) {
                             List<Server> servers = context.get(TopologyTasks.RUNNING_SERVERS);
-                            if (!servers.isEmpty() && servers.get(0).isStarted()) {
+                            boolean readPathsFromServer = !servers.isEmpty() && (servers.get(0)
+                                    .isStarted() || servers.get(0).needsReload() || servers.get(0)
+                                    .needsRestart());
+                            if (readPathsFromServer) {
                                 operation = new Operation.Builder(servers.get(0).getServerAddress(),
                                         READ_CHILDREN_NAMES_OPERATION
                                 ).param(CHILD_TYPE, ""path"").build();",2017-10-20T14:22:33Z,45
"@@ -21,6 +21,8 @@
 
 import javax.inject.Inject;
 
+import com.google.gwt.safehtml.shared.SafeHtml;
+import com.google.gwt.safehtml.shared.SafeHtmlUtils;
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.client.annotations.NameToken;
 import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
@@ -29,6 +31,8 @@
 import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.ballroom.form.Form.FinishRemove;
 import org.jboss.hal.ballroom.form.Form.FinishReset;
+import org.jboss.hal.ballroom.form.TextBoxItem;
+import org.jboss.hal.client.configuration.PathsAutoComplete;
 import org.jboss.hal.core.ComplexAttributeOperations;
 import org.jboss.hal.core.CrudOperations;
 import org.jboss.hal.core.finder.Finder;
@@ -39,6 +43,7 @@
 import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
 import org.jboss.hal.core.mbui.dialog.NameItem;
 import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.core.mbui.form.RequireAtLeastOneAttributeValidation;
 import org.jboss.hal.core.mvp.SupportsExpertMode;
 import org.jboss.hal.dmr.ModelDescriptionConstants;
 import org.jboss.hal.dmr.ModelNode;
@@ -58,6 +63,7 @@
 import static org.jboss.hal.client.configuration.subsystem.elytron.AddressTemplates.*;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
+import static org.jboss.hal.dmr.ModelNodeHelper.move;
 
 public class OtherSettingsPresenter extends MbuiPresenter<OtherSettingsPresenter.MyView, OtherSettingsPresenter.MyProxy>
         implements SupportsExpertMode {
@@ -182,6 +188,119 @@ void reload(String resource, Consumer<List<NamedNode>> callback) {
                 children -> callback.accept(asNamedNodes(children)));
     }
 
+    // -------------------------------------------- Credential Store
+
+    void addCredentialStore() {
+        Metadata metadata = metadataRegistry.lookup(CREDENTIAL_STORE_TEMPLATE);
+        Metadata crMetadata = metadata.forComplexAttribute(CREDENTIAL_REFERENCE, true);
+        crMetadata.copyComplexAttributeAttributes(asList(STORE, ALIAS, TYPE, CLEAR_TEXT), metadata);
+
+        String id = Ids.build(Ids.ELYTRON_CREDENTIAL_STORE, Ids.ADD);
+        NameItem nameItem = new NameItem();
+        ModelNodeForm<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata)
+                .addOnly()
+                .unboundFormItem(nameItem, 0)
+                .include(CREATE, RELATIVE_TO, STORE, ALIAS, TYPE, CLEAR_TEXT)
+                .unsorted()
+                .build();
+        form.getFormItem(RELATIVE_TO).registerSuggestHandler(new PathsAutoComplete());
+        form.addFormValidation(new RequireAtLeastOneAttributeValidation(asList(STORE, CLEAR_TEXT), form, resources));
+
+        new AddResourceDialog(resources.messages().addResourceTitle(Names.CREDENTIAL_STORE), form, (name, model) -> {
+            if (model != null) {
+                move(model, STORE, CREDENTIAL_REFERENCE + ""/"" + STORE);
+                move(model, ALIAS, CREDENTIAL_REFERENCE + ""/"" + ALIAS);
+                move(model, TYPE, CREDENTIAL_REFERENCE + ""/"" + TYPE);
+                move(model, CLEAR_TEXT, CREDENTIAL_REFERENCE + ""/"" + CLEAR_TEXT);
+            }
+            ResourceAddress address = CREDENTIAL_STORE_TEMPLATE.resolve(statementContext, nameItem.getValue());
+            crud.add(Names.CREDENTIAL_STORE, name, address, model, (n, a) ->
+                    reload(CREDENTIAL_STORE, nodes ->
+                            getView().updateResourceElement(CREDENTIAL_STORE, nodes)));
+        }).show();
+    }
+
+    // ------------------------------------------------------ key store
+
+    void addKeyStore() {
+        Metadata metadata = metadataRegistry.lookup(KEY_STORE_TEMPLATE);
+        Metadata crMetadata = metadata.forComplexAttribute(CREDENTIAL_REFERENCE, true);
+        crMetadata.copyComplexAttributeAttributes(asList(STORE, ALIAS, CLEAR_TEXT), metadata);
+
+        String id = Ids.build(Ids.ELYTRON_KEY_STORE, Ids.ADD);
+        NameItem nameItem = new NameItem();
+
+        // there is a special handling for ""type"" attribute, as this attribute name exists in key-store and
+        // credential-reference complex attribute. We must create an unbound form item for credential-reference-type
+        String crType = ""credential-reference-type"";
+        String crTypeLabel = new LabelBuilder().label(crType);
+        TextBoxItem crTypeItem = new TextBoxItem(crType, crTypeLabel);
+        SafeHtml crTypeItemHelp = SafeHtmlUtils.fromString(metadata.getDescription()
+                .get(ATTRIBUTES)
+                .get(CREDENTIAL_REFERENCE)
+                .get(VALUE_TYPE)
+                .get(TYPE)
+                .get(DESCRIPTION)
+                .asString());
+
+        ModelNodeForm<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata)
+                .addOnly()
+                .unboundFormItem(nameItem, 0)
+                .include(TYPE, PATH, RELATIVE_TO, STORE, ALIAS, CLEAR_TEXT)
+                .unboundFormItem(crTypeItem, 7, crTypeItemHelp)
+                .unsorted()
+                .build();
+        form.getFormItem(RELATIVE_TO).registerSuggestHandler(new PathsAutoComplete());
+        form.addFormValidation(new RequireAtLeastOneAttributeValidation(asList(STORE, CLEAR_TEXT), form, resources));
+
+        new AddResourceDialog(resources.messages().addResourceTitle(Names.KEY_STORE), form, (name, model) -> {
+            if (model != null) {
+                move(model, STORE, CREDENTIAL_REFERENCE + ""/"" + STORE);
+                move(model, ALIAS, CREDENTIAL_REFERENCE + ""/"" + ALIAS);
+                move(model, CLEAR_TEXT, CREDENTIAL_REFERENCE + ""/"" + CLEAR_TEXT);
+                if (!crTypeItem.isEmpty()) {
+                    model.get(CREDENTIAL_REFERENCE).get(TYPE).set(crTypeItem.getValue());
+                }
+            }
+            ResourceAddress address = KEY_STORE_TEMPLATE.resolve(statementContext, nameItem.getValue());
+            crud.add(Names.KEY_STORE, name, address, model, (n, a) ->
+                    reload(KEY_STORE, nodes ->
+                            getView().updateResourceElement(KEY_STORE, nodes)));
+        }).show();
+    }
+
+
+    // ------------------------------------------------------ key manager
+
+    void addKeyManager() {
+        Metadata metadata = metadataRegistry.lookup(KEY_MANAGER_TEMPLATE);
+        Metadata crMetadata = metadata.forComplexAttribute(CREDENTIAL_REFERENCE, true);
+        crMetadata.copyComplexAttributeAttributes(asList(STORE, ALIAS, TYPE, CLEAR_TEXT), metadata);
+
+        String id = Ids.build(Ids.ELYTRON_KEY_MANAGER, Ids.ADD);
+        NameItem nameItem = new NameItem();
+        ModelNodeForm<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata)
+                .addOnly()
+                .unboundFormItem(nameItem, 0)
+                .include(STORE, ALIAS, TYPE, CLEAR_TEXT)
+                .unsorted()
+                .build();
+        form.addFormValidation(new RequireAtLeastOneAttributeValidation(asList(STORE, CLEAR_TEXT), form, resources));
+
+        new AddResourceDialog(resources.messages().addResourceTitle(Names.KEY_MANAGER), form, (name, model) -> {
+            if (model != null) {
+                move(model, STORE, CREDENTIAL_REFERENCE + ""/"" + STORE);
+                move(model, ALIAS, CREDENTIAL_REFERENCE + ""/"" + ALIAS);
+                move(model, TYPE, CREDENTIAL_REFERENCE + ""/"" + TYPE);
+                move(model, CLEAR_TEXT, CREDENTIAL_REFERENCE + ""/"" + CLEAR_TEXT);
+            }
+            ResourceAddress address = KEY_MANAGER_TEMPLATE.resolve(statementContext, nameItem.getValue());
+            crud.add(Names.KEY_MANAGER, name, address, model, (n, a) ->
+                    reload(KEY_MANAGER, nodes ->
+                            getView().updateResourceElement(KEY_MANAGER, nodes)));
+        }).show();
+    }
+
     // ------------------------------------------------------ LDAP key store
 
     void reloadLdapKeyStores() {",2017-10-20T14:22:33Z,116
"@@ -23,6 +23,7 @@
 
 import org.jboss.hal.ballroom.LabelBuilder;
 import org.jboss.hal.ballroom.VerticalNavigation;
+import org.jboss.hal.client.configuration.PathsAutoComplete;
 import org.jboss.hal.core.mbui.MbuiContext;
 import org.jboss.hal.core.mbui.ResourceElement;
 import org.jboss.hal.core.mvp.HalViewImpl;
@@ -38,6 +39,7 @@
 import static org.jboss.hal.ballroom.LayoutBuilder.row;
 import static org.jboss.hal.client.configuration.subsystem.elytron.ElytronResource.*;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.CREDENTIAL_REFERENCE;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.RELATIVE_TO;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.SSL_CONTEXT;
 
 public class OtherSettingsView extends HalViewImpl implements OtherSettingsPresenter.MyView {
@@ -70,13 +72,14 @@ public class OtherSettingsView extends HalViewImpl implements OtherSettingsPrese
 
         // ===== store
 
-        addResourceElement(CREDENTIAL_STORE,
-                CREDENTIAL_STORE.resourceElementBuilder(mbuiContext,
-                        () -> presenter.reload(CREDENTIAL_STORE.resource,
-                                nodes -> updateResourceElement(CREDENTIAL_STORE.resource, nodes)))
-                        .addComplexObjectAttribute(CREDENTIAL_REFERENCE)
-                        .build(),
-                primaryIdStores,
+        ResourceElement credentialStoreElement = CREDENTIAL_STORE.resourceElementBuilder(mbuiContext,
+                () -> presenter.reload(CREDENTIAL_STORE.resource,
+                        nodes -> updateResourceElement(CREDENTIAL_STORE.resource, nodes)))
+                .onAdd(() -> presenter.addCredentialStore())
+                .addComplexObjectAttribute(CREDENTIAL_REFERENCE)
+                .build();
+        credentialStoreElement.getForm().getFormItem(RELATIVE_TO).registerSuggestHandler(new PathsAutoComplete());
+        addResourceElement(CREDENTIAL_STORE, credentialStoreElement, primaryIdStores,
                 Ids.build(CREDENTIAL_STORE.baseId, Ids.ENTRY),
                 labelBuilder.label(CREDENTIAL_STORE.resource));
 
@@ -88,12 +91,15 @@ public class OtherSettingsView extends HalViewImpl implements OtherSettingsPrese
                 Ids.build(FILTERING_KEY_STORE.baseId, Ids.ENTRY),
                 labelBuilder.label(FILTERING_KEY_STORE.resource));
 
+        ResourceElement keyStoreElement = KEY_STORE.resourceElementBuilder(mbuiContext,
+                () -> presenter.reload(KEY_STORE.resource,
+                        nodes -> updateResourceElement(KEY_STORE.resource, nodes)))
+                .onAdd(() -> presenter.addKeyStore())
+                .addComplexObjectAttribute(CREDENTIAL_REFERENCE)
+                .build();
+        keyStoreElement.getForm().getFormItem(RELATIVE_TO).registerSuggestHandler(new PathsAutoComplete());
         addResourceElement(KEY_STORE,
-                KEY_STORE.resourceElementBuilder(mbuiContext,
-                        () -> presenter.reload(KEY_STORE.resource,
-                                nodes -> updateResourceElement(KEY_STORE.resource, nodes)))
-                        .addComplexObjectAttribute(CREDENTIAL_REFERENCE)
-                        .build(),
+                keyStoreElement,
                 primaryIdStores,
                 Ids.build(KEY_STORE.baseId, Ids.ENTRY),
                 labelBuilder.label(KEY_STORE.resource));
@@ -127,6 +133,7 @@ public class OtherSettingsView extends HalViewImpl implements OtherSettingsPrese
                 KEY_MANAGER.resourceElementBuilder(mbuiContext,
                         () -> presenter.reload(KEY_MANAGER.resource,
                                 nodes -> updateResourceElement(KEY_MANAGER.resource, nodes)))
+                        .onAdd(() -> presenter.addKeyManager())
                         .addComplexObjectAttribute(CREDENTIAL_REFERENCE)
                         .build(),
                 primaryIdSsl,",2017-10-20T14:22:33Z,175
"@@ -47,6 +47,7 @@
 import org.jboss.hal.spi.AsyncColumn;
 import org.jboss.hal.spi.Requires;
 
+import static java.util.Arrays.asList;
 import static java.util.stream.Collectors.toList;
 import static org.jboss.gwt.elemento.core.Elements.span;
 import static org.jboss.hal.client.configuration.subsystem.resourceadapter.AddressTemplates.RESOURCE_ADAPTER_ADDRESS;
@@ -104,7 +105,7 @@ public ResourceAdapterColumn(final Finder finder,
                         if (Strings.isNullOrEmpty(archive) && Strings.isNullOrEmpty(module)) {
                             LabelBuilder labelBuilder = new LabelBuilder();
                             return ValidationResult.invalid(resources.messages()
-                                    .atLeastOneIsRequired(labelBuilder.label(ARCHIVE), labelBuilder.label(MODULE)));
+                                    .atLeastOneIsRequired(labelBuilder.enumeration(asList(ARCHIVE, MODULE), resources.constants().or())));
                         }
                         return ValidationResult.OK;
                     });",2017-10-20T14:22:33Z,360
"@@ -34,6 +34,7 @@
 import org.jboss.hal.core.finder.FinderPathFactory;
 import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
 import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.core.mbui.form.RequireAtLeastOneAttributeValidation;
 import org.jboss.hal.core.mvp.ApplicationFinderPresenter;
 import org.jboss.hal.core.mvp.HalView;
 import org.jboss.hal.core.mvp.HasPresenter;
@@ -182,6 +183,7 @@ void addSingleSignOn() {
                 .include(KEY_ALIAS, KEY_STORE, STORE, ALIAS, TYPE, CLEAR_TEXT)
                 .unsorted()
                 .build();
+        form.addFormValidation(new RequireAtLeastOneAttributeValidation<>(asList(STORE, CLEAR_TEXT), form, resources));
 
         AddResourceDialog dialog = new AddResourceDialog(resources.messages().addResourceTitle(Names.SINGLE_SIGN_ON),
                 form, (name, model) -> {",2017-10-20T14:22:33Z,302
"@@ -329,6 +329,9 @@ private String complexListPageId() {
         return Ids.build(builder.baseId, builder.clAttribute, Ids.PAGE);
     }
 
+    public Form<NamedNode> getForm() {
+        return form;
+    }
 
     public static class Builder {
 ",2017-10-20T14:22:33Z,14
"@@ -0,0 +1,80 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.core.mbui.form;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.jboss.hal.ballroom.LabelBuilder;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.form.FormItem;
+import org.jboss.hal.ballroom.form.FormValidation;
+import org.jboss.hal.ballroom.form.ValidationResult;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.resources.Resources;
+
+import static java.util.stream.Collectors.toList;
+
+public class RequireAtLeastOneAttributeValidation<T extends ModelNode> implements FormValidation<T> {
+
+    private final ModelNodeForm<T> form;
+    private List<String> requiresAtLeast;
+    private Resources resources;
+
+
+    public RequireAtLeastOneAttributeValidation(final List<String> requiresAtLeast, final ModelNodeForm<T> form,
+            final Resources resources) {
+        this.requiresAtLeast = requiresAtLeast;
+        this.resources = resources;
+        this.form = form;
+    }
+
+    @Override
+    public ValidationResult validate(final Form<T> form) {
+        LabelBuilder labelBuilder = new LabelBuilder();
+        List<String> nonEmptyItems = requiresAtLeast.stream()
+                .map(form::getFormItem)
+                .filter(formItem -> formItem != null && !this.form.isEmptyOrDefault(formItem))
+                .map(FormItem::getName)
+                .collect(toList());
+
+        if (nonEmptyItems.isEmpty()) {
+
+            // retrieve the label item, instead the attribute name, for the cases when a complex attribute is in use
+            List<String> attributesLabels = new ArrayList<>();
+            requiresAtLeast.forEach(requiredAttribute -> {
+                FormItem<Object> formItem = form.getFormItem(requiredAttribute);
+                attributesLabels.add(formItem.getLabel());
+            });
+
+            // show an error on each related form item
+            requiresAtLeast.forEach(requiredAttribute -> {
+                FormItem<Object> formItem = form.getFormItem(requiredAttribute);
+                if (this.form.isEmptyOrDefault(formItem)) {
+                    formItem.showError(resources.messages().exactlyOneAlternativeError(
+                            labelBuilder.enumeration(attributesLabels, resources.constants().or())));
+                }
+            });
+            // return overall result
+            return ValidationResult.invalid(
+                    resources.messages()
+                            .atLeastOneIsRequired(
+                                    labelBuilder.enumeration(attributesLabels, resources.constants().or())));
+        } else {
+            return ValidationResult.OK;
+        }
+    }
+}",2017-10-20T14:22:33Z,361
"@@ -179,6 +179,7 @@ public interface ModelDescriptionConstants {
     String CORE_SERVICE_PATCHING = ""core-service-patching"";
     String COUNT_MESSAGES = ""count-messages"";
     String CRAWLER_SESSION_MANAGEMENT = ""crawler-session-management"";
+    String CREATE = ""create"";
     String CREATE_TIME = ""create-time"";
     String CREDENTIAL_REFERENCE = ""credential-reference"";
     String CREDENTIAL_STORE = ""credential-store"";",2017-10-20T14:22:33Z,109
"@@ -54,7 +54,7 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     String alternativesHelp(String alternatives);
     SafeHtml assignmentExcludeSuccess(String type, String name);
     SafeHtml assignmentIncludeSuccess(String type, String name);
-    String atLeastOneIsRequired(String attribute1, String attribute2);
+    String atLeastOneIsRequired(String attributes);
     String available(double value);
 
     String bootErrors();",2017-10-20T14:22:33Z,94
"@@ -77,6 +77,7 @@ public interface Names {
     String CORE_QUEUE = ""Core Queue"";
     String CRAWLER = ""Crawler"";
     String CREDENTIAL_REFERENCE = ""Credential Reference"";
+    String CREDENTIAL_STORE = ""Credential Store"";
     String CUSTOM = ""Custom"";
     String CUSTOM_ACTION_HANDLER = ""Custom ActionHandler"";
     String CUSTOM_FORMATTER = ""Custom Formatter"";
@@ -171,6 +172,9 @@ public interface Names {
     String JSP = ""JSP"";
     String JVM_ATTRIBUTES = ""JVM Attributes"";
 
+    String KEY_MANAGER = ""Key Manager"";
+    String KEY_STORE = ""Key Store"";
+
     String LARGE_MESSAGES_DIRECTORY = ""Large Messages Directory"";
     String LDAP_KEY_STORE = ""LDAP Key Store"";
     String LDAP_REALM = ""LDAP Realm"";",2017-10-20T14:22:33Z,112
"@@ -13,7 +13,7 @@ allThreadPoolsExist=Both long and short running thread pools are already assigne
 alternativesHelp=Mutually exclusive to {0}
 assignmentExcludeSuccess={0} {1} successfully excluded.
 assignmentIncludeSuccess={0} {1} successfully included.
-atLeastOneIsRequired=At least one of {0} or {1} is required.
+atLeastOneIsRequired=At least one of {0} is required.
 available={0}% available
 blacklist=Value must not be one of {0}.
 bootErrors=Errors occurred during boot.",2017-10-20T14:22:33Z,94
"@@ -50,7 +50,7 @@ public FinishBootstrap(EventBus eventBus,
     public void execute(final Control<FunctionContext> control) {
         // reset the uncaught exception handler setup in HalPreBootstrapper
         GWT.setUncaughtExceptionHandler(e -> {
-            logger.error(""{}: Uncaught exception: {}"", name(), e.getMessage()); //NON-NLS
+            logger.error(""Uncaught exception: {}"", e.getMessage()); //NON-NLS
             eventBus.fireEvent(new MessageEvent(Message.error(resources.constants().unknownError(), e.getMessage())));
         });
         control.proceed();",2016-01-08T22:04:36Z,362
"@@ -44,7 +44,7 @@
 
 import static org.jboss.hal.dmr.ModelDescriptionConstants.CHILD_TYPE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.READ_CHILDREN_RESOURCES_OPERATION;
-import static org.jboss.hal.dmr.ModelNodeHelper.withNames;
+import static org.jboss.hal.dmr.ModelNodeHelper.asNodesWithNames;
 import static org.jboss.hal.resources.Names.PROFILE;
 
 /**
@@ -110,7 +110,7 @@ private void loadDataSources() {
                 template.resolve(statementContext))
                 .param(CHILD_TYPE, ""data-source"")
                 .build();
-        dispatcher.execute(operation, result -> getView().update(withNames(result.asPropertyList())));
+        dispatcher.execute(operation, result -> getView().update(asNodesWithNames(result.asPropertyList())));
     }
 }
 ",2016-01-08T22:04:36Z,4
"@@ -24,8 +24,12 @@
 import com.gwtplatform.mvp.client.ViewImpl;
 import elemental.dom.Element;
 import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.ballroom.layout.LayoutBuilder;
+import org.jboss.hal.ballroom.tab.Tabs;
+import org.jboss.hal.ballroom.table.DataTable;
 import org.jboss.hal.ballroom.table.Options;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
 import org.jboss.hal.core.mbui.table.ModelNodeTable;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.meta.description.ResourceDescription;
@@ -34,19 +38,20 @@
 import org.jboss.hal.meta.security.SecurityFramework;
 
 import javax.inject.Inject;
+import java.util.ArrayList;
 import java.util.List;
 
 import static org.jboss.hal.ballroom.table.Api.RefreshMode.RESET;
-import static org.jboss.hal.resources.Names.ENABLED;
-import static org.jboss.hal.resources.Names.JNDI_NAME;
+import static org.jboss.hal.resources.Ids.*;
+import static org.jboss.hal.resources.Names.*;
 
 /**
  * @author Harald Pehl
  */
-@SuppressWarnings(""HardCodedStringLiteral"")
 public class DataSourceView extends ViewImpl implements DataSourcePresenter.MyView {
 
-    private final ModelNodeTable<ModelNode> dataSourcesTable;
+    private final DataTable<ModelNode> table;
+    private final List<Form<ModelNode>> forms;
     private DataSourcePresenter presenter;
 
     @Inject
@@ -56,18 +61,35 @@ public DataSourceView(ResourceDescriptions descriptions,
         ResourceDescription description = descriptions.lookup(DataSourcePresenter.ROOT_TEMPLATE);
         SecurityContext securityContext = securityFramework.lookup(DataSourcePresenter.ROOT_TEMPLATE);
 
+        Element info = new Elements.Builder().p().innerText(description.getDescription()).end().build();
         Options<ModelNode> options = new ModelNodeTable.Builder<>(description)
+                .column(NAME_KEY, NAME_LABEL, (cell, type, row, meta) -> row.get(NAME_KEY).asString())
                 .columns(JNDI_NAME, ENABLED)
                 .build();
-        dataSourcesTable = new ModelNodeTable<>(""data-sources-table"", securityContext, options);
+        table = new ModelNodeTable<>(DATA_SOURCE_TABLE, securityContext, options);
+
+        forms = new ArrayList<>();
+        Tabs tabs = new Tabs();
+        ModelNodeForm<ModelNode> currentForm;
+
+        currentForm = new ModelNodeForm.Builder<>(DATA_SOURCE_ATTRIBUTES_FORM, securityContext, description)
+                .include(JNDI_NAME, ENABLED, ""statistics-enabled"", ""driver-name"")
+                .build();
+        forms.add(currentForm);
+        tabs.add(DATA_SOURCE_ATTRIBUTES_TAB, ATTRIBUTES, currentForm.asElement());
+
+        currentForm = new ModelNodeForm.Builder<>(DATA_SOURCE_CONNECTION_FORM, securityContext, description)
+                .include(""connection-url"", ""new-connection-sql"", ""transaction-isolation"", ""jta"", ""use-ccm"")
+                .build();
+        forms.add(currentForm);
+        tabs.add(DATA_SOURCE_CONNECTION_TAB, ""Connection"", currentForm.asElement());
 
-        Element info = new Elements.Builder().p().innerText(description.getDescription()).end().build();
         // @formatter:off
         Element element = new LayoutBuilder()
             .startRow()
                 .header(""DataSources"")
                 .add(info)
-                .add(dataSourcesTable.asElement())
+                .add(table.asElement(), tabs.asElement())
             .endRow()
         .build();
         // @formatter:on
@@ -77,7 +99,8 @@ public DataSourceView(ResourceDescriptions descriptions,
 
     @Override
     public void attach() {
-        dataSourcesTable.attach();
+        table.attach();
+        table.api().bindForms(forms);
     }
 
     @Override
@@ -87,6 +110,6 @@ public void setPresenter(final DataSourcePresenter presenter) {
 
     @Override
     public void update(final List<ModelNode> datasources) {
-        dataSourcesTable.api().clear().add(datasources).refresh(RESET);
+        table.api().clear().add(datasources).refresh(RESET);
     }
 }",2016-01-08T22:04:36Z,29
"@@ -1,3 +1,7 @@
+.form-section {
+  margin-top: 20px;
+}
+
 .form {
 
   &.readonly {",2016-01-08T22:04:36Z,363
"@@ -50,11 +50,11 @@ public void execute(final Form.Operation operation) {
                 transitionTo(EDITING);
                 break;
 
-            case CANCEL:
+            case SAVE:
                 assertState(EDITING);
                 break;
 
-            case SAVE:
+            case CANCEL:
                 assertState(EDITING);
                 break;
 ",2016-01-08T22:04:36Z,89
"@@ -30,9 +30,11 @@ public interface DataMapping<T> {
 
     void newModel(T model, Form<T> form);
 
-    void resetModel(T model, Form<T> form);
-
     void populateFormItems(T model, Form<T> form);
 
+    void clearFormItems(Form<T> form);
+
+    void resetModel(T model, Form<T> form);
+
     void persistModel(T model, Form<T> form);
 }",2016-01-08T22:04:36Z,364
"@@ -79,8 +79,7 @@ public class DefaultForm<T> extends LazyElement implements Form<T>, SecurityCont
     private T model;
     private SecurityContext securityContext;
 
-    private Element buttons;
-    private FormLinks formLinks;
+    private FormLinks<T> formLinks;
     private DivElement errorPanel;
     private SpanElement errorMessage;
     private UListElement errorMessages;
@@ -136,8 +135,9 @@ protected Element createElement() {
 
         Element section = Browser.getDocument().createElement(""section""); //NON-NLS
         section.setId(id);
+        section.getClassList().add(formSection);
 
-        formLinks = new FormLinks(id, stateMachine, helpTexts,
+        formLinks = new FormLinks<>(id, stateMachine, helpTexts,
                 event -> edit(getModel()),
                 event -> reset());
         section.appendChild(formLinks.asElement());
@@ -228,7 +228,7 @@ private Element editPanel() {
         }
 
         // @formatter:off
-        buttons = new Elements.Builder()
+        Element buttons = new Elements.Builder()
             .div().css(formGroup, formButtons)
                 .div().css(offset(labelColumns), column(inputColumns))
                     .div().css(pullRight)
@@ -251,6 +251,25 @@ private Element editPanel() {
 
     // ------------------------------------------------------ form operations
 
+    /**
+     * Executes the {@link org.jboss.hal.ballroom.form.Form.Operation#ADD} operation and calls {@link
+     * DataMapping#newModel(Object, Form)}.
+     *
+     * @param model the transient model
+     */
+    @Override
+    public final void add(final T model) {
+        if (model == null) {
+            throw new NullPointerException(MODEL_MUST_NOT_BE_NULL + formId() + "".add(T)"");
+        }
+        if (!initialized()) {
+            throw new IllegalStateException(NOT_INITIALIZED);
+        }
+        this.model = model;
+        stateExec(ADD); // switch state before data mapping!
+        dataMapping.newModel(model, this);
+    }
+
     /**
      * Executes the {@link org.jboss.hal.ballroom.form.Form.Operation#VIEW} operation and calls {@link
      * DataMapping#populateFormItems(Object, Form)}.
@@ -271,22 +290,36 @@ public final void view(final T model) {
     }
 
     /**
-     * Executes the {@link org.jboss.hal.ballroom.form.Form.Operation#ADD} operation and calls {@link
-     * DataMapping#newModel(Object, Form)}.
-     *
-     * @param model the transient model
+     * Removes the model reference, executes the {@link org.jboss.hal.ballroom.form.Form.Operation#CLEAR} operation and
+     * calls {@link DataMapping#clearFormItems(Form)}.
      */
     @Override
-    public final void add(final T model) {
-        if (model == null) {
-            throw new NullPointerException(MODEL_MUST_NOT_BE_NULL + formId() + "".add(T)"");
-        }
+    public void clear() {
+        this.model = null;
+        stateExec(CLEAR);
+        dataMapping.clearFormItems(this);
+    }
+
+    /**
+     * Executes the {@link org.jboss.hal.ballroom.form.Form.Operation#RESET} operation, calls {@link
+     * DataMapping#resetModel(Object, Form)} and finally calls the registered {@linkplain
+     * org.jboss.hal.ballroom.form.Form.ResetCallback reset callback} (if any).
+     */
+    @Override
+    public final void reset() {
         if (!initialized()) {
             throw new IllegalStateException(NOT_INITIALIZED);
         }
-        this.model = model;
-        stateExec(ADD); // switch state before data mapping!
-        dataMapping.newModel(model, this);
+        stateExec(RESET); // switch state before data mapping!
+        dataMapping.resetModel(model, this);
+        if (resetCallback != null) {
+            resetCallback.onReset(this);
+        }
+    }
+
+    @Override
+    public void setResetCallback(final ResetCallback<T> resetCallback) {
+        this.resetCallback = resetCallback;
     }
 
     /**
@@ -363,28 +396,6 @@ public void setCancelCallback(final CancelCallback<T> cancelCallback) {
         this.cancelCallback = cancelCallback;
     }
 
-    /**
-     * Executes the {@link org.jboss.hal.ballroom.form.Form.Operation#RESET} operation, calls {@link
-     * DataMapping#resetModel(Object, Form)} and finally calls the registered {@linkplain
-     * org.jboss.hal.ballroom.form.Form.ResetCallback reset callback} (if any).
-     */
-    @Override
-    public final void reset() {
-        if (!initialized()) {
-            throw new IllegalStateException(NOT_INITIALIZED);
-        }
-        stateExec(RESET); // switch state before data mapping!
-        dataMapping.resetModel(model, this);
-        if (resetCallback != null) {
-            resetCallback.onReset(this);
-        }
-    }
-
-    @Override
-    public void setResetCallback(final ResetCallback<T> resetCallback) {
-        this.resetCallback = resetCallback;
-    }
-
     protected String formId() {
         return ""form("" + id + "")""; //NON-NLS
     }
@@ -438,7 +449,7 @@ private void flip(State state) {
                 break;
         }
 
-        formLinks.switchTo(state, securityContext);
+        formLinks.switchTo(state, model, securityContext);
         for (Element panel : panels.values()) {
             Elements.setVisible(panel, false);
         }
@@ -458,7 +469,7 @@ private void applySecurity() {
         if (stateMachine.current() == EDITING && !securityContext.isWritable()) {
             stateExec(CANCEL);
         }
-        formLinks.switchTo(stateMachine.current(), securityContext);
+        formLinks.switchTo(stateMachine.current(), model, securityContext);
         for (Map.Entry<String, FormItem> entry : formItems.entrySet()) {
             entry.getValue().setRestricted(!securityContext.isWritable(entry.getKey()));
         }",2016-01-08T22:04:36Z,64
"@@ -37,12 +37,19 @@ public void newModel(final T model, final Form<T> form) {
     }
 
     @Override
-    public void resetModel(final T model, Form<T> form) {
+    public void populateFormItems(final T model, final Form<T> form) {
         // empty
     }
 
     @Override
-    public void populateFormItems(final T model, final Form<T> form) {
+    public void clearFormItems(final Form<T> form) {
+        for (FormItem formItem : form.getFormItems()) {
+            formItem.clearValue();
+        }
+    }
+
+    @Override
+    public void resetModel(final T model, Form<T> form) {
         // empty
     }
 ",2016-01-08T22:04:36Z,365
"@@ -32,25 +32,27 @@
 /**
  * A state machine for existing models. Supports all {@linkplain Operation operations} except {@link Operation#ADD}.
  * <pre>
- *                             (O)
- *                              |
- *             +--------+       |
- *             |        |     view()
- *             |        |       |
- *          reset()     |       |
- *             |     +--v-------v--+
- *             |     |             |
- *             +-----+  READONLY   <-----+
- *                   |             |     |
- *                   +--+-------^--+     |
- *                      |       |        |
- *                   edit()  cancel()  save()
- *                      |       |        |
- *                   +--v-------+--+     |
- *                   |             |     |
- *  (O)----edit()---->   EDITING   +-----+
- *                   |             |
- *                   +-------------+
+ *            +--------+      (0)
+ *            |        |       |
+ *         clear()     |     view()
+ *         reset()     |       |
+ *            |     +--v-------v--+
+ *            |     |             |
+ *            +-----+  READONLY   <-----+-------+
+ *                  |             |     |       |
+ *                  +--+-------^--+     |       |
+ *                     |       |        |       |
+ *                  edit()  cancel()  save()    |
+ *                     |       |        |       |
+ *                  +--v-------+--+     |       |
+ *                  |             |     |       |
+ *   (0)---edit()--->   EDITING   +-----+     clear()
+ *                  |             |             |
+ *                  +------+------+             |
+ *                         |                    |
+ *                       clear()                |
+ *                         |                    |
+ *                         +--------------------+
  * </pre>
  * (0) Initial states
  *
@@ -59,23 +61,33 @@
 public class ExistingModelStateMachine extends AbstractStateMachine implements StateMachine {
 
     public ExistingModelStateMachine() {
-        super(EnumSet.of(CANCEL, EDIT, RESET, SAVE, VIEW));
+        super(EnumSet.of(VIEW, CLEAR, RESET, EDIT, SAVE, CANCEL));
         this.current = null;
     }
 
     @Override
     public void execute(final Operation operation) {
         switch (operation) {
 
+            case ADD:
+                unsupported(ADD);
+                break;
+
             case VIEW:
                 if (current != null) {
                     assertState(READONLY);
                 }
                 transitionTo(READONLY);
                 break;
 
-            case ADD:
-                unsupported(ADD);
+            case CLEAR:
+                transitionTo(READONLY);
+                break;
+
+            case RESET:
+                assertState(READONLY);
+                transitionTo(READONLY);
+                break;
 
             case EDIT:
                 if (current != null) {
@@ -84,18 +96,13 @@ public void execute(final Operation operation) {
                 transitionTo(EDITING);
                 break;
 
-            case CANCEL:
-                assertState(EDITING);
-                transitionTo(READONLY);
-                break;
-
             case SAVE:
                 assertState(EDITING);
                 transitionTo(READONLY);
                 break;
 
-            case RESET:
-                assertState(READONLY);
+            case CANCEL:
+                assertState(EDITING);
                 transitionTo(READONLY);
                 break;
 ",2016-01-08T22:04:36Z,34
"@@ -40,21 +40,21 @@ enum State {
 
 
     enum Operation {
-        VIEW, ADD, EDIT, CANCEL, SAVE, RESET
+        ADD, VIEW, CLEAR, RESET, EDIT, SAVE, CANCEL
     }
 
 
     @FunctionalInterface
-    interface SaveCallback<T> {
+    interface ResetCallback<T> {
 
-        void onSave(Form<T> form, Map<String, Object> changedValues);
+        void onReset(Form<T> form);
     }
 
 
     @FunctionalInterface
-    interface ResetCallback<T> {
+    interface SaveCallback<T> {
 
-        void onReset(Form<T> form);
+        void onSave(Form<T> form, Map<String, Object> changedValues);
     }
 
 
@@ -65,6 +65,13 @@ interface CancelCallback<T> {
     }
 
 
+    /**
+     * Takes a new transient model and enters the editing state.
+     *
+     * @param model the transient model
+     */
+    void add(T model);
+
     /**
      * Takes the specified model and updates the read-only state with the values from the model.
      *
@@ -73,11 +80,16 @@ interface CancelCallback<T> {
     void view(T model);
 
     /**
-     * Takes a new transient model and enters the editing state.
-     *
-     * @param model the transient model
+     * Clears this form by removing the model reference and by clearing all form fields.
      */
-    void add(T model);
+    void clear();
+
+    /**
+     * Resets the model.
+     */
+    void reset();
+
+    void setResetCallback(ResetCallback<T> resetCallback);
 
     /**
      * Takes the specified model and populates the editing state with the values from the model.
@@ -101,13 +113,6 @@ interface CancelCallback<T> {
 
     void setCancelCallback(CancelCallback<T> cancelCallback);
 
-    /**
-     * Resets the model.
-     */
-    void reset();
-
-    void setResetCallback(ResetCallback<T> resetCallback);
-
     /**
      * @return an unique identifier for this form.
      */",2016-01-08T22:04:36Z,323
"@@ -43,7 +43,7 @@
 /**
  * @author Harald Pehl
  */
-class FormLinks implements IsElement {
+class FormLinks<T> implements IsElement {
 
     private final static Constants CONSTANTS = GWT.create(Constants.class);
 
@@ -57,7 +57,7 @@ class FormLinks implements IsElement {
 
     FormLinks(final String formId,
             final StateMachine stateMachine,
-            final LinkedHashMap<String, String>helpTexts,
+            final LinkedHashMap<String, String> helpTexts,
             final EventListener onEdit,
             final EventListener onReset) {
 
@@ -150,11 +150,13 @@ public Element asElement() {
         return root;
     }
 
-    void switchTo(State state, SecurityContext securityContext) {
+    void switchTo(State state, T model, SecurityContext securityContext) {
         switch (state) {
             case READONLY:
-                Elements.setVisible(editLink, stateMachine.supports(EDIT) && securityContext.isWritable());
-                Elements.setVisible(resetLink, stateMachine.supports(RESET) && securityContext.isWritable());
+                Elements.setVisible(editLink,
+                        model != null && stateMachine.supports(EDIT) && securityContext.isWritable());
+                Elements.setVisible(resetLink,
+                        model != null && stateMachine.supports(RESET) && securityContext.isWritable());
                 Elements.setVisible(helpLink, !helpTexts.isEmpty());
                 break;
 ",2016-01-08T22:04:36Z,180
"@@ -25,6 +25,7 @@
 import jsinterop.annotations.JsOverlay;
 import jsinterop.annotations.JsProperty;
 import jsinterop.annotations.JsType;
+import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.resources.Names;
 
 import java.util.Collections;
@@ -269,4 +270,41 @@ public final List<T> selectedRows() {
         }
         return asList(selection);
     }
-}
+
+    @JsOverlay
+    public final Api<T> bindForm(Form<T> form) {
+        // don't replace this with a lambda - it won't run in super dev mode
+        //noinspection Convert2Lambda
+        return onSelectionChange(new SelectionChangeHandler<T>() {
+            @Override
+            public void onSelectionChanged(final Api<T> api) {
+                if (api.hasSelection()) {
+                    form.view(api.selectedRow());
+                } else {
+                    form.clear();
+                }
+            }
+        });
+    }
+
+    @JsOverlay
+    public final Api<T> bindForms(final Iterable<Form<T>> forms) {
+        // don't replace this with a lambda - it won't run in super dev mode
+        //noinspection Convert2Lambda
+        return onSelectionChange(new SelectionChangeHandler<T>() {
+            @Override
+            public void onSelectionChanged(final Api<T> api) {
+                if (api.hasSelection()) {
+                    T selectedRow = api.selectedRow();
+                    for (Form<T> form : forms) {
+                        form.view(selectedRow);
+                    }
+                } else {
+                    for (Form<T> form : forms) {
+                        form.clear();
+                    }
+                }
+            }
+        });
+    }
+}
\ No newline at end of file",2016-01-08T22:04:36Z,324
"@@ -38,6 +38,7 @@
 import org.jboss.hal.dmr.Property;
 import org.jboss.hal.meta.description.ResourceDescription;
 import org.jboss.hal.meta.security.SecurityContext;
+import org.jetbrains.annotations.NonNls;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -79,7 +80,7 @@ public static class Builder<T extends ModelNode> {
 
         // ------------------------------------------------------ configure required and optional settings
 
-        public Builder(final String id, final SecurityContext securityContext,
+        public Builder(@NonNls final String id, final SecurityContext securityContext,
                 final ResourceDescription resourceDescription) {
             this.id = id;
             this.securityContext = securityContext;",2016-01-08T22:04:36Z,60
"@@ -30,6 +30,7 @@
 import org.jboss.hal.dmr.Property;
 import org.jboss.hal.meta.description.ResourceDescription;
 import org.jboss.hal.meta.security.SecurityContext;
+import org.jetbrains.annotations.NonNls;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -98,7 +99,7 @@ protected void validate() {
 
     private static final Logger logger = LoggerFactory.getLogger(ModelNodeTable.class);
 
-    public ModelNodeTable(final String id, final SecurityContext securityContext, final Options<T> options) {
+    public ModelNodeTable(@NonNls final String id, final SecurityContext securityContext, final Options<T> options) {
         super(id, securityContext, options);
     }
 }",2016-01-08T22:04:36Z,108
"@@ -86,7 +86,7 @@ public static <T> T getOrDefault(final ModelNode modelNode, Provider<T> provider
      * Turns a list of properties into a list of model nodes which contain a {@link
      * org.jboss.hal.resources.Names#NAME_KEY} key with the properties name.
      */
-    public static List<ModelNode> withNames(List<Property> properties) {
+    public static List<ModelNode> asNodesWithNames(List<Property> properties) {
         List<ModelNode> nodes = new ArrayList<>(properties.size());
         for (Property property : properties) {
             property.getValue().get(NAME_KEY).set(property.getName());",2016-01-08T22:04:36Z,110
"@@ -65,6 +65,7 @@ public interface CSS {
     String formHorizontal = ""form-horizontal"";
     String formLinkLabel = ""form-link-label"";
     String formLinks = ""form-links"";
+    String formSection = ""form-section"";
     String hasError = ""has-error"";
     String hasFeedback = ""has-feedback"";
     String helpBlock = ""help-block"";",2016-01-08T22:04:36Z,159
"@@ -23,6 +23,12 @@
  */
 public interface Ids {
 
+    String DATA_SOURCE_ATTRIBUTES_FORM = ""data-source-attributes-form"";
+    String DATA_SOURCE_ATTRIBUTES_TAB = ""data-source-attributes-tab"";
+    String DATA_SOURCE_CONNECTION_FORM = ""data-source-connection-form"";
+    String DATA_SOURCE_CONNECTION_TAB = ""data-source-connection-tab"";
+    String DATA_SOURCE_TABLE = ""data-source-table"";
+
     String ENDPOINT_ADD = ""endpoint-add"";
     String ENDPOINT_PING = ""endpoint-ping"";
     String ENDPOINT_SELECT = ""endpoint-select"";",2016-01-08T22:04:36Z,111
"@@ -28,6 +28,7 @@
  */
 public interface Names {
 
+    String ATTRIBUTES = ""Attributes"";
     String CONFIGURATION = ""Configuration"";
     String CONTROLS = ""controls"";
     String DEPLOYMENTS = ""Deployments"";
@@ -42,6 +43,7 @@ public interface Names {
     String LABEL = ""label"";
     String MANAGEMENT_CONSOLE = ""Management Console"";
     String NAME_KEY = ""name"";
+    String NAME_LABEL = ""Name"";
     String NOT_SUPPORTED = ""not supported"";
     String NYI = ""not yet implemented"";
     String OBJECT = ""Object"";",2016-01-08T22:04:36Z,112
"@@ -29,6 +29,7 @@
 import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Requires;
 
 /**
  * @author Harald Pehl
@@ -39,6 +40,11 @@ public class AccessControlPresenter extends
     // @formatter:off
     @ProxyStandard
     @NameToken(NameTokens.ACCESS_CONTROL)
+    @Requires(value = {
+        ""/core-service=management/access=authorization/role-mapping=*"",
+        ""/core-service=management/access=authorization/host-scoped-role=*"",
+        ""/core-service=management/access=authorization/server-group-scoped-role=*""},
+        recursive = false)
     public interface MyProxy extends ProxyPlace<AccessControlPresenter> {}
 
     public interface MyView extends FinderView {}",2016-08-07T19:17:15Z,366
"@@ -41,6 +41,7 @@
 
 import static java.util.Collections.singletonList;
 import static java.util.Comparator.comparing;
+import static java.util.stream.Collectors.toList;
 import static org.jboss.hal.resources.CSS.fontAwesome;
 
 /**
@@ -154,37 +155,25 @@ public List<ItemAction<Assignment>> actions() {
             callback.onSuccess(assignments);
         });
 
-        // Setup column actions to include *all* roles.
-        // Already included roles will be filtered out later in the ItemsProvider
-        Element include = new Elements.Builder().span()
-                .css(fontAwesome(""plus""))
-                .title(resources.constants().includeRole())
-                .data(UIConstants.TOGGLE, UIConstants.TOOLTIP)
-                .data(UIConstants.PLACEMENT, ""bottom"")
-                .end().build();
-        List<ColumnAction<Assignment>> includeActions = new ArrayList<>();
-        StreamSupport.stream(accessControl.roles().spliterator(), false)
-                .sorted(comparing(Role::getType)
-                        .thenComparing(comparing(Role::getName)))
-                .forEach(role -> includeActions.add(new ColumnAction<Assignment>(includeId(role), role.getName(),
-                        column -> Browser.getWindow().alert(Names.NYI))));
-        addColumnActions(Ids.ASSIGNMENT_INCLUDE, include, includeActions);
-
-        // Setup column actions to exclude *all* roles.
-        // Already excluded roles will be filtered out later in the ItemsProvider
-        Element exclude = new Elements.Builder().span()
-                .css(fontAwesome(""minus""))
-                .title(resources.constants().excludeRole())
-                .data(UIConstants.TOGGLE, UIConstants.TOOLTIP)
-                .data(UIConstants.PLACEMENT, ""bottom"")
-                .end().build();
-        List<ColumnAction<Assignment>> excludeActions = new ArrayList<>();
-        StreamSupport.stream(accessControl.roles().spliterator(), false)
-                .sorted(comparing(Role::getType)
-                        .thenComparing(comparing(Role::getName)))
-                .forEach(role -> excludeActions.add(new ColumnAction<Assignment>(excludeId(role), role.getName(),
-                        column -> Browser.getWindow().alert(Names.NYI))));
-        addColumnActions(Ids.ASSIGNMENT_EXCLUDE, exclude, excludeActions);
+        // Setup column actions to include / exclude *all* roles.
+        // Already included / excluded roles will be filtered out later in the ItemsProvider
+        List<Role> roles = new ArrayList<>();
+        accessControl.roles().standardRoles().stream().sorted(comparing(Role::getName)).forEach(roles::add);
+        accessControl.roles().scopedRoles().stream().sorted(comparing(Role::getName)).forEach(roles::add);
+
+        List<ColumnAction<Assignment>> includeActions = roles.stream()
+                .map(role -> new ColumnAction<Assignment>(includeId(role), role.getName(),
+                        column -> Browser.getWindow().alert(Names.NYI)))
+                .collect(toList());
+        addColumnActions(Ids.ASSIGNMENT_INCLUDE, fontAwesome(""plus""), resources.constants().includeRole(),
+                includeActions);
+
+        List<ColumnAction<Assignment>> excludeActions = roles.stream()
+                .map(role -> new ColumnAction<Assignment>(excludeId(role), role.getName(),
+                        column -> Browser.getWindow().alert(Names.NYI)))
+                .collect(toList());
+        addColumnActions(Ids.ASSIGNMENT_EXCLUDE, fontAwesome(""minus""), resources.constants().excludeRole(),
+                excludeActions);
     }
 
     private String includeId(Role role) {",2016-08-07T19:17:15Z,6
"@@ -41,6 +41,7 @@
 
 import static java.util.Collections.singletonList;
 import static java.util.Comparator.comparing;
+import static java.util.stream.Collectors.toList;
 import static org.jboss.hal.resources.CSS.fontAwesome;
 
 /**
@@ -153,39 +154,25 @@ public List<ItemAction<Assignment>> actions() {
             callback.onSuccess(assignments);
         });
 
-        // Setup column actions to include *all* principals.
-        // Already included principals will be filtered out later in the ItemsProvider
-        Element include = new Elements.Builder().span()
-                .css(fontAwesome(""plus""))
-                .title(resources.constants().includeUserGroup())
-                .data(UIConstants.TOGGLE, UIConstants.TOOLTIP)
-                .data(UIConstants.PLACEMENT, ""bottom"")
-                .end().build();
-        List<ColumnAction<Assignment>> includeActions = new ArrayList<>();
-        StreamSupport.stream(accessControl.principals().spliterator(), false)
-                .sorted(comparing(Principal::getType)
-                        .thenComparing(comparing(Principal::getName)))
-                .forEach(principal -> includeActions.add(new ColumnAction<>(
-                        includeId(principal), typeAndName(principal),
-                        column -> Browser.getWindow().alert(Names.NYI))));
-        addColumnActions(Ids.MEMBERSHIP_INCLUDE, include, includeActions);
-
-        // Setup column actions to exclude *all* principals.
-        // Already excluded principals will be filtered out later in the ItemsProvider
-        Element exclude = new Elements.Builder().span()
-                .css(fontAwesome(""minus""))
-                .title(resources.constants().excludeUserGroup())
-                .data(UIConstants.TOGGLE, UIConstants.TOOLTIP)
-                .data(UIConstants.PLACEMENT, ""bottom"")
-                .end().build();
-        List<ColumnAction<Assignment>> excludeActions = new ArrayList<>();
-        StreamSupport.stream(accessControl.principals().spliterator(), false)
-                .sorted(comparing(Principal::getType)
-                        .thenComparing(comparing(Principal::getName)))
-                .forEach(principal -> excludeActions.add(new ColumnAction<>(
-                        excludeId(principal), typeAndName(principal),
-                        column -> Browser.getWindow().alert(Names.NYI))));
-        addColumnActions(Ids.MEMBERSHIP_EXCLUDE, exclude, excludeActions);
+        // Setup column actions to include / exclude *all* principals.
+        // Already included / excluded principals will be filtered out later in the ItemsProvider
+        List<Principal> principals = new ArrayList<>();
+        accessControl.principals().users().stream().sorted(comparing(Principal::getName)).forEach(principals::add);
+        accessControl.principals().groups().stream().sorted(comparing(Principal::getName)).forEach(principals::add);
+
+        List<ColumnAction<Assignment>> includeActions = principals.stream()
+                .map(principal -> new ColumnAction<Assignment>(includeId(principal), typeAndName(principal),
+                        column -> Browser.getWindow().alert(Names.NYI)))
+                .collect(toList());
+        addColumnActions(Ids.MEMBERSHIP_INCLUDE, fontAwesome(""plus""), resources.constants().includeUserGroup(),
+                includeActions);
+
+        List<ColumnAction<Assignment>> excludeActions = principals.stream()
+                .map(principal -> new ColumnAction<Assignment>(excludeId(principal), typeAndName(principal),
+                        column -> Browser.getWindow().alert(Names.NYI)))
+                .collect(toList());
+        addColumnActions(Ids.MEMBERSHIP_EXCLUDE, fontAwesome(""minus""), resources.constants().excludeUserGroup(),
+                excludeActions);
     }
 
     private String includeId(Principal principal) {",2016-08-07T19:17:15Z,367
"@@ -19,21 +19,35 @@
 import java.util.List;
 import javax.inject.Inject;
 
+import com.google.web.bindery.event.shared.EventBus;
 import elemental.client.Browser;
 import elemental.dom.Element;
 import org.jboss.hal.config.Environment;
+import org.jboss.hal.core.finder.ColumnAction;
 import org.jboss.hal.core.finder.ColumnActionFactory;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderColumn;
 import org.jboss.hal.core.finder.ItemAction;
 import org.jboss.hal.core.finder.ItemActionFactory;
 import org.jboss.hal.core.finder.ItemDisplay;
+import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.dmr.model.Operation;
+import org.jboss.hal.dmr.model.ResourceAddress;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.MetadataRegistry;
+import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
 import org.jboss.hal.spi.AsyncColumn;
+import org.jboss.hal.spi.Message;
+import org.jboss.hal.spi.MessageEvent;
 
 import static java.util.Comparator.comparing;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.ADD;
+import static org.jboss.hal.resources.CSS.pfIcon;
 
 /**
  * @author Harald Pehl
@@ -58,6 +72,10 @@ static List<String> filterData(Role role) {
     public RoleColumn(final Finder finder,
             final ColumnActionFactory columnActionFactory,
             final ItemActionFactory itemActionFactory,
+            final MetadataRegistry metadataRegistry,
+            final StatementContext statementContext,
+            final Dispatcher dispatcher,
+            final EventBus eventBus,
             final AccessControl accessControl,
             final AccessControlTokens tokens,
             final Environment environment,
@@ -126,8 +144,50 @@ public String nextColumn() {
         );
 
         if (!environment.isStandalone()) {
-            addColumnAction(columnActionFactory.add(Ids.ROLE_ADD, resources.constants().role(),
-                    column -> Browser.getWindow().alert(Names.NYI)));
+            // add host scoped role (hsr)
+            AddressTemplate hsrTemplate = AddressTemplate
+                    .of(""/core-service=management/access=authorization/host-scoped-role=*"");
+            Metadata hsrMeta = metadataRegistry.lookup(hsrTemplate);
+            AddResourceDialog hsrDialog = new AddResourceDialog(Ids.ROLE_HOST_SCOPED_FORM,
+                    resources.messages().addResourceTitle(resources.constants().hostScopedRole()),
+                    hsrMeta, (name, model) -> {
+                ResourceAddress address = hsrTemplate.resolve(statementContext, name);
+                Operation operation = new Operation.Builder(ADD, address)
+                        .payload(model)
+                        .build();
+                dispatcher.execute(operation, result -> {
+                    MessageEvent.fire(eventBus, Message.success(
+                            resources.messages().addResourceSuccess(resources.constants().hostScopedRole(), name)));
+                    refresh(name);
+                });
+            });
+            ColumnAction<Role> hsrAction = new ColumnAction<>(Ids.ROLE_HOST_SCOPED_ADD,
+                    resources.constants().hostScopedRole(), column -> hsrDialog.show());
+
+            // add server group scoped role (sgsr)
+            AddressTemplate sgsrTemplate = AddressTemplate
+                    .of(""/core-service=management/access=authorization/server-group-scoped-role=*"");
+            Metadata sgsrMeta = metadataRegistry.lookup(sgsrTemplate);
+            AddResourceDialog sgsrDialog = new AddResourceDialog(Ids.ROLE_SERVER_GROUP_SCOPED_FORM,
+                    resources.messages().addResourceTitle(resources.constants().hostScopedRole()),
+                    sgsrMeta, (name, model) -> {
+                ResourceAddress address = sgsrTemplate.resolve(statementContext, name);
+                Operation operation = new Operation.Builder(ADD, address)
+                        .payload(model)
+                        .build();
+                dispatcher.execute(operation, result -> {
+                    MessageEvent.fire(eventBus, Message.success(resources.messages()
+                            .addResourceSuccess(resources.constants().serverGroupScopedRole(), name)));
+                    refresh(name);
+                });
+            });
+            ColumnAction<Role> sgsrAction = new ColumnAction<>(Ids.ROLE_SERVER_GROUP_SCOPED_ADD,
+                    resources.constants().serverGroupScopedRole(), column -> sgsrDialog.show());
+
+            List<ColumnAction<Role>> actions = new ArrayList<>();
+            actions.add(hsrAction);
+            actions.add(sgsrAction);
+            addColumnActions(Ids.ROLE_ADD, pfIcon(""add-circle-o""), resources.constants().add(), actions);
         }
         addColumnAction(columnActionFactory.refresh(Ids.ROLE_REFRESH,
                 column -> accessControl.reload(() -> refresh(RefreshMode.RESTORE_SELECTION))));",2016-08-07T19:17:15Z,32
"@@ -25,7 +25,6 @@
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
 import elemental.dom.Element;
-import org.jboss.gwt.elemento.core.Elements;
 import org.jboss.gwt.flow.Async;
 import org.jboss.gwt.flow.Function;
 import org.jboss.gwt.flow.FunctionContext;
@@ -57,7 +56,6 @@
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
-import org.jboss.hal.resources.UIConstants;
 import org.jboss.hal.spi.AsyncColumn;
 import org.jboss.hal.spi.Footer;
 import org.jboss.hal.spi.Message;
@@ -121,13 +119,7 @@ public DataSourceColumn(final MetadataRegistry metadataRegistry,
         addActions.add(new ColumnAction<>(Ids.XA_DATA_SOURCE_ADD,
                 resources.messages().addResourceTitle(Names.XA_DATASOURCE),
                 column -> launchNewDataSourceWizard(true)));
-        Element element = new Elements.Builder().span()
-                .css(pfIcon(""add-circle-o""))
-                .title(resources.constants().add())
-                .data(UIConstants.TOGGLE, UIConstants.TOOLTIP)
-                .data(UIConstants.PLACEMENT, ""bottom"")
-                .end().build();
-        addColumnActions(Ids.DATA_SOURCE_ADD_ACTIONS, element, addActions);
+        addColumnActions(Ids.DATA_SOURCE_ADD_ACTIONS, pfIcon(""add-circle-o""), resources.constants().add(), addActions);
         addColumnAction(columnActionFactory.refresh(Ids.DATA_SOURCE_REFRESH));
 
         setItemsProvider((context, callback) -> {",2016-08-07T19:17:15Z,80
"@@ -754,8 +754,14 @@ protected void addColumnAction(ColumnAction<T> columnAction) {
         }
     }
 
-    protected void addColumnActions(String id, Element element, List<ColumnAction<T>> actions) {
+    protected void addColumnActions(String id, String iconsCss, String title, List<ColumnAction<T>> actions) {
         assertNotAsElement(""addColumnActions()"");
+        Element element = new Elements.Builder().span()
+                .css(iconsCss)
+                .title(title)
+                .data(UIConstants.TOGGLE, UIConstants.TOOLTIP)
+                .data(UIConstants.PLACEMENT, ""bottom"")
+                .end().build();
         columnActions.appendChild(newColumnButton(new DropdownColumnAction<>(id, element, actions)));
         if (columnActions.getChildElementCount() > 1) {
             columnActions.getClassList().add(btnGroup);",2016-08-07T19:17:15Z,368
"@@ -198,6 +198,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String homepageHelpWildFlyHomeText();
     String homepageHelpModelReferenceText();
     String homepageHelpLatestNews();
+    String hostScopedRole();
     String hour();
     String hours();
 
@@ -292,6 +293,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String second();
     String seconds();
     String security();
+    String serverGroupScopedRole();
     String serverName();
     String sessions();
     String settings();",2016-08-07T19:17:15Z,100
"@@ -191,6 +191,10 @@ public interface Ids {
 
     String ROLE = ""role"";
     String ROLE_ADD = build(ROLE, ADD_SUFFIX);
+    String ROLE_HOST_SCOPED_ADD = build(ROLE, HOST, ADD_SUFFIX);
+    String ROLE_HOST_SCOPED_FORM = build(ROLE, HOST, FORM_SUFFIX);
+    String ROLE_SERVER_GROUP_SCOPED_ADD = build(ROLE, ""server-group"", ADD_SUFFIX);
+    String ROLE_SERVER_GROUP_SCOPED_FORM = build(ROLE, ""server-group"", FORM_SUFFIX);
     String ROLE_REFRESH = build(ROLE, REFRESH_SUFFIX);
     String ROOT_CONTAINER = ""hal-root-container"";
     String RUNTIME_SUBSYSTEMS = ""runtime-subsystems"";",2016-08-07T19:17:15Z,111
"@@ -48,7 +48,6 @@ public interface Names {
     String JDBC_DRIVER = ""JDBC Driver"";
     String JDBC_DRIVERS = ""JDBC Drivers"";
     String JPA = ""JPA"";
-    String JVM = ""JVM"";
     String LOGGING = ""Logging"";
     String LOGGING_PROFILE = ""Logging Profile"";
     String LOGGING_PROFILES = ""Logging Profiles"";",2016-08-07T19:17:15Z,112
"@@ -152,6 +152,7 @@ homepageRuntimeStandaloneStep2=View log files or JVM usage
 homepageRuntimeStandaloneSubHeader=Monitor server status
 homepageRuntimeStepIntro=View runtime information such as server status, JVM status, and server log files.
 homepageTakeATour=Take a Tour
+hostScopedRole=Host Scoped Role
 hour=hour
 hours=hours
 includeRole=Include Role
@@ -237,6 +238,7 @@ search=Search
 second=second
 seconds=seconds
 security=Security
+serverGroupScopedRole=Server Group Scoped Role
 serverName=Server Name
 sessions=Sessions
 settings=Settings",2016-08-07T19:17:15Z,100
"@@ -29,6 +29,7 @@
 import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Requires;
 
 /**
  * @author Harald Pehl
@@ -39,6 +40,11 @@ public class AccessControlPresenter extends
     // @formatter:off
     @ProxyStandard
     @NameToken(NameTokens.ACCESS_CONTROL)
+    @Requires(value = {
+        ""/core-service=management/access=authorization/role-mapping=*"",
+        ""/core-service=management/access=authorization/host-scoped-role=*"",
+        ""/core-service=management/access=authorization/server-group-scoped-role=*""},
+        recursive = false)
     public interface MyProxy extends ProxyPlace<AccessControlPresenter> {}
 
     public interface MyView extends FinderView {}",2016-08-07T19:17:15Z,366
"@@ -41,6 +41,7 @@
 
 import static java.util.Collections.singletonList;
 import static java.util.Comparator.comparing;
+import static java.util.stream.Collectors.toList;
 import static org.jboss.hal.resources.CSS.fontAwesome;
 
 /**
@@ -154,37 +155,25 @@ public List<ItemAction<Assignment>> actions() {
             callback.onSuccess(assignments);
         });
 
-        // Setup column actions to include *all* roles.
-        // Already included roles will be filtered out later in the ItemsProvider
-        Element include = new Elements.Builder().span()
-                .css(fontAwesome(""plus""))
-                .title(resources.constants().includeRole())
-                .data(UIConstants.TOGGLE, UIConstants.TOOLTIP)
-                .data(UIConstants.PLACEMENT, ""bottom"")
-                .end().build();
-        List<ColumnAction<Assignment>> includeActions = new ArrayList<>();
-        StreamSupport.stream(accessControl.roles().spliterator(), false)
-                .sorted(comparing(Role::getType)
-                        .thenComparing(comparing(Role::getName)))
-                .forEach(role -> includeActions.add(new ColumnAction<Assignment>(includeId(role), role.getName(),
-                        column -> Browser.getWindow().alert(Names.NYI))));
-        addColumnActions(Ids.ASSIGNMENT_INCLUDE, include, includeActions);
-
-        // Setup column actions to exclude *all* roles.
-        // Already excluded roles will be filtered out later in the ItemsProvider
-        Element exclude = new Elements.Builder().span()
-                .css(fontAwesome(""minus""))
-                .title(resources.constants().excludeRole())
-                .data(UIConstants.TOGGLE, UIConstants.TOOLTIP)
-                .data(UIConstants.PLACEMENT, ""bottom"")
-                .end().build();
-        List<ColumnAction<Assignment>> excludeActions = new ArrayList<>();
-        StreamSupport.stream(accessControl.roles().spliterator(), false)
-                .sorted(comparing(Role::getType)
-                        .thenComparing(comparing(Role::getName)))
-                .forEach(role -> excludeActions.add(new ColumnAction<Assignment>(excludeId(role), role.getName(),
-                        column -> Browser.getWindow().alert(Names.NYI))));
-        addColumnActions(Ids.ASSIGNMENT_EXCLUDE, exclude, excludeActions);
+        // Setup column actions to include / exclude *all* roles.
+        // Already included / excluded roles will be filtered out later in the ItemsProvider
+        List<Role> roles = new ArrayList<>();
+        accessControl.roles().standardRoles().stream().sorted(comparing(Role::getName)).forEach(roles::add);
+        accessControl.roles().scopedRoles().stream().sorted(comparing(Role::getName)).forEach(roles::add);
+
+        List<ColumnAction<Assignment>> includeActions = roles.stream()
+                .map(role -> new ColumnAction<Assignment>(includeId(role), role.getName(),
+                        column -> Browser.getWindow().alert(Names.NYI)))
+                .collect(toList());
+        addColumnActions(Ids.ASSIGNMENT_INCLUDE, fontAwesome(""plus""), resources.constants().includeRole(),
+                includeActions);
+
+        List<ColumnAction<Assignment>> excludeActions = roles.stream()
+                .map(role -> new ColumnAction<Assignment>(excludeId(role), role.getName(),
+                        column -> Browser.getWindow().alert(Names.NYI)))
+                .collect(toList());
+        addColumnActions(Ids.ASSIGNMENT_EXCLUDE, fontAwesome(""minus""), resources.constants().excludeRole(),
+                excludeActions);
     }
 
     private String includeId(Role role) {",2016-08-07T19:17:15Z,6
"@@ -41,6 +41,7 @@
 
 import static java.util.Collections.singletonList;
 import static java.util.Comparator.comparing;
+import static java.util.stream.Collectors.toList;
 import static org.jboss.hal.resources.CSS.fontAwesome;
 
 /**
@@ -153,39 +154,25 @@ public List<ItemAction<Assignment>> actions() {
             callback.onSuccess(assignments);
         });
 
-        // Setup column actions to include *all* principals.
-        // Already included principals will be filtered out later in the ItemsProvider
-        Element include = new Elements.Builder().span()
-                .css(fontAwesome(""plus""))
-                .title(resources.constants().includeUserGroup())
-                .data(UIConstants.TOGGLE, UIConstants.TOOLTIP)
-                .data(UIConstants.PLACEMENT, ""bottom"")
-                .end().build();
-        List<ColumnAction<Assignment>> includeActions = new ArrayList<>();
-        StreamSupport.stream(accessControl.principals().spliterator(), false)
-                .sorted(comparing(Principal::getType)
-                        .thenComparing(comparing(Principal::getName)))
-                .forEach(principal -> includeActions.add(new ColumnAction<>(
-                        includeId(principal), typeAndName(principal),
-                        column -> Browser.getWindow().alert(Names.NYI))));
-        addColumnActions(Ids.MEMBERSHIP_INCLUDE, include, includeActions);
-
-        // Setup column actions to exclude *all* principals.
-        // Already excluded principals will be filtered out later in the ItemsProvider
-        Element exclude = new Elements.Builder().span()
-                .css(fontAwesome(""minus""))
-                .title(resources.constants().excludeUserGroup())
-                .data(UIConstants.TOGGLE, UIConstants.TOOLTIP)
-                .data(UIConstants.PLACEMENT, ""bottom"")
-                .end().build();
-        List<ColumnAction<Assignment>> excludeActions = new ArrayList<>();
-        StreamSupport.stream(accessControl.principals().spliterator(), false)
-                .sorted(comparing(Principal::getType)
-                        .thenComparing(comparing(Principal::getName)))
-                .forEach(principal -> excludeActions.add(new ColumnAction<>(
-                        excludeId(principal), typeAndName(principal),
-                        column -> Browser.getWindow().alert(Names.NYI))));
-        addColumnActions(Ids.MEMBERSHIP_EXCLUDE, exclude, excludeActions);
+        // Setup column actions to include / exclude *all* principals.
+        // Already included / excluded principals will be filtered out later in the ItemsProvider
+        List<Principal> principals = new ArrayList<>();
+        accessControl.principals().users().stream().sorted(comparing(Principal::getName)).forEach(principals::add);
+        accessControl.principals().groups().stream().sorted(comparing(Principal::getName)).forEach(principals::add);
+
+        List<ColumnAction<Assignment>> includeActions = principals.stream()
+                .map(principal -> new ColumnAction<Assignment>(includeId(principal), typeAndName(principal),
+                        column -> Browser.getWindow().alert(Names.NYI)))
+                .collect(toList());
+        addColumnActions(Ids.MEMBERSHIP_INCLUDE, fontAwesome(""plus""), resources.constants().includeUserGroup(),
+                includeActions);
+
+        List<ColumnAction<Assignment>> excludeActions = principals.stream()
+                .map(principal -> new ColumnAction<Assignment>(excludeId(principal), typeAndName(principal),
+                        column -> Browser.getWindow().alert(Names.NYI)))
+                .collect(toList());
+        addColumnActions(Ids.MEMBERSHIP_EXCLUDE, fontAwesome(""minus""), resources.constants().excludeUserGroup(),
+                excludeActions);
     }
 
     private String includeId(Principal principal) {",2016-08-07T19:17:15Z,367
"@@ -19,21 +19,35 @@
 import java.util.List;
 import javax.inject.Inject;
 
+import com.google.web.bindery.event.shared.EventBus;
 import elemental.client.Browser;
 import elemental.dom.Element;
 import org.jboss.hal.config.Environment;
+import org.jboss.hal.core.finder.ColumnAction;
 import org.jboss.hal.core.finder.ColumnActionFactory;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderColumn;
 import org.jboss.hal.core.finder.ItemAction;
 import org.jboss.hal.core.finder.ItemActionFactory;
 import org.jboss.hal.core.finder.ItemDisplay;
+import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.dmr.model.Operation;
+import org.jboss.hal.dmr.model.ResourceAddress;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.MetadataRegistry;
+import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
 import org.jboss.hal.spi.AsyncColumn;
+import org.jboss.hal.spi.Message;
+import org.jboss.hal.spi.MessageEvent;
 
 import static java.util.Comparator.comparing;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.ADD;
+import static org.jboss.hal.resources.CSS.pfIcon;
 
 /**
  * @author Harald Pehl
@@ -58,6 +72,10 @@ static List<String> filterData(Role role) {
     public RoleColumn(final Finder finder,
             final ColumnActionFactory columnActionFactory,
             final ItemActionFactory itemActionFactory,
+            final MetadataRegistry metadataRegistry,
+            final StatementContext statementContext,
+            final Dispatcher dispatcher,
+            final EventBus eventBus,
             final AccessControl accessControl,
             final AccessControlTokens tokens,
             final Environment environment,
@@ -126,8 +144,50 @@ public String nextColumn() {
         );
 
         if (!environment.isStandalone()) {
-            addColumnAction(columnActionFactory.add(Ids.ROLE_ADD, resources.constants().role(),
-                    column -> Browser.getWindow().alert(Names.NYI)));
+            // add host scoped role (hsr)
+            AddressTemplate hsrTemplate = AddressTemplate
+                    .of(""/core-service=management/access=authorization/host-scoped-role=*"");
+            Metadata hsrMeta = metadataRegistry.lookup(hsrTemplate);
+            AddResourceDialog hsrDialog = new AddResourceDialog(Ids.ROLE_HOST_SCOPED_FORM,
+                    resources.messages().addResourceTitle(resources.constants().hostScopedRole()),
+                    hsrMeta, (name, model) -> {
+                ResourceAddress address = hsrTemplate.resolve(statementContext, name);
+                Operation operation = new Operation.Builder(ADD, address)
+                        .payload(model)
+                        .build();
+                dispatcher.execute(operation, result -> {
+                    MessageEvent.fire(eventBus, Message.success(
+                            resources.messages().addResourceSuccess(resources.constants().hostScopedRole(), name)));
+                    refresh(name);
+                });
+            });
+            ColumnAction<Role> hsrAction = new ColumnAction<>(Ids.ROLE_HOST_SCOPED_ADD,
+                    resources.constants().hostScopedRole(), column -> hsrDialog.show());
+
+            // add server group scoped role (sgsr)
+            AddressTemplate sgsrTemplate = AddressTemplate
+                    .of(""/core-service=management/access=authorization/server-group-scoped-role=*"");
+            Metadata sgsrMeta = metadataRegistry.lookup(sgsrTemplate);
+            AddResourceDialog sgsrDialog = new AddResourceDialog(Ids.ROLE_SERVER_GROUP_SCOPED_FORM,
+                    resources.messages().addResourceTitle(resources.constants().hostScopedRole()),
+                    sgsrMeta, (name, model) -> {
+                ResourceAddress address = sgsrTemplate.resolve(statementContext, name);
+                Operation operation = new Operation.Builder(ADD, address)
+                        .payload(model)
+                        .build();
+                dispatcher.execute(operation, result -> {
+                    MessageEvent.fire(eventBus, Message.success(resources.messages()
+                            .addResourceSuccess(resources.constants().serverGroupScopedRole(), name)));
+                    refresh(name);
+                });
+            });
+            ColumnAction<Role> sgsrAction = new ColumnAction<>(Ids.ROLE_SERVER_GROUP_SCOPED_ADD,
+                    resources.constants().serverGroupScopedRole(), column -> sgsrDialog.show());
+
+            List<ColumnAction<Role>> actions = new ArrayList<>();
+            actions.add(hsrAction);
+            actions.add(sgsrAction);
+            addColumnActions(Ids.ROLE_ADD, pfIcon(""add-circle-o""), resources.constants().add(), actions);
         }
         addColumnAction(columnActionFactory.refresh(Ids.ROLE_REFRESH,
                 column -> accessControl.reload(() -> refresh(RefreshMode.RESTORE_SELECTION))));",2016-08-07T19:17:15Z,32
"@@ -25,7 +25,6 @@
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
 import elemental.dom.Element;
-import org.jboss.gwt.elemento.core.Elements;
 import org.jboss.gwt.flow.Async;
 import org.jboss.gwt.flow.Function;
 import org.jboss.gwt.flow.FunctionContext;
@@ -57,7 +56,6 @@
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
-import org.jboss.hal.resources.UIConstants;
 import org.jboss.hal.spi.AsyncColumn;
 import org.jboss.hal.spi.Footer;
 import org.jboss.hal.spi.Message;
@@ -121,13 +119,7 @@ public DataSourceColumn(final MetadataRegistry metadataRegistry,
         addActions.add(new ColumnAction<>(Ids.XA_DATA_SOURCE_ADD,
                 resources.messages().addResourceTitle(Names.XA_DATASOURCE),
                 column -> launchNewDataSourceWizard(true)));
-        Element element = new Elements.Builder().span()
-                .css(pfIcon(""add-circle-o""))
-                .title(resources.constants().add())
-                .data(UIConstants.TOGGLE, UIConstants.TOOLTIP)
-                .data(UIConstants.PLACEMENT, ""bottom"")
-                .end().build();
-        addColumnActions(Ids.DATA_SOURCE_ADD_ACTIONS, element, addActions);
+        addColumnActions(Ids.DATA_SOURCE_ADD_ACTIONS, pfIcon(""add-circle-o""), resources.constants().add(), addActions);
         addColumnAction(columnActionFactory.refresh(Ids.DATA_SOURCE_REFRESH));
 
         setItemsProvider((context, callback) -> {",2016-08-07T19:17:15Z,80
"@@ -754,8 +754,14 @@ protected void addColumnAction(ColumnAction<T> columnAction) {
         }
     }
 
-    protected void addColumnActions(String id, Element element, List<ColumnAction<T>> actions) {
+    protected void addColumnActions(String id, String iconsCss, String title, List<ColumnAction<T>> actions) {
         assertNotAsElement(""addColumnActions()"");
+        Element element = new Elements.Builder().span()
+                .css(iconsCss)
+                .title(title)
+                .data(UIConstants.TOGGLE, UIConstants.TOOLTIP)
+                .data(UIConstants.PLACEMENT, ""bottom"")
+                .end().build();
         columnActions.appendChild(newColumnButton(new DropdownColumnAction<>(id, element, actions)));
         if (columnActions.getChildElementCount() > 1) {
             columnActions.getClassList().add(btnGroup);",2016-08-07T19:17:15Z,368
"@@ -198,6 +198,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String homepageHelpWildFlyHomeText();
     String homepageHelpModelReferenceText();
     String homepageHelpLatestNews();
+    String hostScopedRole();
     String hour();
     String hours();
 
@@ -292,6 +293,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String second();
     String seconds();
     String security();
+    String serverGroupScopedRole();
     String serverName();
     String sessions();
     String settings();",2016-08-07T19:17:15Z,100
"@@ -191,6 +191,10 @@ public interface Ids {
 
     String ROLE = ""role"";
     String ROLE_ADD = build(ROLE, ADD_SUFFIX);
+    String ROLE_HOST_SCOPED_ADD = build(ROLE, HOST, ADD_SUFFIX);
+    String ROLE_HOST_SCOPED_FORM = build(ROLE, HOST, FORM_SUFFIX);
+    String ROLE_SERVER_GROUP_SCOPED_ADD = build(ROLE, ""server-group"", ADD_SUFFIX);
+    String ROLE_SERVER_GROUP_SCOPED_FORM = build(ROLE, ""server-group"", FORM_SUFFIX);
     String ROLE_REFRESH = build(ROLE, REFRESH_SUFFIX);
     String ROOT_CONTAINER = ""hal-root-container"";
     String RUNTIME_SUBSYSTEMS = ""runtime-subsystems"";",2016-08-07T19:17:15Z,111
"@@ -48,7 +48,6 @@ public interface Names {
     String JDBC_DRIVER = ""JDBC Driver"";
     String JDBC_DRIVERS = ""JDBC Drivers"";
     String JPA = ""JPA"";
-    String JVM = ""JVM"";
     String LOGGING = ""Logging"";
     String LOGGING_PROFILE = ""Logging Profile"";
     String LOGGING_PROFILES = ""Logging Profiles"";",2016-08-07T19:17:15Z,112
"@@ -152,6 +152,7 @@ homepageRuntimeStandaloneStep2=View log files or JVM usage
 homepageRuntimeStandaloneSubHeader=Monitor server status
 homepageRuntimeStepIntro=View runtime information such as server status, JVM status, and server log files.
 homepageTakeATour=Take a Tour
+hostScopedRole=Host Scoped Role
 hour=hour
 hours=hours
 includeRole=Include Role
@@ -237,6 +238,7 @@ search=Search
 second=second
 seconds=seconds
 security=Security
+serverGroupScopedRole=Server Group Scoped Role
 serverName=Server Name
 sessions=Sessions
 settings=Settings",2016-08-07T19:17:15Z,100
"@@ -48,30 +48,18 @@ public class DeploymentScannerPresenter
         extends MbuiPresenter<DeploymentScannerPresenter.MyView, DeploymentScannerPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    // @formatter:off
-    @ProxyCodeSplit
-    @NameToken(NameTokens.DEPLOYMENT_SCANNERS)
-    @Requires({DEPLOYMENTSCANNER_SUBSYSTEM_ADDRESS, DEPLOYMENTSCANNER_ADDRESS})
-    public interface MyProxy extends ProxyPlace<DeploymentScannerPresenter> {}
-
-    public interface MyView extends MbuiView<DeploymentScannerPresenter> {
-        void updateScanners(List<NamedNode> items);
-    }
-    // @formatter:on
-
-
     private final CrudOperations crud;
     private final FinderPathFactory finderPathFactory;
     private final StatementContext statementContext;
 
     @Inject
-    public DeploymentScannerPresenter(final EventBus eventBus,
-            final MyView view,
-            final MyProxy proxy,
-            final Finder finder,
-            final CrudOperations crud,
-            final FinderPathFactory finderPathFactory,
-            final StatementContext statementContext) {
+    public DeploymentScannerPresenter(EventBus eventBus,
+            MyView view,
+            MyProxy proxy,
+            Finder finder,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext) {
         super(eventBus, view, proxy, finder);
         this.crud = crud;
         this.finderPathFactory = finderPathFactory;
@@ -100,4 +88,17 @@ protected void reload() {
                 getView().updateScanners(
                         asNamedNodes(failSafePropertyList(result, DEPLOYMENTSCANNER_TEMPLATE.lastName()))));
     }
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @NameToken(NameTokens.DEPLOYMENT_SCANNERS)
+    @Requires({DEPLOYMENTSCANNER_SUBSYSTEM_ADDRESS, DEPLOYMENTSCANNER_ADDRESS})
+    public interface MyProxy extends ProxyPlace<DeploymentScannerPresenter> {
+    }
+
+    public interface MyView extends MbuiView<DeploymentScannerPresenter> {
+        void updateScanners(List<NamedNode> items);
+    }
+    // @formatter:on
 }",2017-10-16T13:25:42Z,343
"@@ -67,21 +67,8 @@ public class CacheContainerPresenter
         extends ApplicationFinderPresenter<CacheContainerPresenter.MyView, CacheContainerPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    // @formatter:off
-    @ProxyCodeSplit
-    @Requires({CACHE_CONTAINER_ADDRESS, DISTRIBUTED_CACHE_ADDRESS, INVALIDATION_CACHE_ADDRESS, LOCAL_CACHE_ADDRESS,
-            REPLICATED_CACHE_ADDRESS, THREAD_POOL_ADDRESS, TRANSPORT_JGROUPS_ADDRESS})
-    @NameToken(NameTokens.CACHE_CONTAINER)
-    public interface MyProxy extends ProxyPlace<CacheContainerPresenter> {}
-
-    public interface MyView extends HalView, HasPresenter<CacheContainerPresenter> {
-        void update(CacheContainer cacheContainer, boolean jgroups);
-        void updateCacheBackups(Cache cache, List<NamedNode> backups);
-        void updateCacheStore(Cache cache, List<Property> stores);
-    }
-    // @formatter:on
-
-
+    public static final String EQUALS = ""="";
+    public static final String EQ_WILDCARD = ""=*"";
     private final MetadataRegistry metadataRegistry;
     private final Dispatcher dispatcher;
     private final CrudOperations crud;
@@ -94,16 +81,16 @@ public interface MyView extends HalView, HasPresenter<CacheContainerPresenter> {
     private Store store;
 
     @Inject
-    public CacheContainerPresenter(final EventBus eventBus,
-            final CacheContainerPresenter.MyView view,
-            final CacheContainerPresenter.MyProxy myProxy,
-            final Finder finder,
-            final MetadataRegistry metadataRegistry,
-            final Dispatcher dispatcher,
-            final CrudOperations crud,
-            final FinderPathFactory finderPathFactory,
-            final StatementContext statementContext,
-            final Resources resources) {
+    public CacheContainerPresenter(EventBus eventBus,
+            CacheContainerPresenter.MyView view,
+            CacheContainerPresenter.MyProxy myProxy,
+            Finder finder,
+            MetadataRegistry metadataRegistry,
+            Dispatcher dispatcher,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext,
+            Resources resources) {
         super(eventBus, view, myProxy, finder);
         this.metadataRegistry = metadataRegistry;
         this.dispatcher = dispatcher;
@@ -120,7 +107,7 @@ protected void onBind() {
     }
 
     @Override
-    public void prepareFromRequest(final PlaceRequest request) {
+    public void prepareFromRequest(PlaceRequest request) {
         super.prepareFromRequest(request);
         cacheContainer = request.getParameter(NAME, null);
     }
@@ -177,7 +164,7 @@ void resetCacheContainer(Form<ModelNode> form) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE);
         crud.reset(Names.CACHE_CONTAINER, cacheContainer, address, form, metadata, new FinishReset<ModelNode>(form) {
             @Override
-            public void afterReset(final Form<ModelNode> form) {
+            public void afterReset(Form<ModelNode> form) {
                 reload();
             }
         });
@@ -186,34 +173,34 @@ public void afterReset(final Form<ModelNode> form) {
 
     // ------------------------------------------------------ cache
 
-    void addCache(final Cache cache) {
+    void addCache(Cache cache) {
         Metadata metadata = metadataRegistry.lookup(cache.template);
         AddResourceDialog dialog = new AddResourceDialog(Ids.build(cache.baseId, Ids.ADD),
                 resources.messages().addResourceTitle(cache.type), metadata,
                 (name, model) -> crud.add(cache.type, name, cacheAddress(cache, name), model, (n, a) -> reload()));
         dialog.show();
     }
 
-    void saveCache(final Cache cache, final String name, final Map<String, Object> changedValues) {
+    void saveCache(Cache cache, String name, Map<String, Object> changedValues) {
         Metadata metadata = metadataRegistry.lookup(cache.template);
         crud.save(cache.type, name, cacheAddress(cache, name), changedValues, metadata, this::reload);
     }
 
-    void resetCache(final Cache cache, final String name, final Form<NamedNode> form) {
+    void resetCache(Cache cache, String name, Form<NamedNode> form) {
         Metadata metadata = metadataRegistry.lookup(cache.template);
         crud.reset(cache.type, name, cacheAddress(cache, name), form, metadata, new FinishReset<NamedNode>(form) {
             @Override
-            public void afterReset(final Form<NamedNode> form) {
+            public void afterReset(Form<NamedNode> form) {
                 reload();
             }
         });
     }
 
-    void removeCache(final Cache cache, final String name) {
+    void removeCache(Cache cache, String name) {
         crud.remove(cache.type, name, cacheAddress(cache, name), this::reload);
     }
 
-    void selectCache(final Cache cacheType, final String cacheName) {
+    void selectCache(Cache cacheType, String cacheName) {
         this.cacheType = cacheType;
         this.cacheName = cacheName;
     }
@@ -222,59 +209,59 @@ String cacheSegment() {
         return cacheType.type + "": "" + cacheName;
     }
 
-    private ResourceAddress cacheAddress(final Cache cache, final String name) {
+    private ResourceAddress cacheAddress(Cache cache, String name) {
         // cannot use this.cacheType and this.cacheName here, since they might be null
-        return SELECTED_CACHE_CONTAINER_TEMPLATE.append(cache.resource() + ""="" + name).resolve(statementContext);
+        return SELECTED_CACHE_CONTAINER_TEMPLATE.append(cache.resource() + EQUALS + name).resolve(statementContext);
     }
 
 
     // ------------------------------------------------------ cache component
 
-    void addCacheComponent(final Component component) {
+    void addCacheComponent(Component component) {
         crud.addSingleton(component.type, cacheComponentAddress(component), null, address -> reload());
     }
 
-    Operation readCacheComponent(final Component component) {
+    Operation readCacheComponent(Component component) {
         if (cacheType != null && cacheName != null) {
             return new Operation.Builder(cacheComponentAddress(component), READ_RESOURCE_OPERATION).build();
         } else {
             return null;
         }
     }
 
-    void saveCacheComponent(final Component component, final Map<String, Object> changedValues) {
+    void saveCacheComponent(Component component, Map<String, Object> changedValues) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(COMPONENT + ""="" + component.resource));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(COMPONENT + EQUALS + component.resource));
         crud.saveSingleton(component.type, cacheComponentAddress(component), changedValues, metadata, this::reload);
     }
 
-    void resetCacheComponent(final Component component, final Form<ModelNode> form) {
+    void resetCacheComponent(Component component, Form<ModelNode> form) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(COMPONENT + ""="" + component.resource));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(COMPONENT + EQUALS + component.resource));
         crud.resetSingleton(component.type, cacheComponentAddress(component), form, metadata,
                 new FinishReset<ModelNode>(form) {
                     @Override
-                    public void afterReset(final Form<ModelNode> form) {
+                    public void afterReset(Form<ModelNode> form) {
                         reload();
                     }
                 });
     }
 
-    void removeCacheComponent(final Component component, final Form<ModelNode> form) {
+    void removeCacheComponent(Component component, Form<ModelNode> form) {
         crud.removeSingleton(component.type, cacheComponentAddress(component), new FinishRemove<ModelNode>(form) {
             @Override
-            public void afterRemove(final Form<ModelNode> form) {
+            public void afterRemove(Form<ModelNode> form) {
                 reload();
             }
         });
     }
 
-    private ResourceAddress cacheComponentAddress(final Component component) {
+    private ResourceAddress cacheComponentAddress(Component component) {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
-                .append(COMPONENT + ""="" + component.resource)
+                .append(cacheType.resource() + EQUALS + cacheName)
+                .append(COMPONENT + EQUALS + component.resource)
                 .resolve(statementContext);
     }
 
@@ -283,8 +270,8 @@ private ResourceAddress cacheComponentAddress(final Component component) {
 
     void addCacheBackup() {
         Metadata metadata = metadataRegistry.lookup(cacheType.template
-                .append(COMPONENT + ""="" + BACKUPS)
-                .append(BACKUP + ""=*""));
+                .append(COMPONENT + EQUALS + BACKUPS)
+                .append(BACKUP + EQ_WILDCARD));
         AddResourceDialog dialog = new AddResourceDialog(Ids.build(cacheType.baseId, BACKUPS, Ids.ADD),
                 resources.messages().addResourceTitle(Names.BACKUP), metadata,
                 (name, model) -> {
@@ -296,52 +283,52 @@ void addCacheBackup() {
 
     void showCacheBackup() {
         ResourceAddress address = SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
-                .append(COMPONENT + ""="" + BACKUPS)
+                .append(cacheType.resource() + EQUALS + cacheName)
+                .append(COMPONENT + EQUALS + BACKUPS)
                 .resolve(statementContext);
         crud.readChildren(address, BACKUP,
                 children -> getView().updateCacheBackups(cacheType, asNamedNodes(children)));
     }
 
-    void saveCacheBackup(final String name, final Map<String, Object> changedValues) {
+    void saveCacheBackup(String name, Map<String, Object> changedValues) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(COMPONENT + ""="" + BACKUPS)
-                .append(BACKUP + ""=*""));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(COMPONENT + EQUALS + BACKUPS)
+                .append(BACKUP + EQ_WILDCARD));
         crud.save(Names.BACKUP, name, cacheBackupAddress(name), changedValues, metadata, this::showCacheBackup);
     }
 
-    void resetCacheBackup(final String name, final Form<NamedNode> form) {
+    void resetCacheBackup(String name, Form<NamedNode> form) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(COMPONENT + ""="" + BACKUPS)
-                .append(BACKUP + ""=*""));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(COMPONENT + EQUALS + BACKUPS)
+                .append(BACKUP + EQ_WILDCARD));
         crud.reset(Names.BACKUP, name, cacheBackupAddress(name), form, metadata, new FinishReset<NamedNode>(form) {
             @Override
-            public void afterReset(final Form<NamedNode> form) {
+            public void afterReset(Form<NamedNode> form) {
                 showCacheBackup();
             }
         });
     }
 
-    void removeCacheBackup(final String name) {
+    void removeCacheBackup(String name) {
         crud.remove(Names.BACKUP, name, cacheBackupAddress(name), this::showCacheBackup);
     }
 
-    private ResourceAddress cacheBackupAddress(final String name) {
+    private ResourceAddress cacheBackupAddress(String name) {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
-                .append(COMPONENT + ""="" + BACKUPS)
-                .append(BACKUP + ""="" + name)
+                .append(cacheType.resource() + EQUALS + cacheName)
+                .append(COMPONENT + EQUALS + BACKUPS)
+                .append(BACKUP + EQUALS + name)
                 .resolve(statementContext);
     }
 
 
     // ------------------------------------------------------ cache store
 
-    void addCacheStore(final Store store) {
+    void addCacheStore(Store store) {
         if (store.addWithDialog) {
-            Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + ""="" + store.resource));
+            Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + EQUALS + store.resource));
             String id = Ids.build(cacheType.baseId, store.baseId, Ids.ADD);
             Form<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata) // custom form w/o unbound name item
                     .fromRequestProperties()
@@ -367,7 +354,7 @@ void addCacheStore(final Store store) {
 
     void showCacheStore() {
         ResourceAddress address = SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
+                .append(cacheType.resource() + EQUALS + cacheName)
                 .resolve(statementContext);
         crud.readChildren(address, STORE, 2, children -> {
             if (children.isEmpty()) {
@@ -383,30 +370,30 @@ void showCacheStore() {
         });
     }
 
-    void saveCacheStore(final Store store, final Map<String, Object> changedValues) {
-        Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + ""="" + store.resource));
+    void saveCacheStore(Store store, Map<String, Object> changedValues) {
+        Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + EQUALS + store.resource));
         crud.saveSingleton(store.type, cacheStoreAddress(store), changedValues, metadata, this::showCacheStore);
     }
 
-    void resetCacheStore(final Store store, final Form<ModelNode> form) {
-        Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + ""="" + store.resource));
+    void resetCacheStore(Store store, Form<ModelNode> form) {
+        Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + EQUALS + store.resource));
         crud.resetSingleton(store.type, cacheStoreAddress(store), form, metadata, new FinishReset<ModelNode>(form) {
             @Override
-            public void afterReset(final Form<ModelNode> form) {
+            public void afterReset(Form<ModelNode> form) {
                 showCacheStore();
             }
         });
     }
 
-    void switchStore(final Store newStore) {
+    void switchStore(Store newStore) {
         if (newStore != null && newStore != this.store) {
             List<Operation> operations = new ArrayList<>();
             if (this.store != null) {
                 operations.add(new Operation.Builder(cacheStoreAddress(this.store), REMOVE).build());
             }
 
             if (newStore.addWithDialog) {
-                Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + ""="" + newStore.resource));
+                Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + EQUALS + newStore.resource));
                 String id = Ids.build(cacheType.baseId, newStore.baseId, Ids.ADD);
                 Form<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata) // custom form w/o unbound name item
                         .fromRequestProperties()
@@ -448,42 +435,42 @@ String storeSegment() {
         return builder.toString();
     }
 
-    private ResourceAddress cacheStoreAddress(final Store store) {
+    private ResourceAddress cacheStoreAddress(Store store) {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
-                .append(STORE + ""="" + store.resource)
+                .append(cacheType.resource() + EQUALS + cacheName)
+                .append(STORE + EQUALS + store.resource)
                 .resolve(statementContext);
     }
 
 
     // ------------------------------------------------------ write through / behind
 
-    void addWrite(final Write write) {
+    void addWrite(Write write) {
         crud.addSingleton(write.type, writeAddress(write), null, address -> showCacheStore());
     }
 
-    void saveWrite(final Write write, final Map<String, Object> changedValues) {
+    void saveWrite(Write write, Map<String, Object> changedValues) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(STORE + ""="" + store.resource)
-                .append(WRITE + ""="" + write.resource));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(STORE + EQUALS + store.resource)
+                .append(WRITE + EQUALS + write.resource));
         crud.saveSingleton(Names.WRITE_BEHIND, writeAddress(write), changedValues, metadata, this::showCacheStore);
     }
 
-    void resetWrite(final Write write, final Form<ModelNode> form) {
+    void resetWrite(Write write, Form<ModelNode> form) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(STORE + ""="" + store.resource)
-                .append(WRITE + ""="" + write.resource));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(STORE + EQUALS + store.resource)
+                .append(WRITE + EQUALS + write.resource));
         crud.resetSingleton(Names.WRITE_BEHIND, writeAddress(write), form, metadata, new FinishReset<ModelNode>(form) {
             @Override
-            public void afterReset(final Form<ModelNode> form) {
+            public void afterReset(Form<ModelNode> form) {
                 showCacheStore();
             }
         });
     }
 
-    void switchWrite(final Write currentWrite, final Write newWrite) {
+    void switchWrite(Write currentWrite, Write newWrite) {
         List<Operation> operations = new ArrayList<>();
         operations.add(new Operation.Builder(writeAddress(currentWrite), REMOVE).build());
         operations.add(new Operation.Builder(writeAddress(newWrite), ADD).build());
@@ -494,88 +481,88 @@ void switchWrite(final Write currentWrite, final Write newWrite) {
         });
     }
 
-    private ResourceAddress writeAddress(final Write write) {
+    private ResourceAddress writeAddress(Write write) {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
-                .append(STORE + ""="" + store.resource)
-                .append(WRITE + ""="" + write.resource)
+                .append(cacheType.resource() + EQUALS + cacheName)
+                .append(STORE + EQUALS + store.resource)
+                .append(WRITE + EQUALS + write.resource)
                 .resolve(statementContext);
     }
 
 
     // ------------------------------------------------------ tables of jdbc stores
 
-    void saveStoreTable(final Table table, final Map<String, Object> changedValues) {
+    void saveStoreTable(Table table, Map<String, Object> changedValues) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(STORE + ""="" + store.resource)
-                .append(TABLE + ""="" + table.resource));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(STORE + EQUALS + store.resource)
+                .append(TABLE + EQUALS + table.resource));
         crud.saveSingleton(table.type, storeTableAddress(store, table), changedValues, metadata, this::showCacheStore);
     }
 
-    void resetStoreTable(final Table table, final Form<ModelNode> form) {
+    void resetStoreTable(Table table, Form<ModelNode> form) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(STORE + ""="" + store.resource)
-                .append(TABLE + ""="" + table.resource));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(STORE + EQUALS + store.resource)
+                .append(TABLE + EQUALS + table.resource));
         crud.resetSingleton(table.type, storeTableAddress(store, table), form, metadata,
                 new FinishReset<ModelNode>(form) {
                     @Override
-                    public void afterReset(final Form<ModelNode> form) {
+                    public void afterReset(Form<ModelNode> form) {
                         showCacheStore();
                     }
                 });
     }
 
-    private ResourceAddress storeTableAddress(final Store store, final Table table) {
+    private ResourceAddress storeTableAddress(Store store, Table table) {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
-                .append(STORE + ""="" + store.resource)
-                .append(TABLE + ""="" + table.resource)
+                .append(cacheType.resource() + EQUALS + cacheName)
+                .append(STORE + EQUALS + store.resource)
+                .append(TABLE + EQUALS + table.resource)
                 .resolve(statementContext);
     }
 
 
     // ------------------------------------------------------ thread pool
 
-    void addThreadPool(final ThreadPool threadPool) {
+    void addThreadPool(ThreadPool threadPool) {
         crud.addSingleton(threadPool.type, threadPoolAddress(threadPool), null, address -> reload());
     }
 
-    Operation readThreadPool(final ThreadPool threadPool) {
+    Operation readThreadPool(ThreadPool threadPool) {
         return new Operation.Builder(threadPoolAddress(threadPool), READ_RESOURCE_OPERATION).build();
     }
 
-    void saveThreadPool(final ThreadPool threadPool, final Map<String, Object> changedValues) {
+    void saveThreadPool(ThreadPool threadPool, Map<String, Object> changedValues) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(THREAD_POOL + ""="" + threadPool.resource));
+                .append(THREAD_POOL + EQUALS + threadPool.resource));
         crud.saveSingleton(threadPool.type, threadPoolAddress(threadPool), changedValues, metadata, this::reload);
     }
 
-    void resetThreadPool(final ThreadPool threadPool, final Form<ModelNode> form) {
+    void resetThreadPool(ThreadPool threadPool, Form<ModelNode> form) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(THREAD_POOL + ""="" + threadPool.resource));
+                .append(THREAD_POOL + EQUALS + threadPool.resource));
         crud.resetSingleton(threadPool.type, threadPoolAddress(threadPool), form, metadata,
                 new FinishReset<ModelNode>(form) {
                     @Override
-                    public void afterReset(final Form<ModelNode> form) {
+                    public void afterReset(Form<ModelNode> form) {
                         reload();
                     }
                 });
     }
 
-    void removeThreadPool(final ThreadPool threadPool, final Form<ModelNode> form) {
+    void removeThreadPool(ThreadPool threadPool, Form<ModelNode> form) {
         crud.removeSingleton(threadPool.type, threadPoolAddress(threadPool), new FinishRemove<ModelNode>(form) {
             @Override
-            public void afterRemove(final Form<ModelNode> form) {
+            public void afterRemove(Form<ModelNode> form) {
                 reload();
             }
         });
     }
 
-    private ResourceAddress threadPoolAddress(final ThreadPool threadPool) {
+    private ResourceAddress threadPoolAddress(ThreadPool threadPool) {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(THREAD_POOL + ""="" + threadPool.resource)
+                .append(THREAD_POOL + EQUALS + threadPool.resource)
                 .resolve(statementContext);
     }
 
@@ -586,24 +573,43 @@ void addJgroups() {
         crud.addSingleton(Names.JGROUPS, jgroupsAddress(), null, address -> reload());
     }
 
-    void saveJgroups(final Map<String, Object> changedValues) {
-        Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE.append(TRANSPORT + ""="" + JGROUPS));
+    void saveJgroups(Map<String, Object> changedValues) {
+        Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE.append(TRANSPORT + EQUALS + JGROUPS));
         crud.saveSingleton(Names.JGROUPS, jgroupsAddress(), changedValues, metadata, this::reload);
     }
 
-    void resetJgroups(final Form<ModelNode> form) {
-        Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE.append(TRANSPORT + ""="" + JGROUPS));
+    void resetJgroups(Form<ModelNode> form) {
+        Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE.append(TRANSPORT + EQUALS + JGROUPS));
         crud.resetSingleton(Names.JGROUPS, jgroupsAddress(), form, metadata, new FinishReset<ModelNode>(form) {
             @Override
-            public void afterReset(final Form<ModelNode> form) {
+            public void afterReset(Form<ModelNode> form) {
                 reload();
             }
         });
     }
 
     private ResourceAddress jgroupsAddress() {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(TRANSPORT + ""="" + JGROUPS)
+                .append(TRANSPORT + EQUALS + JGROUPS)
                 .resolve(statementContext);
     }
+
+
+    // ------------------------------------------------------ inner classes
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @Requires({CACHE_CONTAINER_ADDRESS, DISTRIBUTED_CACHE_ADDRESS, INVALIDATION_CACHE_ADDRESS, LOCAL_CACHE_ADDRESS,
+            REPLICATED_CACHE_ADDRESS, THREAD_POOL_ADDRESS, TRANSPORT_JGROUPS_ADDRESS})
+    @NameToken(NameTokens.CACHE_CONTAINER)
+    public interface MyProxy extends ProxyPlace<CacheContainerPresenter> {
+    }
+
+    public interface MyView extends HalView, HasPresenter<CacheContainerPresenter> {
+        void update(CacheContainer cacheContainer, boolean jgroups);
+        void updateCacheBackups(Cache cache, List<NamedNode> backups);
+        void updateCacheStore(Cache cache, List<Property> stores);
+    }
+    // @formatter:on
 }",2017-10-16T13:25:42Z,344
"@@ -56,37 +56,6 @@
  */
 class StoreElement implements IsElement<HTMLElement>, Attachable, HasPresenter<CacheContainerPresenter> {
 
-    private static final class StoreTable {
-
-        final Store store;
-        final Table table;
-
-        private StoreTable(final Store store, final Table table) {
-            this.store = store;
-            this.table = table;
-        }
-
-        @Override
-        public boolean equals(final Object o) {
-            if (this == o) { return true; }
-            if (!(o instanceof StoreTable)) { return false; }
-
-            StoreTable that = (StoreTable) o;
-
-            //noinspection SimplifiableIfStatement
-            if (store != that.store) { return false; }
-            return table == that.table;
-        }
-
-        @Override
-        public int hashCode() {
-            int result = store.hashCode();
-            result = 31 * result + table.hashCode();
-            return result;
-        }
-    }
-
-
     private final EmptyState emptyState;
     private final HTMLElement headerForm;
     private final String selectStoreId;
@@ -286,4 +255,40 @@ private void formMode(Store store) {
         Elements.setVisible(headerForm, true);
         tabs.forEach((s, t) -> Elements.setVisible(t.asElement(), s == store));
     }
+
+
+    private static final class StoreTable {
+
+        final Store store;
+        final Table table;
+
+        private StoreTable(final Store store, final Table table) {
+            this.store = store;
+            this.table = table;
+        }
+
+        @Override
+        public boolean equals(final Object o) {
+            if (this == o) {
+                return true;
+            }
+            if (!(o instanceof StoreTable)) {
+                return false;
+            }
+
+            StoreTable that = (StoreTable) o;
+            //noinspection SimplifiableIfStatement
+            if (store != that.store) {
+                return false;
+            }
+            return table == that.table;
+        }
+
+        @Override
+        public int hashCode() {
+            int result = store.hashCode();
+            result = 31 * result + table.hashCode();
+            return result;
+        }
+    }
 }",2017-10-16T13:25:42Z,300
"@@ -126,6 +126,8 @@ public static HaPolicy fromResourceName(String resourceName) {
             case ModelDescriptionConstants.SHARED_STORE_SLAVE:
                 result = SHARED_STORE_SLAVE;
                 break;
+            default:
+                break;
         }
         return result;
     }",2017-10-16T13:25:42Z,345
"@@ -40,18 +40,6 @@ public class ModclusterPresenter
         extends MbuiPresenter<ModclusterPresenter.MyView, ModclusterPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    // @formatter:off
-    @ProxyCodeSplit
-    @Requires(ROOT_ADDRESS)
-    @NameToken(NameTokens.MODCLUSTER)
-    public interface MyProxy extends ProxyPlace<ModclusterPresenter> {}
-
-    public interface MyView extends MbuiView<ModclusterPresenter> {
-        void updateConfiguration(ModelNode payload);
-    }
-    // @formatter:on
-
-
     static final String ROOT_ADDRESS = ""/{selected.profile}/subsystem=modcluster/mod-cluster-config=configuration"";
     private static final AddressTemplate ROOT_TEMPLATE = AddressTemplate.of(ROOT_ADDRESS);
 
@@ -60,13 +48,13 @@ public interface MyView extends MbuiView<ModclusterPresenter> {
     private final StatementContext statementContext;
 
     @Inject
-    public ModclusterPresenter(final EventBus eventBus,
-            final MyView view,
-            final MyProxy myProxy,
-            final Finder finder,
-            final CrudOperations crud,
-            final FinderPathFactory finderPathFactory,
-            final StatementContext statementContext) {
+    public ModclusterPresenter(EventBus eventBus,
+            MyView view,
+            MyProxy myProxy,
+            Finder finder,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext) {
         super(eventBus, view, myProxy, finder);
         this.crud = crud;
         this.finderPathFactory = finderPathFactory;
@@ -93,4 +81,17 @@ public FinderPath finderPath() {
     protected void reload() {
         crud.read(ROOT_TEMPLATE, 2, result -> getView().updateConfiguration(result));
     }
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @Requires(ROOT_ADDRESS)
+    @NameToken(NameTokens.MODCLUSTER)
+    public interface MyProxy extends ProxyPlace<ModclusterPresenter> {
+    }
+
+    public interface MyView extends MbuiView<ModclusterPresenter> {
+        void updateConfiguration(ModelNode payload);
+    }
+    // @formatter:on
 }",2017-10-16T13:25:42Z,308
"@@ -41,17 +41,6 @@ public class RequestControllerPresenter
         extends MbuiPresenter<RequestControllerPresenter.MyView, RequestControllerPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    // @formatter:off
-    @ProxyCodeSplit
-    @Requires(ROOT_ADDRESS)
-    @NameToken(NameTokens.REQUEST_CONTROLLER)
-    public interface MyProxy extends ProxyPlace<RequestControllerPresenter> {}
-
-    public interface MyView extends MbuiView<RequestControllerPresenter> {
-        void update(ModelNode payload);
-    }
-    // @formatter:on
-
     private static final String ROOT_ADDRESS = ""/{selected.profile}/subsystem=request-controller"";
     private static final AddressTemplate ROOT_TEMPLATE = AddressTemplate.of(ROOT_ADDRESS);
 
@@ -60,13 +49,13 @@ public interface MyView extends MbuiView<RequestControllerPresenter> {
     private final StatementContext statementContext;
 
     @Inject
-    public RequestControllerPresenter(final EventBus eventBus,
-            final RequestControllerPresenter.MyView view,
-            final RequestControllerPresenter.MyProxy proxy,
-            final Finder finder,
-            final CrudOperations crud,
-            final FinderPathFactory finderPathFactory,
-            final StatementContext statementContext) {
+    public RequestControllerPresenter(EventBus eventBus,
+            RequestControllerPresenter.MyView view,
+            RequestControllerPresenter.MyProxy proxy,
+            Finder finder,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext) {
         super(eventBus, view, proxy, finder);
         this.crud = crud;
         this.finderPathFactory = finderPathFactory;
@@ -93,4 +82,17 @@ public FinderPath finderPath() {
     protected void reload() {
         crud.readRecursive(ROOT_TEMPLATE, result -> getView().update(result));
     }
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @Requires(ROOT_ADDRESS)
+    @NameToken(NameTokens.REQUEST_CONTROLLER)
+    public interface MyProxy extends ProxyPlace<RequestControllerPresenter> {
+    }
+
+    public interface MyView extends MbuiView<RequestControllerPresenter> {
+        void update(ModelNode payload);
+    }
+    // @formatter:on
 }",2017-10-16T13:25:42Z,346
"@@ -26,18 +26,6 @@
 
 class ResourceAdapter extends NamedNode {
 
-    enum AdapterType {
-        ARCHIVE(Names.ARCHIVE.toLowerCase()), MODULE(Names.MODULE.toLowerCase()), UNKNOWN(Names.NOT_AVAILABLE);
-
-        private final String text;
-
-        AdapterType(final String text) {this.text = text;}
-
-        public String text() {
-            return text;
-        }
-    }
-
     ResourceAdapter(final Property property) {
         super(property);
     }
@@ -66,5 +54,20 @@ String getArchive() {
     String getModule() {
         return hasDefined(MODULE) ? get(MODULE).asString() : null;
     }
+
+
+    enum AdapterType {
+        ARCHIVE(Names.ARCHIVE.toLowerCase()), MODULE(Names.MODULE.toLowerCase()), UNKNOWN(Names.NOT_AVAILABLE);
+
+        private final String text;
+
+        AdapterType(final String text) {
+            this.text = text;
+        }
+
+        public String text() {
+            return text;
+        }
+    }
 }
 ",2017-10-16T13:25:42Z,347
"@@ -45,31 +45,19 @@ public class ResourceAdapterPresenter
         extends MbuiPresenter<ResourceAdapterPresenter.MyView, ResourceAdapterPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    // @formatter:off
-    @ProxyCodeSplit
-    @NameToken(NameTokens.RESOURCE_ADAPTER)
-    @Requires(AddressTemplates.RESOURCE_ADAPTER_ADDRESS)
-    public interface MyProxy extends ProxyPlace<ResourceAdapterPresenter> {}
-
-    public interface MyView extends MbuiView<ResourceAdapterPresenter> {
-        void update(ResourceAdapter resourceAdapter);
-    }
-    // @formatter:on
-
-
     private final CrudOperations crud;
     private final FinderPathFactory finderPathFactory;
     private final StatementContext statementContext;
     private String resourceAdapter;
 
     @Inject
-    public ResourceAdapterPresenter(final EventBus eventBus,
-            final MyView view,
-            final MyProxy myProxy,
-            final Finder finder,
-            final CrudOperations crud,
-            final FinderPathFactory finderPathFactory,
-            final StatementContext statementContext) {
+    public ResourceAdapterPresenter(EventBus eventBus,
+            MyView view,
+            MyProxy myProxy,
+            Finder finder,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext) {
         super(eventBus, view, myProxy, finder);
         this.crud = crud;
         this.finderPathFactory = finderPathFactory;
@@ -83,7 +71,7 @@ protected void onBind() {
     }
 
     @Override
-    public void prepareFromRequest(final PlaceRequest request) {
+    public void prepareFromRequest(PlaceRequest request) {
         super.prepareFromRequest(request);
         resourceAdapter = request.getParameter(NAME, null);
     }
@@ -109,4 +97,17 @@ protected void reload() {
         ResourceAddress address = SELECTED_RESOURCE_ADAPTER_TEMPLATE.resolve(statementContext);
         crud.readRecursive(address, result -> getView().update(new ResourceAdapter(resourceAdapter, result)));
     }
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @NameToken(NameTokens.RESOURCE_ADAPTER)
+    @Requires(AddressTemplates.RESOURCE_ADAPTER_ADDRESS)
+    public interface MyProxy extends ProxyPlace<ResourceAdapterPresenter> {
+    }
+
+    public interface MyView extends MbuiView<ResourceAdapterPresenter> {
+        void update(ResourceAdapter resourceAdapter);
+    }
+    // @formatter:on
 }",2017-10-16T13:25:42Z,348
"@@ -64,21 +64,10 @@ public class TransactionPresenter
         extends MbuiPresenter<TransactionPresenter.MyView, TransactionPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    // @formatter:off
-    @ProxyCodeSplit
-    @NameToken(NameTokens.TRANSACTIONS)
-    @Requires(TRANSACTIONS_SUBSYSTEM_ADDRESS)
-    public interface MyProxy extends ProxyPlace<TransactionPresenter> {}
-
-    public interface MyView extends MbuiView<TransactionPresenter> {
-        void updateConfiguration(ModelNode conf);
-    }
-    // @formatter:on
-
     private static final String PROCESS_ID_UUID = ""process-id-uuid"";
     private static final String PROCESS_ID_SOCKET_BINDING = ""process-id-socket-binding"";
     private static final String PROCESS_ID_SOCKET_MAX_PORTS = ""process-id-socket-max-ports"";
-    private final static ValidationResult invalid = ValidationResult
+    private static final ValidationResult invalid = ValidationResult
             .invalid(""Validation error, see error messages below."");
 
     private final CrudOperations crud;
@@ -89,16 +78,16 @@ public interface MyView extends MbuiView<TransactionPresenter> {
     private final Resources resources;
 
     @Inject
-    public TransactionPresenter(final EventBus eventBus,
-            final MyView view,
-            final MyProxy proxy,
-            final Finder finder,
-            final CrudOperations crud,
-            final FinderPathFactory finderPathFactory,
-            final StatementContext statementContext,
-            final Dispatcher dispatcher,
-            final MetadataRegistry metadataRegistry,
-            final Resources resources) {
+    public TransactionPresenter(EventBus eventBus,
+            MyView view,
+            MyProxy proxy,
+            Finder finder,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext,
+            Dispatcher dispatcher,
+            MetadataRegistry metadataRegistry,
+            Resources resources) {
         super(eventBus, view, proxy, finder);
         this.crud = crud;
         this.finderPathFactory = finderPathFactory;
@@ -177,7 +166,7 @@ void resetProcessForm(Form<ModelNode> form) {
         ResourceAddress address = TRANSACTIONS_SUBSYSTEM_TEMPLATE.resolve(statementContext);
         crud.resetSingleton(""Process"", address, form, metadata, new FinishReset<ModelNode>(form) {
             @Override
-            public void afterReset(final Form<ModelNode> form) {
+            public void afterReset(Form<ModelNode> form) {
                 reload();
             }
         });
@@ -321,4 +310,17 @@ FormValidation<ModelNode> getProcessFormValidation() {
     FormValidation<ModelNode> getJdbcFormValidation() {
         return jdbcFormValidation;
     }
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @NameToken(NameTokens.TRANSACTIONS)
+    @Requires(TRANSACTIONS_SUBSYSTEM_ADDRESS)
+    public interface MyProxy extends ProxyPlace<TransactionPresenter> {
+    }
+
+    public interface MyView extends MbuiView<TransactionPresenter> {
+        void updateConfiguration(ModelNode conf);
+    }
+    // @formatter:on
 }",2017-10-16T13:25:42Z,3
"@@ -101,6 +101,8 @@ public String filter(String resource) {
                         return handlerChainType.resource;
                     case HANDLER_CHAIN_NAME:
                         return handlerChain != null ? handlerChain.getName() : null;
+                    default:
+                        break;
                 }
                 return null;
             }
@@ -346,7 +348,8 @@ private void updateHandlers(ModelNode modelNode) {
     @ProxyCodeSplit
     @NameToken(NameTokens.WEBSERVICES)
     @Requires(AddressTemplates.WEBSERVICES_ADDRESS)
-    public interface MyProxy extends ProxyPlace<WebservicePresenter> {}
+    public interface MyProxy extends ProxyPlace<WebservicePresenter> {
+    }
 
     public interface MyView extends HalView, HasPresenter<WebservicePresenter> {
         void update(ModelNode payload);",2017-10-16T13:25:42Z,303
"@@ -32,6 +32,7 @@ interface AddressTemplates {
     String REPLICATED_CACHE_ADDRESS = CACHE_CONTAINER_ADDRESS + ""/replicated-cache=*"";
 
     String TRANSPORT_JGROUPS_ADDRESS = CACHE_CONTAINER_ADDRESS + ""/transport=jgroups"";
+    String THREAD_POOL_ADDRESS = CACHE_CONTAINER_ADDRESS + ""/thread-pool=*"";
 
     AddressTemplate INFINISPAN_SUBSYSTEM_TEMPLATE = AddressTemplate.of(INFINISPAN_SUBSYSTEM_ADDRESS);
 ",2017-09-21T19:09:49Z,369
"@@ -31,17 +31,19 @@
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.spi.AsyncColumn;
+import org.jboss.hal.spi.Requires;
 
 import static java.util.Arrays.asList;
 import static java.util.stream.Collectors.toList;
+import static org.jboss.hal.client.configuration.subsystem.infinispan.AddressTemplates.CACHE_CONTAINER_ADDRESS;
 import static org.jboss.hal.client.configuration.subsystem.infinispan.AddressTemplates.CACHE_CONTAINER_TEMPLATE;
 import static org.jboss.hal.client.configuration.subsystem.infinispan.AddressTemplates.INFINISPAN_SUBSYSTEM_TEMPLATE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.CACHE_CONTAINER;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.DEFAULT_CACHE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.NAME;
 
 @AsyncColumn(Ids.CACHE_CONTAINER)
-// TODO Add @Requires to make the column add action work with RBAC
+@Requires(value = {CACHE_CONTAINER_ADDRESS}, recursive = false)
 public class CacheContainerColumn extends FinderColumn<CacheContainer> {
 
     @Inject",2017-09-21T19:09:49Z,370
"@@ -38,14 +38,14 @@
 import org.jboss.hal.core.mvp.HalView;
 import org.jboss.hal.core.mvp.HasPresenter;
 import org.jboss.hal.core.mvp.SupportsExpertMode;
-import org.jboss.hal.dmr.ModelNode;
-import org.jboss.hal.dmr.Property;
-import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.dmr.Composite;
 import org.jboss.hal.dmr.CompositeResult;
+import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.NamedNode;
 import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.Property;
 import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.SelectionAwareStatementContext;
@@ -58,9 +58,7 @@
 import org.jboss.hal.spi.MessageEvent;
 import org.jboss.hal.spi.Requires;
 
-import static org.jboss.hal.client.configuration.subsystem.infinispan.AddressTemplates.CACHE_CONTAINER_ADDRESS;
-import static org.jboss.hal.client.configuration.subsystem.infinispan.AddressTemplates.CACHE_CONTAINER_TEMPLATE;
-import static org.jboss.hal.client.configuration.subsystem.infinispan.AddressTemplates.SELECTED_CACHE_CONTAINER_TEMPLATE;
+import static org.jboss.hal.client.configuration.subsystem.infinispan.AddressTemplates.*;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
 
@@ -70,7 +68,8 @@ public class CacheContainerPresenter
 
     // @formatter:off
     @ProxyCodeSplit
-    @Requires(CACHE_CONTAINER_ADDRESS)
+    @Requires({CACHE_CONTAINER_ADDRESS, DISTRIBUTED_CACHE_ADDRESS, INVALIDATION_CACHE_ADDRESS, LOCAL_CACHE_ADDRESS,
+            REPLICATED_CACHE_ADDRESS, THREAD_POOL_ADDRESS, TRANSPORT_JGROUPS_ADDRESS})
     @NameToken(NameTokens.CACHE_CONTAINER)
     public interface MyProxy extends ProxyPlace<CacheContainerPresenter> {}
 ",2017-09-21T19:09:49Z,344
"@@ -17,6 +17,7 @@
 
 import javax.inject.Inject;
 
+import com.google.gwt.core.client.GWT;
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.client.PresenterWidget;
 import com.gwtplatform.mvp.client.proxy.PlaceManager;
@@ -288,7 +289,7 @@ void clearMessages() {
     }
 
     void reconnect() {
-        String url = Endpoints.getBaseUrl() + ""?"" + EndpointManager.CONNECT_PARAMETER;
+        String url = GWT.getModuleBaseURL() + ""?"" + EndpointManager.CONNECT_PARAMETER;
         window.location.assign(url);
     }
 ",2017-07-27T10:35:37Z,95
"@@ -15,14 +15,17 @@
  */
 package org.jboss.hal.client.skeleton;
 
+import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import javax.annotation.PostConstruct;
 
 import com.google.common.base.Strings;
 import com.google.gwt.safehtml.shared.SafeHtmlUtils;
+import com.google.web.bindery.event.shared.HandlerRegistration;
 import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
 import elemental2.dom.Element;
 import elemental2.dom.HTMLElement;
@@ -59,6 +62,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import static java.util.Arrays.asList;
 import static java.util.stream.Collectors.joining;
 import static java.util.stream.StreamSupport.stream;
 import static org.jboss.gwt.elemento.core.Elements.a;
@@ -101,6 +105,9 @@ public static HeaderView create(final Places places, final AccessControl ac, fin
     private HeaderPresenter presenter;
     private MessagePanel messagePanel;
     private MessageSink messageSink;
+    private HandlerRegistration switchModeHandler;
+    private List<HandlerRegistration> handlers;
+    private List<HandlerRegistration> breadcrumbHandlers;
 
     @DataElement HTMLElement logoFirst;
     @DataElement HTMLElement logoLast;
@@ -170,19 +177,35 @@ void init() {
         tlc.put(NameTokens.MANAGEMENT,      (HTMLElement) root.querySelector(""#"" + Ids.TLC_MANAGEMENT));
         // @formatter:on
 
+        handlers = new ArrayList<>();
+        breadcrumbHandlers = new ArrayList<>();
         for (Map.Entry<String, HTMLElement> entry : tlc.entrySet()) {
-            bind(entry.getValue(), click, event -> {
+            handlers.add(bind(entry.getValue(), click, event -> {
                 if (tlcPlaceRequests.containsKey(entry.getKey())) {
                     presenter.goTo(tlcPlaceRequests.get(entry.getKey()));
                 }
-            });
+            }));
         }
-        bind(logoLink, click, event -> presenter.goTo(NameTokens.HOMEPAGE));
-        bind(backLink, click, event -> presenter.goTo(backPlaceRequest));
-        bind(reloadLink, click, event -> presenter.reload());
-        bind(messages, click, event -> messageSink.asElement().classList.toggle(hide));
-        bind(logout, click, event -> presenter.logout());
-        bind(reconnect, click, event -> presenter.reconnect());
+        handlers.addAll(asList(
+                bind(logoLink, click, event -> presenter.goTo(NameTokens.HOMEPAGE)),
+                bind(backLink, click, event -> presenter.goTo(backPlaceRequest)),
+                bind(reloadLink, click, event -> presenter.reload()),
+                bind(messages, click, event -> messageSink.asElement().classList.toggle(hide)),
+                bind(logout, click, event -> presenter.logout()),
+                bind(reconnect, click, event -> presenter.reconnect())));
+    }
+
+    @Override
+    public void detach() {
+        super.detach();
+        for (HandlerRegistration handler : breadcrumbHandlers) {
+            handler.removeHandler();
+        }
+        breadcrumbHandlers.clear();
+        for (HandlerRegistration handler : handlers) {
+            handler.removeHandler();
+        }
+        handlers.clear();
     }
 
     @Override
@@ -379,6 +402,11 @@ public void updateBreadcrumb(final FinderContext finderContext) {
         clearBreadcrumb();
         FinderPath currentPath = new FinderPath();
 
+        for (HandlerRegistration handler : breadcrumbHandlers) {
+            handler.removeHandler();
+        }
+        breadcrumbHandlers.clear();
+
         for (Iterator<FinderSegment> iterator = finderContext.getPath().iterator(); iterator.hasNext(); ) {
             FinderSegment<Object> segment = iterator.next();
             if (segment.getColumnId() == null || segment.getItemId() == null) {
@@ -423,7 +451,7 @@ public void updateBreadcrumb(final FinderContext finderContext) {
                         .aria(UIConstants.EXPANDED, UIConstants.FALSE)
                         .attr(UIConstants.ROLE, UIConstants.BUTTON)
                         .asElement());
-                bind(a, click, event -> {
+                breadcrumbHandlers.add(bind(a, click, event -> {
                     Element ul = a.nextElementSibling;
                     segment.dropdown(finderContext, items -> {
                         Elements.removeChildrenFrom(ul);
@@ -443,7 +471,7 @@ public void updateBreadcrumb(final FinderContext finderContext) {
                             }
                         }
                     });
-                });
+                }));
 
                 String breadcrumbValue = segment.getItemTitle();
                 if (breadcrumbValue.length() > MAX_BREADCRUMB_VALUE_LENGTH) {
@@ -524,7 +552,10 @@ private void clearBreadcrumb() {
 
     @Override
     public void showExpertMode(final ResourceAddress address) {
-        bind(switchModeLink, click, event -> presenter.switchToExpertMode(address));
+        if (switchModeHandler != null) {
+            switchModeHandler.removeHandler();
+        }
+        switchModeHandler = bind(switchModeLink, click, event -> presenter.switchToExpertMode(address));
         switchModeLink.title = resources().constants().expertMode();
         switchModeIcon.className = fontAwesome(""sitemap"", large);
         Elements.setVisible(switchModeLink, true);
@@ -538,7 +569,10 @@ public void showBackToNormalMode() {
             finderContext.reset(disconnected);
             updateBreadcrumb(finderContext);
         }
-        bind(switchModeLink, click, event -> presenter.backToNormalMode());
+        if (switchModeHandler != null) {
+            switchModeHandler.removeHandler();
+        }
+        switchModeHandler = bind(switchModeLink, click, event -> presenter.backToNormalMode());
         switchModeLink.title = resources().constants().backToNormalMode();
         switchModeIcon.className = fontAwesome(""th-list"", large);
         Elements.setVisible(switchModeLink, true);",2017-07-27T10:35:37Z,98
"@@ -27,7 +27,7 @@
     <script src=""../../public/js/external.js""></script>
 </head>
 <body>
-<nav data-element=""header"" class=""navbar navbar-default navbar-pf navbar-fixed-top"" role=""navigation"">
+<nav data-element=""header"" class=""navbar navbar-default navbar-pf navbar-fixed-top"">
     <div class=""navbar-header"">
         <button type=""button"" class=""navbar-toggle"" data-toggle=""collapse"" data-target="".hal-header-collapse"">
             <span class=""sr-only"">{{resources().constants().toggleNavigation()}}</span>
@@ -69,7 +69,7 @@
             </li>
             <li class=""dropdown"" data-element=""connectedToContainer"">
                 <a class=""clickable dropdown-toggle"" data-toggle=""dropdown"">
-                    <span class=""fa fa-globe""></span>
+                    <span class=""fa fa-plug""></span>
                     <b class=""caret""></b>
                 </a>
                 <ul class=""dropdown-menu"">",2017-07-27T10:35:37Z,162
"@@ -160,6 +160,7 @@
 import org.jboss.hal.client.tools.MacroEditorView;
 import org.jboss.hal.client.tools.ModelBrowserPresenter;
 import org.jboss.hal.client.tools.ModelBrowserView;
+import org.jboss.hal.core.ExceptionHandler;
 import org.jboss.hal.core.mvp.HalPlaceManager;
 import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.spi.GinModule;",2018-02-01T16:28:42Z,44
"@@ -20,10 +20,10 @@
 import com.gwtplatform.mvp.client.Bootstrapper;
 import com.gwtplatform.mvp.client.proxy.PlaceManager;
 import elemental2.dom.Event;
-import org.jboss.hal.client.ExceptionHandler;
 import org.jboss.hal.client.bootstrap.endpoint.EndpointManager;
 import org.jboss.hal.client.bootstrap.tasks.BootstrapTasks;
 import org.jboss.hal.config.Endpoints;
+import org.jboss.hal.core.ExceptionHandler;
 import org.jetbrains.annotations.NonNls;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;",2018-02-01T16:28:42Z,22
"@@ -15,13 +15,29 @@
  */
 package org.jboss.hal.client.bootstrap;
 
+import com.google.gwt.core.client.GWT;
 import com.gwtplatform.mvp.client.PreBootstrapper;
-import org.jboss.hal.client.ExceptionHandler;
+import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.hal.config.Endpoints;
+import org.jboss.hal.resources.Names;
+import org.jetbrains.annotations.NonNls;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import static elemental2.dom.DomGlobal.document;
 
 public class HalPreBootstrapper implements PreBootstrapper {
 
+    @NonNls private static final Logger logger = LoggerFactory.getLogger(HalPreBootstrapper.class);
+
     @Override
     public void onPreBootstrap() {
-        ExceptionHandler.beforeBootstrap();
+        GWT.setUncaughtExceptionHandler(e -> {
+            LoadingPanel.get().off();
+            String errorMessage = e != null ? e.getMessage() : Names.NOT_AVAILABLE;
+            logger.error(""Uncaught bootstrap error: {}"", errorMessage);
+            Elements.removeChildrenFrom(document.body);
+            document.body.appendChild(BootstrapFailed.create(errorMessage, Endpoints.INSTANCE).asElement());
+        });
     }
 }",2018-02-01T16:28:42Z,73
"@@ -58,6 +58,12 @@ public class Core {
     @JsIgnore
     public static Core INSTANCE;
 
+    @JsIgnore
+    public static void setPendingLifecycleAction(boolean value) {
+        Dispatcher.setPendingLifecycleAction(value);
+        ExceptionHandler.setPendingLifecycleAction(value);
+    }
+
     private final CrudOperations crud;
     private final Dispatcher dispatcher;
     private final Endpoints endpoints;
@@ -71,16 +77,16 @@ public class Core {
 
     @Inject
     @JsIgnore
-    public Core(final CrudOperations crud,
-            final Dispatcher dispatcher,
-            final Endpoints endpoints,
-            final Environment environment,
-            final EventBus eventBus,
-            final ExtensionRegistry extensionRegistry,
-            final MetadataProcessor metadataProcessor,
-            final MetadataRegistry metadataRegistry,
-            final StatementContext statementContext,
-            final TableButtonFactory tableButtonFactory) {
+    public Core(CrudOperations crud,
+            Dispatcher dispatcher,
+            Endpoints endpoints,
+            Environment environment,
+            EventBus eventBus,
+            ExtensionRegistry extensionRegistry,
+            MetadataProcessor metadataProcessor,
+            MetadataRegistry metadataRegistry,
+            StatementContext statementContext,
+            TableButtonFactory tableButtonFactory) {
         this.crud = crud;
         this.dispatcher = dispatcher;
         this.endpoints = endpoints;
@@ -295,7 +301,7 @@ public void jsSuccess(String message) {
      */
     @JsMethod(name = ""table"")
     @EsReturn(""TableBuilder"")
-    public ModelNodeTable.Builder<ModelNode> jsTable(final Object meta) {
+    public ModelNodeTable.Builder<ModelNode> jsTable(Object meta) {
         return new ModelNodeTable.Builder<>(Ids.build(Ids.uniqueId(), Ids.TAB), jsMetadata(""table"", meta));
     }
 ",2018-02-01T16:28:42Z,203
"@@ -13,17 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.jboss.hal.client;
+package org.jboss.hal.core;
 
 import javax.inject.Inject;
 
 import com.google.gwt.core.client.GWT;
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.client.proxy.PlaceManager;
 import org.jboss.gwt.elemento.core.Elements;
-import org.jboss.hal.client.bootstrap.BootstrapFailed;
-import org.jboss.hal.client.bootstrap.LoadingPanel;
-import org.jboss.hal.config.Endpoints;
 import org.jboss.hal.flow.Progress;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
@@ -40,17 +37,13 @@
 public class ExceptionHandler {
 
     @NonNls private static final Logger logger = LoggerFactory.getLogger(ExceptionHandler.class);
+    private static boolean pendingLifecycleAction = false;
 
-    public static void beforeBootstrap() {
-        GWT.setUncaughtExceptionHandler(e -> {
-            LoadingPanel.get().off();
-            String errorMessage = e != null ? e.getMessage() : Names.NOT_AVAILABLE;
-            logger.error(""Uncaught bootstrap error: {}"", errorMessage);
-            document.body.appendChild(BootstrapFailed.create(errorMessage, Endpoints.INSTANCE).asElement());
-        });
+    public static void setPendingLifecycleAction(boolean value) {
+        pendingLifecycleAction = value;
+        logger.debug(""ExceptionHandler.pendingLifecycleAction = {}"", pendingLifecycleAction);
     }
 
-
     private final EventBus eventBus;
     private final PlaceManager placeManager;
     private final Progress progress;
@@ -69,13 +62,15 @@ public ExceptionHandler(EventBus eventBus,
 
     public void afterBootstrap() {
         GWT.setUncaughtExceptionHandler(e -> {
-            String errorMessage = e != null ? e.getMessage() : Names.NOT_AVAILABLE;
-            logger.error(""Uncaught exception: {}"", errorMessage);
-            placeManager.unlock();
-            progress.finish();
-            stopProgress();
-            MessageEvent.fire(eventBus,
-                    Message.error(resources.messages().unknownError(), errorMessage));
+            if (!pendingLifecycleAction) {
+                String errorMessage = e != null ? e.getMessage() : Names.NOT_AVAILABLE;
+                logger.error(""Uncaught exception: {}"", errorMessage);
+                placeManager.unlock();
+                progress.finish();
+                stopProgress();
+                MessageEvent.fire(eventBus,
+                        Message.error(resources.messages().unknownError(), errorMessage));
+            }
         });
     }
 ",2018-02-01T16:28:42Z,2
"@@ -29,6 +29,7 @@
 import org.jboss.hal.ballroom.dialog.Dialog;
 import org.jboss.hal.ballroom.dialog.DialogFactory;
 import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.core.Core;
 import org.jboss.hal.core.mbui.form.OperationFormBuilder;
 import org.jboss.hal.core.runtime.Action;
 import org.jboss.hal.core.runtime.Result;
@@ -148,7 +149,7 @@ public void suspend(ServerGroup serverGroup) {
         if (!startedServers.isEmpty()) {
             metadataProcessor.lookup(serverGroupTemplate(serverGroup), progress.get(), new MetadataCallback() {
                 @Override
-                public void onMetadata(final Metadata metadata) {
+                public void onMetadata(Metadata metadata) {
                     String id = Ids.build(SUSPEND_SERVERS, serverGroup.getName(), Ids.FORM);
                     Form<ModelNode> form = new OperationFormBuilder<>(id, metadata, SUSPEND_SERVERS).build();
 
@@ -186,7 +187,7 @@ public void onMetadata(final Metadata metadata) {
                 }
 
                 @Override
-                public void onError(final Throwable error) {
+                public void onError(Throwable error) {
                     MessageEvent.fire(eventBus,
                             Message.error(resources.messages().metadataError(), error.getMessage()));
                 }
@@ -223,7 +224,7 @@ public void stop(ServerGroup serverGroup) {
         if (!startedServers.isEmpty()) {
             metadataProcessor.lookup(serverGroupTemplate(serverGroup), progress.get(), new MetadataCallback() {
                 @Override
-                public void onMetadata(final Metadata metadata) {
+                public void onMetadata(Metadata metadata) {
                     String id = Ids.build(STOP_SERVERS, serverGroup.getName(), Ids.FORM);
                     Form<ModelNode> form = new OperationFormBuilder<>(id, metadata, STOP_SERVERS)
                             .include(TIMEOUT).build();
@@ -264,7 +265,7 @@ public void onMetadata(final Metadata metadata) {
                 }
 
                 @Override
-                public void onError(final Throwable error) {
+                public void onError(Throwable error) {
                     MessageEvent
                             .fire(eventBus, Message.error(resources.messages().metadataError(), error.getMessage()));
                 }
@@ -353,13 +354,13 @@ private void finish(ServerGroup serverGroup, List<Server> servers, Result result
     }
 
     private void markAsPending(ServerGroup serverGroup) {
-        Dispatcher.setPendingLifecycleAction(true);
+        Core.setPendingLifecycleAction(true);
         pendingServerGroups.put(serverGroup.getName(), serverGroup);
         logger.debug(""Mark server group {} as pending"", serverGroup.getName());
     }
 
     private void clearPending(ServerGroup serverGroup) {
-        Dispatcher.setPendingLifecycleAction(false);
+        Core.setPendingLifecycleAction(false);
         pendingServerGroups.remove(serverGroup.getName());
         logger.debug(""Clear pending state for server group {}"", serverGroup.getName());
     }
@@ -412,8 +413,8 @@ private class ServerGroupTimeoutCallback implements CompletableSubscriber {
         private final List<Server> servers;
         private final SafeHtml successMessage;
 
-        ServerGroupTimeoutCallback(final ServerGroup serverGroup, final List<Server> servers,
-                final SafeHtml successMessage) {
+        ServerGroupTimeoutCallback(ServerGroup serverGroup, List<Server> servers,
+                SafeHtml successMessage) {
             this.serverGroup = serverGroup;
             this.servers = servers;
             this.successMessage = successMessage;
@@ -442,15 +443,15 @@ private class ServerGroupFailedCallback implements Dispatcher.OnFail {
         private final List<Server> servers;
         private final SafeHtml errorMessage;
 
-        ServerGroupFailedCallback(final ServerGroup serverGroup, final List<Server> servers,
-                final SafeHtml errorMessage) {
+        ServerGroupFailedCallback(ServerGroup serverGroup, List<Server> servers,
+                SafeHtml errorMessage) {
             this.serverGroup = serverGroup;
             this.servers = servers;
             this.errorMessage = errorMessage;
         }
 
         @Override
-        public void onFailed(final Operation operation, final String failure) {
+        public void onFailed(Operation operation, String failure) {
             finish(serverGroup, servers, Result.ERROR, Message.error(errorMessage, failure));
         }
     }
@@ -462,14 +463,14 @@ private class ServerGroupExceptionCallback implements Dispatcher.OnError {
         private final List<Server> servers;
         private final SafeHtml errorMessage;
 
-        ServerGroupExceptionCallback(final ServerGroup serverGroup, final List<Server> servers, SafeHtml errorMessage) {
+        ServerGroupExceptionCallback(ServerGroup serverGroup, List<Server> servers, SafeHtml errorMessage) {
             this.serverGroup = serverGroup;
             this.servers = servers;
             this.errorMessage = errorMessage;
         }
 
         @Override
-        public void onException(final Operation operation, final Throwable exception) {
+        public void onException(Operation operation, Throwable exception) {
             finish(serverGroup, servers, Result.ERROR, Message.error(errorMessage, exception.getMessage()));
         }
     }",2018-02-01T16:28:42Z,96
"@@ -28,6 +28,7 @@
 import org.jboss.hal.ballroom.dialog.Dialog;
 import org.jboss.hal.ballroom.dialog.DialogFactory;
 import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.core.Core;
 import org.jboss.hal.core.mbui.form.OperationFormBuilder;
 import org.jboss.hal.core.runtime.Action;
 import org.jboss.hal.core.runtime.Result;
@@ -65,7 +66,7 @@
 public class HostActions {
 
     private static final int RELOAD_TIMEOUT = 10; // seconds w/o servers
-    private static final int RESTART_TIMEOUT = 15; // seconds w/o servers
+    private static final int RESTART_TIMEOUT = 20; // seconds w/o servers
     @NonNls private static final Logger logger = LoggerFactory.getLogger(HostActions.class);
 
     private static AddressTemplate hostTemplate(Host host) {
@@ -100,10 +101,10 @@ public HostActions(EventBus eventBus,
     // ------------------------------------------------------ reload
 
     @SuppressWarnings(""HardCodedStringLiteral"")
-    public void reload(final Host host) {
+    public void reload(Host host) {
         metadataProcessor.lookup(hostTemplate(host), progress.get(), new MetadataCallback() {
             @Override
-            public void onMetadata(final Metadata metadata) {
+            public void onMetadata(Metadata metadata) {
                 Form<ModelNode> form = new OperationFormBuilder<>(
                         Ids.build(RELOAD_HOST, host.getName(), Ids.FORM), metadata, RELOAD)
                         .include(RESTART_SERVERS)
@@ -157,7 +158,7 @@ public void onMetadata(final Metadata metadata) {
             }
 
             @Override
-            public void onError(final Throwable error) {
+            public void onError(Throwable error) {
                 MessageEvent.fire(eventBus,
                         Message.error(resources.messages().metadataError(), error.getMessage()));
             }
@@ -167,14 +168,14 @@ public void onError(final Throwable error) {
 
     // ------------------------------------------------------ restart
 
-    public void restart(final Host host) {
+    public void restart(Host host) {
         SafeHtml question = host.isDomainController()
                 ? resources.messages().restartDomainControllerQuestion(host.getName())
                 : resources.messages().restartHostControllerQuestion(host.getName());
         restart(host, question);
     }
 
-    public void restart(final Host host, SafeHtml question) {
+    public void restart(Host host, SafeHtml question) {
         DialogFactory.showConfirmation(resources.messages().restart(host.getName()), question, () -> {
             // execute the restart with a little delay to ensure the confirmation dialog is closed
             // before the next dialog is opened (only one modal can be open at a time!)
@@ -275,13 +276,13 @@ private void finish(Host host, List<Server> servers, Result result, Message mess
     }
 
     private void markAsPending(Host host) {
-        Dispatcher.setPendingLifecycleAction(true);
+        Core.setPendingLifecycleAction(true);
         pendingHosts.put(host.getName(), host);
         logger.debug(""Mark host {} as pending"", host.getName());
     }
 
     private void clearPending(Host host) {
-        Dispatcher.setPendingLifecycleAction(false);
+        Core.setPendingLifecycleAction(false);
         pendingHosts.remove(host.getName());
         logger.debug(""Clear pending state for host {}"", host.getName());
     }
@@ -324,14 +325,14 @@ private class HostFailedCallback implements Dispatcher.OnFail {
         private final List<Server> servers;
         private final SafeHtml errorMessage;
 
-        HostFailedCallback(final Host host, final List<Server> servers, final SafeHtml errorMessage) {
+        HostFailedCallback(Host host, List<Server> servers, SafeHtml errorMessage) {
             this.host = host;
             this.servers = servers;
             this.errorMessage = errorMessage;
         }
 
         @Override
-        public void onFailed(final Operation operation, final String failure) {
+        public void onFailed(Operation operation, String failure) {
             finish(host, servers, Result.ERROR, Message.error(errorMessage, failure));
         }
     }
@@ -343,14 +344,14 @@ private class HostExceptionCallback implements Dispatcher.OnError {
         private final List<Server> servers;
         private final SafeHtml errorMessage;
 
-        HostExceptionCallback(final Host host, final List<Server> servers, final SafeHtml errorMessage) {
+        HostExceptionCallback(Host host, List<Server> servers, SafeHtml errorMessage) {
             this.host = host;
             this.servers = servers;
             this.errorMessage = errorMessage;
         }
 
         @Override
-        public void onException(final Operation operation, final Throwable exception) {
+        public void onException(Operation operation, Throwable exception) {
             finish(host, servers, Result.ERROR, Message.error(errorMessage, exception.getMessage()));
         }
     }",2018-02-01T16:28:42Z,39
"@@ -39,6 +39,7 @@
 import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.ballroom.form.SingleSelectBoxItem;
 import org.jboss.hal.ballroom.form.TextBoxItem;
+import org.jboss.hal.core.Core;
 import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
 import org.jboss.hal.core.mbui.dialog.NameItem;
 import org.jboss.hal.core.mbui.form.ModelNodeForm;
@@ -361,7 +362,6 @@ private void reloadRestart(Server server, Operation operation, Action action, in
                             .subscribe(new ServerTimeoutCallback(server, action, successMessage)),
                     new ServerFailedCallback(server, errorMessage),
                     new ServerExceptionCallback(server, errorMessage));
-
         });
     }
 
@@ -688,13 +688,13 @@ private void finish(Server server, Result result, Message message) {
     }
 
     public void markAsPending(Server server) {
-        Dispatcher.setPendingLifecycleAction(true);
+        Core.setPendingLifecycleAction(true);
         pendingServers.put(Ids.hostServer(server.getHost(), server.getName()), server);
         logger.debug(""Mark server {} as pending"", server.getName());
     }
 
     public void clearPending(Server server) {
-        Dispatcher.setPendingLifecycleAction(false);
+        Core.setPendingLifecycleAction(false);
         pendingServers.remove(Ids.hostServer(server.getHost(), server.getName()));
         logger.debug(""Clear pending state for server {}"", server.getName());
     }",2018-02-01T16:28:42Z,93
"@@ -15,13 +15,13 @@
  */
 package org.jboss.hal.dmr.dispatch;
 
-import java.util.concurrent.TimeoutException;
 import java.util.function.Predicate;
 
 import org.jboss.hal.dmr.Composite;
 import org.jboss.hal.dmr.CompositeResult;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Operation;
+import org.jetbrains.annotations.NonNls;
 import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -31,15 +31,18 @@
 
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static java.util.concurrent.TimeUnit.SECONDS;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.FAILED;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.FAILURE_DESCRIPTION;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.OUTCOME;
 
 /** Executes a DMR operation until a specific condition is met or a timeout occurs. */
-public interface TimeoutHandler {
+public class TimeoutHandler {
 
-    int INTERVAL = 500;
-    Logger logger = LoggerFactory.getLogger(TimeoutHandler.class);
+    private static int INTERVAL = 500;
+    @NonNls private static Logger logger = LoggerFactory.getLogger(TimeoutHandler.class);
 
     /** Executes the operation until it successfully returns. */
-    static Completable repeatUntilTimeout(Dispatcher dispatcher, int timeout, Operation operation) {
+    public static Completable repeatUntilTimeout(Dispatcher dispatcher, int timeout, Operation operation) {
         return operation instanceof Composite
                 ? TimeoutHandler.repeatCompositeUntil(dispatcher, timeout, (Composite) operation, null)
                 : TimeoutHandler.repeatOperationUntil(dispatcher, timeout, operation, null);
@@ -50,56 +53,63 @@ static Completable repeatUntilTimeout(Dispatcher dispatcher, int timeout, Operat
      * receives the result of the operation.
      */
     @SuppressWarnings(""HardCodedStringLiteral"")
-    static Completable repeatOperationUntil(Dispatcher dispatcher, int timeout, Operation operation,
+    public static Completable repeatOperationUntil(Dispatcher dispatcher, int timeout, Operation operation,
             @Nullable Predicate<ModelNode> until) {
+        logger.debug(""Repeat {} using {} seconds timeout"", operation.asCli(), timeout);
+
         Single<ModelNode> execution = Single.fromEmitter(em -> dispatcher.execute(operation, em::onSuccess,
-                (op, fail) -> em.onError(new RuntimeException(""Dispatcher failure: "" + fail)),
-                (op, ex) -> em.onError(new RuntimeException(""Dispatcher exception: "" + ex, ex))));
+                (op, fail) -> em.onSuccess(operationFailure(""Dispatcher failure: "" + fail)),
+                (op, ex) -> em.onSuccess(operationFailure(""Dispatcher exception: "" + ex.getMessage()))));
         if (until == null) {
             until = r -> !r.isFailure(); // default: until success
         }
 
         return Observable
                 .interval(INTERVAL, MILLISECONDS) // execute a operation each INTERVAL millis
+                .doOnEach(n -> logger.debug(""#{}: execute {}"", n.getValue(), operation.asCli()))
                 .flatMapSingle(n -> execution, false, 1)
                 .takeUntil(until::test) // until succeeded
-                .toCompletable().timeout(timeout, SECONDS) // wait succeeded or stop after timeout seconds
-                .doOnError(e -> {
-                    String msg = ""Operation "" + operation.asCli() + "" ran into "";
-                    if (e instanceof TimeoutException) {
-                        logger.warn(msg + ""a timeout after "" + timeout + "" seconds"");
-                    } else {
-                        logger.error(msg + ""an error"", e);
-                    }
-                });
+                .toCompletable().timeout(timeout, SECONDS); // wait succeeded or stop after timeout seconds
     }
 
     /**
      * Executes the composite operation until the operation successfully returns and the precondition is met.
      * The precondition receives the composite result of the operation.
      */
     @SuppressWarnings(""HardCodedStringLiteral"")
-    static Completable repeatCompositeUntil(Dispatcher dispatcher, int timeout, Composite composite,
+    public static Completable repeatCompositeUntil(Dispatcher dispatcher, int timeout, Composite composite,
             @Nullable Predicate<CompositeResult> until) {
+        logger.debug(""Repeat {} using {} seconds as timeout"", composite, timeout);
+
         Single<CompositeResult> execution = Single.fromEmitter(em -> dispatcher.execute(composite, em::onSuccess,
-                (op, fail) -> em.onError(new RuntimeException(""Dispatcher failure: "" + fail)),
-                (op, ex) -> em.onError(new RuntimeException(""Dispatcher exception: "" + ex, ex))));
+                (op, fail) -> em.onSuccess(compositeFailure(""Dispatcher failure: "" + fail)),
+                (op, ex) -> em.onSuccess(compositeFailure(""Dispatcher exception: "" + ex.getMessage()))));
         if (until == null) {
             until = r -> r.stream().noneMatch(ModelNode::isFailure); // default: until success
         }
 
         return Observable
                 .interval(INTERVAL, MILLISECONDS) // execute a operation each INTERVAL millis
+                .doOnEach(n -> logger.debug(""#{}: execute {}"", n.getValue(), composite))
                 .flatMapSingle(n -> execution, false, 1)
                 .takeUntil(until::test) // until succeeded
-                .toCompletable().timeout(timeout, SECONDS) // wait succeeded or stop after timeout seconds
-                .doOnError(e -> {
-                    String msg = ""Composite operation "" + composite.asCli() + "" ran into "";
-                    if (e instanceof TimeoutException) {
-                        logger.warn(msg + ""a timeout after "" + timeout + "" seconds"");
-                    } else {
-                        logger.error(msg + ""an error"", e);
-                    }
-                });
+                .toCompletable().timeout(timeout, SECONDS); // wait succeeded or stop after timeout seconds
+    }
+
+    private static ModelNode operationFailure(String reason) {
+        ModelNode node = new ModelNode();
+        node.get(OUTCOME).set(FAILED);
+        node.get(FAILURE_DESCRIPTION).set(reason);
+        return node;
+    }
+
+    private static CompositeResult compositeFailure(String reason) {
+        ModelNode node = new ModelNode();
+        node.get(OUTCOME).set(FAILED);
+        node.get(FAILURE_DESCRIPTION).set(reason);
+        return new CompositeResult(node);
+    }
+
+    private TimeoutHandler() {
     }
 }",2018-02-01T16:28:42Z,1
"@@ -16,6 +16,7 @@
 package org.jboss.hal.core.modelbrowser;
 
 import java.util.List;
+import java.util.Optional;
 
 import com.google.gwt.safehtml.shared.SafeHtmlBuilder;
 import elemental2.dom.HTMLElement;
@@ -30,10 +31,17 @@
 import org.jboss.hal.ballroom.table.Scope;
 import org.jboss.hal.ballroom.table.Table;
 import org.jboss.hal.ballroom.tree.Node;
+import org.jboss.hal.config.Environment;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Operation;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.flow.Progress;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.processing.MetadataProcessor;
+import org.jboss.hal.meta.security.AuthorisationDecision;
+import org.jboss.hal.meta.security.Constraint;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
@@ -43,31 +51,37 @@
 
 import static java.util.stream.Collectors.toList;
 import static org.jboss.gwt.elemento.core.Elements.h;
+import static org.jboss.hal.core.modelbrowser.ModelBrowser.asGenericTemplate;
 import static org.jboss.hal.core.modelbrowser.ReadChildren.uniqueId;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.ADD;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.CHILD_TYPE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.READ_CHILDREN_NAMES_OPERATION;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.REMOVE;
 
 /** Panel which holds the children of the selected resource. */
 class ChildrenPanel implements HasElements, Attachable {
 
     @NonNls private static final Logger logger = LoggerFactory.getLogger(ChildrenPanel.class);
 
+    private final Environment environment;
     private final Dispatcher dispatcher;
+    private final MetadataProcessor metadataProcessor;
     private final ElementsBuilder builder;
     private final HTMLElement header;
     private final Table<String> table;
     private Node<Context> parent;
 
-    ChildrenPanel(ModelBrowser modelBrowser, Dispatcher dispatcher, Resources resources) {
+    ChildrenPanel(ModelBrowser modelBrowser, Environment environment, Dispatcher dispatcher,
+            MetadataProcessor metadataProcessor, Resources resources) {
+        this.environment = environment;
         this.dispatcher = dispatcher;
+        this.metadataProcessor = metadataProcessor;
 
-        //noinspection HardCodedStringLiteral
         Options<String> options = new OptionsBuilder<String>()
                 .column(""resource"", Names.RESOURCE, (cell, type, row, meta) -> row)
                 .column(new InlineAction<>(resources.constants().view(), row -> modelBrowser.tree.openNode(parent.id,
                         () -> modelBrowser.select(uniqueId(parent, row), false))))
                 .button(resources.constants().add(), table -> modelBrowser.add(parent, table.getRows()))
-
                 .button(resources.constants().remove(), table -> {
                             ResourceAddress fq = parent.data.getAddress()
                                     .getParent()
@@ -117,6 +131,25 @@ void update(Node<Context> node, ResourceAddress address) {
             if (node.data.hasSingletons()) {
                 logger.debug(""Read {} / {} singletons"", names.size(), node.data.getSingletons().size());
             }
+
+            AddressTemplate template = asGenericTemplate(node, address);
+            metadataProcessor.lookup(template, Progress.NOOP,
+                    new MetadataProcessor.MetadataCallback() {
+                        @Override
+                        public void onMetadata(Metadata metadata) {
+                            table.enableButton(0, AuthorisationDecision.from(environment,
+                                    constraint -> Optional.of(metadata.getSecurityContext()))
+                                    .isAllowed(Constraint.executable(template, ADD)));
+                            table.enableButton(1, AuthorisationDecision.from(environment,
+                                    constraint -> Optional.of(metadata.getSecurityContext()))
+                                    .isAllowed(Constraint.executable(template, REMOVE)));
+                        }
+
+                        @Override
+                        public void onError(Throwable error) {
+                            logger.warn(""Unable to enable / disable table buttons for {}"", address);
+                        }
+                    });
         });
     }
 ",2018-02-27T15:44:08Z,113
"@@ -37,6 +37,7 @@
 import org.jboss.hal.ballroom.tree.SelectionContext;
 import org.jboss.hal.ballroom.tree.Tree;
 import org.jboss.hal.ballroom.wizard.Wizard;
+import org.jboss.hal.config.Environment;
 import org.jboss.hal.core.CrudOperations;
 import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
 import org.jboss.hal.core.mbui.dialog.NameItem;
@@ -126,6 +127,7 @@ public ModelBrowser(CrudOperations crud,
             MetadataProcessor metadataProcessor,
             @Footer Provider<Progress> progress,
             Dispatcher dispatcher,
+            Environment environment,
             EventBus eventBus,
             Resources resources) {
         this.crud = crud;
@@ -165,7 +167,7 @@ public ModelBrowser(CrudOperations crud,
         }
         resourcePanel.hide();
 
-        childrenPanel = new ChildrenPanel(this, dispatcher, resources);
+        childrenPanel = new ChildrenPanel(this, environment, dispatcher, metadataProcessor, resources);
         for (HTMLElement element : childrenPanel.asElements()) {
             content.appendChild(element);
         }
@@ -281,7 +283,7 @@ public void onSuccess(FlowContext context) {
         }
     }
 
-    private void refresh(final Node<Context> node) {
+    private void refresh(Node<Context> node) {
         if (node != null) {
             updateNode(node);
             tree.refreshNode(node.id);
@@ -340,14 +342,14 @@ private void showResourceView(Node<Context> node, ResourceAddress address) {
         AddressTemplate template = asGenericTemplate(parent, address);
         metadataProcessor.lookup(template, progress.get(), new SuccessfulMetadataCallback(eventBus, resources) {
             @Override
-            public void onMetadata(final Metadata metadata) {
+            public void onMetadata(Metadata metadata) {
                 resourcePanel.update(node, node.data.getAddress(), metadata);
                 resourcePanel.show();
             }
         });
     }
 
-    void add(final Node<Context> parent, final List<String> children) {
+    void add(Node<Context> parent, List<String> children) {
         if (parent.data.hasSingletons()) {
             if (parent.data.getSingletons().size() == children.size()) {
                 MessageEvent.fire(eventBus, Message.warning(resources.messages().allSingletonsExist()));
@@ -453,7 +455,7 @@ void reset(ResourceAddress address, Form<ModelNode> form, Metadata metadata) {
         crud.reset(address.lastName(), address.lastValue(), address, form, metadata,
                 new FinishReset<ModelNode>(form) {
                     @Override
-                    public void afterReset(final Form<ModelNode> form) {
+                    public void afterReset(Form<ModelNode> form) {
                         refresh(tree.getSelected());
                     }
                 });
@@ -469,7 +471,7 @@ public void afterReset(final Form<ModelNode> form) {
      *
      * @param surroundingHeight the sum of the height of all surrounding elements
      */
-    public void setSurroundingHeight(final int surroundingHeight) {
+    public void setSurroundingHeight(int surroundingHeight) {
         this.surroundingHeight = surroundingHeight;
         adjustHeight();
     }
@@ -518,7 +520,7 @@ public void setRoot(ResourceAddress root, boolean updateBreadcrumb) {
                 });
     }
 
-    public void select(final String id, final boolean closeSelected) {
+    public void select(String id, boolean closeSelected) {
         tree.selectNode(id, closeSelected);
     }
 ",2018-02-27T15:44:08Z,114
"@@ -54,8 +54,8 @@ public class AuthorisationDecision {
 
     // ------------------------------------------------------ factory methods
 
-    public static AuthorisationDecision from(final Environment environment,
-            final SecurityContextRegistry securityContextRegistry) {
+    public static AuthorisationDecision from(Environment environment,
+            SecurityContextRegistry securityContextRegistry) {
         return new AuthorisationDecision(environment, constraint -> {
             if (securityContextRegistry.contains(constraint.getTemplate())) {
                 return Optional.of(securityContextRegistry.lookup(constraint.getTemplate()));
@@ -64,11 +64,11 @@ public static AuthorisationDecision from(final Environment environment,
         });
     }
 
-    public static AuthorisationDecision from(final Environment environment, final SecurityContext securityContext) {
+    public static AuthorisationDecision from(Environment environment, SecurityContext securityContext) {
         return new AuthorisationDecision(environment, constraint -> Optional.of(securityContext));
     }
 
-    public static AuthorisationDecision from(final Environment environment, final SecurityContextResolver resolver) {
+    public static AuthorisationDecision from(Environment environment, SecurityContextResolver resolver) {
         return new AuthorisationDecision(environment, resolver);
     }
 
@@ -80,7 +80,7 @@ public static AuthorisationDecision from(final Environment environment, final Se
     private final Environment environment;
     private final SecurityContextResolver resolver;
 
-    private AuthorisationDecision(final Environment environment, final SecurityContextResolver resolver) {
+    private AuthorisationDecision(Environment environment, SecurityContextResolver resolver) {
         this.environment = environment;
         this.resolver = resolver;
     }",2018-02-27T15:44:08Z,115
"@@ -109,18 +109,22 @@ public SafeHtml helpText(Property property) {
         if (!requires.isEmpty()) {
             String textModule;
             if (requires.size() == 1) {
-                textModule = labelBuilder.label(requires.get(0));
+                textModule = ""'"" + labelBuilder.label(requires.get(0)) + ""'"";
             } else {
-                textModule = requires.stream().map(labelBuilder::label).collect(joining("", ""));
+                textModule = requires.stream()
+                        .map((name) -> ""'"" + labelBuilder.label(name) + ""'"")
+                        .collect(joining("", ""));
             }
             textModules.add(MESSAGES.requires(textModule));
         }
         if (!alternatives.isEmpty()) {
             String textModule;
             if (alternatives.size() == 1) {
-                textModule = labelBuilder.label(alternatives.get(0));
+                textModule = ""'"" + labelBuilder.label(alternatives.get(0)) + ""'"";
             } else {
-                textModule = alternatives.stream().map(labelBuilder::label).collect(joining("", ""));
+                textModule = alternatives.stream()
+                        .map((name) -> ""'"" + labelBuilder.label(name) + ""'"")
+                        .collect(joining("", ""));
             }
             textModules.add(MESSAGES.alternativesHelp(textModule));
         }",2017-01-31T14:24:16Z,53
"@@ -37,7 +37,7 @@ public class SingleOperationThreeWildcardsTest {
     public void setUp() throws Exception {
         resultProcessor = new SingleReadChildrenProcessor();
         nodes = ExternalModelNode
-                .read(NamesResultProcessorTest.class.getResourceAsStream(""single_operation_three_wildcards.dmr""));
+                .read(NamesResultProcessorTest.class.getResourceAsStream(""single-operation-three-wildcards.dmr""));
     }
 
     @Test",2017-01-31T14:24:16Z,87
"@@ -84,16 +84,18 @@ public Composite fromChangeSet(final ResourceAddress address, final Map<String,
             if (intersection.isEmpty()) {
 
                 // the easy part: no conflicts
-                logger.debug(""Add undefine operations for alternatives [{}]"", String.join("", "", alternatives));
-                alternatives.forEach(alternative -> {
-                    operations.putIfAbsent(alternative, undefineAttribute(address, alternative));
-                    List<String> requires = metadata.getDescription().findRequires(ATTRIBUTES, alternative);
-                    if (!requires.isEmpty()) {
-                        logger.debug(""Add undefine operations for attributes which require {}: [{}]"", alternative,
-                                String.join("", "", requires));
-                        requires.forEach(r -> operations.putIfAbsent(r, undefineAttribute(address, r)));
-                    }
-                });
+                if (!alternatives.isEmpty()) {
+                    logger.debug(""Add undefine operations for alternatives [{}]"", String.join("", "", alternatives));
+                    alternatives.forEach(alternative -> {
+                        operations.putIfAbsent(alternative, undefineAttribute(address, alternative));
+                        List<String> requires = metadata.getDescription().findRequires(ATTRIBUTES, alternative);
+                        if (!requires.isEmpty()) {
+                            logger.debug(""Add undefine operations for attributes which require {}: [{}]"", alternative,
+                                    String.join("", "", requires));
+                            requires.forEach(r -> operations.putIfAbsent(r, undefineAttribute(address, r)));
+                        }
+                    });
+                }
 
             } else {
                 // possible conflicts: one or more alternatives are also in the change-set",2017-01-31T14:24:16Z,21
"@@ -358,6 +358,22 @@ private ModelNodeForm(final Builder<T> builder) {
                 addHelp(labelBuilder.label(unboundFormItem.formItem.getName()), unboundFormItem.helpText);
             }
         }
+
+        // requires
+        getFormItems().forEach(formItem -> {
+            List<String> requires = builder.metadata.getDescription()
+                    .findRequires(builder.attributePath, formItem.getName());
+            if (!requires.isEmpty()) {
+                //noinspection unchecked
+                formItem.addValueChangeHandler(event ->
+                        requires.forEach(r -> {
+                            FormItem rf = getFormItem(r);
+                            if (rf != null) {
+                                rf.setEnabled(!formItem.isEmpty());
+                            }
+                        }));
+            }
+        });
     }
 
     @Override",2017-01-31T14:24:16Z,60
"@@ -56,7 +56,7 @@ public interface ModelDescriptionConstants {
     String ADMIN_OBJECTS = ""admin-objects"";
     String AJP_LISTENER = ""ajp-listener"";
     String ALLOWED = ""allowed"";
-    String ALTERNATIVES = ""alternativesHelp"";
+    String ALTERNATIVES = ""alternatives"";
     String ANY = ""any"";
     String ARCHIVE = ""archive"";
     String ASYNC_OPERATIONS = ""async-operations"";",2017-01-31T14:24:16Z,109
"@@ -99,9 +99,7 @@ public List<String> findAlternatives(final String path, final String name) {
         Property attribute = findAttribute(path, name);
         if (attribute != null) {
             if (attribute.getValue().hasDefined(ALTERNATIVES)) {
-                return attribute.getValue().get(ALTERNATIVES)
-                        .asList()
-                        .stream()
+                return attribute.getValue().get(ALTERNATIVES).asList().stream()
                         .map(ModelNode::asString)
                         .collect(toList());
             }",2017-01-31T14:24:16Z,24
"@@ -50,7 +50,7 @@ public FinishBootstrap(EventBus eventBus,
     public void execute(final Control<FunctionContext> control) {
         // reset the uncaught exception handler setup in HalPreBootstrapper
         GWT.setUncaughtExceptionHandler(e -> {
-            logger.error(""{}: Uncaught exception: {}"", name(), e.getMessage()); //NON-NLS
+            logger.error(""Uncaught exception: {}"", e.getMessage()); //NON-NLS
             eventBus.fireEvent(new MessageEvent(Message.error(resources.constants().unknownError(), e.getMessage())));
         });
         control.proceed();",2016-01-08T22:04:36Z,362
"@@ -44,7 +44,7 @@
 
 import static org.jboss.hal.dmr.ModelDescriptionConstants.CHILD_TYPE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.READ_CHILDREN_RESOURCES_OPERATION;
-import static org.jboss.hal.dmr.ModelNodeHelper.withNames;
+import static org.jboss.hal.dmr.ModelNodeHelper.asNodesWithNames;
 import static org.jboss.hal.resources.Names.PROFILE;
 
 /**
@@ -110,7 +110,7 @@ private void loadDataSources() {
                 template.resolve(statementContext))
                 .param(CHILD_TYPE, ""data-source"")
                 .build();
-        dispatcher.execute(operation, result -> getView().update(withNames(result.asPropertyList())));
+        dispatcher.execute(operation, result -> getView().update(asNodesWithNames(result.asPropertyList())));
     }
 }
 ",2016-01-08T22:04:36Z,4
"@@ -24,8 +24,12 @@
 import com.gwtplatform.mvp.client.ViewImpl;
 import elemental.dom.Element;
 import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.ballroom.layout.LayoutBuilder;
+import org.jboss.hal.ballroom.tab.Tabs;
+import org.jboss.hal.ballroom.table.DataTable;
 import org.jboss.hal.ballroom.table.Options;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
 import org.jboss.hal.core.mbui.table.ModelNodeTable;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.meta.description.ResourceDescription;
@@ -34,19 +38,20 @@
 import org.jboss.hal.meta.security.SecurityFramework;
 
 import javax.inject.Inject;
+import java.util.ArrayList;
 import java.util.List;
 
 import static org.jboss.hal.ballroom.table.Api.RefreshMode.RESET;
-import static org.jboss.hal.resources.Names.ENABLED;
-import static org.jboss.hal.resources.Names.JNDI_NAME;
+import static org.jboss.hal.resources.Ids.*;
+import static org.jboss.hal.resources.Names.*;
 
 /**
  * @author Harald Pehl
  */
-@SuppressWarnings(""HardCodedStringLiteral"")
 public class DataSourceView extends ViewImpl implements DataSourcePresenter.MyView {
 
-    private final ModelNodeTable<ModelNode> dataSourcesTable;
+    private final DataTable<ModelNode> table;
+    private final List<Form<ModelNode>> forms;
     private DataSourcePresenter presenter;
 
     @Inject
@@ -56,18 +61,35 @@ public DataSourceView(ResourceDescriptions descriptions,
         ResourceDescription description = descriptions.lookup(DataSourcePresenter.ROOT_TEMPLATE);
         SecurityContext securityContext = securityFramework.lookup(DataSourcePresenter.ROOT_TEMPLATE);
 
+        Element info = new Elements.Builder().p().innerText(description.getDescription()).end().build();
         Options<ModelNode> options = new ModelNodeTable.Builder<>(description)
+                .column(NAME_KEY, NAME_LABEL, (cell, type, row, meta) -> row.get(NAME_KEY).asString())
                 .columns(JNDI_NAME, ENABLED)
                 .build();
-        dataSourcesTable = new ModelNodeTable<>(""data-sources-table"", securityContext, options);
+        table = new ModelNodeTable<>(DATA_SOURCE_TABLE, securityContext, options);
+
+        forms = new ArrayList<>();
+        Tabs tabs = new Tabs();
+        ModelNodeForm<ModelNode> currentForm;
+
+        currentForm = new ModelNodeForm.Builder<>(DATA_SOURCE_ATTRIBUTES_FORM, securityContext, description)
+                .include(JNDI_NAME, ENABLED, ""statistics-enabled"", ""driver-name"")
+                .build();
+        forms.add(currentForm);
+        tabs.add(DATA_SOURCE_ATTRIBUTES_TAB, ATTRIBUTES, currentForm.asElement());
+
+        currentForm = new ModelNodeForm.Builder<>(DATA_SOURCE_CONNECTION_FORM, securityContext, description)
+                .include(""connection-url"", ""new-connection-sql"", ""transaction-isolation"", ""jta"", ""use-ccm"")
+                .build();
+        forms.add(currentForm);
+        tabs.add(DATA_SOURCE_CONNECTION_TAB, ""Connection"", currentForm.asElement());
 
-        Element info = new Elements.Builder().p().innerText(description.getDescription()).end().build();
         // @formatter:off
         Element element = new LayoutBuilder()
             .startRow()
                 .header(""DataSources"")
                 .add(info)
-                .add(dataSourcesTable.asElement())
+                .add(table.asElement(), tabs.asElement())
             .endRow()
         .build();
         // @formatter:on
@@ -77,7 +99,8 @@ public DataSourceView(ResourceDescriptions descriptions,
 
     @Override
     public void attach() {
-        dataSourcesTable.attach();
+        table.attach();
+        table.api().bindForms(forms);
     }
 
     @Override
@@ -87,6 +110,6 @@ public void setPresenter(final DataSourcePresenter presenter) {
 
     @Override
     public void update(final List<ModelNode> datasources) {
-        dataSourcesTable.api().clear().add(datasources).refresh(RESET);
+        table.api().clear().add(datasources).refresh(RESET);
     }
 }",2016-01-08T22:04:36Z,29
"@@ -1,3 +1,7 @@
+.form-section {
+  margin-top: 20px;
+}
+
 .form {
 
   &.readonly {",2016-01-08T22:04:36Z,363
"@@ -50,11 +50,11 @@ public void execute(final Form.Operation operation) {
                 transitionTo(EDITING);
                 break;
 
-            case CANCEL:
+            case SAVE:
                 assertState(EDITING);
                 break;
 
-            case SAVE:
+            case CANCEL:
                 assertState(EDITING);
                 break;
 ",2016-01-08T22:04:36Z,89
"@@ -30,9 +30,11 @@ public interface DataMapping<T> {
 
     void newModel(T model, Form<T> form);
 
-    void resetModel(T model, Form<T> form);
-
     void populateFormItems(T model, Form<T> form);
 
+    void clearFormItems(Form<T> form);
+
+    void resetModel(T model, Form<T> form);
+
     void persistModel(T model, Form<T> form);
 }",2016-01-08T22:04:36Z,364
"@@ -79,8 +79,7 @@ public class DefaultForm<T> extends LazyElement implements Form<T>, SecurityCont
     private T model;
     private SecurityContext securityContext;
 
-    private Element buttons;
-    private FormLinks formLinks;
+    private FormLinks<T> formLinks;
     private DivElement errorPanel;
     private SpanElement errorMessage;
     private UListElement errorMessages;
@@ -136,8 +135,9 @@ protected Element createElement() {
 
         Element section = Browser.getDocument().createElement(""section""); //NON-NLS
         section.setId(id);
+        section.getClassList().add(formSection);
 
-        formLinks = new FormLinks(id, stateMachine, helpTexts,
+        formLinks = new FormLinks<>(id, stateMachine, helpTexts,
                 event -> edit(getModel()),
                 event -> reset());
         section.appendChild(formLinks.asElement());
@@ -228,7 +228,7 @@ private Element editPanel() {
         }
 
         // @formatter:off
-        buttons = new Elements.Builder()
+        Element buttons = new Elements.Builder()
             .div().css(formGroup, formButtons)
                 .div().css(offset(labelColumns), column(inputColumns))
                     .div().css(pullRight)
@@ -251,6 +251,25 @@ private Element editPanel() {
 
     // ------------------------------------------------------ form operations
 
+    /**
+     * Executes the {@link org.jboss.hal.ballroom.form.Form.Operation#ADD} operation and calls {@link
+     * DataMapping#newModel(Object, Form)}.
+     *
+     * @param model the transient model
+     */
+    @Override
+    public final void add(final T model) {
+        if (model == null) {
+            throw new NullPointerException(MODEL_MUST_NOT_BE_NULL + formId() + "".add(T)"");
+        }
+        if (!initialized()) {
+            throw new IllegalStateException(NOT_INITIALIZED);
+        }
+        this.model = model;
+        stateExec(ADD); // switch state before data mapping!
+        dataMapping.newModel(model, this);
+    }
+
     /**
      * Executes the {@link org.jboss.hal.ballroom.form.Form.Operation#VIEW} operation and calls {@link
      * DataMapping#populateFormItems(Object, Form)}.
@@ -271,22 +290,36 @@ public final void view(final T model) {
     }
 
     /**
-     * Executes the {@link org.jboss.hal.ballroom.form.Form.Operation#ADD} operation and calls {@link
-     * DataMapping#newModel(Object, Form)}.
-     *
-     * @param model the transient model
+     * Removes the model reference, executes the {@link org.jboss.hal.ballroom.form.Form.Operation#CLEAR} operation and
+     * calls {@link DataMapping#clearFormItems(Form)}.
      */
     @Override
-    public final void add(final T model) {
-        if (model == null) {
-            throw new NullPointerException(MODEL_MUST_NOT_BE_NULL + formId() + "".add(T)"");
-        }
+    public void clear() {
+        this.model = null;
+        stateExec(CLEAR);
+        dataMapping.clearFormItems(this);
+    }
+
+    /**
+     * Executes the {@link org.jboss.hal.ballroom.form.Form.Operation#RESET} operation, calls {@link
+     * DataMapping#resetModel(Object, Form)} and finally calls the registered {@linkplain
+     * org.jboss.hal.ballroom.form.Form.ResetCallback reset callback} (if any).
+     */
+    @Override
+    public final void reset() {
         if (!initialized()) {
             throw new IllegalStateException(NOT_INITIALIZED);
         }
-        this.model = model;
-        stateExec(ADD); // switch state before data mapping!
-        dataMapping.newModel(model, this);
+        stateExec(RESET); // switch state before data mapping!
+        dataMapping.resetModel(model, this);
+        if (resetCallback != null) {
+            resetCallback.onReset(this);
+        }
+    }
+
+    @Override
+    public void setResetCallback(final ResetCallback<T> resetCallback) {
+        this.resetCallback = resetCallback;
     }
 
     /**
@@ -363,28 +396,6 @@ public void setCancelCallback(final CancelCallback<T> cancelCallback) {
         this.cancelCallback = cancelCallback;
     }
 
-    /**
-     * Executes the {@link org.jboss.hal.ballroom.form.Form.Operation#RESET} operation, calls {@link
-     * DataMapping#resetModel(Object, Form)} and finally calls the registered {@linkplain
-     * org.jboss.hal.ballroom.form.Form.ResetCallback reset callback} (if any).
-     */
-    @Override
-    public final void reset() {
-        if (!initialized()) {
-            throw new IllegalStateException(NOT_INITIALIZED);
-        }
-        stateExec(RESET); // switch state before data mapping!
-        dataMapping.resetModel(model, this);
-        if (resetCallback != null) {
-            resetCallback.onReset(this);
-        }
-    }
-
-    @Override
-    public void setResetCallback(final ResetCallback<T> resetCallback) {
-        this.resetCallback = resetCallback;
-    }
-
     protected String formId() {
         return ""form("" + id + "")""; //NON-NLS
     }
@@ -438,7 +449,7 @@ private void flip(State state) {
                 break;
         }
 
-        formLinks.switchTo(state, securityContext);
+        formLinks.switchTo(state, model, securityContext);
         for (Element panel : panels.values()) {
             Elements.setVisible(panel, false);
         }
@@ -458,7 +469,7 @@ private void applySecurity() {
         if (stateMachine.current() == EDITING && !securityContext.isWritable()) {
             stateExec(CANCEL);
         }
-        formLinks.switchTo(stateMachine.current(), securityContext);
+        formLinks.switchTo(stateMachine.current(), model, securityContext);
         for (Map.Entry<String, FormItem> entry : formItems.entrySet()) {
             entry.getValue().setRestricted(!securityContext.isWritable(entry.getKey()));
         }",2016-01-08T22:04:36Z,64
"@@ -37,12 +37,19 @@ public void newModel(final T model, final Form<T> form) {
     }
 
     @Override
-    public void resetModel(final T model, Form<T> form) {
+    public void populateFormItems(final T model, final Form<T> form) {
         // empty
     }
 
     @Override
-    public void populateFormItems(final T model, final Form<T> form) {
+    public void clearFormItems(final Form<T> form) {
+        for (FormItem formItem : form.getFormItems()) {
+            formItem.clearValue();
+        }
+    }
+
+    @Override
+    public void resetModel(final T model, Form<T> form) {
         // empty
     }
 ",2016-01-08T22:04:36Z,365
"@@ -32,25 +32,27 @@
 /**
  * A state machine for existing models. Supports all {@linkplain Operation operations} except {@link Operation#ADD}.
  * <pre>
- *                             (O)
- *                              |
- *             +--------+       |
- *             |        |     view()
- *             |        |       |
- *          reset()     |       |
- *             |     +--v-------v--+
- *             |     |             |
- *             +-----+  READONLY   <-----+
- *                   |             |     |
- *                   +--+-------^--+     |
- *                      |       |        |
- *                   edit()  cancel()  save()
- *                      |       |        |
- *                   +--v-------+--+     |
- *                   |             |     |
- *  (O)----edit()---->   EDITING   +-----+
- *                   |             |
- *                   +-------------+
+ *            +--------+      (0)
+ *            |        |       |
+ *         clear()     |     view()
+ *         reset()     |       |
+ *            |     +--v-------v--+
+ *            |     |             |
+ *            +-----+  READONLY   <-----+-------+
+ *                  |             |     |       |
+ *                  +--+-------^--+     |       |
+ *                     |       |        |       |
+ *                  edit()  cancel()  save()    |
+ *                     |       |        |       |
+ *                  +--v-------+--+     |       |
+ *                  |             |     |       |
+ *   (0)---edit()--->   EDITING   +-----+     clear()
+ *                  |             |             |
+ *                  +------+------+             |
+ *                         |                    |
+ *                       clear()                |
+ *                         |                    |
+ *                         +--------------------+
  * </pre>
  * (0) Initial states
  *
@@ -59,23 +61,33 @@
 public class ExistingModelStateMachine extends AbstractStateMachine implements StateMachine {
 
     public ExistingModelStateMachine() {
-        super(EnumSet.of(CANCEL, EDIT, RESET, SAVE, VIEW));
+        super(EnumSet.of(VIEW, CLEAR, RESET, EDIT, SAVE, CANCEL));
         this.current = null;
     }
 
     @Override
     public void execute(final Operation operation) {
         switch (operation) {
 
+            case ADD:
+                unsupported(ADD);
+                break;
+
             case VIEW:
                 if (current != null) {
                     assertState(READONLY);
                 }
                 transitionTo(READONLY);
                 break;
 
-            case ADD:
-                unsupported(ADD);
+            case CLEAR:
+                transitionTo(READONLY);
+                break;
+
+            case RESET:
+                assertState(READONLY);
+                transitionTo(READONLY);
+                break;
 
             case EDIT:
                 if (current != null) {
@@ -84,18 +96,13 @@ public void execute(final Operation operation) {
                 transitionTo(EDITING);
                 break;
 
-            case CANCEL:
-                assertState(EDITING);
-                transitionTo(READONLY);
-                break;
-
             case SAVE:
                 assertState(EDITING);
                 transitionTo(READONLY);
                 break;
 
-            case RESET:
-                assertState(READONLY);
+            case CANCEL:
+                assertState(EDITING);
                 transitionTo(READONLY);
                 break;
 ",2016-01-08T22:04:36Z,34
"@@ -40,21 +40,21 @@ enum State {
 
 
     enum Operation {
-        VIEW, ADD, EDIT, CANCEL, SAVE, RESET
+        ADD, VIEW, CLEAR, RESET, EDIT, SAVE, CANCEL
     }
 
 
     @FunctionalInterface
-    interface SaveCallback<T> {
+    interface ResetCallback<T> {
 
-        void onSave(Form<T> form, Map<String, Object> changedValues);
+        void onReset(Form<T> form);
     }
 
 
     @FunctionalInterface
-    interface ResetCallback<T> {
+    interface SaveCallback<T> {
 
-        void onReset(Form<T> form);
+        void onSave(Form<T> form, Map<String, Object> changedValues);
     }
 
 
@@ -65,6 +65,13 @@ interface CancelCallback<T> {
     }
 
 
+    /**
+     * Takes a new transient model and enters the editing state.
+     *
+     * @param model the transient model
+     */
+    void add(T model);
+
     /**
      * Takes the specified model and updates the read-only state with the values from the model.
      *
@@ -73,11 +80,16 @@ interface CancelCallback<T> {
     void view(T model);
 
     /**
-     * Takes a new transient model and enters the editing state.
-     *
-     * @param model the transient model
+     * Clears this form by removing the model reference and by clearing all form fields.
      */
-    void add(T model);
+    void clear();
+
+    /**
+     * Resets the model.
+     */
+    void reset();
+
+    void setResetCallback(ResetCallback<T> resetCallback);
 
     /**
      * Takes the specified model and populates the editing state with the values from the model.
@@ -101,13 +113,6 @@ interface CancelCallback<T> {
 
     void setCancelCallback(CancelCallback<T> cancelCallback);
 
-    /**
-     * Resets the model.
-     */
-    void reset();
-
-    void setResetCallback(ResetCallback<T> resetCallback);
-
     /**
      * @return an unique identifier for this form.
      */",2016-01-08T22:04:36Z,323
"@@ -43,7 +43,7 @@
 /**
  * @author Harald Pehl
  */
-class FormLinks implements IsElement {
+class FormLinks<T> implements IsElement {
 
     private final static Constants CONSTANTS = GWT.create(Constants.class);
 
@@ -57,7 +57,7 @@ class FormLinks implements IsElement {
 
     FormLinks(final String formId,
             final StateMachine stateMachine,
-            final LinkedHashMap<String, String>helpTexts,
+            final LinkedHashMap<String, String> helpTexts,
             final EventListener onEdit,
             final EventListener onReset) {
 
@@ -150,11 +150,13 @@ public Element asElement() {
         return root;
     }
 
-    void switchTo(State state, SecurityContext securityContext) {
+    void switchTo(State state, T model, SecurityContext securityContext) {
         switch (state) {
             case READONLY:
-                Elements.setVisible(editLink, stateMachine.supports(EDIT) && securityContext.isWritable());
-                Elements.setVisible(resetLink, stateMachine.supports(RESET) && securityContext.isWritable());
+                Elements.setVisible(editLink,
+                        model != null && stateMachine.supports(EDIT) && securityContext.isWritable());
+                Elements.setVisible(resetLink,
+                        model != null && stateMachine.supports(RESET) && securityContext.isWritable());
                 Elements.setVisible(helpLink, !helpTexts.isEmpty());
                 break;
 ",2016-01-08T22:04:36Z,180
"@@ -25,6 +25,7 @@
 import jsinterop.annotations.JsOverlay;
 import jsinterop.annotations.JsProperty;
 import jsinterop.annotations.JsType;
+import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.resources.Names;
 
 import java.util.Collections;
@@ -269,4 +270,41 @@ public final List<T> selectedRows() {
         }
         return asList(selection);
     }
-}
+
+    @JsOverlay
+    public final Api<T> bindForm(Form<T> form) {
+        // don't replace this with a lambda - it won't run in super dev mode
+        //noinspection Convert2Lambda
+        return onSelectionChange(new SelectionChangeHandler<T>() {
+            @Override
+            public void onSelectionChanged(final Api<T> api) {
+                if (api.hasSelection()) {
+                    form.view(api.selectedRow());
+                } else {
+                    form.clear();
+                }
+            }
+        });
+    }
+
+    @JsOverlay
+    public final Api<T> bindForms(final Iterable<Form<T>> forms) {
+        // don't replace this with a lambda - it won't run in super dev mode
+        //noinspection Convert2Lambda
+        return onSelectionChange(new SelectionChangeHandler<T>() {
+            @Override
+            public void onSelectionChanged(final Api<T> api) {
+                if (api.hasSelection()) {
+                    T selectedRow = api.selectedRow();
+                    for (Form<T> form : forms) {
+                        form.view(selectedRow);
+                    }
+                } else {
+                    for (Form<T> form : forms) {
+                        form.clear();
+                    }
+                }
+            }
+        });
+    }
+}
\ No newline at end of file",2016-01-08T22:04:36Z,324
"@@ -38,6 +38,7 @@
 import org.jboss.hal.dmr.Property;
 import org.jboss.hal.meta.description.ResourceDescription;
 import org.jboss.hal.meta.security.SecurityContext;
+import org.jetbrains.annotations.NonNls;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -79,7 +80,7 @@ public static class Builder<T extends ModelNode> {
 
         // ------------------------------------------------------ configure required and optional settings
 
-        public Builder(final String id, final SecurityContext securityContext,
+        public Builder(@NonNls final String id, final SecurityContext securityContext,
                 final ResourceDescription resourceDescription) {
             this.id = id;
             this.securityContext = securityContext;",2016-01-08T22:04:36Z,60
"@@ -30,6 +30,7 @@
 import org.jboss.hal.dmr.Property;
 import org.jboss.hal.meta.description.ResourceDescription;
 import org.jboss.hal.meta.security.SecurityContext;
+import org.jetbrains.annotations.NonNls;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -98,7 +99,7 @@ protected void validate() {
 
     private static final Logger logger = LoggerFactory.getLogger(ModelNodeTable.class);
 
-    public ModelNodeTable(final String id, final SecurityContext securityContext, final Options<T> options) {
+    public ModelNodeTable(@NonNls final String id, final SecurityContext securityContext, final Options<T> options) {
         super(id, securityContext, options);
     }
 }",2016-01-08T22:04:36Z,108
"@@ -86,7 +86,7 @@ public static <T> T getOrDefault(final ModelNode modelNode, Provider<T> provider
      * Turns a list of properties into a list of model nodes which contain a {@link
      * org.jboss.hal.resources.Names#NAME_KEY} key with the properties name.
      */
-    public static List<ModelNode> withNames(List<Property> properties) {
+    public static List<ModelNode> asNodesWithNames(List<Property> properties) {
         List<ModelNode> nodes = new ArrayList<>(properties.size());
         for (Property property : properties) {
             property.getValue().get(NAME_KEY).set(property.getName());",2016-01-08T22:04:36Z,110
"@@ -65,6 +65,7 @@ public interface CSS {
     String formHorizontal = ""form-horizontal"";
     String formLinkLabel = ""form-link-label"";
     String formLinks = ""form-links"";
+    String formSection = ""form-section"";
     String hasError = ""has-error"";
     String hasFeedback = ""has-feedback"";
     String helpBlock = ""help-block"";",2016-01-08T22:04:36Z,159
"@@ -23,6 +23,12 @@
  */
 public interface Ids {
 
+    String DATA_SOURCE_ATTRIBUTES_FORM = ""data-source-attributes-form"";
+    String DATA_SOURCE_ATTRIBUTES_TAB = ""data-source-attributes-tab"";
+    String DATA_SOURCE_CONNECTION_FORM = ""data-source-connection-form"";
+    String DATA_SOURCE_CONNECTION_TAB = ""data-source-connection-tab"";
+    String DATA_SOURCE_TABLE = ""data-source-table"";
+
     String ENDPOINT_ADD = ""endpoint-add"";
     String ENDPOINT_PING = ""endpoint-ping"";
     String ENDPOINT_SELECT = ""endpoint-select"";",2016-01-08T22:04:36Z,111
"@@ -28,6 +28,7 @@
  */
 public interface Names {
 
+    String ATTRIBUTES = ""Attributes"";
     String CONFIGURATION = ""Configuration"";
     String CONTROLS = ""controls"";
     String DEPLOYMENTS = ""Deployments"";
@@ -42,6 +43,7 @@ public interface Names {
     String LABEL = ""label"";
     String MANAGEMENT_CONSOLE = ""Management Console"";
     String NAME_KEY = ""name"";
+    String NAME_LABEL = ""Name"";
     String NOT_SUPPORTED = ""not supported"";
     String NYI = ""not yet implemented"";
     String OBJECT = ""Object"";",2016-01-08T22:04:36Z,112
