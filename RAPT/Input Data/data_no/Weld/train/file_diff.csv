file_diff,commit_time,file_diff_id
"@@ -68,11 +68,11 @@
 import org.jboss.weld.introspector.jlr.MethodSignatureImpl;
 import org.jboss.weld.introspector.jlr.WeldConstructorImpl;
 import org.jboss.weld.manager.BeanManagerImpl;
-import org.jboss.weld.metadata.cache.MetaAnnotationStore;
 import org.jboss.weld.resources.ClassTransformer;
 import org.jboss.weld.serialization.spi.ContextualStore;
 import org.jboss.weld.serialization.spi.helpers.SerializableContextual;
 import org.jboss.weld.util.Beans;
+import org.jboss.weld.util.InterceptorBindingSet;
 import org.jboss.weld.util.reflection.Reflections;
 import org.jboss.weld.util.reflection.SecureReflections;
 import org.slf4j.cal10n.LocLogger;
@@ -97,6 +97,7 @@
  * @param <T> the type of class for the bean
  * @author Pete Muir
  * @author David Allen
+ * @author Marko Luksa
  */
 public abstract class AbstractClassBean<T> extends AbstractBean<T, Class<T>> {
 
@@ -106,25 +107,6 @@ private static <T> InterceptorMetadata<T>[] emptyInterceptorMetadataArray() {
         return cast(EMPTY_INTERCEPTOR_METADATA_ARRAY);
     }
 
-    /**
-     * Extracts the complete set of interception bindings from a given set of
-     * annotations.
-     *
-     * @param beanManager
-     * @param annotations
-     * @return
-     */
-    protected static Set<Annotation> flattenInterceptorBindings(BeanManagerImpl beanManager, Set<Annotation> annotations) {
-        Set<Annotation> foundInterceptionBindingTypes = new HashSet<Annotation>();
-        for (Annotation annotation : annotations) {
-            if (beanManager.isInterceptorBinding(annotation.annotationType())) {
-                foundInterceptionBindingTypes.add(annotation);
-                foundInterceptionBindingTypes.addAll(beanManager.getServices().get(MetaAnnotationStore.class).getInterceptorBindingModel(annotation.annotationType()).getInheritedInterceptionBindingTypes());
-            }
-        }
-        return foundInterceptionBindingTypes;
-    }
-
     private InterceptorMetadata<SerializableContextual<?, ?>>[] toSerializableContextualArray(List<Interceptor<?>> interceptors) {
         List<InterceptorMetadata<SerializableContextual<Interceptor<?>, ?>>> serializableContextuals = new ArrayList<InterceptorMetadata<SerializableContextual<Interceptor<?>, ?>>>();
         for (Interceptor<?> interceptor : interceptors) {
@@ -209,16 +191,17 @@ protected void initInterceptionModelForType() {
         InterceptionModelBuilder<ClassMetadata<?>, ?> builder = InterceptionModelBuilder.<ClassMetadata<?>>newBuilderFor(classMetadata);
 
         // initialize CDI interceptors
-        Set<Annotation> classBindingAnnotations = flattenInterceptorBindings(beanManager, getWeldAnnotated().getAnnotations());
+        Set<Annotation> classBindingAnnotations = new InterceptorBindingSet(beanManager);
+        classBindingAnnotations.addAll(beanManager.extractInterceptorBindings(getWeldAnnotated().getAnnotations()));
         for (Class<? extends Annotation> annotation : getStereotypes()) {
-            classBindingAnnotations.addAll(flattenInterceptorBindings(beanManager, beanManager.getStereotypeDefinition(annotation)));
+            classBindingAnnotations.addAll(beanManager.extractInterceptorBindings(beanManager.getStereotypeDefinition(annotation)));
         }
         if (classBindingAnnotations.size() > 0) {
             if (Beans.findInterceptorBindingConflicts(beanManager, classBindingAnnotations)) {
                 throw new DeploymentException(CONFLICTING_INTERCEPTOR_BINDINGS, getType());
             }
 
-            Annotation[] classBindingAnnotationsArray = classBindingAnnotations.toArray(new Annotation[0]);
+            Annotation[] classBindingAnnotationsArray = classBindingAnnotations.toArray(new Annotation[classBindingAnnotations.size()]);
 
             List<Interceptor<?>> resolvedPostConstructInterceptors = beanManager.resolveInterceptors(InterceptionType.POST_CONSTRUCT, classBindingAnnotationsArray);
             builder.interceptPostConstruct().with(toSerializableContextualArray(resolvedPostConstructInterceptors));
@@ -235,22 +218,25 @@ protected void initInterceptionModelForType() {
         }
         List<WeldMethod<?, ?>> businessMethods = Beans.getInterceptableMethods(getWeldAnnotated());
         for (WeldMethod<?, ?> method : businessMethods) {
-            Set<Annotation> methodBindingAnnotations = new HashSet<Annotation>(classBindingAnnotations);
-            methodBindingAnnotations.addAll(flattenInterceptorBindings(beanManager, method.getAnnotations()));
+            Set<Annotation> methodBindingAnnotations = new InterceptorBindingSet(beanManager);
+            methodBindingAnnotations.addAll(classBindingAnnotations);
+            methodBindingAnnotations.addAll(beanManager.extractInterceptorBindings(method.getAnnotations()));
             if (methodBindingAnnotations.size() > 0) {
                 if (Beans.findInterceptorBindingConflicts(beanManager, methodBindingAnnotations)) {
                     throw new DeploymentException(CONFLICTING_INTERCEPTOR_BINDINGS, getType() + ""."" + method.getName() + ""()"");
                 }
 
-                List<Interceptor<?>> methodBoundInterceptors = beanManager.resolveInterceptors(InterceptionType.AROUND_INVOKE, methodBindingAnnotations.toArray(new Annotation[]{}));
+                Annotation[] methodBindingAnnotationsArray = methodBindingAnnotations.toArray(new Annotation[methodBindingAnnotations.size()]);
+
+                List<Interceptor<?>> methodBoundInterceptors = beanManager.resolveInterceptors(InterceptionType.AROUND_INVOKE, methodBindingAnnotationsArray);
                 if (methodBoundInterceptors != null && methodBoundInterceptors.size() > 0) {
                     if (method.isFinal()) {
                         throw new DefinitionException(FINAL_INTERCEPTED_BEAN_METHOD_NOT_ALLOWED, method, methodBoundInterceptors.get(0).getBeanClass().getName());
                     }
                     builder.interceptAroundInvoke(Reflections.<AnnotatedMethod<T>>cast(method).getJavaMember()).with(toSerializableContextualArray(methodBoundInterceptors));
                 }
 
-                methodBoundInterceptors = beanManager.resolveInterceptors(InterceptionType.AROUND_TIMEOUT, methodBindingAnnotations.toArray(new Annotation[]{}));
+                methodBoundInterceptors = beanManager.resolveInterceptors(InterceptionType.AROUND_TIMEOUT, methodBindingAnnotationsArray);
                 if (methodBoundInterceptors != null && methodBoundInterceptors.size() > 0) {
                     if (method.isFinal()) {
                         throw new DefinitionException(FINAL_INTERCEPTED_BEAN_METHOD_NOT_ALLOWED, method, methodBoundInterceptors.get(0).getBeanClass().getName());",2012-04-03T01:57:03Z,2
"@@ -45,6 +45,7 @@
 
 /**
  * @author Marius Bogoevici
+ * @author Marko Luksa
  */
 public class InterceptorImpl<T> extends ManagedBean<T> implements Interceptor<T> {
 
@@ -63,9 +64,9 @@ protected InterceptorImpl(WeldClass<T> type, BeanManagerImpl beanManager, Servic
         this.interceptorMetadata = beanManager.getInterceptorMetadataReader().getInterceptorMetadata(ClassMetadataInterceptorReference.of(WeldInterceptorClassMetadata.of(type)));
         this.serializable = type.isSerializable();
         this.interceptorBindingTypes = new HashSet<Annotation>();
-        interceptorBindingTypes.addAll(flattenInterceptorBindings(beanManager, getWeldAnnotated().getAnnotations()));
+        interceptorBindingTypes.addAll(beanManager.flattenInterceptorBindings(getWeldAnnotated().getAnnotations()));
         for (Class<? extends Annotation> annotation : getStereotypes()) {
-            interceptorBindingTypes.addAll(flattenInterceptorBindings(beanManager, beanManager.getStereotypeDefinition(annotation)));
+            interceptorBindingTypes.addAll(beanManager.flattenInterceptorBindings(beanManager.getStereotypeDefinition(annotation)));
         }
         if (this.interceptorBindingTypes.size() == 0) {
             throw new DeploymentException(MISSING_BINDING_ON_INTERCEPTOR, type.getName());",2012-04-03T01:57:03Z,3
"@@ -70,6 +70,7 @@
 import org.jboss.weld.serialization.spi.ContextualStore;
 import org.jboss.weld.util.Beans;
 import org.jboss.weld.util.BeansClosure;
+import org.jboss.weld.util.InterceptorBindingSet;
 import org.jboss.weld.util.Observers;
 import org.jboss.weld.util.Proxies;
 import org.jboss.weld.util.collections.Arrays2;
@@ -113,6 +114,8 @@
 import static org.jboss.weld.logging.messages.BeanManagerMessage.AMBIGUOUS_BEANS_FOR_DEPENDENCY;
 import static org.jboss.weld.logging.messages.BeanManagerMessage.CONTEXT_NOT_ACTIVE;
 import static org.jboss.weld.logging.messages.BeanManagerMessage.DUPLICATE_ACTIVE_CONTEXTS;
+import static org.jboss.weld.logging.messages.BeanManagerMessage.DUPLICATE_INTERCEPTOR_BINDING;
+import static org.jboss.weld.logging.messages.BeanManagerMessage.INTERCEPTOR_BINDINGS_EMPTY;
 import static org.jboss.weld.logging.messages.BeanManagerMessage.NON_NORMAL_SCOPE;
 import static org.jboss.weld.logging.messages.BeanManagerMessage.NOT_INTERCEPTOR_BINDING_TYPE;
 import static org.jboss.weld.logging.messages.BeanManagerMessage.NOT_STEREOTYPE;
@@ -137,6 +140,7 @@
  * @author Pete Muir
  * @author Marius Bogoevici
  * @author Ales Justin
+ * @author Marko Luksa
  */
 public class BeanManagerImpl implements WeldManager, Serializable {
 
@@ -620,7 +624,7 @@ public Object getReference(Bean<?> bean, CreationalContext<?> creationalContext,
     private boolean isProxyRequired(Bean<?> bean) {
         if (bean instanceof RIBean<?>) {
             return ((RIBean<?>) bean).isProxyRequired();
-        } else if (getServices().get(MetaAnnotationStore.class).getScopeModel(bean.getScope()).isNormal()) {
+        } else if (getMetaAnnotationStore().getScopeModel(bean.getScope()).isNormal()) {
             return true;
         } else {
             return false;
@@ -669,7 +673,7 @@ public Object getReference(InjectionPoint injectionPoint, Bean<?> resolvedBean,
             if (registerInjectionPoint) {
                 currentInjectionPoint.push(injectionPoint);
             }
-            if (getServices().get(MetaAnnotationStore.class).getScopeModel(resolvedBean.getScope()).isNormal() && !Proxies.isTypeProxyable(injectionPoint.getType())) {
+            if (getMetaAnnotationStore().getScopeModel(resolvedBean.getScope()).isNormal() && !Proxies.isTypeProxyable(injectionPoint.getType())) {
                 throw new UnproxyableResolutionException(UNPROXYABLE_RESOLUTION, resolvedBean, injectionPoint);
             }
             // TODO Can we move this logic to getReference?
@@ -707,7 +711,7 @@ public <T> Bean<T> getBean(Resolvable resolvable) {
             throw new UnsatisfiedResolutionException(UNRESOLVABLE_ELEMENT, resolvable);
         }
 
-        boolean normalScoped = getServices().get(MetaAnnotationStore.class).getScopeModel(bean.getScope()).isNormal();
+        boolean normalScoped = getMetaAnnotationStore().getScopeModel(bean.getScope()).isNormal();
         if (normalScoped && !Beans.isBeanProxyable(bean)) {
             throw Proxies.getUnproxyableTypesException(bean);
         }
@@ -745,15 +749,31 @@ private void checkResolveDecoratorsArguments(Set<Type> types) {
      * @param interceptorBindings The binding types to match
      * @return A list of matching interceptors
      * @see javax.enterprise.inject.spi.BeanManager#resolveInterceptors(javax.enterprise.inject.spi.InterceptionType,
-     *      java.lang.annotation.Annotation[])
+     *      java.lang.annotation.Annotation...)
      */
     public List<Interceptor<?>> resolveInterceptors(InterceptionType type, Annotation... interceptorBindings) {
-        // We can always cache as this is only ever called by Weld where we avoid non-static inner classes for annotation literals
+        if (interceptorBindings.length == 0) {
+            throw new IllegalArgumentException(INTERCEPTOR_BINDINGS_EMPTY);
+        }
+        Set<Annotation> interceptorBindingsSet = new InterceptorBindingSet(this);
+        for (Annotation annotation : interceptorBindings) {
+            if (!isInterceptorBinding(annotation.annotationType())) {
+                throw new IllegalArgumentException(NOT_INTERCEPTOR_BINDING_TYPE, annotation);
+            }
+            if (interceptorBindingsSet.contains(annotation)) {
+                throw new IllegalArgumentException(DUPLICATE_INTERCEPTOR_BINDING, annotation);
+            }
+            interceptorBindingsSet.add(annotation);
+        }
+
+        Set<Annotation> flattenedInterceptorBindings = flattenInterceptorBindings(interceptorBindingsSet);
+
         InterceptorResolvable interceptorResolvable = new InterceptorResolvableBuilder(Object.class)
                 .setInterceptionType(type)
-                .addQualifiers(interceptorBindings)
+                .addQualifiers(flattenedInterceptorBindings)
                 .create();
-        return new ArrayList<Interceptor<?>>(interceptorResolver.resolve(interceptorResolvable, isCacheable(interceptorBindings)));
+        // We can always cache as this is only ever called by Weld where we avoid non-static inner classes for annotation literals
+        return new ArrayList<Interceptor<?>>(interceptorResolver.resolve(interceptorResolvable, isCacheable(flattenedInterceptorBindings)));
     }
 
     /**
@@ -821,7 +841,7 @@ public BeanManagerImpl createActivity() {
     }
 
     public BeanManagerImpl setCurrent(Class<? extends Annotation> scopeType) {
-        if (!getServices().get(MetaAnnotationStore.class).getScopeModel(scopeType).isNormal()) {
+        if (!getMetaAnnotationStore().getScopeModel(scopeType).isNormal()) {
             throw new IllegalArgumentException(NON_NORMAL_SCOPE, scopeType);
         }
         currentActivities.add(new CurrentActivity(getContext(scopeType), this));
@@ -944,7 +964,7 @@ public void validate(InjectionPoint ij) {
     }
 
     public Set<Annotation> getInterceptorBindingDefinition(Class<? extends Annotation> bindingType) {
-        InterceptorBindingModel<? extends Annotation> model = getServices().get(MetaAnnotationStore.class).getInterceptorBindingModel(bindingType);
+        InterceptorBindingModel<? extends Annotation> model = getMetaAnnotationStore().getInterceptorBindingModel(bindingType);
         if (model.isValid()) {
             return model.getMetaAnnotations();
         } else {
@@ -957,7 +977,7 @@ public Bean<?> getPassivationCapableBean(String id) {
     }
 
     public Set<Annotation> getStereotypeDefinition(Class<? extends Annotation> stereotype) {
-        final StereotypeModel<? extends Annotation> model = getServices().get(MetaAnnotationStore.class).getStereotype(stereotype);
+        final StereotypeModel<? extends Annotation> model = getMetaAnnotationStore().getStereotype(stereotype);
         if (model.isValid()) {
             return model.getMetaAnnotations();
         } else {
@@ -966,29 +986,33 @@ public Set<Annotation> getStereotypeDefinition(Class<? extends Annotation> stere
     }
 
     public boolean isQualifier(Class<? extends Annotation> annotationType) {
-        return getServices().get(MetaAnnotationStore.class).getBindingTypeModel(annotationType).isValid();
+        return getMetaAnnotationStore().getBindingTypeModel(annotationType).isValid();
     }
 
     public boolean isInterceptorBinding(Class<? extends Annotation> annotationType) {
-        return getServices().get(MetaAnnotationStore.class).getInterceptorBindingModel(annotationType).isValid();
+        return getMetaAnnotationStore().getInterceptorBindingModel(annotationType).isValid();
     }
 
     public boolean isNormalScope(Class<? extends Annotation> annotationType) {
-        ScopeModel<?> scope = getServices().get(MetaAnnotationStore.class).getScopeModel(annotationType);
+        ScopeModel<?> scope = getMetaAnnotationStore().getScopeModel(annotationType);
         return scope.isValid() && scope.isNormal();
     }
 
     public boolean isPassivatingScope(Class<? extends Annotation> annotationType) {
-        ScopeModel<?> scope = getServices().get(MetaAnnotationStore.class).getScopeModel(annotationType);
+        ScopeModel<?> scope = getMetaAnnotationStore().getScopeModel(annotationType);
         return scope.isValid() && scope.isPassivating();
     }
 
     public boolean isScope(Class<? extends Annotation> annotationType) {
-        return getServices().get(MetaAnnotationStore.class).getScopeModel(annotationType).isValid();
+        return getMetaAnnotationStore().getScopeModel(annotationType).isValid();
     }
 
     public boolean isStereotype(Class<? extends Annotation> annotationType) {
-        return getServices().get(MetaAnnotationStore.class).getStereotype(annotationType).isValid();
+        return getMetaAnnotationStore().getStereotype(annotationType).isValid();
+    }
+
+    public MetaAnnotationStore getMetaAnnotationStore() {
+        return getServices().get(MetaAnnotationStore.class);
     }
 
     public ELResolver getELResolver() {
@@ -1059,6 +1083,38 @@ public <X> InjectionTarget<X> fireProcessInjectionTarget(AnnotatedType<X> annota
         return AbstractProcessInjectionTarget.fire(this, annotatedType, createInjectionTarget(annotatedType));
     }
 
+    public Set<Annotation> extractInterceptorBindings(Iterable<Annotation> annotations) {
+        Set<Annotation> foundInterceptionBindingTypes = new HashSet<Annotation>();
+        for (Annotation annotation : annotations) {
+            if (isInterceptorBinding(annotation.annotationType())) {
+                foundInterceptionBindingTypes.add(annotation);
+            }
+        }
+        return foundInterceptionBindingTypes;
+    }
+
+    /**
+     * Extracts the complete set of interception bindings from a given set of
+     * annotations.
+     *
+     * @param annotations
+     * @return
+     */
+    public Set<Annotation> flattenInterceptorBindings(Set<Annotation> annotations) {
+        MetaAnnotationStore metaAnnotationStore = getMetaAnnotationStore();
+
+        Set<Annotation> foundInterceptionBindingTypes = new InterceptorBindingSet(this);
+        for (Annotation annotation : annotations) {
+            if (isInterceptorBinding(annotation.annotationType())) {
+                foundInterceptionBindingTypes.add(annotation);
+
+                InterceptorBindingModel<? extends Annotation> interceptorBindingModel = metaAnnotationStore.getInterceptorBindingModel(annotation.annotationType());
+                foundInterceptionBindingTypes.addAll(interceptorBindingModel.getInheritedInterceptionBindingTypes());
+            }
+        }
+        return foundInterceptionBindingTypes;
+    }
+
     private static class InstanceInjectionPoint implements InjectionPoint, Serializable {
 
         private static final InjectionPoint INSTANCE = new InstanceInjectionPoint();",2012-04-03T01:57:03Z,4
"@@ -113,6 +113,7 @@
  * @author David Allen
  * @author Marius Bogoevici
  * @author Ales Justin
+ * @author Marko Luksa
  */
 public class Beans {
     // TODO Convert messages
@@ -473,8 +474,9 @@ public static boolean containsAllInterceptionBindings(Set<Annotation> expectedBi
     }
 
     public static boolean findInterceptorBindingConflicts(BeanManagerImpl manager, Set<Annotation> bindings) {
+        Set<Annotation> flattenedBindings = manager.flattenInterceptorBindings(bindings);
         Map<Class<? extends Annotation>, Annotation> foundAnnotations = new HashMap<Class<? extends Annotation>, Annotation>();
-        for (Annotation binding : bindings) {
+        for (Annotation binding : flattenedBindings) {
             if (foundAnnotations.containsKey(binding.annotationType())) {
                 InterceptorBindingModel<?> bindingType = manager.getServices().get(MetaAnnotationStore.class).getInterceptorBindingModel(binding.annotationType());
                 if (!bindingType.isEqual(binding, foundAnnotations.get(binding.annotationType()), false)) {",2012-04-03T01:57:03Z,5
"@@ -0,0 +1,62 @@
+package org.jboss.weld.util;
+
+import org.jboss.weld.manager.BeanManagerImpl;
+import org.jboss.weld.metadata.cache.InterceptorBindingModel;
+import org.jboss.weld.metadata.cache.MetaAnnotationStore;
+
+import java.lang.annotation.Annotation;
+import java.util.AbstractSet;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Set;
+
+/**
+ * @author <a href=""mailto:marko.luksa@gmail.com"">Marko Luksa</a>
+ */
+public class InterceptorBindingSet extends AbstractSet<Annotation> {
+
+    private BeanManagerImpl beanManager;
+    private Set<Annotation> set = new HashSet<Annotation>();
+
+    public InterceptorBindingSet(BeanManagerImpl beanManager) {
+        this.beanManager = beanManager;
+    }
+
+    @Override
+    public boolean add(Annotation annotation) {
+        if (contains(annotation)) {
+            return false;
+        }
+        return set.add(annotation);
+    }
+
+    @Override
+    public Iterator<Annotation> iterator() {
+        return set.iterator();
+    }
+
+    @Override
+    public int size() {
+        return set.size();
+    }
+
+
+    public boolean contains(Object o) {
+        if (o instanceof Annotation) {
+            Annotation annotation = (Annotation) o;
+
+            MetaAnnotationStore metaAnnotationStore = beanManager.getMetaAnnotationStore();
+            InterceptorBindingModel<? extends Annotation> interceptorBindingModel = metaAnnotationStore.getInterceptorBindingModel(annotation.annotationType());
+
+            for (Annotation containedAnnotation : set) {
+                if (interceptorBindingModel.isEqual(annotation, containedAnnotation)) {
+                    return true;
+                }
+            }
+            return false;
+        } else {
+            return super.contains(o);
+        }
+    }
+
+}",2012-04-03T01:57:03Z,6
"@@ -73,7 +73,6 @@ public void testInterceptorBindingRecognized() {
     }
 
     @Test
-    @Ignore(""WELD-999"")
     public void testTransitivityOfInterceptorBindings() {
         // non-transitive bindings
         assertEquals(1, manager.resolveInterceptors(InterceptionType.AROUND_INVOKE, new SynchronizedLiteral()).size());",2012-04-03T01:57:03Z,7
"@@ -4,12 +4,12 @@
     <groupId>org.jboss.weld</groupId>
     <artifactId>weld-core-jboss-as6-updater</artifactId>
     <packaging>pom</packaging>
-    <version>1.1.12-SNAPSHOT</version>
+    <version>1.1.14-SNAPSHOT</version>
 
     <parent>
         <groupId>org.jboss.weld</groupId>
         <artifactId>weld-core-parent</artifactId>
-        <version>1.1.12-SNAPSHOT</version>
+        <version>1.1.14-SNAPSHOT</version>
         <relativePath>../../pom.xml</relativePath>
     </parent>
 ",2013-07-03T12:53:30Z,8
"@@ -4,12 +4,12 @@
     <groupId>org.jboss.weld</groupId>
     <artifactId>weld-core-jboss-as7-updater</artifactId>
     <packaging>pom</packaging>
-    <version>1.1.12-SNAPSHOT</version>
+    <version>1.1.14-SNAPSHOT</version>
 
     <parent>
         <groupId>org.jboss.weld</groupId>
         <artifactId>weld-core-parent</artifactId>
-        <version>1.1.12-SNAPSHOT</version>
+        <version>1.1.14-SNAPSHOT</version>
         <relativePath>../../pom.xml</relativePath>
     </parent>
 ",2013-07-03T12:53:30Z,9
"@@ -16,22 +16,31 @@
  */
 package org.jboss.weld.annotated;
 
+import static org.jboss.weld.logging.Category.BOOTSTRAP;
+import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
 import static org.jboss.weld.logging.messages.MetadataMessage.INVALID_PARAMETER_POSITION;
 import static org.jboss.weld.logging.messages.MetadataMessage.METADATA_SOURCE_RETURNED_NULL;
+import static org.jboss.weld.logging.messages.MetadataMessage.NOT_IN_HIERARCHY;
+import static org.jboss.weld.logging.messages.MetadataMessage.NO_CONSTRUCTOR;
+
+import java.util.HashSet;
+import java.util.Set;
 
 import javax.enterprise.inject.spi.Annotated;
 import javax.enterprise.inject.spi.AnnotatedMember;
 import javax.enterprise.inject.spi.AnnotatedParameter;
 import javax.enterprise.inject.spi.AnnotatedType;
 
 import org.jboss.weld.exceptions.IllegalArgumentException;
+import org.slf4j.cal10n.LocLogger;
 
 /**
  * Validates that methods of an {@link Annotated} implementation return sane values.
  * @author Jozef Hartinger
  *
  */
 public class AnnotatedTypeValidator {
+    private static final LocLogger log = loggerFactory().getLogger(BOOTSTRAP);
 
     private AnnotatedTypeValidator() {
     }
@@ -62,11 +71,40 @@ public static void validateAnnotatedType(AnnotatedType<?> type) {
         checkNotNull(type.getFields(), ""getFields()"", type);
         checkNotNull(type.getConstructors(), ""getConstructors()"", type);
         checkNotNull(type.getMethods(), ""getMethods()"", type);
+        checkSensibility(type);
     }
 
     private static void checkNotNull(Object expression, String methodName, Object target) {
         if (expression == null) {
             throw new IllegalArgumentException(METADATA_SOURCE_RETURNED_NULL, methodName, target);
         }
     }
+
+    /**
+     * Checks if the given AnnotatedType is sensible, otherwise provides warnings.
+     */
+    private static void checkSensibility(AnnotatedType<?> type) {
+        // check if it has a constructor
+        if (type.getConstructors().isEmpty() && !type.getJavaClass().isInterface()) {
+            log.warn(NO_CONSTRUCTOR, type);
+        }
+
+        Set<Class<?>> hierarchy = new HashSet<Class<?>>();
+        for (Class<?> clazz = type.getJavaClass(); clazz != null; clazz = clazz.getSuperclass()) {
+            hierarchy.add(clazz);
+        }
+
+        checkMembersBelongToHierarchy(type.getConstructors(), hierarchy, type);
+        checkMembersBelongToHierarchy(type.getMethods(), hierarchy, type);
+        checkMembersBelongToHierarchy(type.getFields(), hierarchy, type);
+    }
+
+    private static void checkMembersBelongToHierarchy(Iterable<? extends AnnotatedMember<?>> members, Set<Class<?>> hierarchy, AnnotatedType<?> type) {
+        for (AnnotatedMember<?> member : members) {
+            if (!hierarchy.contains(member.getJavaMember().getDeclaringClass())) {
+                log.warn(NOT_IN_HIERARCHY, member.toString(), type.toString());
+            }
+        }
+    }
+
 }",2013-06-03T14:39:48Z,11
"@@ -51,4 +51,6 @@ public enum MetadataMessage {
     @MessageId(""001113"")NOT_A_SCOPE,
     @MessageId(""001114"")METADATA_SOURCE_RETURNED_NULL,
     @MessageId(""001115"")INVALID_PARAMETER_POSITION,
+    @MessageId(""001116"")NO_CONSTRUCTOR,
+    @MessageId(""001117"")NOT_IN_HIERARCHY;
 }",2013-06-03T14:39:48Z,12
"@@ -16,6 +16,7 @@
  */
 package org.jboss.weld.manager;
 
+import static org.jboss.weld.annotated.AnnotatedTypeValidator.validateAnnotatedType;
 import static org.jboss.weld.logging.Category.BOOTSTRAP;
 import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
 import static org.jboss.weld.logging.messages.BeanManagerMessage.AMBIGUOUS_BEANS_FOR_DEPENDENCY;
@@ -1380,6 +1381,7 @@ public <T> InjectionTargetFactoryImpl<T> getLocalInjectionTargetFactory(Annotate
      */
     @Override
     public <T> InjectionTargetFactoryImpl<T> getInjectionTargetFactory(AnnotatedType<T> type) {
+        validateAnnotatedType(type);
         BeanManagerImpl manager = BeanManagerLookupService.lookupBeanManager(type.getJavaClass(), this);
         return new InjectionTargetFactoryImpl<T>(type, manager);
     }",2013-06-03T14:39:48Z,4
"@@ -16,8 +16,6 @@
  */
 package org.jboss.weld.manager;
 
-import static org.jboss.weld.annotated.AnnotatedTypeValidator.validateAnnotatedType;
-
 import javax.enterprise.inject.spi.AnnotatedType;
 import javax.enterprise.inject.spi.Bean;
 import javax.enterprise.inject.spi.Decorator;
@@ -57,7 +55,6 @@ public class InjectionTargetFactoryImpl<T> implements WeldInjectionTargetFactory
 
     protected InjectionTargetFactoryImpl(AnnotatedType<T> type, BeanManagerImpl manager) {
         this.manager = manager;
-        validateAnnotatedType(type);
         this.type = manager.getServices().get(ClassTransformer.class).getEnhancedAnnotatedType(type, manager.getId());
         this.injectionTargetService = manager.getServices().get(InjectionTargetService.class);
         this.injectionServices = manager.getServices().get(InjectionServices.class);",2013-06-03T14:39:48Z,13
"@@ -14,3 +14,5 @@ TYPES_EMPTY=BeanAttributes.getTypes() may not return an empty set {0}
 NOT_A_SCOPE={0} defined on {1} is not a scope annotation
 METADATA_SOURCE_RETURNED_NULL={0} returned null for {1}
 INVALID_PARAMETER_POSITION=Parameter position {0} of parameter {1} is not valid
+NO_CONSTRUCTOR=AnnotatedType ({0}) without a constructor
+NOT_IN_HIERARCHY=Member ({0}) does not belong to the actual class hierarchy of the annotatedType ({1})",2013-06-03T14:39:48Z,14
"@@ -27,7 +27,7 @@
 import static org.jboss.weld.logging.messages.BeanMessage.ONLY_ONE_SCOPE_ALLOWED;
 import static org.jboss.weld.logging.messages.BeanMessage.PRODUCER_CAST_ERROR;
 import static org.jboss.weld.logging.messages.BeanMessage.PRODUCER_METHOD_WITH_TYPE_VARIABLE_RETURN_TYPE_MUST_BE_DEPENDENT;
-import static org.jboss.weld.logging.messages.BeanMessage.PRODUCER_METHOD_WITH_WILDCARD_RETURN_TYPE_MUST_BE_DEPENDENT;
+import static org.jboss.weld.logging.messages.BeanMessage.PRODUCER_METHOD_CANNOT_HAVE_A_WILDCARD_RETURN_TYPE;
 import static org.jboss.weld.logging.messages.BeanMessage.RETURN_TYPE_MUST_BE_CONCRETE;
 import static org.jboss.weld.logging.messages.BeanMessage.USING_DEFAULT_SCOPE;
 import static org.jboss.weld.logging.messages.BeanMessage.USING_SCOPE;
@@ -183,7 +183,7 @@ else if (getWeldAnnotated().isParameterizedType())
             }
             else if (type instanceof WildcardType)
             {
-               throw new DefinitionException(PRODUCER_METHOD_WITH_WILDCARD_RETURN_TYPE_MUST_BE_DEPENDENT, getWeldAnnotated());
+               throw new DefinitionException(PRODUCER_METHOD_CANNOT_HAVE_A_WILDCARD_RETURN_TYPE, getWeldAnnotated());
             }
          }
       }",2010-11-13T19:05:55Z,15
"@@ -133,7 +133,7 @@ public enum BeanMessage
    @MessageId(""000095"") GENERIC_SESSION_BEAN_MUST_BE_DEPENDENT,
    @MessageId(""000096"") PRODUCER_FIELD_ON_SESSION_BEAN_MUST_BE_STATIC,
    @MessageId(""000097"") PRODUCER_METHOD_WITH_TYPE_VARIABLE_RETURN_TYPE_MUST_BE_DEPENDENT,
-   @MessageId(""000098"") PRODUCER_METHOD_WITH_WILDCARD_RETURN_TYPE_MUST_BE_DEPENDENT,
+   @MessageId(""000098"") PRODUCER_METHOD_CANNOT_HAVE_A_WILDCARD_RETURN_TYPE,
    @MessageId(""000099"") CANNOT_LOAD_CLASS,
    @MessageId(""001500"") PROXY_DESERIALIZATION_FAILURE,
    @MessageId(""001501"") BEAN_INSTANCE_NOT_SET_ON_PROXY,",2010-11-13T19:05:55Z,16
"@@ -96,7 +96,7 @@ INJECTED_FIELD_CANNOT_BE_PRODUCER=Injected field {0} cannot be annotated @Produc
 GENERIC_SESSION_BEAN_MUST_BE_DEPENDENT=Session bean with generic class {0} must be @Depedent scope
 PRODUCER_FIELD_ON_SESSION_BEAN_MUST_BE_STATIC=Producer fields on session beans must be static. Field {0} declared on {1}
 PRODUCER_METHOD_WITH_TYPE_VARIABLE_RETURN_TYPE_MUST_BE_DEPENDENT=A producer method with a parameterized return type with a type variable must be declared @Dependent scoped. Method {0}
-PRODUCER_METHOD_WITH_WILDCARD_RETURN_TYPE_MUST_BE_DEPENDENT=A producer method cannot have a return type parameterized with wildcards. Method {0}  
+PRODUCER_METHOD_CANNOT_HAVE_A_WILDCARD_RETURN_TYPE=A producer method cannot have a return type parameterized with wildcards. Method {0}  
 CANNOT_LOAD_CLASS=Cannot load class {0} during deserialization of proxy
 PROXY_DESERIALIZATION_FAILURE=Failed to deserialize proxy object
 BEAN_INSTANCE_NOT_SET_ON_PROXY=Method call requires a BeanInstance which has not been set for this proxy",2010-11-13T19:05:55Z,17
"@@ -78,17 +78,6 @@ protected <T> void processBean(Bean<T> b) {
         ExternalBeanAttributesFactory.validateBeanAttributes(bean, beanManager);
         ContainerLifecycleEvents containerLifecycleEvents = beanManager.getServices().get(ContainerLifecycleEvents.class);
 
-        // ProcessBeanAttributes for the Bean
-        ProcessBeanAttributesImpl<T> event = containerLifecycleEvents.fireProcessBeanAttributes(beanManager, bean, null, bean.getBeanClass());
-        if (event != null) {
-            if (event.isVeto()) {
-                return;
-            }
-            if (event.isDirty()) {
-                bean = setBeanAttributes(bean, ExternalBeanAttributesFactory.of(event.getBeanAttributes(), getBeanManager()));
-            }
-        }
-
         if (bean instanceof Interceptor<?>) {
             beanManager.addInterceptor((Interceptor<?>) bean);
         } else if (bean instanceof Decorator<?>) {",2013-03-18T19:40:12Z,51
"@@ -1,6 +1,6 @@
 /*
  * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
+ * Copyright 2013, Red Hat, Inc., and individual contributors
  * by the @authors tag. See the copyright.txt in the distribution for a
  * full listing of individual contributors.
  *
@@ -14,8 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic;
 
-public interface Vehicle {
+package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.notfired;
 
+public abstract class Foo {
 }",2013-03-18T19:40:12Z,52
"@@ -0,0 +1,103 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2013, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.notfired;
+
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Type;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
+
+import javax.enterprise.context.Dependent;
+import javax.enterprise.context.spi.CreationalContext;
+import javax.enterprise.event.Observes;
+import javax.enterprise.inject.spi.AfterBeanDiscovery;
+import javax.enterprise.inject.spi.Bean;
+import javax.enterprise.inject.spi.Extension;
+import javax.enterprise.inject.spi.InjectionPoint;
+import javax.enterprise.inject.spi.ProcessBeanAttributes;
+
+public class MyExtension implements Extension {
+
+    public static int processBeanAttributesInvocationCount;
+
+    public void addBean(@Observes AfterBeanDiscovery abd) {
+        abd.addBean(new Bean<Foo>() {
+            @Override
+            public Class<?> getBeanClass() {
+                return Foo.class;
+            }
+
+            @Override
+            public Set<InjectionPoint> getInjectionPoints() {
+                return Collections.emptySet();
+            }
+
+            @Override
+            public boolean isNullable() {
+                return false;
+            }
+
+            @Override
+            public Set<Type> getTypes() {
+                return new HashSet<Type>(Arrays.asList(getBeanClass()));
+            }
+
+            @Override
+            public Set<Annotation> getQualifiers() {
+                return Collections.emptySet();
+            }
+
+            @Override
+            public Class<? extends Annotation> getScope() {
+                return Dependent.class;
+            }
+
+            @Override
+            public String getName() {
+                return null;
+            }
+
+            @Override
+            public Set<Class<? extends Annotation>> getStereotypes() {
+                return Collections.emptySet();
+            }
+
+            @Override
+            public boolean isAlternative() {
+                return false;
+            }
+
+            @Override
+            public Foo create(CreationalContext<Foo> creationalContext) {
+                return null;
+            }
+
+            @Override
+            public void destroy(Foo instance, CreationalContext<Foo> creationalContext) {
+            }
+        });
+    }
+
+    public void processBeanAttributes(@Observes ProcessBeanAttributes<?> event) {
+        if (!ProgrammaticallyAddedProcessBeanAttributesTest.IGNORE_ME.equals(event.getBeanAttributes().getName())) {
+            processBeanAttributesInvocationCount++;
+        }
+    }
+}",2013-03-18T19:40:12Z,53
"@@ -1,6 +1,6 @@
 /*
  * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
+ * Copyright 2013, Red Hat, Inc., and individual contributors
  * by the @authors tag. See the copyright.txt in the distribution for a
  * full listing of individual contributors.
  *
@@ -14,43 +14,41 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.notfired;
 
-import java.util.Set;
-
-import javax.enterprise.inject.spi.Bean;
-import javax.enterprise.inject.spi.BeanManager;
 import javax.enterprise.inject.spi.Extension;
+import javax.inject.Named;
 
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.arquillian.junit.Arquillian;
 import org.jboss.shrinkwrap.api.Archive;
 import org.jboss.shrinkwrap.api.BeanArchive;
 import org.jboss.shrinkwrap.api.ShrinkWrap;
-import org.jboss.weld.literal.AnyLiteral;
-import org.jboss.weld.tests.util.BeanUtilities;
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+/**
+ * @author <a href=""mailto:mluksa@redhat.com"">Marko Luksa</a>
+ */
 @RunWith(Arquillian.class)
-public class ProcessBeanAttributesFiredForSyntheticBeanTest {
+@Named(ProgrammaticallyAddedProcessBeanAttributesTest.IGNORE_ME)
+public class ProgrammaticallyAddedProcessBeanAttributesTest {
+
+    public static final String IGNORE_ME = ""ignoreMe"";
 
     @Deployment
     public static Archive<?> getDeployment() {
-        return ShrinkWrap.create(BeanArchive.class).alternate(Bicycle.class).addPackage(Bicycle.class.getPackage()).addClass(BeanUtilities.class)
-                .addAsServiceProvider(Extension.class, BicycleExtension.class, ModifyingExtension.class);
+        return ShrinkWrap.create(BeanArchive.class)
+                .addClasses(Foo.class, MyExtension.class)
+                .addAsServiceProvider(Extension.class, MyExtension.class);
     }
 
     @Test
-    public void test(BeanManager manager, BicycleExtension bicycleExtension, ModifyingExtension modifyingExtension) {
-        assertTrue(bicycleExtension.isVetoed());
-        assertTrue(modifyingExtension.isModified());
-        Set<Bean<?>> beans = manager.getBeans(Bicycle.class, AnyLiteral.INSTANCE);
-        assertEquals(1, beans.size());
-        Bean<?> bean = beans.iterator().next();
-        Validator.validateAfterModification(bean);
+    public void testProcessBeanAttributesIsNotFiredForProgrammaticallyAddedOrBuiltInBeans() {
+        // if PBA is fired for any built-in beans, this will be > 0
+        // also if PBA is fired for FooBean, which is added programmatically, this will also be > 0
+        Assert.assertEquals(0, MyExtension.processBeanAttributesInvocationCount);
     }
 }",2013-03-18T19:40:12Z,54
"@@ -1,36 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic;
-
-import java.lang.annotation.Documented;
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import javax.enterprise.inject.Stereotype;
-
-import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.ElementType.TYPE;
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-
-@Stereotype
-@Target({ TYPE, METHOD, FIELD })
-@Retention(RUNTIME)
-@Documented
-public @interface BarStereotype {
-
-}",2013-03-18T19:40:12Z,55
"@@ -1,26 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic;
-
-import javax.enterprise.context.ApplicationScoped;
-
-@ApplicationScoped
-@FooStereotype
-@FooQualifier
-public class Bicycle implements Vehicle {
-
-}",2013-03-18T19:40:12Z,56
"@@ -1,62 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic;
-
-import java.util.Collections;
-import java.util.Set;
-
-import javax.enterprise.context.spi.CreationalContext;
-import javax.enterprise.inject.spi.Bean;
-import javax.enterprise.inject.spi.BeanAttributes;
-import javax.enterprise.inject.spi.InjectionPoint;
-
-import org.jboss.weld.util.bean.ForwardingBeanAttributes;
-
-public class BicycleBean extends ForwardingBeanAttributes<Bicycle> implements Bean<Bicycle> {
-
-    private BeanAttributes<Bicycle> delegate;
-
-    public BicycleBean(BeanAttributes<Bicycle> delegate) {
-        this.delegate = delegate;
-    }
-
-    public Bicycle create(CreationalContext<Bicycle> creationalContext) {
-        return new Bicycle();
-    }
-
-    public void destroy(Bicycle instance, CreationalContext<Bicycle> creationalContext) {
-    }
-
-    public Class<?> getBeanClass() {
-        return Bicycle.class;
-    }
-
-    public Set<InjectionPoint> getInjectionPoints() {
-        return Collections.emptySet();
-    }
-
-    @Override
-    public boolean isNullable() {
-        return false;
-    }
-
-    @Override
-    protected BeanAttributes<Bicycle> attributes() {
-        return delegate;
-    }
-
-}",2013-03-18T19:40:12Z,57
"@@ -1,48 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic;
-
-import javax.enterprise.event.Observes;
-import javax.enterprise.inject.spi.AfterBeanDiscovery;
-import javax.enterprise.inject.spi.BeanAttributes;
-import javax.enterprise.inject.spi.BeanManager;
-import javax.enterprise.inject.spi.Extension;
-import javax.enterprise.inject.spi.ProcessAnnotatedType;
-
-public class BicycleExtension implements Extension {
-
-    private boolean vetoed;
-
-    // we do not want the default bicycle bean
-    void vetoBicycleClass(@Observes ProcessAnnotatedType<Bicycle> event) {
-        event.veto();
-        vetoed = true;
-    }
-
-    void registerBicycle(@Observes AfterBeanDiscovery event, BeanManager manager) {
-        BeanAttributes<Bicycle> attributes = manager.createBeanAttributes(manager.createAnnotatedType(Bicycle.class));
-        
-        // validate what we got
-        Validator.validateBeforeModification(attributes);
-        
-        event.addBean(new BicycleBean(attributes));
-    }
-
-    public boolean isVetoed() {
-        return vetoed;
-    }
-}",2013-03-18T19:40:12Z,58
"@@ -1,37 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic;
-
-import java.lang.annotation.Documented;
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import javax.inject.Qualifier;
-
-import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.ElementType.PARAMETER;
-import static java.lang.annotation.ElementType.TYPE;
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-
-@Qualifier
-@Target({ TYPE, METHOD, PARAMETER, FIELD })
-@Retention(RUNTIME)
-@Documented
-public @interface FooQualifier {
-
-}",2013-03-18T19:40:12Z,59
"@@ -1,36 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic;
-
-import java.lang.annotation.Documented;
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import javax.enterprise.inject.Stereotype;
-
-import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.ElementType.TYPE;
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-
-@Stereotype
-@Target({ TYPE, METHOD, FIELD })
-@Retention(RUNTIME)
-@Documented
-public @interface FooStereotype {
-
-}",2013-03-18T19:40:12Z,60
"@@ -1,82 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic;
-
-import static org.junit.Assert.assertNull;
-
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Type;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Set;
-
-import javax.enterprise.context.RequestScoped;
-import javax.enterprise.event.Observes;
-import javax.enterprise.inject.spi.BeanAttributes;
-import javax.enterprise.inject.spi.Extension;
-import javax.enterprise.inject.spi.ProcessBeanAttributes;
-
-import org.jboss.weld.util.bean.ForwardingBeanAttributes;
-
-public class ModifyingExtension implements Extension {
-
-    private boolean modified;
-
-    void modifyBicycle(@Observes ProcessBeanAttributes<Bicycle> event) {
-        assertNull(event.getAnnotated());
-        final BeanAttributes<Bicycle> delegate = event.getBeanAttributes();
-
-        // validate what we got
-        Validator.validateBeforeModification(delegate);
-
-        event.setBeanAttributes(new ForwardingBeanAttributes<Bicycle>() {
-            @Override
-            public Set<Type> getTypes() {
-                Set<Type> types = new HashSet<Type>();
-                types.add(Object.class);
-                types.add(Bicycle.class);
-                return types;
-            }
-
-            @Override
-            public Class<? extends Annotation> getScope() {
-                return RequestScoped.class;
-            }
-
-            @Override
-            public Set<Class<? extends Annotation>> getStereotypes() {
-                return Collections.<Class<? extends Annotation>> singleton(BarStereotype.class);
-            }
-
-            @Override
-            public boolean isAlternative() {
-                return true;
-            }
-
-            @Override
-            protected BeanAttributes<Bicycle> attributes() {
-                return delegate;
-            }
-        });
-        modified = true;
-    }
-
-    public boolean isModified() {
-        return modified;
-    }
-
-}",2013-03-18T19:40:12Z,61
"@@ -1,48 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic;
-
-import static org.jboss.weld.tests.util.BeanUtilities.verifyQualifierTypes;
-import static org.jboss.weld.tests.util.BeanUtilities.verifyStereotypes;
-import static org.jboss.weld.tests.util.BeanUtilities.verifyTypes;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
-import javax.enterprise.context.ApplicationScoped;
-import javax.enterprise.context.RequestScoped;
-import javax.enterprise.inject.Any;
-import javax.enterprise.inject.spi.BeanAttributes;
-
-public class Validator {
-
-    public static void validateBeforeModification(BeanAttributes<?> attributes) {
-        assertEquals(ApplicationScoped.class, attributes.getScope());
-        verifyStereotypes(attributes, FooStereotype.class);
-        verifyTypes(attributes, Object.class, Vehicle.class, Bicycle.class);
-        verifyQualifierTypes(attributes, FooQualifier.class, Any.class);
-        assertFalse(attributes.isAlternative());
-    }
-
-    public static void validateAfterModification(BeanAttributes<?> attributes) {
-        assertEquals(RequestScoped.class, attributes.getScope());
-        verifyStereotypes(attributes, BarStereotype.class);
-        verifyTypes(attributes, Object.class, Bicycle.class);
-        verifyQualifierTypes(attributes, FooQualifier.class, Any.class);
-        assertTrue(attributes.isAlternative());
-    }
-}",2013-03-18T19:40:12Z,62
"@@ -1,44 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic.interceptor;
-
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.ElementType.TYPE;
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-
-import java.lang.annotation.Inherited;
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import javax.enterprise.util.AnnotationLiteral;
-import javax.interceptor.InterceptorBinding;
-
-@InterceptorBinding
-@Inherited
-@Target({ TYPE, METHOD })
-@Retention(RUNTIME)
-public @interface BarBinding {
-
-    @SuppressWarnings(""all"")
-    public class Literal extends AnnotationLiteral<BarBinding> implements BarBinding {
-        public static final Literal INSTANCE = new Literal();
-
-        private Literal() {
-        }
-
-    }
-}",2013-03-18T19:40:12Z,63
"@@ -1,33 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic.interceptor;
-
-import javax.interceptor.InvocationContext;
-
-public class ExternalInterceptor {
-
-    Object intercept(InvocationContext ctx) {
-        try {
-            return ctx.proceed();
-        } catch (Exception e) {
-            if (e instanceof RuntimeException) {
-                throw (RuntimeException) e;
-            }
-            throw new RuntimeException(e);
-        }
-    }
-}",2013-03-18T19:40:12Z,64
"@@ -1,79 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic.interceptor;
-
-import java.lang.annotation.Annotation;
-import java.util.Collections;
-import java.util.Set;
-
-import javax.enterprise.context.spi.CreationalContext;
-import javax.enterprise.inject.spi.BeanAttributes;
-import javax.enterprise.inject.spi.InjectionPoint;
-import javax.enterprise.inject.spi.InterceptionType;
-import javax.enterprise.inject.spi.Interceptor;
-import javax.interceptor.InvocationContext;
-
-import org.jboss.weld.util.bean.ForwardingBeanAttributes;
-
-public class ExternalInterceptorBean extends ForwardingBeanAttributes<ExternalInterceptor> implements Interceptor<ExternalInterceptor> {
-
-    private final ExternalInterceptor instance = new ExternalInterceptor();
-    private final BeanAttributes<ExternalInterceptor> delegate;
-    private final Annotation binding;
-
-    public ExternalInterceptorBean(BeanAttributes<ExternalInterceptor> delegate, Annotation binding) {
-        this.delegate = delegate;
-        this.binding = binding;
-    }
-
-    public Class<?> getBeanClass() {
-        return ExternalInterceptor.class;
-    }
-
-    public Set<InjectionPoint> getInjectionPoints() {
-        return Collections.emptySet();
-    }
-
-    public ExternalInterceptor create(CreationalContext<ExternalInterceptor> creationalContext) {
-        return instance;
-    }
-
-    public void destroy(ExternalInterceptor instance, CreationalContext<ExternalInterceptor> creationalContext) {
-    }
-
-    public Set<Annotation> getInterceptorBindings() {
-        return Collections.<Annotation> singleton(binding);
-    }
-
-    public boolean intercepts(InterceptionType type) {
-        return true;
-    }
-
-    public Object intercept(InterceptionType type, ExternalInterceptor instance, InvocationContext ctx) throws Exception {
-        return instance.intercept(ctx);
-    }
-
-    @Override
-    protected BeanAttributes<ExternalInterceptor> attributes() {
-        return delegate;
-    }
-
-    @Override
-    public boolean isNullable() {
-        return false;
-    }
-}",2013-03-18T19:40:12Z,65
"@@ -1,67 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic.interceptor;
-
-import javax.enterprise.event.Observes;
-import javax.enterprise.inject.spi.AfterBeanDiscovery;
-import javax.enterprise.inject.spi.AnnotatedType;
-import javax.enterprise.inject.spi.BeanAttributes;
-import javax.enterprise.inject.spi.BeanManager;
-import javax.enterprise.inject.spi.Extension;
-import javax.enterprise.inject.spi.ProcessAnnotatedType;
-import javax.enterprise.inject.spi.ProcessBeanAttributes;
-
-public class ExternalInterceptorExtension implements Extension {
-
-    private boolean typeVetoed;
-    private boolean beanRegistered;
-    private boolean beanVetoed;
-
-    void vetoInterceptorClass(@Observes ProcessAnnotatedType<ExternalInterceptor> event) {
-        event.veto();
-        typeVetoed = true;
-    }
-
-    void registerInterceptor(@Observes AfterBeanDiscovery event, BeanManager manager) {
-        AnnotatedType<ExternalInterceptor> annotated = manager.createAnnotatedType(ExternalInterceptor.class);
-        BeanAttributes<ExternalInterceptor> attributes = manager.createBeanAttributes(annotated);
-        // register the interceptor two times, each time with a different binding
-        event.addBean(new ExternalInterceptorBean(attributes, FooBinding.Literal.INSTANCE));
-        event.addBean(new ExternalInterceptorBean(attributes, BarBinding.Literal.INSTANCE));
-        beanRegistered = true;
-    }
-
-    // veto one of the interceptors
-    void vetoBean(@Observes ProcessBeanAttributes<ExternalInterceptor> event) {
-        if (!beanVetoed) {
-            event.veto();
-            beanVetoed = true;
-        }
-    }
-
-    public boolean isTypeVetoed() {
-        return typeVetoed;
-    }
-
-    public boolean isBeanRegistered() {
-        return beanRegistered;
-    }
-
-    public boolean isBeanVetoed() {
-        return beanVetoed;
-    }
-}",2013-03-18T19:40:12Z,66
"@@ -1,44 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic.interceptor;
-
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.ElementType.TYPE;
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-
-import java.lang.annotation.Inherited;
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import javax.enterprise.util.AnnotationLiteral;
-import javax.interceptor.InterceptorBinding;
-
-@InterceptorBinding
-@Inherited
-@Target({ TYPE, METHOD })
-@Retention(RUNTIME)
-public @interface FooBinding {
-
-    @SuppressWarnings(""all"")
-    public class Literal extends AnnotationLiteral<FooBinding> implements FooBinding {
-        public static final Literal INSTANCE = new Literal();
-
-        private Literal() {
-        }
-
-    }
-}",2013-03-18T19:40:12Z,67
"@@ -1,53 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic.interceptor;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-import javax.enterprise.inject.spi.BeanManager;
-import javax.enterprise.inject.spi.Extension;
-import javax.enterprise.inject.spi.InterceptionType;
-
-import org.jboss.arquillian.container.test.api.Deployment;
-import org.jboss.arquillian.junit.Arquillian;
-import org.jboss.shrinkwrap.api.Archive;
-import org.jboss.shrinkwrap.api.BeanArchive;
-import org.jboss.shrinkwrap.api.ShrinkWrap;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-@RunWith(Arquillian.class)
-public class SyntheticInterceptorVetoedTest {
-
-    @Deployment
-    public static Archive<?> getDeployment() {
-        return ShrinkWrap.create(BeanArchive.class).intercept(ExternalInterceptor.class).addPackage(ExternalInterceptor.class.getPackage())
-                .addAsServiceProvider(Extension.class, ExternalInterceptorExtension.class);
-    }
-
-    @Test
-    public void testSyntheticInterceptorBeanCanBeVetoed(ExternalInterceptorExtension extension, BeanManager manager) {
-        assertTrue(extension.isTypeVetoed());
-        assertTrue(extension.isBeanRegistered());
-        assertTrue(extension.isBeanVetoed());
-        // verify that one of these is vetoed (we do not know which one)
-        int fooInterceptors = manager.resolveInterceptors(InterceptionType.AROUND_INVOKE, FooBinding.Literal.INSTANCE).size();
-        int barInterceptors = manager.resolveInterceptors(InterceptionType.AROUND_INVOKE, BarBinding.Literal.INSTANCE).size();
-        assertEquals(1, fooInterceptors + barInterceptors);
-    }
-}",2013-03-18T19:40:12Z,68
"@@ -11,7 +11,8 @@
    express or implied. * See the License for the specific language
    governing permissions and * limitations under the License. */
 -->
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
     <parent>
         <artifactId>weld-core-parent</artifactId>
         <groupId>org.jboss.weld</groupId>
@@ -91,7 +92,7 @@
                             org.jboss.weld.manager;
                             org.jboss.weld.servlet;
                             org.jboss.weld.util;
-                            org.jboss.interceptor.*;
+                            org.jboss.weld.interceptor.*;
                             version=${osgi.version},
                             org.jboss.weld.el;
                             version=${osgi.version},
@@ -113,7 +114,8 @@
                              on foreign bundles.
                         -->
                         <Import-Package>
-                            org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=""[${slf4j.version},$${version;=+;${slf4j.version}})""; resolution:=optional,
+                            org.slf4j; org.slf4j.spi; org.slf4j.helpers;
+                            version=""[${slf4j.version},$${version;=+;${slf4j.version}})""; resolution:=optional,
                             ch.qos.cal10n; version=${cal10n.version}; resolution:=optional,
                             javax.interceptor.*, *;
                             resolution:=optional",2012-10-12T10:31:32Z,10
"@@ -46,8 +46,8 @@ public WeldCDIContainerFactory() {
         logger.debug(""Creation of a new Weld CDI container factory"");
         blackList = new HashSet<String>();
         blackList.add(""java.io.Serializable"");
-        blackList.add(""org.jboss.interceptor.proxy.LifecycleMixin"");
-        blackList.add(""org.jboss.interceptor.util.proxy.TargetInstanceProxy"");
+        blackList.add(""org.jboss.weld.interceptor.proxy.LifecycleMixin"");
+        blackList.add(""org.jboss.weld.interceptor.util.proxy.TargetInstanceProxy"");
         blackList.add(""javassist.util.proxy.ProxyObject"");
     }
 ",2012-10-12T10:31:32Z,131
"@@ -103,17 +103,17 @@ Import-Package org.jboss.weld.environment.osgi.api; \
                ch.qos.cal10n; \
                ch.qos.cal10n.verifier; \
                ch.qos.cal10n.util; version=0.7.2, \
-               org.jboss.interceptor.reader; \
-               org.jboss.interceptor.reader.cache; \
-               org.jboss.interceptor.spi.instance; \
-               org.jboss.interceptor.spi.context; \
-               org.jboss.interceptor.spi.model; \
-               org.jboss.interceptor.spi.metadata; \
-               org.jboss.interceptor.util; \
-               org.jboss.interceptor.util.proxy; \
-               org.jboss.interceptor.proxy; \
-               org.jboss.interceptor.proxy.javassist; \
-               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.interceptor.reader; \
+               org.jboss.weld.interceptor.reader.cache; \
+               org.jboss.weld.interceptor.spi.instance; \
+               org.jboss.weld.interceptor.spi.context; \
+               org.jboss.weld.interceptor.spi.model; \
+               org.jboss.weld.interceptor.spi.metadata; \
+               org.jboss.weld.interceptor.util; \
+               org.jboss.weld.interceptor.util.proxy; \
+               org.jboss.weld.interceptor.proxy; \
+               org.jboss.weld.interceptor.proxy.javassist; \
+               org.jboss.weld.interceptor.builder; \
                org.jboss.weld.manager.api; \
                org.jboss.weld.ejb.spi; \
                org.jboss.weld.ejb.spi.helpers; \
@@ -189,6 +189,6 @@ Import-Package org.jboss.weld.environment.osgi.api; \
                org.jboss.weld.environment.se.discovery; \
                org.jboss.weld.environment.se.discovery.url; \
                org.jboss.weld.environment.se.contexts; \
-               org.jboss.weld.messages; version=1.1.5
+               org.jboss.weld.messages; version=1.2.0-SNAPSHOT
 
 DynamicImport-Package *
\ No newline at end of file",2012-10-12T10:31:32Z,132
"@@ -97,17 +97,17 @@ Export-Package javax.el;version=2.2.0, \
                ch.qos.cal10n; \
                ch.qos.cal10n.verifier; \
                ch.qos.cal10n.util; version=0.7.2, \
-               org.jboss.interceptor.reader; \
-               org.jboss.interceptor.reader.cache; \
-               org.jboss.interceptor.spi.instance; \
-               org.jboss.interceptor.spi.context; \
-               org.jboss.interceptor.spi.model; \
-               org.jboss.interceptor.spi.metadata; \
-               org.jboss.interceptor.util; \
-               org.jboss.interceptor.util.proxy; \
-               org.jboss.interceptor.proxy; \
-               org.jboss.interceptor.proxy.javassist; \
-               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.interceptor.reader; \
+               org.jboss.weld.interceptor.reader.cache; \
+               org.jboss.weld.interceptor.spi.instance; \
+               org.jboss.weld.interceptor.spi.context; \
+               org.jboss.weld.interceptor.spi.model; \
+               org.jboss.weld.interceptor.spi.metadata; \
+               org.jboss.weld.interceptor.util; \
+               org.jboss.weld.interceptor.util.proxy; \
+               org.jboss.weld.interceptor.proxy; \
+               org.jboss.weld.interceptor.proxy.javassist; \
+               org.jboss.weld.interceptor.builder; \
                org.jboss.weld.manager.api; \
                org.jboss.weld.ejb.spi; \
                org.jboss.weld.ejb.spi.helpers; \
@@ -183,7 +183,7 @@ Export-Package javax.el;version=2.2.0, \
                org.jboss.weld.environment.se.discovery; \
                org.jboss.weld.environment.se.discovery.url; \
                org.jboss.weld.environment.se.contexts; \
-               org.jboss.weld.messages; version=1.1.5
+               org.jboss.weld.messages; version=1.2.0-SNAPSHOT
 
 
 DynamicImport-Package *",2012-10-12T10:31:32Z,133
"@@ -233,14 +233,15 @@ private void fireAllEvent(AbstractServiceEvent event, Event broadcaster,
       {
          try
          {
+            // here singleton issue
             broadcaster.select(eventClass,
-                               filteredServicesQualifiers(event,
-                                                          new SpecificationAnnotation(clazz),
-                                                          instance)).fire(event);
+               filteredServicesQualifiers(event,
+                  new SpecificationAnnotation(clazz),
+                  instance)).fire(event);
          }
          catch(Throwable t)
          {
-            t.printStackTrace();
+            //t.printStackTrace();
          }
       }
    }",2012-10-12T10:30:48Z,134
"@@ -95,13 +95,13 @@ public void startCDIOSGi() throws Exception {
 
     public void stopCDIOSGi() throws Exception {
         logger.info(""CDI-OSGi stop bundle management"");
-        started.set(false);
         for (Bundle bundle : context.getBundles()) {
             logger.trace(""Scanning {}"", bundle.getSymbolicName());
             if (managed.get(bundle.getBundleId()) != null) {
                 stopManagement(bundle);
             }
         }
+        started.set(false);
     }
 
     @Override
@@ -206,52 +206,30 @@ private void stopManagement(Bundle bundle) {
         boolean set = CDIOSGiExtension.currentBundle.get() != null;
         CDIOSGiExtension.currentBundle.set(bundle.getBundleId());
         CDIContainer holder = managed.get(bundle.getBundleId());
-        if (holder != null) {
-            BundleHolder bundleHolder = holder.getInstance().select(BundleHolder.class).get();
-            //if (bundleHolder.getState().equals(BundleState.VALID)) {
-                logger.trace(""Firing the BundleState.INVALID event"");
-                //bundleHolder.setState(BundleState.INVALID);
-                holder.getBeanManager().fireEvent(new Invalid());
-            //}
-            if(started.get()) {
-                factory().removeContainer(bundle);
-            }
-            logger.trace(""The container {} has been unregistered"",holder);
-            logger.trace(""Firing the BundleContainerEvents.BundleContainerShutdown event"");
-            holder.getBeanManager().fireEvent(new BundleContainerEvents.BundleContainerShutdown(bundle.getBundleContext()));
-
-            Collection<ServiceRegistration> regs = holder.getRegistrations();
-            logger.trace(""Unregistering the container registrations"");
-            /**for (ServiceRegistration reg : regs) {
+        if (started.get() && managed.containsKey(bundle.getBundleId())) {
+            if (holder != null) {
+                BundleHolder bundleHolder = holder.getInstance().select(BundleHolder.class).get();
                 try {
-                    reg.unregister();
-                } catch (IllegalStateException e) {// Ignore
-                    //logger.warn(""Unable to unregister a service"" + e.getCause());
-                }
-            }
-            try {
-                // unregistration for managed services. It should be done by the OSGi framework
-                logger.trace(""Unregistering the container managed services"");
-                RegistrationsHolderImpl regsHolder = holder.getInstance().select(RegistrationsHolderImpl.class).get();
-                for (ServiceRegistration r : regsHolder.getRegistrations()) {
-                    try {
-                        r.unregister();
-                    } catch (Exception e) {
-                        // the service is already unregistered if shutdown is called when bundle is stopped
-                        // but with a manual boostrap, you can't be sure
-                        //System.out.println(""Service already unregistered."");
+                    logger.trace(""Firing the BundleState.INVALID event"");
+                    holder.getBeanManager().fireEvent(new Invalid());
+                    logger.trace(""The container {} has been unregistered"",holder);
+                    logger.trace(""Firing the BundleContainerEvents.BundleContainerShutdown event"");
+                    // here singleton issue ?
+                    holder.getBeanManager().fireEvent(new BundleContainerEvents.BundleContainerShutdown(bundle.getBundleContext()));
+                } catch (Throwable t) {}
+                logger.trace(""Shutting down the container {}"", holder);
+                //holder.shutdown();
+                managed.remove(bundle.getBundleId());
+                if(started.get()) {
+                    if (factoryRef != null) {
+                        factory().removeContainer(bundle);
                     }
                 }
-            } catch (Throwable t) {
-                t.printStackTrace();
-            }   **/
-
-            logger.trace(""Shutting down the container {}"", holder);
-            holder.shutdown();
-            managed.remove(bundle.getBundleId());
-            logger.debug(""Bundle {} is unmanaged"", bundle.getSymbolicName());
-        } else {
-            logger.debug(""Bundle {} is not a bean bundle"", bundle.getSymbolicName());
+                holder.shutdown();
+                logger.debug(""Bundle {} is unmanaged"", bundle.getSymbolicName());
+            } else {
+                logger.debug(""Bundle {} is not a bean bundle"", bundle.getSymbolicName());
+            }
         }
         if (!set) {
             CDIOSGiExtension.currentBundle.remove();",2012-10-12T10:30:48Z,135
"@@ -2,8 +2,6 @@ Bundle-Activator org.jboss.weld.environment.osgi.impl.Activator
 
 Export-Package org.jboss.weld.environment.osgi.impl.extension.service;version=${pom.version}
 
-Embed-Dependency *; scope=compile; inline=true; artifactId=!org.osgi.core|org.osgi.compendium|weld-osgi-core-api|weld-osgi-core-spi
-
 Import-Package org.jboss.weld.environment.osgi.api; \
                org.jboss.weld.environment.osgi.api.annotation; \
                org.jboss.weld.environment.osgi.api.events; \
@@ -35,7 +33,61 @@ Import-Package org.jboss.weld.environment.osgi.api; \
                javassist.tools; \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
-               javassist.tools.web; version=3.14.0
+               javassist.tools.web; version=3.14.0, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29
+
 
 DynamicImport-Package *
 ",2012-10-12T10:30:48Z,136
"@@ -1,35 +0,0 @@
-<configuration debug=""false"">
-
-    <appender name=""Console"" class=""ch.qos.logback.core.ConsoleAppender"">
-        <filter class=""ch.qos.logback.classic.filter.ThresholdFilter"">
-            <level>info</level>
-        </filter>
-        <encoder>
-            <pattern>
-                %d{HH:mm:ss.SSS} %-15.-15([%-14.-14(%.-13thread])) %-5level %.-1000(%logger{25} - %msg) %n
-            </pattern>
-        </encoder>
-    </appender>
-
-    <appender name=""Log"" class=""ch.qos.logback.core.FileAppender"">
-        <file>cdi-osgi.log</file>
-        <append>false</append>
-        <filter class=""ch.qos.logback.classic.filter.ThresholdFilter"">
-            <level>trace</level>
-        </filter>
-        <encoder>
-            <pattern>
-                %d{HH:mm:ss.SSS} %-15.-15([%-14.-14(%.-13thread])) %-5level %.-1000(%logger{25} - %msg) %n %xEx{full}
-            </pattern>
-            <!--<pattern>
-                %d{HH:mm:ss.SSS} [%thread] %-5level %caller{1} %logger{25} - %msg%n %xEx{full}
-            </pattern>-->
-        </encoder>
-    </appender>
-
-    <root level=""trace"">
-        <appender-ref ref=""Console""/>
-        <appender-ref ref=""Log""/>
-    </root>
-
-</configuration>
\ No newline at end of file",2012-10-12T10:30:48Z,137
"@@ -84,11 +84,6 @@
          <artifactId>jsr250-api</artifactId>
       </dependency>
 
-      <dependency>
-         <groupId>com.google.guava</groupId>
-         <artifactId>guava</artifactId>
-      </dependency>
-
       <dependency>
          <groupId>org.jboss.interceptor</groupId>
          <artifactId>jboss-interceptor-spi</artifactId>
@@ -104,6 +99,11 @@
          <artifactId>jboss-interceptor-api</artifactId>
       </dependency>
 
+      <dependency>
+         <groupId>com.google.guava</groupId>
+         <artifactId>guava</artifactId>
+      </dependency>
+
       <dependency>
          <groupId>ch.qos.cal10n</groupId>
          <artifactId>cal10n-api</artifactId>",2012-10-12T10:30:48Z,138
"@@ -2,11 +2,7 @@ Bundle-Activator org.jboss.weld.environment.osgi.impl.WeldActivator
 
 Export-Package org.jboss.weld.environment.osgi.impl.embedded; version=${pom.version}
 
-Embed-Dependency *; scope=compile; inline=true; artifactId=!weld-osgi-core-spi|weld-osgi-core-extension|jboss-interceptor-api|javax.inject|jsr250-api|cdi-api|el-api
-
-Import-Package org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=1.6.1; resolution:=optional, \
-               ch.qos.cal10n; version=0.7.2; resolution:=optional, \
-               org.jboss.weld.environment.osgi.api; \
+Import-Package org.jboss.weld.environment.osgi.api; \
                org.jboss.weld.environment.osgi.api.annotation; \
                org.jboss.weld.environment.osgi.api.events; \
                org.jboss.weld.environment.osgi.spi;version=${pom.version}, \
@@ -20,6 +16,7 @@ Import-Package org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=1.6.1; resol
                javax.enterprise.inject.spi; \
                javax.enterprise.util; version=1.0.0, \
                javax.interceptor; version=1.1.0, \
+               org.osgi.framework, \
                javassist; \
                javassist.bytecode; \
                javassist.bytecode.analysis; \
@@ -36,6 +33,162 @@ Import-Package org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=1.6.1; resol
                javassist.tools; \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
-               javassist.tools.web; version=3.14.0
+               javassist.tools.web; version=3.14.0, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; \
+               org.slf4j.cal10n; \
+               org.slf4j.profiler; \
+               org.slf4j.agent; \
+               org.slf4j.instrumentation; \
+               org.slf4j.ext; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29, \
+               com.google.common.primitives; \
+               com.google.common.collect; \
+               com.google.common.util.concurrent; \
+               com.google.common.io; \
+               com.google.common.net; \
+               com.google.common.annotations; \
+               com.google.common.base; \
+               com.google.common.base.internal, \
+               ch.qos.cal10n; \
+               ch.qos.cal10n.verifier; \
+               ch.qos.cal10n.util; version=0.7.2, \
+               org.jboss.interceptor.reader; \
+               org.jboss.interceptor.reader.cache; \
+               org.jboss.interceptor.spi.instance; \
+               org.jboss.interceptor.spi.context; \
+               org.jboss.interceptor.spi.model; \
+               org.jboss.interceptor.spi.metadata; \
+               org.jboss.interceptor.util; \
+               org.jboss.interceptor.util.proxy; \
+               org.jboss.interceptor.proxy; \
+               org.jboss.interceptor.proxy.javassist; \
+               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.manager.api; \
+               org.jboss.weld.ejb.spi; \
+               org.jboss.weld.ejb.spi.helpers; \
+               org.jboss.weld.ejb.api; \
+               org.jboss.weld.context; \
+               org.jboss.weld.context.ejb; \
+               org.jboss.weld.context.unbound; \
+               org.jboss.weld.context.bound; \
+               org.jboss.weld.context.api; \
+               org.jboss.weld.context.http; \
+               org.jboss.weld.validation.spi; \
+               org.jboss.weld.transaction.spi; \
+               org.jboss.weld.servlet.api; \
+               org.jboss.weld.servlet.api.helpers; \
+               org.jboss.weld.resources.spi; \
+               org.jboss.weld.resources.spi.helpers; \
+               org.jboss.weld.bootstrap.spi; \
+               org.jboss.weld.bootstrap.spi.helpers; \
+               org.jboss.weld.bootstrap.api; \
+               org.jboss.weld.bootstrap.api.helpers; \
+               org.jboss.weld.serialization.spi; \
+               org.jboss.weld.serialization.spi.helpers; \
+               org.jboss.weld.security.spi; \
+               org.jboss.weld.injection.spi; \
+               org.jboss.weld.injection.spi.helpers; \
+               org.jboss.weld; \
+               org.jboss.weld.manager; \
+               org.jboss.weld.jsf; \
+               org.jboss.weld.ejb; \
+               org.jboss.weld.event; \
+               org.jboss.weld.introspector; \
+               org.jboss.weld.introspector.jlr; \
+               org.jboss.weld.context.beanstore; \
+               org.jboss.weld.context.beanstore.ejb; \
+               org.jboss.weld.context.beanstore.http; \
+               org.jboss.weld.context.cache; \
+               org.jboss.weld.context.conversation; \
+               org.jboss.weld.util; \
+               org.jboss.weld.util.dom; \
+               org.jboss.weld.util.reflection; \
+               org.jboss.weld.util.reflection.instantiation; \
+               org.jboss.weld.util.el; \
+               org.jboss.weld.util.bytecode; \
+               org.jboss.weld.util.collections; \
+               org.jboss.weld.exceptions; \
+               org.jboss.weld.metadata; \
+               org.jboss.weld.metadata.cache; \
+               org.jboss.weld.el; \
+               org.jboss.weld.xml; \
+               org.jboss.weld.servlet; \
+               org.jboss.weld.ws; \
+               org.jboss.weld.bean; \
+               org.jboss.weld.bean.builtin; \
+               org.jboss.weld.bean.builtin.ee; \
+               org.jboss.weld.bean.proxy; \
+               org.jboss.weld.bean.proxy.util; \
+               org.jboss.weld.bean.interceptor; \
+               org.jboss.weld.resources; \
+               org.jboss.weld.literal; \
+               org.jboss.weld.bootstrap; \
+               org.jboss.weld.bootstrap.events; \
+               org.jboss.weld.logging; \
+               org.jboss.weld.logging.messages; \
+               org.jboss.weld.serialization; \
+               org.jboss.weld.persistence; \
+               org.jboss.weld.resolution; \
+               org.jboss.weld.injection; \
+               org.jboss.weld.environment.se; \
+               org.jboss.weld.environment.se.events; \
+               org.jboss.weld.environment.se.bindings; \
+               org.jboss.weld.environment.se.threading; \
+               org.jboss.weld.environment.se.beans; \
+               org.jboss.weld.environment.se.discovery; \
+               org.jboss.weld.environment.se.discovery.url; \
+               org.jboss.weld.environment.se.contexts; \
+               org.jboss.weld.messages; version=1.1.3
 
 DynamicImport-Package *
\ No newline at end of file",2012-10-12T10:30:48Z,132
"@@ -34,43 +34,103 @@
          <email>matthieu.clochard@serli.com</email>
       </developer>
    </developers>
-    
-    <dependencies>
-    
-        <dependency>
-            <groupId>javax.inject</groupId>
-            <artifactId>javax.inject</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>org.jboss.interceptor</groupId>
-            <artifactId>jboss-interceptor-api</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>javax.el</groupId>
-            <artifactId>el-api</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>javax.enterprise</groupId>
-            <artifactId>cdi-api</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>org.javassist</groupId>
-            <artifactId>javassist</artifactId>
-        </dependency>
-        
-    </dependencies>
-
-    <build>
-        <plugins>
-            <plugin>
-                <groupId>org.apache.felix</groupId>
-                <artifactId>maven-bundle-plugin</artifactId>
-            </plugin>
-        </plugins>
-    </build>
-    
+
+   <dependencies>
+
+      <dependency>
+         <groupId>org.jboss.weld</groupId>
+         <artifactId>weld-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.weld.se</groupId>
+         <artifactId>weld-se-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.weld</groupId>
+         <artifactId>weld-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.weld</groupId>
+         <artifactId>weld-spi</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>javax.inject</groupId>
+         <artifactId>javax.inject</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>javax.el</groupId>
+         <artifactId>el-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>javax.enterprise</groupId>
+         <artifactId>cdi-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.interceptor</groupId>
+         <artifactId>jboss-interceptor-spi</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.interceptor</groupId>
+         <artifactId>jboss-interceptor-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.interceptor</groupId>
+         <artifactId>jboss-interceptor-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.javassist</groupId>
+         <artifactId>javassist</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>com.google.guava</groupId>
+         <artifactId>guava</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>ch.qos.cal10n</groupId>
+         <artifactId>cal10n-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.slf4j</groupId>
+         <artifactId>slf4j-ext</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.slf4j</groupId>
+         <artifactId>slf4j-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>ch.qos.logback</groupId>
+         <artifactId>logback-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>ch.qos.logback</groupId>
+         <artifactId>logback-classic</artifactId>
+      </dependency>
+
+   </dependencies>
+
+   <build>
+      <plugins>
+         <plugin>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>maven-bundle-plugin</artifactId>
+         </plugin>
+      </plugins>
+   </build>
+
 </project>",2012-10-12T10:30:48Z,139
"@@ -27,7 +27,164 @@ Export-Package javax.el;version=2.2.0, \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
                javassist.tools.web; version=3.14.0, \
-               com.sun.jdi
+               com.sun.jdi, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; \
+               org.slf4j.cal10n; \
+               org.slf4j.profiler; \
+               org.slf4j.agent; \
+               org.slf4j.instrumentation; \
+               org.slf4j.ext; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29, \
+               com.google.common.primitives; \
+               com.google.common.collect; \
+               com.google.common.util.concurrent; \
+               com.google.common.io; \
+               com.google.common.net; \
+               com.google.common.annotations; \
+               com.google.common.base; \
+               com.google.common.base.internal, \
+               ch.qos.cal10n; \
+               ch.qos.cal10n.verifier; \
+               ch.qos.cal10n.util; version=0.7.2, \
+               org.jboss.interceptor.reader; \
+               org.jboss.interceptor.reader.cache; \
+               org.jboss.interceptor.spi.instance; \
+               org.jboss.interceptor.spi.context; \
+               org.jboss.interceptor.spi.model; \
+               org.jboss.interceptor.spi.metadata; \
+               org.jboss.interceptor.util; \
+               org.jboss.interceptor.util.proxy; \
+               org.jboss.interceptor.proxy; \
+               org.jboss.interceptor.proxy.javassist; \
+               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.manager.api; \
+               org.jboss.weld.ejb.spi; \
+               org.jboss.weld.ejb.spi.helpers; \
+               org.jboss.weld.ejb.api; \
+               org.jboss.weld.context; \
+               org.jboss.weld.context.ejb; \
+               org.jboss.weld.context.unbound; \
+               org.jboss.weld.context.bound; \
+               org.jboss.weld.context.api; \
+               org.jboss.weld.context.http; \
+               org.jboss.weld.validation.spi; \
+               org.jboss.weld.transaction.spi; \
+               org.jboss.weld.servlet.api; \
+               org.jboss.weld.servlet.api.helpers; \
+               org.jboss.weld.resources.spi; \
+               org.jboss.weld.resources.spi.helpers; \
+               org.jboss.weld.bootstrap.spi; \
+               org.jboss.weld.bootstrap.spi.helpers; \
+               org.jboss.weld.bootstrap.api; \
+               org.jboss.weld.bootstrap.api.helpers; \
+               org.jboss.weld.serialization.spi; \
+               org.jboss.weld.serialization.spi.helpers; \
+               org.jboss.weld.security.spi; \
+               org.jboss.weld.injection.spi; \
+               org.jboss.weld.injection.spi.helpers; \
+               org.jboss.weld; \
+               org.jboss.weld.manager; \
+               org.jboss.weld.jsf; \
+               org.jboss.weld.ejb; \
+               org.jboss.weld.event; \
+               org.jboss.weld.introspector; \
+               org.jboss.weld.introspector.jlr; \
+               org.jboss.weld.context.beanstore; \
+               org.jboss.weld.context.beanstore.ejb; \
+               org.jboss.weld.context.beanstore.http; \
+               org.jboss.weld.context.cache; \
+               org.jboss.weld.context.conversation; \
+               org.jboss.weld.util; \
+               org.jboss.weld.util.dom; \
+               org.jboss.weld.util.reflection; \
+               org.jboss.weld.util.reflection.instantiation; \
+               org.jboss.weld.util.el; \
+               org.jboss.weld.util.bytecode; \
+               org.jboss.weld.util.collections; \
+               org.jboss.weld.exceptions; \
+               org.jboss.weld.metadata; \
+               org.jboss.weld.metadata.cache; \
+               org.jboss.weld.el; \
+               org.jboss.weld.xml; \
+               org.jboss.weld.servlet; \
+               org.jboss.weld.ws; \
+               org.jboss.weld.bean; \
+               org.jboss.weld.bean.builtin; \
+               org.jboss.weld.bean.builtin.ee; \
+               org.jboss.weld.bean.proxy; \
+               org.jboss.weld.bean.proxy.util; \
+               org.jboss.weld.bean.interceptor; \
+               org.jboss.weld.resources; \
+               org.jboss.weld.literal; \
+               org.jboss.weld.bootstrap; \
+               org.jboss.weld.bootstrap.events; \
+               org.jboss.weld.logging; \
+               org.jboss.weld.logging.messages; \
+               org.jboss.weld.serialization; \
+               org.jboss.weld.persistence; \
+               org.jboss.weld.resolution; \
+               org.jboss.weld.injection; \
+               org.jboss.weld.environment.se; \
+               org.jboss.weld.environment.se.events; \
+               org.jboss.weld.environment.se.bindings; \
+               org.jboss.weld.environment.se.threading; \
+               org.jboss.weld.environment.se.beans; \
+               org.jboss.weld.environment.se.discovery; \
+               org.jboss.weld.environment.se.discovery.url; \
+               org.jboss.weld.environment.se.contexts; \
+               org.jboss.weld.messages; version=1.1.3
+
 
 DynamicImport-Package *
 ",2012-10-12T10:30:48Z,133
"@@ -27,7 +27,164 @@ Export-Package javax.el;version=2.2.0, \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
                javassist.tools.web; version=3.14.0, \
-               com.sun.jdi
+               com.sun.jdi, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; \
+               org.slf4j.cal10n; \
+               org.slf4j.profiler; \
+               org.slf4j.agent; \
+               org.slf4j.instrumentation; \
+               org.slf4j.ext; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29, \
+               com.google.common.primitives; \
+               com.google.common.collect; \
+               com.google.common.util.concurrent; \
+               com.google.common.io; \
+               com.google.common.net; \
+               com.google.common.annotations; \
+               com.google.common.base; \
+               com.google.common.base.internal, \
+               ch.qos.cal10n; \
+               ch.qos.cal10n.verifier; \
+               ch.qos.cal10n.util; version=0.7.2, \
+               org.jboss.interceptor.reader; \
+               org.jboss.interceptor.reader.cache; \
+               org.jboss.interceptor.spi.instance; \
+               org.jboss.interceptor.spi.context; \
+               org.jboss.interceptor.spi.model; \
+               org.jboss.interceptor.spi.metadata; \
+               org.jboss.interceptor.util; \
+               org.jboss.interceptor.util.proxy; \
+               org.jboss.interceptor.proxy; \
+               org.jboss.interceptor.proxy.javassist; \
+               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.manager.api; \
+               org.jboss.weld.ejb.spi; \
+               org.jboss.weld.ejb.spi.helpers; \
+               org.jboss.weld.ejb.api; \
+               org.jboss.weld.context; \
+               org.jboss.weld.context.ejb; \
+               org.jboss.weld.context.unbound; \
+               org.jboss.weld.context.bound; \
+               org.jboss.weld.context.api; \
+               org.jboss.weld.context.http; \
+               org.jboss.weld.validation.spi; \
+               org.jboss.weld.transaction.spi; \
+               org.jboss.weld.servlet.api; \
+               org.jboss.weld.servlet.api.helpers; \
+               org.jboss.weld.resources.spi; \
+               org.jboss.weld.resources.spi.helpers; \
+               org.jboss.weld.bootstrap.spi; \
+               org.jboss.weld.bootstrap.spi.helpers; \
+               org.jboss.weld.bootstrap.api; \
+               org.jboss.weld.bootstrap.api.helpers; \
+               org.jboss.weld.serialization.spi; \
+               org.jboss.weld.serialization.spi.helpers; \
+               org.jboss.weld.security.spi; \
+               org.jboss.weld.injection.spi; \
+               org.jboss.weld.injection.spi.helpers; \
+               org.jboss.weld; \
+               org.jboss.weld.manager; \
+               org.jboss.weld.jsf; \
+               org.jboss.weld.ejb; \
+               org.jboss.weld.event; \
+               org.jboss.weld.introspector; \
+               org.jboss.weld.introspector.jlr; \
+               org.jboss.weld.context.beanstore; \
+               org.jboss.weld.context.beanstore.ejb; \
+               org.jboss.weld.context.beanstore.http; \
+               org.jboss.weld.context.cache; \
+               org.jboss.weld.context.conversation; \
+               org.jboss.weld.util; \
+               org.jboss.weld.util.dom; \
+               org.jboss.weld.util.reflection; \
+               org.jboss.weld.util.reflection.instantiation; \
+               org.jboss.weld.util.el; \
+               org.jboss.weld.util.bytecode; \
+               org.jboss.weld.util.collections; \
+               org.jboss.weld.exceptions; \
+               org.jboss.weld.metadata; \
+               org.jboss.weld.metadata.cache; \
+               org.jboss.weld.el; \
+               org.jboss.weld.xml; \
+               org.jboss.weld.servlet; \
+               org.jboss.weld.ws; \
+               org.jboss.weld.bean; \
+               org.jboss.weld.bean.builtin; \
+               org.jboss.weld.bean.builtin.ee; \
+               org.jboss.weld.bean.proxy; \
+               org.jboss.weld.bean.proxy.util; \
+               org.jboss.weld.bean.interceptor; \
+               org.jboss.weld.resources; \
+               org.jboss.weld.literal; \
+               org.jboss.weld.bootstrap; \
+               org.jboss.weld.bootstrap.events; \
+               org.jboss.weld.logging; \
+               org.jboss.weld.logging.messages; \
+               org.jboss.weld.serialization; \
+               org.jboss.weld.persistence; \
+               org.jboss.weld.resolution; \
+               org.jboss.weld.injection; \
+               org.jboss.weld.environment.se; \
+               org.jboss.weld.environment.se.events; \
+               org.jboss.weld.environment.se.bindings; \
+               org.jboss.weld.environment.se.threading; \
+               org.jboss.weld.environment.se.beans; \
+               org.jboss.weld.environment.se.discovery; \
+               org.jboss.weld.environment.se.discovery.url; \
+               org.jboss.weld.environment.se.contexts; \
+               org.jboss.weld.messages; version=1.1.3
+
 
 DynamicImport-Package *
 ",2012-10-12T10:30:48Z,140
"@@ -2,12 +2,12 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <parent>
+   <!--<parent>
       <groupId>org.jboss.weld.osgi.examples</groupId>
       <artifactId>weld-osgi-examples</artifactId>
       <version>1.1.3-SNAPSHOT</version>
       <relativePath>../pom.xml</relativePath>
-   </parent>
+   </parent>-->
     <modelVersion>4.0.0</modelVersion>
     <groupId>org.jboss.weld.osgi.examples</groupId>
     <artifactId>weld-osgi-container-equinox</artifactId>",2012-10-12T10:31:09Z,141
"@@ -2,302 +2,327 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <parent>
-      <groupId>org.jboss.weld.osgi.examples</groupId>
-      <artifactId>weld-osgi-examples</artifactId>
-      <version>1.1.3-SNAPSHOT</version>
-      <relativePath>../pom.xml</relativePath>
-   </parent>
-   <modelVersion>4.0.0</modelVersion>
-   <groupId>org.jboss.weld.osgi.examples</groupId>
-   <artifactId>weld-osgi-container-knopflerfish</artifactId>
-   <name>Weld OSGi (Examples Container Knopflerfish)</name>
-
-   <description>Standalone example for Weld-OSGi</description>
-
-   <url>http://www.seamframework.org/Weld</url>
-   <licenses>
-      <license>
-         <name>Apache License, Version 2.0</name>
-         <distribution>repo</distribution>
-         <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
-      </license>
-   </licenses>
-
-   <developers>
-      <developer>
-         <name>Mathieu Ancelin</name>
-         <email>mathieu.ancelin@serli.com</email>
-      </developer>
-      <developer>
-         <name>Matthieu Clochard</name>
-         <email>matthieu.clochard@serli.com</email>
-      </developer>
-   </developers>
-
-   <dependencies>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-divide</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-log</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-minus</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-plus</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-times</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-square</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-triangle</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-standalone</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-app</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-england</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-fwk</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-france</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-spain</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>javax.ws.rs</groupId>
-         <artifactId>jsr311-api</artifactId>
-         <version>1.1</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.codehaus.groovy</groupId>
-         <artifactId>groovy-all</artifactId>
-         <version>1.8.0-rc-3</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-spi</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-extension</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-mandatory</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-integration</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.osgi</groupId>
-         <artifactId>org.osgi.core</artifactId>
-         <version>4.2.0</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.main</artifactId>
-         <version>3.0.6</version>
-         <scope>provided</scope>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix.gogo</groupId>
-         <artifactId>org.apache.felix.gogo.commands</artifactId>
-         <version>0.4.0</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.bundlerepository</artifactId>
-         <version>1.2.1</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.shell.tui</artifactId>
-         <version>1.0.2</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.shell</artifactId>
-         <version>1.0.2</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.http.bundle</artifactId>
-         <version>2.0.4</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.log</artifactId>
-         <version>1.0.0</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.configadmin</artifactId>
-         <version>1.2.8</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld</groupId>
-         <artifactId>weld-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.se</groupId>
-         <artifactId>weld-se-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-   </dependencies>
-
-   <build>
-      <resources>
-         <resource>
-            <directory>src/main/resources</directory>
-             <filtering>true</filtering>
-         </resource>
-      </resources>
-      <plugins>
-         <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-antrun-plugin</artifactId>
-            <executions>
-               <execution>
-                  <id>compile</id>
-                  <phase>package</phase>
-                  <goals>
-                     <goal>run</goal>
-                  </goals>
-                  <configuration>
-                     <tasks>
-                        <copy file=""target/classes/config.properties"" tofile=""${project.build.directory}/config.properties""/>
-                        <copy file=""${maven.dependency.org.apache.felix.org.apache.felix.main.jar.path}"" tofile=""${project.build.directory}/felix.jar""/>
-                     </tasks>
-                  </configuration>
-               </execution>
-            </executions>
-         </plugin>
-
-         <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-assembly-plugin</artifactId>
-            <executions>
-               <execution>
-                  <id>create-executable-jar</id>
-                  <phase>package</phase>
-                  <goals>
-                     <goal>single</goal>
-                  </goals>
-                  <configuration>
-                     <descriptors>
-                        <descriptor>${basedir}/src/main/assembly/assembly.xml</descriptor>
-                     </descriptors>
-                     <finalName>${project.artifactId}-${project.version}</finalName>
-                  </configuration>
-               </execution>
-            </executions>
-         </plugin>
-      </plugins>
-   </build>
+    <!--<parent>
+        <groupId>org.jboss.weld.osgi.examples</groupId>
+        <artifactId>weld-osgi-examples</artifactId>
+        <version>1.1.3-SNAPSHOT</version>
+        <relativePath>../pom.xml</relativePath>
+    </parent>-->
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.jboss.weld.osgi.examples</groupId>
+    <artifactId>weld-osgi-container-knopflerfish</artifactId>
+    <version>1.1.3-SNAPSHOT</version>
+    <name>Weld OSGi (Examples Container Knopflerfish)</name>
+
+    <description>Standalone example for Weld-OSGi</description>
+
+    <url>http://www.seamframework.org/Weld</url>
+    <licenses>
+        <license>
+            <name>Apache License, Version 2.0</name>
+            <distribution>repo</distribution>
+            <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
+        </license>
+    </licenses>
+
+    <developers>
+        <developer>
+            <name>Mathieu Ancelin</name>
+            <email>mathieu.ancelin@serli.com</email>
+        </developer>
+        <developer>
+            <name>Matthieu Clochard</name>
+            <email>matthieu.clochard@serli.com</email>
+        </developer>
+    </developers>
+
+    <repositories>
+        <repository>
+            <releases>
+                <enabled>true</enabled>
+                <updatePolicy>never</updatePolicy>
+                <checksumPolicy>fail</checksumPolicy>
+            </releases>
+            <snapshots>
+                <enabled>true</enabled>
+                <updatePolicy>never</updatePolicy>
+                <checksumPolicy>fail</checksumPolicy>
+            </snapshots>
+            <id>Knopflerfish</id>
+            <name>Knopflerfish Releases Repository</name>
+            <url>http://www.knopflerfish.org/maven2</url>
+            <layout>default</layout>
+        </repository>
+    </repositories>
+
+    <dependencies>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-divide</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-log</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-minus</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-plus</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-times</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-square</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-triangle</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-standalone</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-app</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-england</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-fwk</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-france</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-spain</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>javax.ws.rs</groupId>
+            <artifactId>jsr311-api</artifactId>
+            <version>1.1</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.codehaus.groovy</groupId>
+            <artifactId>groovy-all</artifactId>
+            <version>1.8.0-rc-3</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-spi</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-extension</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-mandatory</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-integration</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld</groupId>
+            <artifactId>weld-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.se</groupId>
+            <artifactId>weld-se-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.osgi</groupId>
+            <artifactId>org.osgi.core</artifactId>
+            <version>4.2.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.osgi</groupId>
+            <artifactId>org.osgi.compendium</artifactId>
+            <version>4.2.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.knopflerfish</groupId>
+            <artifactId>framework</artifactId>
+            <version>5.1.14</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix.gogo</groupId>
+            <artifactId>org.apache.felix.gogo.commands</artifactId>
+            <version>0.4.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.bundlerepository</artifactId>
+            <version>1.2.1</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.shell.tui</artifactId>
+            <version>1.0.2</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.shell</artifactId>
+            <version>1.0.2</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.http.bundle</artifactId>
+            <version>2.0.4</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.log</artifactId>
+            <version>1.0.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.configadmin</artifactId>
+            <version>1.2.8</version>
+        </dependency>
+
+    </dependencies>
+
+    <build>
+        <resources>
+            <resource>
+                <directory>src/main/resources</directory>
+                <filtering>true</filtering>
+            </resource>
+        </resources>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-antrun-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>compile</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>run</goal>
+                        </goals>
+                        <configuration>
+                            <tasks>
+                                <copy file=""target/classes/config.xargs"" tofile=""${project.build.directory}/config.xargs""/>
+                                <copy file=""${maven.dependency.org.knopflerfish.framework.jar.path}"" tofile=""${project.build.directory}/knopflerfish.jar""/>
+                            </tasks>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-assembly-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>create-executable-jar</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>single</goal>
+                        </goals>
+                        <configuration>
+                            <descriptors>
+                                <descriptor>${basedir}/src/main/assembly/assembly.xml</descriptor>
+                            </descriptors>
+                            <finalName>${project.artifactId}-${project.version}</finalName>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+        </plugins>
+    </build>
 
 </project>",2012-10-12T10:31:09Z,142
"@@ -34,30 +34,25 @@
                 <include>org.jboss.weld.osgi:weld-osgi-core-spi</include>
                 <include>org.jboss.weld.osgi:weld-osgi-core-extension</include>
                 <include>org.jboss.weld.osgi:weld-osgi-core-mandatory</include>
+                <include>org.osgi:org.osgi.compendium</include>
                 <include>org.apache.felix:org.apache.felix.bundlerepository</include>
                 <include>org.apache.felix:org.apache.felix.shell.tui</include>
                 <include>org.apache.felix:org.apache.felix.shell</include>
                 <include>org.apache.felix:org.apache.felix.http.bundle</include>
                 <include>org.apache.felix:org.apache.felix.log</include>
                 <include>org.apache.felix:org.apache.felix.configadmin</include>
+                <include>org.codehaus.groovy:groovy-all</include>
                 <include>javax.ws.rs:jsr311-api</include>
             </includes>
         </dependencySet>
-        <dependencySet>
-            <useProjectArtifact>false</useProjectArtifact>
-            <outputDirectory></outputDirectory>
-            <includes>
-                <include>org.apache.felix:org.apache.felix.main</include>
-            </includes>
-        </dependencySet>
     </dependencySets>
     <files>
         <file>
-            <source>${project.build.directory}/felix.jar</source>
-            <outputDirectory>bin</outputDirectory>
+            <source>${project.build.directory}/knopflerfish.jar</source>
+            <outputDirectory></outputDirectory>
         </file>
         <file>
-            <source>${project.build.directory}/config.properties</source>
+            <source>${project.build.directory}/config.xargs</source>
             <outputDirectory>conf</outputDirectory>
         </file>
     </files>",2012-10-12T10:31:09Z,143
"@@ -1,49 +0,0 @@
-org.osgi.framework.storage.clean=onFirstInit
-
-felix.log.level=1
-
-org.osgi.framework.bootdelegation=sun.reflect
-
-felix.auto.install=  \
-file:modules/weld-osgi-core-api-${project.version}.jar \
-file:modules/weld-osgi-core-spi-${project.version}.jar \
-file:modules/weld-osgi-core-mandatory-${project.version}.jar \
-file:modules/weld-osgi-paint-api-${project.version}.jar  \
-file:modules/weld-osgi-paint-core-${project.version}.jar \
-file:modules/weld-osgi-paint-triangle-${project.version}.jar  \
-file:modules/weld-osgi-paint-square-${project.version}.jar  \
-file:modules/weld-osgi-calculator-api-${project.version}.jar  \
-file:modules/weld-osgi-calculator-core-${project.version}.jar  \
-file:modules/weld-osgi-calculator-log-${project.version}.jar  \
-file:modules/weld-osgi-calculator-divide-${project.version}.jar  \
-file:modules/weld-osgi-calculator-minus-${project.version}.jar  \
-file:modules/weld-osgi-calculator-plus-${project.version}.jar  \
-file:modules/weld-osgi-calculator-times-${project.version}.jar  \
-file:modules/weld-osgi-web-api-${project.version}.jar  \
-file:modules/weld-osgi-web-fwk-${project.version}.jar \
-file:modules/weld-osgi-web-france-${project.version}.jar  \
-file:modules/weld-osgi-web-spain-${project.version}.jar  \
-file:modules/weld-osgi-web-england-${project.version}.jar  \
-file:modules/weld-osgi-web-app-${project.version}.jar  \
-file:modules/weld-osgi-standalone-${project.version}.jar  \
-file:modules/jsr311-api-1.1.jar \
-file:modules/org.apache.felix.gogo.commands-0.4.0.jar  \
-file:modules/org.apache.felix.gogo.runtime-0.4.0.jar
-
-felix.auto.start= \
-file:modules/weld-osgi-core-extension-${project.version}.jar \
-file:modules/weld-osgi-core-integration-${project.version}.jar \
-file:modules/org.apache.felix.configadmin-1.2.8.jar \
-file:modules/org.apache.felix.http.bundle-2.0.4.jar \
-file:modules/org.apache.felix.log-1.0.0.jar \
-file:modules/org.apache.felix.shell-1.0.2.jar \
-file:modules/org.apache.felix.shell.tui-1.0.2.jar \
-file:modules/org.apache.felix.bundlerepository-1.2.1.jar
-
-org.osgi.service.http.port=9000
-org.apache.felix.http.whiteboardEnabled=true
-org.apache.felix.http.jettyEnabled=true
-org.apache.felix.http=true
-
-osgi.shell.telnet=on
-obr.repository.url=http://felix.apache.org/obr/releases.xml",2012-10-12T10:31:09Z,144
"@@ -0,0 +1,51 @@
+-init
+-launch
+
+-F org.osgi.framework.storage.clean=onFirstInit
+-F felix.log.level=1
+-F org.osgi.framework.bootdelegation=sun.reflect
+
+-install modules/weld-osgi-core-api-${project.version}.jar
+-install modules/weld-osgi-core-spi-${project.version}.jar
+-install modules/weld-osgi-core-mandatory-${project.version}.jar
+-install modules/weld-osgi-paint-api-${project.version}.jar
+-install modules/weld-osgi-paint-core-${project.version}.jar
+-install modules/weld-osgi-paint-triangle-${project.version}.jar
+-install modules/weld-osgi-paint-square-${project.version}.jar
+-install modules/weld-osgi-calculator-api-${project.version}.jar
+-install modules/weld-osgi-calculator-core-${project.version}.jar
+-install modules/weld-osgi-calculator-log-${project.version}.jar
+-install modules/weld-osgi-calculator-divide-${project.version}.jar
+-install modules/weld-osgi-calculator-minus-${project.version}.jar
+-install modules/weld-osgi-calculator-plus-${project.version}.jar
+-install modules/weld-osgi-calculator-times-${project.version}.jar
+-install modules/weld-osgi-web-api-${project.version}.jar
+-install modules/weld-osgi-web-fwk-${project.version}.jar
+-install modules/weld-osgi-web-france-${project.version}.jar
+-install modules/weld-osgi-web-spain-${project.version}.jar
+-install modules/weld-osgi-web-england-${project.version}.jar
+-install modules/weld-osgi-web-app-${project.version}.jar
+-install modules/weld-osgi-standalone-${project.version}.jar
+-install modules/groovy-all-1.8.0-rc-3.jar
+-install modules/jsr311-api-1.1.jar
+-install modules/org.apache.felix.gogo.commands-0.4.0.jar
+-install modules/org.apache.felix.gogo.runtime-0.4.0.jar
+-install modules/org.osgi.compendium-4.2.0.jar
+
+
+-istart modules/weld-osgi-core-extension-${project.version}.jar
+-istart modules/weld-osgi-core-integration-${project.version}.jar
+-istart modules/org.apache.felix.configadmin-1.2.8.jar
+-istart modules/org.apache.felix.http.bundle-2.0.4.jar
+-istart modules/org.apache.felix.log-1.0.0.jar
+-istart modules/org.apache.felix.shell-1.0.2.jar
+-istart modules/org.apache.felix.shell.tui-1.0.2.jar
+-istart modules/org.apache.felix.bundlerepository-1.2.1.jar
+
+-F org.osgi.service.http.port=9000
+-F org.apache.felix.http.whiteboardEnabled=true
+-F org.apache.felix.http.jettyEnabled=true
+-F org.apache.felix.http=true
+
+-F osgi.shell.telnet=on
+-F obr.repository.url=http://felix.apache.org/obr/releases.xml
\ No newline at end of file",2012-10-12T10:31:09Z,145
"@@ -1,150 +1,150 @@
 
 <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <modelVersion>4.0.0</modelVersion>
-   <groupId>org.jboss.weld.osgi</groupId>
-   <artifactId>weld-osgi-parent</artifactId>
-   <name>Weld OSGi (Parent)</name>
-   <packaging>pom</packaging>
-
-   <parent>
-      <groupId>org.jboss.weld</groupId>
-      <artifactId>weld-core-parent</artifactId>
-      <relativePath>../../parent/pom.xml</relativePath>
-      <version>1.1.3-SNAPSHOT</version>
-   </parent>
-
-   <licenses>
-      <license>
-         <name>Apache License, Version 2.0</name>
-         <distribution>repo</distribution>
-         <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
-      </license>
-   </licenses>
-   <url>http://www.seamframework.org/Weld</url>
-
-   <developers>
-      <developer>
-         <name>Mathieu Ancelin</name>
-         <email>mathieu.ancelin@serli.com</email>
-      </developer>
-      <developer>
-         <name>Matthieu Clochard</name>
-         <email>matthieu.clochard@serli.com</email>
-      </developer>
-   </developers>
-
-   <modules>
-      <module>core</module>
-      <module>examples</module>
-   </modules>
-
-   <profiles>
-      <profile>
-         <id>weld-osgi-docs</id>
-         <modules>
-            <module>docs</module>
-         </modules>
-      </profile>
-      <profile>
-         <id>weld-osgi-tests</id>
-         <modules>
-            <module>core</module>
-            <module>tests</module>
-         </modules>
-      </profile>
-   </profiles>
-
-   <description>
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.jboss.weld.osgi</groupId>
+    <artifactId>weld-osgi-parent</artifactId>
+    <name>Weld OSGi (Parent)</name>
+    <packaging>pom</packaging>
+
+    <parent>
+        <groupId>org.jboss.weld</groupId>
+        <artifactId>weld-core-parent</artifactId>
+        <relativePath>../../parent/pom.xml</relativePath>
+        <version>1.1.3-SNAPSHOT</version>
+    </parent>
+
+    <licenses>
+        <license>
+            <name>Apache License, Version 2.0</name>
+            <distribution>repo</distribution>
+            <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
+        </license>
+    </licenses>
+    <url>http://www.seamframework.org/Weld</url>
+
+    <developers>
+        <developer>
+            <name>Mathieu Ancelin</name>
+            <email>mathieu.ancelin@serli.com</email>
+        </developer>
+        <developer>
+            <name>Matthieu Clochard</name>
+            <email>matthieu.clochard@serli.com</email>
+        </developer>
+    </developers>
+
+    <modules>
+        <module>core</module>
+        <module>examples</module>
+    </modules>
+
+    <profiles>
+        <profile>
+            <id>weld-osgi-docs</id>
+            <modules>
+                <module>docs</module>
+            </modules>
+        </profile>
+        <profile>
+            <id>weld-osgi-tests</id>
+            <modules>
+                <module>core</module>
+                <module>tests</module>
+            </modules>
+        </profile>
+    </profiles>
+
+    <description>
       Support for Weld in OSGi Containers
-   </description>
-
-   <properties>
-      <osgi.version>4.2.0</osgi.version>
-      <javax.inject.version>1</javax.inject.version>
-      <javax.el.version>2.2</javax.el.version>
-      <jsr250.api>1.0</jsr250.api>
-      <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
-      <weld.api.version>1.2-SNAPSHOT</weld.api.version>
-      <slf4j.version>1.6.1</slf4j.version>
-      <logback.version>0.9.29</logback.version>
-   </properties>
-
-   <dependencyManagement>
-      <dependencies>
-
-         <dependency>
-            <groupId>org.osgi</groupId>
-            <artifactId>org.osgi.core</artifactId>
-            <version>${osgi.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.osgi</groupId>
-            <artifactId>org.osgi.compendium</artifactId>
-            <version>${osgi.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.jboss.weld</groupId>
-            <artifactId>weld-api</artifactId>
-            <version>${weld.api.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.jboss.weld</groupId>
-            <artifactId>weld-spi</artifactId>
-            <version>${weld.api.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>javax.inject</groupId>
-            <artifactId>javax.inject</artifactId>
-            <version>${javax.inject.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>javax.el</groupId>
-            <artifactId>el-api</artifactId>
-            <version>${javax.el.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>javax.annotation</groupId>
-            <artifactId>jsr250-api</artifactId>
-            <version>${jsr250.api}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.jboss.interceptor</groupId>
-            <artifactId>jboss-interceptor-api</artifactId>
-            <version>${jboss.interceptors.api.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-ext</artifactId>
-            <version>${slf4j.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-api</artifactId>
-            <version>${slf4j.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>ch.qos.logback</groupId>
-            <artifactId>logback-core</artifactId>
-            <version>${logback.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>ch.qos.logback</groupId>
-            <artifactId>logback-classic</artifactId>
-            <version>${logback.version}</version>
-         </dependency>
-
-      </dependencies>
-   </dependencyManagement>
+    </description>
+
+    <properties>
+        <osgi.version>4.2.0</osgi.version>
+        <javax.inject.version>1</javax.inject.version>
+        <javax.el.version>2.2</javax.el.version>
+        <jsr250.api>1.0</jsr250.api>
+        <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
+        <weld.api.version>1.2-SNAPSHOT</weld.api.version>
+        <slf4j.version>1.6.1</slf4j.version>
+        <logback.version>0.9.29</logback.version>
+    </properties>
+    
+    <dependencyManagement>
+        <dependencies>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.core</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.compendium</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld</groupId>
+                <artifactId>weld-api</artifactId>
+                <version>${weld.api.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld</groupId>
+                <artifactId>weld-spi</artifactId>
+                <version>${weld.api.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.inject</groupId>
+                <artifactId>javax.inject</artifactId>
+                <version>${javax.inject.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.el</groupId>
+                <artifactId>el-api</artifactId>
+                <version>${javax.el.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.annotation</groupId>
+                <artifactId>jsr250-api</artifactId>
+                <version>${jsr250.api}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.interceptor</groupId>
+                <artifactId>jboss-interceptor-api</artifactId>
+                <version>${jboss.interceptors.api.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.slf4j</groupId>
+                <artifactId>slf4j-ext</artifactId>
+                <version>${slf4j.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.slf4j</groupId>
+                <artifactId>slf4j-api</artifactId>
+                <version>${slf4j.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-core</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-classic</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
+        </dependencies>
+    </dependencyManagement>
 
 </project>",2012-10-12T10:31:09Z,146
"@@ -0,0 +1,4 @@
+#!/bin/sh
+
+cd ./examples/container-knopflerfish/target/weld-osgi-container-knopflerfish-1.1.3-SNAPSHOT-all/weld-osgi-container-knopflerfish-1.1.3-SNAPSHOT/
+java -jar knopflerfish.jar -xargs conf/config.xargs",2012-10-12T10:31:09Z,147
"@@ -48,13 +48,10 @@ public static void waitForEnvironment(BundleContext context) throws InterruptedE
         while(!ready) {
             ready = true;
             for(Bundle b : context.getBundles()) {
-                System.out.println(""wait for bundle "" + b.getSymbolicName());
                 if(b.getState() != Bundle.ACTIVE) {
                     ready = false;
                     break;
                 }
-                System.out.println(""bundle "" + b.getSymbolicName() + "" is ready"");
-                Thread.sleep(500);
             }
             Thread.sleep(500);
         }",2012-10-12T10:31:09Z,148
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
@@ -29,18 +46,15 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-extension</artifactId>
-            <version>${project.version}</version>
         </dependency>
         <dependency>
             <groupId>javax</groupId>
             <artifactId>javaee-web-api</artifactId>
-            <version>6.0</version>
             <scope>provided</scope>
         </dependency>
         <dependency>
             <groupId>org.osgi</groupId>
             <artifactId>org.osgi.core</artifactId>
-            <version>4.2.0</version>
             <scope>provided</scope>
         </dependency>
 ",2012-10-12T10:31:59Z,149
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
@@ -39,13 +56,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>",2012-10-12T10:31:59Z,150
"@@ -46,19 +46,16 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-extension</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>",2012-10-12T10:31:59Z,138
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
@@ -34,7 +51,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,151
"@@ -75,85 +75,4 @@
         Support for Weld in OSGi Containers
     </description>
 
-    <properties>
-        <osgi.version>4.2.0</osgi.version>
-        <javax.inject.version>1</javax.inject.version>
-        <javax.el.version>2.2</javax.el.version>
-        <jsr250.api>1.0</jsr250.api>
-        <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
-        <logback.version>0.9.29</logback.version>
-    </properties>
-
-    <dependencyManagement>
-        <dependencies>
-
-            <dependency>
-                <groupId>org.osgi</groupId>
-                <artifactId>org.osgi.core</artifactId>
-                <version>${osgi.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.osgi</groupId>
-                <artifactId>org.osgi.compendium</artifactId>
-                <version>${osgi.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.jboss.weld</groupId>
-                <artifactId>weld-api</artifactId>
-                <version>${weld.api.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.jboss.weld</groupId>
-                <artifactId>weld-spi</artifactId>
-                <version>${weld.api.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>javax.inject</groupId>
-                <artifactId>javax.inject</artifactId>
-                <version>${javax.inject.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>javax.el</groupId>
-                <artifactId>el-api</artifactId>
-                <version>${javax.el.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>javax.annotation</groupId>
-                <artifactId>jsr250-api</artifactId>
-                <version>${jsr250.api}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.slf4j</groupId>
-                <artifactId>slf4j-ext</artifactId>
-                <version>${slf4j.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.slf4j</groupId>
-                <artifactId>slf4j-api</artifactId>
-                <version>${slf4j.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>ch.qos.logback</groupId>
-                <artifactId>logback-core</artifactId>
-                <version>${logback.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>ch.qos.logback</groupId>
-                <artifactId>logback-classic</artifactId>
-                <version>${logback.version}</version>
-            </dependency>
-
-        </dependencies>
-    </dependencyManagement>
-
 </project>",2012-10-12T10:31:59Z,146
"@@ -58,7 +58,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,152
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,13 +58,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,153
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,13 +58,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,154
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -46,13 +63,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,155
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">",2012-10-12T10:31:59Z,156
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,7 +58,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,157
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">",2012-10-12T10:31:59Z,158
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,7 +58,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-innerscanner</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,159
"@@ -33,11 +33,6 @@
 
     <description>Integration tests launcher for Weld-OSGi</description>
 
-    <properties>
-        <version.pax.exam>2.5.0</version.pax.exam>
-        <version.org.apache.felix>4.0.3</version.org.apache.felix>
-    </properties>
-
     <url>http://www.seamframework.org/Weld</url>
     <licenses>
         <license>
@@ -69,28 +64,24 @@
         <dependency>
             <groupId>org.ops4j.pax.exam</groupId>
             <artifactId>pax-exam-junit4</artifactId>
-            <version>${version.pax.exam}</version>
             <scope>test</scope>
         </dependency>
 
         <dependency>
             <groupId>org.ops4j.pax.exam</groupId>
             <artifactId>pax-exam-container-native</artifactId>
-            <version>${version.pax.exam}</version>
             <scope>test</scope>
         </dependency>
 
         <dependency>
             <groupId>org.ops4j.pax.exam</groupId>
             <artifactId>pax-exam-link-mvn</artifactId>
-            <version>${version.pax.exam}</version>
             <scope>test</scope>
         </dependency>
 
         <dependency>
             <groupId>org.apache.felix</groupId>
             <artifactId>org.apache.felix.framework</artifactId>
-            <version>${version.org.apache.felix}</version>
             <scope>test</scope>
         </dependency>
 
@@ -107,37 +98,31 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-extension</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-integration</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld</groupId>
             <artifactId>weld-core</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.se</groupId>
             <artifactId>weld-se-core</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
@@ -208,49 +193,41 @@
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle2</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle3</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-importing</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-scanner</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-innerscanner</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-cdi-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-life-cycle</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,160
"@@ -1,4 +1,5 @@
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
     <modelVersion>4.0.0</modelVersion>
     <groupId>org.jboss.weld</groupId>
     <artifactId>weld-core-parent</artifactId>
@@ -69,6 +70,17 @@
         <selenium.maven.plugin.version>1.0.1</selenium.maven.plugin.version>
         <slf4j.version>1.6.1</slf4j.version>
         <testng.version>5.10</testng.version>
+        <osgi.version>4.2.0</osgi.version>
+        <!-- Weld OSGi deps -->
+        <javax.inject.version>1</javax.inject.version>
+        <javax.web.version>6.0</javax.web.version>
+        <javax.el.version>2.2</javax.el.version>
+        <jsr250.api>1.0</jsr250.api>
+        <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
+        <logback.version>0.9.29</logback.version>
+        <pax.exam.version>2.5.0</pax.exam.version>
+        <org.apache.felix.version>4.0.3</org.apache.felix.version>
+        <!-- Weld API -->
         <weld.api.version>1.2.0.Beta1</weld.api.version>
     </properties>
 
@@ -215,12 +227,6 @@
                 <version>${arquillian.version}</version>
             </dependency>
 
-            <dependency>
-                <groupId>org.jboss.arquillian.container</groupId>
-                <artifactId>arquillian-container-test-spi</artifactId>
-                <version>${arquillian.version}</version>
-            </dependency>
-
             <dependency>
                 <groupId>org.jboss.arquillian.container</groupId>
                 <artifactId>arquillian-weld-ee-embedded-1.1</artifactId>
@@ -357,8 +363,8 @@
             </dependency>
 
             <dependency>
-	            <groupId>org.jboss.spec.javax.ws.rs</groupId>
-	            <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
+                <groupId>org.jboss.spec.javax.ws.rs</groupId>
+                <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
                 <version>${jboss.spec.jaxrs.version}</version>
             </dependency>
 
@@ -448,6 +454,154 @@
                 <version>${project.version}</version>
             </dependency>
 
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-api</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-extension</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-spi</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-integration</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-bundle1</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-bundle2</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-bundle3</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-importing</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-scanner</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-innerscanner</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-cdi-spi</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-life-cycle</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.ops4j.pax.exam</groupId>
+                <artifactId>pax-exam-junit4</artifactId>
+                <version>${pax.exam.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.ops4j.pax.exam</groupId>
+                <artifactId>pax-exam-container-native</artifactId>
+                <version>${pax.exam.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.ops4j.pax.exam</groupId>
+                <artifactId>pax-exam-link-mvn</artifactId>
+                <version>${pax.exam.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.apache.felix</groupId>
+                <artifactId>org.apache.felix.framework</artifactId>
+                <version>${org.apache.felix.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.core</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.compendium</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.inject</groupId>
+                <artifactId>javax.inject</artifactId>
+                <version>${javax.inject.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax</groupId>
+                <artifactId>javaee-web-api</artifactId>
+                <version>${javax.web.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.el</groupId>
+                <artifactId>el-api</artifactId>
+                <version>${javax.el.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.annotation</groupId>
+                <artifactId>jsr250-api</artifactId>
+                <version>${jsr250.api}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-core</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-classic</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
             <dependency>
                 <groupId>org.jboss.shrinkwrap</groupId>
                 <artifactId>shrinkwrap-impl-base</artifactId>
@@ -536,7 +690,7 @@
                         <configLocation>weld-checkstyle/checkstyle.xml</configLocation>
                         <consoleOutput>true</consoleOutput>
                         <failsOnError>true</failsOnError>
-                        <useFile />
+                        <useFile/>
                     </configuration>
                     <dependencies>
                         <dependency>
@@ -574,7 +728,7 @@
                                         </goals>
                                     </pluginExecutionFilter>
                                     <action>
-                                        <ignore />
+                                        <ignore/>
                                     </action>
                                 </pluginExecution>
                             </pluginExecutions>
@@ -586,10 +740,10 @@
                     <artifactId>maven-compiler-plugin</artifactId>
                     <version>2.3.2</version>
                     <configuration>
-                       <source>1.6</source>
-                       <target>1.6</target>
+                        <source>1.6</source>
+                        <target>1.6</target>
                     </configuration>
-                 </plugin>
+                </plugin>
             </plugins>
 
         </pluginManagement>",2012-10-12T10:31:59Z,161
"@@ -11,7 +11,8 @@
    express or implied. * See the License for the specific language
    governing permissions and * limitations under the License. */
 -->
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
     <parent>
         <artifactId>weld-core-parent</artifactId>
         <groupId>org.jboss.weld</groupId>
@@ -91,7 +92,7 @@
                             org.jboss.weld.manager;
                             org.jboss.weld.servlet;
                             org.jboss.weld.util;
-                            org.jboss.interceptor.*;
+                            org.jboss.weld.interceptor.*;
                             version=${osgi.version},
                             org.jboss.weld.el;
                             version=${osgi.version},
@@ -113,7 +114,8 @@
                              on foreign bundles.
                         -->
                         <Import-Package>
-                            org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=""[${slf4j.version},$${version;=+;${slf4j.version}})""; resolution:=optional,
+                            org.slf4j; org.slf4j.spi; org.slf4j.helpers;
+                            version=""[${slf4j.version},$${version;=+;${slf4j.version}})""; resolution:=optional,
                             ch.qos.cal10n; version=${cal10n.version}; resolution:=optional,
                             javax.interceptor.*, *;
                             resolution:=optional",2012-10-12T10:31:32Z,10
"@@ -46,8 +46,8 @@ public WeldCDIContainerFactory() {
         logger.debug(""Creation of a new Weld CDI container factory"");
         blackList = new HashSet<String>();
         blackList.add(""java.io.Serializable"");
-        blackList.add(""org.jboss.interceptor.proxy.LifecycleMixin"");
-        blackList.add(""org.jboss.interceptor.util.proxy.TargetInstanceProxy"");
+        blackList.add(""org.jboss.weld.interceptor.proxy.LifecycleMixin"");
+        blackList.add(""org.jboss.weld.interceptor.util.proxy.TargetInstanceProxy"");
         blackList.add(""javassist.util.proxy.ProxyObject"");
     }
 ",2012-10-12T10:31:32Z,131
"@@ -103,17 +103,17 @@ Import-Package org.jboss.weld.environment.osgi.api; \
                ch.qos.cal10n; \
                ch.qos.cal10n.verifier; \
                ch.qos.cal10n.util; version=0.7.2, \
-               org.jboss.interceptor.reader; \
-               org.jboss.interceptor.reader.cache; \
-               org.jboss.interceptor.spi.instance; \
-               org.jboss.interceptor.spi.context; \
-               org.jboss.interceptor.spi.model; \
-               org.jboss.interceptor.spi.metadata; \
-               org.jboss.interceptor.util; \
-               org.jboss.interceptor.util.proxy; \
-               org.jboss.interceptor.proxy; \
-               org.jboss.interceptor.proxy.javassist; \
-               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.interceptor.reader; \
+               org.jboss.weld.interceptor.reader.cache; \
+               org.jboss.weld.interceptor.spi.instance; \
+               org.jboss.weld.interceptor.spi.context; \
+               org.jboss.weld.interceptor.spi.model; \
+               org.jboss.weld.interceptor.spi.metadata; \
+               org.jboss.weld.interceptor.util; \
+               org.jboss.weld.interceptor.util.proxy; \
+               org.jboss.weld.interceptor.proxy; \
+               org.jboss.weld.interceptor.proxy.javassist; \
+               org.jboss.weld.interceptor.builder; \
                org.jboss.weld.manager.api; \
                org.jboss.weld.ejb.spi; \
                org.jboss.weld.ejb.spi.helpers; \
@@ -189,6 +189,6 @@ Import-Package org.jboss.weld.environment.osgi.api; \
                org.jboss.weld.environment.se.discovery; \
                org.jboss.weld.environment.se.discovery.url; \
                org.jboss.weld.environment.se.contexts; \
-               org.jboss.weld.messages; version=1.1.5
+               org.jboss.weld.messages; version=1.2.0-SNAPSHOT
 
 DynamicImport-Package *
\ No newline at end of file",2012-10-12T10:31:32Z,132
"@@ -97,17 +97,17 @@ Export-Package javax.el;version=2.2.0, \
                ch.qos.cal10n; \
                ch.qos.cal10n.verifier; \
                ch.qos.cal10n.util; version=0.7.2, \
-               org.jboss.interceptor.reader; \
-               org.jboss.interceptor.reader.cache; \
-               org.jboss.interceptor.spi.instance; \
-               org.jboss.interceptor.spi.context; \
-               org.jboss.interceptor.spi.model; \
-               org.jboss.interceptor.spi.metadata; \
-               org.jboss.interceptor.util; \
-               org.jboss.interceptor.util.proxy; \
-               org.jboss.interceptor.proxy; \
-               org.jboss.interceptor.proxy.javassist; \
-               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.interceptor.reader; \
+               org.jboss.weld.interceptor.reader.cache; \
+               org.jboss.weld.interceptor.spi.instance; \
+               org.jboss.weld.interceptor.spi.context; \
+               org.jboss.weld.interceptor.spi.model; \
+               org.jboss.weld.interceptor.spi.metadata; \
+               org.jboss.weld.interceptor.util; \
+               org.jboss.weld.interceptor.util.proxy; \
+               org.jboss.weld.interceptor.proxy; \
+               org.jboss.weld.interceptor.proxy.javassist; \
+               org.jboss.weld.interceptor.builder; \
                org.jboss.weld.manager.api; \
                org.jboss.weld.ejb.spi; \
                org.jboss.weld.ejb.spi.helpers; \
@@ -183,7 +183,7 @@ Export-Package javax.el;version=2.2.0, \
                org.jboss.weld.environment.se.discovery; \
                org.jboss.weld.environment.se.discovery.url; \
                org.jboss.weld.environment.se.contexts; \
-               org.jboss.weld.messages; version=1.1.5
+               org.jboss.weld.messages; version=1.2.0-SNAPSHOT
 
 
 DynamicImport-Package *",2012-10-12T10:31:32Z,133
"@@ -233,14 +233,15 @@ private void fireAllEvent(AbstractServiceEvent event, Event broadcaster,
       {
          try
          {
+            // here singleton issue
             broadcaster.select(eventClass,
-                               filteredServicesQualifiers(event,
-                                                          new SpecificationAnnotation(clazz),
-                                                          instance)).fire(event);
+               filteredServicesQualifiers(event,
+                  new SpecificationAnnotation(clazz),
+                  instance)).fire(event);
          }
          catch(Throwable t)
          {
-            t.printStackTrace();
+            //t.printStackTrace();
          }
       }
    }",2012-10-12T10:30:48Z,134
"@@ -95,13 +95,13 @@ public void startCDIOSGi() throws Exception {
 
     public void stopCDIOSGi() throws Exception {
         logger.info(""CDI-OSGi stop bundle management"");
-        started.set(false);
         for (Bundle bundle : context.getBundles()) {
             logger.trace(""Scanning {}"", bundle.getSymbolicName());
             if (managed.get(bundle.getBundleId()) != null) {
                 stopManagement(bundle);
             }
         }
+        started.set(false);
     }
 
     @Override
@@ -206,52 +206,30 @@ private void stopManagement(Bundle bundle) {
         boolean set = CDIOSGiExtension.currentBundle.get() != null;
         CDIOSGiExtension.currentBundle.set(bundle.getBundleId());
         CDIContainer holder = managed.get(bundle.getBundleId());
-        if (holder != null) {
-            BundleHolder bundleHolder = holder.getInstance().select(BundleHolder.class).get();
-            //if (bundleHolder.getState().equals(BundleState.VALID)) {
-                logger.trace(""Firing the BundleState.INVALID event"");
-                //bundleHolder.setState(BundleState.INVALID);
-                holder.getBeanManager().fireEvent(new Invalid());
-            //}
-            if(started.get()) {
-                factory().removeContainer(bundle);
-            }
-            logger.trace(""The container {} has been unregistered"",holder);
-            logger.trace(""Firing the BundleContainerEvents.BundleContainerShutdown event"");
-            holder.getBeanManager().fireEvent(new BundleContainerEvents.BundleContainerShutdown(bundle.getBundleContext()));
-
-            Collection<ServiceRegistration> regs = holder.getRegistrations();
-            logger.trace(""Unregistering the container registrations"");
-            /**for (ServiceRegistration reg : regs) {
+        if (started.get() && managed.containsKey(bundle.getBundleId())) {
+            if (holder != null) {
+                BundleHolder bundleHolder = holder.getInstance().select(BundleHolder.class).get();
                 try {
-                    reg.unregister();
-                } catch (IllegalStateException e) {// Ignore
-                    //logger.warn(""Unable to unregister a service"" + e.getCause());
-                }
-            }
-            try {
-                // unregistration for managed services. It should be done by the OSGi framework
-                logger.trace(""Unregistering the container managed services"");
-                RegistrationsHolderImpl regsHolder = holder.getInstance().select(RegistrationsHolderImpl.class).get();
-                for (ServiceRegistration r : regsHolder.getRegistrations()) {
-                    try {
-                        r.unregister();
-                    } catch (Exception e) {
-                        // the service is already unregistered if shutdown is called when bundle is stopped
-                        // but with a manual boostrap, you can't be sure
-                        //System.out.println(""Service already unregistered."");
+                    logger.trace(""Firing the BundleState.INVALID event"");
+                    holder.getBeanManager().fireEvent(new Invalid());
+                    logger.trace(""The container {} has been unregistered"",holder);
+                    logger.trace(""Firing the BundleContainerEvents.BundleContainerShutdown event"");
+                    // here singleton issue ?
+                    holder.getBeanManager().fireEvent(new BundleContainerEvents.BundleContainerShutdown(bundle.getBundleContext()));
+                } catch (Throwable t) {}
+                logger.trace(""Shutting down the container {}"", holder);
+                //holder.shutdown();
+                managed.remove(bundle.getBundleId());
+                if(started.get()) {
+                    if (factoryRef != null) {
+                        factory().removeContainer(bundle);
                     }
                 }
-            } catch (Throwable t) {
-                t.printStackTrace();
-            }   **/
-
-            logger.trace(""Shutting down the container {}"", holder);
-            holder.shutdown();
-            managed.remove(bundle.getBundleId());
-            logger.debug(""Bundle {} is unmanaged"", bundle.getSymbolicName());
-        } else {
-            logger.debug(""Bundle {} is not a bean bundle"", bundle.getSymbolicName());
+                holder.shutdown();
+                logger.debug(""Bundle {} is unmanaged"", bundle.getSymbolicName());
+            } else {
+                logger.debug(""Bundle {} is not a bean bundle"", bundle.getSymbolicName());
+            }
         }
         if (!set) {
             CDIOSGiExtension.currentBundle.remove();",2012-10-12T10:30:48Z,135
"@@ -2,8 +2,6 @@ Bundle-Activator org.jboss.weld.environment.osgi.impl.Activator
 
 Export-Package org.jboss.weld.environment.osgi.impl.extension.service;version=${pom.version}
 
-Embed-Dependency *; scope=compile; inline=true; artifactId=!org.osgi.core|org.osgi.compendium|weld-osgi-core-api|weld-osgi-core-spi
-
 Import-Package org.jboss.weld.environment.osgi.api; \
                org.jboss.weld.environment.osgi.api.annotation; \
                org.jboss.weld.environment.osgi.api.events; \
@@ -35,7 +33,61 @@ Import-Package org.jboss.weld.environment.osgi.api; \
                javassist.tools; \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
-               javassist.tools.web; version=3.14.0
+               javassist.tools.web; version=3.14.0, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29
+
 
 DynamicImport-Package *
 ",2012-10-12T10:30:48Z,136
"@@ -1,35 +0,0 @@
-<configuration debug=""false"">
-
-    <appender name=""Console"" class=""ch.qos.logback.core.ConsoleAppender"">
-        <filter class=""ch.qos.logback.classic.filter.ThresholdFilter"">
-            <level>info</level>
-        </filter>
-        <encoder>
-            <pattern>
-                %d{HH:mm:ss.SSS} %-15.-15([%-14.-14(%.-13thread])) %-5level %.-1000(%logger{25} - %msg) %n
-            </pattern>
-        </encoder>
-    </appender>
-
-    <appender name=""Log"" class=""ch.qos.logback.core.FileAppender"">
-        <file>cdi-osgi.log</file>
-        <append>false</append>
-        <filter class=""ch.qos.logback.classic.filter.ThresholdFilter"">
-            <level>trace</level>
-        </filter>
-        <encoder>
-            <pattern>
-                %d{HH:mm:ss.SSS} %-15.-15([%-14.-14(%.-13thread])) %-5level %.-1000(%logger{25} - %msg) %n %xEx{full}
-            </pattern>
-            <!--<pattern>
-                %d{HH:mm:ss.SSS} [%thread] %-5level %caller{1} %logger{25} - %msg%n %xEx{full}
-            </pattern>-->
-        </encoder>
-    </appender>
-
-    <root level=""trace"">
-        <appender-ref ref=""Console""/>
-        <appender-ref ref=""Log""/>
-    </root>
-
-</configuration>
\ No newline at end of file",2012-10-12T10:30:48Z,137
"@@ -84,11 +84,6 @@
          <artifactId>jsr250-api</artifactId>
       </dependency>
 
-      <dependency>
-         <groupId>com.google.guava</groupId>
-         <artifactId>guava</artifactId>
-      </dependency>
-
       <dependency>
          <groupId>org.jboss.interceptor</groupId>
          <artifactId>jboss-interceptor-spi</artifactId>
@@ -104,6 +99,11 @@
          <artifactId>jboss-interceptor-api</artifactId>
       </dependency>
 
+      <dependency>
+         <groupId>com.google.guava</groupId>
+         <artifactId>guava</artifactId>
+      </dependency>
+
       <dependency>
          <groupId>ch.qos.cal10n</groupId>
          <artifactId>cal10n-api</artifactId>",2012-10-12T10:30:48Z,138
"@@ -2,11 +2,7 @@ Bundle-Activator org.jboss.weld.environment.osgi.impl.WeldActivator
 
 Export-Package org.jboss.weld.environment.osgi.impl.embedded; version=${pom.version}
 
-Embed-Dependency *; scope=compile; inline=true; artifactId=!weld-osgi-core-spi|weld-osgi-core-extension|jboss-interceptor-api|javax.inject|jsr250-api|cdi-api|el-api
-
-Import-Package org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=1.6.1; resolution:=optional, \
-               ch.qos.cal10n; version=0.7.2; resolution:=optional, \
-               org.jboss.weld.environment.osgi.api; \
+Import-Package org.jboss.weld.environment.osgi.api; \
                org.jboss.weld.environment.osgi.api.annotation; \
                org.jboss.weld.environment.osgi.api.events; \
                org.jboss.weld.environment.osgi.spi;version=${pom.version}, \
@@ -20,6 +16,7 @@ Import-Package org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=1.6.1; resol
                javax.enterprise.inject.spi; \
                javax.enterprise.util; version=1.0.0, \
                javax.interceptor; version=1.1.0, \
+               org.osgi.framework, \
                javassist; \
                javassist.bytecode; \
                javassist.bytecode.analysis; \
@@ -36,6 +33,162 @@ Import-Package org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=1.6.1; resol
                javassist.tools; \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
-               javassist.tools.web; version=3.14.0
+               javassist.tools.web; version=3.14.0, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; \
+               org.slf4j.cal10n; \
+               org.slf4j.profiler; \
+               org.slf4j.agent; \
+               org.slf4j.instrumentation; \
+               org.slf4j.ext; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29, \
+               com.google.common.primitives; \
+               com.google.common.collect; \
+               com.google.common.util.concurrent; \
+               com.google.common.io; \
+               com.google.common.net; \
+               com.google.common.annotations; \
+               com.google.common.base; \
+               com.google.common.base.internal, \
+               ch.qos.cal10n; \
+               ch.qos.cal10n.verifier; \
+               ch.qos.cal10n.util; version=0.7.2, \
+               org.jboss.interceptor.reader; \
+               org.jboss.interceptor.reader.cache; \
+               org.jboss.interceptor.spi.instance; \
+               org.jboss.interceptor.spi.context; \
+               org.jboss.interceptor.spi.model; \
+               org.jboss.interceptor.spi.metadata; \
+               org.jboss.interceptor.util; \
+               org.jboss.interceptor.util.proxy; \
+               org.jboss.interceptor.proxy; \
+               org.jboss.interceptor.proxy.javassist; \
+               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.manager.api; \
+               org.jboss.weld.ejb.spi; \
+               org.jboss.weld.ejb.spi.helpers; \
+               org.jboss.weld.ejb.api; \
+               org.jboss.weld.context; \
+               org.jboss.weld.context.ejb; \
+               org.jboss.weld.context.unbound; \
+               org.jboss.weld.context.bound; \
+               org.jboss.weld.context.api; \
+               org.jboss.weld.context.http; \
+               org.jboss.weld.validation.spi; \
+               org.jboss.weld.transaction.spi; \
+               org.jboss.weld.servlet.api; \
+               org.jboss.weld.servlet.api.helpers; \
+               org.jboss.weld.resources.spi; \
+               org.jboss.weld.resources.spi.helpers; \
+               org.jboss.weld.bootstrap.spi; \
+               org.jboss.weld.bootstrap.spi.helpers; \
+               org.jboss.weld.bootstrap.api; \
+               org.jboss.weld.bootstrap.api.helpers; \
+               org.jboss.weld.serialization.spi; \
+               org.jboss.weld.serialization.spi.helpers; \
+               org.jboss.weld.security.spi; \
+               org.jboss.weld.injection.spi; \
+               org.jboss.weld.injection.spi.helpers; \
+               org.jboss.weld; \
+               org.jboss.weld.manager; \
+               org.jboss.weld.jsf; \
+               org.jboss.weld.ejb; \
+               org.jboss.weld.event; \
+               org.jboss.weld.introspector; \
+               org.jboss.weld.introspector.jlr; \
+               org.jboss.weld.context.beanstore; \
+               org.jboss.weld.context.beanstore.ejb; \
+               org.jboss.weld.context.beanstore.http; \
+               org.jboss.weld.context.cache; \
+               org.jboss.weld.context.conversation; \
+               org.jboss.weld.util; \
+               org.jboss.weld.util.dom; \
+               org.jboss.weld.util.reflection; \
+               org.jboss.weld.util.reflection.instantiation; \
+               org.jboss.weld.util.el; \
+               org.jboss.weld.util.bytecode; \
+               org.jboss.weld.util.collections; \
+               org.jboss.weld.exceptions; \
+               org.jboss.weld.metadata; \
+               org.jboss.weld.metadata.cache; \
+               org.jboss.weld.el; \
+               org.jboss.weld.xml; \
+               org.jboss.weld.servlet; \
+               org.jboss.weld.ws; \
+               org.jboss.weld.bean; \
+               org.jboss.weld.bean.builtin; \
+               org.jboss.weld.bean.builtin.ee; \
+               org.jboss.weld.bean.proxy; \
+               org.jboss.weld.bean.proxy.util; \
+               org.jboss.weld.bean.interceptor; \
+               org.jboss.weld.resources; \
+               org.jboss.weld.literal; \
+               org.jboss.weld.bootstrap; \
+               org.jboss.weld.bootstrap.events; \
+               org.jboss.weld.logging; \
+               org.jboss.weld.logging.messages; \
+               org.jboss.weld.serialization; \
+               org.jboss.weld.persistence; \
+               org.jboss.weld.resolution; \
+               org.jboss.weld.injection; \
+               org.jboss.weld.environment.se; \
+               org.jboss.weld.environment.se.events; \
+               org.jboss.weld.environment.se.bindings; \
+               org.jboss.weld.environment.se.threading; \
+               org.jboss.weld.environment.se.beans; \
+               org.jboss.weld.environment.se.discovery; \
+               org.jboss.weld.environment.se.discovery.url; \
+               org.jboss.weld.environment.se.contexts; \
+               org.jboss.weld.messages; version=1.1.3
 
 DynamicImport-Package *
\ No newline at end of file",2012-10-12T10:30:48Z,132
"@@ -34,43 +34,103 @@
          <email>matthieu.clochard@serli.com</email>
       </developer>
    </developers>
-    
-    <dependencies>
-    
-        <dependency>
-            <groupId>javax.inject</groupId>
-            <artifactId>javax.inject</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>org.jboss.interceptor</groupId>
-            <artifactId>jboss-interceptor-api</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>javax.el</groupId>
-            <artifactId>el-api</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>javax.enterprise</groupId>
-            <artifactId>cdi-api</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>org.javassist</groupId>
-            <artifactId>javassist</artifactId>
-        </dependency>
-        
-    </dependencies>
-
-    <build>
-        <plugins>
-            <plugin>
-                <groupId>org.apache.felix</groupId>
-                <artifactId>maven-bundle-plugin</artifactId>
-            </plugin>
-        </plugins>
-    </build>
-    
+
+   <dependencies>
+
+      <dependency>
+         <groupId>org.jboss.weld</groupId>
+         <artifactId>weld-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.weld.se</groupId>
+         <artifactId>weld-se-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.weld</groupId>
+         <artifactId>weld-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.weld</groupId>
+         <artifactId>weld-spi</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>javax.inject</groupId>
+         <artifactId>javax.inject</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>javax.el</groupId>
+         <artifactId>el-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>javax.enterprise</groupId>
+         <artifactId>cdi-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.interceptor</groupId>
+         <artifactId>jboss-interceptor-spi</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.interceptor</groupId>
+         <artifactId>jboss-interceptor-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.interceptor</groupId>
+         <artifactId>jboss-interceptor-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.javassist</groupId>
+         <artifactId>javassist</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>com.google.guava</groupId>
+         <artifactId>guava</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>ch.qos.cal10n</groupId>
+         <artifactId>cal10n-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.slf4j</groupId>
+         <artifactId>slf4j-ext</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.slf4j</groupId>
+         <artifactId>slf4j-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>ch.qos.logback</groupId>
+         <artifactId>logback-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>ch.qos.logback</groupId>
+         <artifactId>logback-classic</artifactId>
+      </dependency>
+
+   </dependencies>
+
+   <build>
+      <plugins>
+         <plugin>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>maven-bundle-plugin</artifactId>
+         </plugin>
+      </plugins>
+   </build>
+
 </project>",2012-10-12T10:30:48Z,139
"@@ -27,7 +27,164 @@ Export-Package javax.el;version=2.2.0, \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
                javassist.tools.web; version=3.14.0, \
-               com.sun.jdi
+               com.sun.jdi, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; \
+               org.slf4j.cal10n; \
+               org.slf4j.profiler; \
+               org.slf4j.agent; \
+               org.slf4j.instrumentation; \
+               org.slf4j.ext; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29, \
+               com.google.common.primitives; \
+               com.google.common.collect; \
+               com.google.common.util.concurrent; \
+               com.google.common.io; \
+               com.google.common.net; \
+               com.google.common.annotations; \
+               com.google.common.base; \
+               com.google.common.base.internal, \
+               ch.qos.cal10n; \
+               ch.qos.cal10n.verifier; \
+               ch.qos.cal10n.util; version=0.7.2, \
+               org.jboss.interceptor.reader; \
+               org.jboss.interceptor.reader.cache; \
+               org.jboss.interceptor.spi.instance; \
+               org.jboss.interceptor.spi.context; \
+               org.jboss.interceptor.spi.model; \
+               org.jboss.interceptor.spi.metadata; \
+               org.jboss.interceptor.util; \
+               org.jboss.interceptor.util.proxy; \
+               org.jboss.interceptor.proxy; \
+               org.jboss.interceptor.proxy.javassist; \
+               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.manager.api; \
+               org.jboss.weld.ejb.spi; \
+               org.jboss.weld.ejb.spi.helpers; \
+               org.jboss.weld.ejb.api; \
+               org.jboss.weld.context; \
+               org.jboss.weld.context.ejb; \
+               org.jboss.weld.context.unbound; \
+               org.jboss.weld.context.bound; \
+               org.jboss.weld.context.api; \
+               org.jboss.weld.context.http; \
+               org.jboss.weld.validation.spi; \
+               org.jboss.weld.transaction.spi; \
+               org.jboss.weld.servlet.api; \
+               org.jboss.weld.servlet.api.helpers; \
+               org.jboss.weld.resources.spi; \
+               org.jboss.weld.resources.spi.helpers; \
+               org.jboss.weld.bootstrap.spi; \
+               org.jboss.weld.bootstrap.spi.helpers; \
+               org.jboss.weld.bootstrap.api; \
+               org.jboss.weld.bootstrap.api.helpers; \
+               org.jboss.weld.serialization.spi; \
+               org.jboss.weld.serialization.spi.helpers; \
+               org.jboss.weld.security.spi; \
+               org.jboss.weld.injection.spi; \
+               org.jboss.weld.injection.spi.helpers; \
+               org.jboss.weld; \
+               org.jboss.weld.manager; \
+               org.jboss.weld.jsf; \
+               org.jboss.weld.ejb; \
+               org.jboss.weld.event; \
+               org.jboss.weld.introspector; \
+               org.jboss.weld.introspector.jlr; \
+               org.jboss.weld.context.beanstore; \
+               org.jboss.weld.context.beanstore.ejb; \
+               org.jboss.weld.context.beanstore.http; \
+               org.jboss.weld.context.cache; \
+               org.jboss.weld.context.conversation; \
+               org.jboss.weld.util; \
+               org.jboss.weld.util.dom; \
+               org.jboss.weld.util.reflection; \
+               org.jboss.weld.util.reflection.instantiation; \
+               org.jboss.weld.util.el; \
+               org.jboss.weld.util.bytecode; \
+               org.jboss.weld.util.collections; \
+               org.jboss.weld.exceptions; \
+               org.jboss.weld.metadata; \
+               org.jboss.weld.metadata.cache; \
+               org.jboss.weld.el; \
+               org.jboss.weld.xml; \
+               org.jboss.weld.servlet; \
+               org.jboss.weld.ws; \
+               org.jboss.weld.bean; \
+               org.jboss.weld.bean.builtin; \
+               org.jboss.weld.bean.builtin.ee; \
+               org.jboss.weld.bean.proxy; \
+               org.jboss.weld.bean.proxy.util; \
+               org.jboss.weld.bean.interceptor; \
+               org.jboss.weld.resources; \
+               org.jboss.weld.literal; \
+               org.jboss.weld.bootstrap; \
+               org.jboss.weld.bootstrap.events; \
+               org.jboss.weld.logging; \
+               org.jboss.weld.logging.messages; \
+               org.jboss.weld.serialization; \
+               org.jboss.weld.persistence; \
+               org.jboss.weld.resolution; \
+               org.jboss.weld.injection; \
+               org.jboss.weld.environment.se; \
+               org.jboss.weld.environment.se.events; \
+               org.jboss.weld.environment.se.bindings; \
+               org.jboss.weld.environment.se.threading; \
+               org.jboss.weld.environment.se.beans; \
+               org.jboss.weld.environment.se.discovery; \
+               org.jboss.weld.environment.se.discovery.url; \
+               org.jboss.weld.environment.se.contexts; \
+               org.jboss.weld.messages; version=1.1.3
+
 
 DynamicImport-Package *
 ",2012-10-12T10:30:48Z,133
"@@ -27,7 +27,164 @@ Export-Package javax.el;version=2.2.0, \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
                javassist.tools.web; version=3.14.0, \
-               com.sun.jdi
+               com.sun.jdi, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; \
+               org.slf4j.cal10n; \
+               org.slf4j.profiler; \
+               org.slf4j.agent; \
+               org.slf4j.instrumentation; \
+               org.slf4j.ext; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29, \
+               com.google.common.primitives; \
+               com.google.common.collect; \
+               com.google.common.util.concurrent; \
+               com.google.common.io; \
+               com.google.common.net; \
+               com.google.common.annotations; \
+               com.google.common.base; \
+               com.google.common.base.internal, \
+               ch.qos.cal10n; \
+               ch.qos.cal10n.verifier; \
+               ch.qos.cal10n.util; version=0.7.2, \
+               org.jboss.interceptor.reader; \
+               org.jboss.interceptor.reader.cache; \
+               org.jboss.interceptor.spi.instance; \
+               org.jboss.interceptor.spi.context; \
+               org.jboss.interceptor.spi.model; \
+               org.jboss.interceptor.spi.metadata; \
+               org.jboss.interceptor.util; \
+               org.jboss.interceptor.util.proxy; \
+               org.jboss.interceptor.proxy; \
+               org.jboss.interceptor.proxy.javassist; \
+               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.manager.api; \
+               org.jboss.weld.ejb.spi; \
+               org.jboss.weld.ejb.spi.helpers; \
+               org.jboss.weld.ejb.api; \
+               org.jboss.weld.context; \
+               org.jboss.weld.context.ejb; \
+               org.jboss.weld.context.unbound; \
+               org.jboss.weld.context.bound; \
+               org.jboss.weld.context.api; \
+               org.jboss.weld.context.http; \
+               org.jboss.weld.validation.spi; \
+               org.jboss.weld.transaction.spi; \
+               org.jboss.weld.servlet.api; \
+               org.jboss.weld.servlet.api.helpers; \
+               org.jboss.weld.resources.spi; \
+               org.jboss.weld.resources.spi.helpers; \
+               org.jboss.weld.bootstrap.spi; \
+               org.jboss.weld.bootstrap.spi.helpers; \
+               org.jboss.weld.bootstrap.api; \
+               org.jboss.weld.bootstrap.api.helpers; \
+               org.jboss.weld.serialization.spi; \
+               org.jboss.weld.serialization.spi.helpers; \
+               org.jboss.weld.security.spi; \
+               org.jboss.weld.injection.spi; \
+               org.jboss.weld.injection.spi.helpers; \
+               org.jboss.weld; \
+               org.jboss.weld.manager; \
+               org.jboss.weld.jsf; \
+               org.jboss.weld.ejb; \
+               org.jboss.weld.event; \
+               org.jboss.weld.introspector; \
+               org.jboss.weld.introspector.jlr; \
+               org.jboss.weld.context.beanstore; \
+               org.jboss.weld.context.beanstore.ejb; \
+               org.jboss.weld.context.beanstore.http; \
+               org.jboss.weld.context.cache; \
+               org.jboss.weld.context.conversation; \
+               org.jboss.weld.util; \
+               org.jboss.weld.util.dom; \
+               org.jboss.weld.util.reflection; \
+               org.jboss.weld.util.reflection.instantiation; \
+               org.jboss.weld.util.el; \
+               org.jboss.weld.util.bytecode; \
+               org.jboss.weld.util.collections; \
+               org.jboss.weld.exceptions; \
+               org.jboss.weld.metadata; \
+               org.jboss.weld.metadata.cache; \
+               org.jboss.weld.el; \
+               org.jboss.weld.xml; \
+               org.jboss.weld.servlet; \
+               org.jboss.weld.ws; \
+               org.jboss.weld.bean; \
+               org.jboss.weld.bean.builtin; \
+               org.jboss.weld.bean.builtin.ee; \
+               org.jboss.weld.bean.proxy; \
+               org.jboss.weld.bean.proxy.util; \
+               org.jboss.weld.bean.interceptor; \
+               org.jboss.weld.resources; \
+               org.jboss.weld.literal; \
+               org.jboss.weld.bootstrap; \
+               org.jboss.weld.bootstrap.events; \
+               org.jboss.weld.logging; \
+               org.jboss.weld.logging.messages; \
+               org.jboss.weld.serialization; \
+               org.jboss.weld.persistence; \
+               org.jboss.weld.resolution; \
+               org.jboss.weld.injection; \
+               org.jboss.weld.environment.se; \
+               org.jboss.weld.environment.se.events; \
+               org.jboss.weld.environment.se.bindings; \
+               org.jboss.weld.environment.se.threading; \
+               org.jboss.weld.environment.se.beans; \
+               org.jboss.weld.environment.se.discovery; \
+               org.jboss.weld.environment.se.discovery.url; \
+               org.jboss.weld.environment.se.contexts; \
+               org.jboss.weld.messages; version=1.1.3
+
 
 DynamicImport-Package *
 ",2012-10-12T10:30:48Z,140
"@@ -2,12 +2,12 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <parent>
+   <!--<parent>
       <groupId>org.jboss.weld.osgi.examples</groupId>
       <artifactId>weld-osgi-examples</artifactId>
       <version>1.1.3-SNAPSHOT</version>
       <relativePath>../pom.xml</relativePath>
-   </parent>
+   </parent>-->
     <modelVersion>4.0.0</modelVersion>
     <groupId>org.jboss.weld.osgi.examples</groupId>
     <artifactId>weld-osgi-container-equinox</artifactId>",2012-10-12T10:31:09Z,141
"@@ -2,302 +2,327 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <parent>
-      <groupId>org.jboss.weld.osgi.examples</groupId>
-      <artifactId>weld-osgi-examples</artifactId>
-      <version>1.1.3-SNAPSHOT</version>
-      <relativePath>../pom.xml</relativePath>
-   </parent>
-   <modelVersion>4.0.0</modelVersion>
-   <groupId>org.jboss.weld.osgi.examples</groupId>
-   <artifactId>weld-osgi-container-knopflerfish</artifactId>
-   <name>Weld OSGi (Examples Container Knopflerfish)</name>
-
-   <description>Standalone example for Weld-OSGi</description>
-
-   <url>http://www.seamframework.org/Weld</url>
-   <licenses>
-      <license>
-         <name>Apache License, Version 2.0</name>
-         <distribution>repo</distribution>
-         <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
-      </license>
-   </licenses>
-
-   <developers>
-      <developer>
-         <name>Mathieu Ancelin</name>
-         <email>mathieu.ancelin@serli.com</email>
-      </developer>
-      <developer>
-         <name>Matthieu Clochard</name>
-         <email>matthieu.clochard@serli.com</email>
-      </developer>
-   </developers>
-
-   <dependencies>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-divide</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-log</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-minus</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-plus</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-times</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-square</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-triangle</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-standalone</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-app</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-england</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-fwk</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-france</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-spain</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>javax.ws.rs</groupId>
-         <artifactId>jsr311-api</artifactId>
-         <version>1.1</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.codehaus.groovy</groupId>
-         <artifactId>groovy-all</artifactId>
-         <version>1.8.0-rc-3</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-spi</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-extension</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-mandatory</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-integration</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.osgi</groupId>
-         <artifactId>org.osgi.core</artifactId>
-         <version>4.2.0</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.main</artifactId>
-         <version>3.0.6</version>
-         <scope>provided</scope>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix.gogo</groupId>
-         <artifactId>org.apache.felix.gogo.commands</artifactId>
-         <version>0.4.0</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.bundlerepository</artifactId>
-         <version>1.2.1</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.shell.tui</artifactId>
-         <version>1.0.2</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.shell</artifactId>
-         <version>1.0.2</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.http.bundle</artifactId>
-         <version>2.0.4</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.log</artifactId>
-         <version>1.0.0</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.configadmin</artifactId>
-         <version>1.2.8</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld</groupId>
-         <artifactId>weld-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.se</groupId>
-         <artifactId>weld-se-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-   </dependencies>
-
-   <build>
-      <resources>
-         <resource>
-            <directory>src/main/resources</directory>
-             <filtering>true</filtering>
-         </resource>
-      </resources>
-      <plugins>
-         <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-antrun-plugin</artifactId>
-            <executions>
-               <execution>
-                  <id>compile</id>
-                  <phase>package</phase>
-                  <goals>
-                     <goal>run</goal>
-                  </goals>
-                  <configuration>
-                     <tasks>
-                        <copy file=""target/classes/config.properties"" tofile=""${project.build.directory}/config.properties""/>
-                        <copy file=""${maven.dependency.org.apache.felix.org.apache.felix.main.jar.path}"" tofile=""${project.build.directory}/felix.jar""/>
-                     </tasks>
-                  </configuration>
-               </execution>
-            </executions>
-         </plugin>
-
-         <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-assembly-plugin</artifactId>
-            <executions>
-               <execution>
-                  <id>create-executable-jar</id>
-                  <phase>package</phase>
-                  <goals>
-                     <goal>single</goal>
-                  </goals>
-                  <configuration>
-                     <descriptors>
-                        <descriptor>${basedir}/src/main/assembly/assembly.xml</descriptor>
-                     </descriptors>
-                     <finalName>${project.artifactId}-${project.version}</finalName>
-                  </configuration>
-               </execution>
-            </executions>
-         </plugin>
-      </plugins>
-   </build>
+    <!--<parent>
+        <groupId>org.jboss.weld.osgi.examples</groupId>
+        <artifactId>weld-osgi-examples</artifactId>
+        <version>1.1.3-SNAPSHOT</version>
+        <relativePath>../pom.xml</relativePath>
+    </parent>-->
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.jboss.weld.osgi.examples</groupId>
+    <artifactId>weld-osgi-container-knopflerfish</artifactId>
+    <version>1.1.3-SNAPSHOT</version>
+    <name>Weld OSGi (Examples Container Knopflerfish)</name>
+
+    <description>Standalone example for Weld-OSGi</description>
+
+    <url>http://www.seamframework.org/Weld</url>
+    <licenses>
+        <license>
+            <name>Apache License, Version 2.0</name>
+            <distribution>repo</distribution>
+            <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
+        </license>
+    </licenses>
+
+    <developers>
+        <developer>
+            <name>Mathieu Ancelin</name>
+            <email>mathieu.ancelin@serli.com</email>
+        </developer>
+        <developer>
+            <name>Matthieu Clochard</name>
+            <email>matthieu.clochard@serli.com</email>
+        </developer>
+    </developers>
+
+    <repositories>
+        <repository>
+            <releases>
+                <enabled>true</enabled>
+                <updatePolicy>never</updatePolicy>
+                <checksumPolicy>fail</checksumPolicy>
+            </releases>
+            <snapshots>
+                <enabled>true</enabled>
+                <updatePolicy>never</updatePolicy>
+                <checksumPolicy>fail</checksumPolicy>
+            </snapshots>
+            <id>Knopflerfish</id>
+            <name>Knopflerfish Releases Repository</name>
+            <url>http://www.knopflerfish.org/maven2</url>
+            <layout>default</layout>
+        </repository>
+    </repositories>
+
+    <dependencies>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-divide</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-log</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-minus</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-plus</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-times</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-square</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-triangle</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-standalone</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-app</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-england</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-fwk</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-france</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-spain</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>javax.ws.rs</groupId>
+            <artifactId>jsr311-api</artifactId>
+            <version>1.1</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.codehaus.groovy</groupId>
+            <artifactId>groovy-all</artifactId>
+            <version>1.8.0-rc-3</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-spi</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-extension</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-mandatory</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-integration</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld</groupId>
+            <artifactId>weld-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.se</groupId>
+            <artifactId>weld-se-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.osgi</groupId>
+            <artifactId>org.osgi.core</artifactId>
+            <version>4.2.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.osgi</groupId>
+            <artifactId>org.osgi.compendium</artifactId>
+            <version>4.2.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.knopflerfish</groupId>
+            <artifactId>framework</artifactId>
+            <version>5.1.14</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix.gogo</groupId>
+            <artifactId>org.apache.felix.gogo.commands</artifactId>
+            <version>0.4.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.bundlerepository</artifactId>
+            <version>1.2.1</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.shell.tui</artifactId>
+            <version>1.0.2</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.shell</artifactId>
+            <version>1.0.2</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.http.bundle</artifactId>
+            <version>2.0.4</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.log</artifactId>
+            <version>1.0.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.configadmin</artifactId>
+            <version>1.2.8</version>
+        </dependency>
+
+    </dependencies>
+
+    <build>
+        <resources>
+            <resource>
+                <directory>src/main/resources</directory>
+                <filtering>true</filtering>
+            </resource>
+        </resources>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-antrun-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>compile</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>run</goal>
+                        </goals>
+                        <configuration>
+                            <tasks>
+                                <copy file=""target/classes/config.xargs"" tofile=""${project.build.directory}/config.xargs""/>
+                                <copy file=""${maven.dependency.org.knopflerfish.framework.jar.path}"" tofile=""${project.build.directory}/knopflerfish.jar""/>
+                            </tasks>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-assembly-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>create-executable-jar</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>single</goal>
+                        </goals>
+                        <configuration>
+                            <descriptors>
+                                <descriptor>${basedir}/src/main/assembly/assembly.xml</descriptor>
+                            </descriptors>
+                            <finalName>${project.artifactId}-${project.version}</finalName>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+        </plugins>
+    </build>
 
 </project>",2012-10-12T10:31:09Z,142
"@@ -34,30 +34,25 @@
                 <include>org.jboss.weld.osgi:weld-osgi-core-spi</include>
                 <include>org.jboss.weld.osgi:weld-osgi-core-extension</include>
                 <include>org.jboss.weld.osgi:weld-osgi-core-mandatory</include>
+                <include>org.osgi:org.osgi.compendium</include>
                 <include>org.apache.felix:org.apache.felix.bundlerepository</include>
                 <include>org.apache.felix:org.apache.felix.shell.tui</include>
                 <include>org.apache.felix:org.apache.felix.shell</include>
                 <include>org.apache.felix:org.apache.felix.http.bundle</include>
                 <include>org.apache.felix:org.apache.felix.log</include>
                 <include>org.apache.felix:org.apache.felix.configadmin</include>
+                <include>org.codehaus.groovy:groovy-all</include>
                 <include>javax.ws.rs:jsr311-api</include>
             </includes>
         </dependencySet>
-        <dependencySet>
-            <useProjectArtifact>false</useProjectArtifact>
-            <outputDirectory></outputDirectory>
-            <includes>
-                <include>org.apache.felix:org.apache.felix.main</include>
-            </includes>
-        </dependencySet>
     </dependencySets>
     <files>
         <file>
-            <source>${project.build.directory}/felix.jar</source>
-            <outputDirectory>bin</outputDirectory>
+            <source>${project.build.directory}/knopflerfish.jar</source>
+            <outputDirectory></outputDirectory>
         </file>
         <file>
-            <source>${project.build.directory}/config.properties</source>
+            <source>${project.build.directory}/config.xargs</source>
             <outputDirectory>conf</outputDirectory>
         </file>
     </files>",2012-10-12T10:31:09Z,143
"@@ -1,49 +0,0 @@
-org.osgi.framework.storage.clean=onFirstInit
-
-felix.log.level=1
-
-org.osgi.framework.bootdelegation=sun.reflect
-
-felix.auto.install=  \
-file:modules/weld-osgi-core-api-${project.version}.jar \
-file:modules/weld-osgi-core-spi-${project.version}.jar \
-file:modules/weld-osgi-core-mandatory-${project.version}.jar \
-file:modules/weld-osgi-paint-api-${project.version}.jar  \
-file:modules/weld-osgi-paint-core-${project.version}.jar \
-file:modules/weld-osgi-paint-triangle-${project.version}.jar  \
-file:modules/weld-osgi-paint-square-${project.version}.jar  \
-file:modules/weld-osgi-calculator-api-${project.version}.jar  \
-file:modules/weld-osgi-calculator-core-${project.version}.jar  \
-file:modules/weld-osgi-calculator-log-${project.version}.jar  \
-file:modules/weld-osgi-calculator-divide-${project.version}.jar  \
-file:modules/weld-osgi-calculator-minus-${project.version}.jar  \
-file:modules/weld-osgi-calculator-plus-${project.version}.jar  \
-file:modules/weld-osgi-calculator-times-${project.version}.jar  \
-file:modules/weld-osgi-web-api-${project.version}.jar  \
-file:modules/weld-osgi-web-fwk-${project.version}.jar \
-file:modules/weld-osgi-web-france-${project.version}.jar  \
-file:modules/weld-osgi-web-spain-${project.version}.jar  \
-file:modules/weld-osgi-web-england-${project.version}.jar  \
-file:modules/weld-osgi-web-app-${project.version}.jar  \
-file:modules/weld-osgi-standalone-${project.version}.jar  \
-file:modules/jsr311-api-1.1.jar \
-file:modules/org.apache.felix.gogo.commands-0.4.0.jar  \
-file:modules/org.apache.felix.gogo.runtime-0.4.0.jar
-
-felix.auto.start= \
-file:modules/weld-osgi-core-extension-${project.version}.jar \
-file:modules/weld-osgi-core-integration-${project.version}.jar \
-file:modules/org.apache.felix.configadmin-1.2.8.jar \
-file:modules/org.apache.felix.http.bundle-2.0.4.jar \
-file:modules/org.apache.felix.log-1.0.0.jar \
-file:modules/org.apache.felix.shell-1.0.2.jar \
-file:modules/org.apache.felix.shell.tui-1.0.2.jar \
-file:modules/org.apache.felix.bundlerepository-1.2.1.jar
-
-org.osgi.service.http.port=9000
-org.apache.felix.http.whiteboardEnabled=true
-org.apache.felix.http.jettyEnabled=true
-org.apache.felix.http=true
-
-osgi.shell.telnet=on
-obr.repository.url=http://felix.apache.org/obr/releases.xml",2012-10-12T10:31:09Z,144
"@@ -0,0 +1,51 @@
+-init
+-launch
+
+-F org.osgi.framework.storage.clean=onFirstInit
+-F felix.log.level=1
+-F org.osgi.framework.bootdelegation=sun.reflect
+
+-install modules/weld-osgi-core-api-${project.version}.jar
+-install modules/weld-osgi-core-spi-${project.version}.jar
+-install modules/weld-osgi-core-mandatory-${project.version}.jar
+-install modules/weld-osgi-paint-api-${project.version}.jar
+-install modules/weld-osgi-paint-core-${project.version}.jar
+-install modules/weld-osgi-paint-triangle-${project.version}.jar
+-install modules/weld-osgi-paint-square-${project.version}.jar
+-install modules/weld-osgi-calculator-api-${project.version}.jar
+-install modules/weld-osgi-calculator-core-${project.version}.jar
+-install modules/weld-osgi-calculator-log-${project.version}.jar
+-install modules/weld-osgi-calculator-divide-${project.version}.jar
+-install modules/weld-osgi-calculator-minus-${project.version}.jar
+-install modules/weld-osgi-calculator-plus-${project.version}.jar
+-install modules/weld-osgi-calculator-times-${project.version}.jar
+-install modules/weld-osgi-web-api-${project.version}.jar
+-install modules/weld-osgi-web-fwk-${project.version}.jar
+-install modules/weld-osgi-web-france-${project.version}.jar
+-install modules/weld-osgi-web-spain-${project.version}.jar
+-install modules/weld-osgi-web-england-${project.version}.jar
+-install modules/weld-osgi-web-app-${project.version}.jar
+-install modules/weld-osgi-standalone-${project.version}.jar
+-install modules/groovy-all-1.8.0-rc-3.jar
+-install modules/jsr311-api-1.1.jar
+-install modules/org.apache.felix.gogo.commands-0.4.0.jar
+-install modules/org.apache.felix.gogo.runtime-0.4.0.jar
+-install modules/org.osgi.compendium-4.2.0.jar
+
+
+-istart modules/weld-osgi-core-extension-${project.version}.jar
+-istart modules/weld-osgi-core-integration-${project.version}.jar
+-istart modules/org.apache.felix.configadmin-1.2.8.jar
+-istart modules/org.apache.felix.http.bundle-2.0.4.jar
+-istart modules/org.apache.felix.log-1.0.0.jar
+-istart modules/org.apache.felix.shell-1.0.2.jar
+-istart modules/org.apache.felix.shell.tui-1.0.2.jar
+-istart modules/org.apache.felix.bundlerepository-1.2.1.jar
+
+-F org.osgi.service.http.port=9000
+-F org.apache.felix.http.whiteboardEnabled=true
+-F org.apache.felix.http.jettyEnabled=true
+-F org.apache.felix.http=true
+
+-F osgi.shell.telnet=on
+-F obr.repository.url=http://felix.apache.org/obr/releases.xml
\ No newline at end of file",2012-10-12T10:31:09Z,145
"@@ -1,150 +1,150 @@
 
 <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <modelVersion>4.0.0</modelVersion>
-   <groupId>org.jboss.weld.osgi</groupId>
-   <artifactId>weld-osgi-parent</artifactId>
-   <name>Weld OSGi (Parent)</name>
-   <packaging>pom</packaging>
-
-   <parent>
-      <groupId>org.jboss.weld</groupId>
-      <artifactId>weld-core-parent</artifactId>
-      <relativePath>../../parent/pom.xml</relativePath>
-      <version>1.1.3-SNAPSHOT</version>
-   </parent>
-
-   <licenses>
-      <license>
-         <name>Apache License, Version 2.0</name>
-         <distribution>repo</distribution>
-         <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
-      </license>
-   </licenses>
-   <url>http://www.seamframework.org/Weld</url>
-
-   <developers>
-      <developer>
-         <name>Mathieu Ancelin</name>
-         <email>mathieu.ancelin@serli.com</email>
-      </developer>
-      <developer>
-         <name>Matthieu Clochard</name>
-         <email>matthieu.clochard@serli.com</email>
-      </developer>
-   </developers>
-
-   <modules>
-      <module>core</module>
-      <module>examples</module>
-   </modules>
-
-   <profiles>
-      <profile>
-         <id>weld-osgi-docs</id>
-         <modules>
-            <module>docs</module>
-         </modules>
-      </profile>
-      <profile>
-         <id>weld-osgi-tests</id>
-         <modules>
-            <module>core</module>
-            <module>tests</module>
-         </modules>
-      </profile>
-   </profiles>
-
-   <description>
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.jboss.weld.osgi</groupId>
+    <artifactId>weld-osgi-parent</artifactId>
+    <name>Weld OSGi (Parent)</name>
+    <packaging>pom</packaging>
+
+    <parent>
+        <groupId>org.jboss.weld</groupId>
+        <artifactId>weld-core-parent</artifactId>
+        <relativePath>../../parent/pom.xml</relativePath>
+        <version>1.1.3-SNAPSHOT</version>
+    </parent>
+
+    <licenses>
+        <license>
+            <name>Apache License, Version 2.0</name>
+            <distribution>repo</distribution>
+            <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
+        </license>
+    </licenses>
+    <url>http://www.seamframework.org/Weld</url>
+
+    <developers>
+        <developer>
+            <name>Mathieu Ancelin</name>
+            <email>mathieu.ancelin@serli.com</email>
+        </developer>
+        <developer>
+            <name>Matthieu Clochard</name>
+            <email>matthieu.clochard@serli.com</email>
+        </developer>
+    </developers>
+
+    <modules>
+        <module>core</module>
+        <module>examples</module>
+    </modules>
+
+    <profiles>
+        <profile>
+            <id>weld-osgi-docs</id>
+            <modules>
+                <module>docs</module>
+            </modules>
+        </profile>
+        <profile>
+            <id>weld-osgi-tests</id>
+            <modules>
+                <module>core</module>
+                <module>tests</module>
+            </modules>
+        </profile>
+    </profiles>
+
+    <description>
       Support for Weld in OSGi Containers
-   </description>
-
-   <properties>
-      <osgi.version>4.2.0</osgi.version>
-      <javax.inject.version>1</javax.inject.version>
-      <javax.el.version>2.2</javax.el.version>
-      <jsr250.api>1.0</jsr250.api>
-      <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
-      <weld.api.version>1.2-SNAPSHOT</weld.api.version>
-      <slf4j.version>1.6.1</slf4j.version>
-      <logback.version>0.9.29</logback.version>
-   </properties>
-
-   <dependencyManagement>
-      <dependencies>
-
-         <dependency>
-            <groupId>org.osgi</groupId>
-            <artifactId>org.osgi.core</artifactId>
-            <version>${osgi.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.osgi</groupId>
-            <artifactId>org.osgi.compendium</artifactId>
-            <version>${osgi.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.jboss.weld</groupId>
-            <artifactId>weld-api</artifactId>
-            <version>${weld.api.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.jboss.weld</groupId>
-            <artifactId>weld-spi</artifactId>
-            <version>${weld.api.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>javax.inject</groupId>
-            <artifactId>javax.inject</artifactId>
-            <version>${javax.inject.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>javax.el</groupId>
-            <artifactId>el-api</artifactId>
-            <version>${javax.el.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>javax.annotation</groupId>
-            <artifactId>jsr250-api</artifactId>
-            <version>${jsr250.api}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.jboss.interceptor</groupId>
-            <artifactId>jboss-interceptor-api</artifactId>
-            <version>${jboss.interceptors.api.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-ext</artifactId>
-            <version>${slf4j.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-api</artifactId>
-            <version>${slf4j.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>ch.qos.logback</groupId>
-            <artifactId>logback-core</artifactId>
-            <version>${logback.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>ch.qos.logback</groupId>
-            <artifactId>logback-classic</artifactId>
-            <version>${logback.version}</version>
-         </dependency>
-
-      </dependencies>
-   </dependencyManagement>
+    </description>
+
+    <properties>
+        <osgi.version>4.2.0</osgi.version>
+        <javax.inject.version>1</javax.inject.version>
+        <javax.el.version>2.2</javax.el.version>
+        <jsr250.api>1.0</jsr250.api>
+        <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
+        <weld.api.version>1.2-SNAPSHOT</weld.api.version>
+        <slf4j.version>1.6.1</slf4j.version>
+        <logback.version>0.9.29</logback.version>
+    </properties>
+    
+    <dependencyManagement>
+        <dependencies>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.core</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.compendium</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld</groupId>
+                <artifactId>weld-api</artifactId>
+                <version>${weld.api.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld</groupId>
+                <artifactId>weld-spi</artifactId>
+                <version>${weld.api.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.inject</groupId>
+                <artifactId>javax.inject</artifactId>
+                <version>${javax.inject.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.el</groupId>
+                <artifactId>el-api</artifactId>
+                <version>${javax.el.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.annotation</groupId>
+                <artifactId>jsr250-api</artifactId>
+                <version>${jsr250.api}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.interceptor</groupId>
+                <artifactId>jboss-interceptor-api</artifactId>
+                <version>${jboss.interceptors.api.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.slf4j</groupId>
+                <artifactId>slf4j-ext</artifactId>
+                <version>${slf4j.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.slf4j</groupId>
+                <artifactId>slf4j-api</artifactId>
+                <version>${slf4j.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-core</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-classic</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
+        </dependencies>
+    </dependencyManagement>
 
 </project>",2012-10-12T10:31:09Z,146
"@@ -0,0 +1,4 @@
+#!/bin/sh
+
+cd ./examples/container-knopflerfish/target/weld-osgi-container-knopflerfish-1.1.3-SNAPSHOT-all/weld-osgi-container-knopflerfish-1.1.3-SNAPSHOT/
+java -jar knopflerfish.jar -xargs conf/config.xargs",2012-10-12T10:31:09Z,147
"@@ -48,13 +48,10 @@ public static void waitForEnvironment(BundleContext context) throws InterruptedE
         while(!ready) {
             ready = true;
             for(Bundle b : context.getBundles()) {
-                System.out.println(""wait for bundle "" + b.getSymbolicName());
                 if(b.getState() != Bundle.ACTIVE) {
                     ready = false;
                     break;
                 }
-                System.out.println(""bundle "" + b.getSymbolicName() + "" is ready"");
-                Thread.sleep(500);
             }
             Thread.sleep(500);
         }",2012-10-12T10:31:09Z,148
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
@@ -29,18 +46,15 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-extension</artifactId>
-            <version>${project.version}</version>
         </dependency>
         <dependency>
             <groupId>javax</groupId>
             <artifactId>javaee-web-api</artifactId>
-            <version>6.0</version>
             <scope>provided</scope>
         </dependency>
         <dependency>
             <groupId>org.osgi</groupId>
             <artifactId>org.osgi.core</artifactId>
-            <version>4.2.0</version>
             <scope>provided</scope>
         </dependency>
 ",2012-10-12T10:31:59Z,149
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
@@ -39,13 +56,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>",2012-10-12T10:31:59Z,150
"@@ -46,19 +46,16 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-extension</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>",2012-10-12T10:31:59Z,138
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
@@ -34,7 +51,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,151
"@@ -75,85 +75,4 @@
         Support for Weld in OSGi Containers
     </description>
 
-    <properties>
-        <osgi.version>4.2.0</osgi.version>
-        <javax.inject.version>1</javax.inject.version>
-        <javax.el.version>2.2</javax.el.version>
-        <jsr250.api>1.0</jsr250.api>
-        <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
-        <logback.version>0.9.29</logback.version>
-    </properties>
-
-    <dependencyManagement>
-        <dependencies>
-
-            <dependency>
-                <groupId>org.osgi</groupId>
-                <artifactId>org.osgi.core</artifactId>
-                <version>${osgi.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.osgi</groupId>
-                <artifactId>org.osgi.compendium</artifactId>
-                <version>${osgi.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.jboss.weld</groupId>
-                <artifactId>weld-api</artifactId>
-                <version>${weld.api.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.jboss.weld</groupId>
-                <artifactId>weld-spi</artifactId>
-                <version>${weld.api.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>javax.inject</groupId>
-                <artifactId>javax.inject</artifactId>
-                <version>${javax.inject.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>javax.el</groupId>
-                <artifactId>el-api</artifactId>
-                <version>${javax.el.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>javax.annotation</groupId>
-                <artifactId>jsr250-api</artifactId>
-                <version>${jsr250.api}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.slf4j</groupId>
-                <artifactId>slf4j-ext</artifactId>
-                <version>${slf4j.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.slf4j</groupId>
-                <artifactId>slf4j-api</artifactId>
-                <version>${slf4j.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>ch.qos.logback</groupId>
-                <artifactId>logback-core</artifactId>
-                <version>${logback.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>ch.qos.logback</groupId>
-                <artifactId>logback-classic</artifactId>
-                <version>${logback.version}</version>
-            </dependency>
-
-        </dependencies>
-    </dependencyManagement>
-
 </project>",2012-10-12T10:31:59Z,146
"@@ -58,7 +58,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,152
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,13 +58,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,153
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,13 +58,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,154
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -46,13 +63,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,155
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">",2012-10-12T10:31:59Z,156
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,7 +58,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,157
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">",2012-10-12T10:31:59Z,158
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,7 +58,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-innerscanner</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,159
"@@ -33,11 +33,6 @@
 
     <description>Integration tests launcher for Weld-OSGi</description>
 
-    <properties>
-        <version.pax.exam>2.5.0</version.pax.exam>
-        <version.org.apache.felix>4.0.3</version.org.apache.felix>
-    </properties>
-
     <url>http://www.seamframework.org/Weld</url>
     <licenses>
         <license>
@@ -69,28 +64,24 @@
         <dependency>
             <groupId>org.ops4j.pax.exam</groupId>
             <artifactId>pax-exam-junit4</artifactId>
-            <version>${version.pax.exam}</version>
             <scope>test</scope>
         </dependency>
 
         <dependency>
             <groupId>org.ops4j.pax.exam</groupId>
             <artifactId>pax-exam-container-native</artifactId>
-            <version>${version.pax.exam}</version>
             <scope>test</scope>
         </dependency>
 
         <dependency>
             <groupId>org.ops4j.pax.exam</groupId>
             <artifactId>pax-exam-link-mvn</artifactId>
-            <version>${version.pax.exam}</version>
             <scope>test</scope>
         </dependency>
 
         <dependency>
             <groupId>org.apache.felix</groupId>
             <artifactId>org.apache.felix.framework</artifactId>
-            <version>${version.org.apache.felix}</version>
             <scope>test</scope>
         </dependency>
 
@@ -107,37 +98,31 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-extension</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-integration</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld</groupId>
             <artifactId>weld-core</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.se</groupId>
             <artifactId>weld-se-core</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
@@ -208,49 +193,41 @@
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle2</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle3</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-importing</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-scanner</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-innerscanner</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-cdi-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-life-cycle</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,160
"@@ -1,4 +1,5 @@
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
     <modelVersion>4.0.0</modelVersion>
     <groupId>org.jboss.weld</groupId>
     <artifactId>weld-core-parent</artifactId>
@@ -69,6 +70,17 @@
         <selenium.maven.plugin.version>1.0.1</selenium.maven.plugin.version>
         <slf4j.version>1.6.1</slf4j.version>
         <testng.version>5.10</testng.version>
+        <osgi.version>4.2.0</osgi.version>
+        <!-- Weld OSGi deps -->
+        <javax.inject.version>1</javax.inject.version>
+        <javax.web.version>6.0</javax.web.version>
+        <javax.el.version>2.2</javax.el.version>
+        <jsr250.api>1.0</jsr250.api>
+        <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
+        <logback.version>0.9.29</logback.version>
+        <pax.exam.version>2.5.0</pax.exam.version>
+        <org.apache.felix.version>4.0.3</org.apache.felix.version>
+        <!-- Weld API -->
         <weld.api.version>1.2.0.Beta1</weld.api.version>
     </properties>
 
@@ -215,12 +227,6 @@
                 <version>${arquillian.version}</version>
             </dependency>
 
-            <dependency>
-                <groupId>org.jboss.arquillian.container</groupId>
-                <artifactId>arquillian-container-test-spi</artifactId>
-                <version>${arquillian.version}</version>
-            </dependency>
-
             <dependency>
                 <groupId>org.jboss.arquillian.container</groupId>
                 <artifactId>arquillian-weld-ee-embedded-1.1</artifactId>
@@ -357,8 +363,8 @@
             </dependency>
 
             <dependency>
-	            <groupId>org.jboss.spec.javax.ws.rs</groupId>
-	            <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
+                <groupId>org.jboss.spec.javax.ws.rs</groupId>
+                <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
                 <version>${jboss.spec.jaxrs.version}</version>
             </dependency>
 
@@ -448,6 +454,154 @@
                 <version>${project.version}</version>
             </dependency>
 
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-api</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-extension</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-spi</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-integration</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-bundle1</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-bundle2</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-bundle3</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-importing</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-scanner</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-innerscanner</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-cdi-spi</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-life-cycle</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.ops4j.pax.exam</groupId>
+                <artifactId>pax-exam-junit4</artifactId>
+                <version>${pax.exam.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.ops4j.pax.exam</groupId>
+                <artifactId>pax-exam-container-native</artifactId>
+                <version>${pax.exam.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.ops4j.pax.exam</groupId>
+                <artifactId>pax-exam-link-mvn</artifactId>
+                <version>${pax.exam.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.apache.felix</groupId>
+                <artifactId>org.apache.felix.framework</artifactId>
+                <version>${org.apache.felix.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.core</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.compendium</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.inject</groupId>
+                <artifactId>javax.inject</artifactId>
+                <version>${javax.inject.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax</groupId>
+                <artifactId>javaee-web-api</artifactId>
+                <version>${javax.web.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.el</groupId>
+                <artifactId>el-api</artifactId>
+                <version>${javax.el.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.annotation</groupId>
+                <artifactId>jsr250-api</artifactId>
+                <version>${jsr250.api}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-core</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-classic</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
             <dependency>
                 <groupId>org.jboss.shrinkwrap</groupId>
                 <artifactId>shrinkwrap-impl-base</artifactId>
@@ -536,7 +690,7 @@
                         <configLocation>weld-checkstyle/checkstyle.xml</configLocation>
                         <consoleOutput>true</consoleOutput>
                         <failsOnError>true</failsOnError>
-                        <useFile />
+                        <useFile/>
                     </configuration>
                     <dependencies>
                         <dependency>
@@ -574,7 +728,7 @@
                                         </goals>
                                     </pluginExecutionFilter>
                                     <action>
-                                        <ignore />
+                                        <ignore/>
                                     </action>
                                 </pluginExecution>
                             </pluginExecutions>
@@ -586,10 +740,10 @@
                     <artifactId>maven-compiler-plugin</artifactId>
                     <version>2.3.2</version>
                     <configuration>
-                       <source>1.6</source>
-                       <target>1.6</target>
+                        <source>1.6</source>
+                        <target>1.6</target>
                     </configuration>
-                 </plugin>
+                </plugin>
             </plugins>
 
         </pluginManagement>",2012-10-12T10:31:59Z,161
"@@ -11,7 +11,8 @@
    express or implied. * See the License for the specific language
    governing permissions and * limitations under the License. */
 -->
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
     <parent>
         <artifactId>weld-core-parent</artifactId>
         <groupId>org.jboss.weld</groupId>
@@ -91,7 +92,7 @@
                             org.jboss.weld.manager;
                             org.jboss.weld.servlet;
                             org.jboss.weld.util;
-                            org.jboss.interceptor.*;
+                            org.jboss.weld.interceptor.*;
                             version=${osgi.version},
                             org.jboss.weld.el;
                             version=${osgi.version},
@@ -113,7 +114,8 @@
                              on foreign bundles.
                         -->
                         <Import-Package>
-                            org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=""[${slf4j.version},$${version;=+;${slf4j.version}})""; resolution:=optional,
+                            org.slf4j; org.slf4j.spi; org.slf4j.helpers;
+                            version=""[${slf4j.version},$${version;=+;${slf4j.version}})""; resolution:=optional,
                             ch.qos.cal10n; version=${cal10n.version}; resolution:=optional,
                             javax.interceptor.*, *;
                             resolution:=optional",2012-10-12T10:31:32Z,10
"@@ -46,8 +46,8 @@ public WeldCDIContainerFactory() {
         logger.debug(""Creation of a new Weld CDI container factory"");
         blackList = new HashSet<String>();
         blackList.add(""java.io.Serializable"");
-        blackList.add(""org.jboss.interceptor.proxy.LifecycleMixin"");
-        blackList.add(""org.jboss.interceptor.util.proxy.TargetInstanceProxy"");
+        blackList.add(""org.jboss.weld.interceptor.proxy.LifecycleMixin"");
+        blackList.add(""org.jboss.weld.interceptor.util.proxy.TargetInstanceProxy"");
         blackList.add(""javassist.util.proxy.ProxyObject"");
     }
 ",2012-10-12T10:31:32Z,131
"@@ -103,17 +103,17 @@ Import-Package org.jboss.weld.environment.osgi.api; \
                ch.qos.cal10n; \
                ch.qos.cal10n.verifier; \
                ch.qos.cal10n.util; version=0.7.2, \
-               org.jboss.interceptor.reader; \
-               org.jboss.interceptor.reader.cache; \
-               org.jboss.interceptor.spi.instance; \
-               org.jboss.interceptor.spi.context; \
-               org.jboss.interceptor.spi.model; \
-               org.jboss.interceptor.spi.metadata; \
-               org.jboss.interceptor.util; \
-               org.jboss.interceptor.util.proxy; \
-               org.jboss.interceptor.proxy; \
-               org.jboss.interceptor.proxy.javassist; \
-               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.interceptor.reader; \
+               org.jboss.weld.interceptor.reader.cache; \
+               org.jboss.weld.interceptor.spi.instance; \
+               org.jboss.weld.interceptor.spi.context; \
+               org.jboss.weld.interceptor.spi.model; \
+               org.jboss.weld.interceptor.spi.metadata; \
+               org.jboss.weld.interceptor.util; \
+               org.jboss.weld.interceptor.util.proxy; \
+               org.jboss.weld.interceptor.proxy; \
+               org.jboss.weld.interceptor.proxy.javassist; \
+               org.jboss.weld.interceptor.builder; \
                org.jboss.weld.manager.api; \
                org.jboss.weld.ejb.spi; \
                org.jboss.weld.ejb.spi.helpers; \
@@ -189,6 +189,6 @@ Import-Package org.jboss.weld.environment.osgi.api; \
                org.jboss.weld.environment.se.discovery; \
                org.jboss.weld.environment.se.discovery.url; \
                org.jboss.weld.environment.se.contexts; \
-               org.jboss.weld.messages; version=1.1.5
+               org.jboss.weld.messages; version=1.2.0-SNAPSHOT
 
 DynamicImport-Package *
\ No newline at end of file",2012-10-12T10:31:32Z,132
"@@ -97,17 +97,17 @@ Export-Package javax.el;version=2.2.0, \
                ch.qos.cal10n; \
                ch.qos.cal10n.verifier; \
                ch.qos.cal10n.util; version=0.7.2, \
-               org.jboss.interceptor.reader; \
-               org.jboss.interceptor.reader.cache; \
-               org.jboss.interceptor.spi.instance; \
-               org.jboss.interceptor.spi.context; \
-               org.jboss.interceptor.spi.model; \
-               org.jboss.interceptor.spi.metadata; \
-               org.jboss.interceptor.util; \
-               org.jboss.interceptor.util.proxy; \
-               org.jboss.interceptor.proxy; \
-               org.jboss.interceptor.proxy.javassist; \
-               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.interceptor.reader; \
+               org.jboss.weld.interceptor.reader.cache; \
+               org.jboss.weld.interceptor.spi.instance; \
+               org.jboss.weld.interceptor.spi.context; \
+               org.jboss.weld.interceptor.spi.model; \
+               org.jboss.weld.interceptor.spi.metadata; \
+               org.jboss.weld.interceptor.util; \
+               org.jboss.weld.interceptor.util.proxy; \
+               org.jboss.weld.interceptor.proxy; \
+               org.jboss.weld.interceptor.proxy.javassist; \
+               org.jboss.weld.interceptor.builder; \
                org.jboss.weld.manager.api; \
                org.jboss.weld.ejb.spi; \
                org.jboss.weld.ejb.spi.helpers; \
@@ -183,7 +183,7 @@ Export-Package javax.el;version=2.2.0, \
                org.jboss.weld.environment.se.discovery; \
                org.jboss.weld.environment.se.discovery.url; \
                org.jboss.weld.environment.se.contexts; \
-               org.jboss.weld.messages; version=1.1.5
+               org.jboss.weld.messages; version=1.2.0-SNAPSHOT
 
 
 DynamicImport-Package *",2012-10-12T10:31:32Z,133
"@@ -233,14 +233,15 @@ private void fireAllEvent(AbstractServiceEvent event, Event broadcaster,
       {
          try
          {
+            // here singleton issue
             broadcaster.select(eventClass,
-                               filteredServicesQualifiers(event,
-                                                          new SpecificationAnnotation(clazz),
-                                                          instance)).fire(event);
+               filteredServicesQualifiers(event,
+                  new SpecificationAnnotation(clazz),
+                  instance)).fire(event);
          }
          catch(Throwable t)
          {
-            t.printStackTrace();
+            //t.printStackTrace();
          }
       }
    }",2012-10-12T10:30:48Z,134
"@@ -95,13 +95,13 @@ public void startCDIOSGi() throws Exception {
 
     public void stopCDIOSGi() throws Exception {
         logger.info(""CDI-OSGi stop bundle management"");
-        started.set(false);
         for (Bundle bundle : context.getBundles()) {
             logger.trace(""Scanning {}"", bundle.getSymbolicName());
             if (managed.get(bundle.getBundleId()) != null) {
                 stopManagement(bundle);
             }
         }
+        started.set(false);
     }
 
     @Override
@@ -206,52 +206,30 @@ private void stopManagement(Bundle bundle) {
         boolean set = CDIOSGiExtension.currentBundle.get() != null;
         CDIOSGiExtension.currentBundle.set(bundle.getBundleId());
         CDIContainer holder = managed.get(bundle.getBundleId());
-        if (holder != null) {
-            BundleHolder bundleHolder = holder.getInstance().select(BundleHolder.class).get();
-            //if (bundleHolder.getState().equals(BundleState.VALID)) {
-                logger.trace(""Firing the BundleState.INVALID event"");
-                //bundleHolder.setState(BundleState.INVALID);
-                holder.getBeanManager().fireEvent(new Invalid());
-            //}
-            if(started.get()) {
-                factory().removeContainer(bundle);
-            }
-            logger.trace(""The container {} has been unregistered"",holder);
-            logger.trace(""Firing the BundleContainerEvents.BundleContainerShutdown event"");
-            holder.getBeanManager().fireEvent(new BundleContainerEvents.BundleContainerShutdown(bundle.getBundleContext()));
-
-            Collection<ServiceRegistration> regs = holder.getRegistrations();
-            logger.trace(""Unregistering the container registrations"");
-            /**for (ServiceRegistration reg : regs) {
+        if (started.get() && managed.containsKey(bundle.getBundleId())) {
+            if (holder != null) {
+                BundleHolder bundleHolder = holder.getInstance().select(BundleHolder.class).get();
                 try {
-                    reg.unregister();
-                } catch (IllegalStateException e) {// Ignore
-                    //logger.warn(""Unable to unregister a service"" + e.getCause());
-                }
-            }
-            try {
-                // unregistration for managed services. It should be done by the OSGi framework
-                logger.trace(""Unregistering the container managed services"");
-                RegistrationsHolderImpl regsHolder = holder.getInstance().select(RegistrationsHolderImpl.class).get();
-                for (ServiceRegistration r : regsHolder.getRegistrations()) {
-                    try {
-                        r.unregister();
-                    } catch (Exception e) {
-                        // the service is already unregistered if shutdown is called when bundle is stopped
-                        // but with a manual boostrap, you can't be sure
-                        //System.out.println(""Service already unregistered."");
+                    logger.trace(""Firing the BundleState.INVALID event"");
+                    holder.getBeanManager().fireEvent(new Invalid());
+                    logger.trace(""The container {} has been unregistered"",holder);
+                    logger.trace(""Firing the BundleContainerEvents.BundleContainerShutdown event"");
+                    // here singleton issue ?
+                    holder.getBeanManager().fireEvent(new BundleContainerEvents.BundleContainerShutdown(bundle.getBundleContext()));
+                } catch (Throwable t) {}
+                logger.trace(""Shutting down the container {}"", holder);
+                //holder.shutdown();
+                managed.remove(bundle.getBundleId());
+                if(started.get()) {
+                    if (factoryRef != null) {
+                        factory().removeContainer(bundle);
                     }
                 }
-            } catch (Throwable t) {
-                t.printStackTrace();
-            }   **/
-
-            logger.trace(""Shutting down the container {}"", holder);
-            holder.shutdown();
-            managed.remove(bundle.getBundleId());
-            logger.debug(""Bundle {} is unmanaged"", bundle.getSymbolicName());
-        } else {
-            logger.debug(""Bundle {} is not a bean bundle"", bundle.getSymbolicName());
+                holder.shutdown();
+                logger.debug(""Bundle {} is unmanaged"", bundle.getSymbolicName());
+            } else {
+                logger.debug(""Bundle {} is not a bean bundle"", bundle.getSymbolicName());
+            }
         }
         if (!set) {
             CDIOSGiExtension.currentBundle.remove();",2012-10-12T10:30:48Z,135
"@@ -2,8 +2,6 @@ Bundle-Activator org.jboss.weld.environment.osgi.impl.Activator
 
 Export-Package org.jboss.weld.environment.osgi.impl.extension.service;version=${pom.version}
 
-Embed-Dependency *; scope=compile; inline=true; artifactId=!org.osgi.core|org.osgi.compendium|weld-osgi-core-api|weld-osgi-core-spi
-
 Import-Package org.jboss.weld.environment.osgi.api; \
                org.jboss.weld.environment.osgi.api.annotation; \
                org.jboss.weld.environment.osgi.api.events; \
@@ -35,7 +33,61 @@ Import-Package org.jboss.weld.environment.osgi.api; \
                javassist.tools; \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
-               javassist.tools.web; version=3.14.0
+               javassist.tools.web; version=3.14.0, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29
+
 
 DynamicImport-Package *
 ",2012-10-12T10:30:48Z,136
"@@ -1,35 +0,0 @@
-<configuration debug=""false"">
-
-    <appender name=""Console"" class=""ch.qos.logback.core.ConsoleAppender"">
-        <filter class=""ch.qos.logback.classic.filter.ThresholdFilter"">
-            <level>info</level>
-        </filter>
-        <encoder>
-            <pattern>
-                %d{HH:mm:ss.SSS} %-15.-15([%-14.-14(%.-13thread])) %-5level %.-1000(%logger{25} - %msg) %n
-            </pattern>
-        </encoder>
-    </appender>
-
-    <appender name=""Log"" class=""ch.qos.logback.core.FileAppender"">
-        <file>cdi-osgi.log</file>
-        <append>false</append>
-        <filter class=""ch.qos.logback.classic.filter.ThresholdFilter"">
-            <level>trace</level>
-        </filter>
-        <encoder>
-            <pattern>
-                %d{HH:mm:ss.SSS} %-15.-15([%-14.-14(%.-13thread])) %-5level %.-1000(%logger{25} - %msg) %n %xEx{full}
-            </pattern>
-            <!--<pattern>
-                %d{HH:mm:ss.SSS} [%thread] %-5level %caller{1} %logger{25} - %msg%n %xEx{full}
-            </pattern>-->
-        </encoder>
-    </appender>
-
-    <root level=""trace"">
-        <appender-ref ref=""Console""/>
-        <appender-ref ref=""Log""/>
-    </root>
-
-</configuration>
\ No newline at end of file",2012-10-12T10:30:48Z,137
"@@ -84,11 +84,6 @@
          <artifactId>jsr250-api</artifactId>
       </dependency>
 
-      <dependency>
-         <groupId>com.google.guava</groupId>
-         <artifactId>guava</artifactId>
-      </dependency>
-
       <dependency>
          <groupId>org.jboss.interceptor</groupId>
          <artifactId>jboss-interceptor-spi</artifactId>
@@ -104,6 +99,11 @@
          <artifactId>jboss-interceptor-api</artifactId>
       </dependency>
 
+      <dependency>
+         <groupId>com.google.guava</groupId>
+         <artifactId>guava</artifactId>
+      </dependency>
+
       <dependency>
          <groupId>ch.qos.cal10n</groupId>
          <artifactId>cal10n-api</artifactId>",2012-10-12T10:30:48Z,138
"@@ -2,11 +2,7 @@ Bundle-Activator org.jboss.weld.environment.osgi.impl.WeldActivator
 
 Export-Package org.jboss.weld.environment.osgi.impl.embedded; version=${pom.version}
 
-Embed-Dependency *; scope=compile; inline=true; artifactId=!weld-osgi-core-spi|weld-osgi-core-extension|jboss-interceptor-api|javax.inject|jsr250-api|cdi-api|el-api
-
-Import-Package org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=1.6.1; resolution:=optional, \
-               ch.qos.cal10n; version=0.7.2; resolution:=optional, \
-               org.jboss.weld.environment.osgi.api; \
+Import-Package org.jboss.weld.environment.osgi.api; \
                org.jboss.weld.environment.osgi.api.annotation; \
                org.jboss.weld.environment.osgi.api.events; \
                org.jboss.weld.environment.osgi.spi;version=${pom.version}, \
@@ -20,6 +16,7 @@ Import-Package org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=1.6.1; resol
                javax.enterprise.inject.spi; \
                javax.enterprise.util; version=1.0.0, \
                javax.interceptor; version=1.1.0, \
+               org.osgi.framework, \
                javassist; \
                javassist.bytecode; \
                javassist.bytecode.analysis; \
@@ -36,6 +33,162 @@ Import-Package org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=1.6.1; resol
                javassist.tools; \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
-               javassist.tools.web; version=3.14.0
+               javassist.tools.web; version=3.14.0, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; \
+               org.slf4j.cal10n; \
+               org.slf4j.profiler; \
+               org.slf4j.agent; \
+               org.slf4j.instrumentation; \
+               org.slf4j.ext; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29, \
+               com.google.common.primitives; \
+               com.google.common.collect; \
+               com.google.common.util.concurrent; \
+               com.google.common.io; \
+               com.google.common.net; \
+               com.google.common.annotations; \
+               com.google.common.base; \
+               com.google.common.base.internal, \
+               ch.qos.cal10n; \
+               ch.qos.cal10n.verifier; \
+               ch.qos.cal10n.util; version=0.7.2, \
+               org.jboss.interceptor.reader; \
+               org.jboss.interceptor.reader.cache; \
+               org.jboss.interceptor.spi.instance; \
+               org.jboss.interceptor.spi.context; \
+               org.jboss.interceptor.spi.model; \
+               org.jboss.interceptor.spi.metadata; \
+               org.jboss.interceptor.util; \
+               org.jboss.interceptor.util.proxy; \
+               org.jboss.interceptor.proxy; \
+               org.jboss.interceptor.proxy.javassist; \
+               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.manager.api; \
+               org.jboss.weld.ejb.spi; \
+               org.jboss.weld.ejb.spi.helpers; \
+               org.jboss.weld.ejb.api; \
+               org.jboss.weld.context; \
+               org.jboss.weld.context.ejb; \
+               org.jboss.weld.context.unbound; \
+               org.jboss.weld.context.bound; \
+               org.jboss.weld.context.api; \
+               org.jboss.weld.context.http; \
+               org.jboss.weld.validation.spi; \
+               org.jboss.weld.transaction.spi; \
+               org.jboss.weld.servlet.api; \
+               org.jboss.weld.servlet.api.helpers; \
+               org.jboss.weld.resources.spi; \
+               org.jboss.weld.resources.spi.helpers; \
+               org.jboss.weld.bootstrap.spi; \
+               org.jboss.weld.bootstrap.spi.helpers; \
+               org.jboss.weld.bootstrap.api; \
+               org.jboss.weld.bootstrap.api.helpers; \
+               org.jboss.weld.serialization.spi; \
+               org.jboss.weld.serialization.spi.helpers; \
+               org.jboss.weld.security.spi; \
+               org.jboss.weld.injection.spi; \
+               org.jboss.weld.injection.spi.helpers; \
+               org.jboss.weld; \
+               org.jboss.weld.manager; \
+               org.jboss.weld.jsf; \
+               org.jboss.weld.ejb; \
+               org.jboss.weld.event; \
+               org.jboss.weld.introspector; \
+               org.jboss.weld.introspector.jlr; \
+               org.jboss.weld.context.beanstore; \
+               org.jboss.weld.context.beanstore.ejb; \
+               org.jboss.weld.context.beanstore.http; \
+               org.jboss.weld.context.cache; \
+               org.jboss.weld.context.conversation; \
+               org.jboss.weld.util; \
+               org.jboss.weld.util.dom; \
+               org.jboss.weld.util.reflection; \
+               org.jboss.weld.util.reflection.instantiation; \
+               org.jboss.weld.util.el; \
+               org.jboss.weld.util.bytecode; \
+               org.jboss.weld.util.collections; \
+               org.jboss.weld.exceptions; \
+               org.jboss.weld.metadata; \
+               org.jboss.weld.metadata.cache; \
+               org.jboss.weld.el; \
+               org.jboss.weld.xml; \
+               org.jboss.weld.servlet; \
+               org.jboss.weld.ws; \
+               org.jboss.weld.bean; \
+               org.jboss.weld.bean.builtin; \
+               org.jboss.weld.bean.builtin.ee; \
+               org.jboss.weld.bean.proxy; \
+               org.jboss.weld.bean.proxy.util; \
+               org.jboss.weld.bean.interceptor; \
+               org.jboss.weld.resources; \
+               org.jboss.weld.literal; \
+               org.jboss.weld.bootstrap; \
+               org.jboss.weld.bootstrap.events; \
+               org.jboss.weld.logging; \
+               org.jboss.weld.logging.messages; \
+               org.jboss.weld.serialization; \
+               org.jboss.weld.persistence; \
+               org.jboss.weld.resolution; \
+               org.jboss.weld.injection; \
+               org.jboss.weld.environment.se; \
+               org.jboss.weld.environment.se.events; \
+               org.jboss.weld.environment.se.bindings; \
+               org.jboss.weld.environment.se.threading; \
+               org.jboss.weld.environment.se.beans; \
+               org.jboss.weld.environment.se.discovery; \
+               org.jboss.weld.environment.se.discovery.url; \
+               org.jboss.weld.environment.se.contexts; \
+               org.jboss.weld.messages; version=1.1.3
 
 DynamicImport-Package *
\ No newline at end of file",2012-10-12T10:30:48Z,132
"@@ -34,43 +34,103 @@
          <email>matthieu.clochard@serli.com</email>
       </developer>
    </developers>
-    
-    <dependencies>
-    
-        <dependency>
-            <groupId>javax.inject</groupId>
-            <artifactId>javax.inject</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>org.jboss.interceptor</groupId>
-            <artifactId>jboss-interceptor-api</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>javax.el</groupId>
-            <artifactId>el-api</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>javax.enterprise</groupId>
-            <artifactId>cdi-api</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>org.javassist</groupId>
-            <artifactId>javassist</artifactId>
-        </dependency>
-        
-    </dependencies>
-
-    <build>
-        <plugins>
-            <plugin>
-                <groupId>org.apache.felix</groupId>
-                <artifactId>maven-bundle-plugin</artifactId>
-            </plugin>
-        </plugins>
-    </build>
-    
+
+   <dependencies>
+
+      <dependency>
+         <groupId>org.jboss.weld</groupId>
+         <artifactId>weld-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.weld.se</groupId>
+         <artifactId>weld-se-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.weld</groupId>
+         <artifactId>weld-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.weld</groupId>
+         <artifactId>weld-spi</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>javax.inject</groupId>
+         <artifactId>javax.inject</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>javax.el</groupId>
+         <artifactId>el-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>javax.enterprise</groupId>
+         <artifactId>cdi-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.interceptor</groupId>
+         <artifactId>jboss-interceptor-spi</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.interceptor</groupId>
+         <artifactId>jboss-interceptor-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.interceptor</groupId>
+         <artifactId>jboss-interceptor-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.javassist</groupId>
+         <artifactId>javassist</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>com.google.guava</groupId>
+         <artifactId>guava</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>ch.qos.cal10n</groupId>
+         <artifactId>cal10n-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.slf4j</groupId>
+         <artifactId>slf4j-ext</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.slf4j</groupId>
+         <artifactId>slf4j-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>ch.qos.logback</groupId>
+         <artifactId>logback-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>ch.qos.logback</groupId>
+         <artifactId>logback-classic</artifactId>
+      </dependency>
+
+   </dependencies>
+
+   <build>
+      <plugins>
+         <plugin>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>maven-bundle-plugin</artifactId>
+         </plugin>
+      </plugins>
+   </build>
+
 </project>",2012-10-12T10:30:48Z,139
"@@ -27,7 +27,164 @@ Export-Package javax.el;version=2.2.0, \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
                javassist.tools.web; version=3.14.0, \
-               com.sun.jdi
+               com.sun.jdi, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; \
+               org.slf4j.cal10n; \
+               org.slf4j.profiler; \
+               org.slf4j.agent; \
+               org.slf4j.instrumentation; \
+               org.slf4j.ext; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29, \
+               com.google.common.primitives; \
+               com.google.common.collect; \
+               com.google.common.util.concurrent; \
+               com.google.common.io; \
+               com.google.common.net; \
+               com.google.common.annotations; \
+               com.google.common.base; \
+               com.google.common.base.internal, \
+               ch.qos.cal10n; \
+               ch.qos.cal10n.verifier; \
+               ch.qos.cal10n.util; version=0.7.2, \
+               org.jboss.interceptor.reader; \
+               org.jboss.interceptor.reader.cache; \
+               org.jboss.interceptor.spi.instance; \
+               org.jboss.interceptor.spi.context; \
+               org.jboss.interceptor.spi.model; \
+               org.jboss.interceptor.spi.metadata; \
+               org.jboss.interceptor.util; \
+               org.jboss.interceptor.util.proxy; \
+               org.jboss.interceptor.proxy; \
+               org.jboss.interceptor.proxy.javassist; \
+               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.manager.api; \
+               org.jboss.weld.ejb.spi; \
+               org.jboss.weld.ejb.spi.helpers; \
+               org.jboss.weld.ejb.api; \
+               org.jboss.weld.context; \
+               org.jboss.weld.context.ejb; \
+               org.jboss.weld.context.unbound; \
+               org.jboss.weld.context.bound; \
+               org.jboss.weld.context.api; \
+               org.jboss.weld.context.http; \
+               org.jboss.weld.validation.spi; \
+               org.jboss.weld.transaction.spi; \
+               org.jboss.weld.servlet.api; \
+               org.jboss.weld.servlet.api.helpers; \
+               org.jboss.weld.resources.spi; \
+               org.jboss.weld.resources.spi.helpers; \
+               org.jboss.weld.bootstrap.spi; \
+               org.jboss.weld.bootstrap.spi.helpers; \
+               org.jboss.weld.bootstrap.api; \
+               org.jboss.weld.bootstrap.api.helpers; \
+               org.jboss.weld.serialization.spi; \
+               org.jboss.weld.serialization.spi.helpers; \
+               org.jboss.weld.security.spi; \
+               org.jboss.weld.injection.spi; \
+               org.jboss.weld.injection.spi.helpers; \
+               org.jboss.weld; \
+               org.jboss.weld.manager; \
+               org.jboss.weld.jsf; \
+               org.jboss.weld.ejb; \
+               org.jboss.weld.event; \
+               org.jboss.weld.introspector; \
+               org.jboss.weld.introspector.jlr; \
+               org.jboss.weld.context.beanstore; \
+               org.jboss.weld.context.beanstore.ejb; \
+               org.jboss.weld.context.beanstore.http; \
+               org.jboss.weld.context.cache; \
+               org.jboss.weld.context.conversation; \
+               org.jboss.weld.util; \
+               org.jboss.weld.util.dom; \
+               org.jboss.weld.util.reflection; \
+               org.jboss.weld.util.reflection.instantiation; \
+               org.jboss.weld.util.el; \
+               org.jboss.weld.util.bytecode; \
+               org.jboss.weld.util.collections; \
+               org.jboss.weld.exceptions; \
+               org.jboss.weld.metadata; \
+               org.jboss.weld.metadata.cache; \
+               org.jboss.weld.el; \
+               org.jboss.weld.xml; \
+               org.jboss.weld.servlet; \
+               org.jboss.weld.ws; \
+               org.jboss.weld.bean; \
+               org.jboss.weld.bean.builtin; \
+               org.jboss.weld.bean.builtin.ee; \
+               org.jboss.weld.bean.proxy; \
+               org.jboss.weld.bean.proxy.util; \
+               org.jboss.weld.bean.interceptor; \
+               org.jboss.weld.resources; \
+               org.jboss.weld.literal; \
+               org.jboss.weld.bootstrap; \
+               org.jboss.weld.bootstrap.events; \
+               org.jboss.weld.logging; \
+               org.jboss.weld.logging.messages; \
+               org.jboss.weld.serialization; \
+               org.jboss.weld.persistence; \
+               org.jboss.weld.resolution; \
+               org.jboss.weld.injection; \
+               org.jboss.weld.environment.se; \
+               org.jboss.weld.environment.se.events; \
+               org.jboss.weld.environment.se.bindings; \
+               org.jboss.weld.environment.se.threading; \
+               org.jboss.weld.environment.se.beans; \
+               org.jboss.weld.environment.se.discovery; \
+               org.jboss.weld.environment.se.discovery.url; \
+               org.jboss.weld.environment.se.contexts; \
+               org.jboss.weld.messages; version=1.1.3
+
 
 DynamicImport-Package *
 ",2012-10-12T10:30:48Z,133
"@@ -27,7 +27,164 @@ Export-Package javax.el;version=2.2.0, \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
                javassist.tools.web; version=3.14.0, \
-               com.sun.jdi
+               com.sun.jdi, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; \
+               org.slf4j.cal10n; \
+               org.slf4j.profiler; \
+               org.slf4j.agent; \
+               org.slf4j.instrumentation; \
+               org.slf4j.ext; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29, \
+               com.google.common.primitives; \
+               com.google.common.collect; \
+               com.google.common.util.concurrent; \
+               com.google.common.io; \
+               com.google.common.net; \
+               com.google.common.annotations; \
+               com.google.common.base; \
+               com.google.common.base.internal, \
+               ch.qos.cal10n; \
+               ch.qos.cal10n.verifier; \
+               ch.qos.cal10n.util; version=0.7.2, \
+               org.jboss.interceptor.reader; \
+               org.jboss.interceptor.reader.cache; \
+               org.jboss.interceptor.spi.instance; \
+               org.jboss.interceptor.spi.context; \
+               org.jboss.interceptor.spi.model; \
+               org.jboss.interceptor.spi.metadata; \
+               org.jboss.interceptor.util; \
+               org.jboss.interceptor.util.proxy; \
+               org.jboss.interceptor.proxy; \
+               org.jboss.interceptor.proxy.javassist; \
+               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.manager.api; \
+               org.jboss.weld.ejb.spi; \
+               org.jboss.weld.ejb.spi.helpers; \
+               org.jboss.weld.ejb.api; \
+               org.jboss.weld.context; \
+               org.jboss.weld.context.ejb; \
+               org.jboss.weld.context.unbound; \
+               org.jboss.weld.context.bound; \
+               org.jboss.weld.context.api; \
+               org.jboss.weld.context.http; \
+               org.jboss.weld.validation.spi; \
+               org.jboss.weld.transaction.spi; \
+               org.jboss.weld.servlet.api; \
+               org.jboss.weld.servlet.api.helpers; \
+               org.jboss.weld.resources.spi; \
+               org.jboss.weld.resources.spi.helpers; \
+               org.jboss.weld.bootstrap.spi; \
+               org.jboss.weld.bootstrap.spi.helpers; \
+               org.jboss.weld.bootstrap.api; \
+               org.jboss.weld.bootstrap.api.helpers; \
+               org.jboss.weld.serialization.spi; \
+               org.jboss.weld.serialization.spi.helpers; \
+               org.jboss.weld.security.spi; \
+               org.jboss.weld.injection.spi; \
+               org.jboss.weld.injection.spi.helpers; \
+               org.jboss.weld; \
+               org.jboss.weld.manager; \
+               org.jboss.weld.jsf; \
+               org.jboss.weld.ejb; \
+               org.jboss.weld.event; \
+               org.jboss.weld.introspector; \
+               org.jboss.weld.introspector.jlr; \
+               org.jboss.weld.context.beanstore; \
+               org.jboss.weld.context.beanstore.ejb; \
+               org.jboss.weld.context.beanstore.http; \
+               org.jboss.weld.context.cache; \
+               org.jboss.weld.context.conversation; \
+               org.jboss.weld.util; \
+               org.jboss.weld.util.dom; \
+               org.jboss.weld.util.reflection; \
+               org.jboss.weld.util.reflection.instantiation; \
+               org.jboss.weld.util.el; \
+               org.jboss.weld.util.bytecode; \
+               org.jboss.weld.util.collections; \
+               org.jboss.weld.exceptions; \
+               org.jboss.weld.metadata; \
+               org.jboss.weld.metadata.cache; \
+               org.jboss.weld.el; \
+               org.jboss.weld.xml; \
+               org.jboss.weld.servlet; \
+               org.jboss.weld.ws; \
+               org.jboss.weld.bean; \
+               org.jboss.weld.bean.builtin; \
+               org.jboss.weld.bean.builtin.ee; \
+               org.jboss.weld.bean.proxy; \
+               org.jboss.weld.bean.proxy.util; \
+               org.jboss.weld.bean.interceptor; \
+               org.jboss.weld.resources; \
+               org.jboss.weld.literal; \
+               org.jboss.weld.bootstrap; \
+               org.jboss.weld.bootstrap.events; \
+               org.jboss.weld.logging; \
+               org.jboss.weld.logging.messages; \
+               org.jboss.weld.serialization; \
+               org.jboss.weld.persistence; \
+               org.jboss.weld.resolution; \
+               org.jboss.weld.injection; \
+               org.jboss.weld.environment.se; \
+               org.jboss.weld.environment.se.events; \
+               org.jboss.weld.environment.se.bindings; \
+               org.jboss.weld.environment.se.threading; \
+               org.jboss.weld.environment.se.beans; \
+               org.jboss.weld.environment.se.discovery; \
+               org.jboss.weld.environment.se.discovery.url; \
+               org.jboss.weld.environment.se.contexts; \
+               org.jboss.weld.messages; version=1.1.3
+
 
 DynamicImport-Package *
 ",2012-10-12T10:30:48Z,140
"@@ -2,12 +2,12 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <parent>
+   <!--<parent>
       <groupId>org.jboss.weld.osgi.examples</groupId>
       <artifactId>weld-osgi-examples</artifactId>
       <version>1.1.3-SNAPSHOT</version>
       <relativePath>../pom.xml</relativePath>
-   </parent>
+   </parent>-->
     <modelVersion>4.0.0</modelVersion>
     <groupId>org.jboss.weld.osgi.examples</groupId>
     <artifactId>weld-osgi-container-equinox</artifactId>",2012-10-12T10:31:09Z,141
"@@ -2,302 +2,327 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <parent>
-      <groupId>org.jboss.weld.osgi.examples</groupId>
-      <artifactId>weld-osgi-examples</artifactId>
-      <version>1.1.3-SNAPSHOT</version>
-      <relativePath>../pom.xml</relativePath>
-   </parent>
-   <modelVersion>4.0.0</modelVersion>
-   <groupId>org.jboss.weld.osgi.examples</groupId>
-   <artifactId>weld-osgi-container-knopflerfish</artifactId>
-   <name>Weld OSGi (Examples Container Knopflerfish)</name>
-
-   <description>Standalone example for Weld-OSGi</description>
-
-   <url>http://www.seamframework.org/Weld</url>
-   <licenses>
-      <license>
-         <name>Apache License, Version 2.0</name>
-         <distribution>repo</distribution>
-         <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
-      </license>
-   </licenses>
-
-   <developers>
-      <developer>
-         <name>Mathieu Ancelin</name>
-         <email>mathieu.ancelin@serli.com</email>
-      </developer>
-      <developer>
-         <name>Matthieu Clochard</name>
-         <email>matthieu.clochard@serli.com</email>
-      </developer>
-   </developers>
-
-   <dependencies>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-divide</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-log</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-minus</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-plus</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-times</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-square</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-triangle</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-standalone</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-app</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-england</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-fwk</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-france</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-spain</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>javax.ws.rs</groupId>
-         <artifactId>jsr311-api</artifactId>
-         <version>1.1</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.codehaus.groovy</groupId>
-         <artifactId>groovy-all</artifactId>
-         <version>1.8.0-rc-3</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-spi</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-extension</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-mandatory</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-integration</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.osgi</groupId>
-         <artifactId>org.osgi.core</artifactId>
-         <version>4.2.0</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.main</artifactId>
-         <version>3.0.6</version>
-         <scope>provided</scope>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix.gogo</groupId>
-         <artifactId>org.apache.felix.gogo.commands</artifactId>
-         <version>0.4.0</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.bundlerepository</artifactId>
-         <version>1.2.1</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.shell.tui</artifactId>
-         <version>1.0.2</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.shell</artifactId>
-         <version>1.0.2</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.http.bundle</artifactId>
-         <version>2.0.4</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.log</artifactId>
-         <version>1.0.0</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.configadmin</artifactId>
-         <version>1.2.8</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld</groupId>
-         <artifactId>weld-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.se</groupId>
-         <artifactId>weld-se-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-   </dependencies>
-
-   <build>
-      <resources>
-         <resource>
-            <directory>src/main/resources</directory>
-             <filtering>true</filtering>
-         </resource>
-      </resources>
-      <plugins>
-         <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-antrun-plugin</artifactId>
-            <executions>
-               <execution>
-                  <id>compile</id>
-                  <phase>package</phase>
-                  <goals>
-                     <goal>run</goal>
-                  </goals>
-                  <configuration>
-                     <tasks>
-                        <copy file=""target/classes/config.properties"" tofile=""${project.build.directory}/config.properties""/>
-                        <copy file=""${maven.dependency.org.apache.felix.org.apache.felix.main.jar.path}"" tofile=""${project.build.directory}/felix.jar""/>
-                     </tasks>
-                  </configuration>
-               </execution>
-            </executions>
-         </plugin>
-
-         <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-assembly-plugin</artifactId>
-            <executions>
-               <execution>
-                  <id>create-executable-jar</id>
-                  <phase>package</phase>
-                  <goals>
-                     <goal>single</goal>
-                  </goals>
-                  <configuration>
-                     <descriptors>
-                        <descriptor>${basedir}/src/main/assembly/assembly.xml</descriptor>
-                     </descriptors>
-                     <finalName>${project.artifactId}-${project.version}</finalName>
-                  </configuration>
-               </execution>
-            </executions>
-         </plugin>
-      </plugins>
-   </build>
+    <!--<parent>
+        <groupId>org.jboss.weld.osgi.examples</groupId>
+        <artifactId>weld-osgi-examples</artifactId>
+        <version>1.1.3-SNAPSHOT</version>
+        <relativePath>../pom.xml</relativePath>
+    </parent>-->
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.jboss.weld.osgi.examples</groupId>
+    <artifactId>weld-osgi-container-knopflerfish</artifactId>
+    <version>1.1.3-SNAPSHOT</version>
+    <name>Weld OSGi (Examples Container Knopflerfish)</name>
+
+    <description>Standalone example for Weld-OSGi</description>
+
+    <url>http://www.seamframework.org/Weld</url>
+    <licenses>
+        <license>
+            <name>Apache License, Version 2.0</name>
+            <distribution>repo</distribution>
+            <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
+        </license>
+    </licenses>
+
+    <developers>
+        <developer>
+            <name>Mathieu Ancelin</name>
+            <email>mathieu.ancelin@serli.com</email>
+        </developer>
+        <developer>
+            <name>Matthieu Clochard</name>
+            <email>matthieu.clochard@serli.com</email>
+        </developer>
+    </developers>
+
+    <repositories>
+        <repository>
+            <releases>
+                <enabled>true</enabled>
+                <updatePolicy>never</updatePolicy>
+                <checksumPolicy>fail</checksumPolicy>
+            </releases>
+            <snapshots>
+                <enabled>true</enabled>
+                <updatePolicy>never</updatePolicy>
+                <checksumPolicy>fail</checksumPolicy>
+            </snapshots>
+            <id>Knopflerfish</id>
+            <name>Knopflerfish Releases Repository</name>
+            <url>http://www.knopflerfish.org/maven2</url>
+            <layout>default</layout>
+        </repository>
+    </repositories>
+
+    <dependencies>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-divide</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-log</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-minus</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-plus</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-times</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-square</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-triangle</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-standalone</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-app</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-england</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-fwk</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-france</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-spain</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>javax.ws.rs</groupId>
+            <artifactId>jsr311-api</artifactId>
+            <version>1.1</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.codehaus.groovy</groupId>
+            <artifactId>groovy-all</artifactId>
+            <version>1.8.0-rc-3</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-spi</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-extension</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-mandatory</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-integration</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld</groupId>
+            <artifactId>weld-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.se</groupId>
+            <artifactId>weld-se-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.osgi</groupId>
+            <artifactId>org.osgi.core</artifactId>
+            <version>4.2.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.osgi</groupId>
+            <artifactId>org.osgi.compendium</artifactId>
+            <version>4.2.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.knopflerfish</groupId>
+            <artifactId>framework</artifactId>
+            <version>5.1.14</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix.gogo</groupId>
+            <artifactId>org.apache.felix.gogo.commands</artifactId>
+            <version>0.4.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.bundlerepository</artifactId>
+            <version>1.2.1</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.shell.tui</artifactId>
+            <version>1.0.2</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.shell</artifactId>
+            <version>1.0.2</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.http.bundle</artifactId>
+            <version>2.0.4</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.log</artifactId>
+            <version>1.0.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.configadmin</artifactId>
+            <version>1.2.8</version>
+        </dependency>
+
+    </dependencies>
+
+    <build>
+        <resources>
+            <resource>
+                <directory>src/main/resources</directory>
+                <filtering>true</filtering>
+            </resource>
+        </resources>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-antrun-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>compile</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>run</goal>
+                        </goals>
+                        <configuration>
+                            <tasks>
+                                <copy file=""target/classes/config.xargs"" tofile=""${project.build.directory}/config.xargs""/>
+                                <copy file=""${maven.dependency.org.knopflerfish.framework.jar.path}"" tofile=""${project.build.directory}/knopflerfish.jar""/>
+                            </tasks>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-assembly-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>create-executable-jar</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>single</goal>
+                        </goals>
+                        <configuration>
+                            <descriptors>
+                                <descriptor>${basedir}/src/main/assembly/assembly.xml</descriptor>
+                            </descriptors>
+                            <finalName>${project.artifactId}-${project.version}</finalName>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+        </plugins>
+    </build>
 
 </project>",2012-10-12T10:31:09Z,142
"@@ -34,30 +34,25 @@
                 <include>org.jboss.weld.osgi:weld-osgi-core-spi</include>
                 <include>org.jboss.weld.osgi:weld-osgi-core-extension</include>
                 <include>org.jboss.weld.osgi:weld-osgi-core-mandatory</include>
+                <include>org.osgi:org.osgi.compendium</include>
                 <include>org.apache.felix:org.apache.felix.bundlerepository</include>
                 <include>org.apache.felix:org.apache.felix.shell.tui</include>
                 <include>org.apache.felix:org.apache.felix.shell</include>
                 <include>org.apache.felix:org.apache.felix.http.bundle</include>
                 <include>org.apache.felix:org.apache.felix.log</include>
                 <include>org.apache.felix:org.apache.felix.configadmin</include>
+                <include>org.codehaus.groovy:groovy-all</include>
                 <include>javax.ws.rs:jsr311-api</include>
             </includes>
         </dependencySet>
-        <dependencySet>
-            <useProjectArtifact>false</useProjectArtifact>
-            <outputDirectory></outputDirectory>
-            <includes>
-                <include>org.apache.felix:org.apache.felix.main</include>
-            </includes>
-        </dependencySet>
     </dependencySets>
     <files>
         <file>
-            <source>${project.build.directory}/felix.jar</source>
-            <outputDirectory>bin</outputDirectory>
+            <source>${project.build.directory}/knopflerfish.jar</source>
+            <outputDirectory></outputDirectory>
         </file>
         <file>
-            <source>${project.build.directory}/config.properties</source>
+            <source>${project.build.directory}/config.xargs</source>
             <outputDirectory>conf</outputDirectory>
         </file>
     </files>",2012-10-12T10:31:09Z,143
"@@ -1,49 +0,0 @@
-org.osgi.framework.storage.clean=onFirstInit
-
-felix.log.level=1
-
-org.osgi.framework.bootdelegation=sun.reflect
-
-felix.auto.install=  \
-file:modules/weld-osgi-core-api-${project.version}.jar \
-file:modules/weld-osgi-core-spi-${project.version}.jar \
-file:modules/weld-osgi-core-mandatory-${project.version}.jar \
-file:modules/weld-osgi-paint-api-${project.version}.jar  \
-file:modules/weld-osgi-paint-core-${project.version}.jar \
-file:modules/weld-osgi-paint-triangle-${project.version}.jar  \
-file:modules/weld-osgi-paint-square-${project.version}.jar  \
-file:modules/weld-osgi-calculator-api-${project.version}.jar  \
-file:modules/weld-osgi-calculator-core-${project.version}.jar  \
-file:modules/weld-osgi-calculator-log-${project.version}.jar  \
-file:modules/weld-osgi-calculator-divide-${project.version}.jar  \
-file:modules/weld-osgi-calculator-minus-${project.version}.jar  \
-file:modules/weld-osgi-calculator-plus-${project.version}.jar  \
-file:modules/weld-osgi-calculator-times-${project.version}.jar  \
-file:modules/weld-osgi-web-api-${project.version}.jar  \
-file:modules/weld-osgi-web-fwk-${project.version}.jar \
-file:modules/weld-osgi-web-france-${project.version}.jar  \
-file:modules/weld-osgi-web-spain-${project.version}.jar  \
-file:modules/weld-osgi-web-england-${project.version}.jar  \
-file:modules/weld-osgi-web-app-${project.version}.jar  \
-file:modules/weld-osgi-standalone-${project.version}.jar  \
-file:modules/jsr311-api-1.1.jar \
-file:modules/org.apache.felix.gogo.commands-0.4.0.jar  \
-file:modules/org.apache.felix.gogo.runtime-0.4.0.jar
-
-felix.auto.start= \
-file:modules/weld-osgi-core-extension-${project.version}.jar \
-file:modules/weld-osgi-core-integration-${project.version}.jar \
-file:modules/org.apache.felix.configadmin-1.2.8.jar \
-file:modules/org.apache.felix.http.bundle-2.0.4.jar \
-file:modules/org.apache.felix.log-1.0.0.jar \
-file:modules/org.apache.felix.shell-1.0.2.jar \
-file:modules/org.apache.felix.shell.tui-1.0.2.jar \
-file:modules/org.apache.felix.bundlerepository-1.2.1.jar
-
-org.osgi.service.http.port=9000
-org.apache.felix.http.whiteboardEnabled=true
-org.apache.felix.http.jettyEnabled=true
-org.apache.felix.http=true
-
-osgi.shell.telnet=on
-obr.repository.url=http://felix.apache.org/obr/releases.xml",2012-10-12T10:31:09Z,144
"@@ -0,0 +1,51 @@
+-init
+-launch
+
+-F org.osgi.framework.storage.clean=onFirstInit
+-F felix.log.level=1
+-F org.osgi.framework.bootdelegation=sun.reflect
+
+-install modules/weld-osgi-core-api-${project.version}.jar
+-install modules/weld-osgi-core-spi-${project.version}.jar
+-install modules/weld-osgi-core-mandatory-${project.version}.jar
+-install modules/weld-osgi-paint-api-${project.version}.jar
+-install modules/weld-osgi-paint-core-${project.version}.jar
+-install modules/weld-osgi-paint-triangle-${project.version}.jar
+-install modules/weld-osgi-paint-square-${project.version}.jar
+-install modules/weld-osgi-calculator-api-${project.version}.jar
+-install modules/weld-osgi-calculator-core-${project.version}.jar
+-install modules/weld-osgi-calculator-log-${project.version}.jar
+-install modules/weld-osgi-calculator-divide-${project.version}.jar
+-install modules/weld-osgi-calculator-minus-${project.version}.jar
+-install modules/weld-osgi-calculator-plus-${project.version}.jar
+-install modules/weld-osgi-calculator-times-${project.version}.jar
+-install modules/weld-osgi-web-api-${project.version}.jar
+-install modules/weld-osgi-web-fwk-${project.version}.jar
+-install modules/weld-osgi-web-france-${project.version}.jar
+-install modules/weld-osgi-web-spain-${project.version}.jar
+-install modules/weld-osgi-web-england-${project.version}.jar
+-install modules/weld-osgi-web-app-${project.version}.jar
+-install modules/weld-osgi-standalone-${project.version}.jar
+-install modules/groovy-all-1.8.0-rc-3.jar
+-install modules/jsr311-api-1.1.jar
+-install modules/org.apache.felix.gogo.commands-0.4.0.jar
+-install modules/org.apache.felix.gogo.runtime-0.4.0.jar
+-install modules/org.osgi.compendium-4.2.0.jar
+
+
+-istart modules/weld-osgi-core-extension-${project.version}.jar
+-istart modules/weld-osgi-core-integration-${project.version}.jar
+-istart modules/org.apache.felix.configadmin-1.2.8.jar
+-istart modules/org.apache.felix.http.bundle-2.0.4.jar
+-istart modules/org.apache.felix.log-1.0.0.jar
+-istart modules/org.apache.felix.shell-1.0.2.jar
+-istart modules/org.apache.felix.shell.tui-1.0.2.jar
+-istart modules/org.apache.felix.bundlerepository-1.2.1.jar
+
+-F org.osgi.service.http.port=9000
+-F org.apache.felix.http.whiteboardEnabled=true
+-F org.apache.felix.http.jettyEnabled=true
+-F org.apache.felix.http=true
+
+-F osgi.shell.telnet=on
+-F obr.repository.url=http://felix.apache.org/obr/releases.xml
\ No newline at end of file",2012-10-12T10:31:09Z,145
"@@ -1,150 +1,150 @@
 
 <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <modelVersion>4.0.0</modelVersion>
-   <groupId>org.jboss.weld.osgi</groupId>
-   <artifactId>weld-osgi-parent</artifactId>
-   <name>Weld OSGi (Parent)</name>
-   <packaging>pom</packaging>
-
-   <parent>
-      <groupId>org.jboss.weld</groupId>
-      <artifactId>weld-core-parent</artifactId>
-      <relativePath>../../parent/pom.xml</relativePath>
-      <version>1.1.3-SNAPSHOT</version>
-   </parent>
-
-   <licenses>
-      <license>
-         <name>Apache License, Version 2.0</name>
-         <distribution>repo</distribution>
-         <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
-      </license>
-   </licenses>
-   <url>http://www.seamframework.org/Weld</url>
-
-   <developers>
-      <developer>
-         <name>Mathieu Ancelin</name>
-         <email>mathieu.ancelin@serli.com</email>
-      </developer>
-      <developer>
-         <name>Matthieu Clochard</name>
-         <email>matthieu.clochard@serli.com</email>
-      </developer>
-   </developers>
-
-   <modules>
-      <module>core</module>
-      <module>examples</module>
-   </modules>
-
-   <profiles>
-      <profile>
-         <id>weld-osgi-docs</id>
-         <modules>
-            <module>docs</module>
-         </modules>
-      </profile>
-      <profile>
-         <id>weld-osgi-tests</id>
-         <modules>
-            <module>core</module>
-            <module>tests</module>
-         </modules>
-      </profile>
-   </profiles>
-
-   <description>
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.jboss.weld.osgi</groupId>
+    <artifactId>weld-osgi-parent</artifactId>
+    <name>Weld OSGi (Parent)</name>
+    <packaging>pom</packaging>
+
+    <parent>
+        <groupId>org.jboss.weld</groupId>
+        <artifactId>weld-core-parent</artifactId>
+        <relativePath>../../parent/pom.xml</relativePath>
+        <version>1.1.3-SNAPSHOT</version>
+    </parent>
+
+    <licenses>
+        <license>
+            <name>Apache License, Version 2.0</name>
+            <distribution>repo</distribution>
+            <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
+        </license>
+    </licenses>
+    <url>http://www.seamframework.org/Weld</url>
+
+    <developers>
+        <developer>
+            <name>Mathieu Ancelin</name>
+            <email>mathieu.ancelin@serli.com</email>
+        </developer>
+        <developer>
+            <name>Matthieu Clochard</name>
+            <email>matthieu.clochard@serli.com</email>
+        </developer>
+    </developers>
+
+    <modules>
+        <module>core</module>
+        <module>examples</module>
+    </modules>
+
+    <profiles>
+        <profile>
+            <id>weld-osgi-docs</id>
+            <modules>
+                <module>docs</module>
+            </modules>
+        </profile>
+        <profile>
+            <id>weld-osgi-tests</id>
+            <modules>
+                <module>core</module>
+                <module>tests</module>
+            </modules>
+        </profile>
+    </profiles>
+
+    <description>
       Support for Weld in OSGi Containers
-   </description>
-
-   <properties>
-      <osgi.version>4.2.0</osgi.version>
-      <javax.inject.version>1</javax.inject.version>
-      <javax.el.version>2.2</javax.el.version>
-      <jsr250.api>1.0</jsr250.api>
-      <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
-      <weld.api.version>1.2-SNAPSHOT</weld.api.version>
-      <slf4j.version>1.6.1</slf4j.version>
-      <logback.version>0.9.29</logback.version>
-   </properties>
-
-   <dependencyManagement>
-      <dependencies>
-
-         <dependency>
-            <groupId>org.osgi</groupId>
-            <artifactId>org.osgi.core</artifactId>
-            <version>${osgi.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.osgi</groupId>
-            <artifactId>org.osgi.compendium</artifactId>
-            <version>${osgi.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.jboss.weld</groupId>
-            <artifactId>weld-api</artifactId>
-            <version>${weld.api.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.jboss.weld</groupId>
-            <artifactId>weld-spi</artifactId>
-            <version>${weld.api.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>javax.inject</groupId>
-            <artifactId>javax.inject</artifactId>
-            <version>${javax.inject.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>javax.el</groupId>
-            <artifactId>el-api</artifactId>
-            <version>${javax.el.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>javax.annotation</groupId>
-            <artifactId>jsr250-api</artifactId>
-            <version>${jsr250.api}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.jboss.interceptor</groupId>
-            <artifactId>jboss-interceptor-api</artifactId>
-            <version>${jboss.interceptors.api.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-ext</artifactId>
-            <version>${slf4j.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-api</artifactId>
-            <version>${slf4j.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>ch.qos.logback</groupId>
-            <artifactId>logback-core</artifactId>
-            <version>${logback.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>ch.qos.logback</groupId>
-            <artifactId>logback-classic</artifactId>
-            <version>${logback.version}</version>
-         </dependency>
-
-      </dependencies>
-   </dependencyManagement>
+    </description>
+
+    <properties>
+        <osgi.version>4.2.0</osgi.version>
+        <javax.inject.version>1</javax.inject.version>
+        <javax.el.version>2.2</javax.el.version>
+        <jsr250.api>1.0</jsr250.api>
+        <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
+        <weld.api.version>1.2-SNAPSHOT</weld.api.version>
+        <slf4j.version>1.6.1</slf4j.version>
+        <logback.version>0.9.29</logback.version>
+    </properties>
+    
+    <dependencyManagement>
+        <dependencies>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.core</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.compendium</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld</groupId>
+                <artifactId>weld-api</artifactId>
+                <version>${weld.api.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld</groupId>
+                <artifactId>weld-spi</artifactId>
+                <version>${weld.api.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.inject</groupId>
+                <artifactId>javax.inject</artifactId>
+                <version>${javax.inject.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.el</groupId>
+                <artifactId>el-api</artifactId>
+                <version>${javax.el.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.annotation</groupId>
+                <artifactId>jsr250-api</artifactId>
+                <version>${jsr250.api}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.interceptor</groupId>
+                <artifactId>jboss-interceptor-api</artifactId>
+                <version>${jboss.interceptors.api.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.slf4j</groupId>
+                <artifactId>slf4j-ext</artifactId>
+                <version>${slf4j.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.slf4j</groupId>
+                <artifactId>slf4j-api</artifactId>
+                <version>${slf4j.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-core</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-classic</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
+        </dependencies>
+    </dependencyManagement>
 
 </project>",2012-10-12T10:31:09Z,146
"@@ -0,0 +1,4 @@
+#!/bin/sh
+
+cd ./examples/container-knopflerfish/target/weld-osgi-container-knopflerfish-1.1.3-SNAPSHOT-all/weld-osgi-container-knopflerfish-1.1.3-SNAPSHOT/
+java -jar knopflerfish.jar -xargs conf/config.xargs",2012-10-12T10:31:09Z,147
"@@ -48,13 +48,10 @@ public static void waitForEnvironment(BundleContext context) throws InterruptedE
         while(!ready) {
             ready = true;
             for(Bundle b : context.getBundles()) {
-                System.out.println(""wait for bundle "" + b.getSymbolicName());
                 if(b.getState() != Bundle.ACTIVE) {
                     ready = false;
                     break;
                 }
-                System.out.println(""bundle "" + b.getSymbolicName() + "" is ready"");
-                Thread.sleep(500);
             }
             Thread.sleep(500);
         }",2012-10-12T10:31:09Z,148
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
@@ -29,18 +46,15 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-extension</artifactId>
-            <version>${project.version}</version>
         </dependency>
         <dependency>
             <groupId>javax</groupId>
             <artifactId>javaee-web-api</artifactId>
-            <version>6.0</version>
             <scope>provided</scope>
         </dependency>
         <dependency>
             <groupId>org.osgi</groupId>
             <artifactId>org.osgi.core</artifactId>
-            <version>4.2.0</version>
             <scope>provided</scope>
         </dependency>
 ",2012-10-12T10:31:59Z,149
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
@@ -39,13 +56,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>",2012-10-12T10:31:59Z,150
"@@ -46,19 +46,16 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-extension</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>",2012-10-12T10:31:59Z,138
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
@@ -34,7 +51,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,151
"@@ -75,85 +75,4 @@
         Support for Weld in OSGi Containers
     </description>
 
-    <properties>
-        <osgi.version>4.2.0</osgi.version>
-        <javax.inject.version>1</javax.inject.version>
-        <javax.el.version>2.2</javax.el.version>
-        <jsr250.api>1.0</jsr250.api>
-        <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
-        <logback.version>0.9.29</logback.version>
-    </properties>
-
-    <dependencyManagement>
-        <dependencies>
-
-            <dependency>
-                <groupId>org.osgi</groupId>
-                <artifactId>org.osgi.core</artifactId>
-                <version>${osgi.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.osgi</groupId>
-                <artifactId>org.osgi.compendium</artifactId>
-                <version>${osgi.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.jboss.weld</groupId>
-                <artifactId>weld-api</artifactId>
-                <version>${weld.api.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.jboss.weld</groupId>
-                <artifactId>weld-spi</artifactId>
-                <version>${weld.api.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>javax.inject</groupId>
-                <artifactId>javax.inject</artifactId>
-                <version>${javax.inject.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>javax.el</groupId>
-                <artifactId>el-api</artifactId>
-                <version>${javax.el.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>javax.annotation</groupId>
-                <artifactId>jsr250-api</artifactId>
-                <version>${jsr250.api}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.slf4j</groupId>
-                <artifactId>slf4j-ext</artifactId>
-                <version>${slf4j.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.slf4j</groupId>
-                <artifactId>slf4j-api</artifactId>
-                <version>${slf4j.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>ch.qos.logback</groupId>
-                <artifactId>logback-core</artifactId>
-                <version>${logback.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>ch.qos.logback</groupId>
-                <artifactId>logback-classic</artifactId>
-                <version>${logback.version}</version>
-            </dependency>
-
-        </dependencies>
-    </dependencyManagement>
-
 </project>",2012-10-12T10:31:59Z,146
"@@ -58,7 +58,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,152
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,13 +58,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,153
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,13 +58,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,154
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -46,13 +63,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,155
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">",2012-10-12T10:31:59Z,156
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,7 +58,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,157
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">",2012-10-12T10:31:59Z,158
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,7 +58,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-innerscanner</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,159
"@@ -33,11 +33,6 @@
 
     <description>Integration tests launcher for Weld-OSGi</description>
 
-    <properties>
-        <version.pax.exam>2.5.0</version.pax.exam>
-        <version.org.apache.felix>4.0.3</version.org.apache.felix>
-    </properties>
-
     <url>http://www.seamframework.org/Weld</url>
     <licenses>
         <license>
@@ -69,28 +64,24 @@
         <dependency>
             <groupId>org.ops4j.pax.exam</groupId>
             <artifactId>pax-exam-junit4</artifactId>
-            <version>${version.pax.exam}</version>
             <scope>test</scope>
         </dependency>
 
         <dependency>
             <groupId>org.ops4j.pax.exam</groupId>
             <artifactId>pax-exam-container-native</artifactId>
-            <version>${version.pax.exam}</version>
             <scope>test</scope>
         </dependency>
 
         <dependency>
             <groupId>org.ops4j.pax.exam</groupId>
             <artifactId>pax-exam-link-mvn</artifactId>
-            <version>${version.pax.exam}</version>
             <scope>test</scope>
         </dependency>
 
         <dependency>
             <groupId>org.apache.felix</groupId>
             <artifactId>org.apache.felix.framework</artifactId>
-            <version>${version.org.apache.felix}</version>
             <scope>test</scope>
         </dependency>
 
@@ -107,37 +98,31 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-extension</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-integration</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld</groupId>
             <artifactId>weld-core</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.se</groupId>
             <artifactId>weld-se-core</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
@@ -208,49 +193,41 @@
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle2</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle3</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-importing</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-scanner</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-innerscanner</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-cdi-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-life-cycle</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,160
"@@ -1,4 +1,5 @@
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
     <modelVersion>4.0.0</modelVersion>
     <groupId>org.jboss.weld</groupId>
     <artifactId>weld-core-parent</artifactId>
@@ -69,6 +70,17 @@
         <selenium.maven.plugin.version>1.0.1</selenium.maven.plugin.version>
         <slf4j.version>1.6.1</slf4j.version>
         <testng.version>5.10</testng.version>
+        <osgi.version>4.2.0</osgi.version>
+        <!-- Weld OSGi deps -->
+        <javax.inject.version>1</javax.inject.version>
+        <javax.web.version>6.0</javax.web.version>
+        <javax.el.version>2.2</javax.el.version>
+        <jsr250.api>1.0</jsr250.api>
+        <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
+        <logback.version>0.9.29</logback.version>
+        <pax.exam.version>2.5.0</pax.exam.version>
+        <org.apache.felix.version>4.0.3</org.apache.felix.version>
+        <!-- Weld API -->
         <weld.api.version>1.2.0.Beta1</weld.api.version>
     </properties>
 
@@ -215,12 +227,6 @@
                 <version>${arquillian.version}</version>
             </dependency>
 
-            <dependency>
-                <groupId>org.jboss.arquillian.container</groupId>
-                <artifactId>arquillian-container-test-spi</artifactId>
-                <version>${arquillian.version}</version>
-            </dependency>
-
             <dependency>
                 <groupId>org.jboss.arquillian.container</groupId>
                 <artifactId>arquillian-weld-ee-embedded-1.1</artifactId>
@@ -357,8 +363,8 @@
             </dependency>
 
             <dependency>
-	            <groupId>org.jboss.spec.javax.ws.rs</groupId>
-	            <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
+                <groupId>org.jboss.spec.javax.ws.rs</groupId>
+                <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
                 <version>${jboss.spec.jaxrs.version}</version>
             </dependency>
 
@@ -448,6 +454,154 @@
                 <version>${project.version}</version>
             </dependency>
 
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-api</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-extension</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-spi</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-integration</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-bundle1</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-bundle2</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-bundle3</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-importing</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-scanner</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-innerscanner</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-cdi-spi</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-life-cycle</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.ops4j.pax.exam</groupId>
+                <artifactId>pax-exam-junit4</artifactId>
+                <version>${pax.exam.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.ops4j.pax.exam</groupId>
+                <artifactId>pax-exam-container-native</artifactId>
+                <version>${pax.exam.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.ops4j.pax.exam</groupId>
+                <artifactId>pax-exam-link-mvn</artifactId>
+                <version>${pax.exam.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.apache.felix</groupId>
+                <artifactId>org.apache.felix.framework</artifactId>
+                <version>${org.apache.felix.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.core</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.compendium</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.inject</groupId>
+                <artifactId>javax.inject</artifactId>
+                <version>${javax.inject.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax</groupId>
+                <artifactId>javaee-web-api</artifactId>
+                <version>${javax.web.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.el</groupId>
+                <artifactId>el-api</artifactId>
+                <version>${javax.el.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.annotation</groupId>
+                <artifactId>jsr250-api</artifactId>
+                <version>${jsr250.api}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-core</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-classic</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
             <dependency>
                 <groupId>org.jboss.shrinkwrap</groupId>
                 <artifactId>shrinkwrap-impl-base</artifactId>
@@ -536,7 +690,7 @@
                         <configLocation>weld-checkstyle/checkstyle.xml</configLocation>
                         <consoleOutput>true</consoleOutput>
                         <failsOnError>true</failsOnError>
-                        <useFile />
+                        <useFile/>
                     </configuration>
                     <dependencies>
                         <dependency>
@@ -574,7 +728,7 @@
                                         </goals>
                                     </pluginExecutionFilter>
                                     <action>
-                                        <ignore />
+                                        <ignore/>
                                     </action>
                                 </pluginExecution>
                             </pluginExecutions>
@@ -586,10 +740,10 @@
                     <artifactId>maven-compiler-plugin</artifactId>
                     <version>2.3.2</version>
                     <configuration>
-                       <source>1.6</source>
-                       <target>1.6</target>
+                        <source>1.6</source>
+                        <target>1.6</target>
                     </configuration>
-                 </plugin>
+                </plugin>
             </plugins>
 
         </pluginManagement>",2012-10-12T10:31:59Z,161
"@@ -11,7 +11,8 @@
    express or implied. * See the License for the specific language
    governing permissions and * limitations under the License. */
 -->
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
     <parent>
         <artifactId>weld-core-parent</artifactId>
         <groupId>org.jboss.weld</groupId>
@@ -91,7 +92,7 @@
                             org.jboss.weld.manager;
                             org.jboss.weld.servlet;
                             org.jboss.weld.util;
-                            org.jboss.interceptor.*;
+                            org.jboss.weld.interceptor.*;
                             version=${osgi.version},
                             org.jboss.weld.el;
                             version=${osgi.version},
@@ -113,7 +114,8 @@
                              on foreign bundles.
                         -->
                         <Import-Package>
-                            org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=""[${slf4j.version},$${version;=+;${slf4j.version}})""; resolution:=optional,
+                            org.slf4j; org.slf4j.spi; org.slf4j.helpers;
+                            version=""[${slf4j.version},$${version;=+;${slf4j.version}})""; resolution:=optional,
                             ch.qos.cal10n; version=${cal10n.version}; resolution:=optional,
                             javax.interceptor.*, *;
                             resolution:=optional",2012-10-12T10:31:32Z,10
"@@ -46,8 +46,8 @@ public WeldCDIContainerFactory() {
         logger.debug(""Creation of a new Weld CDI container factory"");
         blackList = new HashSet<String>();
         blackList.add(""java.io.Serializable"");
-        blackList.add(""org.jboss.interceptor.proxy.LifecycleMixin"");
-        blackList.add(""org.jboss.interceptor.util.proxy.TargetInstanceProxy"");
+        blackList.add(""org.jboss.weld.interceptor.proxy.LifecycleMixin"");
+        blackList.add(""org.jboss.weld.interceptor.util.proxy.TargetInstanceProxy"");
         blackList.add(""javassist.util.proxy.ProxyObject"");
     }
 ",2012-10-12T10:31:32Z,131
"@@ -103,17 +103,17 @@ Import-Package org.jboss.weld.environment.osgi.api; \
                ch.qos.cal10n; \
                ch.qos.cal10n.verifier; \
                ch.qos.cal10n.util; version=0.7.2, \
-               org.jboss.interceptor.reader; \
-               org.jboss.interceptor.reader.cache; \
-               org.jboss.interceptor.spi.instance; \
-               org.jboss.interceptor.spi.context; \
-               org.jboss.interceptor.spi.model; \
-               org.jboss.interceptor.spi.metadata; \
-               org.jboss.interceptor.util; \
-               org.jboss.interceptor.util.proxy; \
-               org.jboss.interceptor.proxy; \
-               org.jboss.interceptor.proxy.javassist; \
-               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.interceptor.reader; \
+               org.jboss.weld.interceptor.reader.cache; \
+               org.jboss.weld.interceptor.spi.instance; \
+               org.jboss.weld.interceptor.spi.context; \
+               org.jboss.weld.interceptor.spi.model; \
+               org.jboss.weld.interceptor.spi.metadata; \
+               org.jboss.weld.interceptor.util; \
+               org.jboss.weld.interceptor.util.proxy; \
+               org.jboss.weld.interceptor.proxy; \
+               org.jboss.weld.interceptor.proxy.javassist; \
+               org.jboss.weld.interceptor.builder; \
                org.jboss.weld.manager.api; \
                org.jboss.weld.ejb.spi; \
                org.jboss.weld.ejb.spi.helpers; \
@@ -189,6 +189,6 @@ Import-Package org.jboss.weld.environment.osgi.api; \
                org.jboss.weld.environment.se.discovery; \
                org.jboss.weld.environment.se.discovery.url; \
                org.jboss.weld.environment.se.contexts; \
-               org.jboss.weld.messages; version=1.1.5
+               org.jboss.weld.messages; version=1.2.0-SNAPSHOT
 
 DynamicImport-Package *
\ No newline at end of file",2012-10-12T10:31:32Z,132
"@@ -97,17 +97,17 @@ Export-Package javax.el;version=2.2.0, \
                ch.qos.cal10n; \
                ch.qos.cal10n.verifier; \
                ch.qos.cal10n.util; version=0.7.2, \
-               org.jboss.interceptor.reader; \
-               org.jboss.interceptor.reader.cache; \
-               org.jboss.interceptor.spi.instance; \
-               org.jboss.interceptor.spi.context; \
-               org.jboss.interceptor.spi.model; \
-               org.jboss.interceptor.spi.metadata; \
-               org.jboss.interceptor.util; \
-               org.jboss.interceptor.util.proxy; \
-               org.jboss.interceptor.proxy; \
-               org.jboss.interceptor.proxy.javassist; \
-               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.interceptor.reader; \
+               org.jboss.weld.interceptor.reader.cache; \
+               org.jboss.weld.interceptor.spi.instance; \
+               org.jboss.weld.interceptor.spi.context; \
+               org.jboss.weld.interceptor.spi.model; \
+               org.jboss.weld.interceptor.spi.metadata; \
+               org.jboss.weld.interceptor.util; \
+               org.jboss.weld.interceptor.util.proxy; \
+               org.jboss.weld.interceptor.proxy; \
+               org.jboss.weld.interceptor.proxy.javassist; \
+               org.jboss.weld.interceptor.builder; \
                org.jboss.weld.manager.api; \
                org.jboss.weld.ejb.spi; \
                org.jboss.weld.ejb.spi.helpers; \
@@ -183,7 +183,7 @@ Export-Package javax.el;version=2.2.0, \
                org.jboss.weld.environment.se.discovery; \
                org.jboss.weld.environment.se.discovery.url; \
                org.jboss.weld.environment.se.contexts; \
-               org.jboss.weld.messages; version=1.1.5
+               org.jboss.weld.messages; version=1.2.0-SNAPSHOT
 
 
 DynamicImport-Package *",2012-10-12T10:31:32Z,133
"@@ -233,14 +233,15 @@ private void fireAllEvent(AbstractServiceEvent event, Event broadcaster,
       {
          try
          {
+            // here singleton issue
             broadcaster.select(eventClass,
-                               filteredServicesQualifiers(event,
-                                                          new SpecificationAnnotation(clazz),
-                                                          instance)).fire(event);
+               filteredServicesQualifiers(event,
+                  new SpecificationAnnotation(clazz),
+                  instance)).fire(event);
          }
          catch(Throwable t)
          {
-            t.printStackTrace();
+            //t.printStackTrace();
          }
       }
    }",2012-10-12T10:30:48Z,134
"@@ -95,13 +95,13 @@ public void startCDIOSGi() throws Exception {
 
     public void stopCDIOSGi() throws Exception {
         logger.info(""CDI-OSGi stop bundle management"");
-        started.set(false);
         for (Bundle bundle : context.getBundles()) {
             logger.trace(""Scanning {}"", bundle.getSymbolicName());
             if (managed.get(bundle.getBundleId()) != null) {
                 stopManagement(bundle);
             }
         }
+        started.set(false);
     }
 
     @Override
@@ -206,52 +206,30 @@ private void stopManagement(Bundle bundle) {
         boolean set = CDIOSGiExtension.currentBundle.get() != null;
         CDIOSGiExtension.currentBundle.set(bundle.getBundleId());
         CDIContainer holder = managed.get(bundle.getBundleId());
-        if (holder != null) {
-            BundleHolder bundleHolder = holder.getInstance().select(BundleHolder.class).get();
-            //if (bundleHolder.getState().equals(BundleState.VALID)) {
-                logger.trace(""Firing the BundleState.INVALID event"");
-                //bundleHolder.setState(BundleState.INVALID);
-                holder.getBeanManager().fireEvent(new Invalid());
-            //}
-            if(started.get()) {
-                factory().removeContainer(bundle);
-            }
-            logger.trace(""The container {} has been unregistered"",holder);
-            logger.trace(""Firing the BundleContainerEvents.BundleContainerShutdown event"");
-            holder.getBeanManager().fireEvent(new BundleContainerEvents.BundleContainerShutdown(bundle.getBundleContext()));
-
-            Collection<ServiceRegistration> regs = holder.getRegistrations();
-            logger.trace(""Unregistering the container registrations"");
-            /**for (ServiceRegistration reg : regs) {
+        if (started.get() && managed.containsKey(bundle.getBundleId())) {
+            if (holder != null) {
+                BundleHolder bundleHolder = holder.getInstance().select(BundleHolder.class).get();
                 try {
-                    reg.unregister();
-                } catch (IllegalStateException e) {// Ignore
-                    //logger.warn(""Unable to unregister a service"" + e.getCause());
-                }
-            }
-            try {
-                // unregistration for managed services. It should be done by the OSGi framework
-                logger.trace(""Unregistering the container managed services"");
-                RegistrationsHolderImpl regsHolder = holder.getInstance().select(RegistrationsHolderImpl.class).get();
-                for (ServiceRegistration r : regsHolder.getRegistrations()) {
-                    try {
-                        r.unregister();
-                    } catch (Exception e) {
-                        // the service is already unregistered if shutdown is called when bundle is stopped
-                        // but with a manual boostrap, you can't be sure
-                        //System.out.println(""Service already unregistered."");
+                    logger.trace(""Firing the BundleState.INVALID event"");
+                    holder.getBeanManager().fireEvent(new Invalid());
+                    logger.trace(""The container {} has been unregistered"",holder);
+                    logger.trace(""Firing the BundleContainerEvents.BundleContainerShutdown event"");
+                    // here singleton issue ?
+                    holder.getBeanManager().fireEvent(new BundleContainerEvents.BundleContainerShutdown(bundle.getBundleContext()));
+                } catch (Throwable t) {}
+                logger.trace(""Shutting down the container {}"", holder);
+                //holder.shutdown();
+                managed.remove(bundle.getBundleId());
+                if(started.get()) {
+                    if (factoryRef != null) {
+                        factory().removeContainer(bundle);
                     }
                 }
-            } catch (Throwable t) {
-                t.printStackTrace();
-            }   **/
-
-            logger.trace(""Shutting down the container {}"", holder);
-            holder.shutdown();
-            managed.remove(bundle.getBundleId());
-            logger.debug(""Bundle {} is unmanaged"", bundle.getSymbolicName());
-        } else {
-            logger.debug(""Bundle {} is not a bean bundle"", bundle.getSymbolicName());
+                holder.shutdown();
+                logger.debug(""Bundle {} is unmanaged"", bundle.getSymbolicName());
+            } else {
+                logger.debug(""Bundle {} is not a bean bundle"", bundle.getSymbolicName());
+            }
         }
         if (!set) {
             CDIOSGiExtension.currentBundle.remove();",2012-10-12T10:30:48Z,135
"@@ -2,8 +2,6 @@ Bundle-Activator org.jboss.weld.environment.osgi.impl.Activator
 
 Export-Package org.jboss.weld.environment.osgi.impl.extension.service;version=${pom.version}
 
-Embed-Dependency *; scope=compile; inline=true; artifactId=!org.osgi.core|org.osgi.compendium|weld-osgi-core-api|weld-osgi-core-spi
-
 Import-Package org.jboss.weld.environment.osgi.api; \
                org.jboss.weld.environment.osgi.api.annotation; \
                org.jboss.weld.environment.osgi.api.events; \
@@ -35,7 +33,61 @@ Import-Package org.jboss.weld.environment.osgi.api; \
                javassist.tools; \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
-               javassist.tools.web; version=3.14.0
+               javassist.tools.web; version=3.14.0, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29
+
 
 DynamicImport-Package *
 ",2012-10-12T10:30:48Z,136
"@@ -1,35 +0,0 @@
-<configuration debug=""false"">
-
-    <appender name=""Console"" class=""ch.qos.logback.core.ConsoleAppender"">
-        <filter class=""ch.qos.logback.classic.filter.ThresholdFilter"">
-            <level>info</level>
-        </filter>
-        <encoder>
-            <pattern>
-                %d{HH:mm:ss.SSS} %-15.-15([%-14.-14(%.-13thread])) %-5level %.-1000(%logger{25} - %msg) %n
-            </pattern>
-        </encoder>
-    </appender>
-
-    <appender name=""Log"" class=""ch.qos.logback.core.FileAppender"">
-        <file>cdi-osgi.log</file>
-        <append>false</append>
-        <filter class=""ch.qos.logback.classic.filter.ThresholdFilter"">
-            <level>trace</level>
-        </filter>
-        <encoder>
-            <pattern>
-                %d{HH:mm:ss.SSS} %-15.-15([%-14.-14(%.-13thread])) %-5level %.-1000(%logger{25} - %msg) %n %xEx{full}
-            </pattern>
-            <!--<pattern>
-                %d{HH:mm:ss.SSS} [%thread] %-5level %caller{1} %logger{25} - %msg%n %xEx{full}
-            </pattern>-->
-        </encoder>
-    </appender>
-
-    <root level=""trace"">
-        <appender-ref ref=""Console""/>
-        <appender-ref ref=""Log""/>
-    </root>
-
-</configuration>
\ No newline at end of file",2012-10-12T10:30:48Z,137
"@@ -84,11 +84,6 @@
          <artifactId>jsr250-api</artifactId>
       </dependency>
 
-      <dependency>
-         <groupId>com.google.guava</groupId>
-         <artifactId>guava</artifactId>
-      </dependency>
-
       <dependency>
          <groupId>org.jboss.interceptor</groupId>
          <artifactId>jboss-interceptor-spi</artifactId>
@@ -104,6 +99,11 @@
          <artifactId>jboss-interceptor-api</artifactId>
       </dependency>
 
+      <dependency>
+         <groupId>com.google.guava</groupId>
+         <artifactId>guava</artifactId>
+      </dependency>
+
       <dependency>
          <groupId>ch.qos.cal10n</groupId>
          <artifactId>cal10n-api</artifactId>",2012-10-12T10:30:48Z,138
"@@ -2,11 +2,7 @@ Bundle-Activator org.jboss.weld.environment.osgi.impl.WeldActivator
 
 Export-Package org.jboss.weld.environment.osgi.impl.embedded; version=${pom.version}
 
-Embed-Dependency *; scope=compile; inline=true; artifactId=!weld-osgi-core-spi|weld-osgi-core-extension|jboss-interceptor-api|javax.inject|jsr250-api|cdi-api|el-api
-
-Import-Package org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=1.6.1; resolution:=optional, \
-               ch.qos.cal10n; version=0.7.2; resolution:=optional, \
-               org.jboss.weld.environment.osgi.api; \
+Import-Package org.jboss.weld.environment.osgi.api; \
                org.jboss.weld.environment.osgi.api.annotation; \
                org.jboss.weld.environment.osgi.api.events; \
                org.jboss.weld.environment.osgi.spi;version=${pom.version}, \
@@ -20,6 +16,7 @@ Import-Package org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=1.6.1; resol
                javax.enterprise.inject.spi; \
                javax.enterprise.util; version=1.0.0, \
                javax.interceptor; version=1.1.0, \
+               org.osgi.framework, \
                javassist; \
                javassist.bytecode; \
                javassist.bytecode.analysis; \
@@ -36,6 +33,162 @@ Import-Package org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=1.6.1; resol
                javassist.tools; \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
-               javassist.tools.web; version=3.14.0
+               javassist.tools.web; version=3.14.0, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; \
+               org.slf4j.cal10n; \
+               org.slf4j.profiler; \
+               org.slf4j.agent; \
+               org.slf4j.instrumentation; \
+               org.slf4j.ext; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29, \
+               com.google.common.primitives; \
+               com.google.common.collect; \
+               com.google.common.util.concurrent; \
+               com.google.common.io; \
+               com.google.common.net; \
+               com.google.common.annotations; \
+               com.google.common.base; \
+               com.google.common.base.internal, \
+               ch.qos.cal10n; \
+               ch.qos.cal10n.verifier; \
+               ch.qos.cal10n.util; version=0.7.2, \
+               org.jboss.interceptor.reader; \
+               org.jboss.interceptor.reader.cache; \
+               org.jboss.interceptor.spi.instance; \
+               org.jboss.interceptor.spi.context; \
+               org.jboss.interceptor.spi.model; \
+               org.jboss.interceptor.spi.metadata; \
+               org.jboss.interceptor.util; \
+               org.jboss.interceptor.util.proxy; \
+               org.jboss.interceptor.proxy; \
+               org.jboss.interceptor.proxy.javassist; \
+               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.manager.api; \
+               org.jboss.weld.ejb.spi; \
+               org.jboss.weld.ejb.spi.helpers; \
+               org.jboss.weld.ejb.api; \
+               org.jboss.weld.context; \
+               org.jboss.weld.context.ejb; \
+               org.jboss.weld.context.unbound; \
+               org.jboss.weld.context.bound; \
+               org.jboss.weld.context.api; \
+               org.jboss.weld.context.http; \
+               org.jboss.weld.validation.spi; \
+               org.jboss.weld.transaction.spi; \
+               org.jboss.weld.servlet.api; \
+               org.jboss.weld.servlet.api.helpers; \
+               org.jboss.weld.resources.spi; \
+               org.jboss.weld.resources.spi.helpers; \
+               org.jboss.weld.bootstrap.spi; \
+               org.jboss.weld.bootstrap.spi.helpers; \
+               org.jboss.weld.bootstrap.api; \
+               org.jboss.weld.bootstrap.api.helpers; \
+               org.jboss.weld.serialization.spi; \
+               org.jboss.weld.serialization.spi.helpers; \
+               org.jboss.weld.security.spi; \
+               org.jboss.weld.injection.spi; \
+               org.jboss.weld.injection.spi.helpers; \
+               org.jboss.weld; \
+               org.jboss.weld.manager; \
+               org.jboss.weld.jsf; \
+               org.jboss.weld.ejb; \
+               org.jboss.weld.event; \
+               org.jboss.weld.introspector; \
+               org.jboss.weld.introspector.jlr; \
+               org.jboss.weld.context.beanstore; \
+               org.jboss.weld.context.beanstore.ejb; \
+               org.jboss.weld.context.beanstore.http; \
+               org.jboss.weld.context.cache; \
+               org.jboss.weld.context.conversation; \
+               org.jboss.weld.util; \
+               org.jboss.weld.util.dom; \
+               org.jboss.weld.util.reflection; \
+               org.jboss.weld.util.reflection.instantiation; \
+               org.jboss.weld.util.el; \
+               org.jboss.weld.util.bytecode; \
+               org.jboss.weld.util.collections; \
+               org.jboss.weld.exceptions; \
+               org.jboss.weld.metadata; \
+               org.jboss.weld.metadata.cache; \
+               org.jboss.weld.el; \
+               org.jboss.weld.xml; \
+               org.jboss.weld.servlet; \
+               org.jboss.weld.ws; \
+               org.jboss.weld.bean; \
+               org.jboss.weld.bean.builtin; \
+               org.jboss.weld.bean.builtin.ee; \
+               org.jboss.weld.bean.proxy; \
+               org.jboss.weld.bean.proxy.util; \
+               org.jboss.weld.bean.interceptor; \
+               org.jboss.weld.resources; \
+               org.jboss.weld.literal; \
+               org.jboss.weld.bootstrap; \
+               org.jboss.weld.bootstrap.events; \
+               org.jboss.weld.logging; \
+               org.jboss.weld.logging.messages; \
+               org.jboss.weld.serialization; \
+               org.jboss.weld.persistence; \
+               org.jboss.weld.resolution; \
+               org.jboss.weld.injection; \
+               org.jboss.weld.environment.se; \
+               org.jboss.weld.environment.se.events; \
+               org.jboss.weld.environment.se.bindings; \
+               org.jboss.weld.environment.se.threading; \
+               org.jboss.weld.environment.se.beans; \
+               org.jboss.weld.environment.se.discovery; \
+               org.jboss.weld.environment.se.discovery.url; \
+               org.jboss.weld.environment.se.contexts; \
+               org.jboss.weld.messages; version=1.1.3
 
 DynamicImport-Package *
\ No newline at end of file",2012-10-12T10:30:48Z,132
"@@ -34,43 +34,103 @@
          <email>matthieu.clochard@serli.com</email>
       </developer>
    </developers>
-    
-    <dependencies>
-    
-        <dependency>
-            <groupId>javax.inject</groupId>
-            <artifactId>javax.inject</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>org.jboss.interceptor</groupId>
-            <artifactId>jboss-interceptor-api</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>javax.el</groupId>
-            <artifactId>el-api</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>javax.enterprise</groupId>
-            <artifactId>cdi-api</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>org.javassist</groupId>
-            <artifactId>javassist</artifactId>
-        </dependency>
-        
-    </dependencies>
-
-    <build>
-        <plugins>
-            <plugin>
-                <groupId>org.apache.felix</groupId>
-                <artifactId>maven-bundle-plugin</artifactId>
-            </plugin>
-        </plugins>
-    </build>
-    
+
+   <dependencies>
+
+      <dependency>
+         <groupId>org.jboss.weld</groupId>
+         <artifactId>weld-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.weld.se</groupId>
+         <artifactId>weld-se-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.weld</groupId>
+         <artifactId>weld-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.weld</groupId>
+         <artifactId>weld-spi</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>javax.inject</groupId>
+         <artifactId>javax.inject</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>javax.el</groupId>
+         <artifactId>el-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>javax.enterprise</groupId>
+         <artifactId>cdi-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.interceptor</groupId>
+         <artifactId>jboss-interceptor-spi</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.interceptor</groupId>
+         <artifactId>jboss-interceptor-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.interceptor</groupId>
+         <artifactId>jboss-interceptor-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.javassist</groupId>
+         <artifactId>javassist</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>com.google.guava</groupId>
+         <artifactId>guava</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>ch.qos.cal10n</groupId>
+         <artifactId>cal10n-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.slf4j</groupId>
+         <artifactId>slf4j-ext</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.slf4j</groupId>
+         <artifactId>slf4j-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>ch.qos.logback</groupId>
+         <artifactId>logback-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>ch.qos.logback</groupId>
+         <artifactId>logback-classic</artifactId>
+      </dependency>
+
+   </dependencies>
+
+   <build>
+      <plugins>
+         <plugin>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>maven-bundle-plugin</artifactId>
+         </plugin>
+      </plugins>
+   </build>
+
 </project>",2012-10-12T10:30:48Z,139
"@@ -27,7 +27,164 @@ Export-Package javax.el;version=2.2.0, \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
                javassist.tools.web; version=3.14.0, \
-               com.sun.jdi
+               com.sun.jdi, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; \
+               org.slf4j.cal10n; \
+               org.slf4j.profiler; \
+               org.slf4j.agent; \
+               org.slf4j.instrumentation; \
+               org.slf4j.ext; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29, \
+               com.google.common.primitives; \
+               com.google.common.collect; \
+               com.google.common.util.concurrent; \
+               com.google.common.io; \
+               com.google.common.net; \
+               com.google.common.annotations; \
+               com.google.common.base; \
+               com.google.common.base.internal, \
+               ch.qos.cal10n; \
+               ch.qos.cal10n.verifier; \
+               ch.qos.cal10n.util; version=0.7.2, \
+               org.jboss.interceptor.reader; \
+               org.jboss.interceptor.reader.cache; \
+               org.jboss.interceptor.spi.instance; \
+               org.jboss.interceptor.spi.context; \
+               org.jboss.interceptor.spi.model; \
+               org.jboss.interceptor.spi.metadata; \
+               org.jboss.interceptor.util; \
+               org.jboss.interceptor.util.proxy; \
+               org.jboss.interceptor.proxy; \
+               org.jboss.interceptor.proxy.javassist; \
+               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.manager.api; \
+               org.jboss.weld.ejb.spi; \
+               org.jboss.weld.ejb.spi.helpers; \
+               org.jboss.weld.ejb.api; \
+               org.jboss.weld.context; \
+               org.jboss.weld.context.ejb; \
+               org.jboss.weld.context.unbound; \
+               org.jboss.weld.context.bound; \
+               org.jboss.weld.context.api; \
+               org.jboss.weld.context.http; \
+               org.jboss.weld.validation.spi; \
+               org.jboss.weld.transaction.spi; \
+               org.jboss.weld.servlet.api; \
+               org.jboss.weld.servlet.api.helpers; \
+               org.jboss.weld.resources.spi; \
+               org.jboss.weld.resources.spi.helpers; \
+               org.jboss.weld.bootstrap.spi; \
+               org.jboss.weld.bootstrap.spi.helpers; \
+               org.jboss.weld.bootstrap.api; \
+               org.jboss.weld.bootstrap.api.helpers; \
+               org.jboss.weld.serialization.spi; \
+               org.jboss.weld.serialization.spi.helpers; \
+               org.jboss.weld.security.spi; \
+               org.jboss.weld.injection.spi; \
+               org.jboss.weld.injection.spi.helpers; \
+               org.jboss.weld; \
+               org.jboss.weld.manager; \
+               org.jboss.weld.jsf; \
+               org.jboss.weld.ejb; \
+               org.jboss.weld.event; \
+               org.jboss.weld.introspector; \
+               org.jboss.weld.introspector.jlr; \
+               org.jboss.weld.context.beanstore; \
+               org.jboss.weld.context.beanstore.ejb; \
+               org.jboss.weld.context.beanstore.http; \
+               org.jboss.weld.context.cache; \
+               org.jboss.weld.context.conversation; \
+               org.jboss.weld.util; \
+               org.jboss.weld.util.dom; \
+               org.jboss.weld.util.reflection; \
+               org.jboss.weld.util.reflection.instantiation; \
+               org.jboss.weld.util.el; \
+               org.jboss.weld.util.bytecode; \
+               org.jboss.weld.util.collections; \
+               org.jboss.weld.exceptions; \
+               org.jboss.weld.metadata; \
+               org.jboss.weld.metadata.cache; \
+               org.jboss.weld.el; \
+               org.jboss.weld.xml; \
+               org.jboss.weld.servlet; \
+               org.jboss.weld.ws; \
+               org.jboss.weld.bean; \
+               org.jboss.weld.bean.builtin; \
+               org.jboss.weld.bean.builtin.ee; \
+               org.jboss.weld.bean.proxy; \
+               org.jboss.weld.bean.proxy.util; \
+               org.jboss.weld.bean.interceptor; \
+               org.jboss.weld.resources; \
+               org.jboss.weld.literal; \
+               org.jboss.weld.bootstrap; \
+               org.jboss.weld.bootstrap.events; \
+               org.jboss.weld.logging; \
+               org.jboss.weld.logging.messages; \
+               org.jboss.weld.serialization; \
+               org.jboss.weld.persistence; \
+               org.jboss.weld.resolution; \
+               org.jboss.weld.injection; \
+               org.jboss.weld.environment.se; \
+               org.jboss.weld.environment.se.events; \
+               org.jboss.weld.environment.se.bindings; \
+               org.jboss.weld.environment.se.threading; \
+               org.jboss.weld.environment.se.beans; \
+               org.jboss.weld.environment.se.discovery; \
+               org.jboss.weld.environment.se.discovery.url; \
+               org.jboss.weld.environment.se.contexts; \
+               org.jboss.weld.messages; version=1.1.3
+
 
 DynamicImport-Package *
 ",2012-10-12T10:30:48Z,133
"@@ -27,7 +27,164 @@ Export-Package javax.el;version=2.2.0, \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
                javassist.tools.web; version=3.14.0, \
-               com.sun.jdi
+               com.sun.jdi, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; \
+               org.slf4j.cal10n; \
+               org.slf4j.profiler; \
+               org.slf4j.agent; \
+               org.slf4j.instrumentation; \
+               org.slf4j.ext; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29, \
+               com.google.common.primitives; \
+               com.google.common.collect; \
+               com.google.common.util.concurrent; \
+               com.google.common.io; \
+               com.google.common.net; \
+               com.google.common.annotations; \
+               com.google.common.base; \
+               com.google.common.base.internal, \
+               ch.qos.cal10n; \
+               ch.qos.cal10n.verifier; \
+               ch.qos.cal10n.util; version=0.7.2, \
+               org.jboss.interceptor.reader; \
+               org.jboss.interceptor.reader.cache; \
+               org.jboss.interceptor.spi.instance; \
+               org.jboss.interceptor.spi.context; \
+               org.jboss.interceptor.spi.model; \
+               org.jboss.interceptor.spi.metadata; \
+               org.jboss.interceptor.util; \
+               org.jboss.interceptor.util.proxy; \
+               org.jboss.interceptor.proxy; \
+               org.jboss.interceptor.proxy.javassist; \
+               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.manager.api; \
+               org.jboss.weld.ejb.spi; \
+               org.jboss.weld.ejb.spi.helpers; \
+               org.jboss.weld.ejb.api; \
+               org.jboss.weld.context; \
+               org.jboss.weld.context.ejb; \
+               org.jboss.weld.context.unbound; \
+               org.jboss.weld.context.bound; \
+               org.jboss.weld.context.api; \
+               org.jboss.weld.context.http; \
+               org.jboss.weld.validation.spi; \
+               org.jboss.weld.transaction.spi; \
+               org.jboss.weld.servlet.api; \
+               org.jboss.weld.servlet.api.helpers; \
+               org.jboss.weld.resources.spi; \
+               org.jboss.weld.resources.spi.helpers; \
+               org.jboss.weld.bootstrap.spi; \
+               org.jboss.weld.bootstrap.spi.helpers; \
+               org.jboss.weld.bootstrap.api; \
+               org.jboss.weld.bootstrap.api.helpers; \
+               org.jboss.weld.serialization.spi; \
+               org.jboss.weld.serialization.spi.helpers; \
+               org.jboss.weld.security.spi; \
+               org.jboss.weld.injection.spi; \
+               org.jboss.weld.injection.spi.helpers; \
+               org.jboss.weld; \
+               org.jboss.weld.manager; \
+               org.jboss.weld.jsf; \
+               org.jboss.weld.ejb; \
+               org.jboss.weld.event; \
+               org.jboss.weld.introspector; \
+               org.jboss.weld.introspector.jlr; \
+               org.jboss.weld.context.beanstore; \
+               org.jboss.weld.context.beanstore.ejb; \
+               org.jboss.weld.context.beanstore.http; \
+               org.jboss.weld.context.cache; \
+               org.jboss.weld.context.conversation; \
+               org.jboss.weld.util; \
+               org.jboss.weld.util.dom; \
+               org.jboss.weld.util.reflection; \
+               org.jboss.weld.util.reflection.instantiation; \
+               org.jboss.weld.util.el; \
+               org.jboss.weld.util.bytecode; \
+               org.jboss.weld.util.collections; \
+               org.jboss.weld.exceptions; \
+               org.jboss.weld.metadata; \
+               org.jboss.weld.metadata.cache; \
+               org.jboss.weld.el; \
+               org.jboss.weld.xml; \
+               org.jboss.weld.servlet; \
+               org.jboss.weld.ws; \
+               org.jboss.weld.bean; \
+               org.jboss.weld.bean.builtin; \
+               org.jboss.weld.bean.builtin.ee; \
+               org.jboss.weld.bean.proxy; \
+               org.jboss.weld.bean.proxy.util; \
+               org.jboss.weld.bean.interceptor; \
+               org.jboss.weld.resources; \
+               org.jboss.weld.literal; \
+               org.jboss.weld.bootstrap; \
+               org.jboss.weld.bootstrap.events; \
+               org.jboss.weld.logging; \
+               org.jboss.weld.logging.messages; \
+               org.jboss.weld.serialization; \
+               org.jboss.weld.persistence; \
+               org.jboss.weld.resolution; \
+               org.jboss.weld.injection; \
+               org.jboss.weld.environment.se; \
+               org.jboss.weld.environment.se.events; \
+               org.jboss.weld.environment.se.bindings; \
+               org.jboss.weld.environment.se.threading; \
+               org.jboss.weld.environment.se.beans; \
+               org.jboss.weld.environment.se.discovery; \
+               org.jboss.weld.environment.se.discovery.url; \
+               org.jboss.weld.environment.se.contexts; \
+               org.jboss.weld.messages; version=1.1.3
+
 
 DynamicImport-Package *
 ",2012-10-12T10:30:48Z,140
"@@ -2,12 +2,12 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <parent>
+   <!--<parent>
       <groupId>org.jboss.weld.osgi.examples</groupId>
       <artifactId>weld-osgi-examples</artifactId>
       <version>1.1.3-SNAPSHOT</version>
       <relativePath>../pom.xml</relativePath>
-   </parent>
+   </parent>-->
     <modelVersion>4.0.0</modelVersion>
     <groupId>org.jboss.weld.osgi.examples</groupId>
     <artifactId>weld-osgi-container-equinox</artifactId>",2012-10-12T10:31:09Z,141
"@@ -2,302 +2,327 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <parent>
-      <groupId>org.jboss.weld.osgi.examples</groupId>
-      <artifactId>weld-osgi-examples</artifactId>
-      <version>1.1.3-SNAPSHOT</version>
-      <relativePath>../pom.xml</relativePath>
-   </parent>
-   <modelVersion>4.0.0</modelVersion>
-   <groupId>org.jboss.weld.osgi.examples</groupId>
-   <artifactId>weld-osgi-container-knopflerfish</artifactId>
-   <name>Weld OSGi (Examples Container Knopflerfish)</name>
-
-   <description>Standalone example for Weld-OSGi</description>
-
-   <url>http://www.seamframework.org/Weld</url>
-   <licenses>
-      <license>
-         <name>Apache License, Version 2.0</name>
-         <distribution>repo</distribution>
-         <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
-      </license>
-   </licenses>
-
-   <developers>
-      <developer>
-         <name>Mathieu Ancelin</name>
-         <email>mathieu.ancelin@serli.com</email>
-      </developer>
-      <developer>
-         <name>Matthieu Clochard</name>
-         <email>matthieu.clochard@serli.com</email>
-      </developer>
-   </developers>
-
-   <dependencies>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-divide</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-log</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-minus</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-plus</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-times</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-square</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-triangle</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-standalone</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-app</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-england</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-fwk</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-france</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-spain</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>javax.ws.rs</groupId>
-         <artifactId>jsr311-api</artifactId>
-         <version>1.1</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.codehaus.groovy</groupId>
-         <artifactId>groovy-all</artifactId>
-         <version>1.8.0-rc-3</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-spi</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-extension</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-mandatory</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-integration</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.osgi</groupId>
-         <artifactId>org.osgi.core</artifactId>
-         <version>4.2.0</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.main</artifactId>
-         <version>3.0.6</version>
-         <scope>provided</scope>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix.gogo</groupId>
-         <artifactId>org.apache.felix.gogo.commands</artifactId>
-         <version>0.4.0</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.bundlerepository</artifactId>
-         <version>1.2.1</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.shell.tui</artifactId>
-         <version>1.0.2</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.shell</artifactId>
-         <version>1.0.2</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.http.bundle</artifactId>
-         <version>2.0.4</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.log</artifactId>
-         <version>1.0.0</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.configadmin</artifactId>
-         <version>1.2.8</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld</groupId>
-         <artifactId>weld-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.se</groupId>
-         <artifactId>weld-se-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-   </dependencies>
-
-   <build>
-      <resources>
-         <resource>
-            <directory>src/main/resources</directory>
-             <filtering>true</filtering>
-         </resource>
-      </resources>
-      <plugins>
-         <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-antrun-plugin</artifactId>
-            <executions>
-               <execution>
-                  <id>compile</id>
-                  <phase>package</phase>
-                  <goals>
-                     <goal>run</goal>
-                  </goals>
-                  <configuration>
-                     <tasks>
-                        <copy file=""target/classes/config.properties"" tofile=""${project.build.directory}/config.properties""/>
-                        <copy file=""${maven.dependency.org.apache.felix.org.apache.felix.main.jar.path}"" tofile=""${project.build.directory}/felix.jar""/>
-                     </tasks>
-                  </configuration>
-               </execution>
-            </executions>
-         </plugin>
-
-         <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-assembly-plugin</artifactId>
-            <executions>
-               <execution>
-                  <id>create-executable-jar</id>
-                  <phase>package</phase>
-                  <goals>
-                     <goal>single</goal>
-                  </goals>
-                  <configuration>
-                     <descriptors>
-                        <descriptor>${basedir}/src/main/assembly/assembly.xml</descriptor>
-                     </descriptors>
-                     <finalName>${project.artifactId}-${project.version}</finalName>
-                  </configuration>
-               </execution>
-            </executions>
-         </plugin>
-      </plugins>
-   </build>
+    <!--<parent>
+        <groupId>org.jboss.weld.osgi.examples</groupId>
+        <artifactId>weld-osgi-examples</artifactId>
+        <version>1.1.3-SNAPSHOT</version>
+        <relativePath>../pom.xml</relativePath>
+    </parent>-->
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.jboss.weld.osgi.examples</groupId>
+    <artifactId>weld-osgi-container-knopflerfish</artifactId>
+    <version>1.1.3-SNAPSHOT</version>
+    <name>Weld OSGi (Examples Container Knopflerfish)</name>
+
+    <description>Standalone example for Weld-OSGi</description>
+
+    <url>http://www.seamframework.org/Weld</url>
+    <licenses>
+        <license>
+            <name>Apache License, Version 2.0</name>
+            <distribution>repo</distribution>
+            <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
+        </license>
+    </licenses>
+
+    <developers>
+        <developer>
+            <name>Mathieu Ancelin</name>
+            <email>mathieu.ancelin@serli.com</email>
+        </developer>
+        <developer>
+            <name>Matthieu Clochard</name>
+            <email>matthieu.clochard@serli.com</email>
+        </developer>
+    </developers>
+
+    <repositories>
+        <repository>
+            <releases>
+                <enabled>true</enabled>
+                <updatePolicy>never</updatePolicy>
+                <checksumPolicy>fail</checksumPolicy>
+            </releases>
+            <snapshots>
+                <enabled>true</enabled>
+                <updatePolicy>never</updatePolicy>
+                <checksumPolicy>fail</checksumPolicy>
+            </snapshots>
+            <id>Knopflerfish</id>
+            <name>Knopflerfish Releases Repository</name>
+            <url>http://www.knopflerfish.org/maven2</url>
+            <layout>default</layout>
+        </repository>
+    </repositories>
+
+    <dependencies>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-divide</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-log</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-minus</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-plus</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-times</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-square</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-triangle</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-standalone</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-app</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-england</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-fwk</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-france</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-spain</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>javax.ws.rs</groupId>
+            <artifactId>jsr311-api</artifactId>
+            <version>1.1</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.codehaus.groovy</groupId>
+            <artifactId>groovy-all</artifactId>
+            <version>1.8.0-rc-3</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-spi</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-extension</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-mandatory</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-integration</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld</groupId>
+            <artifactId>weld-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.se</groupId>
+            <artifactId>weld-se-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.osgi</groupId>
+            <artifactId>org.osgi.core</artifactId>
+            <version>4.2.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.osgi</groupId>
+            <artifactId>org.osgi.compendium</artifactId>
+            <version>4.2.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.knopflerfish</groupId>
+            <artifactId>framework</artifactId>
+            <version>5.1.14</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix.gogo</groupId>
+            <artifactId>org.apache.felix.gogo.commands</artifactId>
+            <version>0.4.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.bundlerepository</artifactId>
+            <version>1.2.1</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.shell.tui</artifactId>
+            <version>1.0.2</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.shell</artifactId>
+            <version>1.0.2</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.http.bundle</artifactId>
+            <version>2.0.4</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.log</artifactId>
+            <version>1.0.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.configadmin</artifactId>
+            <version>1.2.8</version>
+        </dependency>
+
+    </dependencies>
+
+    <build>
+        <resources>
+            <resource>
+                <directory>src/main/resources</directory>
+                <filtering>true</filtering>
+            </resource>
+        </resources>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-antrun-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>compile</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>run</goal>
+                        </goals>
+                        <configuration>
+                            <tasks>
+                                <copy file=""target/classes/config.xargs"" tofile=""${project.build.directory}/config.xargs""/>
+                                <copy file=""${maven.dependency.org.knopflerfish.framework.jar.path}"" tofile=""${project.build.directory}/knopflerfish.jar""/>
+                            </tasks>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-assembly-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>create-executable-jar</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>single</goal>
+                        </goals>
+                        <configuration>
+                            <descriptors>
+                                <descriptor>${basedir}/src/main/assembly/assembly.xml</descriptor>
+                            </descriptors>
+                            <finalName>${project.artifactId}-${project.version}</finalName>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+        </plugins>
+    </build>
 
 </project>",2012-10-12T10:31:09Z,142
"@@ -34,30 +34,25 @@
                 <include>org.jboss.weld.osgi:weld-osgi-core-spi</include>
                 <include>org.jboss.weld.osgi:weld-osgi-core-extension</include>
                 <include>org.jboss.weld.osgi:weld-osgi-core-mandatory</include>
+                <include>org.osgi:org.osgi.compendium</include>
                 <include>org.apache.felix:org.apache.felix.bundlerepository</include>
                 <include>org.apache.felix:org.apache.felix.shell.tui</include>
                 <include>org.apache.felix:org.apache.felix.shell</include>
                 <include>org.apache.felix:org.apache.felix.http.bundle</include>
                 <include>org.apache.felix:org.apache.felix.log</include>
                 <include>org.apache.felix:org.apache.felix.configadmin</include>
+                <include>org.codehaus.groovy:groovy-all</include>
                 <include>javax.ws.rs:jsr311-api</include>
             </includes>
         </dependencySet>
-        <dependencySet>
-            <useProjectArtifact>false</useProjectArtifact>
-            <outputDirectory></outputDirectory>
-            <includes>
-                <include>org.apache.felix:org.apache.felix.main</include>
-            </includes>
-        </dependencySet>
     </dependencySets>
     <files>
         <file>
-            <source>${project.build.directory}/felix.jar</source>
-            <outputDirectory>bin</outputDirectory>
+            <source>${project.build.directory}/knopflerfish.jar</source>
+            <outputDirectory></outputDirectory>
         </file>
         <file>
-            <source>${project.build.directory}/config.properties</source>
+            <source>${project.build.directory}/config.xargs</source>
             <outputDirectory>conf</outputDirectory>
         </file>
     </files>",2012-10-12T10:31:09Z,143
"@@ -1,49 +0,0 @@
-org.osgi.framework.storage.clean=onFirstInit
-
-felix.log.level=1
-
-org.osgi.framework.bootdelegation=sun.reflect
-
-felix.auto.install=  \
-file:modules/weld-osgi-core-api-${project.version}.jar \
-file:modules/weld-osgi-core-spi-${project.version}.jar \
-file:modules/weld-osgi-core-mandatory-${project.version}.jar \
-file:modules/weld-osgi-paint-api-${project.version}.jar  \
-file:modules/weld-osgi-paint-core-${project.version}.jar \
-file:modules/weld-osgi-paint-triangle-${project.version}.jar  \
-file:modules/weld-osgi-paint-square-${project.version}.jar  \
-file:modules/weld-osgi-calculator-api-${project.version}.jar  \
-file:modules/weld-osgi-calculator-core-${project.version}.jar  \
-file:modules/weld-osgi-calculator-log-${project.version}.jar  \
-file:modules/weld-osgi-calculator-divide-${project.version}.jar  \
-file:modules/weld-osgi-calculator-minus-${project.version}.jar  \
-file:modules/weld-osgi-calculator-plus-${project.version}.jar  \
-file:modules/weld-osgi-calculator-times-${project.version}.jar  \
-file:modules/weld-osgi-web-api-${project.version}.jar  \
-file:modules/weld-osgi-web-fwk-${project.version}.jar \
-file:modules/weld-osgi-web-france-${project.version}.jar  \
-file:modules/weld-osgi-web-spain-${project.version}.jar  \
-file:modules/weld-osgi-web-england-${project.version}.jar  \
-file:modules/weld-osgi-web-app-${project.version}.jar  \
-file:modules/weld-osgi-standalone-${project.version}.jar  \
-file:modules/jsr311-api-1.1.jar \
-file:modules/org.apache.felix.gogo.commands-0.4.0.jar  \
-file:modules/org.apache.felix.gogo.runtime-0.4.0.jar
-
-felix.auto.start= \
-file:modules/weld-osgi-core-extension-${project.version}.jar \
-file:modules/weld-osgi-core-integration-${project.version}.jar \
-file:modules/org.apache.felix.configadmin-1.2.8.jar \
-file:modules/org.apache.felix.http.bundle-2.0.4.jar \
-file:modules/org.apache.felix.log-1.0.0.jar \
-file:modules/org.apache.felix.shell-1.0.2.jar \
-file:modules/org.apache.felix.shell.tui-1.0.2.jar \
-file:modules/org.apache.felix.bundlerepository-1.2.1.jar
-
-org.osgi.service.http.port=9000
-org.apache.felix.http.whiteboardEnabled=true
-org.apache.felix.http.jettyEnabled=true
-org.apache.felix.http=true
-
-osgi.shell.telnet=on
-obr.repository.url=http://felix.apache.org/obr/releases.xml",2012-10-12T10:31:09Z,144
"@@ -0,0 +1,51 @@
+-init
+-launch
+
+-F org.osgi.framework.storage.clean=onFirstInit
+-F felix.log.level=1
+-F org.osgi.framework.bootdelegation=sun.reflect
+
+-install modules/weld-osgi-core-api-${project.version}.jar
+-install modules/weld-osgi-core-spi-${project.version}.jar
+-install modules/weld-osgi-core-mandatory-${project.version}.jar
+-install modules/weld-osgi-paint-api-${project.version}.jar
+-install modules/weld-osgi-paint-core-${project.version}.jar
+-install modules/weld-osgi-paint-triangle-${project.version}.jar
+-install modules/weld-osgi-paint-square-${project.version}.jar
+-install modules/weld-osgi-calculator-api-${project.version}.jar
+-install modules/weld-osgi-calculator-core-${project.version}.jar
+-install modules/weld-osgi-calculator-log-${project.version}.jar
+-install modules/weld-osgi-calculator-divide-${project.version}.jar
+-install modules/weld-osgi-calculator-minus-${project.version}.jar
+-install modules/weld-osgi-calculator-plus-${project.version}.jar
+-install modules/weld-osgi-calculator-times-${project.version}.jar
+-install modules/weld-osgi-web-api-${project.version}.jar
+-install modules/weld-osgi-web-fwk-${project.version}.jar
+-install modules/weld-osgi-web-france-${project.version}.jar
+-install modules/weld-osgi-web-spain-${project.version}.jar
+-install modules/weld-osgi-web-england-${project.version}.jar
+-install modules/weld-osgi-web-app-${project.version}.jar
+-install modules/weld-osgi-standalone-${project.version}.jar
+-install modules/groovy-all-1.8.0-rc-3.jar
+-install modules/jsr311-api-1.1.jar
+-install modules/org.apache.felix.gogo.commands-0.4.0.jar
+-install modules/org.apache.felix.gogo.runtime-0.4.0.jar
+-install modules/org.osgi.compendium-4.2.0.jar
+
+
+-istart modules/weld-osgi-core-extension-${project.version}.jar
+-istart modules/weld-osgi-core-integration-${project.version}.jar
+-istart modules/org.apache.felix.configadmin-1.2.8.jar
+-istart modules/org.apache.felix.http.bundle-2.0.4.jar
+-istart modules/org.apache.felix.log-1.0.0.jar
+-istart modules/org.apache.felix.shell-1.0.2.jar
+-istart modules/org.apache.felix.shell.tui-1.0.2.jar
+-istart modules/org.apache.felix.bundlerepository-1.2.1.jar
+
+-F org.osgi.service.http.port=9000
+-F org.apache.felix.http.whiteboardEnabled=true
+-F org.apache.felix.http.jettyEnabled=true
+-F org.apache.felix.http=true
+
+-F osgi.shell.telnet=on
+-F obr.repository.url=http://felix.apache.org/obr/releases.xml
\ No newline at end of file",2012-10-12T10:31:09Z,145
"@@ -1,150 +1,150 @@
 
 <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <modelVersion>4.0.0</modelVersion>
-   <groupId>org.jboss.weld.osgi</groupId>
-   <artifactId>weld-osgi-parent</artifactId>
-   <name>Weld OSGi (Parent)</name>
-   <packaging>pom</packaging>
-
-   <parent>
-      <groupId>org.jboss.weld</groupId>
-      <artifactId>weld-core-parent</artifactId>
-      <relativePath>../../parent/pom.xml</relativePath>
-      <version>1.1.3-SNAPSHOT</version>
-   </parent>
-
-   <licenses>
-      <license>
-         <name>Apache License, Version 2.0</name>
-         <distribution>repo</distribution>
-         <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
-      </license>
-   </licenses>
-   <url>http://www.seamframework.org/Weld</url>
-
-   <developers>
-      <developer>
-         <name>Mathieu Ancelin</name>
-         <email>mathieu.ancelin@serli.com</email>
-      </developer>
-      <developer>
-         <name>Matthieu Clochard</name>
-         <email>matthieu.clochard@serli.com</email>
-      </developer>
-   </developers>
-
-   <modules>
-      <module>core</module>
-      <module>examples</module>
-   </modules>
-
-   <profiles>
-      <profile>
-         <id>weld-osgi-docs</id>
-         <modules>
-            <module>docs</module>
-         </modules>
-      </profile>
-      <profile>
-         <id>weld-osgi-tests</id>
-         <modules>
-            <module>core</module>
-            <module>tests</module>
-         </modules>
-      </profile>
-   </profiles>
-
-   <description>
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.jboss.weld.osgi</groupId>
+    <artifactId>weld-osgi-parent</artifactId>
+    <name>Weld OSGi (Parent)</name>
+    <packaging>pom</packaging>
+
+    <parent>
+        <groupId>org.jboss.weld</groupId>
+        <artifactId>weld-core-parent</artifactId>
+        <relativePath>../../parent/pom.xml</relativePath>
+        <version>1.1.3-SNAPSHOT</version>
+    </parent>
+
+    <licenses>
+        <license>
+            <name>Apache License, Version 2.0</name>
+            <distribution>repo</distribution>
+            <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
+        </license>
+    </licenses>
+    <url>http://www.seamframework.org/Weld</url>
+
+    <developers>
+        <developer>
+            <name>Mathieu Ancelin</name>
+            <email>mathieu.ancelin@serli.com</email>
+        </developer>
+        <developer>
+            <name>Matthieu Clochard</name>
+            <email>matthieu.clochard@serli.com</email>
+        </developer>
+    </developers>
+
+    <modules>
+        <module>core</module>
+        <module>examples</module>
+    </modules>
+
+    <profiles>
+        <profile>
+            <id>weld-osgi-docs</id>
+            <modules>
+                <module>docs</module>
+            </modules>
+        </profile>
+        <profile>
+            <id>weld-osgi-tests</id>
+            <modules>
+                <module>core</module>
+                <module>tests</module>
+            </modules>
+        </profile>
+    </profiles>
+
+    <description>
       Support for Weld in OSGi Containers
-   </description>
-
-   <properties>
-      <osgi.version>4.2.0</osgi.version>
-      <javax.inject.version>1</javax.inject.version>
-      <javax.el.version>2.2</javax.el.version>
-      <jsr250.api>1.0</jsr250.api>
-      <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
-      <weld.api.version>1.2-SNAPSHOT</weld.api.version>
-      <slf4j.version>1.6.1</slf4j.version>
-      <logback.version>0.9.29</logback.version>
-   </properties>
-
-   <dependencyManagement>
-      <dependencies>
-
-         <dependency>
-            <groupId>org.osgi</groupId>
-            <artifactId>org.osgi.core</artifactId>
-            <version>${osgi.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.osgi</groupId>
-            <artifactId>org.osgi.compendium</artifactId>
-            <version>${osgi.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.jboss.weld</groupId>
-            <artifactId>weld-api</artifactId>
-            <version>${weld.api.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.jboss.weld</groupId>
-            <artifactId>weld-spi</artifactId>
-            <version>${weld.api.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>javax.inject</groupId>
-            <artifactId>javax.inject</artifactId>
-            <version>${javax.inject.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>javax.el</groupId>
-            <artifactId>el-api</artifactId>
-            <version>${javax.el.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>javax.annotation</groupId>
-            <artifactId>jsr250-api</artifactId>
-            <version>${jsr250.api}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.jboss.interceptor</groupId>
-            <artifactId>jboss-interceptor-api</artifactId>
-            <version>${jboss.interceptors.api.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-ext</artifactId>
-            <version>${slf4j.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-api</artifactId>
-            <version>${slf4j.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>ch.qos.logback</groupId>
-            <artifactId>logback-core</artifactId>
-            <version>${logback.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>ch.qos.logback</groupId>
-            <artifactId>logback-classic</artifactId>
-            <version>${logback.version}</version>
-         </dependency>
-
-      </dependencies>
-   </dependencyManagement>
+    </description>
+
+    <properties>
+        <osgi.version>4.2.0</osgi.version>
+        <javax.inject.version>1</javax.inject.version>
+        <javax.el.version>2.2</javax.el.version>
+        <jsr250.api>1.0</jsr250.api>
+        <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
+        <weld.api.version>1.2-SNAPSHOT</weld.api.version>
+        <slf4j.version>1.6.1</slf4j.version>
+        <logback.version>0.9.29</logback.version>
+    </properties>
+    
+    <dependencyManagement>
+        <dependencies>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.core</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.compendium</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld</groupId>
+                <artifactId>weld-api</artifactId>
+                <version>${weld.api.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld</groupId>
+                <artifactId>weld-spi</artifactId>
+                <version>${weld.api.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.inject</groupId>
+                <artifactId>javax.inject</artifactId>
+                <version>${javax.inject.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.el</groupId>
+                <artifactId>el-api</artifactId>
+                <version>${javax.el.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.annotation</groupId>
+                <artifactId>jsr250-api</artifactId>
+                <version>${jsr250.api}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.interceptor</groupId>
+                <artifactId>jboss-interceptor-api</artifactId>
+                <version>${jboss.interceptors.api.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.slf4j</groupId>
+                <artifactId>slf4j-ext</artifactId>
+                <version>${slf4j.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.slf4j</groupId>
+                <artifactId>slf4j-api</artifactId>
+                <version>${slf4j.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-core</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-classic</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
+        </dependencies>
+    </dependencyManagement>
 
 </project>",2012-10-12T10:31:09Z,146
"@@ -0,0 +1,4 @@
+#!/bin/sh
+
+cd ./examples/container-knopflerfish/target/weld-osgi-container-knopflerfish-1.1.3-SNAPSHOT-all/weld-osgi-container-knopflerfish-1.1.3-SNAPSHOT/
+java -jar knopflerfish.jar -xargs conf/config.xargs",2012-10-12T10:31:09Z,147
"@@ -48,13 +48,10 @@ public static void waitForEnvironment(BundleContext context) throws InterruptedE
         while(!ready) {
             ready = true;
             for(Bundle b : context.getBundles()) {
-                System.out.println(""wait for bundle "" + b.getSymbolicName());
                 if(b.getState() != Bundle.ACTIVE) {
                     ready = false;
                     break;
                 }
-                System.out.println(""bundle "" + b.getSymbolicName() + "" is ready"");
-                Thread.sleep(500);
             }
             Thread.sleep(500);
         }",2012-10-12T10:31:09Z,148
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
@@ -29,18 +46,15 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-extension</artifactId>
-            <version>${project.version}</version>
         </dependency>
         <dependency>
             <groupId>javax</groupId>
             <artifactId>javaee-web-api</artifactId>
-            <version>6.0</version>
             <scope>provided</scope>
         </dependency>
         <dependency>
             <groupId>org.osgi</groupId>
             <artifactId>org.osgi.core</artifactId>
-            <version>4.2.0</version>
             <scope>provided</scope>
         </dependency>
 ",2012-10-12T10:31:59Z,149
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
@@ -39,13 +56,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>",2012-10-12T10:31:59Z,150
"@@ -46,19 +46,16 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-extension</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>",2012-10-12T10:31:59Z,138
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
@@ -34,7 +51,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,151
"@@ -75,85 +75,4 @@
         Support for Weld in OSGi Containers
     </description>
 
-    <properties>
-        <osgi.version>4.2.0</osgi.version>
-        <javax.inject.version>1</javax.inject.version>
-        <javax.el.version>2.2</javax.el.version>
-        <jsr250.api>1.0</jsr250.api>
-        <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
-        <logback.version>0.9.29</logback.version>
-    </properties>
-
-    <dependencyManagement>
-        <dependencies>
-
-            <dependency>
-                <groupId>org.osgi</groupId>
-                <artifactId>org.osgi.core</artifactId>
-                <version>${osgi.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.osgi</groupId>
-                <artifactId>org.osgi.compendium</artifactId>
-                <version>${osgi.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.jboss.weld</groupId>
-                <artifactId>weld-api</artifactId>
-                <version>${weld.api.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.jboss.weld</groupId>
-                <artifactId>weld-spi</artifactId>
-                <version>${weld.api.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>javax.inject</groupId>
-                <artifactId>javax.inject</artifactId>
-                <version>${javax.inject.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>javax.el</groupId>
-                <artifactId>el-api</artifactId>
-                <version>${javax.el.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>javax.annotation</groupId>
-                <artifactId>jsr250-api</artifactId>
-                <version>${jsr250.api}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.slf4j</groupId>
-                <artifactId>slf4j-ext</artifactId>
-                <version>${slf4j.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.slf4j</groupId>
-                <artifactId>slf4j-api</artifactId>
-                <version>${slf4j.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>ch.qos.logback</groupId>
-                <artifactId>logback-core</artifactId>
-                <version>${logback.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>ch.qos.logback</groupId>
-                <artifactId>logback-classic</artifactId>
-                <version>${logback.version}</version>
-            </dependency>
-
-        </dependencies>
-    </dependencyManagement>
-
 </project>",2012-10-12T10:31:59Z,146
"@@ -58,7 +58,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,152
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,13 +58,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,153
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,13 +58,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,154
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -46,13 +63,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,155
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">",2012-10-12T10:31:59Z,156
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,7 +58,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,157
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">",2012-10-12T10:31:59Z,158
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,7 +58,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-innerscanner</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,159
"@@ -33,11 +33,6 @@
 
     <description>Integration tests launcher for Weld-OSGi</description>
 
-    <properties>
-        <version.pax.exam>2.5.0</version.pax.exam>
-        <version.org.apache.felix>4.0.3</version.org.apache.felix>
-    </properties>
-
     <url>http://www.seamframework.org/Weld</url>
     <licenses>
         <license>
@@ -69,28 +64,24 @@
         <dependency>
             <groupId>org.ops4j.pax.exam</groupId>
             <artifactId>pax-exam-junit4</artifactId>
-            <version>${version.pax.exam}</version>
             <scope>test</scope>
         </dependency>
 
         <dependency>
             <groupId>org.ops4j.pax.exam</groupId>
             <artifactId>pax-exam-container-native</artifactId>
-            <version>${version.pax.exam}</version>
             <scope>test</scope>
         </dependency>
 
         <dependency>
             <groupId>org.ops4j.pax.exam</groupId>
             <artifactId>pax-exam-link-mvn</artifactId>
-            <version>${version.pax.exam}</version>
             <scope>test</scope>
         </dependency>
 
         <dependency>
             <groupId>org.apache.felix</groupId>
             <artifactId>org.apache.felix.framework</artifactId>
-            <version>${version.org.apache.felix}</version>
             <scope>test</scope>
         </dependency>
 
@@ -107,37 +98,31 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-extension</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-integration</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld</groupId>
             <artifactId>weld-core</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.se</groupId>
             <artifactId>weld-se-core</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
@@ -208,49 +193,41 @@
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle2</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle3</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-importing</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-scanner</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-innerscanner</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-cdi-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-life-cycle</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,160
"@@ -1,4 +1,5 @@
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
     <modelVersion>4.0.0</modelVersion>
     <groupId>org.jboss.weld</groupId>
     <artifactId>weld-core-parent</artifactId>
@@ -69,6 +70,17 @@
         <selenium.maven.plugin.version>1.0.1</selenium.maven.plugin.version>
         <slf4j.version>1.6.1</slf4j.version>
         <testng.version>5.10</testng.version>
+        <osgi.version>4.2.0</osgi.version>
+        <!-- Weld OSGi deps -->
+        <javax.inject.version>1</javax.inject.version>
+        <javax.web.version>6.0</javax.web.version>
+        <javax.el.version>2.2</javax.el.version>
+        <jsr250.api>1.0</jsr250.api>
+        <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
+        <logback.version>0.9.29</logback.version>
+        <pax.exam.version>2.5.0</pax.exam.version>
+        <org.apache.felix.version>4.0.3</org.apache.felix.version>
+        <!-- Weld API -->
         <weld.api.version>1.2.0.Beta1</weld.api.version>
     </properties>
 
@@ -215,12 +227,6 @@
                 <version>${arquillian.version}</version>
             </dependency>
 
-            <dependency>
-                <groupId>org.jboss.arquillian.container</groupId>
-                <artifactId>arquillian-container-test-spi</artifactId>
-                <version>${arquillian.version}</version>
-            </dependency>
-
             <dependency>
                 <groupId>org.jboss.arquillian.container</groupId>
                 <artifactId>arquillian-weld-ee-embedded-1.1</artifactId>
@@ -357,8 +363,8 @@
             </dependency>
 
             <dependency>
-	            <groupId>org.jboss.spec.javax.ws.rs</groupId>
-	            <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
+                <groupId>org.jboss.spec.javax.ws.rs</groupId>
+                <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
                 <version>${jboss.spec.jaxrs.version}</version>
             </dependency>
 
@@ -448,6 +454,154 @@
                 <version>${project.version}</version>
             </dependency>
 
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-api</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-extension</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-spi</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-integration</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-bundle1</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-bundle2</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-bundle3</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-importing</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-scanner</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-innerscanner</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-cdi-spi</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-life-cycle</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.ops4j.pax.exam</groupId>
+                <artifactId>pax-exam-junit4</artifactId>
+                <version>${pax.exam.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.ops4j.pax.exam</groupId>
+                <artifactId>pax-exam-container-native</artifactId>
+                <version>${pax.exam.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.ops4j.pax.exam</groupId>
+                <artifactId>pax-exam-link-mvn</artifactId>
+                <version>${pax.exam.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.apache.felix</groupId>
+                <artifactId>org.apache.felix.framework</artifactId>
+                <version>${org.apache.felix.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.core</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.compendium</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.inject</groupId>
+                <artifactId>javax.inject</artifactId>
+                <version>${javax.inject.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax</groupId>
+                <artifactId>javaee-web-api</artifactId>
+                <version>${javax.web.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.el</groupId>
+                <artifactId>el-api</artifactId>
+                <version>${javax.el.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.annotation</groupId>
+                <artifactId>jsr250-api</artifactId>
+                <version>${jsr250.api}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-core</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-classic</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
             <dependency>
                 <groupId>org.jboss.shrinkwrap</groupId>
                 <artifactId>shrinkwrap-impl-base</artifactId>
@@ -536,7 +690,7 @@
                         <configLocation>weld-checkstyle/checkstyle.xml</configLocation>
                         <consoleOutput>true</consoleOutput>
                         <failsOnError>true</failsOnError>
-                        <useFile />
+                        <useFile/>
                     </configuration>
                     <dependencies>
                         <dependency>
@@ -574,7 +728,7 @@
                                         </goals>
                                     </pluginExecutionFilter>
                                     <action>
-                                        <ignore />
+                                        <ignore/>
                                     </action>
                                 </pluginExecution>
                             </pluginExecutions>
@@ -586,10 +740,10 @@
                     <artifactId>maven-compiler-plugin</artifactId>
                     <version>2.3.2</version>
                     <configuration>
-                       <source>1.6</source>
-                       <target>1.6</target>
+                        <source>1.6</source>
+                        <target>1.6</target>
                     </configuration>
-                 </plugin>
+                </plugin>
             </plugins>
 
         </pluginManagement>",2012-10-12T10:31:59Z,161
"@@ -10,12 +10,16 @@
          Weld allows you to exclude classes in your archive from scanning, having
          container lifecycle events fired, and being deployed as beans.
       </para>
-      
+
       <para>
          In this tutorial, we'll explore this feature via an example; a more formal specification can be found in the
          xsd, located at <ulink url=""http://jboss.org/schema/weld/beans_1_1.xsd"">http://jboss.org/schema/weld/beans_1_1.xsd</ulink>.
       </para>
+
+      <para>All the configuration is done in the <filename>beans.xml</filename> file. For more information see <xref linkend=""packaging""/></para>
       
+      <example>
+        <title>beans.xml</title>
       <programlisting role=""XML""><![CDATA[<?xml version=""1.0"" encoding=""UTF-8""?>
 <beans xmlns=""http://java.sun.com/xml/ns/javaee"" 
        xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" 
@@ -54,6 +58,7 @@
     </weld:scan>
     
 </beans>]]></programlisting>
+      </example>
 
       <para>
          In this example we show the most common use cases for exercising fine control over which classes",2012-12-20T08:52:05Z,170
"@@ -259,7 +259,7 @@ public void sendMessage(String price) {
     
    </section>
   
-   <section>
+   <section id=""packaging"">
       <title>Packaging and deployment</title>
     
       <para>",2012-12-20T08:52:05Z,171
"@@ -22,16 +22,10 @@
  */
 package org.jboss.weld.context;
 
-import org.jboss.weld.Container;
-import org.jboss.weld.context.beanstore.BoundBeanStore;
-import org.jboss.weld.context.beanstore.ConversationNamingScheme;
-import org.jboss.weld.context.beanstore.NamingScheme;
-import org.jboss.weld.context.conversation.ConversationIdGenerator;
-import org.jboss.weld.context.conversation.ConversationImpl;
-import org.jboss.weld.logging.messages.ConversationMessage;
+import static org.jboss.weld.context.conversation.ConversationIdGenerator.CONVERSATION_ID_GENERATOR_ATTRIBUTE_NAME;
+import static org.jboss.weld.logging.messages.ConversationMessage.NO_CONVERSATION_FOUND_TO_RESTORE;
+import static org.jboss.weld.util.reflection.Reflections.cast;
 
-import javax.enterprise.context.ConversationScoped;
-import javax.enterprise.inject.Instance;
 import java.lang.annotation.Annotation;
 import java.util.Collection;
 import java.util.HashMap;
@@ -40,16 +34,24 @@
 import java.util.Map.Entry;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicReference;
+import javax.enterprise.context.ConversationScoped;
+import javax.enterprise.inject.Instance;
 
-import static org.jboss.weld.context.conversation.ConversationIdGenerator.CONVERSATION_ID_GENERATOR_ATTRIBUTE_NAME;
-import static org.jboss.weld.util.reflection.Reflections.cast;
+import org.jboss.weld.Container;
+import org.jboss.weld.context.beanstore.BoundBeanStore;
+import org.jboss.weld.context.beanstore.ConversationNamingScheme;
+import org.jboss.weld.context.beanstore.NamingScheme;
+import org.jboss.weld.context.conversation.ConversationIdGenerator;
+import org.jboss.weld.context.conversation.ConversationImpl;
+import org.jboss.weld.logging.messages.ConversationMessage;
 
 
 /**
  * The base of the conversation context, which can use a variety of storage
  * forms
  *
  * @author Pete Muir
+ * @author George Sapountzis
  */
 public abstract class AbstractConversationContext<R, S> extends AbstractBoundContext<R> implements ConversationContext {
 
@@ -173,6 +175,59 @@ public void activate() {
         this.activate(null);
     }
 
+    protected void associateRequest() {
+        ManagedConversation conversation = new ConversationImpl(conversationContexts);
+        setRequestAttribute(getRequest(), CURRENT_CONVERSATION_ATTRIBUTE_NAME, conversation);
+
+        // Set a temporary bean store, this will be attached at the end of the request if needed
+        NamingScheme namingScheme = new ConversationNamingScheme(ConversationContext.class.getName(), ""transient"");
+        setBeanStore(createRequestBeanStore(namingScheme, getRequest()));
+        setRequestAttribute(getRequest(), ConversationNamingScheme.PARAMETER_NAME, namingScheme);
+    }
+
+    protected void associateRequest(String cid) {
+        ManagedConversation conversation = getConversation(cid);
+        setRequestAttribute(getRequest(), CURRENT_CONVERSATION_ATTRIBUTE_NAME, conversation);
+
+        NamingScheme namingScheme = new ConversationNamingScheme(ConversationContext.class.getName(), cid);
+        setBeanStore(createRequestBeanStore(namingScheme, getRequest()));
+        getBeanStore().attach();
+    }
+
+    public void activate(String cid) {
+        if (getBeanStore() == null) {
+            if (!isAssociated()) {
+                throw new IllegalStateException(""Must call associate() before calling activate()"");
+            }
+            // Activate the context
+            super.setActive(true);
+
+            // Attach the conversation
+            if (cid != null) {
+                ManagedConversation conversation = getConversation(cid);
+                if (conversation != null) {
+                    boolean lock = conversation.lock(getConcurrentAccessTimeout());
+                    if (lock) {
+                        associateRequest(cid);
+                    } else {
+                        // Associate the request with a new transient conversation
+                        associateRequest();
+                        throw new BusyConversationException(ConversationMessage.CONVERSATION_LOCK_TIMEDOUT, cid);
+                    }
+                } else {
+                    // CDI 6.7.4 we must activate a new transient conversation before we throw the exception
+                    associateRequest();
+                    // Make sure that the conversation already exists
+                    throw new NonexistentConversationException(NO_CONVERSATION_FOUND_TO_RESTORE, cid);
+                }
+            } else {
+                associateRequest();
+            }
+        } else {
+            throw new IllegalStateException(""Context is already active"");
+        }
+    }
+
     @Override
     public void deactivate() {
         // Disassociate from the current conversation
@@ -224,39 +279,6 @@ public void deactivate() {
         }
     }
 
-    public void activate(String cid) {
-        if (getBeanStore() == null) {
-            if (!isAssociated()) {
-                throw new IllegalStateException(""Must call associate() before calling activate()"");
-            }
-            // Activate the context
-            super.setActive(true);
-
-            // Attach the conversation
-            if (cid == null || getConversation(cid) == null) {
-                ManagedConversation conversation = new ConversationImpl(conversationContexts);
-                setRequestAttribute(getRequest(), CURRENT_CONVERSATION_ATTRIBUTE_NAME, conversation);
-                // Set a temporary bean store, this will be attached at the end of
-                // the request if needed
-                NamingScheme namingScheme = new ConversationNamingScheme(ConversationContext.class.getName(), ""transient"");
-                setBeanStore(createRequestBeanStore(namingScheme, getRequest()));
-                setRequestAttribute(getRequest(), ConversationNamingScheme.PARAMETER_NAME, namingScheme);
-            } else {
-                setRequestAttribute(getRequest(), CURRENT_CONVERSATION_ATTRIBUTE_NAME, getConversation(cid));
-                if (getCurrentConversation().lock(getConcurrentAccessTimeout())) {
-                    NamingScheme namingScheme = new ConversationNamingScheme(ConversationContext.class.getName(), cid);
-                    setBeanStore(createRequestBeanStore(namingScheme, getRequest()));
-                    getBeanStore().attach();
-                } else {
-                    throw new BusyConversationException(ConversationMessage.CONVERSATION_LOCK_TIMEDOUT, cid);
-                }
-            }
-
-        } else {
-            throw new IllegalStateException(""Context is already active"");
-        }
-    }
-
     @Override
     public void invalidate() {
         for (ManagedConversation conversation : getConversations()) {",2011-10-31T16:08:54Z,172
"@@ -28,13 +28,11 @@
 import static org.jboss.weld.logging.Category.JSF;
 import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
 import static org.jboss.weld.logging.messages.ConversationMessage.CLEANING_UP_TRANSIENT_CONVERSATION;
-import static org.jboss.weld.logging.messages.ConversationMessage.NO_CONVERSATION_FOUND_TO_RESTORE;
 import static org.jboss.weld.logging.messages.JsfMessage.CLEANING_UP_CONVERSATION;
 import static org.jboss.weld.logging.messages.JsfMessage.FOUND_CONVERSATION_FROM_REQUEST;
 import static org.jboss.weld.logging.messages.JsfMessage.RESUMING_CONVERSATION;
 
 import java.util.Map;
-
 import javax.enterprise.context.spi.Context;
 import javax.enterprise.inject.Instance;
 import javax.faces.context.FacesContext;
@@ -45,8 +43,6 @@
 
 import org.jboss.weld.Container;
 import org.jboss.weld.context.ConversationContext;
-import org.jboss.weld.context.ManagedConversation;
-import org.jboss.weld.context.NonexistentConversationException;
 import org.jboss.weld.context.http.HttpConversationContext;
 import org.slf4j.cal10n.LocLogger;
 
@@ -102,13 +98,6 @@ private void activateConversations(FacesContext facesContext) {
         HttpConversationContext conversationContext = instance().select(HttpConversationContext.class).get();
         String cid = getConversationId(facesContext, conversationContext);
         log.debug(RESUMING_CONVERSATION, cid);
-        ManagedConversation conversation = conversationContext.getConversation(cid);
-        if (cid != null && conversation == null) {
-            // CDI 6.7.4 we must activate a new transient conversation before we throw the exception
-            conversationContext.activate(null);
-            // Make sure that the conversation already exists
-            throw new NonexistentConversationException(NO_CONVERSATION_FOUND_TO_RESTORE, cid);
-        }
 
         /*
          * Don't try to reactivate the ConversationContext if we have already activated it for this request",2011-10-31T16:08:54Z,173
"@@ -1,5 +1,5 @@
 # Container a number of properties associated with installing Weld into JBoss AS and running the TCK in JBoss AS
-#jboss.home=/Users/alesj/projects/as7/as/build/target/jboss-as-7.1.0.Alpha1-SNAPSHOT
+#jboss.home=/Users/alesj/java_lib/jboss-as-7.0.2.Final
 org.jboss.testharness.container.javaOpts=-Xms128m -Xmx512m -XX:MaxPermSize=256m -Dorg.jboss.resolver.warning=true -Dsun.rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000
 
 # time to allow before attempting to restart JBoss AS",2011-10-31T16:08:54Z,174
"@@ -235,7 +235,7 @@
                                 <suiteXmlFile>src/test/resources/tck-tests.xml</suiteXmlFile>
                             </suiteXmlFiles>
                             <systemPropertyVariables>
-                                <jboss.server.config.file.name>standalone.xml</jboss.server.config.file.name>
+                                <jboss.server.config.file.name>standalone-preview.xml</jboss.server.config.file.name>
                             </systemPropertyVariables>
                             <systemProperties>
                                 <property>
@@ -301,7 +301,7 @@
                                 <suiteXmlFile>src/test/resources/tck-tests.xml</suiteXmlFile>
                             </suiteXmlFiles>
                             <systemPropertyVariables>
-                                <jboss.server.config.file.name>standalone.xml</jboss.server.config.file.name>
+                                <jboss.server.config.file.name>standalone-preview.xml</jboss.server.config.file.name>
                             </systemPropertyVariables>
                             <systemProperties>
                                 <property>",2011-10-31T16:08:54Z,175
"@@ -22,16 +22,10 @@
  */
 package org.jboss.weld.context;
 
-import org.jboss.weld.Container;
-import org.jboss.weld.context.beanstore.BoundBeanStore;
-import org.jboss.weld.context.beanstore.ConversationNamingScheme;
-import org.jboss.weld.context.beanstore.NamingScheme;
-import org.jboss.weld.context.conversation.ConversationIdGenerator;
-import org.jboss.weld.context.conversation.ConversationImpl;
-import org.jboss.weld.logging.messages.ConversationMessage;
+import static org.jboss.weld.context.conversation.ConversationIdGenerator.CONVERSATION_ID_GENERATOR_ATTRIBUTE_NAME;
+import static org.jboss.weld.logging.messages.ConversationMessage.NO_CONVERSATION_FOUND_TO_RESTORE;
+import static org.jboss.weld.util.reflection.Reflections.cast;
 
-import javax.enterprise.context.ConversationScoped;
-import javax.enterprise.inject.Instance;
 import java.lang.annotation.Annotation;
 import java.util.Collection;
 import java.util.HashMap;
@@ -40,16 +34,24 @@
 import java.util.Map.Entry;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicReference;
+import javax.enterprise.context.ConversationScoped;
+import javax.enterprise.inject.Instance;
 
-import static org.jboss.weld.context.conversation.ConversationIdGenerator.CONVERSATION_ID_GENERATOR_ATTRIBUTE_NAME;
-import static org.jboss.weld.util.reflection.Reflections.cast;
+import org.jboss.weld.Container;
+import org.jboss.weld.context.beanstore.BoundBeanStore;
+import org.jboss.weld.context.beanstore.ConversationNamingScheme;
+import org.jboss.weld.context.beanstore.NamingScheme;
+import org.jboss.weld.context.conversation.ConversationIdGenerator;
+import org.jboss.weld.context.conversation.ConversationImpl;
+import org.jboss.weld.logging.messages.ConversationMessage;
 
 
 /**
  * The base of the conversation context, which can use a variety of storage
  * forms
  *
  * @author Pete Muir
+ * @author George Sapountzis
  */
 public abstract class AbstractConversationContext<R, S> extends AbstractBoundContext<R> implements ConversationContext {
 
@@ -173,6 +175,59 @@ public void activate() {
         this.activate(null);
     }
 
+    protected void associateRequest() {
+        ManagedConversation conversation = new ConversationImpl(conversationContexts);
+        setRequestAttribute(getRequest(), CURRENT_CONVERSATION_ATTRIBUTE_NAME, conversation);
+
+        // Set a temporary bean store, this will be attached at the end of the request if needed
+        NamingScheme namingScheme = new ConversationNamingScheme(ConversationContext.class.getName(), ""transient"");
+        setBeanStore(createRequestBeanStore(namingScheme, getRequest()));
+        setRequestAttribute(getRequest(), ConversationNamingScheme.PARAMETER_NAME, namingScheme);
+    }
+
+    protected void associateRequest(String cid) {
+        ManagedConversation conversation = getConversation(cid);
+        setRequestAttribute(getRequest(), CURRENT_CONVERSATION_ATTRIBUTE_NAME, conversation);
+
+        NamingScheme namingScheme = new ConversationNamingScheme(ConversationContext.class.getName(), cid);
+        setBeanStore(createRequestBeanStore(namingScheme, getRequest()));
+        getBeanStore().attach();
+    }
+
+    public void activate(String cid) {
+        if (getBeanStore() == null) {
+            if (!isAssociated()) {
+                throw new IllegalStateException(""Must call associate() before calling activate()"");
+            }
+            // Activate the context
+            super.setActive(true);
+
+            // Attach the conversation
+            if (cid != null) {
+                ManagedConversation conversation = getConversation(cid);
+                if (conversation != null) {
+                    boolean lock = conversation.lock(getConcurrentAccessTimeout());
+                    if (lock) {
+                        associateRequest(cid);
+                    } else {
+                        // Associate the request with a new transient conversation
+                        associateRequest();
+                        throw new BusyConversationException(ConversationMessage.CONVERSATION_LOCK_TIMEDOUT, cid);
+                    }
+                } else {
+                    // CDI 6.7.4 we must activate a new transient conversation before we throw the exception
+                    associateRequest();
+                    // Make sure that the conversation already exists
+                    throw new NonexistentConversationException(NO_CONVERSATION_FOUND_TO_RESTORE, cid);
+                }
+            } else {
+                associateRequest();
+            }
+        } else {
+            throw new IllegalStateException(""Context is already active"");
+        }
+    }
+
     @Override
     public void deactivate() {
         // Disassociate from the current conversation
@@ -224,39 +279,6 @@ public void deactivate() {
         }
     }
 
-    public void activate(String cid) {
-        if (getBeanStore() == null) {
-            if (!isAssociated()) {
-                throw new IllegalStateException(""Must call associate() before calling activate()"");
-            }
-            // Activate the context
-            super.setActive(true);
-
-            // Attach the conversation
-            if (cid == null || getConversation(cid) == null) {
-                ManagedConversation conversation = new ConversationImpl(conversationContexts);
-                setRequestAttribute(getRequest(), CURRENT_CONVERSATION_ATTRIBUTE_NAME, conversation);
-                // Set a temporary bean store, this will be attached at the end of
-                // the request if needed
-                NamingScheme namingScheme = new ConversationNamingScheme(ConversationContext.class.getName(), ""transient"");
-                setBeanStore(createRequestBeanStore(namingScheme, getRequest()));
-                setRequestAttribute(getRequest(), ConversationNamingScheme.PARAMETER_NAME, namingScheme);
-            } else {
-                setRequestAttribute(getRequest(), CURRENT_CONVERSATION_ATTRIBUTE_NAME, getConversation(cid));
-                if (getCurrentConversation().lock(getConcurrentAccessTimeout())) {
-                    NamingScheme namingScheme = new ConversationNamingScheme(ConversationContext.class.getName(), cid);
-                    setBeanStore(createRequestBeanStore(namingScheme, getRequest()));
-                    getBeanStore().attach();
-                } else {
-                    throw new BusyConversationException(ConversationMessage.CONVERSATION_LOCK_TIMEDOUT, cid);
-                }
-            }
-
-        } else {
-            throw new IllegalStateException(""Context is already active"");
-        }
-    }
-
     @Override
     public void invalidate() {
         for (ManagedConversation conversation : getConversations()) {",2011-10-31T16:08:54Z,172
"@@ -28,13 +28,11 @@
 import static org.jboss.weld.logging.Category.JSF;
 import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
 import static org.jboss.weld.logging.messages.ConversationMessage.CLEANING_UP_TRANSIENT_CONVERSATION;
-import static org.jboss.weld.logging.messages.ConversationMessage.NO_CONVERSATION_FOUND_TO_RESTORE;
 import static org.jboss.weld.logging.messages.JsfMessage.CLEANING_UP_CONVERSATION;
 import static org.jboss.weld.logging.messages.JsfMessage.FOUND_CONVERSATION_FROM_REQUEST;
 import static org.jboss.weld.logging.messages.JsfMessage.RESUMING_CONVERSATION;
 
 import java.util.Map;
-
 import javax.enterprise.context.spi.Context;
 import javax.enterprise.inject.Instance;
 import javax.faces.context.FacesContext;
@@ -45,8 +43,6 @@
 
 import org.jboss.weld.Container;
 import org.jboss.weld.context.ConversationContext;
-import org.jboss.weld.context.ManagedConversation;
-import org.jboss.weld.context.NonexistentConversationException;
 import org.jboss.weld.context.http.HttpConversationContext;
 import org.slf4j.cal10n.LocLogger;
 
@@ -102,13 +98,6 @@ private void activateConversations(FacesContext facesContext) {
         HttpConversationContext conversationContext = instance().select(HttpConversationContext.class).get();
         String cid = getConversationId(facesContext, conversationContext);
         log.debug(RESUMING_CONVERSATION, cid);
-        ManagedConversation conversation = conversationContext.getConversation(cid);
-        if (cid != null && conversation == null) {
-            // CDI 6.7.4 we must activate a new transient conversation before we throw the exception
-            conversationContext.activate(null);
-            // Make sure that the conversation already exists
-            throw new NonexistentConversationException(NO_CONVERSATION_FOUND_TO_RESTORE, cid);
-        }
 
         /*
          * Don't try to reactivate the ConversationContext if we have already activated it for this request",2011-10-31T16:08:54Z,173
"@@ -1,5 +1,5 @@
 # Container a number of properties associated with installing Weld into JBoss AS and running the TCK in JBoss AS
-#jboss.home=/Users/alesj/projects/as7/as/build/target/jboss-as-7.1.0.Alpha1-SNAPSHOT
+#jboss.home=/Users/alesj/java_lib/jboss-as-7.0.2.Final
 org.jboss.testharness.container.javaOpts=-Xms128m -Xmx512m -XX:MaxPermSize=256m -Dorg.jboss.resolver.warning=true -Dsun.rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000
 
 # time to allow before attempting to restart JBoss AS",2011-10-31T16:08:54Z,174
"@@ -235,7 +235,7 @@
                                 <suiteXmlFile>src/test/resources/tck-tests.xml</suiteXmlFile>
                             </suiteXmlFiles>
                             <systemPropertyVariables>
-                                <jboss.server.config.file.name>standalone.xml</jboss.server.config.file.name>
+                                <jboss.server.config.file.name>standalone-preview.xml</jboss.server.config.file.name>
                             </systemPropertyVariables>
                             <systemProperties>
                                 <property>
@@ -301,7 +301,7 @@
                                 <suiteXmlFile>src/test/resources/tck-tests.xml</suiteXmlFile>
                             </suiteXmlFiles>
                             <systemPropertyVariables>
-                                <jboss.server.config.file.name>standalone.xml</jboss.server.config.file.name>
+                                <jboss.server.config.file.name>standalone-preview.xml</jboss.server.config.file.name>
                             </systemPropertyVariables>
                             <systemProperties>
                                 <property>",2011-10-31T16:08:54Z,175
"@@ -16,22 +16,31 @@
  */
 package org.jboss.weld.annotated;
 
+import static org.jboss.weld.logging.Category.BOOTSTRAP;
+import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
 import static org.jboss.weld.logging.messages.MetadataMessage.INVALID_PARAMETER_POSITION;
 import static org.jboss.weld.logging.messages.MetadataMessage.METADATA_SOURCE_RETURNED_NULL;
+import static org.jboss.weld.logging.messages.MetadataMessage.NOT_IN_HIERARCHY;
+import static org.jboss.weld.logging.messages.MetadataMessage.NO_CONSTRUCTOR;
+
+import java.util.HashSet;
+import java.util.Set;
 
 import javax.enterprise.inject.spi.Annotated;
 import javax.enterprise.inject.spi.AnnotatedMember;
 import javax.enterprise.inject.spi.AnnotatedParameter;
 import javax.enterprise.inject.spi.AnnotatedType;
 
 import org.jboss.weld.exceptions.IllegalArgumentException;
+import org.slf4j.cal10n.LocLogger;
 
 /**
  * Validates that methods of an {@link Annotated} implementation return sane values.
  * @author Jozef Hartinger
  *
  */
 public class AnnotatedTypeValidator {
+    private static final LocLogger log = loggerFactory().getLogger(BOOTSTRAP);
 
     private AnnotatedTypeValidator() {
     }
@@ -62,11 +71,40 @@ public static void validateAnnotatedType(AnnotatedType<?> type) {
         checkNotNull(type.getFields(), ""getFields()"", type);
         checkNotNull(type.getConstructors(), ""getConstructors()"", type);
         checkNotNull(type.getMethods(), ""getMethods()"", type);
+        checkSensibility(type);
     }
 
     private static void checkNotNull(Object expression, String methodName, Object target) {
         if (expression == null) {
             throw new IllegalArgumentException(METADATA_SOURCE_RETURNED_NULL, methodName, target);
         }
     }
+
+    /**
+     * Checks if the given AnnotatedType is sensible, otherwise provides warnings.
+     */
+    private static void checkSensibility(AnnotatedType<?> type) {
+        // check if it has a constructor
+        if (type.getConstructors().isEmpty() && !type.getJavaClass().isInterface()) {
+            log.warn(NO_CONSTRUCTOR, type);
+        }
+
+        Set<Class<?>> hierarchy = new HashSet<Class<?>>();
+        for (Class<?> clazz = type.getJavaClass(); clazz != null; clazz = clazz.getSuperclass()) {
+            hierarchy.add(clazz);
+        }
+
+        checkMembersBelongToHierarchy(type.getConstructors(), hierarchy, type);
+        checkMembersBelongToHierarchy(type.getMethods(), hierarchy, type);
+        checkMembersBelongToHierarchy(type.getFields(), hierarchy, type);
+    }
+
+    private static void checkMembersBelongToHierarchy(Iterable<? extends AnnotatedMember<?>> members, Set<Class<?>> hierarchy, AnnotatedType<?> type) {
+        for (AnnotatedMember<?> member : members) {
+            if (!hierarchy.contains(member.getJavaMember().getDeclaringClass())) {
+                log.warn(NOT_IN_HIERARCHY, member.toString(), type.toString());
+            }
+        }
+    }
+
 }",2013-06-03T14:39:48Z,11
"@@ -51,4 +51,6 @@ public enum MetadataMessage {
     @MessageId(""001113"")NOT_A_SCOPE,
     @MessageId(""001114"")METADATA_SOURCE_RETURNED_NULL,
     @MessageId(""001115"")INVALID_PARAMETER_POSITION,
+    @MessageId(""001116"")NO_CONSTRUCTOR,
+    @MessageId(""001117"")NOT_IN_HIERARCHY;
 }",2013-06-03T14:39:48Z,12
"@@ -16,6 +16,7 @@
  */
 package org.jboss.weld.manager;
 
+import static org.jboss.weld.annotated.AnnotatedTypeValidator.validateAnnotatedType;
 import static org.jboss.weld.logging.Category.BOOTSTRAP;
 import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
 import static org.jboss.weld.logging.messages.BeanManagerMessage.AMBIGUOUS_BEANS_FOR_DEPENDENCY;
@@ -1380,6 +1381,7 @@ public <T> InjectionTargetFactoryImpl<T> getLocalInjectionTargetFactory(Annotate
      */
     @Override
     public <T> InjectionTargetFactoryImpl<T> getInjectionTargetFactory(AnnotatedType<T> type) {
+        validateAnnotatedType(type);
         BeanManagerImpl manager = BeanManagerLookupService.lookupBeanManager(type.getJavaClass(), this);
         return new InjectionTargetFactoryImpl<T>(type, manager);
     }",2013-06-03T14:39:48Z,4
"@@ -16,8 +16,6 @@
  */
 package org.jboss.weld.manager;
 
-import static org.jboss.weld.annotated.AnnotatedTypeValidator.validateAnnotatedType;
-
 import javax.enterprise.inject.spi.AnnotatedType;
 import javax.enterprise.inject.spi.Bean;
 import javax.enterprise.inject.spi.Decorator;
@@ -57,7 +55,6 @@ public class InjectionTargetFactoryImpl<T> implements WeldInjectionTargetFactory
 
     protected InjectionTargetFactoryImpl(AnnotatedType<T> type, BeanManagerImpl manager) {
         this.manager = manager;
-        validateAnnotatedType(type);
         this.type = manager.getServices().get(ClassTransformer.class).getEnhancedAnnotatedType(type, manager.getId());
         this.injectionTargetService = manager.getServices().get(InjectionTargetService.class);
         this.injectionServices = manager.getServices().get(InjectionServices.class);",2013-06-03T14:39:48Z,13
"@@ -14,3 +14,5 @@ TYPES_EMPTY=BeanAttributes.getTypes() may not return an empty set {0}
 NOT_A_SCOPE={0} defined on {1} is not a scope annotation
 METADATA_SOURCE_RETURNED_NULL={0} returned null for {1}
 INVALID_PARAMETER_POSITION=Parameter position {0} of parameter {1} is not valid
+NO_CONSTRUCTOR=AnnotatedType ({0}) without a constructor
+NOT_IN_HIERARCHY=Member ({0}) does not belong to the actual class hierarchy of the annotatedType ({1})",2013-06-03T14:39:48Z,14
"@@ -27,7 +27,7 @@
 import static org.jboss.weld.logging.messages.BeanMessage.ONLY_ONE_SCOPE_ALLOWED;
 import static org.jboss.weld.logging.messages.BeanMessage.PRODUCER_CAST_ERROR;
 import static org.jboss.weld.logging.messages.BeanMessage.PRODUCER_METHOD_WITH_TYPE_VARIABLE_RETURN_TYPE_MUST_BE_DEPENDENT;
-import static org.jboss.weld.logging.messages.BeanMessage.PRODUCER_METHOD_WITH_WILDCARD_RETURN_TYPE_MUST_BE_DEPENDENT;
+import static org.jboss.weld.logging.messages.BeanMessage.PRODUCER_METHOD_CANNOT_HAVE_A_WILDCARD_RETURN_TYPE;
 import static org.jboss.weld.logging.messages.BeanMessage.RETURN_TYPE_MUST_BE_CONCRETE;
 import static org.jboss.weld.logging.messages.BeanMessage.USING_DEFAULT_SCOPE;
 import static org.jboss.weld.logging.messages.BeanMessage.USING_SCOPE;
@@ -183,7 +183,7 @@ else if (getWeldAnnotated().isParameterizedType())
             }
             else if (type instanceof WildcardType)
             {
-               throw new DefinitionException(PRODUCER_METHOD_WITH_WILDCARD_RETURN_TYPE_MUST_BE_DEPENDENT, getWeldAnnotated());
+               throw new DefinitionException(PRODUCER_METHOD_CANNOT_HAVE_A_WILDCARD_RETURN_TYPE, getWeldAnnotated());
             }
          }
       }",2010-11-13T19:05:55Z,15
"@@ -133,7 +133,7 @@ public enum BeanMessage
    @MessageId(""000095"") GENERIC_SESSION_BEAN_MUST_BE_DEPENDENT,
    @MessageId(""000096"") PRODUCER_FIELD_ON_SESSION_BEAN_MUST_BE_STATIC,
    @MessageId(""000097"") PRODUCER_METHOD_WITH_TYPE_VARIABLE_RETURN_TYPE_MUST_BE_DEPENDENT,
-   @MessageId(""000098"") PRODUCER_METHOD_WITH_WILDCARD_RETURN_TYPE_MUST_BE_DEPENDENT,
+   @MessageId(""000098"") PRODUCER_METHOD_CANNOT_HAVE_A_WILDCARD_RETURN_TYPE,
    @MessageId(""000099"") CANNOT_LOAD_CLASS,
    @MessageId(""001500"") PROXY_DESERIALIZATION_FAILURE,
    @MessageId(""001501"") BEAN_INSTANCE_NOT_SET_ON_PROXY,",2010-11-13T19:05:55Z,16
"@@ -96,7 +96,7 @@ INJECTED_FIELD_CANNOT_BE_PRODUCER=Injected field {0} cannot be annotated @Produc
 GENERIC_SESSION_BEAN_MUST_BE_DEPENDENT=Session bean with generic class {0} must be @Depedent scope
 PRODUCER_FIELD_ON_SESSION_BEAN_MUST_BE_STATIC=Producer fields on session beans must be static. Field {0} declared on {1}
 PRODUCER_METHOD_WITH_TYPE_VARIABLE_RETURN_TYPE_MUST_BE_DEPENDENT=A producer method with a parameterized return type with a type variable must be declared @Dependent scoped. Method {0}
-PRODUCER_METHOD_WITH_WILDCARD_RETURN_TYPE_MUST_BE_DEPENDENT=A producer method cannot have a return type parameterized with wildcards. Method {0}  
+PRODUCER_METHOD_CANNOT_HAVE_A_WILDCARD_RETURN_TYPE=A producer method cannot have a return type parameterized with wildcards. Method {0}  
 CANNOT_LOAD_CLASS=Cannot load class {0} during deserialization of proxy
 PROXY_DESERIALIZATION_FAILURE=Failed to deserialize proxy object
 BEAN_INSTANCE_NOT_SET_ON_PROXY=Method call requires a BeanInstance which has not been set for this proxy",2010-11-13T19:05:55Z,17
"@@ -16,22 +16,31 @@
  */
 package org.jboss.weld.annotated;
 
+import static org.jboss.weld.logging.Category.BOOTSTRAP;
+import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
 import static org.jboss.weld.logging.messages.MetadataMessage.INVALID_PARAMETER_POSITION;
 import static org.jboss.weld.logging.messages.MetadataMessage.METADATA_SOURCE_RETURNED_NULL;
+import static org.jboss.weld.logging.messages.MetadataMessage.NOT_IN_HIERARCHY;
+import static org.jboss.weld.logging.messages.MetadataMessage.NO_CONSTRUCTOR;
+
+import java.util.HashSet;
+import java.util.Set;
 
 import javax.enterprise.inject.spi.Annotated;
 import javax.enterprise.inject.spi.AnnotatedMember;
 import javax.enterprise.inject.spi.AnnotatedParameter;
 import javax.enterprise.inject.spi.AnnotatedType;
 
 import org.jboss.weld.exceptions.IllegalArgumentException;
+import org.slf4j.cal10n.LocLogger;
 
 /**
  * Validates that methods of an {@link Annotated} implementation return sane values.
  * @author Jozef Hartinger
  *
  */
 public class AnnotatedTypeValidator {
+    private static final LocLogger log = loggerFactory().getLogger(BOOTSTRAP);
 
     private AnnotatedTypeValidator() {
     }
@@ -62,11 +71,40 @@ public static void validateAnnotatedType(AnnotatedType<?> type) {
         checkNotNull(type.getFields(), ""getFields()"", type);
         checkNotNull(type.getConstructors(), ""getConstructors()"", type);
         checkNotNull(type.getMethods(), ""getMethods()"", type);
+        checkSensibility(type);
     }
 
     private static void checkNotNull(Object expression, String methodName, Object target) {
         if (expression == null) {
             throw new IllegalArgumentException(METADATA_SOURCE_RETURNED_NULL, methodName, target);
         }
     }
+
+    /**
+     * Checks if the given AnnotatedType is sensible, otherwise provides warnings.
+     */
+    private static void checkSensibility(AnnotatedType<?> type) {
+        // check if it has a constructor
+        if (type.getConstructors().isEmpty() && !type.getJavaClass().isInterface()) {
+            log.warn(NO_CONSTRUCTOR, type);
+        }
+
+        Set<Class<?>> hierarchy = new HashSet<Class<?>>();
+        for (Class<?> clazz = type.getJavaClass(); clazz != null; clazz = clazz.getSuperclass()) {
+            hierarchy.add(clazz);
+        }
+
+        checkMembersBelongToHierarchy(type.getConstructors(), hierarchy, type);
+        checkMembersBelongToHierarchy(type.getMethods(), hierarchy, type);
+        checkMembersBelongToHierarchy(type.getFields(), hierarchy, type);
+    }
+
+    private static void checkMembersBelongToHierarchy(Iterable<? extends AnnotatedMember<?>> members, Set<Class<?>> hierarchy, AnnotatedType<?> type) {
+        for (AnnotatedMember<?> member : members) {
+            if (!hierarchy.contains(member.getJavaMember().getDeclaringClass())) {
+                log.warn(NOT_IN_HIERARCHY, member.toString(), type.toString());
+            }
+        }
+    }
+
 }",2013-06-03T14:39:48Z,11
"@@ -51,4 +51,6 @@ public enum MetadataMessage {
     @MessageId(""001113"")NOT_A_SCOPE,
     @MessageId(""001114"")METADATA_SOURCE_RETURNED_NULL,
     @MessageId(""001115"")INVALID_PARAMETER_POSITION,
+    @MessageId(""001116"")NO_CONSTRUCTOR,
+    @MessageId(""001117"")NOT_IN_HIERARCHY;
 }",2013-06-03T14:39:48Z,12
"@@ -16,6 +16,7 @@
  */
 package org.jboss.weld.manager;
 
+import static org.jboss.weld.annotated.AnnotatedTypeValidator.validateAnnotatedType;
 import static org.jboss.weld.logging.Category.BOOTSTRAP;
 import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
 import static org.jboss.weld.logging.messages.BeanManagerMessage.AMBIGUOUS_BEANS_FOR_DEPENDENCY;
@@ -1380,6 +1381,7 @@ public <T> InjectionTargetFactoryImpl<T> getLocalInjectionTargetFactory(Annotate
      */
     @Override
     public <T> InjectionTargetFactoryImpl<T> getInjectionTargetFactory(AnnotatedType<T> type) {
+        validateAnnotatedType(type);
         BeanManagerImpl manager = BeanManagerLookupService.lookupBeanManager(type.getJavaClass(), this);
         return new InjectionTargetFactoryImpl<T>(type, manager);
     }",2013-06-03T14:39:48Z,4
"@@ -16,8 +16,6 @@
  */
 package org.jboss.weld.manager;
 
-import static org.jboss.weld.annotated.AnnotatedTypeValidator.validateAnnotatedType;
-
 import javax.enterprise.inject.spi.AnnotatedType;
 import javax.enterprise.inject.spi.Bean;
 import javax.enterprise.inject.spi.Decorator;
@@ -57,7 +55,6 @@ public class InjectionTargetFactoryImpl<T> implements WeldInjectionTargetFactory
 
     protected InjectionTargetFactoryImpl(AnnotatedType<T> type, BeanManagerImpl manager) {
         this.manager = manager;
-        validateAnnotatedType(type);
         this.type = manager.getServices().get(ClassTransformer.class).getEnhancedAnnotatedType(type, manager.getId());
         this.injectionTargetService = manager.getServices().get(InjectionTargetService.class);
         this.injectionServices = manager.getServices().get(InjectionServices.class);",2013-06-03T14:39:48Z,13
"@@ -14,3 +14,5 @@ TYPES_EMPTY=BeanAttributes.getTypes() may not return an empty set {0}
 NOT_A_SCOPE={0} defined on {1} is not a scope annotation
 METADATA_SOURCE_RETURNED_NULL={0} returned null for {1}
 INVALID_PARAMETER_POSITION=Parameter position {0} of parameter {1} is not valid
+NO_CONSTRUCTOR=AnnotatedType ({0}) without a constructor
+NOT_IN_HIERARCHY=Member ({0}) does not belong to the actual class hierarchy of the annotatedType ({1})",2013-06-03T14:39:48Z,14
"@@ -27,7 +27,7 @@
 import static org.jboss.weld.logging.messages.BeanMessage.ONLY_ONE_SCOPE_ALLOWED;
 import static org.jboss.weld.logging.messages.BeanMessage.PRODUCER_CAST_ERROR;
 import static org.jboss.weld.logging.messages.BeanMessage.PRODUCER_METHOD_WITH_TYPE_VARIABLE_RETURN_TYPE_MUST_BE_DEPENDENT;
-import static org.jboss.weld.logging.messages.BeanMessage.PRODUCER_METHOD_WITH_WILDCARD_RETURN_TYPE_MUST_BE_DEPENDENT;
+import static org.jboss.weld.logging.messages.BeanMessage.PRODUCER_METHOD_CANNOT_HAVE_A_WILDCARD_RETURN_TYPE;
 import static org.jboss.weld.logging.messages.BeanMessage.RETURN_TYPE_MUST_BE_CONCRETE;
 import static org.jboss.weld.logging.messages.BeanMessage.USING_DEFAULT_SCOPE;
 import static org.jboss.weld.logging.messages.BeanMessage.USING_SCOPE;
@@ -183,7 +183,7 @@ else if (getWeldAnnotated().isParameterizedType())
             }
             else if (type instanceof WildcardType)
             {
-               throw new DefinitionException(PRODUCER_METHOD_WITH_WILDCARD_RETURN_TYPE_MUST_BE_DEPENDENT, getWeldAnnotated());
+               throw new DefinitionException(PRODUCER_METHOD_CANNOT_HAVE_A_WILDCARD_RETURN_TYPE, getWeldAnnotated());
             }
          }
       }",2010-11-13T19:05:55Z,15
"@@ -133,7 +133,7 @@ public enum BeanMessage
    @MessageId(""000095"") GENERIC_SESSION_BEAN_MUST_BE_DEPENDENT,
    @MessageId(""000096"") PRODUCER_FIELD_ON_SESSION_BEAN_MUST_BE_STATIC,
    @MessageId(""000097"") PRODUCER_METHOD_WITH_TYPE_VARIABLE_RETURN_TYPE_MUST_BE_DEPENDENT,
-   @MessageId(""000098"") PRODUCER_METHOD_WITH_WILDCARD_RETURN_TYPE_MUST_BE_DEPENDENT,
+   @MessageId(""000098"") PRODUCER_METHOD_CANNOT_HAVE_A_WILDCARD_RETURN_TYPE,
    @MessageId(""000099"") CANNOT_LOAD_CLASS,
    @MessageId(""001500"") PROXY_DESERIALIZATION_FAILURE,
    @MessageId(""001501"") BEAN_INSTANCE_NOT_SET_ON_PROXY,",2010-11-13T19:05:55Z,16
"@@ -96,7 +96,7 @@ INJECTED_FIELD_CANNOT_BE_PRODUCER=Injected field {0} cannot be annotated @Produc
 GENERIC_SESSION_BEAN_MUST_BE_DEPENDENT=Session bean with generic class {0} must be @Depedent scope
 PRODUCER_FIELD_ON_SESSION_BEAN_MUST_BE_STATIC=Producer fields on session beans must be static. Field {0} declared on {1}
 PRODUCER_METHOD_WITH_TYPE_VARIABLE_RETURN_TYPE_MUST_BE_DEPENDENT=A producer method with a parameterized return type with a type variable must be declared @Dependent scoped. Method {0}
-PRODUCER_METHOD_WITH_WILDCARD_RETURN_TYPE_MUST_BE_DEPENDENT=A producer method cannot have a return type parameterized with wildcards. Method {0}  
+PRODUCER_METHOD_CANNOT_HAVE_A_WILDCARD_RETURN_TYPE=A producer method cannot have a return type parameterized with wildcards. Method {0}  
 CANNOT_LOAD_CLASS=Cannot load class {0} during deserialization of proxy
 PROXY_DESERIALIZATION_FAILURE=Failed to deserialize proxy object
 BEAN_INSTANCE_NOT_SET_ON_PROXY=Method call requires a BeanInstance which has not been set for this proxy",2010-11-13T19:05:55Z,17
"@@ -297,7 +297,7 @@ protected void postSpecialize() {
         if (isSpecializing() && getSpecializedBean().getWeldAnnotated().isAnnotationPresent(Named.class)) {
             this.name = getSpecializedBean().getName();
         }
-        BeansClosure closure = BeansClosure.getClosure(beanManager);
+        BeansClosure closure = beanManager.getClosure();
         closure.addSpecialized(getSpecializedBean(), this);
     }
 ",2012-09-27T11:41:13Z,176
"@@ -445,15 +445,15 @@ protected void checkBeanImplementation() {
     @Override
     protected void preSpecialize(BeanDeployerEnvironment environment) {
         super.preSpecialize(environment);
-        BeansClosure closure = BeansClosure.getClosure(beanManager);
+        BeansClosure closure = beanManager.getClosure();
         if (closure.isEJB(getWeldAnnotated().getWeldSuperclass())) {
             throw new DefinitionException(SPECIALIZING_BEAN_MUST_EXTEND_A_BEAN, this);
         }
     }
 
     @Override
     protected void specialize(BeanDeployerEnvironment environment) {
-        BeansClosure closure = BeansClosure.getClosure(beanManager);
+        BeansClosure closure = beanManager.getClosure();
         Bean<?> specializedBean = closure.getClassBean(getWeldAnnotated().getWeldSuperclass());
         if (specializedBean == null) {
             throw new DefinitionException(SPECIALIZING_BEAN_MUST_EXTEND_A_BEAN, this);",2012-09-27T11:41:13Z,92
"@@ -245,7 +245,7 @@ protected void preSpecialize(BeanDeployerEnvironment environment) {
 
     @Override
     protected void specialize(BeanDeployerEnvironment environment) {
-        BeansClosure closure = BeansClosure.getClosure(beanManager);
+        BeansClosure closure = beanManager.getClosure();
         WeldMethod<?, ?> superClassMethod = getDeclaringBean().getWeldAnnotated().getWeldSuperclass().getWeldMethod(getWeldAnnotated().getJavaMember());
         ProducerMethod<?, ?> check = closure.getProducerMethod(superClassMethod);
         if (check == null) {",2012-09-27T11:41:13Z,177
"@@ -264,15 +264,15 @@ protected void checkScopeAllowed() {
     protected void preSpecialize(BeanDeployerEnvironment environment) {
         super.preSpecialize(environment);
         // We appear to check this twice?
-        BeansClosure closure = BeansClosure.getClosure(beanManager);
+        BeansClosure closure = beanManager.getClosure();
         if (closure.isEJB(getWeldAnnotated().getWeldSuperclass()) == false) {
             throw new DefinitionException(SPECIALIZING_ENTERPRISE_BEAN_MUST_EXTEND_AN_ENTERPRISE_BEAN, this);
         }
     }
 
     @Override
     protected void specialize(BeanDeployerEnvironment environment) {
-        BeansClosure closure = BeansClosure.getClosure(beanManager);
+        BeansClosure closure = beanManager.getClosure();
         Bean<?> specializedBean = closure.getClassBean(getWeldAnnotated().getWeldSuperclass());
         if (specializedBean == null) {
             throw new IllegalStateException(SPECIALIZING_ENTERPRISE_BEAN_MUST_EXTEND_AN_ENTERPRISE_BEAN, this);",2012-09-27T11:41:13Z,93
"@@ -203,7 +203,7 @@ public void createBeans(Environment environment) {
         // TODO Register the context beans
         beanDeployer.createBeans();
 
-        BeansClosure closure = BeansClosure.getClosure(beanManager);
+        BeansClosure closure = beanManager.getClosure();
         closure.addEnvironment(beanDeployer.getEnvironment());
     }
 ",2012-09-27T11:41:13Z,34
"@@ -95,7 +95,6 @@
 import org.jboss.weld.serialization.spi.ContextualStore;
 import org.jboss.weld.serialization.spi.ProxyServices;
 import org.jboss.weld.transaction.spi.TransactionServices;
-import org.jboss.weld.util.BeansClosure;
 import org.jboss.weld.util.ServiceLoader;
 import org.jboss.weld.util.reflection.Formats;
 import org.jboss.weld.util.reflection.Reflections;
@@ -406,7 +405,7 @@ public Bootstrap endInitialization() {
                         riBean.cleanupAfterBoot();
                     }
                 }
-                BeansClosure.getClosure(beanManager).clear();
+                beanManager.getClosure().clear();
             }
         }
         return this;",2012-09-27T11:41:13Z,25
"@@ -242,6 +242,11 @@ public class BeanManagerImpl implements WeldManager, Serializable {
     private final transient Map<Class<?>, InterceptionModel<ClassMetadata<?>, ?>> interceptorModelRegistry = new ConcurrentHashMap<Class<?>, InterceptionModel<ClassMetadata<?>, ?>>();
     private final transient MetadataCachingReader interceptorMetadataReader = new DefaultMetadataCachingReader();
 
+    /**
+     * Beans closure
+     */
+    private final transient BeansClosure closure;
+
     /**
      * Create a new, root, manager
      *
@@ -363,8 +368,12 @@ private BeanManagerImpl(
         this.childActivities = new CopyOnWriteArraySet<BeanManagerImpl>();
         TypeSafeObserverResolver observerResolver = new TypeSafeObserverResolver(this, createDynamicAccessibleIterable(ObserverMethodTransform.INSTANCE));
         this.accessibleObserverNotifier = ObserverNotifier.of(observerResolver, getServices());
+        this.closure = new BeansClosure(this);
     }
 
+    public BeansClosure getClosure() {
+        return closure;
+    }
 
     private <T> Iterable<T> createDynamicAccessibleIterable(final Transform<T> transform) {
         return new Iterable<T>() {
@@ -856,7 +865,6 @@ public ServiceRegistry getServices() {
     @SuppressWarnings({""deprecation"", ""unchecked""})
     @Deprecated // should nto be used anymore
     public Map<Contextual<?>, Contextual<?>> getSpecializedBeans() {
-        BeansClosure closure = BeansClosure.getClosure(this);
         return closure.getSpecialized();
     }
 
@@ -938,7 +946,6 @@ public <T> InjectionTarget<T> createInjectionTarget(EjbDescriptor<T> descriptor)
     }
 
     public <X> Bean<? extends X> getMostSpecializedBean(Bean<X> bean) {
-        BeansClosure closure = BeansClosure.getClosure(this);
         //noinspection unchecked
         return (Bean<? extends X>) closure.mostSpecialized(bean);
     }
@@ -1056,7 +1063,7 @@ public void cleanup() {
         this.namespaces.clear();
         this.accessibleObserverNotifier.clear();
         this.observers.clear();
-        BeansClosure.removeClosure(this);
+        this.closure.destroy();
     }
 
     public Map<Class<?>, InterceptionModel<ClassMetadata<?>, ?>> getInterceptorModelRegistry() {",2012-09-27T11:41:13Z,4
"@@ -533,7 +533,7 @@ public static boolean isAlternative(WeldAnnotated<?, ?> annotated, MergedStereot
      * @return true if bean is specialized by some bean in all beans
      */
     public static <T extends Bean<?>> boolean isSpecialized(T bean, BeanManagerImpl beanManager) {
-        BeansClosure closure = BeansClosure.getClosure(beanManager);
+        BeansClosure closure = beanManager.getClosure();
         return closure.isSpecialized(bean);
     }
 
@@ -546,7 +546,7 @@ public static <T extends Bean<?>> boolean isSpecialized(T bean, BeanManagerImpl
      * @return true if bean is specialized by some bean in beans
      */
     public static <T extends Bean<?>> boolean isSpecialized(T bean, Set<T> beans, BeanManagerImpl beanManager) {
-        BeansClosure closure = BeansClosure.getClosure(beanManager);
+        BeansClosure closure = beanManager.getClosure();
         Bean<?> specializedBean = closure.getSpecialized(bean);
         //noinspection SuspiciousMethodCalls
         return (specializedBean != null && beans.contains(specializedBean));
@@ -557,7 +557,7 @@ public static <T extends Bean<?>> boolean isSpecialized(T bean, Set<T> beans, Be
      */
     public static boolean isSuppressedBySpecialization(Bean<?> bean, BeanManagerImpl manager) {
         if (bean instanceof AbstractReceiverBean<?, ?, ?>) {
-            BeansClosure closure = BeansClosure.getClosure(manager);
+            BeansClosure closure = manager.getClosure();
             if (closure.isSpecialized(Reflections.<AbstractReceiverBean<?, ?, ?>>cast(bean).getDeclaringBean())) {
                 // if a bean is specialized, its producer methods are not enabled (WELD-977)
                 return true;",2012-09-27T11:41:13Z,5
"@@ -22,6 +22,14 @@
 
 package org.jboss.weld.util;
 
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+
+import javax.enterprise.inject.spi.Bean;
+
 import org.jboss.weld.bean.AbstractClassBean;
 import org.jboss.weld.bean.ProducerMethod;
 import org.jboss.weld.bootstrap.BeanDeployerEnvironment;
@@ -31,88 +39,77 @@
 import org.jboss.weld.manager.BeanManagerImpl;
 import org.jboss.weld.manager.BeanManagers;
 
-import javax.enterprise.inject.spi.Bean;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
-
 /**
  * Keeps the BDA closure information.
  *
  * @author <a href=""mailto:ales.justin@jboss.org"">Ales Justin</a>
  */
 public final class BeansClosure {
 
-    private static final Map<BeanManagerImpl, BeansClosure> closureMap = new HashMap<BeanManagerImpl, BeansClosure>();
+    private final BeanManagerImpl owner;
+    private volatile Set<BeanManagerImpl> accessibleBeanManagers;
 
     private final Map<Bean<?>, Bean<?>> specialized = new ConcurrentHashMap<Bean<?>, Bean<?>>();
     private final Map<BeanDeployerEnvironment, Object> envs = new ConcurrentHashMap<BeanDeployerEnvironment, Object>();
 
-    /**
-     * Get beans closure.
-     *
-     * @param beanManager the bean manager
-     * @return beans closure
-     */
-    public static BeansClosure getClosure(BeanManagerImpl beanManager) {
-        BeansClosure closure = closureMap.get(beanManager);
-        if (closure == null) {
-            synchronized (closureMap) {
-                closure = closureMap.get(beanManager);
-                if (closure == null) {
-                    closure = new BeansClosure();
-                    for (Iterable<BeanManagerImpl> beanManagers : BeanManagers.getAccessibleClosure(beanManager)) {
+    public BeansClosure(BeanManagerImpl owner) {
+        this.owner = owner;
+    }
+
+    private Set<BeanManagerImpl> getAccessibleBeanManagers() {
+        if (accessibleBeanManagers == null) {
+            synchronized (this) {
+                if (accessibleBeanManagers == null) {
+                    Set<BeanManagerImpl> tmp = new HashSet<BeanManagerImpl>();
+                    for (Iterable<BeanManagerImpl> beanManagers : BeanManagers.getAccessibleClosure(owner)) {
                         for (BeanManagerImpl accessibleBeanManager : beanManagers) {
-                            closureMap.put(accessibleBeanManager, closure);
+                            if (owner != accessibleBeanManager) {
+                                tmp.add(accessibleBeanManager);
+                            }
                         }
                     }
+                    accessibleBeanManagers = tmp;
                 }
             }
         }
-        return closure;
+        return accessibleBeanManagers;
     }
 
-    /**
-     * Remove beans closure.
-     *
-     * @param beanManager the bean manager
-     */
-    public static void removeClosure(BeanManagerImpl beanManager) {
-        BeansClosure closure = closureMap.remove(beanManager);
-        if (closure != null)
-            closure.destroy();
-    }
+    // --- modification methods
 
-    /**
-     * Remove accesible beans closure.
-     *
-     * @param beanManager the bean manager
-     */
-    public static void removeAccessibleClosure(BeanManagerImpl beanManager) {
-        for (Iterable<BeanManagerImpl> beanManagers : BeanManagers.getAccessibleClosure(beanManager)) {
-            for (BeanManagerImpl accessibleBeanManager : beanManagers) {
-                removeClosure(accessibleBeanManager);
-            }
+    public void addSpecialized(Bean<?> target, Bean<?> override) {
+        addSpecializedInternal(target, override);
+        for (BeanManagerImpl accessibleBeanManager : getAccessibleBeanManagers()) {
+            BeansClosure closure = accessibleBeanManager.getClosure();
+            closure.addSpecializedInternal(target, override);
         }
     }
 
-    // --- modification methods
-
-    public void addSpecialized(Bean<?> target, Bean<?> override) {
+    protected void addSpecializedInternal(Bean<?> target, Bean<?> override) {
         specialized.put(target, override);
     }
 
     public void addEnvironment(BeanDeployerEnvironment environment) {
+        addEnvironmentInternal(environment);
+        for (BeanManagerImpl accessibleBeanManager : getAccessibleBeanManagers()) {
+            BeansClosure closure = accessibleBeanManager.getClosure();
+            closure.addEnvironmentInternal(environment);
+        }
+    }
+
+    protected void addEnvironmentInternal(BeanDeployerEnvironment environment) {
         envs.put(environment, Object.class);
     }
 
     public void clear() {
         envs.clear();
     }
 
-    private void destroy() {
+    public void destroy() {
         specialized.clear();
+        if (accessibleBeanManagers != null) {
+            accessibleBeanManagers.clear();
+        }
     }
 
     // -- querys",2012-09-27T11:41:13Z,5
"@@ -42,11 +42,11 @@
 import org.jboss.weld.ejb.EjbDescriptors;
 import org.jboss.weld.ejb.spi.EjbServices;
 import org.jboss.weld.manager.BeanManagerImpl;
+import org.jboss.weld.manager.Enabled;
 import org.jboss.weld.resources.spi.ResourceLoader;
 import org.jboss.weld.security.spi.SecurityServices;
 import org.jboss.weld.transaction.spi.TransactionServices;
 import org.jboss.weld.validation.spi.ValidationServices;
-import org.jboss.weld.xml.BeansXmlParser;
 import org.slf4j.cal10n.LocLogger;
 
 /**
@@ -70,10 +70,10 @@ public BeanDeployment(BeanDeploymentArchive beanDeploymentArchive, BeanManagerIm
       ServiceRegistry services = new SimpleServiceRegistry();
       services.addAll(deploymentServices.entrySet());
       services.addAll(beanDeploymentArchive.getServices().entrySet());
-      this.beanManager = BeanManagerImpl.newManager(deploymentManager, beanDeploymentArchive.getId(), services, new BeansXmlParser(services.get(ResourceLoader.class), beanDeploymentArchive.getBeansXml()).parse());
-      log.debug(ENABLED_ALTERNATIVES, this.beanManager, beanManager.getEnabledClasses().getAlternativeClasses(), beanManager.getEnabledClasses().getAlternativeStereotypes());
-      log.debug(ENABLED_DECORATORS, this.beanManager, beanManager.getEnabledClasses().getDecorators());
-      log.debug(ENABLED_INTERCEPTORS, this.beanManager, beanManager.getEnabledClasses().getInterceptors());
+      this.beanManager = BeanManagerImpl.newManager(deploymentManager, beanDeploymentArchive.getId(), services, Enabled.of(beanDeploymentArchive.getBeansXml(), services.get(ResourceLoader.class)));
+      log.debug(ENABLED_ALTERNATIVES, this.beanManager, beanManager.getEnabled().getAlternativeClasses(), beanManager.getEnabled().getAlternativeStereotypes());
+      log.debug(ENABLED_DECORATORS, this.beanManager, beanManager.getEnabled().getDecorators());
+      log.debug(ENABLED_INTERCEPTORS, this.beanManager, beanManager.getEnabled().getInterceptors());
       if (beanManager.getServices().contains(EjbServices.class))
       {
          // Must populate EJB cache first, as we need it to detect whether a",2010-08-17T13:57:35Z,34
"@@ -477,9 +477,9 @@ private void validateEnabledInterceptorClasses(BeanManagerImpl beanManager)
       {
          interceptorBeanClasses.add(interceptor.getBeanClass());
       }
-      for (Class<?> enabledInterceptorClass : beanManager.getEnabledClasses().getInterceptors())
+      for (Class<?> enabledInterceptorClass : beanManager.getEnabled().getInterceptors())
       {
-         if (beanManager.getEnabledClasses().getInterceptors().indexOf(enabledInterceptorClass) < beanManager.getEnabledClasses().getInterceptors().lastIndexOf(enabledInterceptorClass))
+         if (beanManager.getEnabled().getInterceptors().indexOf(enabledInterceptorClass) < beanManager.getEnabled().getInterceptors().lastIndexOf(enabledInterceptorClass))
          {
             throw new DeploymentException(INTERCEPTOR_SPECIFIED_TWICE, enabledInterceptorClass + "" specified twice"");
          }
@@ -498,9 +498,9 @@ private void validateEnabledDecoratorClasses(BeanManagerImpl beanManager)
       {
          decoratorBeanClasses.add(bean.getBeanClass());
       }
-      for (Class<?> clazz : beanManager.getEnabledClasses().getDecorators())
+      for (Class<?> clazz : beanManager.getEnabled().getDecorators())
       {
-         if (beanManager.getEnabledClasses().getDecorators().indexOf(clazz) < beanManager.getEnabledClasses().getDecorators().lastIndexOf(clazz))
+         if (beanManager.getEnabled().getDecorators().indexOf(clazz) < beanManager.getEnabled().getDecorators().lastIndexOf(clazz))
          {
             throw new DeploymentException(DECORATOR_SPECIFIED_TWICE, clazz);
          }
@@ -514,7 +514,7 @@ private void validateEnabledDecoratorClasses(BeanManagerImpl beanManager)
    private void validateEnabledAlternatives(BeanManagerImpl beanManager)
    {
       List<Class<?>> seenAlternatives = new ArrayList<Class<?>>();
-      for (Class<? extends Annotation> stereotype : beanManager.getEnabledClasses().getAlternativeStereotypes())
+      for (Class<? extends Annotation> stereotype : beanManager.getEnabled().getAlternativeStereotypes())
       {
          if (!beanManager.isStereotype(stereotype))
          {
@@ -530,7 +530,7 @@ private void validateEnabledAlternatives(BeanManagerImpl beanManager)
          }
          seenAlternatives.add(stereotype);
       }
-      for (Class<?> clazz : beanManager.getEnabledClasses().getAlternativeClasses())
+      for (Class<?> clazz : beanManager.getEnabled().getAlternativeClasses())
       {
          if (clazz.isAnnotation() || clazz.isInterface())
          {
@@ -598,7 +598,7 @@ private static boolean isInjectionPointSatisfied(InjectionPoint ij, Set<?> resol
    {
       if (ij.getBean() instanceof Decorator<?>)
       {
-         if (beanManager.getEnabledClasses().getDecorators().contains(ij.getBean().getBeanClass()))
+         if (beanManager.getEnabled().getDecorators().contains(ij.getBean().getBeanClass()))
          {
             return resolvedBeans.size() > 0;
          }",2010-08-17T13:57:35Z,178
"@@ -16,6 +16,7 @@
  */
 package org.jboss.weld.bootstrap;
 
+import static org.jboss.weld.bootstrap.spi.BeansXml.EMPTY_BEANS_XML;
 import static org.jboss.weld.logging.Category.BOOTSTRAP;
 import static org.jboss.weld.logging.Category.VERSION;
 import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
@@ -26,6 +27,7 @@
 import static org.jboss.weld.logging.messages.BootstrapMessage.MANAGER_NOT_INITIALIZED;
 import static org.jboss.weld.logging.messages.BootstrapMessage.UNSPECIFIED_REQUIRED_SERVICE;
 import static org.jboss.weld.logging.messages.BootstrapMessage.VALIDATING_BEANS;
+import static org.jboss.weld.manager.Enabled.EMPTY_ENABLED;
 
 import java.net.URL;
 import java.util.Collection;
@@ -55,6 +57,7 @@
 import org.jboss.weld.bootstrap.events.BeforeBeanDiscoveryImpl;
 import org.jboss.weld.bootstrap.events.BeforeShutdownImpl;
 import org.jboss.weld.bootstrap.spi.BeanDeploymentArchive;
+import org.jboss.weld.bootstrap.spi.BeansXml;
 import org.jboss.weld.bootstrap.spi.Deployment;
 import org.jboss.weld.context.AbstractApplicationContext;
 import org.jboss.weld.context.ApplicationContext;
@@ -78,7 +81,6 @@
 import org.jboss.weld.jsf.JsfApiAbstraction;
 import org.jboss.weld.logging.messages.VersionMessage;
 import org.jboss.weld.manager.BeanManagerImpl;
-import org.jboss.weld.manager.EnabledClasses;
 import org.jboss.weld.metadata.TypeStore;
 import org.jboss.weld.metadata.cache.MetaAnnotationStore;
 import org.jboss.weld.persistence.PersistenceApiAbstraction;
@@ -98,6 +100,7 @@
 import org.jboss.weld.util.serviceProvider.DefaultServiceLoaderFactory;
 import org.jboss.weld.util.serviceProvider.ServiceLoaderFactory;
 import org.jboss.weld.ws.WSApiAbstraction;
+import org.jboss.weld.xml.BeansXmlParser;
 import org.slf4j.cal10n.LocLogger;
 
 /**
@@ -155,9 +158,9 @@ public Collection<EjbDescriptor<?>> getEjbs()
                return Collections.emptySet();
             }
 
-            public Collection<URL> getBeansXml()
+            public BeansXml getBeansXml()
             {
-               return Collections.emptySet();
+               return EMPTY_BEANS_XML;
             }
 
             public Collection<BeanDeploymentArchive> getBeanDeploymentArchives()
@@ -233,6 +236,12 @@ private BeanDeployment visit(BeanDeploymentArchive beanDeploymentArchive, Map<Be
    private Environment environment;
    private Deployment deployment;
    private DeploymentVisitor deploymentVisitor;
+   private final BeansXmlParser beansXmlParser;
+   
+   public WeldBootstrap()
+   {
+      this.beansXmlParser = new BeansXmlParser();
+   }
 
    public Bootstrap startContainer(Environment environment, Deployment deployment, BeanStore applicationBeanStore)
    {
@@ -291,7 +300,7 @@ public Bootstrap startContainer(Environment environment, Deployment deployment,
          deploymentServices.add(TypeStore.class, implementationServices.get(TypeStore.class));
 
          this.environment = environment;
-         this.deploymentManager = BeanManagerImpl.newRootManager(""deployment"", deploymentServices, new EnabledClasses());
+         this.deploymentManager = BeanManagerImpl.newRootManager(""deployment"", deploymentServices, EMPTY_ENABLED);
 
          Container.initialize(deploymentManager, ServiceRegistries.unmodifiableServiceRegistry(deployment.getServices()));
          Container.instance().setState(ContainerState.STARTING);
@@ -489,5 +498,15 @@ protected static void verifyServices(ServiceRegistry services, Set<Class<? exten
          }
       }
    }
+   
+   public BeansXml parse(Iterable<URL> urls)
+   {
+      return beansXmlParser.parse(urls);
+   }
+   
+   public BeansXml parse(URL url)
+   {
+      return beansXmlParser.parse(url);
+   }
 
 }",2010-08-17T13:57:35Z,25
"@@ -168,7 +168,7 @@ public class BeanManagerImpl implements WeldManager, Serializable
     * archive accessibility, and the configuration for this bean deployment
     * archive
     */
-   private transient final EnabledClasses enabledClasses;
+   private transient final Enabled enabled;
    private transient final Set<CurrentActivity> currentActivities;   
 
    /*
@@ -231,7 +231,7 @@ public class BeanManagerImpl implements WeldManager, Serializable
     * @param serviceRegistry
     * @return
     */
-   public static BeanManagerImpl newRootManager(String id, ServiceRegistry serviceRegistry, EnabledClasses enabledClasses)
+   public static BeanManagerImpl newRootManager(String id, ServiceRegistry serviceRegistry, Enabled enabled)
    {  
       ListMultimap<Class<? extends Annotation>, Context> contexts = Multimaps.newListMultimap(new ConcurrentHashMap<Class<? extends Annotation>, Collection<Context>>(), CopyOnWriteArrayListSupplier.<Context>instance());
 
@@ -248,7 +248,7 @@ public static BeanManagerImpl newRootManager(String id, ServiceRegistry serviceR
             contexts, 
             new CopyOnWriteArraySet<CurrentActivity>(), 
             new HashMap<Contextual<?>, Contextual<?>>(), 
-            enabledClasses,
+            enabled,
             id,
             new AtomicInteger());
    }
@@ -259,7 +259,7 @@ public static BeanManagerImpl newRootManager(String id, ServiceRegistry serviceR
     * @param serviceRegistry
     * @return
     */
-   public static BeanManagerImpl newManager(BeanManagerImpl rootManager, String id, ServiceRegistry services, EnabledClasses enabledClasses)
+   public static BeanManagerImpl newManager(BeanManagerImpl rootManager, String id, ServiceRegistry services, Enabled enabled)
    {  
       return new BeanManagerImpl(
             services, 
@@ -274,7 +274,7 @@ public static BeanManagerImpl newManager(BeanManagerImpl rootManager, String id,
             rootManager.getContexts(), 
             new CopyOnWriteArraySet<CurrentActivity>(), 
             new HashMap<Contextual<?>, Contextual<?>>(), 
-            enabledClasses,
+            enabled,
             id,
             new AtomicInteger());
    }
@@ -310,7 +310,7 @@ public static BeanManagerImpl newChildActivityManager(BeanManagerImpl parentMana
             parentManager.getContexts(), 
             parentManager.getCurrentActivities(), 
             parentManager.getSpecializedBeans(),
-            parentManager.getEnabledClasses(),
+            parentManager.getEnabled(),
             new StringBuilder().append(parentManager.getChildIds().incrementAndGet()).toString(),
             parentManager.getChildIds());
    }
@@ -334,7 +334,7 @@ private BeanManagerImpl(
          ListMultimap<Class<? extends Annotation>, Context> contexts, 
          Set<CurrentActivity> currentActivities, 
          Map<Contextual<?>, Contextual<?>> specializedBeans, 
-         EnabledClasses enabledClasses,
+         Enabled enabled,
          String id,
          AtomicInteger childIds)
    {
@@ -349,7 +349,7 @@ private BeanManagerImpl(
       this.currentActivities = currentActivities;
       this.specializedBeans = specializedBeans;
       this.observers = observers;
-      this.enabledClasses = enabledClasses;
+      this.enabled = enabled;
       this.namespaces = namespaces;
       this.id = id;
       this.childIds = new AtomicInteger();
@@ -458,29 +458,20 @@ public <T> Set<ObserverMethod<? super T>> resolveObserverMethods(Type eventType,
    {
       return (Set) observerResolver.resolve(new ResolvableBuilder().addTypes(new HierarchyDiscovery(eventType).getTypeClosure()).addType(Object.class).addQualifiers(qualifiers).addQualifierIfAbsent(AnyLiteral.INSTANCE).create());
    }
-
-   /**
-    * A collection of enabled alternative classes
-    * 
-    */
-   public Collection<Class<?>> getEnabledAlternativeClasses()
-   {
-      return getEnabledClasses().getAlternativeClasses();
-   }
    
    /**
     * Enabled Alternatives, Interceptors and Decorators
     * 
     * @return
     */
-   public EnabledClasses getEnabledClasses()
+   public Enabled getEnabled()
    {
-      return enabledClasses;
+      return enabled;
    }
    
    public boolean isBeanEnabled(Bean<?> bean)
    {
-      return Beans.isBeanEnabled(bean, getEnabledClasses());   
+      return Beans.isBeanEnabled(bean, getEnabled());   
    }
    
    public Set<Bean<?>> getBeans(Type beanType, Annotation... qualifiers)
@@ -840,7 +831,7 @@ public String toString()
    {
       StringBuilder buffer = new StringBuilder();
       buffer.append(""Manager\n"");
-      buffer.append(""Enabled alternatives: "" + getEnabledClasses().getAlternativeClasses() + "" "" + getEnabledClasses().getAlternativeStereotypes() + ""\n"");
+      buffer.append(""Enabled alternatives: "" + getEnabled().getAlternativeClasses() + "" "" + getEnabled().getAlternativeStereotypes() + ""\n"");
       buffer.append(""Registered contexts: "" + contexts.keySet() + ""\n"");
       buffer.append(""Registered beans: "" + getBeans().size() + ""\n"");
       buffer.append(""Specialized beans: "" + specializedBeans.size() + ""\n"");",2010-08-17T13:57:35Z,4
"@@ -0,0 +1,108 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2008, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,  
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.weld.manager;
+
+import static com.google.common.collect.Lists.transform;
+
+import java.lang.annotation.Annotation;
+import java.util.Collections;
+import java.util.List;
+
+import org.jboss.weld.bootstrap.spi.BeansXml;
+import org.jboss.weld.resources.spi.ResourceLoader;
+
+import com.google.common.base.Function;
+
+/**
+ * 
+ * @author Nicklas Karlsson
+ * 
+ */
+public class Enabled
+{
+   
+   private static class ClassLoader<T> implements Function<String, Class<? extends T>>
+   {
+      
+      private final ResourceLoader resourceLoader;
+      
+      public ClassLoader(ResourceLoader resourceLoader)
+      {
+         this.resourceLoader = resourceLoader;
+      }
+
+      public Class<? extends T> apply(String from)
+      {
+         return (Class<? extends T>) resourceLoader.classForName(from);
+      }
+      
+   }
+   
+   public static Enabled of(BeansXml beansXml, ResourceLoader resourceLoader)
+   {
+      if (beansXml == null)
+      {
+         return EMPTY_ENABLED;
+      }
+      else
+      {
+         ClassLoader<Object> classLoader = new ClassLoader<Object>(resourceLoader);
+         ClassLoader<Annotation> annotationLoader = new ClassLoader<Annotation>(resourceLoader);
+         return new Enabled(
+               transform(beansXml.getEnabledAlternativeStereotypes(), annotationLoader),
+               transform(beansXml.getEnabledAlternativeClasses(), classLoader),
+               transform(beansXml.getEnabledDecorators(), classLoader),
+               transform(beansXml.getEnabledInterceptors(), classLoader)
+            );
+      }
+   }
+   
+   public static final Enabled EMPTY_ENABLED = new Enabled(Collections.<Class<? extends Annotation>>emptyList(), Collections.<Class<?>>emptyList(), Collections.<Class<?>>emptyList(), Collections.<Class<?>>emptyList());
+
+   private final List<Class<? extends Annotation>> alternativeStereotypes;
+   private final List<Class<?>> alternativeClasses;
+   private final List<Class<?>> decorators;
+   private final List<Class<?>> interceptors;
+
+   private Enabled(List<Class<? extends Annotation>> alternativeStereotypes, List<Class<?>> alternativeClasses, List<Class<?>> decorators, List<Class<?>> interceptors)
+   {
+      this.alternativeStereotypes = alternativeStereotypes;
+      this.alternativeClasses = alternativeClasses;
+      this.decorators = decorators;
+      this.interceptors = interceptors;
+   }
+
+   public List<Class<? extends Annotation>> getAlternativeStereotypes()
+   {
+      return Collections.unmodifiableList(alternativeStereotypes);
+   }
+
+   public List<Class<?>> getAlternativeClasses()
+   {
+      return Collections.unmodifiableList(alternativeClasses);
+   }
+
+   public List<Class<?>> getDecorators()
+   {
+      return Collections.unmodifiableList(decorators);
+   }
+
+   public List<Class<?>> getInterceptors()
+   {
+      return Collections.unmodifiableList(interceptors);
+   }
+}",2010-08-17T13:57:35Z,179
"@@ -1,72 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2008, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,  
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.manager;
-
-import java.lang.annotation.Annotation;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
-/**
- * 
- * @author Nicklas Karlsson
- * 
- */
-public class EnabledClasses
-{
-
-   private final List<Class<? extends Annotation>> alternativeStereotypes;
-   private final List<Class<?>> alternativeClasses;
-   private final List<Class<?>> decorators;
-   private final List<Class<?>> interceptors;
-
-   public EnabledClasses()
-   {
-      this.alternativeClasses = Collections.emptyList();
-      this.alternativeStereotypes = Collections.emptyList();
-      this.decorators = Collections.emptyList();
-      this.interceptors = Collections.emptyList();
-   }
-
-   public EnabledClasses(List<Class<? extends Annotation>> alternativeStereotypes, List<Class<?>> alternativeClasses, List<Class<?>> decorators, List<Class<?>> interceptors)
-   {
-      this.alternativeStereotypes = new ArrayList<Class<? extends Annotation>>(alternativeStereotypes);
-      this.alternativeClasses = new ArrayList<Class<?>>(alternativeClasses);
-      this.decorators = new ArrayList<Class<?>>(decorators);
-      this.interceptors = new ArrayList<Class<?>>(interceptors);
-   }
-
-   public List<Class<? extends Annotation>> getAlternativeStereotypes()
-   {
-      return Collections.unmodifiableList(alternativeStereotypes);
-   }
-
-   public List<Class<?>> getAlternativeClasses()
-   {
-      return Collections.unmodifiableList(alternativeClasses);
-   }
-
-   public List<Class<?>> getDecorators()
-   {
-      return Collections.unmodifiableList(decorators);
-   }
-
-   public List<Class<?>> getInterceptors()
-   {
-      return Collections.unmodifiableList(interceptors);
-   }
-}",2010-08-17T13:57:35Z,180
"@@ -45,7 +45,7 @@ protected boolean matches(Resolvable resolvable, Decorator<?> bean)
    {
       return Reflections.matches(Collections.singleton(bean.getDelegateType()), resolvable.getTypes())
             && Beans.containsAllQualifiers(bean.getDelegateQualifiers(), resolvable.getQualifiers(), getBeanManager())
-            && getBeanManager().getEnabledClasses().getDecorators().contains(bean.getBeanClass());
+            && getBeanManager().getEnabled().getDecorators().contains(bean.getBeanClass());
    }
    
    @Override
@@ -56,7 +56,7 @@ protected Set<Decorator<?>> sortResult(Set<Decorator<?>> matchedDecorators)
          
          public int compare(Decorator<?> o1, Decorator<?> o2)
          {
-            List<Class<?>> enabledDecorators = getBeanManager().getEnabledClasses().getDecorators();
+            List<Class<?>> enabledDecorators = getBeanManager().getEnabled().getDecorators();
             int p1 = enabledDecorators.indexOf(((Decorator<?>) o1).getBeanClass());
             int p2 = enabledDecorators.indexOf(((Decorator<?>) o2).getBeanClass());
             return p1 - p2;",2010-08-17T13:57:35Z,181
"@@ -44,7 +44,7 @@ public TypeSafeInterceptorResolver(BeanManagerImpl manager, Iterable<Interceptor
    @Override
    protected boolean matches(InterceptorResolvable resolvable, Interceptor<?> bean)
    {
-      return bean.intercepts(resolvable.getInterceptionType()) && bean.getInterceptorBindings().size() > 0 && Beans.containsAllInterceptionBindings(bean.getInterceptorBindings(), resolvable.getQualifiers(), getManager()) && getManager().getEnabledClasses().getInterceptors().contains(bean.getBeanClass());
+      return bean.intercepts(resolvable.getInterceptionType()) && bean.getInterceptorBindings().size() > 0 && Beans.containsAllInterceptionBindings(bean.getInterceptorBindings(), resolvable.getQualifiers(), getManager()) && getManager().getEnabled().getInterceptors().contains(bean.getBeanClass());
    }
 
    @Override
@@ -55,8 +55,8 @@ protected Set<Interceptor<?>> sortResult(Set<Interceptor<?>> matchedInterceptors
 
          public int compare(Interceptor<?> o1, Interceptor<?> o2)
          {
-            int p1 = getManager().getEnabledClasses().getInterceptors().indexOf(((InterceptorImpl<?>) o1).getType());
-            int p2 = getManager().getEnabledClasses().getInterceptors().indexOf(((InterceptorImpl<?>) o2).getType());
+            int p1 = getManager().getEnabled().getInterceptors().indexOf(((InterceptorImpl<?>) o1).getType());
+            int p2 = getManager().getEnabled().getInterceptors().indexOf(((InterceptorImpl<?>) o2).getType());
             return p1 - p2;
          }
 ",2010-08-17T13:57:35Z,182
"@@ -92,7 +92,7 @@
 import org.jboss.weld.introspector.WeldParameter;
 import org.jboss.weld.manager.BeanManagerImpl;
 import org.jboss.weld.manager.BeanManagers;
-import org.jboss.weld.manager.EnabledClasses;
+import org.jboss.weld.manager.Enabled;
 import org.jboss.weld.metadata.cache.InterceptorBindingModel;
 import org.jboss.weld.metadata.cache.MergedStereotypes;
 import org.jboss.weld.metadata.cache.MetaAnnotationStore;
@@ -591,7 +591,7 @@ public static <T extends Bean<?>> Set<T> removeDisabledAndSpecializedBeans(Set<T
          Set<T> result = new HashSet<T>();
          for (T bean : beans)
          {
-            if (isBeanEnabled(bean, beanManager.getEnabledClasses()) && !isSpecialized(bean, beans, beanManager))
+            if (isBeanEnabled(bean, beanManager.getEnabled()) && !isSpecialized(bean, beans, beanManager))
             {
                result.add(bean);
             }
@@ -600,19 +600,19 @@ public static <T extends Bean<?>> Set<T> removeDisabledAndSpecializedBeans(Set<T
       }
    }
 
-   public static boolean isBeanEnabled(Bean<?> bean, EnabledClasses enabledClasses)
+   public static boolean isBeanEnabled(Bean<?> bean, Enabled enabled)
    {
       if (bean.isAlternative())
       {
-         if (enabledClasses.getAlternativeClasses().contains(bean.getBeanClass()))
+         if (enabled.getAlternativeClasses().contains(bean.getBeanClass()))
          {
             return true;
          }
          else
          {
             for (Class<? extends Annotation> stereotype : bean.getStereotypes())
             {
-               if (enabledClasses.getAlternativeStereotypes().contains(stereotype))
+               if (enabled.getAlternativeStereotypes().contains(stereotype))
                {
                   return true;
                }
@@ -621,11 +621,11 @@ public static boolean isBeanEnabled(Bean<?> bean, EnabledClasses enabledClasses)
       }
       else if (bean instanceof DecoratorImpl<?>)
       {
-         return enabledClasses.getDecorators().contains(bean.getBeanClass());
+         return enabled.getDecorators().contains(bean.getBeanClass());
       }
       else if (bean instanceof InterceptorImpl<?>)
       {
-         return enabledClasses.getInterceptors().contains(bean.getBeanClass());
+         return enabled.getInterceptors().contains(bean.getBeanClass());
       }
       else
       {",2010-08-17T13:57:35Z,5
"@@ -0,0 +1,102 @@
+/**
+ * 
+ */
+package org.jboss.weld.xml;
+
+import static org.jboss.weld.logging.messages.XmlMessage.CONFIGURATION_ERROR;
+import static org.jboss.weld.logging.messages.XmlMessage.LOAD_ERROR;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.URL;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+
+import org.jboss.weld.exceptions.IllegalArgumentException;
+import org.w3c.dom.Document;
+
+abstract class BeansXmlDocumentLoader
+{
+
+   private final URL beansXml;
+
+   BeansXmlDocumentLoader(URL beansXml)
+   {
+      this.beansXml = beansXml;
+   }
+
+   protected abstract Document loadDocument(InputStream in);
+
+   public Document run()
+   {
+      InputStream is = null;
+      try
+      {
+         is = openStream();
+         return loadDocument(is);
+      }
+      finally
+      {
+         closeStream(is);
+      }
+   }
+
+   private void closeStream(InputStream in)
+   {
+      if (in != null)
+      {
+         try
+         {
+            in.close();
+         }
+         catch (IOException e)
+         {
+            throw new IllegalStateException(""Error closing stream "" + in);
+         }
+      }
+   }
+
+   private InputStream openStream()
+   {
+      if (beansXml == null)
+      {
+         throw new org.jboss.weld.exceptions.IllegalStateException(LOAD_ERROR, ""URL: null"");
+      }
+      try
+      {
+         return beansXml.openStream();
+      }
+      catch (IOException e)
+      {
+         throw new org.jboss.weld.exceptions.IllegalStateException(LOAD_ERROR, e, beansXml.toString());
+      }
+   }
+
+   protected boolean isDocumentEmpty(InputStream in)
+   {
+      try
+      {
+         return in.available() == 0;
+      }
+      catch (IOException e)
+      {
+         throw new IllegalArgumentException(LOAD_ERROR, e, beansXml.toString());
+      }
+   }
+
+   protected DocumentBuilder createDocumentBuilder()
+   {
+      try
+      {
+         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+         factory.setNamespaceAware(true);
+         return factory.newDocumentBuilder();
+      }
+      catch (ParserConfigurationException e)
+      {
+         throw new org.jboss.weld.exceptions.IllegalStateException(CONFIGURATION_ERROR, e);
+      }
+   }
+}
\ No newline at end of file",2010-08-17T13:57:35Z,183
"@@ -16,14 +16,10 @@
  */
 package org.jboss.weld.xml;
 
-import static org.jboss.weld.logging.messages.XmlMessage.CANNOT_LOAD_CLASS;
-
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.List;
 
-import org.jboss.weld.resources.spi.ResourceLoader;
-import org.jboss.weld.resources.spi.ResourceLoadingException;
 import org.jboss.weld.util.dom.NodeListIterable;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
@@ -32,19 +28,20 @@
 /**
  * 
  * @author Nicklas Karlsson
+ * @author Pete Muir
  * 
  */
 class BeansXmlElement
 {
-   private final URL file;
+   
+   private final URL url;
    private final Element element;
    private final String localName;
    private final String namespaceURI;
 
-   BeansXmlElement(URL file, Element element, String localName, String namespaceURI)
+   BeansXmlElement(URL url, Element element, String localName, String namespaceURI)
    {
-      super();
-      this.file = file;
+      this.url = url;
       this.element = element;
       this.localName = localName;
       this.namespaceURI = namespaceURI;
@@ -60,43 +57,27 @@ private static String getClassNameFromElement(Element element)
       return null;
    }
 
-   public <T> List<Class<T>> getClasses(ResourceLoader resourceLoader)
+   public List<String> getClassNames()
    {
-      List<Class<T>> classes = new ArrayList<Class<T>>();
+      List<String> classes = new ArrayList<String>();
       for (Node child : new NodeListIterable(element.getElementsByTagNameNS(namespaceURI, localName)))
       {
          // Unsafe looking cast is actually safe as the NodeList only contains Elements
          String className = getClassNameFromElement((Element) child);
-         if (className == null)
-         {
-            continue;
-         }
-         try
+         if (className != null)
          {
-            classes.add((Class<T>) resourceLoader.classForName(className));
-         }
-         catch (ResourceLoadingException e)
-         {
-            throw new WeldXmlException(CANNOT_LOAD_CLASS, className, file);
+            classes.add(className);
          }
       }
       return classes;
    }
 
-   public URL getFile()
-   {
-      return file;
-   }
-
-   public Element getElement()
-   {
-      return element;
-   }
-
    @Override
    public String toString()
    {
-      return ""File: "" + getFile() + ""; Node: "" + getElement();
+      return element + "" in "" + url;
    }
+   
+   
 
 }
\ No newline at end of file",2010-08-17T13:57:35Z,184
"@@ -0,0 +1,43 @@
+package org.jboss.weld.xml;
+
+import java.util.List;
+
+import org.jboss.weld.bootstrap.spi.BeansXml;
+
+public class BeansXmlImpl implements BeansXml
+{
+
+   private final List<String> enabledAlternativeClasses;
+   private final List<String> enabledAlternativeStereotypes;
+   private final List<String> enabledDecorators;
+   private final List<String> enabledInterceptors;
+   
+   public BeansXmlImpl(List<String> enabledAlternativeClasses, List<String> enabledAlternativeStereotypes, List<String> enabledDecorators, List<String> enabledInterceptors)
+   {
+      this.enabledAlternativeClasses = enabledAlternativeClasses;
+      this.enabledAlternativeStereotypes = enabledAlternativeStereotypes;
+      this.enabledDecorators = enabledDecorators;
+      this.enabledInterceptors = enabledInterceptors;
+   }
+
+   public List<String> getEnabledAlternativeClasses()
+   {
+      return enabledAlternativeClasses;
+   }
+
+   public List<String> getEnabledAlternativeStereotypes()
+   {
+      return enabledAlternativeStereotypes;
+   }
+
+   public List<String> getEnabledDecorators()
+   {
+      return enabledDecorators;
+   }
+
+   public List<String> getEnabledInterceptors()
+   {
+      return enabledInterceptors;
+   }
+
+}",2010-08-17T13:57:35Z,185
"@@ -16,24 +16,26 @@
  */
 package org.jboss.weld.xml;
 
-import static org.jboss.weld.logging.messages.XmlMessage.CONFIGURATION_ERROR;
+import static java.util.Collections.emptyList;
+import static org.jboss.weld.bootstrap.spi.BeansXml.EMPTY_BEANS_XML;
 import static org.jboss.weld.logging.messages.XmlMessage.LOAD_ERROR;
+import static org.jboss.weld.logging.messages.XmlMessage.MULTIPLE_ALTERNATIVES;
+import static org.jboss.weld.logging.messages.XmlMessage.MULTIPLE_DECORATORS;
+import static org.jboss.weld.logging.messages.XmlMessage.MULTIPLE_INTERCEPTORS;
 import static org.jboss.weld.logging.messages.XmlMessage.PARSING_ERROR;
 
 import java.io.IOException;
 import java.io.InputStream;
-import java.lang.annotation.Annotation;
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
-
-import org.jboss.weld.manager.EnabledClasses;
-import org.jboss.weld.resources.spi.ResourceLoader;
+import org.jboss.weld.bootstrap.spi.BeansXml;
+import org.jboss.weld.exceptions.DefinitionException;
+import org.jboss.weld.logging.messages.XmlMessage;
 import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.NodeList;
 import org.xml.sax.SAXException;
 
 /**
@@ -44,137 +46,97 @@
  */
 public class BeansXmlParser
 {
-   
-   public static final String NAMESPACE_URI = ""http://java.sun.com/xml/ns/javaee"";
-   
-   private final Iterable<URL> beansXmls;
-   private final ResourceLoader resourceLoader;
 
-   public BeansXmlParser(ResourceLoader resourceLoader, Iterable<URL> beansXmls)
-   {
-      this.beansXmls = beansXmls;
-      this.resourceLoader = resourceLoader;
-   }
+   public static final String NAMESPACE_URI = ""http://java.sun.com/xml/ns/javaee"";
 
-   public EnabledClasses parse()
+   public BeansXml parse(final URL beansXml)
    {
-      DocumentBuilder documentBuilder = createDocumentBuilder();
-      MergedElements mergedElements = new MergedElements();
-      for (URL beansXml : beansXmls)
+      Document document = new BeansXmlDocumentLoader(beansXml)
       {
-         if (!isBeansXmlOK(beansXml))
+
+         @Override
+         protected Document loadDocument(InputStream in)
          {
-            continue;
+            if (isDocumentEmpty(in))
+            {
+               return null;
+            }
+            try
+            {
+               Document document = createDocumentBuilder().parse(in);
+               document.normalize();
+               return document;
+            }
+            catch (SAXException e)
+            {
+               throw new org.jboss.weld.exceptions.IllegalStateException(PARSING_ERROR, e, beansXml.toString());
+            }
+            catch (IOException e)
+            {
+               throw new org.jboss.weld.exceptions.IllegalStateException(LOAD_ERROR, e, beansXml.toString());
+            }
          }
-         Document document = loadDocument(documentBuilder, beansXml);
+      }.run();
+
+      if (document == null)
+      {
+         return EMPTY_BEANS_XML;
+      }
+      else
+      {
          if (document.getDocumentElement().getNamespaceURI() == null)
          {
-            mergedElements.merge(beansXml, document, ""*"");
+            return parseDocument(beansXml, document.getDocumentElement(), ""*"");
          }
          else
          {
-            mergedElements.merge(beansXml, document, NAMESPACE_URI);
+            return parseDocument(beansXml, document.getDocumentElement(), NAMESPACE_URI);
          }
-         
       }
-      List<Class<?>> enabledAlternativeClasses = new ArrayList<Class<?>>();
-      List<Class<? extends Annotation>> enabledAlternativeStereotypes = new ArrayList<Class<? extends Annotation>>();
-      List<Class<?>> enabledDecoratorClasses = new ArrayList<Class<?>>();
-      List<Class<?>> enabledInterceptorClasses = new ArrayList<Class<?>>();
-      for (BeansXmlElement element : mergedElements.getAlternativeClassElements())
-      {
-         enabledAlternativeClasses.addAll(element.getClasses(resourceLoader));
-      }
-      for (BeansXmlElement element : mergedElements.getAlternativeStereotypeElements())
-      {
-         enabledAlternativeStereotypes.addAll(element.<Annotation>getClasses(resourceLoader));
-      }
-      for (BeansXmlElement element : mergedElements.getDecoratorsElements())
-      {
-         enabledDecoratorClasses.addAll(element.getClasses(resourceLoader));
-      }
-      for (BeansXmlElement element : mergedElements.getInterceptorsElements())
-      {
-         enabledInterceptorClasses.addAll(element.getClasses(resourceLoader));
-      }
-      return new EnabledClasses(enabledAlternativeStereotypes, enabledAlternativeClasses, enabledDecoratorClasses, enabledInterceptorClasses);
    }
 
-   private Document loadDocument(DocumentBuilder documentBuilder, URL beansXml)
+   private BeansXml parseDocument(URL url, Element documentElement, String namespaceURI)
    {
-      Document document;
-      InputStream in = null;
-      try
-      {
-         in = beansXml.openStream();
-         document = documentBuilder.parse(in);
-         document.normalize();
-      }
-      catch (SAXException e)
-      {
-         throw new WeldXmlException(PARSING_ERROR, e, beansXml.toString());
-      }
-      catch (IOException e)
-      {
-         throw new WeldXmlException(LOAD_ERROR, e, beansXml.toString());
-      }
-      finally
-      {
-         closeStream(in);
-      }
-      return document;
-   }
-
-   private void closeStream(InputStream in)
-   {
-      if (in == null)
-      {
-         return;
-      }
-      try
-      {
-         in.close();
-      }
-      catch (IOException e)
-      {
-         e.printStackTrace();
-      }
+      return new BeansXmlImpl(
+            findClassNames(url, documentElement, namespaceURI, ""alternatives"", ""class"", MULTIPLE_ALTERNATIVES),
+            findClassNames(url, documentElement, namespaceURI, ""alternatives"", ""stereotype"", MULTIPLE_ALTERNATIVES),
+            findClassNames(url, documentElement, namespaceURI, ""decorators"", ""class"", MULTIPLE_DECORATORS),
+            findClassNames(url, documentElement, namespaceURI, ""interceptors"", ""class"", MULTIPLE_INTERCEPTORS)
+         ); 
    }
-
-   private boolean isBeansXmlOK(URL beansXml)
+   
+   private static List<String> findClassNames(URL url, Element beans, String namespaceURI, String localGroupName, String localName, XmlMessage multipleViolationMessage)
    {
-      if (beansXml == null)
+      NodeList nodeList = beans.getElementsByTagNameNS(namespaceURI, localGroupName);
+      if (nodeList.getLength() > 1)
       {
-         throw new WeldXmlException(LOAD_ERROR, ""URL: null"");
+         throw new DefinitionException(multipleViolationMessage);
       }
-      InputStream in = null;
-      try
+      else if (nodeList.getLength() == 1)
       {
-         in = beansXml.openStream();
-         return in.available() > 0;
+         return new BeansXmlElement(url, (Element) nodeList.item(0), localName, namespaceURI).getClassNames();
       }
-      catch (IOException e)
+      else
       {
-         throw new WeldXmlException(LOAD_ERROR, e, beansXml.toString());
-      }
-      finally
-      {
-         closeStream(in);
+         return emptyList();
       }
    }
 
-   private DocumentBuilder createDocumentBuilder()
+   public BeansXml parse(Iterable<URL> urls)
    {
-      try
-      {
-         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-         factory.setNamespaceAware(true);
-         return factory.newDocumentBuilder();
-      }
-      catch (ParserConfigurationException e)
-      {
-         throw new WeldXmlException(CONFIGURATION_ERROR, e);
-      }
+      List<String> alternativeStereotypes = new ArrayList<String>();
+      List<String> alternativeClasses = new ArrayList<String>();
+      List<String> decorators = new ArrayList<String>();
+      List<String> interceptors = new ArrayList<String>();
+      for (URL url : urls)
+      {
+         BeansXml beansXml = parse(url);
+         alternativeStereotypes.addAll(beansXml.getEnabledAlternativeStereotypes());
+         alternativeClasses.addAll(beansXml.getEnabledAlternativeClasses());
+         decorators.addAll(beansXml.getEnabledDecorators());
+         interceptors.addAll(beansXml.getEnabledInterceptors());
+      }
+      return new BeansXmlImpl(alternativeClasses, alternativeStereotypes, decorators, interceptors);
    }
 
 }",2010-08-17T13:57:35Z,186
"@@ -1,98 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2008, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,  
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.xml;
-
-import static org.jboss.weld.logging.messages.XmlMessage.MULTIPLE_ALTERNATIVES;
-import static org.jboss.weld.logging.messages.XmlMessage.MULTIPLE_DECORATORS;
-import static org.jboss.weld.logging.messages.XmlMessage.MULTIPLE_INTERCEPTORS;
-
-import java.net.URL;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
-import org.jboss.weld.logging.messages.XmlMessage;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.NodeList;
-
-/**
- * 
- * @author Nicklas Karlsson
- * 
- */
-class MergedElements
-{
-   private List<BeansXmlElement> alternativeClassElements;
-   private List<BeansXmlElement> alternativeStereotypeElements;
-   private List<BeansXmlElement> decoratorsElements;
-   private List<BeansXmlElement> interceptorsElements;
-
-   public MergedElements()
-   {
-      this.alternativeClassElements = new ArrayList<BeansXmlElement>();
-      this.alternativeStereotypeElements = new ArrayList<BeansXmlElement>();
-      this.decoratorsElements = new ArrayList<BeansXmlElement>();
-      this.interceptorsElements = new ArrayList<BeansXmlElement>();
-   }
-
-   public void merge(URL url, Document beansXmlDocument, String namespaceURI)
-   {
-      Element documentElement = beansXmlDocument.getDocumentElement();
-      alternativeClassElements.addAll(findNamedElement(url, documentElement, namespaceURI, ""alternatives"", ""class"", MULTIPLE_ALTERNATIVES));
-      alternativeStereotypeElements.addAll(findNamedElement(url, documentElement, namespaceURI, ""alternatives"", ""stereotype"", MULTIPLE_ALTERNATIVES));
-      interceptorsElements.addAll(findNamedElement(url, documentElement, namespaceURI, ""interceptors"", ""class"", MULTIPLE_INTERCEPTORS));
-      decoratorsElements.addAll(findNamedElement(url, documentElement, namespaceURI, ""decorators"", ""class"", MULTIPLE_DECORATORS));
-   }
-
-   private List<BeansXmlElement> findNamedElement(URL url, Element beans, String namespaceURI, String localGroupName, String localName, XmlMessage multipleViolationMessage)
-   {
-      List<BeansXmlElement> elements = new ArrayList<BeansXmlElement>();
-      NodeList nodeList = beans.getElementsByTagNameNS(namespaceURI, localGroupName);
-      if (nodeList.getLength() > 1)
-      {
-         throw new WeldXmlException(multipleViolationMessage);
-      }
-      else if (nodeList.getLength() == 1)
-      {
-         BeansXmlElement element = new BeansXmlElement(url, (Element) nodeList.item(0), localName, namespaceURI);
-         elements.add(element);
-      }
-      return elements;
-   }
-
-   public List<BeansXmlElement> getAlternativeClassElements()
-   {
-      return Collections.unmodifiableList(alternativeClassElements);
-   }
-
-   public List<BeansXmlElement> getAlternativeStereotypeElements()
-   {
-      return Collections.unmodifiableList(alternativeStereotypeElements);
-   }
-
-   public List<BeansXmlElement> getDecoratorsElements()
-   {
-      return Collections.unmodifiableList(decoratorsElements);
-   }
-
-   public List<BeansXmlElement> getInterceptorsElements()
-   {
-      return Collections.unmodifiableList(interceptorsElements);
-   }
-
-}",2010-08-17T13:57:35Z,187
"@@ -1,40 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2008, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,  
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.jboss.weld.xml;
-
-/**
- * Used for exceptions from the Weld XML parser and provides localization
- * support.
- * 
- * @author David Allen
- */
-public class WeldXmlException extends org.jboss.weld.exceptions.InjectionException
-{
-
-   private static final long serialVersionUID = 2L;
-
-   public WeldXmlException(Throwable throwable)
-   {
-      super(throwable);
-   }
-
-   public <E extends Enum<?>> WeldXmlException(E key, Object... args)
-   {
-      super(key, args);
-   }
-}",2010-08-17T13:57:35Z,188
"@@ -544,7 +544,7 @@ public <T> Set<ObserverMethod<?, T>> resolveObserverMethods(T event, Annotation.
       bindingAnnotations.add(new AnyLiteral());
       checkEventType(clazz);
       Set<ObserverMethod<?, T>> observers = new HashSet<ObserverMethod<?, T>>();
-      Set<ObserverMethod<?,?>> eventObservers = observerResolver.resolve(ResolvableFactory.of(new Reflections.HierarchyDiscovery(clazz).getFlattenedTypes(),  bindingAnnotations));
+      Set<ObserverMethod<?,?>> eventObservers = observerResolver.resolve(ResolvableFactory.of(new Reflections.HierarchyDiscovery(clazz).getFlattenedTypes(),  bindingAnnotations, null));
       for (ObserverMethod<?,?> observer : eventObservers)
       {
          observers.add((ObserverMethod<?, T>) observer);
@@ -785,7 +785,7 @@ public void addContext(Context context)
 =    */
    public void addObserver(ObserverMethod<?, ?> observer)
    {
-      checkEventType(observer.getObservedType());
+      //checkEventType(observer.getObservedType());
       observers.add(observer);
       log.trace(""Added observer "" + observer);
       for (BeanManagerImpl childActivity : childActivities)
@@ -993,14 +993,14 @@ public List<Decorator<?>> resolveDecorators(Set<Type> types, Annotation... bindi
    {
       checkResolveDecoratorsArguments(types, Arrays.asList(bindings));
       // TODO Fix this cast and make the resolver return a list
-      return new ArrayList<Decorator<?>>(decoratorResolver.resolve(ResolvableFactory.of(types, bindings)));
+      return new ArrayList<Decorator<?>>(decoratorResolver.resolve(ResolvableFactory.of(types, null, bindings)));
    }
    
    public List<Decorator<?>> resolveDecorators(Set<Type> types, Set<Annotation> bindings)
    {
       checkResolveDecoratorsArguments(types, bindings);
       // TODO Fix this cast and make the resolver return a list
-      return new ArrayList<Decorator<?>>(decoratorResolver.resolve(ResolvableFactory.of(types, bindings)));
+      return new ArrayList<Decorator<?>>(decoratorResolver.resolve(ResolvableFactory.of(types, bindings, null)));
    }
 
    private void checkResolveDecoratorsArguments(Set<Type> types, Collection<Annotation> bindings)",2009-08-14T00:24:39Z,189
"@@ -163,7 +163,7 @@ else if (getDeclaringBean() instanceof EnterpriseBean<?>)
     */
    protected void initDisposalMethod(BeanDeployerEnvironment environment)
    {
-      Set<DisposalMethodBean<T>> disposalBeans = environment.resolveDisposalBeans(getAnnotatedItem());
+      Set<DisposalMethodBean<?>> disposalBeans = environment.resolveDisposalBeans(getTypes(), getBindings(), getDeclaringBean());
 
       if (disposalBeans.size() == 1)
       {",2009-08-14T00:24:39Z,127
"@@ -16,6 +16,8 @@
  */
 package org.jboss.webbeans.bootstrap;
 
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -37,39 +39,35 @@
 import org.jboss.webbeans.bean.standard.AbstractStandardBean;
 import org.jboss.webbeans.bean.standard.ExtensionBean;
 import org.jboss.webbeans.ejb.EjbDescriptorCache;
-import org.jboss.webbeans.introspector.WBAnnotated;
 import org.jboss.webbeans.introspector.WBClass;
 import org.jboss.webbeans.introspector.WBMethod;
 import org.jboss.webbeans.resolution.ResolvableFactory;
-import org.jboss.webbeans.resolution.TypeSafeBeanResolver;
-import org.jboss.webbeans.resolution.TypeSafeResolver;
+import org.jboss.webbeans.resolution.TypeSafeDisposerResolver;
 
 public class BeanDeployerEnvironment
 {
 
    private final Map<WBClass<?>, AbstractClassBean<?>> classBeanMap;
    private final Map<WBMethod<?, ?>, ProducerMethodBean<?>> producerMethodBeanMap;
-   private final Map<WBMethod<?, ?>, DisposalMethodBean<?>> disposalMethodBeanMap;
    private final Set<RIBean<?>> beans;
    private final Set<ObserverMethod<?, ?>> observers;
    private final List<DisposalMethodBean<?>> allDisposalBeans;
    private final Set<DisposalMethodBean<?>> resolvedDisposalBeans;
    private final Set<DecoratorBean<?>> decorators;
    private final EjbDescriptorCache ejbDescriptors;
-   private final TypeSafeResolver<DisposalMethodBean<?>> disposalMethodResolver;
+   private final TypeSafeDisposerResolver disposalMethodResolver;
 
    public BeanDeployerEnvironment(EjbDescriptorCache ejbDescriptors, BeanManagerImpl manager)
    {
       this.classBeanMap = new HashMap<WBClass<?>, AbstractClassBean<?>>();
       this.producerMethodBeanMap = new HashMap<WBMethod<?, ?>, ProducerMethodBean<?>>();
-      this.disposalMethodBeanMap = new HashMap<WBMethod<?, ?>, DisposalMethodBean<?>>();
       this.allDisposalBeans = new ArrayList<DisposalMethodBean<?>>();
       this.resolvedDisposalBeans = new HashSet<DisposalMethodBean<?>>();
       this.beans = new HashSet<RIBean<?>>();
       this.decorators = new HashSet<DecoratorBean<?>>();
       this.observers = new HashSet<ObserverMethod<?, ?>>();
       this.ejbDescriptors = ejbDescriptors;
-      this.disposalMethodResolver = new TypeSafeBeanResolver<DisposalMethodBean<?>>(manager, allDisposalBeans);
+      this.disposalMethodResolver = new TypeSafeDisposerResolver(manager, allDisposalBeans);
    }
 
    public ProducerMethodBean<?> getProducerMethod(WBMethod<?, ?> method)
@@ -85,21 +83,6 @@ public ProducerMethodBean<?> getProducerMethod(WBMethod<?, ?> method)
          return bean;
       }
    }
-
-   
-   public DisposalMethodBean<?> getDisposalMethod(WBMethod<?, ?> method)
-   {
-      if (!producerMethodBeanMap.containsKey(method))
-      {
-         return null;
-      }
-      else
-      {
-         DisposalMethodBean<?> bean = disposalMethodBeanMap.get(method);
-         bean.initialize(this);
-         return bean;
-      }
-   }
    
    public AbstractClassBean<?> getClassBean(WBClass<?> clazz)
    {
@@ -153,7 +136,6 @@ public void addBean(DecoratorBean<?> bean)
    public void addBean(DisposalMethodBean<?> bean)
    {
       allDisposalBeans.add(bean);
-      disposalMethodBeanMap.put(bean.getAnnotatedItem(), bean);
    }
    
    public void addObserver(ObserverMethod<?, ?> observer)
@@ -198,17 +180,11 @@ public EjbDescriptorCache getEjbDescriptors()
     * @param bindings The binding types to match
     * @return The set of matching disposal methods
     */
-   public <T> Set<DisposalMethodBean<T>> resolveDisposalBeans(WBAnnotated<T, ?> annotatedItem)
+   public Set<DisposalMethodBean<?>> resolveDisposalBeans(Set<Type> types, Set<Annotation> bindings, AbstractClassBean<?> declaringBean)
    {
-      // Correct?
-      Set<DisposalMethodBean<?>> beans = disposalMethodResolver.resolve(ResolvableFactory.of(annotatedItem));
-      Set<DisposalMethodBean<T>> disposalBeans = new HashSet<DisposalMethodBean<T>>();
-      for (DisposalMethodBean<?> bean : beans)
-      {
-         disposalBeans.add((DisposalMethodBean<T>) bean);
-      }
-      resolvedDisposalBeans.addAll(disposalBeans);
-      return Collections.unmodifiableSet(disposalBeans);
+      Set<DisposalMethodBean<?>> beans = disposalMethodResolver.resolve(ResolvableFactory.of(types, bindings, declaringBean));
+      resolvedDisposalBeans.addAll(beans);
+      return Collections.unmodifiableSet(beans);
    }
 
 }",2009-08-14T00:24:39Z,190
"@@ -19,7 +19,6 @@
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import java.lang.reflect.TypeVariable;
-import java.lang.reflect.WildcardType;
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.List;
@@ -112,10 +111,10 @@ private void checkObserverMethod()
                {
                   throw new DefinitionException(""Cannot use a type variable "" + type + "" in an parameterized type "" + toString());
                }
-               else if (type instanceof WildcardType)
-               {
-                  throw new DefinitionException(""Cannot use a wildcard variable "" + type + "" in an parameterized type "" + toString());
-               }
+//               else if (type instanceof WildcardType)
+//               {
+//                  throw new DefinitionException(""Cannot use a wildcard variable "" + type + "" in an parameterized type "" + toString());
+//               }
             }
          }
       }",2009-08-14T00:24:39Z,191
"@@ -20,6 +20,8 @@
 import java.lang.reflect.Type;
 import java.util.Set;
 
+import org.jboss.webbeans.bean.AbstractClassBean;
+
 public abstract class ForwardingResolvable implements Resolvable
 {
    
@@ -54,6 +56,11 @@ public Class<?> getJavaClass()
    {
       return delegate().getJavaClass();
    }
+   
+   public AbstractClassBean<?> getDeclaringBean()
+   {
+      return delegate().getDeclaringBean();
+   }
 
    @Override
    public boolean equals(Object obj)",2009-08-14T00:24:39Z,192
"@@ -20,6 +20,8 @@
 import java.lang.reflect.Type;
 import java.util.Set;
 
+import org.jboss.webbeans.bean.AbstractClassBean;
+
 /**
  * Something that is resovable by the resolver. A resolvable is defined by it's
  * bindings and type closure
@@ -78,5 +80,11 @@ public interface Resolvable
     * @return the java class
     */
    public Class<?> getJavaClass();
+   
+   /**
+    * Get the declaring the injection point, or null if there is none
+    * @return
+    */
+   public AbstractClassBean<?> getDeclaringBean();
 
 }",2009-08-14T00:24:39Z,193
"@@ -24,6 +24,7 @@
 import java.util.Map;
 import java.util.Set;
 
+import org.jboss.webbeans.bean.AbstractClassBean;
 import org.jboss.webbeans.introspector.WBAnnotated;
 import org.jboss.webbeans.literal.CurrentLiteral;
 import org.jboss.webbeans.util.Reflections;
@@ -41,18 +42,18 @@ public static Resolvable of(WBAnnotated<?, ?> element)
       {
          Set<Type> types = new HashSet<Type>();
          types.add(element.getBaseType());
-         return new ResolvableImpl(element.getBindings(), types);
+         return new ResolvableImpl(element.getBindings(), types, null);
       }
    }
 
-   public static Resolvable of(Set<Type> typeClosure, Set<Annotation> bindings)
+   public static Resolvable of(Set<Type> typeClosure, Set<Annotation> bindings, AbstractClassBean<?> declaringBean)
    {
-      return new ResolvableImpl(bindings, typeClosure);
+      return new ResolvableImpl(bindings, typeClosure, declaringBean);
    }
 
-   public static Resolvable of(Set<Type> typeClosure, Annotation... bindings)
+   public static Resolvable of(Set<Type> typeClosure, AbstractClassBean<?> declaringBean, Annotation... bindings)
    {
-      return new ResolvableImpl(new HashSet<Annotation>(Arrays.asList(bindings)), typeClosure);
+      return new ResolvableImpl(new HashSet<Annotation>(Arrays.asList(bindings)), typeClosure, declaringBean);
    }
 
    private ResolvableFactory() {}
@@ -63,8 +64,9 @@ private static class ResolvableImpl implements Resolvable
       private final Set<Annotation> bindings;
       private final Map<Class<? extends Annotation>, Annotation> annotations;
       private final Set<Type> typeClosure;
+      private final AbstractClassBean<?> declaringBean;
 
-      public ResolvableImpl(Set<Annotation> bindings, Set<Type> typeClosure)
+      public ResolvableImpl(Set<Annotation> bindings, Set<Type> typeClosure, AbstractClassBean<?> declaringBean)
       {
          this.bindings = bindings;
          if (bindings.size() == 0)
@@ -77,6 +79,7 @@ public ResolvableImpl(Set<Annotation> bindings, Set<Type> typeClosure)
          {
             annotations.put(annotation.annotationType(), annotation);
          }
+         this.declaringBean = declaringBean;
       }
 
       public Set<Annotation> getBindings()
@@ -109,6 +112,11 @@ public Class<?> getJavaClass()
          // No underlying java class
          return null;
       }
+      
+      public AbstractClassBean<?> getDeclaringBean()
+      {
+         return declaringBean;
+      }
 
       @Override
       public String toString()",2009-08-14T00:24:39Z,193
"@@ -31,6 +31,7 @@
 import javax.enterprise.inject.spi.InjectionPoint;
 
 import org.jboss.webbeans.BeanManagerImpl;
+import org.jboss.webbeans.bean.AbstractClassBean;
 import org.jboss.webbeans.injection.WBInjectionPoint;
 import org.jboss.webbeans.introspector.AnnotationStore;
 import org.jboss.webbeans.introspector.WBAnnotated;
@@ -196,6 +197,11 @@ public Set<Type> getTypeClosure()
    {
       return typeClosure;
    }
+   
+   public AbstractClassBean<?> getDeclaringBean()
+   {
+      return null;
+   }
 
    @Override
    public Type getBaseType()",2009-08-14T00:24:39Z,193
"@@ -0,0 +1,74 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2008, Red Hat Middleware LLC, and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,  
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.webbeans.resolution;
+
+import java.util.Collections;
+import java.util.Set;
+
+import org.jboss.webbeans.BeanManagerImpl;
+import org.jboss.webbeans.bean.DisposalMethodBean;
+import org.jboss.webbeans.util.Beans;
+import org.jboss.webbeans.util.Reflections;
+
+/**
+ * @author pmuir
+ *
+ */
+public class TypeSafeDisposerResolver extends TypeSafeResolver<DisposalMethodBean<?>>
+{
+
+   private final BeanManagerImpl manager;
+
+   public TypeSafeDisposerResolver(BeanManagerImpl manager, Iterable<DisposalMethodBean<?>> disposers)
+   {
+      super(disposers);
+      this.manager = manager;
+   }
+
+   @Override
+   protected boolean matches(Resolvable resolvable, DisposalMethodBean<?> disposer)
+   {
+         return resolvable.getDeclaringBean().equals(disposer.getDeclaringBean()) && Reflections.isAssignableFrom(disposer.getType(), resolvable.getTypeClosure()) && Beans.containsAllBindings(disposer.getBindings(), resolvable.getBindings(), manager);
+   }
+   
+   /**
+    * @return the manager
+    */
+   public BeanManagerImpl getManager()
+   {
+      return manager;
+   }
+
+   @Override
+   protected Set<DisposalMethodBean<?>> filterResult(Set<DisposalMethodBean<?>> matched)
+   {
+      return matched;
+   }
+
+   @Override
+   protected Iterable<ResolvableTransformer> getTransformers()
+   {
+      return Collections.emptySet();
+   }
+
+   @Override
+   protected Set<DisposalMethodBean<?>> sortResult(Set<DisposalMethodBean<?>> matched)
+   {
+      return matched;
+   }
+
+}",2009-08-14T00:24:39Z,194
"@@ -0,0 +1,27 @@
+package org.jboss.webbeans.test.unit.implementation.producer.method;
+
+import javax.enterprise.context.spi.CreationalContext;
+import javax.enterprise.inject.spi.Bean;
+
+import org.jboss.testharness.impl.packaging.Artifact;
+import org.jboss.webbeans.test.AbstractWebBeansTest;
+import org.testng.annotations.Test;
+
+@Artifact
+public class DisposalMethodOnOtherBeanNotResolvedTest extends AbstractWebBeansTest
+{
+   @Test
+   public void test()
+   {
+      FooDisposer.reset();
+      FooProducer.reset();
+      Bean<Foo> bean = getBean(Foo.class);
+      CreationalContext<Foo> ctx = getCurrentManager().createCreationalContext(bean);
+      Foo instance = bean.create(ctx);
+      assert instance.getBlah().equals(""foo!"");
+      bean.destroy(instance, ctx);
+      assert !FooDisposer.isDisposed();
+      assert FooProducer.isDisposed();
+   }
+
+}",2009-08-14T00:24:39Z,195
"@@ -0,0 +1,41 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2008, Red Hat Middleware LLC, and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,  
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.webbeans.test.unit.implementation.producer.method;
+
+/**
+ * @author pmuir
+ *
+ */
+public class Foo
+{
+   
+   private final String blah;
+   
+   public Foo(String blah)
+   {
+      this.blah = blah;
+   }
+
+   /**
+    * @return the blah
+    */
+   public String getBlah()
+   {
+      return blah;
+   }
+
+}",2009-08-14T00:24:39Z,196
"@@ -0,0 +1,56 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2008, Red Hat Middleware LLC, and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,  
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.webbeans.test.unit.implementation.producer.method;
+
+import javax.enterprise.inject.Any;
+import javax.enterprise.inject.Disposes;
+import javax.enterprise.inject.Produces;
+
+/**
+ * @author pmuir
+ *
+ */
+public class FooDisposer
+{
+
+   private static boolean disposed;
+   
+   public static void reset()
+   {
+      disposed = false;
+   }
+   
+   void disposeFoo(@Disposes @Any Foo foo)
+   {
+      disposed = true;
+   }
+   
+   /**
+    * @return the disposed
+    */
+   public static boolean isDisposed()
+   {
+      return disposed;
+   }
+   
+   @Produces @Important
+   public Foo getFoo()
+   {
+      return new Foo(""bar!"");
+   }
+   
+}",2009-08-14T00:24:39Z,197
"@@ -0,0 +1,55 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2008, Red Hat Middleware LLC, and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,  
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.webbeans.test.unit.implementation.producer.method;
+
+import javax.enterprise.inject.Current;
+import javax.enterprise.inject.Disposes;
+import javax.enterprise.inject.Produces;
+
+/**
+ * @author pmuir
+ *
+ */
+public class FooProducer
+{
+
+   @Produces Foo getFoo()
+   {
+      return new Foo(""foo!"");
+   }
+   
+   private static boolean disposed;
+   
+   public static void reset()
+   {
+      disposed = false;
+   }
+   
+   public void disposeFoo(@Disposes @Current Foo foo)
+   {
+      disposed = true;
+   }
+   
+   /**
+    * @return the disposed
+    */
+   public static boolean isDisposed()
+   {
+      return disposed;
+   }
+   
+}",2009-08-14T00:24:39Z,198
"@@ -16,6 +16,8 @@
  */
 package org.jboss.weld.bean.builtin;
 
+import static org.jboss.weld.ContainerState.INITIALIZED;
+import static org.jboss.weld.ContainerState.VALIDATED;
 import static org.jboss.weld.logging.messages.BeanManagerMessage.METHOD_NOT_AVAILABLE_DURING_INITIALIZATION;
 
 import java.io.ObjectStreamException;
@@ -63,61 +65,61 @@ public BeanManagerImpl delegate() {
 
     @Override
     public Object getReference(Bean<?> bean, Type beanType, CreationalContext<?> ctx) {
-        checkContainerInitialized(""getReference()"");
+        checkContainerValidated(""getReference()"");
         return super.getReference(bean, beanType, ctx);
     }
 
     @Override
     public Object getInjectableReference(InjectionPoint ij, CreationalContext<?> ctx) {
-        checkContainerInitialized(""getInjectableReference()"");
+        checkContainerValidated(""getInjectableReference()"");
         return super.getInjectableReference(ij, ctx);
     }
 
     @Override
     public Set<Bean<?>> getBeans(Type beanType, Annotation... qualifiers) {
-        checkContainerInitialized(""getBeans()"");
+        checkContainerValidated(""getBeans()"");
         return super.getBeans(beanType, qualifiers);
     }
 
     @Override
     public Set<Bean<?>> getBeans(String name) {
-        checkContainerInitialized(""getBeans()"");
+        checkContainerValidated(""getBeans()"");
         return super.getBeans(name);
     }
 
     @Override
     public Bean<?> getPassivationCapableBean(String id) {
-        checkContainerInitialized(""getPassivationCapableBean()"");
+        checkContainerValidated(""getPassivationCapableBean()"");
         return super.getPassivationCapableBean(id);
     }
 
     @Override
     public <X> Bean<? extends X> resolve(Set<Bean<? extends X>> beans) {
-        checkContainerInitialized(""resolve()"");
+        checkContainerValidated(""resolve()"");
         return super.resolve(beans);
     }
 
     @Override
     public void validate(InjectionPoint injectionPoint) {
-        checkContainerInitialized(""validate()"", ContainerState.VALIDATED, ContainerState.INITIALIZED);
+        checkContainerValidated(""validate()"");
         super.validate(injectionPoint);
     }
 
     @Override
     public <T> Set<ObserverMethod<? super T>> resolveObserverMethods(T event, Annotation... qualifiers) {
-        checkContainerInitialized(""resolveObserverMethods()"");
+        checkContainerValidated(""resolveObserverMethods()"");
         return super.resolveObserverMethods(event, qualifiers);
     }
 
     @Override
     public List<Decorator<?>> resolveDecorators(Set<Type> types, Annotation... qualifiers) {
-        checkContainerInitialized(""resolveDecorators()"");
+        checkContainerValidated(""resolveDecorators()"");
         return super.resolveDecorators(types, qualifiers);
     }
 
     @Override
     public List<Interceptor<?>> resolveInterceptors(InterceptionType type, Annotation... interceptorBindings) {
-        checkContainerInitialized(""resolveInterceptors()"");
+        checkContainerValidated(""resolveInterceptors()"");
         return super.resolveInterceptors(type, interceptorBindings);
     }
 
@@ -126,29 +128,19 @@ protected Object readResolve() throws ObjectStreamException {
     }
 
     /**
-     * Verifies that the container has been initialized. If no {@link ContainerState} arguments are provided this method
-     * verifies that the container is in the INITIALIZED state. If the arguments are provided, this method verifies that the
-     * container is in one of the states. Otherwise, {@link IllegalStateException} is thrown.
+     * Verifies that the container has been validated. If it hasn't been, an {@link IllegalStateException} is thrown.
      *
      * @param methodName
      * @throws IllegalStateException If the application initialization is not finished yet
      */
-    private void checkContainerInitialized(String methodName, ContainerState... allowedStates) {
+    private void checkContainerValidated(String methodName) {
         if (this.container == null) {
             this.container = Container.instance();
         }
-        if (allowedStates == null || allowedStates.length == 0) {
-            if (ContainerState.INITIALIZED.equals(container.getState())) {
-                return;
-            }
-        } else {
-            for (ContainerState state : allowedStates) {
-                if (container.getState().equals(state)) {
-                    return;
-                }
-            }
+        ContainerState state = container.getState();
+        if (!INITIALIZED.equals(state) && !VALIDATED.equals(state)) {
+            throw new IllegalStateException(METHOD_NOT_AVAILABLE_DURING_INITIALIZATION, methodName);
         }
-        throw new IllegalStateException(METHOD_NOT_AVAILABLE_DURING_INITIALIZATION, methodName);
     }
 
     public static BeanManagerImpl unwrap(BeanManager manager) {",2013-03-18T19:23:01Z,199
"@@ -22,9 +22,12 @@
 import java.lang.reflect.Member;
 import java.lang.reflect.Type;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
 
+import javax.enterprise.context.Dependent;
+import javax.enterprise.context.spi.CreationalContext;
 import javax.enterprise.event.Observes;
 import javax.enterprise.inject.spi.AfterBeanDiscovery;
 import javax.enterprise.inject.spi.AfterDeploymentValidation;
@@ -122,43 +125,7 @@ private void testUnavailableMethods(BeanManager beanManager) {
         }
 
         try {
-            beanManager.validate(new InjectionPoint() {
-
-                @Override
-                public boolean isTransient() {
-                    return false;
-                }
-
-                @Override
-                public boolean isDelegate() {
-                    return false;
-                }
-
-                @Override
-                public Type getType() {
-                    return Foo.class;
-                }
-
-                @Override
-                public Set<Annotation> getQualifiers() {
-                    return null;
-                }
-
-                @Override
-                public Member getMember() {
-                    return null;
-                }
-
-                @Override
-                public Bean<?> getBean() {
-                    return null;
-                }
-
-                @Override
-                public Annotated getAnnotated() {
-                    return null;
-                }
-            });
+            beanManager.validate(new FooInjectionPoint());
             fail(""validate() must not be available"");
         } catch (IllegalStateException e) {
             // Expected
@@ -181,7 +148,118 @@ void observeInjectionPoint(@Observes ProcessInjectionPoint<?, ?> event) {
     }
 
     void validate(@Observes AfterDeploymentValidation event, BeanManager manager) {
-        manager.validate(injectionPoint); // should pass
+        testAvailableMethods(manager);
+    }
+
+    private void testAvailableMethods(BeanManager beanManager) {
+        beanManager.getReference(new FooBean(), Foo.class, beanManager.createCreationalContext(null));
+        beanManager.getBeans(""foo"");
+        beanManager.getBeans(Foo.class);
+        beanManager.getInjectableReference(
+                beanManager.createInjectionPoint(beanManager.createAnnotatedType(Foo.class).getFields().iterator().next()),
+                beanManager.createCreationalContext(null));
+        beanManager.resolve(null);
+        beanManager.resolveObserverMethods(new Foo());
+        beanManager.resolveInterceptors(InterceptionType.AROUND_INVOKE, new AnnotationLiteral<Transactional>() { });
+        beanManager.resolveDecorators(new HashSet<Type>(Arrays.asList(Foo.class)));
+        beanManager.validate(injectionPoint);
+        beanManager.getPassivationCapableBean(""foo"");
+    }
+
+
+    private static class FooBean implements Bean<Foo> {
+        @Override
+        public Class<?> getBeanClass() {
+            return Foo.class;
+        }
+
+        @Override
+        public Set<InjectionPoint> getInjectionPoints() {
+            return Collections.emptySet();
+        }
+
+        @Override
+        public boolean isNullable() {
+            return false;
+        }
+
+        @Override
+        public Set<Type> getTypes() {
+            HashSet<Type> set = new HashSet<Type>();
+            set.add(Foo.class);
+            return set;
+        }
+
+        @Override
+        public Set<Annotation> getQualifiers() {
+            return Collections.emptySet();
+        }
+
+        @Override
+        public Class<? extends Annotation> getScope() {
+            return Dependent.class;
+        }
+
+        @Override
+        public String getName() {
+            return null;
+        }
+
+        @Override
+        public Set<Class<? extends Annotation>> getStereotypes() {
+            return Collections.emptySet();
+        }
+
+        @Override
+        public boolean isAlternative() {
+            return false;
+        }
+
+        @Override
+        public Foo create(CreationalContext<Foo> creationalContext) {
+            return null;
+        }
+
+        @Override
+        public void destroy(Foo instance, CreationalContext<Foo> creationalContext) {
+        }
     }
 
+    private static class FooInjectionPoint implements InjectionPoint {
+
+        @Override
+        public boolean isTransient() {
+            return false;
+        }
+
+        @Override
+        public boolean isDelegate() {
+            return false;
+        }
+
+        @Override
+        public Type getType() {
+            return Foo.class;
+        }
+
+        @Override
+        public Set<Annotation> getQualifiers() {
+            return null;
+        }
+
+        @Override
+        public Member getMember() {
+            return null;
+        }
+
+        @Override
+        public Bean<?> getBean() {
+            return null;
+        }
+
+        @Override
+        public Annotated getAnnotated() {
+            return null;
+        }
+    }
 }",2013-03-18T19:23:01Z,200
"@@ -120,6 +120,12 @@
             <groupId>org.jboss.spec.javax.ws.rs</groupId>
             <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
         </dependency>
+        
+        <dependency>
+            <groupId>org.jboss.resteasy</groupId>
+            <artifactId>resteasy-jaxrs</artifactId>
+            <version>2.3.4.Final</version>
+        </dependency>
 
         <dependency>
             <groupId>org.slf4j</groupId>",2012-07-23T23:17:01Z,201
"@@ -0,0 +1,46 @@
+/*
+* JBoss, Home of Professional Open Source
+* Copyright 2005, JBoss Inc., and individual contributors as indicated
+* by the @authors tag. See the copyright.txt in the distribution for a
+* full listing of individual contributors.
+*
+* This is free software; you can redistribute it and/or modify it
+* under the terms of the GNU Lesser General Public License as
+* published by the Free Software Foundation; either version 2.1 of
+* the License, or (at your option) any later version.
+*
+* This software is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+* Lesser General Public License for more details.
+*
+* You should have received a copy of the GNU Lesser General Public
+* License along with this software; if not, write to the Free
+* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+* 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+*/
+package org.jboss.resteasy.cdi.interceptors;
+
+import javax.interceptor.AroundInvoke;
+import javax.interceptor.InvocationContext;
+
+/**
+ * 
+ * @author <a href=""ron.sigal@jboss.com"">Ron Sigal</a>
+ * @version $Revision: 1.1 $
+ *
+ * Copyright Jul 21, 2012
+ */
+public class Interceptor0
+{
+   @AroundInvoke
+   public Object intercept(InvocationContext ctx) throws Exception
+   {
+	  System.out.println(""*** Intercepting call to Interceptor0.intercept()"");
+      VisitList.add(this);
+      Object result = ctx.proceed();
+      System.out.println(""*** Back from call to Interceptor0.intercept()"");
+      return result;
+   }
+}
+",2012-07-23T23:17:01Z,202
"@@ -0,0 +1,46 @@
+/*
+* JBoss, Home of Professional Open Source
+* Copyright 2005, JBoss Inc., and individual contributors as indicated
+* by the @authors tag. See the copyright.txt in the distribution for a
+* full listing of individual contributors.
+*
+* This is free software; you can redistribute it and/or modify it
+* under the terms of the GNU Lesser General Public License as
+* published by the Free Software Foundation; either version 2.1 of
+* the License, or (at your option) any later version.
+*
+* This software is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+* Lesser General Public License for more details.
+*
+* You should have received a copy of the GNU Lesser General Public
+* License along with this software; if not, write to the Free
+* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+* 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+*/
+package org.jboss.resteasy.cdi.interceptors;
+
+import javax.interceptor.AroundInvoke;
+import javax.interceptor.InvocationContext;
+
+/**
+ * 
+ * @author <a href=""ron.sigal@jboss.com"">Ron Sigal</a>
+ * @version $Revision: 1.1 $
+ *
+ * Copyright Jul 21, 2012
+ */
+public class Interceptor1
+{   
+   @AroundInvoke
+   public Object intercept(InvocationContext ctx) throws Exception
+   {
+      System.out.println(""*** Intercepting call to Interceptor1.intercept()"");
+      VisitList.add(this);
+      Object result = ctx.proceed();
+      System.out.println(""*** Back from call to Interceptor1.intercept()"");
+      return result;
+   }
+}
+",2012-07-23T23:17:01Z,203
"@@ -0,0 +1,49 @@
+/*
+* JBoss, Home of Professional Open Source
+* Copyright 2005, JBoss Inc., and individual contributors as indicated
+* by the @authors tag. See the copyright.txt in the distribution for a
+* full listing of individual contributors.
+*
+* This is free software; you can redistribute it and/or modify it
+* under the terms of the GNU Lesser General Public License as
+* published by the Free Software Foundation; either version 2.1 of
+* the License, or (at your option) any later version.
+*
+* This software is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+* Lesser General Public License for more details.
+*
+* You should have received a copy of the GNU Lesser General Public
+* License along with this software; if not, write to the Free
+* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+* 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+*/
+package org.jboss.resteasy.cdi.interceptors;
+
+import javax.interceptor.AroundInvoke;
+import javax.interceptor.Interceptor;
+import javax.interceptor.InvocationContext;
+
+/**
+ * 
+ * @author <a href=""ron.sigal@jboss.com"">Ron Sigal</a>
+ * @version $Revision: 1.1 $
+ *
+ * Copyright Jul 21, 2012
+ */
+@Interceptor
+@TestBinding(placement=""CLASS"")
+public class Interceptor2
+{
+   @AroundInvoke
+   public Object intercept(InvocationContext ctx) throws Exception
+   {
+      System.out.println(""*** Intercepting call to Interceptor2.intercept()"");
+      VisitList.add(this);
+      Object result = ctx.proceed();
+      System.out.println(""*** Back from call to Interceptor2.intercept()"");
+      return result;
+   }
+}
+",2012-07-23T23:17:01Z,204
"@@ -0,0 +1,49 @@
+/*
+* JBoss, Home of Professional Open Source
+* Copyright 2005, JBoss Inc., and individual contributors as indicated
+* by the @authors tag. See the copyright.txt in the distribution for a
+* full listing of individual contributors.
+*
+* This is free software; you can redistribute it and/or modify it
+* under the terms of the GNU Lesser General Public License as
+* published by the Free Software Foundation; either version 2.1 of
+* the License, or (at your option) any later version.
+*
+* This software is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+* Lesser General Public License for more details.
+*
+* You should have received a copy of the GNU Lesser General Public
+* License along with this software; if not, write to the Free
+* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+* 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+*/
+package org.jboss.resteasy.cdi.interceptors;
+
+import javax.interceptor.AroundInvoke;
+import javax.interceptor.Interceptor;
+import javax.interceptor.InvocationContext;
+
+/**
+ * 
+ * @author <a href=""ron.sigal@jboss.com"">Ron Sigal</a>
+ * @version $Revision: 1.1 $
+ *
+ * Copyright Jul 21, 2012
+ */
+@Interceptor
+@TestBinding(placement=""METHOD"")
+public class Interceptor3
+{
+   @AroundInvoke
+   public Object intercept(InvocationContext ctx) throws Exception
+   {
+      System.out.println(""*** Intercepting call to Interceptor3.intercept()"");
+      VisitList.add(this);
+      Object result = ctx.proceed();
+      System.out.println(""*** Back from call to Interceptor3.intercept()"");
+      return result;
+   }
+}
+",2012-07-23T23:17:01Z,205
"@@ -0,0 +1,77 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2012, Red Hat, Inc. and/or its affiliates, and individual
+ * contributors by the @authors tag. See the copyright.txt in the 
+ * distribution for a full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,  
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.resteasy.cdi.interceptors;
+
+import java.util.ArrayList;
+
+import javax.enterprise.context.RequestScoped;
+import javax.interceptor.Interceptors;
+import javax.ws.rs.POST;
+import javax.ws.rs.Path;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+
+/**
+ * 
+ * @author <a href=""ron.sigal@jboss.com"">Ron Sigal</a>
+ * @version $Revision: 1.1 $
+ *
+ * Copyright May 7, 2012
+ */
+@Path(""/"")
+@RequestScoped
+@Interceptors ({Interceptor0.class})
+@TestBinding(placement=""CLASS"")
+public class InterceptorResource
+{  
+   @POST
+   @Path(""test"")
+   @Produces(MediaType.TEXT_PLAIN)
+   @Interceptors ({Interceptor1.class})
+   @TestBinding(placement=""METHOD"")
+   public Response test()
+   {
+      ArrayList<Object> visitList = VisitList.getList();
+      for (int i = 0; i < visitList.size(); i++)
+      {
+         System.out.println(visitList.get(i).toString());
+      }
+      boolean status = true;
+//      if (!(visitList.get(0) instanceof Interceptor0))
+//      {
+//         System.out.println(""Interceptor0 missing"");
+//         status = false;
+//      }
+//      if (!(visitList.get(1) instanceof Interceptor2))
+//      {
+//         System.out.println(""Interceptor2 missing"");
+//         status = false;
+//      }
+//      if (!(visitList.get(2) instanceof Interceptor1))
+//      {
+//         System.out.println(""Interceptor1 missing"");
+//         status = false;
+//      }
+//      if (!(visitList.get(3) instanceof Interceptor3))
+//      {
+//         System.out.println(""Interceptor3 missing"");
+//         status = false;
+//      }
+      return status ? Response.ok().build() : Response.serverError().build();
+   }
+}",2012-07-23T23:17:01Z,206
"@@ -0,0 +1,35 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2012, Red Hat, Inc. and/or its affiliates, and individual
+ * contributors by the @authors tag. See the copyright.txt in the 
+ * distribution for a full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,  
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.resteasy.cdi.interceptors;
+
+import javax.ws.rs.ApplicationPath;
+import javax.ws.rs.core.Application;
+
+/**
+ * A class extending {@link Application} and annotated with @ApplicationPath is the Java EE 6
+ * ""no XML"" approach to activating JAX-RS.
+ * 
+ * <p>
+ * Resources are served relative to the servlet path specified in the {@link ApplicationPath}
+ * annotation.
+ * </p>
+ */
+@ApplicationPath(""/rest"")
+public class JaxRsActivator extends Application
+{
+   /* class body intentionally left blank */
+}",2012-07-23T23:17:01Z,207
"@@ -0,0 +1,47 @@
+/*
+* JBoss, Home of Professional Open Source
+* Copyright 2005, JBoss Inc., and individual contributors as indicated
+* by the @authors tag. See the copyright.txt in the distribution for a
+* full listing of individual contributors.
+*
+* This is free software; you can redistribute it and/or modify it
+* under the terms of the GNU Lesser General Public License as
+* published by the Free Software Foundation; either version 2.1 of
+* the License, or (at your option) any later version.
+*
+* This software is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+* Lesser General Public License for more details.
+*
+* You should have received a copy of the GNU Lesser General Public
+* License along with this software; if not, write to the Free
+* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+* 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+*/
+package org.jboss.resteasy.cdi.interceptors;
+
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.ElementType.TYPE;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import javax.interceptor.InterceptorBinding;
+
+/**
+ * 
+ * @author <a href=""ron.sigal@jboss.com"">Ron Sigal</a>
+ * @version $Revision: 1.1 $
+ *
+ * Copyright Jul 21, 2012
+ */
+@InterceptorBinding
+@Target({TYPE, METHOD})
+@Retention(RUNTIME)
+public @interface TestBinding
+{
+   String placement() default ""CLASS"";
+}
+",2012-07-23T23:17:01Z,208
"@@ -0,0 +1,47 @@
+/*
+* JBoss, Home of Professional Open Source
+* Copyright 2005, JBoss Inc., and individual contributors as indicated
+* by the @authors tag. See the copyright.txt in the distribution for a
+* full listing of individual contributors.
+*
+* This is free software; you can redistribute it and/or modify it
+* under the terms of the GNU Lesser General Public License as
+* published by the Free Software Foundation; either version 2.1 of
+* the License, or (at your option) any later version.
+*
+* This software is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+* Lesser General Public License for more details.
+*
+* You should have received a copy of the GNU Lesser General Public
+* License along with this software; if not, write to the Free
+* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+* 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+*/
+package org.jboss.resteasy.cdi.interceptors;
+
+import java.util.ArrayList;
+
+/**
+ * 
+ * @author <a href=""ron.sigal@jboss.com"">Ron Sigal</a>
+ * @version $Revision: 1.1 $
+ *
+ * Copyright Jul 21, 2012
+ */
+public class VisitList
+{
+   static private ArrayList<Object> visitList = new ArrayList<Object>();
+   
+   static public void add(Object interceptor)
+   {
+      visitList.add(interceptor);
+   }
+   
+   static public ArrayList<Object> getList()
+   {
+      return new ArrayList<Object>(visitList);
+   }
+}
+",2012-07-23T23:17:01Z,209
"@@ -0,0 +1,84 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2012, Red Hat, Inc. and/or its affiliates, and individual
+ * contributors by the @authors tag. See the copyright.txt in the 
+ * distribution for a full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,  
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.resteasy.test.cdi.interceptors;
+
+import static org.junit.Assert.assertEquals;
+
+import java.util.logging.Logger;
+
+import javax.inject.Inject;
+import javax.swing.text.Utilities;
+
+import org.jboss.arquillian.container.test.api.Deployment;
+import org.jboss.arquillian.junit.Arquillian;
+import org.jboss.resteasy.cdi.interceptors.Interceptor2;
+import org.jboss.resteasy.cdi.interceptors.Interceptor3;
+import org.jboss.resteasy.cdi.interceptors.InterceptorResource;
+import org.jboss.resteasy.cdi.interceptors.Interceptor0;
+import org.jboss.resteasy.cdi.interceptors.Interceptor1;
+import org.jboss.resteasy.cdi.interceptors.JaxRsActivator;
+import org.jboss.resteasy.cdi.interceptors.TestBinding;
+import org.jboss.resteasy.cdi.interceptors.VisitList;
+import org.jboss.resteasy.client.ClientRequest;
+import org.jboss.resteasy.client.ClientResponse;
+import org.jboss.shrinkwrap.api.Archive;
+import org.jboss.shrinkwrap.api.ShrinkWrap;
+import org.jboss.shrinkwrap.api.asset.EmptyAsset;
+import org.jboss.shrinkwrap.api.spec.WebArchive;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+/**
+ * This is a collection of tests addressed to the interactions of 
+ * Resteasy, CDI, EJB, and so forth in the context of a JEE Application Server.
+ * 
+ * It tests the injection of a variety of beans into Resteasy objects.
+ * 
+ * @author <a href=""ron.sigal@jboss.com"">Ron Sigal</a>
+ * @version $Revision: 1.1 $
+ *
+ * Copyright May 8, 2012
+ */
+@RunWith(Arquillian.class)
+public class InterceptorTest
+{
+	@Deployment
+	public static Archive<?> createTestArchive()
+	{
+		WebArchive war = ShrinkWrap.create(WebArchive.class, ""resteasy-cdi-ejb-test.war"")
+		    .addClasses(JaxRsActivator.class, Utilities.class)
+            .addClasses(InterceptorResource.class, Interceptor0.class, Interceptor1.class)
+            .addClasses(TestBinding.class, Interceptor2.class, Interceptor3.class)
+            .addClasses(VisitList.class)
+		    .addAsWebInfResource(""interceptorBeans.xml"", ""beans.xml"");
+	   System.out.println(war.toString(true));
+	   return war;
+	}
+	   
+	/**
+	 */
+	@Test
+	public void test() throws Exception
+	{
+	   System.out.println(""starting testVerifyScopes()"");
+	   ClientRequest request = new ClientRequest(""http://localhost:8080/resteasy-cdi-ejb-test/rest/test/"");
+	   ClientResponse<?> response = request.post();
+	   System.out.println(""Status: "" + response.getStatus());
+	   assertEquals(200, response.getStatus());
+	   response.releaseConnection();
+	}
+}",2012-07-23T23:17:01Z,210
"@@ -0,0 +1,8 @@
+<beans xmlns=""http://java.sun.com/xml/ns/javaee""
+xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+xsi:schemaLocation=""http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/beans_1_0.xsd"">
+<interceptors>
+<class>org.jboss.resteasy.cdi.interceptors.Interceptor2</class>
+<class>org.jboss.resteasy.cdi.interceptors.Interceptor3</class>
+</interceptors>
+</beans>",2012-07-23T23:17:01Z,211
"@@ -70,6 +70,7 @@
 import javax.inject.Scope;
 import java.beans.Introspector;
 import java.lang.annotation.Annotation;
+import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashSet;
@@ -106,21 +107,6 @@ private static <T> InterceptorMetadata<T>[] emptyInterceptorMetadataArray() {
         return cast(EMPTY_INTERCEPTOR_METADATA_ARRAY);
     }
 
-    private InterceptorMetadata<SerializableContextual<?, ?>>[] toSerializableContextualArray(List<Interceptor<?>> interceptors) {
-        List<InterceptorMetadata<SerializableContextual<Interceptor<?>, ?>>> serializableContextuals = new ArrayList<InterceptorMetadata<SerializableContextual<Interceptor<?>, ?>>>();
-        for (Interceptor<?> interceptor : interceptors) {
-
-            SerializableContextualImpl<Interceptor<?>, ?> contextual = new SerializableContextualImpl(interceptor, getServices().get(ContextualStore.class));
-            if (interceptor instanceof InterceptorImpl) {
-                serializableContextuals.add(beanManager.getInterceptorMetadataReader().getInterceptorMetadata(new SerializableContextualInterceptorReference(contextual, WeldInterceptorClassMetadata.of(((InterceptorImpl) interceptor).getWeldAnnotated()))));
-            } else {
-                //custom interceptor
-                serializableContextuals.add(new CustomInterceptorMetadata(new SerializableContextualInterceptorReference(contextual, null), beanManager.getInterceptorMetadataReader().getClassMetadata(interceptor.getBeanClass())));
-            }
-        }
-        return serializableContextuals.toArray(AbstractClassBean.<SerializableContextual<?, ?>>emptyInterceptorMetadataArray());
-    }
-
     // Logger
     private static final LocLogger log = loggerFactory().getLogger(BEAN);
 
@@ -184,122 +170,9 @@ public void initialize(BeanDeployerEnvironment environment) {
         initTargetClassInterceptors();
     }
 
-    protected void initInterceptionModelForType() {
-        ClassMetadata<?> classMetadata = beanManager.getInterceptorMetadataReader().getClassMetadata(getType());
-
-        InterceptionModelBuilder<ClassMetadata<?>, ?> builder = InterceptionModelBuilder.<ClassMetadata<?>>newBuilderFor(classMetadata);
-
-        // initialize CDI interceptors
-        Set<Annotation> classBindingAnnotations = new InterceptorBindingSet(beanManager);
-        classBindingAnnotations.addAll(beanManager.extractInterceptorBindings(getWeldAnnotated().getAnnotations()));
-        for (Class<? extends Annotation> annotation : getStereotypes()) {
-            classBindingAnnotations.addAll(beanManager.extractInterceptorBindings(beanManager.getStereotypeDefinition(annotation)));
-        }
-        if (classBindingAnnotations.size() > 0) {
-            if (Beans.findInterceptorBindingConflicts(beanManager, classBindingAnnotations)) {
-                throw new DeploymentException(CONFLICTING_INTERCEPTOR_BINDINGS, getType());
-            }
-
-            Annotation[] classBindingAnnotationsArray = classBindingAnnotations.toArray(new Annotation[classBindingAnnotations.size()]);
-
-            List<Interceptor<?>> resolvedPostConstructInterceptors = beanManager.resolveInterceptors(InterceptionType.POST_CONSTRUCT, classBindingAnnotationsArray);
-            builder.interceptPostConstruct().with(toSerializableContextualArray(resolvedPostConstructInterceptors));
-
-            List<Interceptor<?>> resolvedPreDestroyInterceptors = beanManager.resolveInterceptors(InterceptionType.PRE_DESTROY, classBindingAnnotationsArray);
-            builder.interceptPreDestroy().with(toSerializableContextualArray(resolvedPreDestroyInterceptors));
-
-            List<Interceptor<?>> resolvedPrePassivateInterceptors = beanManager.resolveInterceptors(InterceptionType.PRE_PASSIVATE, classBindingAnnotationsArray);
-            builder.interceptPrePassivate().with(toSerializableContextualArray(resolvedPrePassivateInterceptors));
-
-            List<Interceptor<?>> resolvedPostActivateInterceptors = beanManager.resolveInterceptors(InterceptionType.POST_ACTIVATE, classBindingAnnotationsArray);
-            builder.interceptPostActivate().with(toSerializableContextualArray(resolvedPostActivateInterceptors));
-
-        }
-        List<WeldMethod<?, ?>> businessMethods = Beans.getInterceptableMethods(getWeldAnnotated());
-        for (WeldMethod<?, ?> method : businessMethods) {
-            Set<Annotation> methodBindingAnnotations = new InterceptorBindingSet(beanManager);
-            methodBindingAnnotations.addAll(classBindingAnnotations);
-            methodBindingAnnotations.addAll(beanManager.extractInterceptorBindings(method.getAnnotations()));
-            if (methodBindingAnnotations.size() > 0) {
-                if (Beans.findInterceptorBindingConflicts(beanManager, methodBindingAnnotations)) {
-                    throw new DeploymentException(CONFLICTING_INTERCEPTOR_BINDINGS, getType() + ""."" + method.getName() + ""()"");
-                }
-
-                Annotation[] methodBindingAnnotationsArray = methodBindingAnnotations.toArray(new Annotation[methodBindingAnnotations.size()]);
-
-                List<Interceptor<?>> methodBoundInterceptors = beanManager.resolveInterceptors(InterceptionType.AROUND_INVOKE, methodBindingAnnotationsArray);
-                if (methodBoundInterceptors != null && methodBoundInterceptors.size() > 0) {
-                    if (method.isFinal()) {
-                        throw new DefinitionException(FINAL_INTERCEPTED_BEAN_METHOD_NOT_ALLOWED, method, methodBoundInterceptors.get(0).getBeanClass().getName());
-                    }
-                    builder.interceptAroundInvoke(Reflections.<AnnotatedMethod<T>>cast(method).getJavaMember()).with(toSerializableContextualArray(methodBoundInterceptors));
-                }
-
-                methodBoundInterceptors = beanManager.resolveInterceptors(InterceptionType.AROUND_TIMEOUT, methodBindingAnnotationsArray);
-                if (methodBoundInterceptors != null && methodBoundInterceptors.size() > 0) {
-                    if (method.isFinal()) {
-                        throw new DefinitionException(FINAL_INTERCEPTED_BEAN_METHOD_NOT_ALLOWED, method, methodBoundInterceptors.get(0).getBeanClass().getName());
-                    }
-                    builder.interceptAroundTimeout(Reflections.<AnnotatedMethod<T>>cast(method).getJavaMember()).with(toSerializableContextualArray(methodBoundInterceptors));
-                }
-
-            }
-        }
-
-        // initialize EJB3 interceptors
-        Class<?>[] classDeclaredInterceptors = null;
-        if (getWeldAnnotated().isAnnotationPresent(InterceptionUtils.getInterceptorsAnnotationClass())) {
-            Annotation interceptorsAnnotation = getType().getAnnotation(InterceptionUtils.getInterceptorsAnnotationClass());
-            classDeclaredInterceptors = SecureReflections.extractValues(interceptorsAnnotation);
-        }
-
-        if (classDeclaredInterceptors != null) {
-            for (Class<?> clazz : classDeclaredInterceptors) {
-                builder.interceptAll().with(beanManager.getInterceptorMetadataReader().getInterceptorMetadata(clazz));
-            }
-        }
-
-        for (WeldMethod<?, ?> method : businessMethods) {
-            boolean excludeClassInterceptors = method.isAnnotationPresent(InterceptionUtils.getExcludeClassInterceptorsAnnotationClass());
-            Class<?>[] methodDeclaredInterceptors = null;
-            if (method.isAnnotationPresent(InterceptionUtils.getInterceptorsAnnotationClass())) {
-                methodDeclaredInterceptors = SecureReflections.extractValues(method.getAnnotation(InterceptionUtils.getInterceptorsAnnotationClass()));
-            }
-            if (excludeClassInterceptors) {
-                builder.ignoreGlobalInterceptors(Reflections.<AnnotatedMethod<T>>cast(method).getJavaMember());
-            }
-            if (methodDeclaredInterceptors != null && methodDeclaredInterceptors.length > 0) {
-                List<InterceptorMetadata<?>> methodDeclaredInterceptorMetadatas = new ArrayList<InterceptorMetadata<?>>();
-                for (Class<?> clazz : methodDeclaredInterceptors) {
-                    methodDeclaredInterceptorMetadatas.add(beanManager.getInterceptorMetadataReader().getInterceptorMetadata(clazz));
-                }
-                if (method.isFinal()) {
-                    throw new DefinitionException(FINAL_INTERCEPTED_BEAN_METHOD_NOT_ALLOWED, method, methodDeclaredInterceptors[0].getName());
-                }
-                if (method.isAnnotationPresent(beanManager.getServices().get(EJBApiAbstraction.class).TIMEOUT_ANNOTATION_CLASS)) {
-                    builder.interceptAroundTimeout(Reflections.<AnnotatedMethod<T>>cast(method).getJavaMember()).with(methodDeclaredInterceptorMetadatas.toArray(new InterceptorMetadata[]{}));
-                } else {
-                    builder.interceptAroundInvoke(Reflections.<AnnotatedMethod<T>>cast(method).getJavaMember()).with(methodDeclaredInterceptorMetadatas.toArray(new InterceptorMetadata[]{}));
-                }
-            }
-        }
-        InterceptionModel<ClassMetadata<?>, ?> interceptionModel = builder.build();
-
-        if (interceptionModel.getAllInterceptors().size() > 0 || hasSerializationOrInvocationInterceptorMethods) {
-            if (getWeldAnnotated().isFinal()) {
-                throw new DefinitionException(FINAL_BEAN_CLASS_WITH_INTERCEPTORS_NOT_ALLOWED, this);
-            }
-            beanManager.getInterceptorModelRegistry().put(getType(), ((InterceptionModel<ClassMetadata<?>, ?>) interceptionModel));
-        }
-
-
-    }
-
     @Override
     public void initializeAfterBeanDiscovery() {
-        if (isInterceptionCandidate() && !beanManager.getInterceptorModelRegistry().containsKey(getType())) {
-            initInterceptionModelForType();
-        }
+        initInterceptorsIfNeeded();
         initDecorators();
         super.initializeAfterBeanDiscovery();
         if (isSubclassed()) {
@@ -311,6 +184,12 @@ public void initializeAfterBeanDiscovery() {
         }
     }
 
+    protected void initInterceptorsIfNeeded() {
+        if (isInterceptionCandidate() && !beanManager.getInterceptorModelRegistry().containsKey(getType())) {
+            new InterceptionModelInitializer().init();
+        }
+    }
+
     public void initDecorators() {
         this.decorators = getBeanManager().resolveDecorators(getTypes(), getQualifiers());
     }
@@ -322,7 +201,7 @@ public boolean hasDecorators() {
     protected T applyDecorators(T instance, CreationalContext<T> creationalContext, InjectionPoint originalInjectionPoint) {
         assert hasDecorators() : ""Bean does not have decorators"";
         TargetBeanInstance beanInstance = new TargetBeanInstance(this, instance);
-        DecorationHelper<T> decorationHelper = new DecorationHelper<T>(beanInstance, this, decoratorProxyFactory.getProxyClass(), beanManager, getServices().get(ContextualStore.class), decorators);
+        DecorationHelper<T> decorationHelper = new DecorationHelper<T>(beanInstance, this, decoratorProxyFactory.getProxyClass(), beanManager, getContextualStore(), decorators);
         DecorationHelper.push(decorationHelper);
         final T outerDelegate;
         try {
@@ -580,4 +459,191 @@ protected Class<T> createEnhancedSubclass() {
         return new InterceptedSubclassFactory<T>(getType(), getTypes(), this, enhancedMethodSignatures).getProxyClass();
     }
 
+    private ContextualStore getContextualStore() {
+        return getServices().get(ContextualStore.class);
+    }
+
+
+    private class InterceptionModelInitializer {
+
+        private List<WeldMethod<?,?>> businessMethods;
+        private InterceptionModelBuilder<ClassMetadata<?>,?> builder;
+
+        public void init() {
+            businessMethods = Beans.getInterceptableMethods(getWeldAnnotated());
+            builder = InterceptionModelBuilder.<ClassMetadata<?>>newBuilderFor(getClassMetadata());
+
+            initCdiInterceptors();
+            initEjbInterceptors();
+
+            InterceptionModel<ClassMetadata<?>, ?> interceptionModel = builder.build();
+            if (interceptionModel.getAllInterceptors().size() > 0 || hasSerializationOrInvocationInterceptorMethods) {
+                if (getWeldAnnotated().isFinal()) {
+                    throw new DefinitionException(FINAL_BEAN_CLASS_WITH_INTERCEPTORS_NOT_ALLOWED, AbstractClassBean.this);
+                }
+                beanManager.getInterceptorModelRegistry().put(getType(), interceptionModel);
+            }
+        }
+
+        private ClassMetadata<T> getClassMetadata() {
+            return beanManager.getInterceptorMetadataReader().getClassMetadata(getType());
+        }
+
+        private void initCdiInterceptors() {
+            Set<Annotation> classBindingAnnotations = getClassInterceptorBindings();
+            initCdiLifecycleInterceptors(classBindingAnnotations);
+            initCdiBusinessMethodInterceptors(classBindingAnnotations);
+        }
+
+        private Set<Annotation> getClassInterceptorBindings() {
+            Set<Annotation> classBindingAnnotations = new InterceptorBindingSet(beanManager);
+            classBindingAnnotations.addAll(beanManager.extractInterceptorBindings(getWeldAnnotated().getAnnotations()));
+            for (Class<? extends Annotation> annotation : getStereotypes()) {
+                classBindingAnnotations.addAll(beanManager.extractInterceptorBindings(beanManager.getStereotypeDefinition(annotation)));
+            }
+            return classBindingAnnotations;
+        }
+
+        private void initCdiLifecycleInterceptors(Set<Annotation> classBindingAnnotations) {
+            if (classBindingAnnotations.size() == 0) {
+                return;
+            }
+            if (Beans.findInterceptorBindingConflicts(beanManager, classBindingAnnotations)) {
+                throw new DeploymentException(CONFLICTING_INTERCEPTOR_BINDINGS, getType());
+            }
+
+            Annotation[] classBindingAnnotationsArray = classBindingAnnotations.toArray(new Annotation[classBindingAnnotations.size()]);
+            initLifeCycleInterceptor(InterceptionType.POST_CONSTRUCT, classBindingAnnotationsArray);
+            initLifeCycleInterceptor(InterceptionType.PRE_DESTROY, classBindingAnnotationsArray);
+            initLifeCycleInterceptor(InterceptionType.PRE_PASSIVATE, classBindingAnnotationsArray);
+            initLifeCycleInterceptor(InterceptionType.POST_ACTIVATE, classBindingAnnotationsArray);
+        }
+
+        private void initLifeCycleInterceptor(InterceptionType interceptionType, Annotation[] classBindingAnnotationsArray) {
+            List<Interceptor<?>> resolvedInterceptors = beanManager.resolveInterceptors(interceptionType, classBindingAnnotationsArray);
+            builder.intercept(interceptionType).with(toSerializableContextualArray(resolvedInterceptors));
+        }
+
+        private void initCdiBusinessMethodInterceptors(Set<Annotation> classBindingAnnotations) {
+            for (WeldMethod<?, ?> method : businessMethods) {
+                initCdiBusinessMethodInterceptor(method, getMethodBindingAnnotations(classBindingAnnotations, method));
+            }
+        }
+
+        private Set<Annotation> getMethodBindingAnnotations(Set<Annotation> classBindingAnnotations, WeldMethod<?, ?> method) {
+            Set<Annotation> methodBindingAnnotations = new InterceptorBindingSet(beanManager);
+            methodBindingAnnotations.addAll(classBindingAnnotations);
+            methodBindingAnnotations.addAll(beanManager.extractInterceptorBindings(method.getAnnotations()));
+            return methodBindingAnnotations;
+        }
+
+        private void initCdiBusinessMethodInterceptor(WeldMethod<?, ?> method, Set<Annotation> methodBindingAnnotations) {
+            if (methodBindingAnnotations.size() == 0) {
+                return;
+            }
+            if (Beans.findInterceptorBindingConflicts(beanManager, methodBindingAnnotations)) {
+                throw new DeploymentException(CONFLICTING_INTERCEPTOR_BINDINGS, getType() + ""."" + method.getName() + ""()"");
+            }
+
+            Annotation[] methodBindingAnnotationsArray = methodBindingAnnotations.toArray(new Annotation[methodBindingAnnotations.size()]);
+            initInterceptor(InterceptionType.AROUND_INVOKE, method, methodBindingAnnotationsArray);
+            initInterceptor(InterceptionType.AROUND_TIMEOUT, method, methodBindingAnnotationsArray);
+        }
+
+        private void initInterceptor(InterceptionType interceptionType, WeldMethod<?, ?> method, Annotation[] methodBindingAnnotationsArray) {
+            List<Interceptor<?>> methodBoundInterceptors = beanManager.resolveInterceptors(interceptionType, methodBindingAnnotationsArray);
+            if (methodBoundInterceptors != null && methodBoundInterceptors.size() > 0) {
+                if (method.isFinal()) {
+                    throw new DefinitionException(FINAL_INTERCEPTED_BEAN_METHOD_NOT_ALLOWED, method, methodBoundInterceptors.get(0).getBeanClass().getName());
+                }
+                Method javaMethod = Reflections.<AnnotatedMethod<T>>cast(method).getJavaMember();
+                builder.intercept(interceptionType, javaMethod).with(toSerializableContextualArray(methodBoundInterceptors));
+            }
+        }
+
+        private void initEjbInterceptors() {
+            initClassDeclaredEjbInterceptors();
+            for (WeldMethod<?, ?> method : businessMethods) {
+                initMethodDeclaredEjbInterceptors(method);
+            }
+        }
+
+        private void initClassDeclaredEjbInterceptors() {
+            Class<?>[] classDeclaredInterceptors = null;
+            if (getWeldAnnotated().isAnnotationPresent(InterceptionUtils.getInterceptorsAnnotationClass())) {
+                Annotation interceptorsAnnotation = getType().getAnnotation(InterceptionUtils.getInterceptorsAnnotationClass());
+                classDeclaredInterceptors = SecureReflections.extractValues(interceptorsAnnotation);
+            }
+
+            if (classDeclaredInterceptors != null) {
+                for (Class<?> clazz : classDeclaredInterceptors) {
+                    builder.interceptAll().with(beanManager.getInterceptorMetadataReader().getInterceptorMetadata(clazz));
+                }
+            }
+        }
+
+        private void initMethodDeclaredEjbInterceptors(WeldMethod<?, ?> method) {
+            Method javaMethod = Reflections.<AnnotatedMethod<T>>cast(method).getJavaMember();
+
+            boolean excludeClassInterceptors = method.isAnnotationPresent(InterceptionUtils.getExcludeClassInterceptorsAnnotationClass());
+            if (excludeClassInterceptors) {
+                builder.ignoreGlobalInterceptors(javaMethod);
+            }
+
+            Class<?>[] methodDeclaredInterceptors = getMethodDeclaredInterceptors(method);
+            if (methodDeclaredInterceptors != null && methodDeclaredInterceptors.length > 0) {
+                if (method.isFinal()) {
+                    throw new DefinitionException(FINAL_INTERCEPTED_BEAN_METHOD_NOT_ALLOWED, method, methodDeclaredInterceptors[0].getName());
+                }
+
+                InterceptionType interceptionType = isTimeoutAnnotationPresentOn(method)
+                        ? InterceptionType.AROUND_TIMEOUT
+                        : InterceptionType.AROUND_INVOKE;
+                InterceptorMetadata[] interceptors = getMethodDeclaredInterceptorMetadatas(methodDeclaredInterceptors);
+                builder.intercept(interceptionType, javaMethod).with(interceptors);
+            }
+        }
+
+        private InterceptorMetadata[] getMethodDeclaredInterceptorMetadatas(Class<?>[] methodDeclaredInterceptors) {
+            List<InterceptorMetadata<?>> list = new ArrayList<InterceptorMetadata<?>>();
+            for (Class<?> clazz : methodDeclaredInterceptors) {
+                list.add(beanManager.getInterceptorMetadataReader().getInterceptorMetadata(clazz));
+            }
+            return list.toArray(new InterceptorMetadata[list.size()]);
+        }
+
+        private boolean isTimeoutAnnotationPresentOn(WeldMethod<?, ?> method) {
+            return method.isAnnotationPresent(beanManager.getServices().get(EJBApiAbstraction.class).TIMEOUT_ANNOTATION_CLASS);
+        }
+
+        private Class<?>[] getMethodDeclaredInterceptors(WeldMethod<?, ?> method) {
+            Class<?>[] methodDeclaredInterceptors = null;
+            if (method.isAnnotationPresent(InterceptionUtils.getInterceptorsAnnotationClass())) {
+                methodDeclaredInterceptors = SecureReflections.extractValues(method.getAnnotation(InterceptionUtils.getInterceptorsAnnotationClass()));
+            }
+            return methodDeclaredInterceptors;
+        }
+
+        private InterceptorMetadata<SerializableContextual<?, ?>>[] toSerializableContextualArray(List<Interceptor<?>> interceptors) {
+            List<InterceptorMetadata<SerializableContextual<Interceptor<?>, ?>>> serializableContextuals = new ArrayList<InterceptorMetadata<SerializableContextual<Interceptor<?>, ?>>>();
+            for (Interceptor<?> interceptor : interceptors) {
+                serializableContextuals.add(getInterceptorMetadata(interceptor));
+            }
+            return serializableContextuals.toArray(AbstractClassBean.<SerializableContextual<?, ?>>emptyInterceptorMetadataArray());
+        }
+
+        private InterceptorMetadata<SerializableContextual<Interceptor<?>, ?>> getInterceptorMetadata(Interceptor<?> interceptor) {
+            SerializableContextualImpl<Interceptor<?>, ?> contextual = new SerializableContextualImpl(interceptor, getContextualStore());
+            if (interceptor instanceof InterceptorImpl) {
+                InterceptorImpl interceptorImpl = (InterceptorImpl) interceptor;
+                WeldInterceptorClassMetadata classMetadata = WeldInterceptorClassMetadata.of(interceptorImpl.getWeldAnnotated());
+                SerializableContextualInterceptorReference interceptorReference = new SerializableContextualInterceptorReference(contextual, classMetadata);
+                return beanManager.getInterceptorMetadataReader().getInterceptorMetadata(interceptorReference);
+            } else {
+                //custom interceptor
+                ClassMetadata<?> classMetadata = beanManager.getInterceptorMetadataReader().getClassMetadata(interceptor.getBeanClass());
+                return new CustomInterceptorMetadata(new SerializableContextualInterceptorReference(contextual, null), classMetadata);
+            }
+        }
+    }
 }",2012-03-13T11:15:55Z,2
"@@ -342,9 +342,7 @@ protected T createInstance(CreationalContext<T> ctx) {
 
     @Override
     public void initializeAfterBeanDiscovery() {
-        if (isInterceptionCandidate() && !beanManager.getInterceptorModelRegistry().containsKey(getType())) {
-            initInterceptionModelForType();
-        }
+        initInterceptorsIfNeeded();
         if (this.passivationCapableBean && this.hasDecorators()) {
             for (Decorator<?> decorator : this.getDecorators()) {
                 if (!(PassivationCapable.class.isAssignableFrom(decorator.getClass())) || !((WeldDecorator<?>) decorator).getWeldAnnotated().isSerializable()) {",2012-03-13T11:15:55Z,92
"@@ -25,6 +25,7 @@
 
 /**
  * @author <a href=""mailto:mariusb@redhat.com"">Marius Bogoevici</a>
+ * @author <a href=""mailto:marko.luksa@gmail.com"">Marko Luksa</a>
  */
 public class InterceptionModelBuilder<T, I> {
 
@@ -54,27 +55,43 @@ public MethodInterceptorDescriptor interceptAll() {
     }
 
     public MethodInterceptorDescriptor interceptAroundInvoke(Method m) {
-        return new MethodInterceptorDescriptor(m, InterceptionType.AROUND_INVOKE);
+        return intercept(javax.enterprise.inject.spi.InterceptionType.AROUND_INVOKE, m);
     }
 
     public MethodInterceptorDescriptor interceptAroundTimeout(Method m) {
-        return new MethodInterceptorDescriptor(m, InterceptionType.AROUND_TIMEOUT);
+        return intercept(javax.enterprise.inject.spi.InterceptionType.AROUND_TIMEOUT, m);
+    }
+
+    public MethodInterceptorDescriptor intercept(javax.enterprise.inject.spi.InterceptionType interceptionType, Method m) {
+        InterceptionType weldInterceptionType = InterceptionType.valueOf(interceptionType);
+        if (weldInterceptionType.isLifecycleCallback()) {
+            throw new IllegalArgumentException(""Illegal interception type: "" + interceptionType);
+        }
+        return new MethodInterceptorDescriptor(m, weldInterceptionType);
     }
 
     public MethodInterceptorDescriptor interceptPostConstruct() {
-        return new MethodInterceptorDescriptor(null, InterceptionType.POST_CONSTRUCT);
+        return intercept(javax.enterprise.inject.spi.InterceptionType.POST_CONSTRUCT);
     }
 
     public MethodInterceptorDescriptor interceptPreDestroy() {
-        return new MethodInterceptorDescriptor(null, InterceptionType.PRE_DESTROY);
+        return intercept(javax.enterprise.inject.spi.InterceptionType.PRE_DESTROY);
     }
 
     public MethodInterceptorDescriptor interceptPrePassivate() {
-        return new MethodInterceptorDescriptor(null, InterceptionType.PRE_PASSIVATE);
+        return intercept(javax.enterprise.inject.spi.InterceptionType.PRE_PASSIVATE);
     }
 
     public MethodInterceptorDescriptor interceptPostActivate() {
-        return new MethodInterceptorDescriptor(null, InterceptionType.POST_ACTIVATE);
+        return intercept(javax.enterprise.inject.spi.InterceptionType.POST_ACTIVATE);
+    }
+
+    public MethodInterceptorDescriptor intercept(javax.enterprise.inject.spi.InterceptionType interceptionType) {
+        InterceptionType weldInterceptionType = InterceptionType.valueOf(interceptionType);
+        if (!weldInterceptionType.isLifecycleCallback()) {
+            throw new IllegalArgumentException(""Illegal interception type: "" + interceptionType);
+        }
+        return new MethodInterceptorDescriptor(null, weldInterceptionType);
     }
 
     public void ignoreGlobalInterceptors(Method m) {",2012-03-13T11:15:55Z,212
"@@ -26,6 +26,7 @@
 
 /**
  * @author Marius Bogoevici
+ * @author Marko Luksa
  */
 public class InterceptorMethodHandler implements MethodHandler, Serializable {
 
@@ -84,14 +85,17 @@ public Object invoke(Object self, Method thisMethod, Method proceed, Object[] ar
                     return proceed.invoke(self, args);
                 }
             }
-            if (InterceptionTypeRegistry.isSupported(InterceptionType.AROUND_TIMEOUT) && thisMethod.isAnnotationPresent(InterceptionTypeRegistry.getAnnotationClass(InterceptionType.AROUND_TIMEOUT))) {
-                return executeInterception(isProxy() ? null : self, thisMethod, thisMethod, args, InterceptionType.AROUND_TIMEOUT);
-            } else {
-                return executeInterception(isProxy() ? null : self, thisMethod, thisMethod, args, InterceptionType.AROUND_INVOKE);
-            }
+            return executeInterception(isProxy() ? null : self, thisMethod, thisMethod, args, getInterceptionType(thisMethod));
         }
         return null;
+    }
 
+    private InterceptionType getInterceptionType(Method thisMethod) {
+        if (InterceptionTypeRegistry.isSupported(InterceptionType.AROUND_TIMEOUT) && thisMethod.isAnnotationPresent(InterceptionTypeRegistry.getAnnotationClass(InterceptionType.AROUND_TIMEOUT))) {
+            return InterceptionType.AROUND_TIMEOUT;
+        } else {
+            return InterceptionType.AROUND_INVOKE;
+        }
     }
 
     private Object executeInterception(Object self, Method proceedingMethod, Method thisMethod, Object[] args, InterceptionType interceptionType) throws Throwable {",2012-03-13T11:15:55Z,213
"@@ -45,4 +45,8 @@ public boolean isLifecycleCallback() {
     public String annotationClassName() {
         return annotationClassName;
     }
+
+    public static InterceptionType valueOf(javax.enterprise.inject.spi.InterceptionType interceptionType) {
+        return valueOf(interceptionType.name());
+    }
 }",2012-03-13T11:15:55Z,214
"@@ -324,7 +324,7 @@ protected ManagedBean(WeldClass<T> type, String idSuffix, BeanManagerImpl beanMa
       initTypes();
       initQualifiers();
       initConstructor();
-      this.proxiable = Proxies.isTypeProxyable(type.getBaseType());
+      this.proxiable = Proxies.isTypesProxyable(type.getTypeClosure());
    }
 
    /**",2010-11-16T16:13:05Z,92
"@@ -82,7 +82,7 @@ protected ProducerField(WeldField<T, ? super X> field, AbstractClassBean<X> decl
       initTypes();
       initQualifiers();
       initStereotypes();
-      this.proxiable = Proxies.isTypeProxyable(field.getBaseType());
+      this.proxiable = Proxies.isTypesProxyable(field.getTypeClosure());
    }
    
    protected static String createId(WeldField<?, ?> field, AbstractClassBean<?> declaringBean)",2010-11-16T16:13:05Z,215
"@@ -86,7 +86,7 @@ protected ProducerMethod(WeldMethod<T, ? super X> method, AbstractClassBean<X> d
       this.id = createId(method, declaringBean);
       initStereotypes();
       initProducerMethodInjectableParameters();
-      this.proxiable = Proxies.isTypeProxyable(method.getBaseType());
+      this.proxiable = Proxies.isTypesProxyable(method.getTypeClosure());
    }
 
    protected String createId(WeldMethod<T, ? super X> method, AbstractClassBean<X> declaringBean)",2010-11-16T16:13:05Z,177
"@@ -0,0 +1,61 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2008, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,  
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.weld.introspector;
+
+import java.lang.reflect.Type;
+import java.util.Set;
+
+import org.jboss.weld.util.LazyValueHolder;
+import org.jboss.weld.util.reflection.HierarchyDiscovery;
+
+/**
+ * {@link LazyValueHolder} that calculates a type closue. In many cases this
+ * will not be needed, so computing it on demand saves memory and startup time.
+ * 
+ * @author Stuart Douglas
+ * 
+ */
+public class TypeClosureLazyValueHolder extends LazyValueHolder<Set<Type>>
+{
+
+   private final Type type;
+
+   private final Set<Type> types;
+
+   public TypeClosureLazyValueHolder(Type type)
+   {
+      this.type = type;
+      this.types = null;
+   }
+
+   public TypeClosureLazyValueHolder(Set<Type> types)
+   {
+      this.type = null;
+      this.types = types;
+   }
+
+   @Override
+   protected Set<Type> computeValue()
+   {
+      if (types != null)
+      {
+         return types;
+      }
+      return new HierarchyDiscovery(type).getTypeClosure();
+   }
+
+}",2010-11-16T16:13:05Z,216
"@@ -36,6 +36,7 @@
 import org.jboss.weld.literal.DefaultLiteral;
 import org.jboss.weld.metadata.TypeStore;
 import org.jboss.weld.resources.ClassTransformer;
+import org.jboss.weld.util.LazyValueHolder;
 import org.jboss.weld.util.collections.ArraySet;
 import org.jboss.weld.util.collections.ArraySetMultimap;
 import org.jboss.weld.util.collections.Arrays2;
@@ -128,7 +129,7 @@ private static void addMetaAnnotation(ArraySetMultimap<Class<? extends Annotatio
    private final Class<T> rawType;
    private final Type[] actualTypeArguments; 
    private final Type type;
-   private final Set<Type> typeClosure;
+   private final LazyValueHolder<Set<Type>> typeClosure;
 
    /**
     * Constructor
@@ -139,7 +140,7 @@ private static void addMetaAnnotation(ArraySetMultimap<Class<? extends Annotatio
     * @param annotationMap A map of annotation to register
     * 
     */
-   public AbstractWeldAnnotated(Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, ClassTransformer classTransformer, Class<T> rawType, Type type, Set<Type> typeClosure)
+   public AbstractWeldAnnotated(Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, ClassTransformer classTransformer, Class<T> rawType, Type type, final LazyValueHolder<Set<Type>> typeClosure)
    {
       if (annotationMap == null)
       {
@@ -168,7 +169,7 @@ public AbstractWeldAnnotated(Map<Class<? extends Annotation>, Annotation> annota
       {
          this.actualTypeArguments = new Type[0];
       }
-      this.typeClosure = Collections.unmodifiableSet(new ArraySet<Type>(typeClosure));
+      this.typeClosure = typeClosure;
    }
 
    protected AbstractWeldAnnotated(Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, TypeStore typeStore)
@@ -239,7 +240,7 @@ public Type getBaseType()
 
    public Set<Type> getTypeClosure()
    {
-      return typeClosure;
+      return typeClosure.get();
    }
    
    public Set<Annotation> getAnnotations()",2010-11-16T16:13:05Z,217
"@@ -25,6 +25,7 @@
 import org.jboss.weld.introspector.WeldCallable;
 import org.jboss.weld.introspector.WeldClass;
 import org.jboss.weld.resources.ClassTransformer;
+import org.jboss.weld.util.LazyValueHolder;
 
 /**
  * @author pmuir
@@ -33,7 +34,7 @@
 public abstract class AbstractWeldCallable<T, X, S extends Member> extends AbstractWeldMember<T, X, S> implements WeldCallable<T, X, S>
 {  
    
-   protected AbstractWeldCallable(Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, ClassTransformer classTransformer, Member member, Class<T> rawType, Type type, Set<Type> typeClosure, WeldClass<X> declaringType)
+   protected AbstractWeldCallable(Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, ClassTransformer classTransformer, Member member, Class<T> rawType, Type type, LazyValueHolder<Set<Type>> typeClosure, WeldClass<X> declaringType)
    {
       super(annotationMap, declaredAnnotationMap, classTransformer, member, rawType, type, typeClosure, declaringType);
    }",2010-11-16T16:13:05Z,218
"@@ -26,6 +26,7 @@
 import org.jboss.weld.introspector.WeldClass;
 import org.jboss.weld.introspector.WeldMember;
 import org.jboss.weld.resources.ClassTransformer;
+import org.jboss.weld.util.LazyValueHolder;
 import org.jboss.weld.util.reflection.Reflections;
 
 /**
@@ -50,7 +51,7 @@ public abstract class AbstractWeldMember<T, X, S extends Member> extends Abstrac
     * 
     * @param annotationMap The annotation map
     */
-   protected AbstractWeldMember(Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, ClassTransformer classTransformer, Member member, Class<T> rawType, Type type, Set<Type> typeClosure, WeldClass<X> declaringType)
+   protected AbstractWeldMember(Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, ClassTransformer classTransformer, Member member, Class<T> rawType, Type type, LazyValueHolder<Set<Type>> typeClosure, WeldClass<X> declaringType)
    {
       super(annotationMap, declaredAnnotationMap, classTransformer, rawType, type, typeClosure);
       this.declaringType = declaringType;",2010-11-16T16:13:05Z,219
"@@ -25,11 +25,11 @@
 import java.util.Map;
 import java.util.Set;
 
+import org.jboss.weld.introspector.TypeClosureLazyValueHolder;
 import org.jboss.weld.introspector.WeldAnnotation;
 import org.jboss.weld.introspector.WeldMethod;
 import org.jboss.weld.resources.ClassTransformer;
 import org.jboss.weld.util.collections.HashSetSupplier;
-import org.jboss.weld.util.reflection.HierarchyDiscovery;
 import org.jboss.weld.util.reflection.SecureReflections;
 
 import com.google.common.collect.Multimaps;
@@ -75,7 +75,7 @@ public static <A extends Annotation> WeldAnnotation<A> of(Class<A> annotationTyp
     */
    protected WeldAnnotationImpl(Class<T> annotationType, Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, ClassTransformer classTransformer)
    {
-      super(annotationType, annotationType, null, new HierarchyDiscovery(annotationType).getTypeClosure(), annotationMap, declaredAnnotationMap, classTransformer);
+      super(annotationType, annotationType, null, new TypeClosureLazyValueHolder(annotationType), annotationMap, declaredAnnotationMap, classTransformer);
       this.clazz = annotationType;
       members = new HashSet<WeldMethod<?, ?>>();
       annotatedMembers = Multimaps.newSetMultimap(new HashMap<Class<? extends Annotation>, Collection<WeldMethod<?, ?>>>(), HashSetSupplier.<WeldMethod<?, ?>>instance());",2010-11-16T16:13:05Z,220
"@@ -42,15 +42,16 @@
 import org.jboss.weld.introspector.ConstructorSignature;
 import org.jboss.weld.introspector.ExternalAnnotatedType;
 import org.jboss.weld.introspector.MethodSignature;
+import org.jboss.weld.introspector.TypeClosureLazyValueHolder;
 import org.jboss.weld.introspector.WeldClass;
 import org.jboss.weld.introspector.WeldConstructor;
 import org.jboss.weld.introspector.WeldField;
 import org.jboss.weld.introspector.WeldMethod;
 import org.jboss.weld.resources.ClassTransformer;
+import org.jboss.weld.util.LazyValueHolder;
 import org.jboss.weld.util.collections.ArraySet;
 import org.jboss.weld.util.collections.ArraySetMultimap;
 import org.jboss.weld.util.reflection.Formats;
-import org.jboss.weld.util.reflection.HierarchyDiscovery;
 import org.jboss.weld.util.reflection.Reflections;
 import org.jboss.weld.util.reflection.SecureReflections;
 
@@ -109,20 +110,20 @@ public class WeldClassImpl<T> extends AbstractWeldAnnotated<T, Class<T>> impleme
 
    public static <T> WeldClass<T> of(Class<T> clazz, ClassTransformer classTransformer)
    {
-      return new WeldClassImpl<T>(clazz, clazz, null, new HierarchyDiscovery(clazz).getTypeClosure(), buildAnnotationMap(clazz.getAnnotations()), buildAnnotationMap(clazz.getDeclaredAnnotations()), classTransformer);
+      return new WeldClassImpl<T>(clazz, clazz, null, new TypeClosureLazyValueHolder(clazz), buildAnnotationMap(clazz.getAnnotations()), buildAnnotationMap(clazz.getDeclaredAnnotations()), classTransformer);
    }
 
    public static <T> WeldClass<T> of(AnnotatedType<T> annotatedType, ClassTransformer classTransformer)
    {
-      return new WeldClassImpl<T>(annotatedType.getJavaClass(), annotatedType.getBaseType(), annotatedType, annotatedType.getTypeClosure(), buildAnnotationMap(annotatedType.getAnnotations()), buildAnnotationMap(annotatedType.getAnnotations()), classTransformer);
+      return new WeldClassImpl<T>(annotatedType.getJavaClass(), annotatedType.getBaseType(), annotatedType, new TypeClosureLazyValueHolder(annotatedType.getTypeClosure()), buildAnnotationMap(annotatedType.getAnnotations()), buildAnnotationMap(annotatedType.getAnnotations()), classTransformer);
    }
 
    public static <T> WeldClass<T> of(Class<T> rawType, Type type, ClassTransformer classTransformer)
    {
-      return new WeldClassImpl<T>(rawType, type, null, new HierarchyDiscovery(type).getTypeClosure(), buildAnnotationMap(rawType.getAnnotations()), buildAnnotationMap(rawType.getDeclaredAnnotations()), classTransformer);
+      return new WeldClassImpl<T>(rawType, type, null, new TypeClosureLazyValueHolder(type), buildAnnotationMap(rawType.getAnnotations()), buildAnnotationMap(rawType.getDeclaredAnnotations()), classTransformer);
    }
 
-   protected WeldClassImpl(Class<T> rawType, Type type, AnnotatedType<T> annotatedType, Set<Type> typeClosure, Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, ClassTransformer classTransformer)
+   protected WeldClassImpl(Class<T> rawType, Type type, AnnotatedType<T> annotatedType, LazyValueHolder<Set<Type>> typeClosure, Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, ClassTransformer classTransformer)
    {
       super(annotationMap, declaredAnnotationMap, classTransformer, rawType, type, typeClosure);
 ",2010-11-16T16:13:05Z,221
"@@ -33,14 +33,15 @@
 
 import org.jboss.weld.exceptions.DefinitionException;
 import org.jboss.weld.introspector.ConstructorSignature;
+import org.jboss.weld.introspector.TypeClosureLazyValueHolder;
 import org.jboss.weld.introspector.WeldClass;
 import org.jboss.weld.introspector.WeldConstructor;
 import org.jboss.weld.introspector.WeldParameter;
 import org.jboss.weld.logging.messages.ReflectionMessage;
 import org.jboss.weld.manager.BeanManagerImpl;
 import org.jboss.weld.resources.ClassTransformer;
+import org.jboss.weld.util.LazyValueHolder;
 import org.jboss.weld.util.reflection.Formats;
-import org.jboss.weld.util.reflection.HierarchyDiscovery;
 import org.jboss.weld.util.reflection.Reflections;
 import org.jboss.weld.util.reflection.SecureReflections;
 
@@ -66,12 +67,12 @@ public class WeldConstructorImpl<T> extends AbstractWeldCallable<T, T, Construct
 
    public static <T> WeldConstructor<T> of(Constructor<T> constructor, WeldClass<T> declaringClass, ClassTransformer classTransformer)
    {
-      return new WeldConstructorImpl<T>(constructor, constructor.getDeclaringClass(), constructor.getDeclaringClass(), null, new HierarchyDiscovery(constructor.getDeclaringClass()).getTypeClosure(), buildAnnotationMap(constructor.getAnnotations()), buildAnnotationMap(constructor.getDeclaredAnnotations()), declaringClass, classTransformer);
+      return new WeldConstructorImpl<T>(constructor, constructor.getDeclaringClass(), constructor.getDeclaringClass(), null, new TypeClosureLazyValueHolder(constructor.getDeclaringClass()), buildAnnotationMap(constructor.getAnnotations()), buildAnnotationMap(constructor.getDeclaredAnnotations()), declaringClass, classTransformer);
    }
 
    public static <T> WeldConstructor<T> of(AnnotatedConstructor<T> annotatedConstructor, WeldClass<T> declaringClass, ClassTransformer classTransformer)
    {
-      return new WeldConstructorImpl<T>(annotatedConstructor.getJavaMember(), annotatedConstructor.getJavaMember().getDeclaringClass(), annotatedConstructor.getBaseType(), annotatedConstructor, annotatedConstructor.getTypeClosure(), buildAnnotationMap(annotatedConstructor.getAnnotations()), buildAnnotationMap(annotatedConstructor.getAnnotations()), declaringClass, classTransformer);
+      return new WeldConstructorImpl<T>(annotatedConstructor.getJavaMember(), annotatedConstructor.getJavaMember().getDeclaringClass(), annotatedConstructor.getBaseType(), annotatedConstructor, new TypeClosureLazyValueHolder(annotatedConstructor.getTypeClosure()), buildAnnotationMap(annotatedConstructor.getAnnotations()), buildAnnotationMap(annotatedConstructor.getAnnotations()), declaringClass, classTransformer);
    }
 
    /**
@@ -82,7 +83,7 @@ public static <T> WeldConstructor<T> of(AnnotatedConstructor<T> annotatedConstru
     * @param constructor The constructor method
     * @param declaringClass The declaring class
     */
-   private WeldConstructorImpl(Constructor<T> constructor, final Class<T> rawType, final Type type, AnnotatedConstructor<T> annotatedConstructor, Set<Type> typeClosure, Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, WeldClass<T> declaringClass, ClassTransformer classTransformer)
+   private WeldConstructorImpl(Constructor<T> constructor, final Class<T> rawType, final Type type, AnnotatedConstructor<T> annotatedConstructor, LazyValueHolder<Set<Type>> typeClosure, Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, WeldClass<T> declaringClass, ClassTransformer classTransformer)
    {
       super(annotationMap, declaredAnnotationMap, classTransformer, constructor, rawType, type, typeClosure, declaringClass);
       this.constructor = constructor;",2010-11-16T16:13:05Z,222
"@@ -17,7 +17,6 @@
 package org.jboss.weld.introspector.jlr;
 
 import static org.jboss.weld.logging.messages.UtilMessage.ACCESS_ERROR_ON_FIELD;
-import static org.jboss.weld.util.reflection.Reflections.cast;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
@@ -28,11 +27,12 @@
 import javax.enterprise.inject.spi.AnnotatedField;
 
 import org.jboss.weld.exceptions.WeldException;
+import org.jboss.weld.introspector.TypeClosureLazyValueHolder;
 import org.jboss.weld.introspector.WeldClass;
 import org.jboss.weld.introspector.WeldField;
 import org.jboss.weld.resources.ClassTransformer;
+import org.jboss.weld.util.LazyValueHolder;
 import org.jboss.weld.util.reflection.Formats;
-import org.jboss.weld.util.reflection.HierarchyDiscovery;
 import org.jboss.weld.util.reflection.Reflections;
 import org.jboss.weld.util.reflection.SecureReflections;
 
@@ -53,12 +53,12 @@ public class WeldFieldImpl<T, X> extends AbstractWeldMember<T, X, Field> impleme
 
    public static <T, X> WeldFieldImpl<T, X> of(Field field, WeldClass<X> declaringClass, ClassTransformer classTransformer)
    {
-      return new WeldFieldImpl<T, X>(field, Reflections.<Class<T>>cast(field.getType()), field.getGenericType(), new HierarchyDiscovery(field.getGenericType()).getTypeClosure(), buildAnnotationMap(field.getAnnotations()), buildAnnotationMap(field.getDeclaredAnnotations()), declaringClass, classTransformer);
+      return new WeldFieldImpl<T, X>(field, Reflections.<Class<T>> cast(field.getType()), field.getGenericType(), new TypeClosureLazyValueHolder(field.getGenericType()), buildAnnotationMap(field.getAnnotations()), buildAnnotationMap(field.getDeclaredAnnotations()), declaringClass, classTransformer);
    }
 
    public static <X> WeldFieldImpl<?, X> of(AnnotatedField<? super X> annotatedField, WeldClass<X> declaringClass, ClassTransformer classTransformer)
    {
-      return new WeldFieldImpl<Object, X>(annotatedField.getJavaMember(), Reflections.<Class<Object>>cast(annotatedField.getJavaMember().getType()), annotatedField.getBaseType(), annotatedField.getTypeClosure(), buildAnnotationMap(annotatedField.getAnnotations()), buildAnnotationMap(annotatedField.getAnnotations()), declaringClass, classTransformer);
+      return new WeldFieldImpl<Object, X>(annotatedField.getJavaMember(), Reflections.<Class<Object>> cast(annotatedField.getJavaMember().getType()), annotatedField.getBaseType(), new TypeClosureLazyValueHolder(annotatedField.getTypeClosure()), buildAnnotationMap(annotatedField.getAnnotations()), buildAnnotationMap(annotatedField.getAnnotations()), declaringClass, classTransformer);
    }
 
    /**
@@ -70,7 +70,7 @@ public static <X> WeldFieldImpl<?, X> of(AnnotatedField<? super X> annotatedFiel
     * @param field The actual field
     * @param declaringClass The abstraction of the declaring class
     */
-   private WeldFieldImpl(Field field, final Class<T> rawType, final Type type, Set<Type> typeClosure, Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, WeldClass<X> declaringClass, ClassTransformer classTransformer)
+   private WeldFieldImpl(Field field, final Class<T> rawType, final Type type, LazyValueHolder<Set<Type>> typeClosure, Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, WeldClass<X> declaringClass, ClassTransformer classTransformer)
    {
       super(annotationMap, declaredAnnotationMap, classTransformer, field, rawType, type, typeClosure, declaringClass);
       this.field = field;",2010-11-16T16:13:05Z,223
"@@ -32,13 +32,14 @@
 
 import org.jboss.weld.exceptions.DefinitionException;
 import org.jboss.weld.introspector.MethodSignature;
+import org.jboss.weld.introspector.TypeClosureLazyValueHolder;
 import org.jboss.weld.introspector.WeldClass;
 import org.jboss.weld.introspector.WeldMethod;
 import org.jboss.weld.introspector.WeldParameter;
 import org.jboss.weld.logging.messages.ReflectionMessage;
 import org.jboss.weld.resources.ClassTransformer;
+import org.jboss.weld.util.LazyValueHolder;
 import org.jboss.weld.util.reflection.Formats;
-import org.jboss.weld.util.reflection.HierarchyDiscovery;
 import org.jboss.weld.util.reflection.Reflections;
 import org.jboss.weld.util.reflection.SecureReflections;
 
@@ -67,12 +68,12 @@ public class WeldMethodImpl<T, X> extends AbstractWeldCallable<T, X, Method> imp
 
    public static <T, X> WeldMethodImpl<T, X> of(Method method, WeldClass<X> declaringClass, ClassTransformer classTransformer)
    {
-      return new WeldMethodImpl<T, X>(method, Reflections.<Class<T>>cast(method.getReturnType()), method.getGenericReturnType(), new HierarchyDiscovery(method.getGenericReturnType()).getTypeClosure(), null, buildAnnotationMap(method.getAnnotations()), buildAnnotationMap(method.getDeclaredAnnotations()), declaringClass, classTransformer);
+      return new WeldMethodImpl<T, X>(method, Reflections.<Class<T>> cast(method.getReturnType()), method.getGenericReturnType(), new TypeClosureLazyValueHolder(method.getGenericReturnType()), null, buildAnnotationMap(method.getAnnotations()), buildAnnotationMap(method.getDeclaredAnnotations()), declaringClass, classTransformer);
    }
 
    public static <T, X> WeldMethodImpl<T, X> of(AnnotatedMethod<? super X> method, WeldClass<X> declaringClass, ClassTransformer classTransformer)
    {
-      return new WeldMethodImpl<T, X>(method.getJavaMember(), Reflections.<Class<T>>cast(method.getJavaMember().getReturnType()), method.getBaseType(), method.getTypeClosure(), method, buildAnnotationMap(method.getAnnotations()), buildAnnotationMap(method.getAnnotations()), declaringClass, classTransformer);
+      return new WeldMethodImpl<T, X>(method.getJavaMember(), Reflections.<Class<T>> cast(method.getJavaMember().getReturnType()), method.getBaseType(), new TypeClosureLazyValueHolder(method.getTypeClosure()), method, buildAnnotationMap(method.getAnnotations()), buildAnnotationMap(method.getAnnotations()), declaringClass, classTransformer);
    }
 
    /**
@@ -84,7 +85,7 @@ public static <T, X> WeldMethodImpl<T, X> of(AnnotatedMethod<? super X> method,
     * @param method The underlying method
     * @param declaringClass The declaring class abstraction
     */
-   private WeldMethodImpl(Method method, final Class<T> rawType, final Type type, Set<Type> typeClosure, AnnotatedMethod<? super X> annotatedMethod, Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, WeldClass<X> declaringClass, ClassTransformer classTransformer)
+   private WeldMethodImpl(Method method, final Class<T> rawType, final Type type, LazyValueHolder<Set<Type>> typeClosure, AnnotatedMethod<? super X> annotatedMethod, Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, WeldClass<X> declaringClass, ClassTransformer classTransformer)
    {
       super(annotationMap, declaredAnnotationMap, classTransformer, method, rawType, type, typeClosure, declaringClass);
       this.method = method;",2010-11-16T16:13:05Z,224
"@@ -26,11 +26,12 @@
 import javax.enterprise.inject.spi.AnnotatedCallable;
 
 import org.jboss.weld.exceptions.IllegalArgumentException;
+import org.jboss.weld.introspector.TypeClosureLazyValueHolder;
 import org.jboss.weld.introspector.WeldCallable;
 import org.jboss.weld.introspector.WeldClass;
 import org.jboss.weld.introspector.WeldParameter;
 import org.jboss.weld.resources.ClassTransformer;
-import org.jboss.weld.util.reflection.HierarchyDiscovery;
+import org.jboss.weld.util.LazyValueHolder;
 
 /**
  * Represents a parameter
@@ -46,12 +47,12 @@ public class WeldParameterImpl<T, X> extends AbstractWeldAnnotated<T, Object> im
    
    public static <T, X> WeldParameter<T, X> of(Annotation[] annotations, Class<T> rawType, Type type, WeldCallable<?, X, ?> declaringMember, int position, ClassTransformer classTransformer)
    {
-      return new WeldParameterImpl<T, X>(annotations, rawType, type, new HierarchyDiscovery(type).getTypeClosure(), declaringMember, position, classTransformer);
+      return new WeldParameterImpl<T, X>(annotations, rawType, type, new TypeClosureLazyValueHolder(type), declaringMember, position, classTransformer);
    }
    
    public static <T, X> WeldParameter<T, X> of(Set<Annotation> annotations, Class<T> rawType, Type type, WeldCallable<?, X, ?> declaringMember, int position, ClassTransformer classTransformer)
    {
-      return new WeldParameterImpl<T, X>(annotations.toArray(EMPTY_ANNOTATIONS), rawType, type, new HierarchyDiscovery(type).getTypeClosure(), declaringMember, position, classTransformer);
+      return new WeldParameterImpl<T, X>(annotations.toArray(EMPTY_ANNOTATIONS), rawType, type, new TypeClosureLazyValueHolder(type), declaringMember, position, classTransformer);
    }
    
    private final int position;
@@ -63,7 +64,7 @@ public static <T, X> WeldParameter<T, X> of(Set<Annotation> annotations, Class<T
     * @param annotations The annotations array
     * @param type The type of the parameter
     */
-   protected WeldParameterImpl(Annotation[] annotations, Class<T> rawType, Type type, Set<Type> typeClosure, WeldCallable<?, X, ?> declaringMember, int position, ClassTransformer classTransformer)
+   protected WeldParameterImpl(Annotation[] annotations, Class<T> rawType, Type type, LazyValueHolder<Set<Type>> typeClosure, WeldCallable<?, X, ?> declaringMember, int position, ClassTransformer classTransformer)
    {
       super(buildAnnotationMap(annotations), buildAnnotationMap(annotations), classTransformer, rawType, type, typeClosure);
       this.declaringMember = declaringMember;",2010-11-16T16:13:05Z,225
"@@ -25,7 +25,7 @@
 import java.lang.reflect.Type;
 import java.lang.reflect.TypeVariable;
 import java.security.AccessControlException;
-import java.util.HashMap;
+import java.util.Collections;
 import java.util.Map;
 import java.util.Set;
 
@@ -39,32 +39,30 @@ public class HierarchyDiscovery {
 
     private final Type type;
 
-    private BiMap<Type, Class<?>> types;
-    private Map<Class, Type> cache = new HashMap<Class, Type>();
+    // should be ok, as there can be only one class in hierarchy
+    private BiMap<Class<?>, Type> types;
 
     public HierarchyDiscovery(Type type) {
         this.type = type;
     }
 
     protected void add(Class<?> clazz, Type type) {
-        types.forcePut(type, clazz);
-        cache.put(clazz, type);
+        types.forcePut(clazz, type);
     }
 
     public Set<Type> getTypeClosure() {
         if (types == null) {
             init();
-            cache = null;
         }
         // Return an independent set with no ties to the BiMap used
-        return new ArraySet<Type>(types.keySet()).trimToSize();
+        return new ArraySet<Type>(types.values()).trimToSize();
     }
 
     public Map<Class<?>, Type> getTypeMap() {
         if (types == null) {
             init();
         }
-        return types.inverse();
+        return Collections.unmodifiableMap(types);
     }
 
     private void init() {
@@ -191,7 +189,7 @@ private Type resolveTypeParameter(ParameterizedType type, Type beanType, TypeVar
 
         // step2. generic super class
         Class<?> superClass = actualType.getSuperclass();
-        Type genericSuperType = cache.get(superClass); // did we resolve already
+        Type genericSuperType = types.get(superClass); // did we resolve already
         if (genericSuperType == null)
             genericSuperType = actualType.getGenericSuperclass();
 
@@ -205,7 +203,7 @@ private Type resolveTypeParameter(ParameterizedType type, Type beanType, TypeVar
             if (interfaceType instanceof ParameterizedType) {
                 Type rawType = ((ParameterizedType) interfaceType).getRawType();
                 if (rawType instanceof Class<?>) {
-                    Type cached = cache.get(Class.class.cast(rawType));
+                    Type cached = types.get(Class.class.cast(rawType));
                     if (cached != null)
                         interfaceType = cached;
                 }",2012-03-08T10:48:08Z,226
"@@ -1,5 +1,5 @@
 # Container a number of properties associated with installing Weld into JBoss AS and running the TCK in JBoss AS
-#jboss.home=/Users/alesj/java_lib/jboss-as-7.1.0.Final/
+jboss.home=/Users/alesj/java_lib/jboss-as-7.1.0.Final/
 org.jboss.testharness.container.javaOpts=-Xms128m -Xmx512m -XX:MaxPermSize=256m -Dorg.jboss.resolver.warning=true -Dsun.rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000
 
 # time to allow before attempting to restart JBoss AS",2012-03-08T10:48:08Z,174
"@@ -270,7 +270,7 @@ private void initEEInjectionPoints()
    @Override
    protected void checkType()
    {
-      if (getAnnotatedItem().isNonStaticMemberClass())
+      if (getAnnotatedItem().isAnonymousClass() || (getAnnotatedItem().isMemberClass() && !getAnnotatedItem().isStatic()))
       {
          throw new DefinitionException(""Simple bean "" + type + "" cannot be a non-static inner class"");
       }",2009-11-03T17:34:07Z,92
"@@ -289,7 +289,7 @@ protected boolean isTypeManagedBeanOrDecoratorOrInterceptor(WeldClass<?> clazz)
       JsfApiAbstraction jsfApiAbstraction = manager.getServices().get(JsfApiAbstraction.class);
       ServletApiAbstraction servletApiAbstraction = manager.getServices().get(ServletApiAbstraction.class);
       return !Extension.class.isAssignableFrom(clazz.getJavaClass()) &&
-             !clazz.isNonStaticMemberClass() &&
+             !(clazz.isAnonymousClass() || (clazz.isMemberClass() && !clazz.isStatic())) &&
              !Reflections.isParamerterizedTypeWithWildcard(javaClass) && 
              !servletApiAbstraction.SERVLET_CLASS.isAssignableFrom(javaClass) && 
              !servletApiAbstraction.FILTER_CLASS.isAssignableFrom(javaClass) && ",2009-11-03T17:34:07Z,165
"@@ -107,9 +107,19 @@ public WeldClass<?> getWeldSuperclass()
       return delegate().getWeldSuperclass();
    }
 
-   public boolean isNonStaticMemberClass()
+   public boolean isLocalClass()
    {
-      return delegate().isNonStaticMemberClass();
+      return delegate().isLocalClass();
+   }
+   
+   public boolean isMemberClass()
+   {
+      return delegate().isMemberClass();
+   }
+   
+   public boolean isAnonymousClass()
+   {
+      return delegate().isAnonymousClass();
    }
 
    @Override",2009-11-03T17:34:07Z,227
"@@ -207,18 +207,17 @@ public interface WeldClass<T> extends WeldAnnotated<T, Class<T>>, AnnotatedType<
     */
    public WeldClass<?> getWeldSuperclass();
 
-   /**
-    * Determine if this is a non-static member class
-    *
-    * @return true if this is a non-static member  
-    */
-   public boolean isNonStaticMemberClass();
-
    public boolean isParameterizedType();
 
    public boolean isAbstract();
 
    public boolean isEnum();
+   
+   public boolean isMemberClass();
+   
+   public boolean isLocalClass();
+   
+   public boolean isAnonymousClass();
 
    public <S> S cast(Object object);
 ",2009-11-03T17:34:07Z,228
"@@ -121,8 +121,10 @@ public class WeldClassImpl<T> extends AbstractWeldAnnotated<T, Class<T>> impleme
    // Cached string representation
    private final String toString;
 
-   private final boolean _nonStaticMemberClass;
    private final boolean _abstract;
+   private final boolean _member;
+   private final boolean _local;
+   private final boolean _anonymous;
    private final boolean _enum;
 
    public static <T> WeldClass<T> of(Class<T> clazz, ClassTransformer classTransformer)
@@ -200,7 +202,9 @@ public Set<WeldField<?, T>> get()
          }
         
       });
-      this._nonStaticMemberClass = Reflections.isNonStaticInnerClass(rawType);
+      this._local = rawType.isLocalClass();
+      this._anonymous = rawType.isAnonymousClass();
+      this._member = rawType.isMemberClass();
       this._abstract = Reflections.isAbstract(rawType);
       this._enum = rawType.isEnum();
 
@@ -538,9 +542,19 @@ public WeldConstructor<T> getDeclaredWeldConstructor(ConstructorSignature signat
       return Collections.unmodifiableSet(annotatedFields.get(annotationType));
    }
 
-   public boolean isNonStaticMemberClass()
+   public boolean isLocalClass()
    {
-      return _nonStaticMemberClass;
+      return _local;
+   }
+   
+   public boolean isAnonymousClass()
+   {
+      return _anonymous;
+   }
+   
+   public boolean isMemberClass()
+   {
+      return _member;
    }
 
    public boolean isAbstract()",2009-11-03T17:34:07Z,221
"@@ -39,6 +39,7 @@
 import org.jboss.weld.introspector.WeldConstructor;
 import org.jboss.weld.introspector.WeldParameter;
 import org.jboss.weld.resources.ClassTransformer;
+import org.jboss.weld.util.Reflections;
 
 import com.google.common.base.Supplier;
 import com.google.common.collect.ListMultimap;
@@ -116,12 +117,24 @@ public List<WeldParameter<?, T>> get()
          }
       }
       
+      // If the class is a (non-static) member class, its constructors parameterTypes array will prefix the
+      // outer class instance, whilst the genericParameterTypes array isn't prefix'd 
+      int nesting = Reflections.getNesting(declaringClass.getJavaClass());
       for (int i = 0; i < constructor.getParameterTypes().length; i++)
       {
+         int gi = i - nesting;
          if (constructor.getParameterAnnotations()[i].length > 0 || annotatedTypeParameters.containsKey(i))
          {
             Class<?> clazz = constructor.getParameterTypes()[i];
-            Type type = constructor.getGenericParameterTypes()[i];
+            Type type;
+            if (constructor.getGenericParameterTypes().length > gi && gi >=0)
+            {
+               type = constructor.getGenericParameterTypes()[gi];
+            }
+            else
+            {
+               type = clazz;
+            }
             WeldParameter<?, T> parameter = null;
             if (annotatedTypeParameters.containsKey(i))
             {
@@ -144,9 +157,9 @@ public List<WeldParameter<?, T>> get()
          {
             Class<?> clazz = constructor.getParameterTypes()[i];
             Type type;
-            if (constructor.getGenericParameterTypes().length > i)
+            if (constructor.getGenericParameterTypes().length > gi && gi >=0)
             {
-               type = constructor.getGenericParameterTypes()[i];
+               type = constructor.getGenericParameterTypes()[gi];
             }
             else
             {",2009-11-03T17:34:07Z,222
"@@ -307,6 +307,18 @@ public static boolean isFinal(Class<?> clazz)
    {
       return Modifier.isFinal(clazz.getModifiers());
    }
+   
+   public static int getNesting(Class<?> clazz)
+   {
+      if (clazz.isMemberClass() && !isStatic(clazz))
+      {
+         return 1 + getNesting(clazz.getDeclaringClass());
+      }
+      else
+      {
+         return 0;
+      }
+   }
 
    /**
     * Checks if member is final
@@ -395,17 +407,6 @@ public static boolean isAbstract(Class<?> clazz)
       return Modifier.isAbstract(clazz.getModifiers());
    }
 
-   /**
-    * Checks if class is a non-static inner one
-    * 
-    * @param clazz Class to Check
-    * @return True if static, false otherwise
-    */
-   public static boolean isNonStaticInnerClass(Class<?> clazz)
-   {
-      return (clazz.isMemberClass() || clazz.isAnonymousClass()) && !isStatic(clazz);
-   }
-
    /**
     * Gets a constructor with matching parameter types
     * ",2009-11-03T17:34:07Z,229
"@@ -1,14 +1,14 @@
 package org.jboss.weld.test.unit.reflection.clazz;
 
 
-class Kangaroo 
+public class Kangaroo 
 {
    LittleKangarooInHerPouch<String> procreate()
    {
       return new LittleKangarooInHerPouch<String>(""Joey"");
    }
 
-   class LittleKangarooInHerPouch<T>
+   public class LittleKangarooInHerPouch<T>
    {
       LittleKangarooInHerPouch(T formalParam)
       {",2009-11-03T17:34:07Z,230
"@@ -0,0 +1,12 @@
+package org.jboss.weld.test.unit.reflection.clazz;
+
+public class Koala
+{
+   
+   public Animal procreate()
+   {
+      class BabyKoala implements Animal {}
+      return new BabyKoala();
+   }
+
+}",2009-11-03T17:34:07Z,231
"@@ -0,0 +1,12 @@
+package org.jboss.weld.test.unit.reflection.clazz;
+
+
+public class Possum
+{
+   
+   public Possum procreate()
+   {
+      return new Possum() {};
+   }
+
+}",2009-11-03T17:34:07Z,232
"@@ -22,12 +22,26 @@ public class WeldClassTest
    private final ClassTransformer transformer = new ClassTransformer(new TypeStore());
    
    @Test(groups = ""broken"", description=""WELD-216"")
-   public void testNonStaticInnerClassWithGenericTypes()
+   public void testMemberClassWithGenericTypes()
    {
       AnnotatedType at = WeldClassImpl.of(new Kangaroo().procreate().getClass(), transformer);
       WeldClassImpl.of(at, transformer);
    }
    
+   @Test(description=""WELD-216"")
+   public void testLocalClassWithGenericTypes()
+   {
+      AnnotatedType at = WeldClassImpl.of(new Koala().procreate().getClass(), transformer);
+      WeldClassImpl.of(at, transformer);
+   }
+   
+   @Test(description=""WELD-216"")
+   public void testAnonymousClassWithGenericTypes()
+   {
+      AnnotatedType at = WeldClassImpl.of(new Possum().procreate().getClass(), transformer);
+      WeldClassImpl.of(at, transformer);
+   }
+   
    @Test
    public void testDeclaredAnnotations()
    {",2009-11-03T17:34:07Z,233
"@@ -44,7 +44,7 @@
 import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
 import static org.jboss.weld.logging.messages.BootstrapMessage.BEAN_IS_BOTH_INTERCEPTOR_AND_DECORATOR;
 import static org.jboss.weld.logging.messages.BootstrapMessage.IGNORING_CLASS_DUE_TO_LOADING_ERROR;
-import static org.slf4j.ext.XLogger.Level.DEBUG;
+import static org.slf4j.ext.XLogger.Level.INFO;
 
 /**
  * @author pmuir
@@ -76,17 +76,17 @@ public BeanDeployer addClass(String className) {
         try {
             clazz = resourceLoader.classForName(className);
         } catch (ResourceLoadingException e) {
-            log.debug(IGNORING_CLASS_DUE_TO_LOADING_ERROR, className);
-            xlog.catching(DEBUG, e);
+            log.info(IGNORING_CLASS_DUE_TO_LOADING_ERROR, className);
+            xlog.catching(INFO, e);
         }
 
         if (clazz != null && !clazz.isAnnotation() && !clazz.isEnum()) {
             WeldClass<?> weldClass = null;
             try {
                 weldClass = classTransformer.loadClass(clazz);
             } catch (ResourceLoadingException e) {
-                log.debug(IGNORING_CLASS_DUE_TO_LOADING_ERROR, className);
-                xlog.catching(DEBUG, e);
+                log.info(IGNORING_CLASS_DUE_TO_LOADING_ERROR, className);
+                xlog.catching(INFO, e);
             }
 
             if (weldClass != null) {",2011-11-03T11:32:52Z,33
"@@ -16,56 +16,15 @@
  */
 package org.jboss.weld.bean;
 
-import static org.jboss.weld.logging.Category.BEAN;
-import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
-import static org.jboss.weld.logging.messages.BeanMessage.CONFLICTING_INTERCEPTOR_BINDINGS;
-import static org.jboss.weld.logging.messages.BeanMessage.FINAL_BEAN_CLASS_WITH_INTERCEPTORS_NOT_ALLOWED;
-import static org.jboss.weld.logging.messages.BeanMessage.FINAL_INTERCEPTED_BEAN_METHOD_NOT_ALLOWED;
-import static org.jboss.weld.logging.messages.BeanMessage.INVOCATION_ERROR;
-import static org.jboss.weld.logging.messages.BeanMessage.ONLY_ONE_SCOPE_ALLOWED;
-import static org.jboss.weld.logging.messages.BeanMessage.PARAMETER_ANNOTATION_NOT_ALLOWED_ON_CONSTRUCTOR;
-import static org.jboss.weld.logging.messages.BeanMessage.PROXY_INSTANTIATION_FAILED;
-import static org.jboss.weld.logging.messages.BeanMessage.SPECIALIZING_BEAN_MUST_EXTEND_A_BEAN;
-import static org.jboss.weld.logging.messages.BeanMessage.USING_DEFAULT_SCOPE;
-import static org.jboss.weld.logging.messages.BeanMessage.USING_SCOPE;
-import static org.jboss.weld.util.reflection.Reflections.cast;
-
-import java.beans.Introspector;
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Type;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-
 import javassist.util.proxy.ProxyObject;
-
-import javax.enterprise.context.Dependent;
-import javax.enterprise.context.NormalScope;
-import javax.enterprise.context.spi.CreationalContext;
-import javax.enterprise.event.Observes;
-import javax.enterprise.inject.Disposes;
-import javax.enterprise.inject.spi.AnnotatedMethod;
-import javax.enterprise.inject.spi.Decorator;
-import javax.enterprise.inject.spi.InjectionPoint;
-import javax.enterprise.inject.spi.InjectionTarget;
-import javax.enterprise.inject.spi.InterceptionType;
-import javax.enterprise.inject.spi.Interceptor;
-import javax.inject.Scope;
-
 import org.jboss.interceptor.builder.InterceptionModelBuilder;
 import org.jboss.interceptor.spi.metadata.ClassMetadata;
 import org.jboss.interceptor.spi.metadata.InterceptorMetadata;
 import org.jboss.interceptor.spi.model.InterceptionModel;
 import org.jboss.interceptor.util.InterceptionUtils;
 import org.jboss.weld.bean.interceptor.SerializableContextualInterceptorReference;
 import org.jboss.weld.bean.interceptor.WeldInterceptorClassMetadata;
-import org.jboss.weld.bean.proxy.CombinedInterceptorAndDecoratorStackMethodHandler;
-import org.jboss.weld.bean.proxy.DecorationHelper;
-import org.jboss.weld.bean.proxy.InterceptedSubclassFactory;
-import org.jboss.weld.bean.proxy.ProxyFactory;
-import org.jboss.weld.bean.proxy.TargetBeanInstance;
+import org.jboss.weld.bean.proxy.*;
 import org.jboss.weld.bootstrap.BeanDeployerEnvironment;
 import org.jboss.weld.bootstrap.api.ServiceRegistry;
 import org.jboss.weld.context.SerializableContextualImpl;
@@ -92,6 +51,23 @@
 import org.jboss.weld.util.reflection.SecureReflections;
 import org.slf4j.cal10n.LocLogger;
 
+import javax.enterprise.context.Dependent;
+import javax.enterprise.context.NormalScope;
+import javax.enterprise.context.spi.CreationalContext;
+import javax.enterprise.event.Observes;
+import javax.enterprise.inject.Disposes;
+import javax.enterprise.inject.spi.*;
+import javax.inject.Scope;
+import java.beans.Introspector;
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Type;
+import java.util.*;
+
+import static org.jboss.weld.logging.Category.BEAN;
+import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
+import static org.jboss.weld.logging.messages.BeanMessage.*;
+import static org.jboss.weld.util.reflection.Reflections.cast;
+
 /**
  * An abstract bean representation common for class-based beans
  * 
@@ -250,30 +226,26 @@ protected void initInterceptionModelForType()
                throw new DeploymentException(CONFLICTING_INTERCEPTOR_BINDINGS, getType() + ""."" + method.getName() + ""()"");
             }
 
-            if (method.isAnnotationPresent(beanManager.getServices().get(EJBApiAbstraction.class).TIMEOUT_ANNOTATION_CLASS))
+            List<Interceptor<?>> methodBoundInterceptors = beanManager.resolveInterceptors(InterceptionType.AROUND_INVOKE, methodBindingAnnotations.toArray(new Annotation[]{}));
+            if (methodBoundInterceptors != null && methodBoundInterceptors.size() > 0)
             {
-               List<Interceptor<?>> methodBoundInterceptors = beanManager.resolveInterceptors(InterceptionType.AROUND_TIMEOUT, methodBindingAnnotations.toArray(new Annotation[]{}));
-               if (methodBoundInterceptors != null && methodBoundInterceptors.size() > 0)
+               if (method.isFinal())
                {
-                  if (method.isFinal())
-                  {
-                     throw new DefinitionException(FINAL_INTERCEPTED_BEAN_METHOD_NOT_ALLOWED, method, methodBoundInterceptors.get(0).getBeanClass().getName());
-                  }
-                  builder.interceptAroundTimeout(Reflections.<AnnotatedMethod<T>>cast(method).getJavaMember()).with(toSerializableContextualArray(methodBoundInterceptors));
+                  throw new DefinitionException(FINAL_INTERCEPTED_BEAN_METHOD_NOT_ALLOWED, method, methodBoundInterceptors.get(0).getBeanClass().getName());
                }
+               builder.interceptAroundInvoke(Reflections.<AnnotatedMethod<T>>cast(method).getJavaMember()).with(toSerializableContextualArray(methodBoundInterceptors));
             }
-            else
+            
+            methodBoundInterceptors = beanManager.resolveInterceptors(InterceptionType.AROUND_TIMEOUT, methodBindingAnnotations.toArray(new Annotation[]{}));
+            if (methodBoundInterceptors != null && methodBoundInterceptors.size() > 0)
             {
-               List<Interceptor<?>> methodBoundInterceptors = beanManager.resolveInterceptors(InterceptionType.AROUND_INVOKE, methodBindingAnnotations.toArray(new Annotation[]{}));
-               if (methodBoundInterceptors != null && methodBoundInterceptors.size() > 0)
+               if (method.isFinal())
                {
-                  if (method.isFinal())
-                  {
-                     throw new DefinitionException(FINAL_INTERCEPTED_BEAN_METHOD_NOT_ALLOWED, method, methodBoundInterceptors.get(0).getBeanClass().getName());
-                  }
-                  builder.interceptAroundInvoke(Reflections.<AnnotatedMethod<T>>cast(method).getJavaMember()).with(toSerializableContextualArray(methodBoundInterceptors));
+                  throw new DefinitionException(FINAL_INTERCEPTED_BEAN_METHOD_NOT_ALLOWED, method, methodBoundInterceptors.get(0).getBeanClass().getName());
                }
+               builder.interceptAroundTimeout(Reflections.<AnnotatedMethod<T>>cast(method).getJavaMember()).with(toSerializableContextualArray(methodBoundInterceptors));
             }
+
          }
       }
 ",2011-09-12T00:15:03Z,2
"@@ -56,10 +56,10 @@ PRODUCER_CAST_ERROR=Cannot cast producer type {0} to bean type {1}
 RETURN_TYPE_MUST_BE_CONCRETE=Return type must be concrete:  {0}
 NULL_NOT_ALLOWED_FROM_PRODUCER=Cannot return null from a non-dependent producer method:  {0}
 NON_SERIALIZABLE_PRODUCT_ERROR=Producers cannot declare passivating scope and return a non-serializable class:  {0}
-NON_SERIALIZABLE_FIELD_INJECTION_ERROR=Producers cannot produce non-serializable instances for injection into non-transient fields of passivating beans\\n\\nProducer\:  {0}\\nInjection Point\:  {1}
-NON_SERIALIZABLE_INITIALIZER_PARAM_INJECTION_ERROR=Producers cannot produce non-serializable instances for injection into parameters of initializers of beans declaring passivating scope.\\n\\nBean\:  {0}\\nInjection Point\:  {1}
-NON_SERIALIZABLE_PRODUCER_PARAM_INJECTION_ERROR=Producers cannot produce non-serializable instances for injection into parameters of producer methods declaring passivating scope.\\n\\nBean\:  {0}\\nInjection Point\:  {1}
-NON_SERIALIZABLE_CONSTRUCTOR_PARAM_INJECTION_ERROR=Producers cannot produce non-serializable instances for injection into parameters of constructors of beans declaring passivating scope.\\n\\nBean\:  {0}\\nInjection Point\:  {1}
+NON_SERIALIZABLE_FIELD_INJECTION_ERROR=Producers cannot produce non-serializable instances for injection into non-transient fields of passivating beans\n\nProducer:  {0}\nInjection Point:  {1}
+NON_SERIALIZABLE_INITIALIZER_PARAM_INJECTION_ERROR=Producers cannot produce non-serializable instances for injection into parameters of initializers of beans declaring passivating scope.\n\nBean:  {0}\nInjection Point:  {1}
+NON_SERIALIZABLE_PRODUCER_PARAM_INJECTION_ERROR=Producers cannot produce non-serializable instances for injection into parameters of producer methods declaring passivating scope.\n\nBean:  {0}\nInjection Point:  {1}
+NON_SERIALIZABLE_CONSTRUCTOR_PARAM_INJECTION_ERROR=Producers cannot produce non-serializable instances for injection into parameters of constructors of beans declaring passivating scope.\n\nBean:  {0}\nInjection Point:  {1}
 DELEGATE_ON_NON_INITIALIZER_METHOD=Method with @Delegate parameter must be an initializer method:  {0}
 NO_DELEGATE_FOR_DECORATOR=No delegate injection points defined for {0}
 TOO_MANY_DELEGATES_FOR_DECORATOR=Too many delegate injection points defined for {0}
@@ -75,7 +75,7 @@ FINAL_BEAN_CLASS_WITH_DECORATORS_NOT_ALLOWED=Bean class which has decorators can
 FINAL_DECORATED_BEAN_METHOD_NOT_ALLOWED=Decorated bean method {0} (decorated by {1}) cannot be declared final
 PUBLIC_FIELD_ON_NORMAL_SCOPED_BEAN_NOT_ALLOWED=Normal scoped managed bean implementation class has a public field:  {0}
 PARAMETER_ANNOTATION_NOT_ALLOWED_ON_CONSTRUCTOR=Managed bean constructor must not have a parameter annotated {0}:  {1}
-MULTIPLE_DISPOSAL_METHODS=Cannot declare multiple disposal methods for this producer method.\\n\\nProducer method\:  {0}\\nDisposal methods\:  {1}
+MULTIPLE_DISPOSAL_METHODS=Cannot declare multiple disposal methods for this producer method.\n\nProducer method:  {0}\nDisposal methods:  {1}
 PRODUCER_METHOD_NOT_SPECIALIZING=Specialized producer method does not override a method on the direct superclass:  {0}
 EJB_NOT_FOUND=Could not find the EJB in JNDI:  {0}
 EJB_CANNOT_BE_INTERCEPTOR=Enterprise beans cannot be interceptors:  {0}",2012-12-14T22:27:25Z,17
"@@ -36,7 +36,7 @@
         <arquillian.glassfish.version>1.0.0.CR1</arquillian.glassfish.version>
         <arquillian.jboss6.version>1.0.0.CR2</arquillian.jboss6.version>
         <atinject.tck.version>1.0.0-PFD-3</atinject.tck.version>
-        <cal10n.version>0.7.2</cal10n.version>
+        <cal10n.version>0.7.4</cal10n.version>
         <cargo.maven2.plugin.version>1.0</cargo.maven2.plugin.version>
         <cdi.api.version>1.0-SP4</cdi.api.version>
         <cdi.tck.version>1.0.4.SP3</cdi.tck.version>",2012-12-14T22:27:25Z,161
"@@ -37,7 +37,7 @@
         <arquillian.glassfish.version>1.0.0.CR1</arquillian.glassfish.version>
         <arquillian.jboss6.version>1.0.0.CR2</arquillian.jboss6.version>
         <atinject.tck.version>1.0.0-PFD-3</atinject.tck.version>
-        <cal10n.version>0.7.4</cal10n.version>
+        <cal10n.version>0.7.6</cal10n.version>
         <cargo.maven2.plugin.version>1.0</cargo.maven2.plugin.version>
         <cdi.api.version>1.0-SP4</cdi.api.version>
         <cdi.tck.version>1.0.4.SP3</cdi.tck.version>",2013-07-04T14:16:04Z,161
