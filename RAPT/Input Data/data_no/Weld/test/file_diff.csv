file_diff,commit_time,file_diff_id
"@@ -94,6 +94,7 @@ public class ProxyFactory<T> {
     private final ClassLoader classLoader;
     private final String baseProxyName;
     private final Bean<?> bean;
+    private final Class<?> proxiedBeanType;
 
     public static final String CONSTRUCTED_FLAG_NAME = ""constructed"";
 
@@ -117,6 +118,7 @@ public ProxyFactory(Class<?> proxiedBeanType, Set<? extends Type> typeClosure, B
      */
     public ProxyFactory(Class<?> proxiedBeanType, Set<? extends Type> typeClosure, String proxyName, Bean<?> bean) {
         this.bean = bean;
+        this.proxiedBeanType = proxiedBeanType;
         for (Type type : typeClosure) {
             Class<?> c = Reflections.getRawType(type);
             // Ignore no-interface views, they are dealt with proxiedBeanType
@@ -366,11 +368,12 @@ private Class<T> createProxyClass(String proxyClassName) throws Exception {
         }
         // TODO: change the ProxyServices SPI to allow the container to figure out
         // which PD to use
-        ProtectionDomain domain = beanType.getProtectionDomain();
-        if (beanType.isInterface() || beanType.equals(Object.class)) {
+
+
+        ProtectionDomain domain = proxiedBeanType.getProtectionDomain();
+        if(proxiedBeanType.getPackage() == null || proxiedBeanType.equals(Object.class)) {
             domain = ProxyFactory.class.getProtectionDomain();
         }
-
         Class<T> proxyClass = cast(ClassFileUtils.toClass(proxyClassType, classLoader, domain));
         log.trace(""Created Proxy class of type "" + proxyClass + "" supporting interfaces "" + Arrays.toString(proxyClass.getInterfaces()));
         return proxyClass;",2011-12-20T12:26:00Z,1
"@@ -68,11 +68,11 @@
 import org.jboss.weld.introspector.jlr.MethodSignatureImpl;
 import org.jboss.weld.introspector.jlr.WeldConstructorImpl;
 import org.jboss.weld.manager.BeanManagerImpl;
-import org.jboss.weld.metadata.cache.MetaAnnotationStore;
 import org.jboss.weld.resources.ClassTransformer;
 import org.jboss.weld.serialization.spi.ContextualStore;
 import org.jboss.weld.serialization.spi.helpers.SerializableContextual;
 import org.jboss.weld.util.Beans;
+import org.jboss.weld.util.InterceptorBindingSet;
 import org.jboss.weld.util.reflection.Reflections;
 import org.jboss.weld.util.reflection.SecureReflections;
 import org.slf4j.cal10n.LocLogger;
@@ -97,6 +97,7 @@
  * @param <T> the type of class for the bean
  * @author Pete Muir
  * @author David Allen
+ * @author Marko Luksa
  */
 public abstract class AbstractClassBean<T> extends AbstractBean<T, Class<T>> {
 
@@ -106,25 +107,6 @@ private static <T> InterceptorMetadata<T>[] emptyInterceptorMetadataArray() {
         return cast(EMPTY_INTERCEPTOR_METADATA_ARRAY);
     }
 
-    /**
-     * Extracts the complete set of interception bindings from a given set of
-     * annotations.
-     *
-     * @param beanManager
-     * @param annotations
-     * @return
-     */
-    protected static Set<Annotation> flattenInterceptorBindings(BeanManagerImpl beanManager, Set<Annotation> annotations) {
-        Set<Annotation> foundInterceptionBindingTypes = new HashSet<Annotation>();
-        for (Annotation annotation : annotations) {
-            if (beanManager.isInterceptorBinding(annotation.annotationType())) {
-                foundInterceptionBindingTypes.add(annotation);
-                foundInterceptionBindingTypes.addAll(beanManager.getServices().get(MetaAnnotationStore.class).getInterceptorBindingModel(annotation.annotationType()).getInheritedInterceptionBindingTypes());
-            }
-        }
-        return foundInterceptionBindingTypes;
-    }
-
     private InterceptorMetadata<SerializableContextual<?, ?>>[] toSerializableContextualArray(List<Interceptor<?>> interceptors) {
         List<InterceptorMetadata<SerializableContextual<Interceptor<?>, ?>>> serializableContextuals = new ArrayList<InterceptorMetadata<SerializableContextual<Interceptor<?>, ?>>>();
         for (Interceptor<?> interceptor : interceptors) {
@@ -209,16 +191,17 @@ protected void initInterceptionModelForType() {
         InterceptionModelBuilder<ClassMetadata<?>, ?> builder = InterceptionModelBuilder.<ClassMetadata<?>>newBuilderFor(classMetadata);
 
         // initialize CDI interceptors
-        Set<Annotation> classBindingAnnotations = flattenInterceptorBindings(beanManager, getWeldAnnotated().getAnnotations());
+        Set<Annotation> classBindingAnnotations = new InterceptorBindingSet(beanManager);
+        classBindingAnnotations.addAll(beanManager.extractInterceptorBindings(getWeldAnnotated().getAnnotations()));
         for (Class<? extends Annotation> annotation : getStereotypes()) {
-            classBindingAnnotations.addAll(flattenInterceptorBindings(beanManager, beanManager.getStereotypeDefinition(annotation)));
+            classBindingAnnotations.addAll(beanManager.extractInterceptorBindings(beanManager.getStereotypeDefinition(annotation)));
         }
         if (classBindingAnnotations.size() > 0) {
             if (Beans.findInterceptorBindingConflicts(beanManager, classBindingAnnotations)) {
                 throw new DeploymentException(CONFLICTING_INTERCEPTOR_BINDINGS, getType());
             }
 
-            Annotation[] classBindingAnnotationsArray = classBindingAnnotations.toArray(new Annotation[0]);
+            Annotation[] classBindingAnnotationsArray = classBindingAnnotations.toArray(new Annotation[classBindingAnnotations.size()]);
 
             List<Interceptor<?>> resolvedPostConstructInterceptors = beanManager.resolveInterceptors(InterceptionType.POST_CONSTRUCT, classBindingAnnotationsArray);
             builder.interceptPostConstruct().with(toSerializableContextualArray(resolvedPostConstructInterceptors));
@@ -235,22 +218,25 @@ protected void initInterceptionModelForType() {
         }
         List<WeldMethod<?, ?>> businessMethods = Beans.getInterceptableMethods(getWeldAnnotated());
         for (WeldMethod<?, ?> method : businessMethods) {
-            Set<Annotation> methodBindingAnnotations = new HashSet<Annotation>(classBindingAnnotations);
-            methodBindingAnnotations.addAll(flattenInterceptorBindings(beanManager, method.getAnnotations()));
+            Set<Annotation> methodBindingAnnotations = new InterceptorBindingSet(beanManager);
+            methodBindingAnnotations.addAll(classBindingAnnotations);
+            methodBindingAnnotations.addAll(beanManager.extractInterceptorBindings(method.getAnnotations()));
             if (methodBindingAnnotations.size() > 0) {
                 if (Beans.findInterceptorBindingConflicts(beanManager, methodBindingAnnotations)) {
                     throw new DeploymentException(CONFLICTING_INTERCEPTOR_BINDINGS, getType() + ""."" + method.getName() + ""()"");
                 }
 
-                List<Interceptor<?>> methodBoundInterceptors = beanManager.resolveInterceptors(InterceptionType.AROUND_INVOKE, methodBindingAnnotations.toArray(new Annotation[]{}));
+                Annotation[] methodBindingAnnotationsArray = methodBindingAnnotations.toArray(new Annotation[methodBindingAnnotations.size()]);
+
+                List<Interceptor<?>> methodBoundInterceptors = beanManager.resolveInterceptors(InterceptionType.AROUND_INVOKE, methodBindingAnnotationsArray);
                 if (methodBoundInterceptors != null && methodBoundInterceptors.size() > 0) {
                     if (method.isFinal()) {
                         throw new DefinitionException(FINAL_INTERCEPTED_BEAN_METHOD_NOT_ALLOWED, method, methodBoundInterceptors.get(0).getBeanClass().getName());
                     }
                     builder.interceptAroundInvoke(Reflections.<AnnotatedMethod<T>>cast(method).getJavaMember()).with(toSerializableContextualArray(methodBoundInterceptors));
                 }
 
-                methodBoundInterceptors = beanManager.resolveInterceptors(InterceptionType.AROUND_TIMEOUT, methodBindingAnnotations.toArray(new Annotation[]{}));
+                methodBoundInterceptors = beanManager.resolveInterceptors(InterceptionType.AROUND_TIMEOUT, methodBindingAnnotationsArray);
                 if (methodBoundInterceptors != null && methodBoundInterceptors.size() > 0) {
                     if (method.isFinal()) {
                         throw new DefinitionException(FINAL_INTERCEPTED_BEAN_METHOD_NOT_ALLOWED, method, methodBoundInterceptors.get(0).getBeanClass().getName());",2012-04-03T01:57:03Z,2
"@@ -45,6 +45,7 @@
 
 /**
  * @author Marius Bogoevici
+ * @author Marko Luksa
  */
 public class InterceptorImpl<T> extends ManagedBean<T> implements Interceptor<T> {
 
@@ -63,9 +64,9 @@ protected InterceptorImpl(WeldClass<T> type, BeanManagerImpl beanManager, Servic
         this.interceptorMetadata = beanManager.getInterceptorMetadataReader().getInterceptorMetadata(ClassMetadataInterceptorReference.of(WeldInterceptorClassMetadata.of(type)));
         this.serializable = type.isSerializable();
         this.interceptorBindingTypes = new HashSet<Annotation>();
-        interceptorBindingTypes.addAll(flattenInterceptorBindings(beanManager, getWeldAnnotated().getAnnotations()));
+        interceptorBindingTypes.addAll(beanManager.flattenInterceptorBindings(getWeldAnnotated().getAnnotations()));
         for (Class<? extends Annotation> annotation : getStereotypes()) {
-            interceptorBindingTypes.addAll(flattenInterceptorBindings(beanManager, beanManager.getStereotypeDefinition(annotation)));
+            interceptorBindingTypes.addAll(beanManager.flattenInterceptorBindings(beanManager.getStereotypeDefinition(annotation)));
         }
         if (this.interceptorBindingTypes.size() == 0) {
             throw new DeploymentException(MISSING_BINDING_ON_INTERCEPTOR, type.getName());",2012-04-03T01:57:03Z,3
"@@ -70,6 +70,7 @@
 import org.jboss.weld.serialization.spi.ContextualStore;
 import org.jboss.weld.util.Beans;
 import org.jboss.weld.util.BeansClosure;
+import org.jboss.weld.util.InterceptorBindingSet;
 import org.jboss.weld.util.Observers;
 import org.jboss.weld.util.Proxies;
 import org.jboss.weld.util.collections.Arrays2;
@@ -113,6 +114,8 @@
 import static org.jboss.weld.logging.messages.BeanManagerMessage.AMBIGUOUS_BEANS_FOR_DEPENDENCY;
 import static org.jboss.weld.logging.messages.BeanManagerMessage.CONTEXT_NOT_ACTIVE;
 import static org.jboss.weld.logging.messages.BeanManagerMessage.DUPLICATE_ACTIVE_CONTEXTS;
+import static org.jboss.weld.logging.messages.BeanManagerMessage.DUPLICATE_INTERCEPTOR_BINDING;
+import static org.jboss.weld.logging.messages.BeanManagerMessage.INTERCEPTOR_BINDINGS_EMPTY;
 import static org.jboss.weld.logging.messages.BeanManagerMessage.NON_NORMAL_SCOPE;
 import static org.jboss.weld.logging.messages.BeanManagerMessage.NOT_INTERCEPTOR_BINDING_TYPE;
 import static org.jboss.weld.logging.messages.BeanManagerMessage.NOT_STEREOTYPE;
@@ -137,6 +140,7 @@
  * @author Pete Muir
  * @author Marius Bogoevici
  * @author Ales Justin
+ * @author Marko Luksa
  */
 public class BeanManagerImpl implements WeldManager, Serializable {
 
@@ -620,7 +624,7 @@ public Object getReference(Bean<?> bean, CreationalContext<?> creationalContext,
     private boolean isProxyRequired(Bean<?> bean) {
         if (bean instanceof RIBean<?>) {
             return ((RIBean<?>) bean).isProxyRequired();
-        } else if (getServices().get(MetaAnnotationStore.class).getScopeModel(bean.getScope()).isNormal()) {
+        } else if (getMetaAnnotationStore().getScopeModel(bean.getScope()).isNormal()) {
             return true;
         } else {
             return false;
@@ -669,7 +673,7 @@ public Object getReference(InjectionPoint injectionPoint, Bean<?> resolvedBean,
             if (registerInjectionPoint) {
                 currentInjectionPoint.push(injectionPoint);
             }
-            if (getServices().get(MetaAnnotationStore.class).getScopeModel(resolvedBean.getScope()).isNormal() && !Proxies.isTypeProxyable(injectionPoint.getType())) {
+            if (getMetaAnnotationStore().getScopeModel(resolvedBean.getScope()).isNormal() && !Proxies.isTypeProxyable(injectionPoint.getType())) {
                 throw new UnproxyableResolutionException(UNPROXYABLE_RESOLUTION, resolvedBean, injectionPoint);
             }
             // TODO Can we move this logic to getReference?
@@ -707,7 +711,7 @@ public <T> Bean<T> getBean(Resolvable resolvable) {
             throw new UnsatisfiedResolutionException(UNRESOLVABLE_ELEMENT, resolvable);
         }
 
-        boolean normalScoped = getServices().get(MetaAnnotationStore.class).getScopeModel(bean.getScope()).isNormal();
+        boolean normalScoped = getMetaAnnotationStore().getScopeModel(bean.getScope()).isNormal();
         if (normalScoped && !Beans.isBeanProxyable(bean)) {
             throw Proxies.getUnproxyableTypesException(bean);
         }
@@ -745,15 +749,31 @@ private void checkResolveDecoratorsArguments(Set<Type> types) {
      * @param interceptorBindings The binding types to match
      * @return A list of matching interceptors
      * @see javax.enterprise.inject.spi.BeanManager#resolveInterceptors(javax.enterprise.inject.spi.InterceptionType,
-     *      java.lang.annotation.Annotation[])
+     *      java.lang.annotation.Annotation...)
      */
     public List<Interceptor<?>> resolveInterceptors(InterceptionType type, Annotation... interceptorBindings) {
-        // We can always cache as this is only ever called by Weld where we avoid non-static inner classes for annotation literals
+        if (interceptorBindings.length == 0) {
+            throw new IllegalArgumentException(INTERCEPTOR_BINDINGS_EMPTY);
+        }
+        Set<Annotation> interceptorBindingsSet = new InterceptorBindingSet(this);
+        for (Annotation annotation : interceptorBindings) {
+            if (!isInterceptorBinding(annotation.annotationType())) {
+                throw new IllegalArgumentException(NOT_INTERCEPTOR_BINDING_TYPE, annotation);
+            }
+            if (interceptorBindingsSet.contains(annotation)) {
+                throw new IllegalArgumentException(DUPLICATE_INTERCEPTOR_BINDING, annotation);
+            }
+            interceptorBindingsSet.add(annotation);
+        }
+
+        Set<Annotation> flattenedInterceptorBindings = flattenInterceptorBindings(interceptorBindingsSet);
+
         InterceptorResolvable interceptorResolvable = new InterceptorResolvableBuilder(Object.class)
                 .setInterceptionType(type)
-                .addQualifiers(interceptorBindings)
+                .addQualifiers(flattenedInterceptorBindings)
                 .create();
-        return new ArrayList<Interceptor<?>>(interceptorResolver.resolve(interceptorResolvable, isCacheable(interceptorBindings)));
+        // We can always cache as this is only ever called by Weld where we avoid non-static inner classes for annotation literals
+        return new ArrayList<Interceptor<?>>(interceptorResolver.resolve(interceptorResolvable, isCacheable(flattenedInterceptorBindings)));
     }
 
     /**
@@ -821,7 +841,7 @@ public BeanManagerImpl createActivity() {
     }
 
     public BeanManagerImpl setCurrent(Class<? extends Annotation> scopeType) {
-        if (!getServices().get(MetaAnnotationStore.class).getScopeModel(scopeType).isNormal()) {
+        if (!getMetaAnnotationStore().getScopeModel(scopeType).isNormal()) {
             throw new IllegalArgumentException(NON_NORMAL_SCOPE, scopeType);
         }
         currentActivities.add(new CurrentActivity(getContext(scopeType), this));
@@ -944,7 +964,7 @@ public void validate(InjectionPoint ij) {
     }
 
     public Set<Annotation> getInterceptorBindingDefinition(Class<? extends Annotation> bindingType) {
-        InterceptorBindingModel<? extends Annotation> model = getServices().get(MetaAnnotationStore.class).getInterceptorBindingModel(bindingType);
+        InterceptorBindingModel<? extends Annotation> model = getMetaAnnotationStore().getInterceptorBindingModel(bindingType);
         if (model.isValid()) {
             return model.getMetaAnnotations();
         } else {
@@ -957,7 +977,7 @@ public Bean<?> getPassivationCapableBean(String id) {
     }
 
     public Set<Annotation> getStereotypeDefinition(Class<? extends Annotation> stereotype) {
-        final StereotypeModel<? extends Annotation> model = getServices().get(MetaAnnotationStore.class).getStereotype(stereotype);
+        final StereotypeModel<? extends Annotation> model = getMetaAnnotationStore().getStereotype(stereotype);
         if (model.isValid()) {
             return model.getMetaAnnotations();
         } else {
@@ -966,29 +986,33 @@ public Set<Annotation> getStereotypeDefinition(Class<? extends Annotation> stere
     }
 
     public boolean isQualifier(Class<? extends Annotation> annotationType) {
-        return getServices().get(MetaAnnotationStore.class).getBindingTypeModel(annotationType).isValid();
+        return getMetaAnnotationStore().getBindingTypeModel(annotationType).isValid();
     }
 
     public boolean isInterceptorBinding(Class<? extends Annotation> annotationType) {
-        return getServices().get(MetaAnnotationStore.class).getInterceptorBindingModel(annotationType).isValid();
+        return getMetaAnnotationStore().getInterceptorBindingModel(annotationType).isValid();
     }
 
     public boolean isNormalScope(Class<? extends Annotation> annotationType) {
-        ScopeModel<?> scope = getServices().get(MetaAnnotationStore.class).getScopeModel(annotationType);
+        ScopeModel<?> scope = getMetaAnnotationStore().getScopeModel(annotationType);
         return scope.isValid() && scope.isNormal();
     }
 
     public boolean isPassivatingScope(Class<? extends Annotation> annotationType) {
-        ScopeModel<?> scope = getServices().get(MetaAnnotationStore.class).getScopeModel(annotationType);
+        ScopeModel<?> scope = getMetaAnnotationStore().getScopeModel(annotationType);
         return scope.isValid() && scope.isPassivating();
     }
 
     public boolean isScope(Class<? extends Annotation> annotationType) {
-        return getServices().get(MetaAnnotationStore.class).getScopeModel(annotationType).isValid();
+        return getMetaAnnotationStore().getScopeModel(annotationType).isValid();
     }
 
     public boolean isStereotype(Class<? extends Annotation> annotationType) {
-        return getServices().get(MetaAnnotationStore.class).getStereotype(annotationType).isValid();
+        return getMetaAnnotationStore().getStereotype(annotationType).isValid();
+    }
+
+    public MetaAnnotationStore getMetaAnnotationStore() {
+        return getServices().get(MetaAnnotationStore.class);
     }
 
     public ELResolver getELResolver() {
@@ -1059,6 +1083,38 @@ public <X> InjectionTarget<X> fireProcessInjectionTarget(AnnotatedType<X> annota
         return AbstractProcessInjectionTarget.fire(this, annotatedType, createInjectionTarget(annotatedType));
     }
 
+    public Set<Annotation> extractInterceptorBindings(Iterable<Annotation> annotations) {
+        Set<Annotation> foundInterceptionBindingTypes = new HashSet<Annotation>();
+        for (Annotation annotation : annotations) {
+            if (isInterceptorBinding(annotation.annotationType())) {
+                foundInterceptionBindingTypes.add(annotation);
+            }
+        }
+        return foundInterceptionBindingTypes;
+    }
+
+    /**
+     * Extracts the complete set of interception bindings from a given set of
+     * annotations.
+     *
+     * @param annotations
+     * @return
+     */
+    public Set<Annotation> flattenInterceptorBindings(Set<Annotation> annotations) {
+        MetaAnnotationStore metaAnnotationStore = getMetaAnnotationStore();
+
+        Set<Annotation> foundInterceptionBindingTypes = new InterceptorBindingSet(this);
+        for (Annotation annotation : annotations) {
+            if (isInterceptorBinding(annotation.annotationType())) {
+                foundInterceptionBindingTypes.add(annotation);
+
+                InterceptorBindingModel<? extends Annotation> interceptorBindingModel = metaAnnotationStore.getInterceptorBindingModel(annotation.annotationType());
+                foundInterceptionBindingTypes.addAll(interceptorBindingModel.getInheritedInterceptionBindingTypes());
+            }
+        }
+        return foundInterceptionBindingTypes;
+    }
+
     private static class InstanceInjectionPoint implements InjectionPoint, Serializable {
 
         private static final InjectionPoint INSTANCE = new InstanceInjectionPoint();",2012-04-03T01:57:03Z,4
"@@ -113,6 +113,7 @@
  * @author David Allen
  * @author Marius Bogoevici
  * @author Ales Justin
+ * @author Marko Luksa
  */
 public class Beans {
     // TODO Convert messages
@@ -473,8 +474,9 @@ public static boolean containsAllInterceptionBindings(Set<Annotation> expectedBi
     }
 
     public static boolean findInterceptorBindingConflicts(BeanManagerImpl manager, Set<Annotation> bindings) {
+        Set<Annotation> flattenedBindings = manager.flattenInterceptorBindings(bindings);
         Map<Class<? extends Annotation>, Annotation> foundAnnotations = new HashMap<Class<? extends Annotation>, Annotation>();
-        for (Annotation binding : bindings) {
+        for (Annotation binding : flattenedBindings) {
             if (foundAnnotations.containsKey(binding.annotationType())) {
                 InterceptorBindingModel<?> bindingType = manager.getServices().get(MetaAnnotationStore.class).getInterceptorBindingModel(binding.annotationType());
                 if (!bindingType.isEqual(binding, foundAnnotations.get(binding.annotationType()), false)) {",2012-04-03T01:57:03Z,5
"@@ -0,0 +1,62 @@
+package org.jboss.weld.util;
+
+import org.jboss.weld.manager.BeanManagerImpl;
+import org.jboss.weld.metadata.cache.InterceptorBindingModel;
+import org.jboss.weld.metadata.cache.MetaAnnotationStore;
+
+import java.lang.annotation.Annotation;
+import java.util.AbstractSet;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Set;
+
+/**
+ * @author <a href=""mailto:marko.luksa@gmail.com"">Marko Luksa</a>
+ */
+public class InterceptorBindingSet extends AbstractSet<Annotation> {
+
+    private BeanManagerImpl beanManager;
+    private Set<Annotation> set = new HashSet<Annotation>();
+
+    public InterceptorBindingSet(BeanManagerImpl beanManager) {
+        this.beanManager = beanManager;
+    }
+
+    @Override
+    public boolean add(Annotation annotation) {
+        if (contains(annotation)) {
+            return false;
+        }
+        return set.add(annotation);
+    }
+
+    @Override
+    public Iterator<Annotation> iterator() {
+        return set.iterator();
+    }
+
+    @Override
+    public int size() {
+        return set.size();
+    }
+
+
+    public boolean contains(Object o) {
+        if (o instanceof Annotation) {
+            Annotation annotation = (Annotation) o;
+
+            MetaAnnotationStore metaAnnotationStore = beanManager.getMetaAnnotationStore();
+            InterceptorBindingModel<? extends Annotation> interceptorBindingModel = metaAnnotationStore.getInterceptorBindingModel(annotation.annotationType());
+
+            for (Annotation containedAnnotation : set) {
+                if (interceptorBindingModel.isEqual(annotation, containedAnnotation)) {
+                    return true;
+                }
+            }
+            return false;
+        } else {
+            return super.contains(o);
+        }
+    }
+
+}",2012-04-03T01:57:03Z,6
"@@ -73,7 +73,6 @@ public void testInterceptorBindingRecognized() {
     }
 
     @Test
-    @Ignore(""WELD-999"")
     public void testTransitivityOfInterceptorBindings() {
         // non-transitive bindings
         assertEquals(1, manager.resolveInterceptors(InterceptionType.AROUND_INVOKE, new SynchronizedLiteral()).size());",2012-04-03T01:57:03Z,7
"@@ -4,12 +4,12 @@
     <groupId>org.jboss.weld</groupId>
     <artifactId>weld-core-jboss-as6-updater</artifactId>
     <packaging>pom</packaging>
-    <version>1.1.12-SNAPSHOT</version>
+    <version>1.1.14-SNAPSHOT</version>
 
     <parent>
         <groupId>org.jboss.weld</groupId>
         <artifactId>weld-core-parent</artifactId>
-        <version>1.1.12-SNAPSHOT</version>
+        <version>1.1.14-SNAPSHOT</version>
         <relativePath>../../pom.xml</relativePath>
     </parent>
 ",2013-07-03T12:53:30Z,8
"@@ -4,12 +4,12 @@
     <groupId>org.jboss.weld</groupId>
     <artifactId>weld-core-jboss-as7-updater</artifactId>
     <packaging>pom</packaging>
-    <version>1.1.12-SNAPSHOT</version>
+    <version>1.1.14-SNAPSHOT</version>
 
     <parent>
         <groupId>org.jboss.weld</groupId>
         <artifactId>weld-core-parent</artifactId>
-        <version>1.1.12-SNAPSHOT</version>
+        <version>1.1.14-SNAPSHOT</version>
         <relativePath>../../pom.xml</relativePath>
     </parent>
 ",2013-07-03T12:53:30Z,9
"@@ -55,6 +55,7 @@
 
    <properties>
       <osgi.version>1.0</osgi.version>
+      <parsedVersion.osgiVersion>${project.version}</parsedVersion.osgiVersion>
    </properties>
    <build>
       <plugins>",2011-07-19T09:27:13Z,10
"@@ -115,9 +115,11 @@
                         <Import-Package>
                             org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=""[${slf4j.version},$${version;=+;${slf4j.version}})""; resolution:=optional,
                             ch.qos.cal10n; version=${cal10n.version}; resolution:=optional,
-                            javax.interceptor.*, *; resolution:=optional,
+                            javax.interceptor.*; version=""1.0"",
                             javax.transaction; version=""1.1""; resolution:=optional,
-                            javax.annotation; version=1.1.99; resolution:=optional, 
+                            javax.annotation; resolution:=optional,
+                            javax.el; version=1.0; resolution:=optional, 
+                            *; resolution:=optional,
                         </Import-Package>
 
                         <Private-Package>",2013-08-22T12:26:27Z,10
"@@ -16,22 +16,31 @@
  */
 package org.jboss.weld.annotated;
 
+import static org.jboss.weld.logging.Category.BOOTSTRAP;
+import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
 import static org.jboss.weld.logging.messages.MetadataMessage.INVALID_PARAMETER_POSITION;
 import static org.jboss.weld.logging.messages.MetadataMessage.METADATA_SOURCE_RETURNED_NULL;
+import static org.jboss.weld.logging.messages.MetadataMessage.NOT_IN_HIERARCHY;
+import static org.jboss.weld.logging.messages.MetadataMessage.NO_CONSTRUCTOR;
+
+import java.util.HashSet;
+import java.util.Set;
 
 import javax.enterprise.inject.spi.Annotated;
 import javax.enterprise.inject.spi.AnnotatedMember;
 import javax.enterprise.inject.spi.AnnotatedParameter;
 import javax.enterprise.inject.spi.AnnotatedType;
 
 import org.jboss.weld.exceptions.IllegalArgumentException;
+import org.slf4j.cal10n.LocLogger;
 
 /**
  * Validates that methods of an {@link Annotated} implementation return sane values.
  * @author Jozef Hartinger
  *
  */
 public class AnnotatedTypeValidator {
+    private static final LocLogger log = loggerFactory().getLogger(BOOTSTRAP);
 
     private AnnotatedTypeValidator() {
     }
@@ -62,11 +71,40 @@ public static void validateAnnotatedType(AnnotatedType<?> type) {
         checkNotNull(type.getFields(), ""getFields()"", type);
         checkNotNull(type.getConstructors(), ""getConstructors()"", type);
         checkNotNull(type.getMethods(), ""getMethods()"", type);
+        checkSensibility(type);
     }
 
     private static void checkNotNull(Object expression, String methodName, Object target) {
         if (expression == null) {
             throw new IllegalArgumentException(METADATA_SOURCE_RETURNED_NULL, methodName, target);
         }
     }
+
+    /**
+     * Checks if the given AnnotatedType is sensible, otherwise provides warnings.
+     */
+    private static void checkSensibility(AnnotatedType<?> type) {
+        // check if it has a constructor
+        if (type.getConstructors().isEmpty() && !type.getJavaClass().isInterface()) {
+            log.warn(NO_CONSTRUCTOR, type);
+        }
+
+        Set<Class<?>> hierarchy = new HashSet<Class<?>>();
+        for (Class<?> clazz = type.getJavaClass(); clazz != null; clazz = clazz.getSuperclass()) {
+            hierarchy.add(clazz);
+        }
+
+        checkMembersBelongToHierarchy(type.getConstructors(), hierarchy, type);
+        checkMembersBelongToHierarchy(type.getMethods(), hierarchy, type);
+        checkMembersBelongToHierarchy(type.getFields(), hierarchy, type);
+    }
+
+    private static void checkMembersBelongToHierarchy(Iterable<? extends AnnotatedMember<?>> members, Set<Class<?>> hierarchy, AnnotatedType<?> type) {
+        for (AnnotatedMember<?> member : members) {
+            if (!hierarchy.contains(member.getJavaMember().getDeclaringClass())) {
+                log.warn(NOT_IN_HIERARCHY, member.toString(), type.toString());
+            }
+        }
+    }
+
 }",2013-06-03T14:39:48Z,11
"@@ -51,4 +51,6 @@ public enum MetadataMessage {
     @MessageId(""001113"")NOT_A_SCOPE,
     @MessageId(""001114"")METADATA_SOURCE_RETURNED_NULL,
     @MessageId(""001115"")INVALID_PARAMETER_POSITION,
+    @MessageId(""001116"")NO_CONSTRUCTOR,
+    @MessageId(""001117"")NOT_IN_HIERARCHY;
 }",2013-06-03T14:39:48Z,12
"@@ -16,6 +16,7 @@
  */
 package org.jboss.weld.manager;
 
+import static org.jboss.weld.annotated.AnnotatedTypeValidator.validateAnnotatedType;
 import static org.jboss.weld.logging.Category.BOOTSTRAP;
 import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
 import static org.jboss.weld.logging.messages.BeanManagerMessage.AMBIGUOUS_BEANS_FOR_DEPENDENCY;
@@ -1380,6 +1381,7 @@ public <T> InjectionTargetFactoryImpl<T> getLocalInjectionTargetFactory(Annotate
      */
     @Override
     public <T> InjectionTargetFactoryImpl<T> getInjectionTargetFactory(AnnotatedType<T> type) {
+        validateAnnotatedType(type);
         BeanManagerImpl manager = BeanManagerLookupService.lookupBeanManager(type.getJavaClass(), this);
         return new InjectionTargetFactoryImpl<T>(type, manager);
     }",2013-06-03T14:39:48Z,4
"@@ -16,8 +16,6 @@
  */
 package org.jboss.weld.manager;
 
-import static org.jboss.weld.annotated.AnnotatedTypeValidator.validateAnnotatedType;
-
 import javax.enterprise.inject.spi.AnnotatedType;
 import javax.enterprise.inject.spi.Bean;
 import javax.enterprise.inject.spi.Decorator;
@@ -57,7 +55,6 @@ public class InjectionTargetFactoryImpl<T> implements WeldInjectionTargetFactory
 
     protected InjectionTargetFactoryImpl(AnnotatedType<T> type, BeanManagerImpl manager) {
         this.manager = manager;
-        validateAnnotatedType(type);
         this.type = manager.getServices().get(ClassTransformer.class).getEnhancedAnnotatedType(type, manager.getId());
         this.injectionTargetService = manager.getServices().get(InjectionTargetService.class);
         this.injectionServices = manager.getServices().get(InjectionServices.class);",2013-06-03T14:39:48Z,13
"@@ -14,3 +14,5 @@ TYPES_EMPTY=BeanAttributes.getTypes() may not return an empty set {0}
 NOT_A_SCOPE={0} defined on {1} is not a scope annotation
 METADATA_SOURCE_RETURNED_NULL={0} returned null for {1}
 INVALID_PARAMETER_POSITION=Parameter position {0} of parameter {1} is not valid
+NO_CONSTRUCTOR=AnnotatedType ({0}) without a constructor
+NOT_IN_HIERARCHY=Member ({0}) does not belong to the actual class hierarchy of the annotatedType ({1})",2013-06-03T14:39:48Z,14
"@@ -27,7 +27,7 @@
 import static org.jboss.weld.logging.messages.BeanMessage.ONLY_ONE_SCOPE_ALLOWED;
 import static org.jboss.weld.logging.messages.BeanMessage.PRODUCER_CAST_ERROR;
 import static org.jboss.weld.logging.messages.BeanMessage.PRODUCER_METHOD_WITH_TYPE_VARIABLE_RETURN_TYPE_MUST_BE_DEPENDENT;
-import static org.jboss.weld.logging.messages.BeanMessage.PRODUCER_METHOD_WITH_WILDCARD_RETURN_TYPE_MUST_BE_DEPENDENT;
+import static org.jboss.weld.logging.messages.BeanMessage.PRODUCER_METHOD_CANNOT_HAVE_A_WILDCARD_RETURN_TYPE;
 import static org.jboss.weld.logging.messages.BeanMessage.RETURN_TYPE_MUST_BE_CONCRETE;
 import static org.jboss.weld.logging.messages.BeanMessage.USING_DEFAULT_SCOPE;
 import static org.jboss.weld.logging.messages.BeanMessage.USING_SCOPE;
@@ -183,7 +183,7 @@ else if (getWeldAnnotated().isParameterizedType())
             }
             else if (type instanceof WildcardType)
             {
-               throw new DefinitionException(PRODUCER_METHOD_WITH_WILDCARD_RETURN_TYPE_MUST_BE_DEPENDENT, getWeldAnnotated());
+               throw new DefinitionException(PRODUCER_METHOD_CANNOT_HAVE_A_WILDCARD_RETURN_TYPE, getWeldAnnotated());
             }
          }
       }",2010-11-13T19:05:55Z,15
"@@ -133,7 +133,7 @@ public enum BeanMessage
    @MessageId(""000095"") GENERIC_SESSION_BEAN_MUST_BE_DEPENDENT,
    @MessageId(""000096"") PRODUCER_FIELD_ON_SESSION_BEAN_MUST_BE_STATIC,
    @MessageId(""000097"") PRODUCER_METHOD_WITH_TYPE_VARIABLE_RETURN_TYPE_MUST_BE_DEPENDENT,
-   @MessageId(""000098"") PRODUCER_METHOD_WITH_WILDCARD_RETURN_TYPE_MUST_BE_DEPENDENT,
+   @MessageId(""000098"") PRODUCER_METHOD_CANNOT_HAVE_A_WILDCARD_RETURN_TYPE,
    @MessageId(""000099"") CANNOT_LOAD_CLASS,
    @MessageId(""001500"") PROXY_DESERIALIZATION_FAILURE,
    @MessageId(""001501"") BEAN_INSTANCE_NOT_SET_ON_PROXY,",2010-11-13T19:05:55Z,16
"@@ -96,7 +96,7 @@ INJECTED_FIELD_CANNOT_BE_PRODUCER=Injected field {0} cannot be annotated @Produc
 GENERIC_SESSION_BEAN_MUST_BE_DEPENDENT=Session bean with generic class {0} must be @Depedent scope
 PRODUCER_FIELD_ON_SESSION_BEAN_MUST_BE_STATIC=Producer fields on session beans must be static. Field {0} declared on {1}
 PRODUCER_METHOD_WITH_TYPE_VARIABLE_RETURN_TYPE_MUST_BE_DEPENDENT=A producer method with a parameterized return type with a type variable must be declared @Dependent scoped. Method {0}
-PRODUCER_METHOD_WITH_WILDCARD_RETURN_TYPE_MUST_BE_DEPENDENT=A producer method cannot have a return type parameterized with wildcards. Method {0}  
+PRODUCER_METHOD_CANNOT_HAVE_A_WILDCARD_RETURN_TYPE=A producer method cannot have a return type parameterized with wildcards. Method {0}  
 CANNOT_LOAD_CLASS=Cannot load class {0} during deserialization of proxy
 PROXY_DESERIALIZATION_FAILURE=Failed to deserialize proxy object
 BEAN_INSTANCE_NOT_SET_ON_PROXY=Method call requires a BeanInstance which has not been set for this proxy",2010-11-13T19:05:55Z,17
"@@ -44,7 +44,7 @@
 import org.jboss.classfilewriter.code.CodeAttribute;
 import org.jboss.weld.Container;
 import org.jboss.weld.bean.proxy.util.SerializableClientProxy;
-import org.jboss.weld.context.cache.RequestScopedBeanCache;
+import org.jboss.weld.context.cache.RequestScopedCache;
 import org.jboss.weld.security.GetDeclaredFieldAction;
 import org.jboss.weld.security.SetAccessibleAction;
 import org.jboss.weld.serialization.spi.BeanIdentifier;
@@ -256,7 +256,7 @@ void doReturn(CodeAttribute b, ClassMethod classMethod) {
      */
     private void loadCacheableBeanInstance(ClassFile file, MethodInformation methodInfo, CodeAttribute b) {
         //first we need to see if the scope is active
-        b.invokestatic(RequestScopedBeanCache.class.getName(), ""isActive"", EMPTY_PARENTHESES + DescriptorUtils.BOOLEAN_CLASS_DESCRIPTOR);
+        b.invokestatic(RequestScopedCache.class.getName(), ""isActive"", EMPTY_PARENTHESES + DescriptorUtils.BOOLEAN_CLASS_DESCRIPTOR);
         //if it is not active we just get the bean directly
 
         final BranchEnd returnInstruction = b.ifeq();
@@ -280,7 +280,7 @@ private void loadCacheableBeanInstance(ClassFile file, MethodInformation methodI
         b.dupX1();
         b.swap();
         b.invokevirtual(ThreadLocal.class.getName(), ""set"", ""("" + LJAVA_LANG_OBJECT + "")"" + DescriptorUtils.VOID_CLASS_DESCRIPTOR);
-        b.invokestatic(RequestScopedBeanCache.class.getName(), ""addItem"", ""("" + LJAVA_LANG_THREAD_LOCAL + "")"" + DescriptorUtils.VOID_CLASS_DESCRIPTOR);
+        b.invokestatic(RequestScopedCache.class.getName(), ""addItem"", ""("" + LJAVA_LANG_THREAD_LOCAL + "")"" + DescriptorUtils.VOID_CLASS_DESCRIPTOR);
         final BranchEnd endOfIfStatement = b.gotoInstruction();
         b.branchEnd(returnInstruction);
         loadBeanInstance(file, methodInfo, b);",2014-11-14T15:59:52Z,18
"@@ -21,6 +21,8 @@
 import java.util.Deque;
 import java.util.EmptyStackException;
 
+import org.jboss.weld.context.cache.RequestScopedCache;
+
 /**
  * A class that holds the interception (and decoration) contexts which are currently in progress.
  * <p/>
@@ -35,7 +37,28 @@
  * @author Marius Bogoevici
  */
 public class InterceptionDecorationContext {
-    private static ThreadLocal<Deque<CombinedInterceptorAndDecoratorStackMethodHandler>> interceptionContexts = new ThreadLocal<Deque<CombinedInterceptorAndDecoratorStackMethodHandler>>();
+    private static ThreadLocal<Stack> interceptionContexts = new ThreadLocal<Stack>();
+
+    private static class Stack {
+        private final boolean removeWhenEmpty;
+        private final Deque<CombinedInterceptorAndDecoratorStackMethodHandler> elements;
+
+        private Stack() {
+            this.elements = new ArrayDeque<CombinedInterceptorAndDecoratorStackMethodHandler>();
+            /*
+             * Setting / removing of a thread-local is much more expensive compared to get. Therefore,
+             * if RequestScopedCache is active we register the thread-local for removal at the end of the
+             * request. This yields possitive results only if the number of intercepted invocations is large.
+             * If it is not, the performance characteristics are similar to explicitly removing the thread-local
+             * once the stack gets empty.
+             */
+            this.removeWhenEmpty = !RequestScopedCache.addItemIfActive(interceptionContexts);
+        }
+
+        private boolean shouldRemove() {
+            return removeWhenEmpty && elements.isEmpty();
+        }
+    }
 
     private InterceptionDecorationContext() {
     }
@@ -54,7 +77,7 @@ public static CombinedInterceptorAndDecoratorStackMethodHandler peek() {
      * @return the current top of the stack or returns null if the stack is empty
      */
     public static CombinedInterceptorAndDecoratorStackMethodHandler peekIfNotEmpty() {
-        Deque<CombinedInterceptorAndDecoratorStackMethodHandler> stack = interceptionContexts.get();
+        Stack stack = interceptionContexts.get();
         if (empty(stack)) {
             return null;
         }
@@ -82,7 +105,7 @@ public static void endInterceptorContext() {
      * The caller of this method is required to call {@link #endInterceptorContext()} if and only if this method returns true.
      */
     public static boolean startIfNotEmpty() {
-        Deque<CombinedInterceptorAndDecoratorStackMethodHandler> stack = interceptionContexts.get();
+        Stack stack = interceptionContexts.get();
         if (empty(stack)) {
             return false;
         }
@@ -97,49 +120,49 @@ public static boolean startIfNotEmpty() {
      * @return true if the given context was pushed to the top of the stack, false if the given context was on top already
      */
     public static boolean startIfNotOnTop(CombinedInterceptorAndDecoratorStackMethodHandler context) {
-        Deque<CombinedInterceptorAndDecoratorStackMethodHandler> stack = interceptionContexts.get();
+        Stack stack = interceptionContexts.get();
         if (empty(stack) || peek(stack) != context) { // == used intentionally instead of equals
             push(stack, context);
             return true;
         }
         return false;
     }
 
-    private static CombinedInterceptorAndDecoratorStackMethodHandler pop(Deque<CombinedInterceptorAndDecoratorStackMethodHandler> stack) {
+    private static CombinedInterceptorAndDecoratorStackMethodHandler pop(Stack stack) {
         if (stack == null) {
             throw new EmptyStackException();
         } else {
             try {
-                return stack.removeFirst();
+                return stack.elements.removeFirst();
             } finally {
-                if (stack.isEmpty()) {
+                if (stack.shouldRemove()) {
                     interceptionContexts.remove();
                 }
             }
         }
     }
 
-    private static void push(Deque<CombinedInterceptorAndDecoratorStackMethodHandler> stack, CombinedInterceptorAndDecoratorStackMethodHandler item) {
+    private static void push(Stack stack, CombinedInterceptorAndDecoratorStackMethodHandler item) {
         if (stack == null) {
-            stack = new ArrayDeque<CombinedInterceptorAndDecoratorStackMethodHandler>();
+            stack = new Stack();
             interceptionContexts.set(stack);
         }
-        stack.addFirst(item);
+        stack.elements.addFirst(item);
     }
 
-    private static CombinedInterceptorAndDecoratorStackMethodHandler peek(Deque<CombinedInterceptorAndDecoratorStackMethodHandler> stack) {
+    private static CombinedInterceptorAndDecoratorStackMethodHandler peek(Stack stack) {
         if (stack == null) {
             throw new EmptyStackException();
         } else {
-            return stack.peekFirst();
+            return stack.elements.peekFirst();
         }
     }
 
-    private static boolean empty(Deque<CombinedInterceptorAndDecoratorStackMethodHandler> stack) {
+    private static boolean empty(Stack stack) {
         if (stack == null) {
             return true;
         } else {
-            return stack.isEmpty();
+            return stack.elements.isEmpty();
         }
     }
 }",2014-11-14T15:59:52Z,19
"@@ -27,7 +27,7 @@
 import org.jboss.weld.context.api.ContextualInstance;
 import org.jboss.weld.context.beanstore.BeanStore;
 import org.jboss.weld.context.beanstore.LockedBean;
-import org.jboss.weld.context.cache.RequestScopedBeanCache;
+import org.jboss.weld.context.cache.RequestScopedCache;
 import org.jboss.weld.logging.ContextLogger;
 import org.jboss.weld.serialization.spi.BeanIdentifier;
 import org.jboss.weld.serialization.spi.ContextualStore;
@@ -130,7 +130,7 @@ public void destroy(Contextual<?> contextual) {
         BeanIdentifier id = getId(contextual);
         ContextualInstance<?> beanInstance = getBeanStore().remove(id);
         if (beanInstance != null) {
-            RequestScopedBeanCache.invalidate();
+            RequestScopedCache.invalidate();
             destroyContextualInstance(beanInstance);
         }
     }",2014-11-14T15:59:52Z,20
"@@ -4,7 +4,7 @@
 import org.jboss.weld.context.beanstore.MapBeanStore;
 import org.jboss.weld.context.beanstore.NamingScheme;
 import org.jboss.weld.context.beanstore.SimpleNamingScheme;
-import org.jboss.weld.context.cache.RequestScopedBeanCache;
+import org.jboss.weld.context.cache.RequestScopedCache;
 
 import javax.enterprise.context.RequestScoped;
 import java.lang.annotation.Annotation;
@@ -36,13 +36,13 @@ public boolean associate(Map<String, Object> storage) {
     @Override
     public void activate() {
         super.activate();
-        RequestScopedBeanCache.beginRequest();
+        RequestScopedCache.beginRequest();
     }
 
     @Override
     public void deactivate() {
         try {
-            RequestScopedBeanCache.endRequest();
+            RequestScopedCache.endRequest();
         } finally {
             super.deactivate();
         }",2014-11-14T15:59:52Z,21
"@@ -21,14 +21,15 @@
 
 /**
  * Caches beans over the life of a request, to allow for efficient bean lookups from proxies.
+ * Besides, can hold any ThreadLocals to be removed at the end of the request.
  *
  * @author Stuart Douglas
  */
-public class RequestScopedBeanCache {
+public class RequestScopedCache {
 
     private static final ThreadLocal<List<RequestScopedItem>> CACHE = new ThreadLocal<List<RequestScopedItem>>();
 
-    private RequestScopedBeanCache() {
+    private RequestScopedCache() {
     }
 
     public static boolean isActive() {
@@ -47,8 +48,26 @@ public static void addItem(final RequestScopedItem item) {
         cache.add(item);
     }
 
-    public static void addItem(final ThreadLocal item) {
+    public static void addItem(final ThreadLocal<?> item) {
+        addItem(CACHE.get(), item);
+    }
+
+    /**
+     * Registers the given item to be removed at the end of the request or does nothing
+     * if the cache is not active.
+     * @param item the given item
+     * @return true iff the item was registered
+     */
+    public static boolean addItemIfActive(final ThreadLocal<?> item) {
         final List<RequestScopedItem> cache = CACHE.get();
+        if (cache != null) {
+            addItem(cache, item);
+            return true;
+        }
+        return false;
+    }
+
+    private static void addItem(List<RequestScopedItem> cache, final ThreadLocal<?> item) {
         checkCacheForAdding(cache);
         cache.add(new RequestScopedItem() {
             public void invalidate() {",2014-11-14T15:59:52Z,22
"@@ -31,7 +31,7 @@
 import org.jboss.weld.context.beanstore.NamingScheme;
 import org.jboss.weld.context.beanstore.SimpleNamingScheme;
 import org.jboss.weld.context.beanstore.http.RequestBeanStore;
-import org.jboss.weld.context.cache.RequestScopedBeanCache;
+import org.jboss.weld.context.cache.RequestScopedCache;
 import org.jboss.weld.logging.ContextLogger;
 import org.jboss.weld.util.reflection.Reflections;
 
@@ -61,13 +61,13 @@ public boolean associate(HttpServletRequest request) {
     @Override
     public void activate() {
         super.activate();
-        RequestScopedBeanCache.beginRequest();
+        RequestScopedCache.beginRequest();
     }
 
     @Override
     public void deactivate() {
         try {
-            RequestScopedBeanCache.endRequest();
+            RequestScopedCache.endRequest();
         } finally {
             super.deactivate();
         }",2014-11-14T15:59:52Z,23
"@@ -23,7 +23,7 @@
 
 import org.jboss.weld.Container;
 import org.jboss.weld.bootstrap.api.Service;
-import org.jboss.weld.context.cache.RequestScopedBeanCache;
+import org.jboss.weld.context.cache.RequestScopedCache;
 import org.jboss.weld.context.http.HttpRequestContext;
 import org.jboss.weld.context.http.HttpRequestContextImpl;
 import org.jboss.weld.context.http.HttpSessionContext;
@@ -151,7 +151,7 @@ public void sessionDestroyed(HttpSession session) {
         deactivateSessionDestructionContext(session);
         boolean destroyed = getSessionContext().destroy(session);
         SessionHolder.clear();
-        RequestScopedBeanCache.endRequest();
+        RequestScopedCache.endRequest();
         if (destroyed) {
             // we are outside of a request (the session timed out) and therefore the session was destroyed immediately
             // we can fire the @Destroyed(SessionScoped.class) event immediately",2014-11-14T15:59:52Z,24
"@@ -33,7 +33,6 @@
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
@@ -170,6 +169,8 @@ protected Map<Class<? extends Annotation>, Annotation> mergeMethodInterceptorBin
 
     protected ProxyFactory<T> decoratorProxyFactory;
 
+    private boolean hasInterceptors;
+
     /**
      * Constructor
      *
@@ -240,6 +241,7 @@ protected void initInterceptorsIfNeeded() {
         if (isInterceptionCandidate() && !beanManager.getInterceptorModelRegistry().containsKey(getType())) {
             new InterceptionModelInitializer().init();
         }
+        hasInterceptors = this.isInterceptionCandidate() && (hasSerializationOrInvocationInterceptorMethods || beanManager.getInterceptorModelRegistry().get(getType()) != null);
     }
 
     public void initDecorators() {
@@ -421,7 +423,7 @@ protected void defaultPostConstruct(T instance) {
     }
 
     public boolean hasInterceptors() {
-        return this.isInterceptionCandidate() && (hasSerializationOrInvocationInterceptorMethods || beanManager.getInterceptorModelRegistry().get(getType()) != null);
+        return hasInterceptors;
     }
 
     private void initTargetClassInterceptors() {",2012-04-14T20:14:54Z,2
"@@ -280,6 +280,7 @@ public Bootstrap startContainer(Environment environment, Deployment deployment)
             deploymentServices.add(ClassTransformer.class, implementationServices.get(ClassTransformer.class));
             deploymentServices.add(MetaAnnotationStore.class, implementationServices.get(MetaAnnotationStore.class));
             deploymentServices.add(TypeStore.class, implementationServices.get(TypeStore.class));
+            deploymentServices.add(ContextualStore.class, implementationServices.get(ContextualStore.class));
 
             this.environment = environment;
             this.deploymentManager = BeanManagerImpl.newRootManager(""deployment"", deploymentServices, EMPTY_ENABLED);",2012-04-14T20:14:54Z,25
"@@ -106,9 +106,6 @@ public void release(Contextual<T> contextual, T instance) {
             if (contextual == null || (dependentInstance.getContextual().equals(contextual) == false))
                 destroy(dependentInstance);
         }
-        if (incompleteInstances != null) {
-            incompleteInstances.clear();
-        }
     }
 
     private static <T> void destroy(ContextualInstance<T> beanInstance) {",2012-04-14T20:14:54Z,26
"@@ -16,14 +16,15 @@
  */
 package org.jboss.weld.context;
 
+import java.io.Serializable;
+
+import javax.enterprise.context.spi.Contextual;
+
 import edu.umd.cs.findbugs.annotations.SuppressWarnings;
 import org.jboss.weld.Container;
 import org.jboss.weld.serialization.spi.ContextualStore;
 import org.jboss.weld.serialization.spi.helpers.SerializableContextual;
 
-import javax.enterprise.context.spi.Contextual;
-import java.io.Serializable;
-
 /**
  * A serializable version of contextual that knows how to restore the
  * original bean if necessary
@@ -61,7 +62,7 @@ public SerializableContextualImpl(C contextual, ContextualStore contextualStore)
             this.serialiazable = contextual;
         } else {
             // otherwise, generate an id (may not be portable between container instances)
-            this.id = getContextualStore().putIfAbsent(contextual);
+            this.id = contextualStore.putIfAbsent(contextual);
         }
         // cache the contextual
         this.cached = contextual;",2012-04-14T20:14:54Z,27
"@@ -527,7 +527,7 @@ public Set<Bean<?>> getBeans(InjectionPoint injectionPoint) {
         boolean registerInjectionPoint = isRegisterableInjectionPoint(injectionPoint);
         CurrentInjectionPoint currentInjectionPoint = null;
         if (registerInjectionPoint) {
-            currentInjectionPoint = Container.instance().services().get(CurrentInjectionPoint.class);
+            currentInjectionPoint = services.get(CurrentInjectionPoint.class);
         }
         try {
             if (registerInjectionPoint) {
@@ -753,7 +753,7 @@ public Object getReference(InjectionPoint injectionPoint, Bean<?> resolvedBean,
         boolean delegateInjectionPoint = injectionPoint != null && injectionPoint.isDelegate();
         CurrentInjectionPoint currentInjectionPoint = null;
         if (registerInjectionPoint) {
-            currentInjectionPoint = Container.instance().services().get(CurrentInjectionPoint.class);
+            currentInjectionPoint = services.get(CurrentInjectionPoint.class);
         }
         try {
             if (registerInjectionPoint) {",2012-04-14T20:14:54Z,4
"@@ -0,0 +1,24 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2012, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.weld.tests.enterprise.validation;
+
+import javax.inject.Named;
+
+@Named(""Bean"")
+public class Alpha {
+
+}",2014-01-10T11:19:28Z,28
"@@ -0,0 +1,24 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2012, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.weld.tests.enterprise.validation;
+
+import javax.inject.Named;
+
+@Named(""Bean"")
+public class Bravo {
+
+}",2014-01-10T11:19:28Z,29
"@@ -0,0 +1,56 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2012, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.weld.tests.enterprise.validation;
+
+import org.jboss.arquillian.container.test.api.Deployment;
+import org.jboss.arquillian.junit.Arquillian;
+import org.jboss.shrinkwrap.api.Archive;
+import org.jboss.shrinkwrap.api.ShrinkWrap;
+import org.jboss.shrinkwrap.api.asset.EmptyAsset;
+import org.jboss.shrinkwrap.api.spec.EnterpriseArchive;
+import org.jboss.shrinkwrap.api.spec.WebArchive;
+import org.jboss.weld.tests.category.Integration;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+import org.junit.runner.RunWith;
+
+/**
+ * Verifies that ambiguous name validation does not cross visibility boundaries.
+ *
+ * @see WELD-1065
+ *
+ * @author Jozef Hartinger
+ *
+ */
+@Category(Integration.class)
+@RunWith(Arquillian.class)
+public class MultiwarProjectNameValidationTest {
+
+    @Deployment(testable = false)
+    public static Archive<?> getDeployment() {
+        WebArchive war1 = ShrinkWrap.create(WebArchive.class).addClass(Alpha.class)
+                .addAsWebInfResource(EmptyAsset.INSTANCE, ""beans.xml"");
+        WebArchive war2 = ShrinkWrap.create(WebArchive.class).addClass(Bravo.class)
+                .addAsWebInfResource(EmptyAsset.INSTANCE, ""beans.xml"");
+        return ShrinkWrap.create(EnterpriseArchive.class).addAsModules(war1, war2);
+    }
+
+    @Test
+    public void test() {
+        // no deployment exception should occur, since the ambiguous name is distributed over isolated sub-deployments
+    }
+}",2014-01-10T11:19:28Z,30
"@@ -0,0 +1,57 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2012, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.weld.tests.enterprise.validation;
+
+import javax.enterprise.inject.spi.DeploymentException;
+
+import org.jboss.arquillian.container.test.api.Deployment;
+import org.jboss.arquillian.container.test.api.ShouldThrowException;
+import org.jboss.arquillian.junit.Arquillian;
+import org.jboss.shrinkwrap.api.Archive;
+import org.jboss.shrinkwrap.api.ShrinkWrap;
+import org.jboss.shrinkwrap.api.asset.EmptyAsset;
+import org.jboss.shrinkwrap.api.spec.EnterpriseArchive;
+import org.jboss.shrinkwrap.api.spec.WebArchive;
+import org.jboss.weld.tests.category.Integration;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+import org.junit.runner.RunWith;
+
+/**
+ * Similar to {@link MultiwarProjectNameValidationTest}, but verifies that an ambiguous name is detected if the beans can access
+ * each other.
+ * 
+ * @author Jozef Hartinger
+ * 
+ */
+@Category(Integration.class)
+@RunWith(Arquillian.class)
+public class MultiwarProjectNameValidationTest2 {
+
+    @Deployment(testable = false)
+    @ShouldThrowException(DeploymentException.class)
+    public static Archive<?> getDeployment() {
+        WebArchive war1 = ShrinkWrap.create(WebArchive.class).addClasses(Alpha.class, Bravo.class)
+                .addAsWebInfResource(EmptyAsset.INSTANCE, ""beans.xml"");
+        WebArchive war2 = ShrinkWrap.create(WebArchive.class).addAsWebInfResource(EmptyAsset.INSTANCE, ""beans.xml"");
+        return ShrinkWrap.create(EnterpriseArchive.class).addAsModules(war1, war2);
+    }
+
+    @Test
+    public void test() {
+    }
+}",2014-01-10T11:19:28Z,31
"@@ -59,7 +59,10 @@
 import org.jboss.interceptor.registry.InterceptorRegistry;
 import org.jboss.weld.bean.DecoratorImpl;
 import org.jboss.weld.bean.InterceptorImpl;
+import org.jboss.weld.bean.NewBean;
 import org.jboss.weld.bean.SessionBean;
+import org.jboss.weld.bean.builtin.AbstractBuiltInBean;
+import org.jboss.weld.bean.builtin.ExtensionBean;
 import org.jboss.weld.bean.proxy.ClientProxyProvider;
 import org.jboss.weld.bootstrap.api.ServiceRegistry;
 import org.jboss.weld.bootstrap.events.AbstractProcessInjectionTarget;
@@ -231,6 +234,7 @@ public String toString()
     * observers deployed in this bean deployment archive activity
     */
    private transient final List<Bean<?>> beans;
+   private transient final List<Bean<?>> transitiveBeans;
    private transient final List<DecoratorImpl<?>> decorators;
    private transient final List<InterceptorImpl<?>> interceptors;
    private transient final List<String> namespaces;
@@ -284,6 +288,7 @@ public List<Context> get()
       return new BeanManagerImpl(
             serviceRegistry, 
             new CopyOnWriteArrayList<Bean<?>>(),
+            new CopyOnWriteArrayList<Bean<?>>(),
             new CopyOnWriteArrayList<DecoratorImpl<?>>(),
             new CopyOnWriteArrayList<InterceptorImpl<?>>(),
             new CopyOnWriteArrayList<ObserverMethod<?>>(),
@@ -312,6 +317,7 @@ public static BeanManagerImpl newManager(BeanManagerImpl rootManager, String id,
       return new BeanManagerImpl(
             services, 
             new CopyOnWriteArrayList<Bean<?>>(),
+            new CopyOnWriteArrayList<Bean<?>>(),
             new CopyOnWriteArrayList<DecoratorImpl<?>>(),
             new CopyOnWriteArrayList<InterceptorImpl<?>>(),
             new CopyOnWriteArrayList<ObserverMethod<?>>(),
@@ -339,6 +345,8 @@ public static BeanManagerImpl newChildActivityManager(BeanManagerImpl parentMana
    {
       List<Bean<?>> beans = new CopyOnWriteArrayList<Bean<?>>();
       beans.addAll(parentManager.getBeans());
+      List<Bean<?>> transitiveBeans = new CopyOnWriteArrayList<Bean<?>>();
+      beans.addAll(parentManager.getTransitiveBeans());
       
       List<ObserverMethod<?>> registeredObservers = new CopyOnWriteArrayList<ObserverMethod<?>>();
       registeredObservers.addAll(parentManager.getObservers());
@@ -348,6 +356,7 @@ public static BeanManagerImpl newChildActivityManager(BeanManagerImpl parentMana
       return new BeanManagerImpl(
             parentManager.getServices(), 
             beans, 
+            transitiveBeans,
             parentManager.getDecorators(),
             parentManager.getInterceptors(),
             registeredObservers, 
@@ -374,6 +383,7 @@ public static BeanManagerImpl newChildActivityManager(BeanManagerImpl parentMana
    private BeanManagerImpl(
          ServiceRegistry serviceRegistry, 
          List<Bean<?>> beans, 
+         List<Bean<?>> transitiveBeans,
          List<DecoratorImpl<?>> decorators,
          List<InterceptorImpl<?>> interceptors,
          List<ObserverMethod<?>> observers, 
@@ -392,6 +402,7 @@ private BeanManagerImpl(
    {
       this.services = serviceRegistry;
       this.beans = beans;
+      this.transitiveBeans = transitiveBeans;
       this.decorators = decorators;
       this.interceptors = interceptors;
       this.enterpriseBeans = enterpriseBeans;
@@ -414,11 +425,12 @@ private BeanManagerImpl(
       
 
       // TODO Currently we build the accessible bean list on the fly, we need to set it in stone once bootstrap is finished...
-      this.beanResolver = new TypeSafeBeanResolver<Bean<?>>(this, createDynamicAccessibleIterable(Transform.BEAN));
+      Transform<Bean<?>> beanTransform = new Transform.BeanTransform(this);
+      this.beanResolver = new TypeSafeBeanResolver<Bean<?>>(this, createDynamicAccessibleIterable(beanTransform));
       this.decoratorResolver = new TypeSafeDecoratorResolver(this, createDynamicAccessibleIterable(Transform.DECORATOR_BEAN));
       this.interceptorResolver = new TypeSafeInterceptorResolver(this, createDynamicAccessibleIterable(Transform.INTERCEPTOR_BEAN));
       this.observerResolver = new TypeSafeObserverResolver(this, createDynamicAccessibleIterable(Transform.EVENT_OBSERVER));
-      this.nameBasedResolver = new NameBasedResolver(this, createDynamicAccessibleIterable(Transform.BEAN));
+      this.nameBasedResolver = new NameBasedResolver(this, createDynamicAccessibleIterable(beanTransform));
       this.weldELResolver = new WeldELResolver(this);
       this.childActivities = new CopyOnWriteArraySet<BeanManagerImpl>();
       
@@ -481,12 +493,27 @@ private <T> Iterable<T> createStaticAccessibleIterable(final Transform<T> transf
    private static interface Transform<T>
    {
       
-      public static Transform<Bean<?>> BEAN = new Transform<Bean<?>>()
+      public static class BeanTransform implements Transform<Bean<?>>
       {
+         
+         private final BeanManagerImpl declaringBeanManager;
+
+         public BeanTransform(BeanManagerImpl declaringBeanManager)
+         {
+            this.declaringBeanManager = declaringBeanManager;
+         }
 
          public Iterable<Bean<?>> transform(BeanManagerImpl beanManager)
          {
-            return beanManager.getBeans();
+            // New beans and built in beans aren't resolvable transitively
+            if (beanManager.equals(declaringBeanManager))
+            {
+               return beanManager.getBeans();
+            }
+            else
+            {
+               return beanManager.getTransitiveBeans();
+            }
          }
          
       };
@@ -561,6 +588,11 @@ public void addBean(Bean<?> bean)
       {
          childActivity.addBean(bean);
       }
+      // New beans and most built in beans aren't resolvable transtively
+      if (bean instanceof ExtensionBean || (!(bean instanceof NewBean) && !(bean instanceof AbstractBuiltInBean<?>)))
+      {
+         this.transitiveBeans.add(bean);
+      }
       this.beans.add(bean);
       beanResolver.clear();
    }
@@ -773,6 +805,11 @@ public List<Bean<?>> getBeans()
       return Collections.unmodifiableList(beans);
    }
    
+   private List<Bean<?>> getTransitiveBeans()
+   {
+      return Collections.unmodifiableList(transitiveBeans);
+   }
+   
    public List<DecoratorImpl<?>> getDecorators()
    {
       return Collections.unmodifiableList(decorators);
@@ -785,7 +822,7 @@ public List<InterceptorImpl<?>> getInterceptors()
    
    public Iterable<Bean<?>> getAccessibleBeans()
    {
-      return createDynamicAccessibleIterable(Transform.BEAN);
+      return createDynamicAccessibleIterable(new Transform.BeanTransform(this));
    }
 
    public void addContext(Context context)
@@ -1297,7 +1334,7 @@ public void validate(InjectionPoint ij)
       }
    }
 
-   public Set<Annotation> getInterceptorBindingTypeDefinition(Class<? extends Annotation> bindingType)
+   public Set<Annotation> getInterceptorBindingDefinition(Class<? extends Annotation> bindingType)
    {
       if (getServices().get(MetaAnnotationStore.class).getInterceptorBindingModel(bindingType).isValid())
       {",2009-11-03T00:19:36Z,32
"@@ -72,11 +72,9 @@ public BeanDeployer addClass(Class<?> clazz)
       return this;
    }
    
-   // TODO Do we need to fire PAT for annotated types added via BBD? Probably not PLM.
    public BeanDeployer addClass(AnnotatedType<?> clazz)
    {
       ClassTransformer classTransformer = Container.instance().deploymentServices().get(ClassTransformer.class);
-      // TODO Discover any @New injection points, and store as newClasses
       classes.add(classTransformer.loadClass(clazz));
       return this;
    }",2009-11-03T00:19:36Z,33
"@@ -32,19 +32,13 @@
 import org.jboss.weld.bean.builtin.facade.EventBean;
 import org.jboss.weld.bean.builtin.facade.InstanceBean;
 import org.jboss.weld.bootstrap.api.Environment;
-import org.jboss.weld.bootstrap.api.Environments;
 import org.jboss.weld.bootstrap.api.ServiceRegistry;
 import org.jboss.weld.bootstrap.api.helpers.SimpleServiceRegistry;
 import org.jboss.weld.bootstrap.spi.BeanDeploymentArchive;
-import org.jboss.weld.conversation.ConversationImpl;
-import org.jboss.weld.conversation.JavaSEConversationTerminator;
-import org.jboss.weld.conversation.NumericConversationIdGenerator;
-import org.jboss.weld.conversation.ServletConversationManager;
 import org.jboss.weld.ejb.EjbDescriptors;
 import org.jboss.weld.ejb.spi.EjbServices;
 import org.jboss.weld.resources.spi.ResourceLoader;
 import org.jboss.weld.security.spi.SecurityServices;
-import org.jboss.weld.servlet.HttpSessionManager;
 import org.jboss.weld.transaction.spi.TransactionServices;
 import org.jboss.weld.validation.spi.ValidationServices;
 import org.jboss.weld.xml.BeansXmlParser;
@@ -135,14 +129,6 @@ public void deployBeans(Environment environment)
       beanDeployer.getEnvironment().addBuiltInBean(new InjectionPointBean(beanManager));
       beanDeployer.getEnvironment().addBuiltInBean(new EventBean(beanManager));
       beanDeployer.getEnvironment().addBuiltInBean(new InstanceBean(beanManager));
-      if (!environment.equals(Environments.SE))
-      {
-         beanDeployer.addClass(ConversationImpl.class);
-         beanDeployer.addClass(ServletConversationManager.class);
-         beanDeployer.addClass(JavaSEConversationTerminator.class);
-         beanDeployer.addClass(NumericConversationIdGenerator.class);
-         beanDeployer.addClass(HttpSessionManager.class);
-      }
       if (beanManager.getServices().contains(TransactionServices.class))
       {
          beanDeployer.getEnvironment().addBuiltInBean(new UserTransactionBean(beanManager));",2009-11-03T00:19:36Z,34
"@@ -22,6 +22,9 @@
 import static org.jboss.weld.util.log.Category.BOOTSTRAP;
 import static org.jboss.weld.util.log.LoggerFactory.loggerFactory;
 
+import java.net.URL;
+import java.util.Collection;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
@@ -57,19 +60,27 @@
 import org.jboss.weld.context.SessionContext;
 import org.jboss.weld.context.SingletonContext;
 import org.jboss.weld.context.api.BeanStore;
+import org.jboss.weld.conversation.ConversationImpl;
+import org.jboss.weld.conversation.NumericConversationIdGenerator;
+import org.jboss.weld.conversation.ServletConversationManager;
 import org.jboss.weld.ejb.EJBApiAbstraction;
 import org.jboss.weld.ejb.EjbDescriptors;
+import org.jboss.weld.ejb.spi.EjbDescriptor;
 import org.jboss.weld.jsf.JsfApiAbstraction;
 import org.jboss.weld.metadata.TypeStore;
 import org.jboss.weld.metadata.cache.MetaAnnotationStore;
 import org.jboss.weld.persistence.PersistenceApiAbstraction;
 import org.jboss.weld.resources.ClassTransformer;
 import org.jboss.weld.resources.DefaultResourceLoader;
+import org.jboss.weld.resources.SingleThreadScheduledExecutorServiceFactory;
 import org.jboss.weld.resources.spi.ResourceLoader;
+import org.jboss.weld.resources.spi.ScheduledExecutorServiceFactory;
 import org.jboss.weld.serialization.spi.ContextualStore;
+import org.jboss.weld.servlet.HttpSessionManager;
 import org.jboss.weld.servlet.ServletApiAbstraction;
 import org.jboss.weld.transaction.spi.TransactionServices;
 import org.jboss.weld.util.Names;
+import org.jboss.weld.util.collections.Arrays2;
 import org.jboss.weld.util.serviceProvider.DefaultServiceLoaderFactory;
 import org.jboss.weld.util.serviceProvider.ServiceLoaderFactory;
 import org.jboss.weld.ws.WSApiAbstraction;
@@ -101,28 +112,71 @@ private static class DeploymentVisitor
       private final Environment environment;
       private final Deployment deployment;
       private final Map<BeanDeploymentArchive, BeanDeployment> managerAwareBeanDeploymentArchives;
+      private final BeanDeploymentArchive implementationBeanDeploymentArchive;
       
       public DeploymentVisitor(BeanManagerImpl deploymentManager, Environment environment, Deployment deployment)
       {
          this.deploymentManager = deploymentManager;
          this.environment = environment;
          this.deployment = deployment;
          this.managerAwareBeanDeploymentArchives = new HashMap<BeanDeploymentArchive, BeanDeployment>();
+         this.implementationBeanDeploymentArchive = new BeanDeploymentArchive()
+         {
+            
+            private  final ServiceRegistry serviceRegistry = new SimpleServiceRegistry();
+            private final Set<Class<?>> beanClasses = Arrays2.<Class<?>>asSet(ConversationImpl.class, ServletConversationManager.class, NumericConversationIdGenerator.class, HttpSessionManager.class);
+            
+            public ServiceRegistry getServices()
+            {
+               return serviceRegistry;
+            }
+            
+            public String getId()
+            {
+               return ""weld"";
+            }
+            
+            public Collection<EjbDescriptor<?>> getEjbs()
+            {
+               return Collections.emptySet();
+            }
+            
+            public Collection<URL> getBeansXml()
+            {
+               return Collections.emptySet();
+            }
+            
+            public Collection<BeanDeploymentArchive> getBeanDeploymentArchives()
+            {
+               return Collections.emptySet();
+            }
+            
+            public Collection<Class<?>> getBeanClasses()
+            {
+               return beanClasses;
+            }
+         };
       }
       
       public Map<BeanDeploymentArchive, BeanDeployment> visit()
       {
+         // Add the impl beans
+         visit(implementationBeanDeploymentArchive, managerAwareBeanDeploymentArchives, new HashSet<BeanDeploymentArchive>(), false);
+         
          for (BeanDeploymentArchive archvive : deployment.getBeanDeploymentArchives())
          {
-            visit(archvive, managerAwareBeanDeploymentArchives, new HashSet<BeanDeploymentArchive>());
+            visit(archvive, managerAwareBeanDeploymentArchives, new HashSet<BeanDeploymentArchive>(), true);
          }
          return managerAwareBeanDeploymentArchives;
       }
       
-      private BeanDeployment visit(BeanDeploymentArchive beanDeploymentArchive, Map<BeanDeploymentArchive, BeanDeployment> managerAwareBeanDeploymentArchives, Set<BeanDeploymentArchive> seenBeanDeploymentArchives)
+      private BeanDeployment visit(BeanDeploymentArchive beanDeploymentArchive, Map<BeanDeploymentArchive, BeanDeployment> managerAwareBeanDeploymentArchives, Set<BeanDeploymentArchive> seenBeanDeploymentArchives, boolean validate)
       {
          // Check that the required services are specified
-         verifyServices(beanDeploymentArchive.getServices(), environment.getRequiredBeanDeploymentArchiveServices());
+         if (validate)
+         {
+            verifyServices(beanDeploymentArchive.getServices(), environment.getRequiredBeanDeploymentArchiveServices());
+         }
          
          // Check the id is not null
          if (beanDeploymentArchive.getId() == null)
@@ -143,10 +197,12 @@ private BeanDeployment visit(BeanDeploymentArchive beanDeploymentArchive, Map<Be
             // Cut any circularties
             if (!seenBeanDeploymentArchives.contains(archive))
             {
-               BeanDeployment child = visit(archive, managerAwareBeanDeploymentArchives, seenBeanDeploymentArchives);
+               BeanDeployment child = visit(archive, managerAwareBeanDeploymentArchives, seenBeanDeploymentArchives, validate);
                parent.getBeanManager().addAccessibleBeanManager(child.getBeanManager());
             }
          }
+         // Make the implementation beans accessible
+         parent.getBeanManager().addAccessibleBeanManager(managerAwareBeanDeploymentArchives.get(implementationBeanDeploymentArchive).getBeanManager());
          return parent;
       }
       
@@ -177,6 +233,10 @@ public Bootstrap startContainer(Environment environment, Deployment deployment,
          {
             deployment.getServices().add(ResourceLoader.class, new DefaultResourceLoader());
          }
+         if (!deployment.getServices().contains(ScheduledExecutorServiceFactory.class))
+         {
+            deployment.getServices().add(ScheduledExecutorServiceFactory.class, new SingleThreadScheduledExecutorServiceFactory());
+         }
          
          verifyServices(deployment.getServices(), environment.getRequiredDeploymentServices());
          ",2009-11-03T00:19:36Z,25
"@@ -132,4 +132,16 @@ protected boolean isAssignableFrom(ActualTypeHolder requiredType, Type otherType
         }
         return false;
     }
+
+    /**
+     * The spec says:
+     * ""Array types are considered to match only if their element types are identical.""
+     * This does not apply to event - observer resolution.
+     */
+    @Override
+    protected boolean arraysMatch(ActualTypeHolder a1, ActualTypeHolder a2) {
+        return a1.getComponentType().equals(a2.getComponentType());
+    }
+
+
 }",2014-04-02T06:50:39Z,35
"@@ -26,7 +26,9 @@
 import java.util.Set;
 
 import org.jboss.weld.util.Types;
+import org.jboss.weld.util.reflection.ParameterizedTypeImpl;
 import org.jboss.weld.util.reflection.Reflections;
+
 import edu.umd.cs.findbugs.annotations.SuppressWarnings;
 /**
  * Assignability rules for observer method resolution. Serves as a superclass for stricter {@link BeanTypeAssignabilityRules}.
@@ -208,7 +210,12 @@ public boolean areTypesInsideBounds(Type[] types, Type[] lowerBounds, Type[] upp
     protected boolean matches(ActualTypeHolder requiredType, Type otherType) {
         otherType = wrapWithinTypeHolder(otherType);
         if (otherType instanceof ActualTypeHolder) {
-            return matches(requiredType, (ActualTypeHolder) otherType);
+            ActualTypeHolder otherActualType = (ActualTypeHolder) otherType;
+            if (requiredType.getRawType().isArray() && otherActualType.getRawType().isArray()) {
+                return arraysMatch(requiredType, otherActualType);
+            } else {
+                return matches(requiredType, (ActualTypeHolder) otherType);
+            }
         }
         if (otherType instanceof TypeVariable<?>) {
             TypeVariable<?> typeVariable = (TypeVariable<?>) otherType;
@@ -231,6 +238,16 @@ protected boolean matches(ActualTypeHolder requiredType, ActualTypeHolder otherT
         return requiredType.getBoxedRawType().equals(otherTypeHolder.getBoxedRawType()) && areActualTypeArgumentsMatching(requiredType, otherTypeHolder.getActualTypeArguments());
     }
 
+    protected boolean arraysMatch(ActualTypeHolder a1, ActualTypeHolder a2) {
+        if (a1.getRawType().getComponentType().isPrimitive() || a2.getRawType().getComponentType().isPrimitive()) {
+            // there is no autoboxing for arrays in Java
+            // therefore, if any of the arrays is an array of primitives, the only way the for the array types
+            // to be equals is this:
+            return a1.getRawType().equals(a2.getRawType());
+        }
+        return isAssignableFrom(a1.getComponentType(), a2.getComponentType());
+    }
+
     protected boolean areActualTypeArgumentsMatching(ActualTypeHolder requiredType, Type[] otherActualTypeArguments) {
         for (int i = 0; i < requiredType.getActualTypeArguments().length; i++) {
             Type type1 = requiredType.getActualTypeArguments()[i];
@@ -293,6 +310,20 @@ private Class<?> getBoxedRawType() {
             return Types.boxedClass(getRawType());
         }
 
+        /**
+         * Reconstructs array's component type if this holder represents an array. Throws {@link IllegalArgumentException} otherwise.
+         */
+        protected Type getComponentType() {
+            if (!rawType.isArray()) {
+                throw new IllegalArgumentException(rawType + "" is not an array type"");
+            }
+            if (actualTypeArguments.length == 0) {
+                return rawType.getComponentType();
+            } else {
+                return new ParameterizedTypeImpl(rawType.getComponentType(), actualTypeArguments, null);
+            }
+        }
+
         @Override
         public String toString() {
             return ""ActualTypeHolder [rawType="" + rawType + "", actualTypeArguments="" + Arrays.toString(actualTypeArguments) + ""]"";",2014-04-02T06:50:39Z,36
"@@ -108,7 +108,7 @@ public void testWildcardFooArrayMatchesStringFooArray() throws Exception {
         }.getType();
         Type wildcardFooArrayType = new TypeLiteral<Foo<?>[]>() {
         }.getType();
-        Assert.assertTrue(""Foo<?>[] should be assignable from Foo<String>[]"", getRules().matches(wildcardFooArrayType, stringFooArrayType));
+        Assert.assertFalse(""Foo<?>[] should not be assignable from Foo<String>[]"", getRules().matches(wildcardFooArrayType, stringFooArrayType));
     }
 
     @Test",2014-04-02T06:50:39Z,37
"@@ -28,6 +28,7 @@
 
 import org.jboss.weld.resolution.AssignabilityRules;
 import org.jboss.weld.resolution.EventTypeAssignabilityRules;
+import org.jboss.weld.util.reflection.GenericArrayTypeImpl;
 import org.junit.Test;
 
 
@@ -78,6 +79,7 @@ public void testWildcardFooMatchesBoundedWildcardFoo() throws Exception {
         Assert.assertTrue(""Foo<?> should be assignable from Foo<? extends Number>"", getRules().matches(wildcardFooType, boundedWildcardFooType));
     }
 
+    @Override
     @Test
     public <F extends Number> void testParameterizedBeanWithBoundedVariableTypeParameter() throws Exception {
         Assert.assertTrue(""Foo<F extends Number> should be assignable to Foo"",
@@ -145,4 +147,36 @@ public void testParameterizedTypes() {
         assertTrue(""Foo<Number> should be assignable to Foo<Number>"", getRules().matches(observerType, eventType1));
         assertFalse(""Foo<Integer> should not be assignable to Foo<Number>"", getRules().matches(observerType, eventType2));
     }
+
+    @Test
+    public void testArrayCovariance1() {
+        Type type1 = new Number[0].getClass();
+        Type type2 = new Integer[0].getClass();
+        assertTrue(getRules().matches(type1, type2));
+    }
+
+    @Test
+    public void testArrayCovariance2() {
+        Type type1 = new GenericArrayTypeImpl(new TypeLiteral<List<?>>() {
+        }.getType());
+        Type type2 = new List[0].getClass();
+        assertTrue(getRules().matches(type1, type2));
+    }
+
+    @Test
+    public void testBoxingNotAppliedOnArrays() {
+        Type type1 = new int[0].getClass();
+        Type type2 = new Integer[0].getClass();
+        assertFalse(getRules().matches(type1, type2));
+    }
+
+    @Test
+    @Override
+    public void testWildcardFooArrayMatchesStringFooArray() throws Exception {
+        Type stringFooArrayType = new TypeLiteral<Foo<String>[]>() {
+        }.getType();
+        Type wildcardFooArrayType = new TypeLiteral<Foo<?>[]>() {
+        }.getType();
+        Assert.assertTrue(""Foo<?>[] should not be assignable from Foo<String>[]"", getRules().matches(wildcardFooArrayType, stringFooArrayType));
+    }
 }",2014-04-02T06:50:39Z,38
"@@ -32,12 +32,6 @@
             </class>
 
             <!-- Issues in Weld (the RI) -->
-            <!-- WELD-1639 -->
-            <class name=""org.jboss.cdi.tck.tests.event.observer.wildcardAndTypeVariable.ObserverMethodWithParametertizedTypeTest"">
-                <methods>
-                    <exclude name=""testObserverMethodCanObserveArrayWildcard""/>
-                </methods>
-            </class>
 
             <!-- Issues in WildFly -->
             <!-- WFLY-2654 -->",2014-04-02T06:50:39Z,39
"@@ -132,4 +132,16 @@ protected boolean isAssignableFrom(ActualTypeHolder requiredType, Type otherType
         }
         return false;
     }
+
+    /**
+     * The spec says:
+     * ""Array types are considered to match only if their element types are identical.""
+     * This does not apply to event - observer resolution.
+     */
+    @Override
+    protected boolean arraysMatch(ActualTypeHolder a1, ActualTypeHolder a2) {
+        return a1.getComponentType().equals(a2.getComponentType());
+    }
+
+
 }",2014-04-02T06:50:39Z,35
"@@ -26,7 +26,9 @@
 import java.util.Set;
 
 import org.jboss.weld.util.Types;
+import org.jboss.weld.util.reflection.ParameterizedTypeImpl;
 import org.jboss.weld.util.reflection.Reflections;
+
 import edu.umd.cs.findbugs.annotations.SuppressWarnings;
 /**
  * Assignability rules for observer method resolution. Serves as a superclass for stricter {@link BeanTypeAssignabilityRules}.
@@ -208,7 +210,12 @@ public boolean areTypesInsideBounds(Type[] types, Type[] lowerBounds, Type[] upp
     protected boolean matches(ActualTypeHolder requiredType, Type otherType) {
         otherType = wrapWithinTypeHolder(otherType);
         if (otherType instanceof ActualTypeHolder) {
-            return matches(requiredType, (ActualTypeHolder) otherType);
+            ActualTypeHolder otherActualType = (ActualTypeHolder) otherType;
+            if (requiredType.getRawType().isArray() && otherActualType.getRawType().isArray()) {
+                return arraysMatch(requiredType, otherActualType);
+            } else {
+                return matches(requiredType, (ActualTypeHolder) otherType);
+            }
         }
         if (otherType instanceof TypeVariable<?>) {
             TypeVariable<?> typeVariable = (TypeVariable<?>) otherType;
@@ -231,6 +238,16 @@ protected boolean matches(ActualTypeHolder requiredType, ActualTypeHolder otherT
         return requiredType.getBoxedRawType().equals(otherTypeHolder.getBoxedRawType()) && areActualTypeArgumentsMatching(requiredType, otherTypeHolder.getActualTypeArguments());
     }
 
+    protected boolean arraysMatch(ActualTypeHolder a1, ActualTypeHolder a2) {
+        if (a1.getRawType().getComponentType().isPrimitive() || a2.getRawType().getComponentType().isPrimitive()) {
+            // there is no autoboxing for arrays in Java
+            // therefore, if any of the arrays is an array of primitives, the only way the for the array types
+            // to be equals is this:
+            return a1.getRawType().equals(a2.getRawType());
+        }
+        return isAssignableFrom(a1.getComponentType(), a2.getComponentType());
+    }
+
     protected boolean areActualTypeArgumentsMatching(ActualTypeHolder requiredType, Type[] otherActualTypeArguments) {
         for (int i = 0; i < requiredType.getActualTypeArguments().length; i++) {
             Type type1 = requiredType.getActualTypeArguments()[i];
@@ -293,6 +310,20 @@ private Class<?> getBoxedRawType() {
             return Types.boxedClass(getRawType());
         }
 
+        /**
+         * Reconstructs array's component type if this holder represents an array. Throws {@link IllegalArgumentException} otherwise.
+         */
+        protected Type getComponentType() {
+            if (!rawType.isArray()) {
+                throw new IllegalArgumentException(rawType + "" is not an array type"");
+            }
+            if (actualTypeArguments.length == 0) {
+                return rawType.getComponentType();
+            } else {
+                return new ParameterizedTypeImpl(rawType.getComponentType(), actualTypeArguments, null);
+            }
+        }
+
         @Override
         public String toString() {
             return ""ActualTypeHolder [rawType="" + rawType + "", actualTypeArguments="" + Arrays.toString(actualTypeArguments) + ""]"";",2014-04-02T06:50:39Z,36
"@@ -108,7 +108,7 @@ public void testWildcardFooArrayMatchesStringFooArray() throws Exception {
         }.getType();
         Type wildcardFooArrayType = new TypeLiteral<Foo<?>[]>() {
         }.getType();
-        Assert.assertTrue(""Foo<?>[] should be assignable from Foo<String>[]"", getRules().matches(wildcardFooArrayType, stringFooArrayType));
+        Assert.assertFalse(""Foo<?>[] should not be assignable from Foo<String>[]"", getRules().matches(wildcardFooArrayType, stringFooArrayType));
     }
 
     @Test",2014-04-02T06:50:39Z,37
"@@ -28,6 +28,7 @@
 
 import org.jboss.weld.resolution.AssignabilityRules;
 import org.jboss.weld.resolution.EventTypeAssignabilityRules;
+import org.jboss.weld.util.reflection.GenericArrayTypeImpl;
 import org.junit.Test;
 
 
@@ -78,6 +79,7 @@ public void testWildcardFooMatchesBoundedWildcardFoo() throws Exception {
         Assert.assertTrue(""Foo<?> should be assignable from Foo<? extends Number>"", getRules().matches(wildcardFooType, boundedWildcardFooType));
     }
 
+    @Override
     @Test
     public <F extends Number> void testParameterizedBeanWithBoundedVariableTypeParameter() throws Exception {
         Assert.assertTrue(""Foo<F extends Number> should be assignable to Foo"",
@@ -145,4 +147,36 @@ public void testParameterizedTypes() {
         assertTrue(""Foo<Number> should be assignable to Foo<Number>"", getRules().matches(observerType, eventType1));
         assertFalse(""Foo<Integer> should not be assignable to Foo<Number>"", getRules().matches(observerType, eventType2));
     }
+
+    @Test
+    public void testArrayCovariance1() {
+        Type type1 = new Number[0].getClass();
+        Type type2 = new Integer[0].getClass();
+        assertTrue(getRules().matches(type1, type2));
+    }
+
+    @Test
+    public void testArrayCovariance2() {
+        Type type1 = new GenericArrayTypeImpl(new TypeLiteral<List<?>>() {
+        }.getType());
+        Type type2 = new List[0].getClass();
+        assertTrue(getRules().matches(type1, type2));
+    }
+
+    @Test
+    public void testBoxingNotAppliedOnArrays() {
+        Type type1 = new int[0].getClass();
+        Type type2 = new Integer[0].getClass();
+        assertFalse(getRules().matches(type1, type2));
+    }
+
+    @Test
+    @Override
+    public void testWildcardFooArrayMatchesStringFooArray() throws Exception {
+        Type stringFooArrayType = new TypeLiteral<Foo<String>[]>() {
+        }.getType();
+        Type wildcardFooArrayType = new TypeLiteral<Foo<?>[]>() {
+        }.getType();
+        Assert.assertTrue(""Foo<?>[] should not be assignable from Foo<String>[]"", getRules().matches(wildcardFooArrayType, stringFooArrayType));
+    }
 }",2014-04-02T06:50:39Z,38
"@@ -32,12 +32,6 @@
             </class>
 
             <!-- Issues in Weld (the RI) -->
-            <!-- WELD-1639 -->
-            <class name=""org.jboss.cdi.tck.tests.event.observer.wildcardAndTypeVariable.ObserverMethodWithParametertizedTypeTest"">
-                <methods>
-                    <exclude name=""testObserverMethodCanObserveArrayWildcard""/>
-                </methods>
-            </class>
 
             <!-- Issues in WildFly -->
             <!-- WFLY-2654 -->",2014-04-02T06:50:39Z,39
"@@ -0,0 +1,23 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2014, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.weld.tests.specialization.weld1651;
+
+/**
+ * @author Tomas Remes
+ */
+public class Fan<T extends Music> {
+}",2014-07-22T13:35:18Z,40
"@@ -0,0 +1,57 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2014, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.weld.tests.specialization.weld1651;
+
+import junit.framework.Assert;
+
+import org.jboss.arquillian.container.test.api.Deployment;
+import org.jboss.arquillian.junit.Arquillian;
+import org.jboss.shrinkwrap.api.ArchivePaths;
+import org.jboss.shrinkwrap.api.ShrinkWrap;
+import org.jboss.shrinkwrap.api.asset.EmptyAsset;
+import org.jboss.shrinkwrap.api.spec.WebArchive;
+import org.junit.Ignore;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import javax.inject.Inject;
+
+/**
+ * @author Tomas Remes
+ */
+
+@RunWith(Arquillian.class)
+@Ignore(""WELD-1651"")
+public class GenericBeanSpecializationTest {
+
+    @Inject
+    MetalFan<Music> fan;
+
+    @Deployment
+    public static WebArchive createWebArchive() {
+        WebArchive war = ShrinkWrap.create(WebArchive.class, ""generic-specialization-test.war"");
+        war.addPackage(GenericBeanSpecializationTest.class.getPackage());
+        war.addAsWebInfResource(EmptyAsset.INSTANCE, ArchivePaths.create(""beans.xml""));
+        return war;
+    }
+
+    @Test
+    public void testGenericBeanSpecialization(){
+        Assert.assertNotNull(fan);
+    }
+
+}",2014-07-22T13:35:18Z,41
"@@ -0,0 +1,26 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2014, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.weld.tests.specialization.weld1651;
+
+import javax.enterprise.inject.Specializes;
+
+/**
+ * @author Tomas Remes
+ */
+@Specializes
+public class MetalFan<T extends Music> extends Fan<T>{
+}",2014-07-22T13:35:18Z,42
"@@ -0,0 +1,24 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2014, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.jboss.weld.tests.specialization.weld1651;
+
+/**
+ * @author Tomas Remes
+ */
+public class Music {
+}",2014-07-22T13:35:18Z,43
"@@ -0,0 +1,48 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2014, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.weld.tests.specialization.weld1651.broken;
+
+import org.jboss.arquillian.container.test.api.Deployment;
+import org.jboss.arquillian.container.test.api.ShouldThrowException;
+import org.jboss.arquillian.junit.Arquillian;
+import org.jboss.shrinkwrap.api.Archive;
+import org.jboss.shrinkwrap.api.BeanArchive;
+import org.jboss.shrinkwrap.api.ShrinkWrap;
+import org.jboss.weld.tests.specialization.weld1651.Fan;
+import org.jboss.weld.tests.specialization.weld1651.Music;
+import org.junit.Ignore;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+/**
+ * @author Matus Abaffy
+ */
+@RunWith(Arquillian.class)
+@Ignore(""Patch for specializing bean extending raw type of generic superclass is still missing"")
+public class GenericBeanRawSpecializationTest {
+
+    @Deployment
+    @ShouldThrowException(Exception.class)
+    public static Archive<?> createArchive() {
+        return ShrinkWrap.create(BeanArchive.class)
+                .addClasses(Fan.class, RockFan3.class, Music.class);
+    }
+
+    @Test
+    public void testSpecializationOfRawType() {
+    }
+}",2014-07-23T07:49:57Z,44
"@@ -0,0 +1,45 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2014, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.weld.tests.specialization.weld1651.broken;
+
+import org.jboss.arquillian.container.test.api.Deployment;
+import org.jboss.arquillian.container.test.api.ShouldThrowException;
+import org.jboss.arquillian.junit.Arquillian;
+import org.jboss.shrinkwrap.api.Archive;
+import org.jboss.shrinkwrap.api.BeanArchive;
+import org.jboss.shrinkwrap.api.ShrinkWrap;
+import org.jboss.weld.tests.specialization.weld1651.Fan;
+import org.jboss.weld.tests.specialization.weld1651.Music;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+/**
+ * @author Matus Abaffy
+ */
+@RunWith(Arquillian.class)
+public class GenericBeanSpecialization01Test {
+
+    @Deployment
+    @ShouldThrowException(Exception.class)
+    public static Archive<?> createArchive() {
+        return ShrinkWrap.create(BeanArchive.class)
+                .addClasses(Fan.class, RockFan1.class, Music.class);
+    }
+
+    @Test
+    public void testSpecializingBeanWithStricterType() {
+    }
+}",2014-07-23T07:49:57Z,45
"@@ -0,0 +1,46 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2014, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.weld.tests.specialization.weld1651.broken;
+
+import org.jboss.arquillian.container.test.api.Deployment;
+import org.jboss.arquillian.container.test.api.ShouldThrowException;
+import org.jboss.arquillian.junit.Arquillian;
+import org.jboss.shrinkwrap.api.Archive;
+import org.jboss.shrinkwrap.api.BeanArchive;
+import org.jboss.shrinkwrap.api.ShrinkWrap;
+import org.jboss.weld.tests.specialization.weld1651.Fan;
+import org.jboss.weld.tests.specialization.weld1651.Music;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+/**
+ * @author Matus Abaffy
+ */
+@RunWith(Arquillian.class)
+public class GenericBeanSpecialization02Test {
+
+    @Deployment
+    @ShouldThrowException(Exception.class)
+    public static Archive<?> createArchive() {
+        return ShrinkWrap.create(BeanArchive.class)
+                .addClasses(Fan.class, RockFan2.class, Music.class, Rock.class);
+    }
+
+    @Test
+    public void testSpecializingBeanWithStricterBounds() {
+    }
+}",2014-07-23T07:49:57Z,46
"@@ -0,0 +1,23 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2014, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.jboss.weld.tests.specialization.weld1651.broken;
+
+import org.jboss.weld.tests.specialization.weld1651.Music;
+
+public class Rock extends Music {
+}",2014-07-23T07:49:57Z,47
"@@ -0,0 +1,26 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2014, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.weld.tests.specialization.weld1651.broken;
+
+import javax.enterprise.inject.Specializes;
+
+import org.jboss.weld.tests.specialization.weld1651.Fan;
+import org.jboss.weld.tests.specialization.weld1651.Music;
+
+@Specializes
+public class RockFan1 extends Fan<Music> {
+}",2014-07-23T07:49:57Z,48
"@@ -0,0 +1,25 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2014, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.weld.tests.specialization.weld1651.broken;
+
+import javax.enterprise.inject.Specializes;
+
+import org.jboss.weld.tests.specialization.weld1651.Fan;
+
+@Specializes
+public class RockFan2<T extends Rock> extends Fan<T> {
+}",2014-07-23T07:49:57Z,49
"@@ -0,0 +1,27 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2014, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.weld.tests.specialization.weld1651.broken;
+
+import javax.enterprise.inject.Specializes;
+
+import org.jboss.weld.tests.specialization.weld1651.Fan;
+import org.jboss.weld.tests.specialization.weld1651.Music;
+
+@SuppressWarnings(""rawtypes"")
+@Specializes
+public class RockFan3<T extends Music> extends Fan {
+}",2014-07-23T07:49:57Z,50
"@@ -78,17 +78,6 @@ protected <T> void processBean(Bean<T> b) {
         ExternalBeanAttributesFactory.validateBeanAttributes(bean, beanManager);
         ContainerLifecycleEvents containerLifecycleEvents = beanManager.getServices().get(ContainerLifecycleEvents.class);
 
-        // ProcessBeanAttributes for the Bean
-        ProcessBeanAttributesImpl<T> event = containerLifecycleEvents.fireProcessBeanAttributes(beanManager, bean, null, bean.getBeanClass());
-        if (event != null) {
-            if (event.isVeto()) {
-                return;
-            }
-            if (event.isDirty()) {
-                bean = setBeanAttributes(bean, ExternalBeanAttributesFactory.of(event.getBeanAttributes(), getBeanManager()));
-            }
-        }
-
         if (bean instanceof Interceptor<?>) {
             beanManager.addInterceptor((Interceptor<?>) bean);
         } else if (bean instanceof Decorator<?>) {",2013-03-18T19:40:12Z,51
"@@ -1,6 +1,6 @@
 /*
  * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
+ * Copyright 2013, Red Hat, Inc., and individual contributors
  * by the @authors tag. See the copyright.txt in the distribution for a
  * full listing of individual contributors.
  *
@@ -14,8 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic;
 
-public interface Vehicle {
+package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.notfired;
 
+public abstract class Foo {
 }",2013-03-18T19:40:12Z,52
"@@ -0,0 +1,103 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2013, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.notfired;
+
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Type;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
+
+import javax.enterprise.context.Dependent;
+import javax.enterprise.context.spi.CreationalContext;
+import javax.enterprise.event.Observes;
+import javax.enterprise.inject.spi.AfterBeanDiscovery;
+import javax.enterprise.inject.spi.Bean;
+import javax.enterprise.inject.spi.Extension;
+import javax.enterprise.inject.spi.InjectionPoint;
+import javax.enterprise.inject.spi.ProcessBeanAttributes;
+
+public class MyExtension implements Extension {
+
+    public static int processBeanAttributesInvocationCount;
+
+    public void addBean(@Observes AfterBeanDiscovery abd) {
+        abd.addBean(new Bean<Foo>() {
+            @Override
+            public Class<?> getBeanClass() {
+                return Foo.class;
+            }
+
+            @Override
+            public Set<InjectionPoint> getInjectionPoints() {
+                return Collections.emptySet();
+            }
+
+            @Override
+            public boolean isNullable() {
+                return false;
+            }
+
+            @Override
+            public Set<Type> getTypes() {
+                return new HashSet<Type>(Arrays.asList(getBeanClass()));
+            }
+
+            @Override
+            public Set<Annotation> getQualifiers() {
+                return Collections.emptySet();
+            }
+
+            @Override
+            public Class<? extends Annotation> getScope() {
+                return Dependent.class;
+            }
+
+            @Override
+            public String getName() {
+                return null;
+            }
+
+            @Override
+            public Set<Class<? extends Annotation>> getStereotypes() {
+                return Collections.emptySet();
+            }
+
+            @Override
+            public boolean isAlternative() {
+                return false;
+            }
+
+            @Override
+            public Foo create(CreationalContext<Foo> creationalContext) {
+                return null;
+            }
+
+            @Override
+            public void destroy(Foo instance, CreationalContext<Foo> creationalContext) {
+            }
+        });
+    }
+
+    public void processBeanAttributes(@Observes ProcessBeanAttributes<?> event) {
+        if (!ProgrammaticallyAddedProcessBeanAttributesTest.IGNORE_ME.equals(event.getBeanAttributes().getName())) {
+            processBeanAttributesInvocationCount++;
+        }
+    }
+}",2013-03-18T19:40:12Z,53
"@@ -1,6 +1,6 @@
 /*
  * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
+ * Copyright 2013, Red Hat, Inc., and individual contributors
  * by the @authors tag. See the copyright.txt in the distribution for a
  * full listing of individual contributors.
  *
@@ -14,43 +14,41 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.notfired;
 
-import java.util.Set;
-
-import javax.enterprise.inject.spi.Bean;
-import javax.enterprise.inject.spi.BeanManager;
 import javax.enterprise.inject.spi.Extension;
+import javax.inject.Named;
 
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.arquillian.junit.Arquillian;
 import org.jboss.shrinkwrap.api.Archive;
 import org.jboss.shrinkwrap.api.BeanArchive;
 import org.jboss.shrinkwrap.api.ShrinkWrap;
-import org.jboss.weld.literal.AnyLiteral;
-import org.jboss.weld.tests.util.BeanUtilities;
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+/**
+ * @author <a href=""mailto:mluksa@redhat.com"">Marko Luksa</a>
+ */
 @RunWith(Arquillian.class)
-public class ProcessBeanAttributesFiredForSyntheticBeanTest {
+@Named(ProgrammaticallyAddedProcessBeanAttributesTest.IGNORE_ME)
+public class ProgrammaticallyAddedProcessBeanAttributesTest {
+
+    public static final String IGNORE_ME = ""ignoreMe"";
 
     @Deployment
     public static Archive<?> getDeployment() {
-        return ShrinkWrap.create(BeanArchive.class).alternate(Bicycle.class).addPackage(Bicycle.class.getPackage()).addClass(BeanUtilities.class)
-                .addAsServiceProvider(Extension.class, BicycleExtension.class, ModifyingExtension.class);
+        return ShrinkWrap.create(BeanArchive.class)
+                .addClasses(Foo.class, MyExtension.class)
+                .addAsServiceProvider(Extension.class, MyExtension.class);
     }
 
     @Test
-    public void test(BeanManager manager, BicycleExtension bicycleExtension, ModifyingExtension modifyingExtension) {
-        assertTrue(bicycleExtension.isVetoed());
-        assertTrue(modifyingExtension.isModified());
-        Set<Bean<?>> beans = manager.getBeans(Bicycle.class, AnyLiteral.INSTANCE);
-        assertEquals(1, beans.size());
-        Bean<?> bean = beans.iterator().next();
-        Validator.validateAfterModification(bean);
+    public void testProcessBeanAttributesIsNotFiredForProgrammaticallyAddedOrBuiltInBeans() {
+        // if PBA is fired for any built-in beans, this will be > 0
+        // also if PBA is fired for FooBean, which is added programmatically, this will also be > 0
+        Assert.assertEquals(0, MyExtension.processBeanAttributesInvocationCount);
     }
 }",2013-03-18T19:40:12Z,54
"@@ -1,36 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic;
-
-import java.lang.annotation.Documented;
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import javax.enterprise.inject.Stereotype;
-
-import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.ElementType.TYPE;
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-
-@Stereotype
-@Target({ TYPE, METHOD, FIELD })
-@Retention(RUNTIME)
-@Documented
-public @interface BarStereotype {
-
-}",2013-03-18T19:40:12Z,55
"@@ -1,26 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic;
-
-import javax.enterprise.context.ApplicationScoped;
-
-@ApplicationScoped
-@FooStereotype
-@FooQualifier
-public class Bicycle implements Vehicle {
-
-}",2013-03-18T19:40:12Z,56
"@@ -1,62 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic;
-
-import java.util.Collections;
-import java.util.Set;
-
-import javax.enterprise.context.spi.CreationalContext;
-import javax.enterprise.inject.spi.Bean;
-import javax.enterprise.inject.spi.BeanAttributes;
-import javax.enterprise.inject.spi.InjectionPoint;
-
-import org.jboss.weld.util.bean.ForwardingBeanAttributes;
-
-public class BicycleBean extends ForwardingBeanAttributes<Bicycle> implements Bean<Bicycle> {
-
-    private BeanAttributes<Bicycle> delegate;
-
-    public BicycleBean(BeanAttributes<Bicycle> delegate) {
-        this.delegate = delegate;
-    }
-
-    public Bicycle create(CreationalContext<Bicycle> creationalContext) {
-        return new Bicycle();
-    }
-
-    public void destroy(Bicycle instance, CreationalContext<Bicycle> creationalContext) {
-    }
-
-    public Class<?> getBeanClass() {
-        return Bicycle.class;
-    }
-
-    public Set<InjectionPoint> getInjectionPoints() {
-        return Collections.emptySet();
-    }
-
-    @Override
-    public boolean isNullable() {
-        return false;
-    }
-
-    @Override
-    protected BeanAttributes<Bicycle> attributes() {
-        return delegate;
-    }
-
-}",2013-03-18T19:40:12Z,57
"@@ -1,48 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic;
-
-import javax.enterprise.event.Observes;
-import javax.enterprise.inject.spi.AfterBeanDiscovery;
-import javax.enterprise.inject.spi.BeanAttributes;
-import javax.enterprise.inject.spi.BeanManager;
-import javax.enterprise.inject.spi.Extension;
-import javax.enterprise.inject.spi.ProcessAnnotatedType;
-
-public class BicycleExtension implements Extension {
-
-    private boolean vetoed;
-
-    // we do not want the default bicycle bean
-    void vetoBicycleClass(@Observes ProcessAnnotatedType<Bicycle> event) {
-        event.veto();
-        vetoed = true;
-    }
-
-    void registerBicycle(@Observes AfterBeanDiscovery event, BeanManager manager) {
-        BeanAttributes<Bicycle> attributes = manager.createBeanAttributes(manager.createAnnotatedType(Bicycle.class));
-        
-        // validate what we got
-        Validator.validateBeforeModification(attributes);
-        
-        event.addBean(new BicycleBean(attributes));
-    }
-
-    public boolean isVetoed() {
-        return vetoed;
-    }
-}",2013-03-18T19:40:12Z,58
"@@ -1,37 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic;
-
-import java.lang.annotation.Documented;
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import javax.inject.Qualifier;
-
-import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.ElementType.PARAMETER;
-import static java.lang.annotation.ElementType.TYPE;
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-
-@Qualifier
-@Target({ TYPE, METHOD, PARAMETER, FIELD })
-@Retention(RUNTIME)
-@Documented
-public @interface FooQualifier {
-
-}",2013-03-18T19:40:12Z,59
"@@ -1,36 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic;
-
-import java.lang.annotation.Documented;
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import javax.enterprise.inject.Stereotype;
-
-import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.ElementType.TYPE;
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-
-@Stereotype
-@Target({ TYPE, METHOD, FIELD })
-@Retention(RUNTIME)
-@Documented
-public @interface FooStereotype {
-
-}",2013-03-18T19:40:12Z,60
"@@ -1,82 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic;
-
-import static org.junit.Assert.assertNull;
-
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Type;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Set;
-
-import javax.enterprise.context.RequestScoped;
-import javax.enterprise.event.Observes;
-import javax.enterprise.inject.spi.BeanAttributes;
-import javax.enterprise.inject.spi.Extension;
-import javax.enterprise.inject.spi.ProcessBeanAttributes;
-
-import org.jboss.weld.util.bean.ForwardingBeanAttributes;
-
-public class ModifyingExtension implements Extension {
-
-    private boolean modified;
-
-    void modifyBicycle(@Observes ProcessBeanAttributes<Bicycle> event) {
-        assertNull(event.getAnnotated());
-        final BeanAttributes<Bicycle> delegate = event.getBeanAttributes();
-
-        // validate what we got
-        Validator.validateBeforeModification(delegate);
-
-        event.setBeanAttributes(new ForwardingBeanAttributes<Bicycle>() {
-            @Override
-            public Set<Type> getTypes() {
-                Set<Type> types = new HashSet<Type>();
-                types.add(Object.class);
-                types.add(Bicycle.class);
-                return types;
-            }
-
-            @Override
-            public Class<? extends Annotation> getScope() {
-                return RequestScoped.class;
-            }
-
-            @Override
-            public Set<Class<? extends Annotation>> getStereotypes() {
-                return Collections.<Class<? extends Annotation>> singleton(BarStereotype.class);
-            }
-
-            @Override
-            public boolean isAlternative() {
-                return true;
-            }
-
-            @Override
-            protected BeanAttributes<Bicycle> attributes() {
-                return delegate;
-            }
-        });
-        modified = true;
-    }
-
-    public boolean isModified() {
-        return modified;
-    }
-
-}",2013-03-18T19:40:12Z,61
"@@ -1,48 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic;
-
-import static org.jboss.weld.tests.util.BeanUtilities.verifyQualifierTypes;
-import static org.jboss.weld.tests.util.BeanUtilities.verifyStereotypes;
-import static org.jboss.weld.tests.util.BeanUtilities.verifyTypes;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
-import javax.enterprise.context.ApplicationScoped;
-import javax.enterprise.context.RequestScoped;
-import javax.enterprise.inject.Any;
-import javax.enterprise.inject.spi.BeanAttributes;
-
-public class Validator {
-
-    public static void validateBeforeModification(BeanAttributes<?> attributes) {
-        assertEquals(ApplicationScoped.class, attributes.getScope());
-        verifyStereotypes(attributes, FooStereotype.class);
-        verifyTypes(attributes, Object.class, Vehicle.class, Bicycle.class);
-        verifyQualifierTypes(attributes, FooQualifier.class, Any.class);
-        assertFalse(attributes.isAlternative());
-    }
-
-    public static void validateAfterModification(BeanAttributes<?> attributes) {
-        assertEquals(RequestScoped.class, attributes.getScope());
-        verifyStereotypes(attributes, BarStereotype.class);
-        verifyTypes(attributes, Object.class, Bicycle.class);
-        verifyQualifierTypes(attributes, FooQualifier.class, Any.class);
-        assertTrue(attributes.isAlternative());
-    }
-}",2013-03-18T19:40:12Z,62
"@@ -1,44 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic.interceptor;
-
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.ElementType.TYPE;
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-
-import java.lang.annotation.Inherited;
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import javax.enterprise.util.AnnotationLiteral;
-import javax.interceptor.InterceptorBinding;
-
-@InterceptorBinding
-@Inherited
-@Target({ TYPE, METHOD })
-@Retention(RUNTIME)
-public @interface BarBinding {
-
-    @SuppressWarnings(""all"")
-    public class Literal extends AnnotationLiteral<BarBinding> implements BarBinding {
-        public static final Literal INSTANCE = new Literal();
-
-        private Literal() {
-        }
-
-    }
-}",2013-03-18T19:40:12Z,63
"@@ -1,33 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic.interceptor;
-
-import javax.interceptor.InvocationContext;
-
-public class ExternalInterceptor {
-
-    Object intercept(InvocationContext ctx) {
-        try {
-            return ctx.proceed();
-        } catch (Exception e) {
-            if (e instanceof RuntimeException) {
-                throw (RuntimeException) e;
-            }
-            throw new RuntimeException(e);
-        }
-    }
-}",2013-03-18T19:40:12Z,64
"@@ -1,79 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic.interceptor;
-
-import java.lang.annotation.Annotation;
-import java.util.Collections;
-import java.util.Set;
-
-import javax.enterprise.context.spi.CreationalContext;
-import javax.enterprise.inject.spi.BeanAttributes;
-import javax.enterprise.inject.spi.InjectionPoint;
-import javax.enterprise.inject.spi.InterceptionType;
-import javax.enterprise.inject.spi.Interceptor;
-import javax.interceptor.InvocationContext;
-
-import org.jboss.weld.util.bean.ForwardingBeanAttributes;
-
-public class ExternalInterceptorBean extends ForwardingBeanAttributes<ExternalInterceptor> implements Interceptor<ExternalInterceptor> {
-
-    private final ExternalInterceptor instance = new ExternalInterceptor();
-    private final BeanAttributes<ExternalInterceptor> delegate;
-    private final Annotation binding;
-
-    public ExternalInterceptorBean(BeanAttributes<ExternalInterceptor> delegate, Annotation binding) {
-        this.delegate = delegate;
-        this.binding = binding;
-    }
-
-    public Class<?> getBeanClass() {
-        return ExternalInterceptor.class;
-    }
-
-    public Set<InjectionPoint> getInjectionPoints() {
-        return Collections.emptySet();
-    }
-
-    public ExternalInterceptor create(CreationalContext<ExternalInterceptor> creationalContext) {
-        return instance;
-    }
-
-    public void destroy(ExternalInterceptor instance, CreationalContext<ExternalInterceptor> creationalContext) {
-    }
-
-    public Set<Annotation> getInterceptorBindings() {
-        return Collections.<Annotation> singleton(binding);
-    }
-
-    public boolean intercepts(InterceptionType type) {
-        return true;
-    }
-
-    public Object intercept(InterceptionType type, ExternalInterceptor instance, InvocationContext ctx) throws Exception {
-        return instance.intercept(ctx);
-    }
-
-    @Override
-    protected BeanAttributes<ExternalInterceptor> attributes() {
-        return delegate;
-    }
-
-    @Override
-    public boolean isNullable() {
-        return false;
-    }
-}",2013-03-18T19:40:12Z,65
"@@ -1,67 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic.interceptor;
-
-import javax.enterprise.event.Observes;
-import javax.enterprise.inject.spi.AfterBeanDiscovery;
-import javax.enterprise.inject.spi.AnnotatedType;
-import javax.enterprise.inject.spi.BeanAttributes;
-import javax.enterprise.inject.spi.BeanManager;
-import javax.enterprise.inject.spi.Extension;
-import javax.enterprise.inject.spi.ProcessAnnotatedType;
-import javax.enterprise.inject.spi.ProcessBeanAttributes;
-
-public class ExternalInterceptorExtension implements Extension {
-
-    private boolean typeVetoed;
-    private boolean beanRegistered;
-    private boolean beanVetoed;
-
-    void vetoInterceptorClass(@Observes ProcessAnnotatedType<ExternalInterceptor> event) {
-        event.veto();
-        typeVetoed = true;
-    }
-
-    void registerInterceptor(@Observes AfterBeanDiscovery event, BeanManager manager) {
-        AnnotatedType<ExternalInterceptor> annotated = manager.createAnnotatedType(ExternalInterceptor.class);
-        BeanAttributes<ExternalInterceptor> attributes = manager.createBeanAttributes(annotated);
-        // register the interceptor two times, each time with a different binding
-        event.addBean(new ExternalInterceptorBean(attributes, FooBinding.Literal.INSTANCE));
-        event.addBean(new ExternalInterceptorBean(attributes, BarBinding.Literal.INSTANCE));
-        beanRegistered = true;
-    }
-
-    // veto one of the interceptors
-    void vetoBean(@Observes ProcessBeanAttributes<ExternalInterceptor> event) {
-        if (!beanVetoed) {
-            event.veto();
-            beanVetoed = true;
-        }
-    }
-
-    public boolean isTypeVetoed() {
-        return typeVetoed;
-    }
-
-    public boolean isBeanRegistered() {
-        return beanRegistered;
-    }
-
-    public boolean isBeanVetoed() {
-        return beanVetoed;
-    }
-}",2013-03-18T19:40:12Z,66
"@@ -1,44 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic.interceptor;
-
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.ElementType.TYPE;
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-
-import java.lang.annotation.Inherited;
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import javax.enterprise.util.AnnotationLiteral;
-import javax.interceptor.InterceptorBinding;
-
-@InterceptorBinding
-@Inherited
-@Target({ TYPE, METHOD })
-@Retention(RUNTIME)
-public @interface FooBinding {
-
-    @SuppressWarnings(""all"")
-    public class Literal extends AnnotationLiteral<FooBinding> implements FooBinding {
-        public static final Literal INSTANCE = new Literal();
-
-        private Literal() {
-        }
-
-    }
-}",2013-03-18T19:40:12Z,67
"@@ -1,53 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2010, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.tests.extensions.lifecycle.processBeanAttributes.synthetic.interceptor;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-import javax.enterprise.inject.spi.BeanManager;
-import javax.enterprise.inject.spi.Extension;
-import javax.enterprise.inject.spi.InterceptionType;
-
-import org.jboss.arquillian.container.test.api.Deployment;
-import org.jboss.arquillian.junit.Arquillian;
-import org.jboss.shrinkwrap.api.Archive;
-import org.jboss.shrinkwrap.api.BeanArchive;
-import org.jboss.shrinkwrap.api.ShrinkWrap;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-@RunWith(Arquillian.class)
-public class SyntheticInterceptorVetoedTest {
-
-    @Deployment
-    public static Archive<?> getDeployment() {
-        return ShrinkWrap.create(BeanArchive.class).intercept(ExternalInterceptor.class).addPackage(ExternalInterceptor.class.getPackage())
-                .addAsServiceProvider(Extension.class, ExternalInterceptorExtension.class);
-    }
-
-    @Test
-    public void testSyntheticInterceptorBeanCanBeVetoed(ExternalInterceptorExtension extension, BeanManager manager) {
-        assertTrue(extension.isTypeVetoed());
-        assertTrue(extension.isBeanRegistered());
-        assertTrue(extension.isBeanVetoed());
-        // verify that one of these is vetoed (we do not know which one)
-        int fooInterceptors = manager.resolveInterceptors(InterceptionType.AROUND_INVOKE, FooBinding.Literal.INSTANCE).size();
-        int barInterceptors = manager.resolveInterceptors(InterceptionType.AROUND_INVOKE, BarBinding.Literal.INSTANCE).size();
-        assertEquals(1, fooInterceptors + barInterceptors);
-    }
-}",2013-03-18T19:40:12Z,68
"@@ -16,9 +16,27 @@
  */
 package org.jboss.weld.tests.unit.ejb.subclass;
 
+import javax.enterprise.inject.spi.BeanManager;
+import javax.inject.Inject;
+
 @BarInterceptorBinding
 public class Bar implements BarLocal {
 
+    private final BeanManager manager;
+
+    public Bar() {
+        this.manager = null;
+    }
+
+    @Inject
+    public Bar(BeanManager manager) {
+        this.manager = manager;
+    }
+
+    public BeanManager getManager() {
+        return manager;
+    }
+
     @Override
     public int ping() {
         return 0;",2014-09-03T07:18:45Z,69
"@@ -16,11 +16,21 @@
  */
 package org.jboss.weld.tests.unit.ejb.subclass;
 
+import javax.enterprise.inject.spi.BeanManager;
+
 /**
  * Simulates an enhanced subclass generated by the EJB container
  */
 public class EnhancedBar extends Bar implements Enhanced {
 
+    public EnhancedBar() {
+        super();
+    }
+
+    public EnhancedBar(BeanManager manager) {
+        super(manager);
+    }
+
     @Override
     public int ping() {
         return super.ping() + 1;",2014-09-03T07:18:45Z,70
"@@ -16,11 +16,21 @@
  */
 package org.jboss.weld.tests.unit.ejb.subclass;
 
+import javax.enterprise.inject.spi.BeanManager;
+
 /**
  * Simulates an enhanced subclass generated by the EJB container
  */
 public class EnhancedFoo extends Foo implements Enhanced {
 
+    public EnhancedFoo() {
+        super();
+    }
+
+    public EnhancedFoo(BeanManager manager) {
+        super(manager);
+    }
+
     @Override
     public int ping() {
         return super.ping() + 1;",2014-09-03T07:18:45Z,71
"@@ -16,9 +16,27 @@
  */
 package org.jboss.weld.tests.unit.ejb.subclass;
 
+import javax.enterprise.inject.spi.BeanManager;
+import javax.inject.Inject;
+
 
 public class Foo {
 
+    private final BeanManager manager;
+
+    public Foo() {
+        this.manager = null;
+    }
+
+    @Inject
+    public Foo(BeanManager manager) {
+        this.manager = manager;
+    }
+
+    public BeanManager getManager() {
+        return manager;
+    }
+
     public int ping() {
         return 0;
     }",2014-09-03T07:18:45Z,72
"@@ -17,6 +17,7 @@
 package org.jboss.weld.tests.unit.ejb.subclass;
 
 import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertNotNull;
 import static org.testng.Assert.assertTrue;
 
 import java.lang.reflect.Method;
@@ -90,6 +91,9 @@ protected void configureServices() {
 
         assertEquals(MockEjbServices.getDescriptors().size(), 1);
         assertEquals(MockEjbServices.getDescriptors().iterator().next().getBeanClass(), Bar.class);
+
+        assertNotNull(foo.getManager());
+        assertNotNull(bar.getManager());
     }
 
     private static class EjbDescriptorImpl<T> implements EjbDescriptor<T>, SubclassedComponentDescriptor<T> {",2014-09-03T07:18:45Z,73
"@@ -44,15 +44,14 @@
  * @see SubclassDecoratorApplyingInstantiator
  * @see ProxyDecoratorApplyingSessionBeanInstantiator
  */
-public abstract class AbstractDecoratorApplyingInstantiator<T> implements Instantiator<T> {
+public abstract class AbstractDecoratorApplyingInstantiator<T> extends ForwardingInstantiator<T> {
 
-    private final Instantiator<T> delegate;
     private final Bean<T> bean;
     private final Class<T> proxyClass;
     private final List<Decorator<?>> decorators;
 
     public AbstractDecoratorApplyingInstantiator(Instantiator<T> delegate, Bean<T> bean, List<Decorator<?>> decorators) {
-        this.delegate = delegate;
+        super(delegate);
         this.bean = bean;
         this.decorators = decorators;
         ProxyFactory<T> factory = new ProxyFactory<T>(bean.getBeanClass(), bean.getTypes(), bean);
@@ -63,7 +62,7 @@ public AbstractDecoratorApplyingInstantiator(Instantiator<T> delegate, Bean<T> b
     @Override
     public T newInstance(CreationalContext<T> ctx, BeanManagerImpl manager, AroundConstructCallback<T> callback) {
         InjectionPoint originalInjectionPoint = manager.getServices().get(CurrentInjectionPoint.class).peek();
-        return applyDecorators(delegate.newInstance(ctx, manager, callback), ctx, originalInjectionPoint, manager);
+        return applyDecorators(delegate().newInstance(ctx, manager, callback), ctx, originalInjectionPoint, manager);
     }
 
     protected abstract T applyDecorators(T instance, CreationalContext<T> creationalContext, InjectionPoint originalInjectionPoint, BeanManagerImpl manager);
@@ -88,10 +87,6 @@ protected void registerOuterDecorator(ProxyObject instance, T outerDelegate) {
         wrapperMethodHandler.setOuterDecorator(outerDelegate);
     }
 
-    public Instantiator<T> getDelegate() {
-        return delegate;
-    }
-
     public Bean<T> getBean() {
         return bean;
     }
@@ -104,11 +99,6 @@ public List<Decorator<?>> getDecorators() {
         return decorators;
     }
 
-    @Override
-    public boolean hasInterceptorSupport() {
-        return delegate.hasInterceptorSupport();
-    }
-
     @Override
     public boolean hasDecoratorSupport() {
         return true;",2013-03-15T09:34:26Z,74
"@@ -26,8 +26,8 @@ public abstract class AbstractInstantiator<T> implements Instantiator<T> {
 
     @Override
     public T newInstance(CreationalContext<T> ctx, BeanManagerImpl manager, AroundConstructCallback<T> callback) {
-        return getConstructor().newInstance(manager, ctx, callback);
+        return getConstructorInjectionPoint().newInstance(manager, ctx, callback);
     }
 
-    protected abstract ConstructorInjectionPoint<T> getConstructor();
+    protected abstract ConstructorInjectionPoint<T> getConstructorInjectionPoint();
 }",2013-03-15T09:34:26Z,75
"@@ -151,7 +151,7 @@ protected void initializeAfterBeanDiscovery(EnhancedAnnotatedType<T> annotatedTy
      */
     protected Instantiator<T> initInstantiator(EnhancedAnnotatedType<T> type, Bean<T> bean, BeanManagerImpl beanManager, Set<InjectionPoint> injectionPoints) {
         DefaultInstantiator<T> instantiator = new DefaultInstantiator<T>(type, bean, beanManager);
-        injectionPoints.addAll(instantiator.getConstructor().getParameterInjectionPoints());
+        injectionPoints.addAll(instantiator.getConstructorInjectionPoint().getParameterInjectionPoints());
         return instantiator;
     }
 ",2013-03-15T09:34:26Z,76
"@@ -19,7 +19,9 @@
 import static org.jboss.weld.logging.messages.BeanMessage.FINAL_BEAN_CLASS_WITH_DECORATORS_NOT_ALLOWED;
 import static org.jboss.weld.logging.messages.BeanMessage.FINAL_BEAN_CLASS_WITH_INTERCEPTORS_NOT_ALLOWED;
 import static org.jboss.weld.logging.messages.BeanMessage.NON_CONTAINER_DECORATOR;
+
 import java.util.List;
+
 import javax.enterprise.inject.spi.Bean;
 import javax.enterprise.inject.spi.Decorator;
 import javax.enterprise.inject.spi.Interceptor;
@@ -30,6 +32,8 @@
 import org.jboss.weld.bean.DecoratorImpl;
 import org.jboss.weld.exceptions.DeploymentException;
 import org.jboss.weld.exceptions.IllegalStateException;
+import org.jboss.weld.interceptor.spi.metadata.ClassMetadata;
+import org.jboss.weld.interceptor.spi.model.InterceptionModel;
 import org.jboss.weld.interceptor.util.InterceptionUtils;
 import org.jboss.weld.manager.BeanManagerImpl;
 import org.jboss.weld.resources.ClassTransformer;
@@ -84,13 +88,18 @@ protected boolean isInterceptionCandidate() {
     protected void initializeInterceptionModel(EnhancedAnnotatedType<T> annotatedType) {
         DefaultInstantiator<T> instantiator = (DefaultInstantiator<T>) getInstantiator();
         if (isInterceptionCandidate() && !beanManager.getInterceptorModelRegistry().containsKey(annotatedType.getJavaClass())) {
-            new InterceptionModelInitializer<T>(beanManager, annotatedType, instantiator.getConstructor().getAnnotated(), getBean()).init();
+            new InterceptionModelInitializer<T>(beanManager, annotatedType, instantiator.getConstructorInjectionPoint().getAnnotated(), getBean()).init();
         }
     }
 
     public void initializeAfterBeanDiscovery(EnhancedAnnotatedType<T> annotatedType) {
         initializeInterceptionModel(annotatedType);
-        boolean hasInterceptors = isInterceptionCandidate() && (beanManager.getInterceptorModelRegistry().containsKey(getType().getJavaClass()));
+
+        InterceptionModel<ClassMetadata<?>, ?> interceptionModel = null;
+        if (isInterceptionCandidate()) {
+            interceptionModel = beanManager.getInterceptorModelRegistry().get(getType().getJavaClass());
+        }
+        boolean hasNonConstructorInterceptors = interceptionModel != null && interceptionModel.hasNonConstructorInterceptors();
 
         List<Decorator<?>> decorators = null;
         if (getBean() != null && isInterceptionCandidate()) {
@@ -101,20 +110,29 @@ public void initializeAfterBeanDiscovery(EnhancedAnnotatedType<T> annotatedType)
             checkDecoratedMethods(annotatedType, decorators);
         }
 
-        if (hasInterceptors || hasDecorators) {
+        if (hasNonConstructorInterceptors || hasDecorators) {
             if (!(getInstantiator() instanceof DefaultInstantiator<?>)) {
                 throw new java.lang.IllegalStateException(""Unexpected instantiator "" + getInstantiator());
             }
             DefaultInstantiator<T> delegate = (DefaultInstantiator<T>) getInstantiator();
             setInstantiator(new SubclassedComponentInstantiator<T>(annotatedType, getBean(), delegate, beanManager));
-
             if (hasDecorators) {
                 setInstantiator(new SubclassDecoratorApplyingInstantiator<T>(getInstantiator(), getBean(), decorators));
             }
-            if (hasInterceptors) {
-                setInstantiator(new InterceptorApplyingInstantiator<T>(annotatedType, this.getInstantiator(), beanManager, delegate.getConstructor().getAnnotated().getJavaMember()));
+            if (hasNonConstructorInterceptors) {
+                setInstantiator(new InterceptorApplyingInstantiator<T>(getInstantiator(), interceptionModel));
             }
         }
+
+        if (isInterceptionCandidate()) {
+            setupConstructorInterceptionInstantiator(interceptionModel);
+        }
+    }
+
+    protected void setupConstructorInterceptionInstantiator(InterceptionModel<ClassMetadata<?>, ?> interceptionModel) {
+        if (interceptionModel != null && interceptionModel.hasConstructorInterceptors()) {
+            setInstantiator(new ConstructorInterceptionInstantiator<T>(getInstantiator(), interceptionModel));
+        }
     }
 
     protected void checkDecoratedMethods(EnhancedAnnotatedType<T> type, List<Decorator<?>> decorators) {",2013-03-15T09:34:26Z,77
"@@ -0,0 +1,107 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2013, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.weld.injection.producer;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.concurrent.atomic.AtomicReference;
+
+import javax.enterprise.context.spi.CreationalContext;
+import javax.interceptor.AroundConstruct;
+import javax.interceptor.InvocationContext;
+
+import org.jboss.weld.exceptions.WeldException;
+import org.jboss.weld.injection.AroundConstructCallback;
+import org.jboss.weld.interceptor.proxy.InterceptionContext;
+import org.jboss.weld.interceptor.proxy.InterceptorInvocation;
+import org.jboss.weld.interceptor.proxy.InterceptorInvocationContext;
+import org.jboss.weld.interceptor.proxy.SimpleInterceptionChain;
+import org.jboss.weld.interceptor.spi.metadata.ClassMetadata;
+import org.jboss.weld.interceptor.spi.metadata.InterceptorMetadata;
+import org.jboss.weld.interceptor.spi.model.InterceptionModel;
+import org.jboss.weld.interceptor.spi.model.InterceptionType;
+import org.jboss.weld.manager.BeanManagerImpl;
+
+/**
+ * Delegating {@link Instantiator} that takes care of {@link AroundConstruct} interceptor invocation.
+ *
+ * @author Jozef Hartinger
+ *
+ */
+public class ConstructorInterceptionInstantiator<T> extends ForwardingInstantiator<T> {
+
+    private final InterceptionModel<ClassMetadata<?>, ?> model;
+
+    public ConstructorInterceptionInstantiator(Instantiator<T> delegate, InterceptionModel<ClassMetadata<?>, ?> model) {
+        super(delegate);
+        this.model = model;
+    }
+
+    @Override
+    public T newInstance(CreationalContext<T> ctx, BeanManagerImpl manager, AroundConstructCallback<T> callback) {
+
+        InterceptionContext interceptionContext = InterceptionContext.forConstructorInterception(model, ctx, manager);
+        // build interceptor invocations
+        final Collection<InterceptorInvocation> interceptorInvocations = new ArrayList<InterceptorInvocation>(model.getConstructorInvocationInterceptors().size());
+        for (InterceptorMetadata<?> interceptorMetadata : model.getConstructorInvocationInterceptors()) {
+            interceptorInvocations.add(interceptorMetadata.getInterceptorInvocation(interceptionContext.getInterceptorInstance(interceptorMetadata), InterceptionType.AROUND_CONSTRUCT));
+        }
+
+        AroundConstructCallback<T> aroundConstructCallback = new AroundConstructCallback<T>() {
+            @Override
+            public T aroundConstruct(Object[] parameters, final ConstructionHandle<T> constructionHandle) {
+
+                /*
+                 * The AroundConstruct interceptor method can access the constructed instance using InvocationContext.getTarget
+                 * method after the InvocationContext.proceed completes.
+                 */
+                final AtomicReference<T> target = new AtomicReference<T>();
+
+                SimpleInterceptionChain chain = new SimpleInterceptionChain(interceptorInvocations) {
+                    @Override
+                    protected Object interceptorChainCompleted(InvocationContext invocationCtx) throws Exception {
+                        // all the interceptors were invoked, call the constructor now
+                        target.set(constructionHandle.construct(invocationCtx.getParameters()));
+                        return null;
+                    }
+                };
+
+                InterceptorInvocationContext invocationCtx = new InterceptorInvocationContext(chain, delegate().getConstructor(), parameters) {
+                    @Override
+                    public Object getTarget() {
+                        return target.get();
+                    }
+                };
+
+                try {
+                    chain.invokeNextInterceptor(invocationCtx);
+                } catch (RuntimeException e) {
+                    throw e;
+                } catch (Throwable e) {
+                    throw new WeldException(e);
+                }
+                return target.get();
+            }
+        };
+        return delegate().newInstance(ctx, manager, aroundConstructCallback);
+    }
+
+    @Override
+    public String toString() {
+        return ""ConstructorInterceptionInstantiator wrapping "" + delegate();
+    }
+}",2013-03-15T09:34:26Z,78
"@@ -72,7 +72,7 @@ protected Class<T> createEnhancedSubclass(AnnotatedType<T> type, Bean<?> bean) {
             };
         } else {
             DefaultInstantiator<T> instantiator = new DefaultInstantiator<T>(type, getBean(), beanManager);
-            injectionPoints.addAll(instantiator.getConstructor().getParameterInjectionPoints());
+            injectionPoints.addAll(instantiator.getConstructorInjectionPoint().getParameterInjectionPoints());
             return instantiator;
         }
     }",2013-03-15T09:34:26Z,79
"@@ -19,6 +19,8 @@
 import static org.jboss.weld.logging.Category.BEAN;
 import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
 
+import java.lang.reflect.Constructor;
+
 import javax.enterprise.context.spi.CreationalContext;
 import javax.enterprise.inject.spi.Bean;
 
@@ -68,10 +70,15 @@ public T newInstance(CreationalContext<T> ctx, BeanManagerImpl manager, AroundCo
     }
 
     @Override
-    public ConstructorInjectionPoint<T> getConstructor() {
+    public ConstructorInjectionPoint<T> getConstructorInjectionPoint() {
         return constructor;
     }
 
+    @Override
+    public Constructor<T> getConstructor() {
+        return constructor.getAnnotated().getJavaMember();
+    }
+
     @Override
     public String toString() {
         return ""SimpleInstantiator [constructor="" + constructor.getMember() + ""]"";",2013-03-15T09:34:26Z,80
"@@ -0,0 +1,57 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2013, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.weld.injection.producer;
+
+import java.lang.reflect.Constructor;
+
+import javax.enterprise.context.spi.CreationalContext;
+
+import org.jboss.weld.injection.AroundConstructCallback;
+import org.jboss.weld.manager.BeanManagerImpl;
+
+public class ForwardingInstantiator<T> implements Instantiator<T> {
+
+    private final Instantiator<T> delegate;
+
+    public ForwardingInstantiator(Instantiator<T> delegate) {
+        this.delegate = delegate;
+    }
+
+    protected Instantiator<T> delegate() {
+        return delegate;
+    }
+
+    @Override
+    public T newInstance(CreationalContext<T> ctx, BeanManagerImpl manager, AroundConstructCallback<T> callback) {
+        return delegate().newInstance(ctx, manager, callback);
+    }
+
+    @Override
+    public boolean hasInterceptorSupport() {
+        return delegate().hasInterceptorSupport();
+    }
+
+    @Override
+    public boolean hasDecoratorSupport() {
+        return delegate().hasDecoratorSupport();
+    }
+
+    @Override
+    public Constructor<T> getConstructor() {
+        return delegate().getConstructor();
+    }
+}",2013-03-15T09:34:26Z,81
"@@ -16,6 +16,8 @@
  */
 package org.jboss.weld.injection.producer;
 
+import java.lang.reflect.Constructor;
+
 import javax.enterprise.context.spi.CreationalContext;
 
 import org.jboss.weld.injection.AroundConstructCallback;
@@ -42,4 +44,10 @@ public interface Instantiator<T> {
      * Indicates whether instances created by this Instantiator support decorators.
      */
     boolean hasDecoratorSupport();
+
+    /**
+     * Returns the constructor used for instantiation. If an enhanced subclass is used for a component instance, this method
+     * returns the matching constructor of the original component class.
+     */
+    Constructor<T> getConstructor();
 }",2013-03-15T09:34:26Z,82
"@@ -16,33 +16,17 @@
  */
 package org.jboss.weld.injection.producer;
 
-import java.lang.reflect.Constructor;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-import java.util.concurrent.atomic.AtomicReference;
-
 import javax.enterprise.context.spi.CreationalContext;
-import javax.interceptor.InvocationContext;
 
-import org.jboss.weld.annotated.enhanced.EnhancedAnnotatedType;
 import org.jboss.weld.bean.proxy.CombinedInterceptorAndDecoratorStackMethodHandler;
 import org.jboss.weld.bean.proxy.ProxyObject;
 import org.jboss.weld.exceptions.DeploymentException;
-import org.jboss.weld.exceptions.WeldException;
 import org.jboss.weld.injection.AroundConstructCallback;
 import org.jboss.weld.interceptor.proxy.DefaultInvocationContextFactory;
 import org.jboss.weld.interceptor.proxy.InterceptionContext;
-import org.jboss.weld.interceptor.proxy.InterceptorInvocation;
-import org.jboss.weld.interceptor.proxy.InterceptorInvocationContext;
 import org.jboss.weld.interceptor.proxy.InterceptorMethodHandler;
-import org.jboss.weld.interceptor.proxy.SimpleInterceptionChain;
-import org.jboss.weld.interceptor.reader.TargetClassInterceptorMetadata;
 import org.jboss.weld.interceptor.spi.metadata.ClassMetadata;
-import org.jboss.weld.interceptor.spi.metadata.InterceptorMetadata;
 import org.jboss.weld.interceptor.spi.model.InterceptionModel;
-import org.jboss.weld.interceptor.spi.model.InterceptionType;
-import org.jboss.weld.interceptor.util.InterceptionTypeRegistry;
 import org.jboss.weld.manager.BeanManagerImpl;
 
 /**
@@ -53,87 +37,25 @@
  *
  * @param <T>
  */
-public class InterceptorApplyingInstantiator<T> implements Instantiator<T> {
+public class InterceptorApplyingInstantiator<T> extends ForwardingInstantiator<T> {
 
-    private final TargetClassInterceptorMetadata<T> targetClassInterceptorMetadata;
     private final InterceptionModel<ClassMetadata<?>, ?> interceptionModel;
-    private final Instantiator<T> delegate;
-    private final Constructor<T> constructor;
 
-    public InterceptorApplyingInstantiator(EnhancedAnnotatedType<T> type, Instantiator<T> delegate, BeanManagerImpl manager, Constructor<T> constructor) {
-        this.targetClassInterceptorMetadata = manager.getInterceptorMetadataReader().getTargetClassInterceptorMetadata(manager.getInterceptorMetadataReader().getClassMetadata(type.getJavaClass()));
-        this.interceptionModel = manager.getInterceptorModelRegistry().get(type.getJavaClass());
-        this.delegate = delegate;
-        this.constructor = constructor;
+    public InterceptorApplyingInstantiator(Instantiator<T> delegate, InterceptionModel<ClassMetadata<?>, ?> model) {
+        super(delegate);
+        this.interceptionModel = model;
     }
 
     @Override
-    public T newInstance(CreationalContext<T> ctx, BeanManagerImpl manager, AroundConstructCallback<T> ignored) {
-        InterceptionContext interceptionContext = new InterceptionContext(targetClassInterceptorMetadata, interceptionModel, ctx, manager);
+    public T newInstance(CreationalContext<T> ctx, BeanManagerImpl manager, AroundConstructCallback<T> callback) {
+        InterceptionContext interceptionContext = InterceptionContext.forNonConstructorInterception(interceptionModel, ctx, manager);
 
-        T instance = invokeConstructor(interceptionContext, ctx, manager);
+        T instance = delegate().newInstance(ctx, manager, callback);
 
         applyInterceptors(instance, interceptionContext);
         return instance;
     }
 
-    protected T invokeConstructor(InterceptionContext interceptionContext, final CreationalContext<T> ctx, final BeanManagerImpl manager) {
-
-        AroundConstructCallback<T> callback = null;
-
-        if (InterceptionTypeRegistry.isSupported(InterceptionType.AROUND_CONSTRUCT)) {
-            List<? extends InterceptorMetadata<?>> interceptors = interceptionModel.getConstructorInvocationInterceptors();
-            if (!interceptors.isEmpty()) {
-
-                // build interceptor invocations
-                final Collection<InterceptorInvocation> interceptorInvocations = new ArrayList<InterceptorInvocation>(interceptors.size());
-                for (InterceptorMetadata<?> interceptorMetadata : interceptors) {
-                    interceptorInvocations.add(interceptorMetadata.getInterceptorInvocation(interceptionContext.getInterceptorInstance(interceptorMetadata), InterceptionType.AROUND_CONSTRUCT));
-                }
-
-                callback = new AroundConstructCallback<T>() {
-
-                    @Override
-                    public T aroundConstruct(Object[] parameters, final ConstructionHandle<T> constructionHandle) {
-
-                        /*
-                         * The AroundConstruct interceptor method can access the constructed instance using InvocationContext.getTarget
-                         * method after the InvocationContext.proceed completes.
-                         */
-                        final AtomicReference<T> target = new AtomicReference<T>();
-
-                        SimpleInterceptionChain chain = new SimpleInterceptionChain(interceptorInvocations) {
-                            @Override
-                            protected Object interceptorChainCompleted(InvocationContext invocationCtx) throws Exception {
-                                // all the interceptors were invoked, call the constructor now
-                                target.set(constructionHandle.construct(invocationCtx.getParameters()));
-                                return null;
-                            }
-                        };
-
-                        InterceptorInvocationContext invocationCtx = new InterceptorInvocationContext(chain, constructor, parameters) {
-                            @Override
-                            public Object getTarget() {
-                                return target.get();
-                            }
-                        };
-
-                        try {
-                            chain.invokeNextInterceptor(invocationCtx);
-                        } catch (RuntimeException e) {
-                            throw e;
-                        } catch (Throwable e) {
-                            throw new WeldException(e);
-                        }
-                        return target.get();
-                    }
-                };
-            }
-        }
-
-        return delegate.newInstance(ctx, manager, callback);
-    }
-
     protected T applyInterceptors(T instance, InterceptionContext interceptionContext) {
         try {
             InterceptorMethodHandler methodHandler = new InterceptorMethodHandler(interceptionContext, new DefaultInvocationContextFactory());
@@ -145,20 +67,13 @@ protected T applyInterceptors(T instance, InterceptionContext interceptionContex
         return instance;
     }
 
-
-
     @Override
     public String toString() {
-        return ""InterceptorApplyingInstantiator for "" + delegate;
+        return ""InterceptorApplyingInstantiator for "" + delegate();
     }
 
     @Override
     public boolean hasInterceptorSupport() {
         return true;
     }
-
-    @Override
-    public boolean hasDecoratorSupport() {
-        return delegate.hasDecoratorSupport();
-    }
 }",2013-03-15T09:34:26Z,83
"@@ -16,6 +16,7 @@
  */
 package org.jboss.weld.injection.producer;
 
+import java.lang.reflect.Constructor;
 import java.lang.reflect.Type;
 import java.util.Collections;
 import java.util.HashSet;
@@ -47,14 +48,16 @@
 public class SubclassedComponentInstantiator<T> extends AbstractInstantiator<T> {
 
     private final ConstructorInjectionPoint<T> proxyClassConstructorInjectionPoint;
+    private final Constructor<T> componentClassConstructor;
 
     public SubclassedComponentInstantiator(EnhancedAnnotatedType<T> type, Bean<T> bean, DefaultInstantiator<T> delegate, BeanManagerImpl manager) {
-        this(type, bean, delegate.getConstructor(), manager);
+        this(type, bean, delegate.getConstructorInjectionPoint(), manager);
     }
 
     protected SubclassedComponentInstantiator(EnhancedAnnotatedType<T> type, Bean<T> bean, ConstructorInjectionPoint<T> originalConstructor, BeanManagerImpl manager) {
         EnhancedAnnotatedConstructor<T> constructorForEnhancedSubclass = initEnhancedSubclass(manager, type, bean, originalConstructor);
         this.proxyClassConstructorInjectionPoint = new ProxyClassConstructorInjectionPointWrapper<T>(bean, type.getJavaClass(), constructorForEnhancedSubclass, originalConstructor, manager);
+        this.componentClassConstructor = originalConstructor.getAnnotated().getJavaMember();
     }
 
     protected EnhancedAnnotatedConstructor<T> initEnhancedSubclass(BeanManagerImpl manager, EnhancedAnnotatedType<T> type, Bean<?> bean, ConstructorInjectionPoint<T> originalConstructorInjectionPoint) {
@@ -95,8 +98,17 @@ public boolean hasDecoratorSupport() {
         return false;
     }
 
+    /**
+     * Note that this method return a {@link ConstructorInjectionPoint} that represents the constructor of an enhanced subclass.
+     * Use {@link #getConstructor()} to get the matching component class constructor.
+     */
     @Override
-    protected ConstructorInjectionPoint<T> getConstructor() {
+    protected ConstructorInjectionPoint<T> getConstructorInjectionPoint() {
         return proxyClassConstructorInjectionPoint;
     }
+
+    @Override
+    public Constructor<T> getConstructor() {
+        return componentClassConstructor;
+    }
 }",2013-03-15T09:34:26Z,84
"@@ -63,7 +63,7 @@ public SessionBean<T> getBean() {
     protected Instantiator<T> initInstantiator(EnhancedAnnotatedType<T> type, Bean<T> bean, BeanManagerImpl beanManager, Set<InjectionPoint> injectionPoints) {
         if (bean instanceof SessionBean<?>) {
             DefaultInstantiator<T> instantiator = new DefaultInstantiator<T>(type, bean, beanManager);
-            injectionPoints.addAll(instantiator.getConstructor().getParameterInjectionPoints());
+            injectionPoints.addAll(instantiator.getConstructorInjectionPoint().getParameterInjectionPoints());
             return instantiator;
         } else {
             throw new IllegalArgumentException(""Cannot create SessionBeanInjectionTarget for "" + bean);
@@ -81,6 +81,11 @@ protected Injector<T> initInjector(EnhancedAnnotatedType<T> type, Bean<T> bean,
     @Override
     public void initializeAfterBeanDiscovery(EnhancedAnnotatedType<T> annotatedType) {
         initializeInterceptionModel(annotatedType);
+        /*
+         * We only take care of @AroundConstructor interception. The EJB container deals with the other types of interception.
+         */
+        setupConstructorInterceptionInstantiator(beanManager.getInterceptorModelRegistry().get(getType().getJavaClass()));
+
         List<Decorator<?>> decorators = beanManager.resolveDecorators(getBean().getTypes(), getBean().getQualifiers());
         if (!decorators.isEmpty()) {
             Instantiator<T> instantiator = getInstantiator();",2013-03-15T09:34:26Z,85
"@@ -20,6 +20,8 @@
 import static org.jboss.weld.logging.messages.BeanMessage.PROXY_INSTANTIATION_BEAN_ACCESS_FAILED;
 import static org.jboss.weld.logging.messages.BeanMessage.PROXY_INSTANTIATION_FAILED;
 
+import java.lang.reflect.Constructor;
+
 import javax.enterprise.context.spi.CreationalContext;
 
 import org.jboss.weld.annotated.enhanced.EnhancedAnnotatedType;
@@ -84,4 +86,9 @@ public boolean hasDecoratorSupport() {
     public SessionBean<T> getBean() {
         return bean;
     }
+
+    @Override
+    public Constructor<T> getConstructor() {
+        return null; // not relevant
+    }
 }",2013-03-15T09:34:26Z,86
"@@ -17,7 +17,6 @@
 
 package org.jboss.weld.interceptor.builder;
 
-import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -150,4 +149,14 @@ public List<InterceptorMetadata<I>> getConstructorInvocationInterceptors() {
         return Collections.emptyList();
     }
 
+    @Override
+    public boolean hasConstructorInterceptors() {
+        return !getConstructorInvocationInterceptors().isEmpty();
+    }
+
+    @Override
+    public boolean hasNonConstructorInterceptors() {
+        return allInterceptors.size() > getConstructorInvocationInterceptors().size();
+    }
+
 }",2013-03-15T09:34:26Z,87
"@@ -16,13 +16,20 @@
  */
 package org.jboss.weld.interceptor.proxy;
 
+import static org.jboss.weld.interceptor.spi.model.InterceptionType.AROUND_INVOKE;
+import static org.jboss.weld.interceptor.spi.model.InterceptionType.AROUND_TIMEOUT;
+import static org.jboss.weld.interceptor.spi.model.InterceptionType.POST_ACTIVATE;
+import static org.jboss.weld.interceptor.spi.model.InterceptionType.POST_CONSTRUCT;
+import static org.jboss.weld.interceptor.spi.model.InterceptionType.PRE_DESTROY;
+import static org.jboss.weld.interceptor.spi.model.InterceptionType.PRE_PASSIVATE;
 import static org.jboss.weld.util.collections.WeldCollections.immutableMap;
 import static org.jboss.weld.util.reflection.Reflections.cast;
 
 import java.io.ObjectStreamException;
 import java.io.Serializable;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.Set;
 
 import javax.enterprise.context.spi.CreationalContext;
 
@@ -31,8 +38,11 @@
 import org.jboss.weld.interceptor.spi.metadata.ClassMetadata;
 import org.jboss.weld.interceptor.spi.metadata.InterceptorMetadata;
 import org.jboss.weld.interceptor.spi.model.InterceptionModel;
+import org.jboss.weld.interceptor.spi.model.InterceptionType;
 import org.jboss.weld.manager.BeanManagerImpl;
 
+import com.google.common.collect.ImmutableSet;
+
 /**
  * Holds interceptor metadata and interceptor instances throughout the lifecycle of the intercepted instance.
  *
@@ -41,6 +51,22 @@
  */
 public class InterceptionContext implements Serializable {
 
+    private static final Set<InterceptionType> CONSTRUCTOR_INTERCEPTION_TYPES = ImmutableSet.of(InterceptionType.AROUND_CONSTRUCT);
+    private static final Set<InterceptionType> METHOD_INTERCEPTION_TYPES = ImmutableSet.of(AROUND_INVOKE, AROUND_TIMEOUT, POST_CONSTRUCT, PRE_DESTROY, POST_ACTIVATE, PRE_PASSIVATE);
+
+    public static InterceptionContext forConstructorInterception(InterceptionModel<ClassMetadata<?>, ?> interceptionModel, CreationalContext<?> ctx, BeanManagerImpl manager) {
+        return of(interceptionModel, ctx, manager, CONSTRUCTOR_INTERCEPTION_TYPES);
+    }
+
+    public static InterceptionContext forNonConstructorInterception(InterceptionModel<ClassMetadata<?>, ?> interceptionModel, CreationalContext<?> ctx, BeanManagerImpl manager) {
+        return of(interceptionModel, ctx, manager, METHOD_INTERCEPTION_TYPES);
+    }
+
+    private static InterceptionContext of(InterceptionModel<ClassMetadata<?>, ?> interceptionModel, CreationalContext<?> ctx, BeanManagerImpl manager, Set<InterceptionType> interceptionTypes) {
+        TargetClassInterceptorMetadata<?> targetClassInterceptorMetadata = manager.getInterceptorMetadataReader().getTargetClassInterceptorMetadata(interceptionModel.getInterceptedEntity());
+        return new InterceptionContext(initInterceptorInstanceMap(interceptionModel, ctx, manager, interceptionTypes), manager, targetClassInterceptorMetadata, interceptionModel);
+    }
+
     private static final long serialVersionUID = 7500722360133273633L;
 
     private final transient TargetClassInterceptorMetadata<?> targetClassInterceptorMetadata;
@@ -50,22 +76,22 @@ public class InterceptionContext implements Serializable {
     private final BeanManagerImpl manager;
     private final Class<?> targetClass;
 
-    public InterceptionContext(TargetClassInterceptorMetadata<?> targetClassInterceptorMetadata, InterceptionModel<ClassMetadata<?>, ?> interceptionModel, CreationalContext<?> ctx, BeanManagerImpl manager) {
-        this(initInterceptorInstanceMap(interceptionModel.getAllInterceptors(), ctx, manager), manager, targetClassInterceptorMetadata, interceptionModel, targetClassInterceptorMetadata.getInterceptorClass().getJavaClass());
-    }
-
-    private InterceptionContext(Map<Class<?>, Object> interceptorInstances, BeanManagerImpl manager, TargetClassInterceptorMetadata<?> targetClassInterceptorMetadata, InterceptionModel<ClassMetadata<?>, ?> interceptionModel, Class<?> targetClass) {
+    private InterceptionContext(Map<Class<?>, Object> interceptorInstances, BeanManagerImpl manager, TargetClassInterceptorMetadata<?> targetClassInterceptorMetadata, InterceptionModel<ClassMetadata<?>, ?> interceptionModel) {
         this.interceptorInstances = interceptorInstances;
         this.manager = manager;
         this.targetClassInterceptorMetadata = targetClassInterceptorMetadata;
         this.interceptionModel = interceptionModel;
-        this.targetClass = targetClass;
+        this.targetClass = targetClassInterceptorMetadata.getInterceptorClass().getJavaClass();
     }
 
-    private static Map<Class<?>, Object> initInterceptorInstanceMap(Iterable<? extends InterceptorMetadata<?>> interceptorMetadata, CreationalContext ctx, BeanManagerImpl manager) {
+    private static Map<Class<?>, Object> initInterceptorInstanceMap(InterceptionModel<?, ?> model, CreationalContext ctx, BeanManagerImpl manager, Set<InterceptionType> interceptionTypes) {
         Map<Class<?>, Object> interceptorInstances = new HashMap<Class<?>, Object>();
-        for (InterceptorMetadata<?> interceptor : interceptorMetadata) {
-            interceptorInstances.put(interceptor.getInterceptorClass().getJavaClass(), interceptor.getInterceptorFactory().create(ctx, manager));
+        for (InterceptorMetadata<?> interceptor : model.getAllInterceptors()) {
+            for (InterceptionType interceptionType : interceptionTypes) {
+                if (interceptor.isEligible(interceptionType)) {
+                    interceptorInstances.put(interceptor.getInterceptorClass().getJavaClass(), interceptor.getInterceptorFactory().create(ctx, manager));
+                }
+            }
         }
         return immutableMap(interceptorInstances);
     }
@@ -86,6 +112,6 @@ private Object readResolve() throws ObjectStreamException {
         InterceptionModel<ClassMetadata<?>, ?> interceptionModel = manager.getInterceptorModelRegistry().get(targetClass);
         MetadataCachingReader reader = manager.getInterceptorMetadataReader();
         TargetClassInterceptorMetadata<?> targetClassInterceptorMetadata = reader.getTargetClassInterceptorMetadata(reader.getClassMetadata(targetClass));
-        return new InterceptionContext(interceptorInstances, manager, targetClassInterceptorMetadata, interceptionModel, targetClass);
+        return new InterceptionContext(interceptorInstances, manager, targetClassInterceptorMetadata, interceptionModel);
     }
 }",2013-03-15T09:34:26Z,88
"@@ -63,4 +63,14 @@ public interface InterceptionModel<T, I> {
      */
     T getInterceptedEntity();
 
+    /**
+     * Indicates whether the given entity has associated {@link AroundConstruct} interceptors.
+     */
+    boolean hasConstructorInterceptors();
+
+    /**
+     * Indicates whether the given entity has an associated interceptor of a kind other than {@link AroundConstruct}
+     */
+    boolean hasNonConstructorInterceptors();
+
 }",2013-03-15T09:34:26Z,89
"@@ -115,7 +115,7 @@ private AnnotatedConstructor<?> getConstructor(AbstractClassBean<?> bean) {
             BasicInjectionTarget<?> weldTarget = (BasicInjectionTarget<?>) target;
             Instantiator<?> instantiator = weldTarget.getInstantiator();
             if (instantiator instanceof DefaultInstantiator<?>) {
-                return Reflections.<DefaultInstantiator<?>>cast(instantiator).getConstructor().getAnnotated();
+                return Reflections.<DefaultInstantiator<?>>cast(instantiator).getConstructorInjectionPoint().getAnnotated();
             }
         }
         throw new IllegalArgumentException(bean.toString());",2013-03-15T09:34:26Z,90
"@@ -55,6 +55,7 @@
 
    <properties>
       <osgi.version>1.0</osgi.version>
+      <parsedVersion.osgiVersion>${project.version}</parsedVersion.osgiVersion>
    </properties>
    <build>
       <plugins>",2011-07-19T09:27:13Z,10
"@@ -115,9 +115,11 @@
                         <Import-Package>
                             org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=""[${slf4j.version},$${version;=+;${slf4j.version}})""; resolution:=optional,
                             ch.qos.cal10n; version=${cal10n.version}; resolution:=optional,
-                            javax.interceptor.*, *; resolution:=optional,
+                            javax.interceptor.*; version=""1.0"",
                             javax.transaction; version=""1.1""; resolution:=optional,
-                            javax.annotation; version=1.1.99; resolution:=optional, 
+                            javax.annotation; resolution:=optional,
+                            javax.el; version=1.0; resolution:=optional, 
+                            *; resolution:=optional,
                         </Import-Package>
 
                         <Private-Package>",2013-08-22T12:26:27Z,10
"@@ -201,7 +201,7 @@ protected T applyDecorators(T instance, CreationalContext<T> creationalContext,
    {
       T proxy = null;
       TargetBeanInstance beanInstance = new TargetBeanInstance(this, instance);
-      ProxyFactory<T> proxyFactory = new ProxyFactory<T>(getType(), getTypes());
+      ProxyFactory<T> proxyFactory = new ProxyFactory<T>(getType(), getTypes(), this);
       DecorationHelper<T> decorationHelper = new DecorationHelper<T>(beanInstance, proxyFactory.getProxyClass(), beanManager, decorators);
 
       DecorationHelper.getHelperStack().push(decorationHelper);",2010-08-26T19:09:40Z,2
"@@ -141,7 +141,7 @@ protected void initDelegateInjectionPoint()
       this.delegateInjectionPoint = getDelegateInjectionPoints().iterator().next();
       if (getWeldAnnotated().isAbstract())
       {
-         Class<T> clazz = new DecoratorProxyFactory<T>(getWeldAnnotated().getJavaClass(), delegateInjectionPoint).getProxyClass();
+         Class<T> clazz = new DecoratorProxyFactory<T>(getWeldAnnotated().getJavaClass(), delegateInjectionPoint, this).getProxyClass();
          proxyClassForAbstractDecorators = beanManager.getServices().get(ClassTransformer.class).loadClass(clazz);
          constructorForAbstractDecorator = WeldConstructorImpl.of(
                proxyClassForAbstractDecorators.getDeclaredWeldConstructor(getConstructor().getSignature()),",2010-08-26T19:09:40Z,91
"@@ -591,7 +591,7 @@ protected T applyInterceptors(T instance, final CreationalContext<T> creationalC
             MethodHandler methodHandler = interceptorProxyCreator.createMethodHandler(instance, getType(), getBeanManager().getServices().get(InterceptionMetadataService.class).getInterceptorMetadataRegistry().getInterceptorClassMetadata(WeldClassReference.of(getWeldAnnotated()), true));
             TargetBeanInstance targetInstance = new TargetBeanInstance(this, instance);
             targetInstance.setInterceptorsHandler(methodHandler);
-            instance = new ProxyFactory<T>(getType(), getTypes()).create(targetInstance);
+            instance = new ProxyFactory<T>(getType(), getTypes(), this).create(targetInstance);
          }
 
       }",2010-08-26T19:09:40Z,92
"@@ -246,7 +246,7 @@ protected void initTypes()
 
    protected void initProxyClass()
    {
-      this.proxyClass = new EnterpriseProxyFactory<T>(getWeldAnnotated().getJavaClass(), getTypes()).getProxyClass();
+      this.proxyClass = new EnterpriseProxyFactory<T>(getWeldAnnotated().getJavaClass(), this).getProxyClass();
    }
 
    /**",2010-08-26T19:09:40Z,93
"@@ -43,7 +43,7 @@ protected AbstractEEBean(Class<T> type, Callable<T> callable, BeanManagerImpl be
       this.types = new HashSet<Type>();
       this.types.add(Object.class);
       this.types.add(type);
-      this.proxy = new ProxyFactory<T>(type, types).create(new EnterpriseTargetBeanInstance(type, new CallableMethodHandler(callable)));
+      this.proxy = new ProxyFactory<T>(type, types, this).create(new EnterpriseTargetBeanInstance(type, new CallableMethodHandler(callable)));
    }
 
    public T create(CreationalContext<T> creationalContext)",2010-08-26T19:09:40Z,94
"@@ -153,7 +153,7 @@ public T create(CreationalContext<T> creationalContext)
       else
       {
          BeanInstance proxyBeanInstance = new EnterpriseTargetBeanInstance(getTypes(), new CallableMethodHandler(new EEResourceCallable<T>(getBeanManager(), this, creationalContext)));
-         return new ProxyFactory<T>(getType(), getTypes()).create(proxyBeanInstance);
+         return new ProxyFactory<T>(getType(), getTypes(), this).create(proxyBeanInstance);
       }
    }
 ",2010-08-26T19:09:40Z,95
"@@ -86,7 +86,7 @@ private static <T> T createClientProxy(Bean<T> bean, String id) throws RuntimeEx
    {
       ContextBeanInstance<T> beanInstance = new ContextBeanInstance<T>(bean, id);
       TypeInfo typeInfo = TypeInfo.of(bean.getTypes());
-      return new ProxyFactory<T>(typeInfo.getSuperClass(), bean.getTypes()).create(beanInstance);
+      return new ProxyFactory<T>(typeInfo.getSuperClass(), bean.getTypes(), bean).create(beanInstance);
    }
 
    /**",2010-08-26T19:09:40Z,96
"@@ -30,6 +30,8 @@
 import javassist.bytecode.Opcode;
 import javassist.util.proxy.MethodHandler;
 
+import javax.enterprise.inject.spi.Bean;
+
 import org.jboss.interceptor.util.proxy.TargetInstanceProxy;
 import org.jboss.weld.exceptions.WeldException;
 import org.jboss.weld.injection.FieldInjectionPoint;
@@ -54,9 +56,9 @@ public class DecoratorProxyFactory<T> extends ProxyFactory<T>
    private final WeldInjectionPoint<?, ?> delegateInjectionPoint;
    private final Field delegateField;
 
-   public DecoratorProxyFactory(Class<T> proxyType, WeldInjectionPoint<?, ?> delegateInjectionPoint)
+   public DecoratorProxyFactory(Class<T> proxyType, WeldInjectionPoint<?, ?> delegateInjectionPoint, Bean<?> bean)
    {
-      super(proxyType, Collections.EMPTY_SET);
+      super(proxyType, Collections.EMPTY_SET, bean);
       this.delegateInjectionPoint = delegateInjectionPoint;
       if (delegateInjectionPoint instanceof FieldInjectionPoint<?, ?>)
       {",2010-08-26T19:09:40Z,97
"@@ -18,12 +18,12 @@
 package org.jboss.weld.bean.proxy;
 
 import java.lang.reflect.Method;
-import java.lang.reflect.Type;
-import java.util.Set;
 
 import javassist.bytecode.AccessFlag;
 import javassist.bytecode.ClassFile;
 
+import javax.enterprise.inject.spi.Bean;
+
 import org.jboss.weld.exceptions.WeldException;
 import org.jboss.weld.util.bytecode.MethodUtils;
 
@@ -41,9 +41,9 @@ public class EnterpriseProxyFactory<T> extends ProxyFactory<T>
     * 
     * @param proxiedBeanType the actual enterprise bean
     */
-   public EnterpriseProxyFactory(Class<T> proxiedBeanType, Set<Type> localBusinessInterfaces)
+   public EnterpriseProxyFactory(Class<T> proxiedBeanType, Bean<T> bean)
    {
-      super(proxiedBeanType, localBusinessInterfaces);
+      super(proxiedBeanType, bean.getTypes(), bean);
    }
 
    @Override",2010-08-26T19:09:40Z,98
"@@ -46,11 +46,14 @@
 import javassist.util.proxy.MethodHandler;
 import javassist.util.proxy.ProxyObject;
 
+import javax.enterprise.inject.spi.Bean;
+
 import org.jboss.interceptor.proxy.LifecycleMixin;
 import org.jboss.interceptor.util.proxy.TargetInstanceProxy;
 import org.jboss.weld.Container;
 import org.jboss.weld.exceptions.DefinitionException;
 import org.jboss.weld.exceptions.WeldException;
+import org.jboss.weld.serialization.spi.ContextualStore;
 import org.jboss.weld.serialization.spi.ProxyServices;
 import org.jboss.weld.util.Proxies.TypeInfo;
 import org.jboss.weld.util.bytecode.Boxing;
@@ -79,6 +82,7 @@ public class ProxyFactory<T>
    protected static final LocLogger log = loggerFactory().getLogger(BEAN);
    // Default proxy class name suffix
    public static final String PROXY_SUFFIX = ""Proxy"";
+   public static final String DEFAULT_PROXY_PACKAGE = ""org.jboss.weld.proxies"";
 
    private final Class<?> beanType;
    private final Set<Class<?>> additionalInterfaces = new HashSet<Class<?>>();
@@ -88,13 +92,30 @@ public class ProxyFactory<T>
    private static final String FIRST_SERIALIZATION_PHASE_COMPLETE_FIELD_NAME = ""firstSerializationPhaseComplete"";
 
    /**
-    * Creates a new proxy factory with only the type of proxy specified.
+    * created a new proxy factory from a bean instance. The proxy name is
+    * generated from the bean id
+    * 
+    * @param proxiedBeanType
+    * @param businessInterfaces
+    * @param bean
+    */
+   public ProxyFactory(Class<?> proxiedBeanType, Set<? extends Type> typeClosure, Bean<?> bean)
+   {
+      this(proxiedBeanType, typeClosure, getProxyName(proxiedBeanType, typeClosure, bean));
+   }
+
+   /**
+    * Creates a new proxy factory when the name of the proxy class is already
+    * known, such as during de-serialization
     * 
     * @param proxiedBeanType the super-class for this proxy class
+    * @param typeClosure the bean types of the bean
+    * @param the name of the proxy class
+    * 
     */
-   public ProxyFactory(Class<?> proxiedBeanType, Set<? extends Type> businessInterfaces)
+   public ProxyFactory(Class<?> proxiedBeanType, Set<? extends Type> typeClosure, String proxyName)
    {
-      for (Type type : businessInterfaces)
+      for (Type type : typeClosure)
       {
          Class<?> c = Reflections.getRawType(type);
          // Ignore no-interface views, they are dealt with proxiedBeanType
@@ -104,7 +125,7 @@ public ProxyFactory(Class<?> proxiedBeanType, Set<? extends Type> businessInterf
             addInterface(c);
          }
       }
-      TypeInfo typeInfo = TypeInfo.of(businessInterfaces);
+      TypeInfo typeInfo = TypeInfo.of(typeClosure);
       Class<?> superClass = typeInfo.getSuperClass();
       superClass = superClass == null ? Object.class : superClass;
       if (superClass.equals(Object.class))
@@ -122,6 +143,13 @@ public ProxyFactory(Class<?> proxiedBeanType, Set<? extends Type> businessInterf
       }
       this.beanType = superClass;
       addDefaultAdditionalInterfaces();
+      baseProxyName = proxyName;
+   }
+
+   private static String getProxyName(Class<?> proxiedBeanType, Set<? extends Type> typeClosure, Bean<?> bean)
+   {
+      TypeInfo typeInfo = TypeInfo.of(typeClosure);
+      String proxyPackage;
       if (proxiedBeanType.equals(Object.class))
       {
          Class<?> superInterface = typeInfo.getSuperInterface();
@@ -131,13 +159,16 @@ public ProxyFactory(Class<?> proxiedBeanType, Set<? extends Type> businessInterf
          }
          else
          {
-            baseProxyName = superInterface.getName();
+            proxyPackage=DEFAULT_PROXY_PACKAGE;
          }
       }
       else
       {
-         baseProxyName = proxiedBeanType.getName();
+         proxyPackage = proxiedBeanType.getPackage().getName();
       }
+      String beanId = Container.instance().services().get(ContextualStore.class).putIfAbsent(bean);
+      String className = beanId.replace('.', '$').replace(' ', '_');
+      return proxyPackage + '.' + className;
    }
 
    /**
@@ -207,7 +238,12 @@ public T create(BeanInstance beanInstance)
    @SuppressWarnings(""unchecked"")
    public Class<T> getProxyClass()
    {
-      String proxyClassName = getBaseProxyName() + ""_$$_Weld"" + getProxyNameSuffix();
+      String suffix = ""_$$_Weld"" + getProxyNameSuffix();
+      String proxyClassName = getBaseProxyName();
+      if (!proxyClassName.endsWith(suffix))
+      {
+         proxyClassName = proxyClassName + suffix;
+      }
       if (proxyClassName.startsWith(""java""))
       {
          proxyClassName = proxyClassName.replaceFirst(""java"", ""org.jboss.weld"");
@@ -538,7 +574,6 @@ protected void addMethodsFromClass(ClassFile proxyClassType)
       {
          // Add all methods from the class heirachy
          Class<?> cls = beanType;
-         Set<Class> interfaces = new HashSet<Class>();
          while (cls != null)
          {
             for (Method method : cls.getDeclaredMethods())",2010-08-26T19:09:40Z,1
"@@ -107,7 +107,7 @@ private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundE
       Class<?> proxyClass = null;
       if (proxyClassName.endsWith(ProxyFactory.PROXY_SUFFIX))
       {
-         proxyClass = generateClientProxyClass(proxyBeanType, proxyBeanInterfaces);
+         proxyClass = generateClientProxyClass(proxyBeanType, proxyBeanInterfaces, proxyClassName);
       }
       else
       {
@@ -151,8 +151,8 @@ Object writeReplace() throws ObjectStreamException
       return writeProxy ? proxyObject : this;
    }
 
-   private <T> Class<?> generateClientProxyClass(Class<T> beanType, Set<Type> interfaces)
+   private <T> Class<?> generateClientProxyClass(Class<T> beanType, Set<Type> interfaces, String proxyClassName)
    {
-      return new ProxyFactory<T>(beanType, interfaces).getProxyClass();
+      return new ProxyFactory<T>(beanType, interfaces, proxyClassName).getProxyClass();
    }
 }",2010-08-26T19:09:40Z,99
"@@ -336,6 +336,13 @@ protected void addSpecialMethods(ClassFile proxyClassType) {
         }
     }
 
+    @Override
+    protected void addInterfacesFromTypeClosure(Set<? extends Type> typeClosure, Class<?> proxiedBeanType) {
+        for (Class<?> c : proxiedBeanType.getInterfaces()) {
+            addInterface(c);
+        }
+    }
+
     private static Bytecode generateGetMethodHandlerBody(ClassFile file) {
         Bytecode b = new Bytecode(file.getConstPool(), 3, 2);
         b.add(Opcode.ALOAD_0);",2014-05-15T08:45:57Z,100
"@@ -120,14 +120,7 @@ public ProxyFactory(Class<?> proxiedBeanType, Set<? extends Type> typeClosure, B
     public ProxyFactory(Class<?> proxiedBeanType, Set<? extends Type> typeClosure, String proxyName, Bean<?> bean) {
         this.bean = bean;
         this.proxiedBeanType = proxiedBeanType;
-        for (Type type : typeClosure) {
-            Class<?> c = Reflections.getRawType(type);
-            // Ignore no-interface views, they are dealt with proxiedBeanType
-            // (pending redesign)
-            if (c.isInterface()) {
-                addInterface(c);
-            }
-        }
+        addInterfacesFromTypeClosure(typeClosure, proxiedBeanType);
         TypeInfo typeInfo = TypeInfo.of(typeClosure);
         Class<?> superClass = typeInfo.getSuperClass();
         superClass = superClass == null ? Object.class : superClass;
@@ -713,6 +706,17 @@ protected void addSpecialMethods(ClassFile proxyClassType) {
         }
     }
 
+    protected void addInterfacesFromTypeClosure(Set<? extends Type> typeClosure, Class<?> proxiedBeanType) {
+        for (Type type : typeClosure) {
+            Class<?> c = Reflections.getRawType(type);
+            // Ignore no-interface views, they are dealt with proxiedBeanType
+            // (pending redesign)
+            if (c.isInterface()) {
+                addInterface(c);
+            }
+        }
+    }
+
     private static Bytecode generateSetMethodHandlerBody(ClassFile file) {
         Bytecode b = new Bytecode(file.getConstPool(), 3, 2);
         b.add(Opcode.ALOAD_0);",2014-05-15T08:45:57Z,1
"@@ -0,0 +1,13 @@
+package org.jboss.weld.tests.interceptors.visibility;
+
+import org.jboss.weld.tests.interceptors.visibility.unreachable.AbstractPanel;
+
+@PanelInterceptionBinding
+public class MyPanel extends AbstractPanel {
+
+    @Override
+    public String drawPanel() {
+        return ""implemented"";
+    }
+
+}",2014-05-15T08:45:57Z,101
"@@ -0,0 +1,14 @@
+package org.jboss.weld.tests.interceptors.visibility;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+import javax.interceptor.InterceptorBinding;
+
+@InterceptorBinding
+@Target({ ElementType.METHOD, ElementType.TYPE })
+@Retention(RetentionPolicy.RUNTIME)
+public @interface PanelInterceptionBinding {
+}",2014-05-15T08:45:57Z,102
"@@ -0,0 +1,19 @@
+package org.jboss.weld.tests.interceptors.visibility;
+
+import javax.interceptor.AroundInvoke;
+import javax.interceptor.Interceptor;
+import javax.interceptor.InvocationContext;
+
+@PanelInterceptionBinding
+@Interceptor
+public class PanelInterceptor {
+
+    public static boolean called = false;
+
+    @AroundInvoke
+    public Object intercept(InvocationContext ctx) throws Exception {
+        called = true;
+        return ctx.proceed();
+    }
+
+}",2014-05-15T08:45:57Z,103
"@@ -0,0 +1,36 @@
+package org.jboss.weld.tests.interceptors.visibility;
+
+import static org.junit.Assert.assertTrue;
+
+import javax.inject.Inject;
+
+import org.jboss.arquillian.container.test.api.Deployment;
+import org.jboss.arquillian.junit.Arquillian;
+import org.jboss.shrinkwrap.api.Archive;
+import org.jboss.shrinkwrap.api.BeanArchive;
+import org.jboss.shrinkwrap.api.ShrinkWrap;
+import org.jboss.weld.tests.interceptors.visibility.unreachable.AbstractPanel;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+@RunWith(Arquillian.class)
+public class UnreachableInterceptedInterfaceTest {
+
+    @Deployment
+    public static Archive<?> deploy() {
+        return ShrinkWrap.create(BeanArchive.class).intercept(PanelInterceptor.class)
+                .addPackage(UnreachableInterceptedInterfaceTest.class.getPackage())
+                .addPackage(AbstractPanel.class.getPackage());
+    }
+
+    @Inject
+    MyPanel panel;
+
+    @Test
+    public void testInterceptorInvoked() {
+        PanelInterceptor.called = false;
+        panel.drawPanel();
+        assertTrue(PanelInterceptor.called);
+    }
+
+}
\ No newline at end of file",2014-05-15T08:45:57Z,104
"@@ -0,0 +1,5 @@
+package org.jboss.weld.tests.interceptors.visibility.unreachable;
+
+public class AbstractPanel extends AbstractPanel2 {
+
+}",2014-05-15T08:45:57Z,105
"@@ -0,0 +1,10 @@
+package org.jboss.weld.tests.interceptors.visibility.unreachable;
+
+public abstract class AbstractPanel2 implements MyPackagePrivateInterface {
+
+    @Override
+    public String drawPanel() {
+        return null;
+    }
+
+}",2014-05-15T08:45:57Z,106
"@@ -0,0 +1,6 @@
+package org.jboss.weld.tests.interceptors.visibility.unreachable;
+
+interface MyPackagePrivateInterface {
+
+    public String drawPanel();
+}
\ No newline at end of file",2014-05-15T08:45:57Z,107
"@@ -16,8 +16,9 @@
  */
 package org.jboss.weld.bean;
 
-import com.google.common.base.Function;
-import com.google.common.collect.MapMaker;
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
 import org.jboss.weld.Container;
 import org.jboss.weld.bootstrap.BeanDeployerEnvironment;
 import org.jboss.weld.bootstrap.api.ServiceRegistry;
@@ -35,7 +36,6 @@
 import javax.enterprise.context.Dependent;
 import javax.enterprise.context.NormalScope;
 import javax.enterprise.context.spi.CreationalContext;
-import javax.enterprise.inject.Instance;
 import javax.enterprise.inject.Produces;
 import javax.enterprise.inject.spi.InjectionPoint;
 import javax.enterprise.inject.spi.Producer;
@@ -52,7 +52,6 @@
 import java.lang.reflect.WildcardType;
 import java.util.HashSet;
 import java.util.Set;
-import java.util.concurrent.ConcurrentMap;
 
 import static org.jboss.weld.logging.Category.BEAN;
 import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
@@ -69,6 +68,7 @@
 import static org.jboss.weld.logging.messages.BeanMessage.RETURN_TYPE_MUST_BE_CONCRETE;
 import static org.jboss.weld.logging.messages.BeanMessage.USING_DEFAULT_SCOPE;
 import static org.jboss.weld.logging.messages.BeanMessage.USING_SCOPE;
+import static org.jboss.weld.util.cache.LoadingCacheUtils.getCacheValue;
 import static org.jboss.weld.util.reflection.Reflections.cast;
 
 /**
@@ -83,9 +83,9 @@
  */
 public abstract class AbstractProducerBean<X, T, S extends Member> extends AbstractReceiverBean<X, T, S> {
 
-    private static final Function<Class<?>, Boolean> SERIALIZABLE_CHECK = new Function<Class<?>, Boolean>() {
+    private static final CacheLoader<Class<?>, Boolean> SERIALIZABLE_CHECK = new CacheLoader<Class<?>, Boolean>() {
 
-        public Boolean apply(Class<?> from) {
+        public Boolean load(Class<?> from) {
             return Reflections.isSerializable(from);
         }
 
@@ -102,7 +102,7 @@ public Boolean apply(Class<?> from) {
     private boolean passivationCapableDependency;
 
     // Serialization cache for produced types at runtime
-    private ConcurrentMap<Class<?>, Boolean> serializationCheckCache;
+    private LoadingCache<Class<?>, Boolean> serializationCheckCache;
 
     /**
      * Constructor
@@ -112,7 +112,7 @@ public Boolean apply(Class<?> from) {
      */
     public AbstractProducerBean(String idSuffix, AbstractClassBean<X> declaringBean, BeanManagerImpl beanManager, ServiceRegistry services) {
         super(idSuffix, declaringBean, beanManager, services);
-        serializationCheckCache = new MapMaker().makeComputingMap(SERIALIZABLE_CHECK);
+        serializationCheckCache = CacheBuilder.newBuilder().build(SERIALIZABLE_CHECK);
     }
 
     @Override
@@ -259,7 +259,7 @@ protected void checkType() {
     }
 
     protected boolean isTypeSerializable(final Class<?> clazz) {
-        return serializationCheckCache.get(clazz);
+        return getCacheValue(serializationCheckCache, clazz);
     }
 
     @Override",2013-07-04T09:25:04Z,15
"@@ -16,23 +16,23 @@
  */
 package org.jboss.weld.bean.proxy;
 
-import com.google.common.base.Function;
-import com.google.common.collect.MapMaker;
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
 import org.jboss.weld.Container;
 import org.jboss.weld.exceptions.DefinitionException;
 import org.jboss.weld.serialization.spi.ContextualStore;
 import org.jboss.weld.util.Proxies.TypeInfo;
-import org.jboss.weld.util.reflection.Reflections;
 import org.slf4j.cal10n.LocLogger;
 
 import javax.enterprise.inject.spi.Bean;
-import java.util.concurrent.ConcurrentMap;
 
 import static org.jboss.weld.logging.Category.BEAN;
 import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
 import static org.jboss.weld.logging.messages.BeanMessage.BEAN_ID_CREATION_FAILED;
 import static org.jboss.weld.logging.messages.BeanMessage.CREATED_NEW_CLIENT_PROXY_TYPE;
 import static org.jboss.weld.logging.messages.BeanMessage.LOOKED_UP_CLIENT_PROXY;
+import static org.jboss.weld.util.cache.LoadingCacheUtils.getCastCacheValue;
 
 /**
  * A proxy pool for holding scope adaptors (client proxies)
@@ -43,9 +43,9 @@
 public class ClientProxyProvider {
     private static final LocLogger log = loggerFactory().getLogger(BEAN);
 
-    private static final Function<Bean<Object>, Object> CREATE_CLIENT_PROXY = new Function<Bean<Object>, Object>() {
+    private static final CacheLoader<Bean<Object>, Object> CREATE_CLIENT_PROXY = new CacheLoader<Bean<Object>, Object>() {
 
-        public Object apply(Bean<Object> from) {
+        public Object load(Bean<Object> from) {
             String id = Container.instance().services().get(ContextualStore.class).putIfAbsent(from);
             if (id == null) {
                 throw new DefinitionException(BEAN_ID_CREATION_FAILED, from);
@@ -59,13 +59,13 @@ public Object apply(Bean<Object> from) {
      *
      * @author Nicklas Karlsson
      */
-    private final ConcurrentMap<Bean<Object>, Object> pool;
+    private final LoadingCache<Bean<Object>, Object> pool;
 
     /**
      * Constructor
      */
     public ClientProxyProvider() {
-        this.pool = new MapMaker().makeComputingMap(CREATE_CLIENT_PROXY);
+        this.pool = CacheBuilder.newBuilder().build(CREATE_CLIENT_PROXY);
     }
 
     /**
@@ -99,7 +99,7 @@ private static <T> T createClientProxy(Bean<T> bean, String id) throws RuntimeEx
      * @return the client proxy for the bean
      */
     public <T> T getClientProxy(final Bean<T> bean) {
-        T proxy = Reflections.<T>cast(pool.get(bean));
+        T proxy = getCastCacheValue(pool, bean);
         log.trace(LOOKED_UP_CLIENT_PROXY, proxy.getClass(), bean);
         return proxy;
     }
@@ -115,7 +115,7 @@ public String toString() {
     }
 
     public void clear() {
-        this.pool.clear();
+        this.pool.invalidateAll();
     }
 
 }",2013-07-04T09:25:04Z,96
"@@ -1,10 +1,12 @@
 package org.jboss.weld.interceptor.reader.cache;
 
-import java.util.concurrent.ConcurrentMap;
+import static org.jboss.weld.util.cache.LoadingCacheUtils.getCacheValue;
+import static org.jboss.weld.util.cache.LoadingCacheUtils.getCastCacheValue;
 
-import com.google.common.base.Function;
-import com.google.common.collect.ComputationException;
-import com.google.common.collect.MapMaker;
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
+import com.google.common.util.concurrent.UncheckedExecutionException;
 import org.jboss.weld.interceptor.reader.ClassMetadataInterceptorReference;
 import org.jboss.weld.interceptor.reader.InterceptorMetadataUtils;
 import org.jboss.weld.interceptor.reader.ReflectiveClassMetadata;
@@ -16,29 +18,29 @@
  *
  */
 public class DefaultMetadataCachingReader implements MetadataCachingReader {
-    private final ConcurrentMap<InterceptorReference<?>, InterceptorMetadata<?>> interceptorMetadataCache;
+    private final LoadingCache<InterceptorReference<?>, InterceptorMetadata<?>> interceptorMetadataCache;
 
-    private final ConcurrentMap<ClassMetadata<?>, InterceptorMetadata<?>> classMetadataInterceptorMetadataCache;
+    private final LoadingCache<ClassMetadata<?>, InterceptorMetadata<?>> classMetadataInterceptorMetadataCache;
 
-    private final ConcurrentMap<Class<?>, ClassMetadata<?>> reflectiveClassMetadataCache;
+    private final LoadingCache<Class<?>, ClassMetadata<?>> reflectiveClassMetadataCache;
 
     private boolean unwrapRuntimeExceptions;
 
     public DefaultMetadataCachingReader() {
-        this.interceptorMetadataCache = new MapMaker().makeComputingMap(new Function<InterceptorReference<?>, InterceptorMetadata<?>>() {
-            public InterceptorMetadata<?> apply(InterceptorReference<?> from) {
+        this.interceptorMetadataCache = CacheBuilder.newBuilder().build(new CacheLoader<InterceptorReference<?>, InterceptorMetadata<?>>() {
+            public InterceptorMetadata<?> load(InterceptorReference<?> from) {
                 return InterceptorMetadataUtils.readMetadataForInterceptorClass(from);
             }
         });
 
-        this.classMetadataInterceptorMetadataCache = new MapMaker().makeComputingMap(new Function<ClassMetadata<?>, InterceptorMetadata<?>>() {
-            public InterceptorMetadata<?> apply(ClassMetadata<?> from) {
+        this.classMetadataInterceptorMetadataCache = CacheBuilder.newBuilder().build(new CacheLoader<ClassMetadata<?>, InterceptorMetadata<?>>() {
+            public InterceptorMetadata<?> load(ClassMetadata<?> from) {
                 return InterceptorMetadataUtils.readMetadataForTargetClass(from);
             }
         });
 
-        this.reflectiveClassMetadataCache = new MapMaker().makeComputingMap(new Function<Class<?>, ClassMetadata<?>>() {
-            public ClassMetadata<?> apply(Class<?> from) {
+        this.reflectiveClassMetadataCache = CacheBuilder.newBuilder().build(new CacheLoader<Class<?>, ClassMetadata<?>>() {
+            public ClassMetadata<?> load(Class<?> from) {
                 return ReflectiveClassMetadata.of(from);
             }
         });
@@ -51,8 +53,8 @@ public void setUnwrapRuntimeExceptions(boolean unwrapRuntimeExceptions) {
 
     public <T> InterceptorMetadata<T> getInterceptorMetadata(InterceptorReference<T> interceptorReference) {
         try {
-            return (InterceptorMetadata<T>) interceptorMetadataCache.get(interceptorReference);
-        } catch (ComputationException e) {
+            return getCastCacheValue(interceptorMetadataCache, interceptorReference);
+        } catch (UncheckedExecutionException e) {
             if (unwrapRuntimeExceptions && e.getCause() instanceof RuntimeException) {
                 throw (RuntimeException) e.getCause();
             }
@@ -62,8 +64,8 @@ public <T> InterceptorMetadata<T> getInterceptorMetadata(InterceptorReference<T>
 
     public <T> InterceptorMetadata<T> getTargetClassInterceptorMetadata(ClassMetadata<T> classMetadata) {
         try {
-            return (InterceptorMetadata<T>) classMetadataInterceptorMetadataCache.get(classMetadata);
-        } catch (ComputationException e) {
+            return getCastCacheValue(classMetadataInterceptorMetadataCache, classMetadata);
+        } catch (UncheckedExecutionException e) {
             if (unwrapRuntimeExceptions && e.getCause() instanceof RuntimeException) {
                 throw (RuntimeException) e.getCause();
             }
@@ -73,8 +75,8 @@ public <T> InterceptorMetadata<T> getTargetClassInterceptorMetadata(ClassMetadat
 
     public <T> InterceptorMetadata<T> getInterceptorMetadata(Class<T> clazz) {
         try {
-            return (InterceptorMetadata<T>) interceptorMetadataCache.get(ClassMetadataInterceptorReference.of(reflectiveClassMetadataCache.get(clazz)));
-        } catch (ComputationException e) {
+            return getCastCacheValue(interceptorMetadataCache, ClassMetadataInterceptorReference.of(getCacheValue(reflectiveClassMetadataCache, clazz)));
+        } catch (UncheckedExecutionException e) {
             if (unwrapRuntimeExceptions && e.getCause() instanceof RuntimeException) {
                 throw (RuntimeException) e.getCause();
             }
@@ -84,8 +86,8 @@ public <T> InterceptorMetadata<T> getInterceptorMetadata(Class<T> clazz) {
 
     public <T> ClassMetadata<T> getClassMetadata(Class<T> clazz) {
         try {
-            return (ClassMetadata<T>) reflectiveClassMetadataCache.get(clazz);
-        } catch (ComputationException e) {
+            return getCastCacheValue(reflectiveClassMetadataCache, clazz);
+        } catch (UncheckedExecutionException e) {
             if (unwrapRuntimeExceptions && e.getCause() instanceof RuntimeException) {
                 throw (RuntimeException) e.getCause();
             }",2013-07-04T09:25:04Z,108
"@@ -16,27 +16,29 @@
  */
 package org.jboss.weld.logging;
 
+import static org.jboss.weld.util.cache.LoadingCacheUtils.getCacheValue;
+
 import ch.qos.cal10n.MessageConveyor;
 import ch.qos.cal10n.MessageConveyorException;
-import com.google.common.base.Function;
-import com.google.common.collect.MapMaker;
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
 import org.jboss.weld.util.reflection.SecureReflections;
 
 import java.lang.reflect.Field;
 import java.util.Locale;
-import java.util.concurrent.ConcurrentMap;
 
 public class WeldMessageConveyor extends MessageConveyor {
 
-    private static class ComputeMessagePrefix implements Function<Enum<?>, String> {
+    private static class ComputeMessagePrefix extends CacheLoader<Enum<?>, String> {
 
         private final String subsystem;
 
         private ComputeMessagePrefix(String subsystem) {
             this.subsystem = subsystem;
         }
 
-        public String apply(Enum<?> from) {
+        public String load(Enum<?> from) {
             Field field;
             try {
                 field = SecureReflections.getField(from.getClass(), from.name());
@@ -54,11 +56,11 @@ public String apply(Enum<?> from) {
 
     private static final String SEPARATOR = ""-"";
 
-    private final ConcurrentMap<Enum<?>, String> messagePrefixCache;
+    private final LoadingCache<Enum<?>, String> messagePrefixCache;
 
     public WeldMessageConveyor(Locale locale, String subsystem) {
         super(locale);
-        this.messagePrefixCache = new MapMaker().makeComputingMap(new ComputeMessagePrefix(subsystem));
+        this.messagePrefixCache = CacheBuilder.newBuilder().build(new ComputeMessagePrefix(subsystem));
     }
 
     @Override
@@ -67,7 +69,7 @@ public <E extends Enum<?>> String getMessage(E key, Object... args) throws Messa
     }
 
     private <E extends Enum<?>> String getMessagePrefix(final E key) {
-        return messagePrefixCache.get(key);
+        return getCacheValue(messagePrefixCache, key);
     }
 
 }",2013-07-04T09:25:04Z,109
"@@ -64,6 +64,7 @@ public enum UtilMessage {
     @MessageId(""000827"")COULD_NOT_READ_SERVICES_LIST,
     @MessageId(""000828"")COULD_NOT_READ_SERVICES_FILE,
     @MessageId(""000829"")EXTENSION_CLASS_NOT_FOUND,
-    @MessageId(""000829"")CLASS_LOADING_ERROR;
+    @MessageId(""000829"")CLASS_LOADING_ERROR,
+    @MessageId(""000830"")UNABLE_TO_LOAD_CACHE_VALUE,
 
 }",2013-07-04T09:25:04Z,110
"@@ -16,19 +16,19 @@
  */
 package org.jboss.weld.metadata.cache;
 
-import com.google.common.base.Function;
-import com.google.common.collect.ComputationException;
-import com.google.common.collect.MapMaker;
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
+import com.google.common.util.concurrent.UncheckedExecutionException;
 import org.jboss.weld.bootstrap.api.Service;
 import org.jboss.weld.exceptions.DefinitionException;
 import org.jboss.weld.exceptions.DeploymentException;
 import org.jboss.weld.exceptions.WeldException;
 import org.jboss.weld.resources.ClassTransformer;
 
 import java.lang.annotation.Annotation;
-import java.util.concurrent.ConcurrentMap;
 
-import static org.jboss.weld.util.reflection.Reflections.cast;
+import static org.jboss.weld.util.cache.LoadingCacheUtils.getCastCacheValue;
 
 /**
  * Metadata singleton for holding EJB metadata, scope models etc.
@@ -37,7 +37,7 @@
  */
 public class MetaAnnotationStore implements Service {
 
-    private abstract static class AbstractMetaAnnotationFunction<M extends AnnotationModel<Annotation>> implements Function<Class<Annotation>, M> {
+    private abstract static class AbstractMetaAnnotationFunction<M extends AnnotationModel<Annotation>> extends CacheLoader<Class<Annotation>, M> {
 
         private final ClassTransformer classTransformer;
 
@@ -57,7 +57,7 @@ public StereotypeFunction(ClassTransformer classTransformer) {
             super(classTransformer);
         }
 
-        public StereotypeModel<Annotation> apply(Class<Annotation> from) {
+        public StereotypeModel<Annotation> load(Class<Annotation> from) {
             return new StereotypeModel<Annotation>(from, getClassTransformer());
         }
 
@@ -69,7 +69,7 @@ public ScopeFunction(ClassTransformer classTransformer) {
             super(classTransformer);
         }
 
-        public ScopeModel<Annotation> apply(Class<Annotation> from) {
+        public ScopeModel<Annotation> load(Class<Annotation> from) {
             return new ScopeModel<Annotation>(from, getClassTransformer());
         }
 
@@ -81,7 +81,7 @@ public QualifierFunction(ClassTransformer classTransformer) {
             super(classTransformer);
         }
 
-        public QualifierModel<Annotation> apply(Class<Annotation> from) {
+        public QualifierModel<Annotation> load(Class<Annotation> from) {
             return new QualifierModel<Annotation>(from, getClassTransformer());
         }
 
@@ -93,38 +93,38 @@ public InterceptorBindingFunction(ClassTransformer classTransformer) {
             super(classTransformer);
         }
 
-        public InterceptorBindingModel<Annotation> apply(Class<Annotation> from) {
+        public InterceptorBindingModel<Annotation> load(Class<Annotation> from) {
             return new InterceptorBindingModel<Annotation>(from, getClassTransformer());
         }
 
     }
 
     // The stereotype models
-    private ConcurrentMap<Class<Annotation>, StereotypeModel<Annotation>> stereotypes;
+    private LoadingCache<Class<Annotation>, StereotypeModel<Annotation>> stereotypes;
     // The scope models
-    private ConcurrentMap<Class<Annotation>, ScopeModel<Annotation>> scopes;
+    private LoadingCache<Class<Annotation>, ScopeModel<Annotation>> scopes;
     // The binding type models
-    private ConcurrentMap<Class<Annotation>, QualifierModel<Annotation>> qualifiers;
+    private LoadingCache<Class<Annotation>, QualifierModel<Annotation>> qualifiers;
     // the interceptor bindings
-    private ConcurrentMap<Class<Annotation>, InterceptorBindingModel<Annotation>> interceptorBindings;
+    private LoadingCache<Class<Annotation>, InterceptorBindingModel<Annotation>> interceptorBindings;
 
     public MetaAnnotationStore(ClassTransformer classTransformer) {
-        MapMaker mapMaker = new MapMaker();
-        this.stereotypes = mapMaker.makeComputingMap(new StereotypeFunction(classTransformer));
-        this.scopes = mapMaker.makeComputingMap(new ScopeFunction(classTransformer));
-        this.qualifiers = mapMaker.makeComputingMap(new QualifierFunction(classTransformer));
-        this.interceptorBindings = mapMaker.makeComputingMap(new InterceptorBindingFunction(classTransformer));
+        CacheBuilder<Object, Object> builder = CacheBuilder.newBuilder();
+        this.stereotypes = builder.build(new StereotypeFunction(classTransformer));
+        this.scopes = builder.build(new ScopeFunction(classTransformer));
+        this.qualifiers = builder.build(new QualifierFunction(classTransformer));
+        this.interceptorBindings = builder.build(new InterceptorBindingFunction(classTransformer));
     }
 
     /**
      * removes all data for an annotation class. This should be called after an
      * annotation has been modified through the SPI
      */
     public void clearAnnotationData(Class<? extends Annotation> annotationClass) {
-        stereotypes.remove(annotationClass);
-        scopes.remove(annotationClass);
-        qualifiers.remove(annotationClass);
-        interceptorBindings.remove(annotationClass);
+        stereotypes.invalidate(annotationClass);
+        scopes.invalidate(annotationClass);
+        qualifiers.invalidate(annotationClass);
+        interceptorBindings.invalidate(annotationClass);
     }
 
     /**
@@ -137,7 +137,7 @@ public void clearAnnotationData(Class<? extends Annotation> annotationClass) {
      * @return The stereotype model
      */
     public <T extends Annotation> StereotypeModel<T> getStereotype(final Class<T> stereotype) {
-        return cast(stereotypes.get(stereotype));
+        return getCastCacheValue(stereotypes, stereotype);
     }
 
     /**
@@ -150,7 +150,7 @@ public <T extends Annotation> StereotypeModel<T> getStereotype(final Class<T> st
      * @return The scope type model
      */
     public <T extends Annotation> ScopeModel<T> getScopeModel(final Class<T> scope) {
-        return cast(scopes.get(scope));
+        return getCastCacheValue(scopes, scope);
     }
 
     /**
@@ -163,7 +163,7 @@ public <T extends Annotation> ScopeModel<T> getScopeModel(final Class<T> scope)
      * @return The binding type model
      */
     public <T extends Annotation> QualifierModel<T> getBindingTypeModel(final Class<T> bindingType) {
-        return cast(qualifiers.get(bindingType));
+        return getCastCacheValue(qualifiers, bindingType);
     }
 
     /**
@@ -183,20 +183,21 @@ public String toString() {
     }
 
     public void cleanup() {
-        this.qualifiers.clear();
-        this.scopes.clear();
-        this.stereotypes.clear();
-        this.interceptorBindings.clear();
+        this.qualifiers.invalidateAll();
+        this.scopes.invalidateAll();
+        this.stereotypes.invalidateAll();
+        this.interceptorBindings.invalidateAll();
     }
 
     public <T extends Annotation> InterceptorBindingModel<T> getInterceptorBindingModel(final Class<T> interceptorBinding) {
         // Unwrap Definition/Deployment exceptions wrapped in a ComputationException
         // TODO: generalize this and move to a higher level (MBG)
         try {
-            return cast(interceptorBindings.get(interceptorBinding));
-        } catch (ComputationException e) {
-            if (e.getCause() instanceof DeploymentException || e.getCause() instanceof DefinitionException) {
-                throw (WeldException) e.getCause();
+            return getCastCacheValue(interceptorBindings, interceptorBinding);
+        } catch (UncheckedExecutionException e) {
+            Throwable cause = e.getCause();
+            if (cause instanceof DeploymentException || cause instanceof DefinitionException) {
+                throw (WeldException) cause;
             } else {
                 throw e;
             }",2013-07-04T09:25:04Z,111
"@@ -16,15 +16,17 @@
  */
 package org.jboss.weld.resolution;
 
+import static org.jboss.weld.util.cache.LoadingCacheUtils.getCacheValue;
+
 import java.util.HashSet;
 import java.util.Set;
-import java.util.concurrent.ConcurrentMap;
 
 import javax.enterprise.inject.spi.Bean;
 
-import com.google.common.base.Function;
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
 import com.google.common.collect.ImmutableSet;
-import com.google.common.collect.MapMaker;
 import org.jboss.weld.manager.BeanManagerImpl;
 import org.jboss.weld.util.Beans;
 
@@ -35,7 +37,7 @@
  */
 public class NameBasedResolver {
 
-    private static class NameToBeanSet implements Function<String, Set<Bean<?>>> {
+    private static class NameToBeanSet extends CacheLoader<String, Set<Bean<?>>> {
 
         private final BeanManagerImpl beanManager;
         private final Iterable<? extends Bean<?>> allBeans;
@@ -45,7 +47,7 @@ private NameToBeanSet(BeanManagerImpl beanManager, Iterable<? extends Bean<?>> a
             this.allBeans = allBeans;
         }
 
-        public Set<Bean<?>> apply(String from) {
+        public Set<Bean<?>> load(String from) {
             Set<Bean<?>> matchedBeans = new HashSet<Bean<?>>();
             for (Bean<?> bean : allBeans) {
                 if ((bean.getName() == null && from == null) || (bean.getName() != null && bean.getName().equals(from))) {
@@ -59,21 +61,21 @@ public Set<Bean<?>> apply(String from) {
     }
 
     // The resolved names
-    private ConcurrentMap<String, Set<Bean<?>>> resolvedNames;
+    private LoadingCache<String, Set<Bean<?>>> resolvedNames;
 
     /**
      * Constructor
      */
     public NameBasedResolver(BeanManagerImpl manager, Iterable<? extends Bean<?>> allBeans) {
-        this.resolvedNames = new MapMaker().makeComputingMap(new NameToBeanSet(manager, allBeans));
+        this.resolvedNames = CacheBuilder.newBuilder().build(new NameToBeanSet(manager, allBeans));
     }
 
     /**
      * Reset all cached injection points. You must reset all cached injection
      * points when you add a bean to the manager
      */
     public void clear() {
-        this.resolvedNames.clear();
+        this.resolvedNames.invalidateAll();
     }
 
     /**
@@ -83,7 +85,7 @@ public void clear() {
      * @return The set of matching beans
      */
     public Set<Bean<?>> resolve(final String name) {
-        return resolvedNames.get(name);
+        return getCacheValue(resolvedNames, name);
     }
 
     /**",2013-07-04T09:25:04Z,112
"@@ -16,6 +16,8 @@
  */
 package org.jboss.weld.resolution;
 
+import static org.jboss.weld.util.cache.LoadingCacheUtils.getCastCacheValue;
+
 import java.io.Serializable;
 import java.lang.reflect.GenericArrayType;
 import java.lang.reflect.ParameterizedType;
@@ -28,42 +30,40 @@
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
-import java.util.concurrent.ConcurrentMap;
 
 import javax.enterprise.event.Event;
 import javax.enterprise.inject.Instance;
 import javax.enterprise.inject.spi.Bean;
 import javax.inject.Provider;
 
-import com.google.common.base.Function;
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
 import com.google.common.collect.ImmutableSet;
-import com.google.common.collect.MapMaker;
 import com.google.common.primitives.Primitives;
 import org.jboss.weld.manager.BeanManagerImpl;
 import org.jboss.weld.util.Beans;
 import org.jboss.weld.util.LazyValueHolder;
 import org.jboss.weld.util.reflection.Reflections;
 
-import static org.jboss.weld.util.reflection.Reflections.cast;
-
 /**
  * @author pmuir
  * @author alesj
  */
 public class TypeSafeBeanResolver<T extends Bean<?>> extends TypeSafeResolver<Resolvable, T> {
 
     private final BeanManagerImpl beanManager;
-    private final ConcurrentMap<Set<Bean<?>>, Set<Bean<?>>> disambiguatedBeans;
+    private final LoadingCache<Set<Bean<?>>, Set<Bean<?>>> disambiguatedBeans;
 
     private final LazyValueHolder<Map<Type, ArrayList<T>>> beansByType;
 
-    public static class BeanDisambiguation implements Function<Set<Bean<?>>, Set<Bean<?>>> {
+    public static class BeanDisambiguation extends CacheLoader<Set<Bean<?>>, Set<Bean<?>>> {
 
         private BeanDisambiguation() {
         }
 
         @SuppressWarnings(""unchecked"")
-        public Set<Bean<?>> apply(Set<Bean<?>> from) {
+        public Set<Bean<?>> load(Set<Bean<?>> from) {
             if (from.size() > 1) {
                 Set<Bean<?>> allBeans = new HashSet<Bean<?>>();
                 Set<Bean<?>> alternativeBeans = new HashSet<Bean<?>>();
@@ -88,7 +88,7 @@ public Set<Bean<?>> apply(Set<Bean<?>> from) {
     public TypeSafeBeanResolver(BeanManagerImpl beanManager, final Iterable<T> beans) {
         super(beans, beanManager);
         this.beanManager = beanManager;
-        this.disambiguatedBeans = new MapMaker().makeComputingMap(new BeanDisambiguation());
+        this.disambiguatedBeans = CacheBuilder.newBuilder().build(new BeanDisambiguation());
         // beansByType stores a map of a type to all beans that are assignable to
         // that type. This means that it most cases we do not need to loop through
         // every bean in the system when performing resolution
@@ -213,13 +213,13 @@ public <X> Set<Bean<? extends X>> resolve(Set<Bean<? extends X>> beans) {
         //noinspection unchecked
         beans = ImmutableSet.copyOf((Iterable) beans);
         //noinspection SuspiciousMethodCalls
-        return cast(disambiguatedBeans.get(beans));
+        return getCastCacheValue(disambiguatedBeans, beans);
     }
 
     @Override
     public void clear() {
         super.clear();
-        this.disambiguatedBeans.clear();
+        this.disambiguatedBeans.invalidateAll();
         this.beansByType.clear();
     }
 }",2013-07-04T09:25:04Z,113
"@@ -16,21 +16,16 @@
  */
 package org.jboss.weld.resolution;
 
-import com.google.common.base.Function;
+import static org.jboss.weld.util.cache.LoadingCacheUtils.getCacheValue;
+
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
 import com.google.common.collect.ImmutableSet;
-import com.google.common.collect.MapMaker;
-import org.jboss.weld.bean.RIBean;
 import org.jboss.weld.manager.BeanManagerImpl;
-import org.jboss.weld.metadata.cache.MetaAnnotationStore;
 
-import java.lang.annotation.Annotation;
-import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
-import java.util.concurrent.ConcurrentMap;
-
-import javax.enterprise.inject.spi.Bean;
-import javax.enterprise.inject.spi.BeanManager;
 
 /**
  * Implementation of type safe bean resolution
@@ -41,22 +36,22 @@
  */
 public abstract class TypeSafeResolver<R extends Resolvable, T> {
 
-    private static class ResolvableToBeanSet<R extends Resolvable, T> implements Function<R, Set<T>> {
+    private static class ResolvableToBeanSet<R extends Resolvable, T> extends CacheLoader<R, Set<T>> {
 
         private final TypeSafeResolver<R, T> resolver;
 
         private ResolvableToBeanSet(TypeSafeResolver<R, T> resolver) {
             this.resolver = resolver;
         }
 
-        public Set<T> apply(R from) {
+        public Set<T> load(R from) {
             return resolver.sortResult(resolver.filterResult(resolver.findMatching(from)));
         }
 
     }
 
     // The resolved injection points
-    private final ConcurrentMap<R, Set<T>> resolved;
+    private final LoadingCache<R, Set<T>> resolved;
     // The beans to search
     private final Iterable<? extends T> allBeans;
     private final ResolvableToBeanSet<R, T> resolverFunction;
@@ -69,15 +64,15 @@ public Set<T> apply(R from) {
     public TypeSafeResolver(Iterable<? extends T> allBeans, final BeanManagerImpl beanManager) {
         this.beanManager = beanManager;
         this.resolverFunction = new ResolvableToBeanSet<R, T>(this);
-        this.resolved = new MapMaker().makeComputingMap(resolverFunction);
+        this.resolved = CacheBuilder.newBuilder().build(resolverFunction);
         this.allBeans = allBeans;
     }
 
     /**
      * Reset all cached resolutions
      */
     public void clear() {
-        this.resolved.clear();
+        this.resolved.invalidateAll();
     }
 
     /**
@@ -89,9 +84,9 @@ public void clear() {
     public Set<T> resolve(R resolvable, boolean cache) {
         R wrappedResolvable = wrap(resolvable);
         if (cache) {
-            return resolved.get(wrappedResolvable);
+            return getCacheValue(resolved, wrappedResolvable);
         } else {
-            return resolverFunction.apply(wrappedResolvable);
+            return resolverFunction.load(wrappedResolvable);
         }
     }
 
@@ -135,7 +130,7 @@ protected R wrap(R resolvable) {
     }
 
     public boolean isCached(R resolvable) {
-        return resolved.containsKey(wrap(resolvable));
+        return resolved.getIfPresent(wrap(resolvable)) != null;
     }
 
     protected BeanManagerImpl getBeanManager() {",2013-07-04T09:25:04Z,114
"@@ -16,9 +16,11 @@
  */
 package org.jboss.weld.resources;
 
-import com.google.common.base.Function;
-import com.google.common.collect.ComputationException;
-import com.google.common.collect.MapMaker;
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
+import com.google.common.util.concurrent.ExecutionError;
+import com.google.common.util.concurrent.UncheckedExecutionException;
 import org.jboss.weld.bootstrap.api.Service;
 import org.jboss.weld.introspector.ForwardingAnnotatedType;
 import org.jboss.weld.introspector.WeldAnnotation;
@@ -34,9 +36,8 @@
 import javax.enterprise.inject.spi.AnnotatedType;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
-import java.util.concurrent.ConcurrentMap;
 
-import static org.jboss.weld.util.reflection.Reflections.cast;
+import static org.jboss.weld.util.cache.LoadingCacheUtils.getCastCacheValue;
 
 /**
  * @author Pete Muir
@@ -47,35 +48,35 @@
 public class ClassTransformer implements Service {
     private static Logger log = LoggerFactory.loggerFactory().getLogger(Category.CLASS_LOADING);
 
-    private static class TransformTypeToWeldClass implements Function<TypeHolder<?>, WeldClass<?>> {
+    private static class TransformTypeToWeldClass extends CacheLoader<TypeHolder<?>, WeldClass<?>> {
 
         private final ClassTransformer classTransformer;
 
         private TransformTypeToWeldClass(ClassTransformer classTransformer) {
             this.classTransformer = classTransformer;
         }
 
-        public WeldClass<?> apply(TypeHolder<?> from) {
+        public WeldClass<?> load(TypeHolder<?> from) {
             return WeldClassImpl.of(from.getRawType(), from.getBaseType(), classTransformer);
         }
 
     }
 
-    private static class TransformClassToWeldAnnotation implements Function<Class<? extends Annotation>, WeldAnnotation<?>> {
+    private static class TransformClassToWeldAnnotation extends CacheLoader<Class<? extends Annotation>, WeldAnnotation<?>> {
 
         private final ClassTransformer classTransformer;
 
         private TransformClassToWeldAnnotation(ClassTransformer classTransformer) {
             this.classTransformer = classTransformer;
         }
 
-        public WeldAnnotation<?> apply(Class<? extends Annotation> from) {
+        public WeldAnnotation<?> load(Class<? extends Annotation> from) {
             return WeldAnnotationImpl.create(from, classTransformer);
         }
 
     }
 
-    private static class TransformAnnotatedTypeToWeldClass implements Function<AnnotatedType<?>, WeldClass<?>> {
+    private static class TransformAnnotatedTypeToWeldClass extends CacheLoader<AnnotatedType<?>, WeldClass<?>> {
 
         private final ClassTransformer classTransformer;
 
@@ -84,7 +85,7 @@ private TransformAnnotatedTypeToWeldClass(ClassTransformer classTransformer) {
             this.classTransformer = classTransformer;
         }
 
-        public WeldClass<?> apply(AnnotatedType<?> from) {
+        public WeldClass<?> load(AnnotatedType<?> from) {
             return WeldClassImpl.of(from, classTransformer);
         }
 
@@ -128,24 +129,24 @@ public String toString() {
         }
     }
 
-    private final ConcurrentMap<TypeHolder<?>, WeldClass<?>> classes;
-    private final ConcurrentMap<AnnotatedType<?>, WeldClass<?>> annotatedTypes;
-    private final ConcurrentMap<Class<? extends Annotation>, WeldAnnotation<?>> annotations;
+    private final LoadingCache<TypeHolder<?>, WeldClass<?>> classes;
+    private final LoadingCache<AnnotatedType<?>, WeldClass<?>> annotatedTypes;
+    private final LoadingCache<Class<? extends Annotation>, WeldAnnotation<?>> annotations;
     private final TypeStore typeStore;
 
     public ClassTransformer(TypeStore typeStore) {
-        MapMaker maker = new MapMaker();
-        this.classes = maker.makeComputingMap(new TransformTypeToWeldClass(this));
-        this.annotatedTypes = maker.makeComputingMap(new TransformAnnotatedTypeToWeldClass(this));
-        this.annotations = maker.makeComputingMap(new TransformClassToWeldAnnotation(this));
+        CacheBuilder<Object, Object> builder = CacheBuilder.newBuilder();
+        this.classes = builder.build(new TransformTypeToWeldClass(this));
+        this.annotatedTypes = builder.build(new TransformAnnotatedTypeToWeldClass(this));
+        this.annotations = builder.build(new TransformClassToWeldAnnotation(this));
         this.typeStore = typeStore;
     }
 
     @SuppressWarnings(""unchecked"")
     public <T> WeldClass<T> loadClass(final Class<T> rawType, final Type baseType) {
         try {
-            return (WeldClass<T>) classes.get(new TypeHolder<T>(rawType, baseType));
-        } catch (ComputationException e) {
+            return getCastCacheValue(classes, new TypeHolder<T>(rawType, baseType));
+        } catch (UncheckedExecutionException e) {
             final Throwable cause = e.getCause();
             if (cause instanceof NoClassDefFoundError || cause instanceof TypeNotPresentException || cause instanceof ResourceLoadingException || cause instanceof LinkageError) {
                 throw new ResourceLoadingException(""Error loading class "" + rawType.getName(), cause);
@@ -160,22 +161,27 @@ public <T> WeldClass<T> loadClass(final Class<T> rawType, final Type baseType) {
 
     public <T> WeldClass<T> loadClass(final Class<T> clazz) {
         try {
-            return cast(classes.get(new TypeHolder<T>(clazz, clazz)));
-        } catch (ComputationException e) {
+            return getCastCacheValue(classes, new TypeHolder<T>(clazz, clazz));
+        } catch (UncheckedExecutionException e) {
             final Throwable cause = e.getCause();
-            if (cause instanceof NoClassDefFoundError || cause instanceof TypeNotPresentException || cause instanceof ResourceLoadingException || cause instanceof LinkageError) {
+            if (cause instanceof TypeNotPresentException || cause instanceof ResourceLoadingException) {
                 throw new ResourceLoadingException(""Error loading class "" + clazz.getName(), cause);
-            } else {
-                if (log.isTraceEnabled()) {
-                    log.trace(""Error loading class '"" + clazz.getName() + ""' : "" + cause);
-                }
-                throw e;
             }
+            log.trace(""Exception while loading class '{}' : {}"", clazz.getName(), cause);
+            throw e;
+        } catch (ExecutionError e) {
+            // LoadingCache throws ExecutionError if an error was thrown while loading the value
+            final Throwable cause = e.getCause();
+            if (cause instanceof NoClassDefFoundError || cause instanceof LinkageError) {
+                throw new ResourceLoadingException(""Error while loading class "" + clazz.getName(), cause);
+            }
+            log.trace(""Error while loading class '{}' : {}"", clazz.getName(), cause);
+            throw e;
         }
     }
 
     public void clearAnnotationData(Class<? extends Annotation> annotationClass) {
-        annotations.remove(annotationClass);
+        annotations.invalidate(annotationClass);
     }
 
     @SuppressWarnings(""unchecked"")
@@ -187,23 +193,23 @@ public <T> WeldClass<T> loadClass(final AnnotatedType<T> clazz) {
             ForwardingAnnotatedType fat = (ForwardingAnnotatedType) clazz;
             return (WeldClass<T>) fat.delegate();
         } else {
-            return (WeldClass<T>) annotatedTypes.get(clazz);
+            return getCastCacheValue(annotatedTypes, clazz);
         }
     }
 
     @SuppressWarnings(""unchecked"")
     public <T extends Annotation> WeldAnnotation<T> loadAnnotation(final Class<T> clazz) {
-        return (WeldAnnotation<T>) annotations.get(clazz);
+        return getCastCacheValue(annotations, clazz);
     }
 
     public TypeStore getTypeStore() {
         return typeStore;
     }
 
     public void cleanup() {
-        this.annotatedTypes.clear();
-        this.annotations.clear();
-        this.classes.clear();
+        this.annotatedTypes.invalidateAll();
+        this.annotations.invalidateAll();
+        this.classes.invalidateAll();
     }
 
 }",2013-07-04T09:25:04Z,115
"@@ -16,79 +16,82 @@
  */
 package org.jboss.weld.resources;
 
+import static org.jboss.weld.util.cache.LoadingCacheUtils.getCacheValue;
+import static org.jboss.weld.util.cache.LoadingCacheUtils.getCastCacheValue;
+
 import java.lang.reflect.Type;
 import java.util.Collections;
 import java.util.Map;
 import java.util.Set;
 
-import com.google.common.base.Function;
-import com.google.common.collect.MapMaker;
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
 import org.jboss.weld.bootstrap.api.Service;
 import org.jboss.weld.util.collections.ArraySetMultimap;
 import org.jboss.weld.util.reflection.HierarchyDiscovery;
-import org.jboss.weld.util.reflection.Reflections;
 
 /**
  * Allows classes to share Maps/Sets to conserve memory.
  *
  * @author Stuart Douglas <stuart@baileyroberts.com.au>
  */
 public class SharedObjectCache implements Service {
-    private final Map<Set<?>, Set<?>> sharedSets = new MapMaker().makeComputingMap(new Function<Set<?>, Set<?>>() {
-        public Set<?> apply(Set<?> from) {
+    private final LoadingCache<Set<?>, Set<?>> sharedSets = CacheBuilder.newBuilder().build(new CacheLoader<Set<?>, Set<?>>() {
+        public Set<?> load(Set<?> from) {
             return Collections.unmodifiableSet(from);
         }
     });
 
-    private final Map<Map<?, ?>, Map<?, ?>> sharedMaps = new MapMaker().makeComputingMap(new Function<Map<?, ?>, Map<?, ?>>() {
-        public Map<?, ?> apply(Map<?, ?> from) {
+    private final LoadingCache<Map<?, ?>, Map<?, ?>> sharedMaps = CacheBuilder.newBuilder().build(new CacheLoader<Map<?, ?>, Map<?, ?>>() {
+        public Map<?, ?> load(Map<?, ?> from) {
             return Collections.unmodifiableMap(from);
         }
     });
 
-    private final Map<ArraySetMultimap<?, ?>, ArraySetMultimap<?, ?>> sharedMultiMaps = new MapMaker().makeComputingMap(new Function<ArraySetMultimap<?, ?>, ArraySetMultimap<?, ?>>() {
-        public ArraySetMultimap<?, ?> apply(ArraySetMultimap<?, ?> from) {
+    private final LoadingCache<ArraySetMultimap<?, ?>, ArraySetMultimap<?, ?>> sharedMultiMaps = CacheBuilder.newBuilder().build(new CacheLoader<ArraySetMultimap<?, ?>, ArraySetMultimap<?, ?>>() {
+        public ArraySetMultimap<?, ?> load(ArraySetMultimap<?, ?> from) {
             return from;
         }
     });
 
-    private final Map<Type, Set<Type>> typeClosures = new MapMaker().makeComputingMap(new Function<Type, Set<Type>>() {
+    private final LoadingCache<Type, Set<Type>> typeClosures = CacheBuilder.newBuilder().build(new CacheLoader<Type, Set<Type>>() {
 
-        public Set<Type> apply(Type from) {
+        public Set<Type> load(Type from) {
             return Collections.unmodifiableSet(new HierarchyDiscovery(from).getTypeClosure());
         }
     });
 
-    private final Map<Type, Type> resolvedTypes = new MapMaker().makeComputingMap(new Function<Type, Type>() {
+    private final LoadingCache<Type, Type> resolvedTypes = CacheBuilder.newBuilder().build(new CacheLoader<Type, Type>() {
 
-        public Type apply(Type from) {
+        public Type load(Type from) {
             return new HierarchyDiscovery(from).getResolvedType();
         }
     });
 
     public <T> Set<T> getSharedSet(Set<T> set) {
-        return Reflections.cast(sharedSets.get(set));
+        return getCastCacheValue(sharedSets, set);
     }
 
     public <K, V> Map<K, V> getSharedMap(Map<K, V> map) {
-        return Reflections.cast(sharedMaps.get(map));
+        return getCastCacheValue(sharedMaps, map);
     }
 
     public <K, V> ArraySetMultimap<K, V> getSharedMultimap(ArraySetMultimap<K, V> map) {
-        return Reflections.cast(sharedMultiMaps.get(map));
+        return getCastCacheValue(sharedMultiMaps, map);
     }
 
     public Set<Type> getTypeClosure(Type type) {
-        return typeClosures.get(type);
+        return getCacheValue(typeClosures, type);
     }
 
     public Type getResolvedType(Type type) {
-        return resolvedTypes.get(type);
+        return getCacheValue(resolvedTypes, type);
     }
 
     public void cleanup() {
-        sharedSets.clear();
-        sharedMaps.clear();
-        sharedMultiMaps.clear();
+        sharedSets.invalidateAll();
+        sharedMaps.invalidateAll();
+        sharedMultiMaps.invalidateAll();
     }
 }",2013-07-04T09:25:04Z,116
"@@ -0,0 +1,115 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2013, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.weld.util.cache;
+
+import static org.jboss.weld.logging.messages.UtilMessage.UNABLE_TO_LOAD_CACHE_VALUE;
+
+import java.util.concurrent.ExecutionException;
+
+import org.jboss.weld.exceptions.WeldException;
+
+import com.google.common.cache.LoadingCache;
+import com.google.common.util.concurrent.ExecutionError;
+import com.google.common.util.concurrent.UncheckedExecutionException;
+
+/**
+ * Guava loading cache utilities.
+ *
+ * @author Martin Kouba
+ */
+public final class LoadingCacheUtils {
+
+    private LoadingCacheUtils() {
+    }
+
+    /**
+     * Get the cache value for the given key. Wrap possible {@link ExecutionException} and {@link UncheckedExecutionException}.
+     *
+     * @param cache
+     * @param key
+     * @param <K> Key type
+     * @param <V> Value type
+     * @return the cache value
+     * @throws WeldException if an expection is thrown while loading the value
+     * @throws ExecutionError if an error is thrown while loading the value
+     */
+    public static <K, V> V getCacheValue(LoadingCache<K, V> cache, K key) {
+        return getCacheValue(cache, key, true);
+    }
+
+    /**
+     * Get the cache value for the given key. Wrap possible {@link ExecutionException} and {@link UncheckedExecutionException}.
+     *
+     * @param cache
+     * @param key
+     * @param wrapExecutionProblem If <code>true</code>, wrap possible {@link ExecutionException} and
+     *        {@link UncheckedExecutionException}, otherwise {@link UncheckedExecutionException} may be thrown when execution
+     *        problem occurs
+     * @param <K> Key type
+     * @param <V> Value type
+     * @return the cache value
+     * @throws ExecutionError if an error is thrown while loading the value
+     */
+    public static <K, V> V getCacheValue(LoadingCache<K, V> cache, K key, boolean wrapExecutionProblem) {
+
+        if (wrapExecutionProblem) {
+            try {
+                return cache.get(key);
+            } catch (Exception e) {
+                throw new WeldException(UNABLE_TO_LOAD_CACHE_VALUE, e, key);
+            }
+        } else {
+            return cache.getUnchecked(key);
+        }
+    }
+
+    /**
+     * Get and cast the cache value for the given key.
+     *
+     * @param cache
+     * @param key
+     * @param <T> Required type
+     * @param <K> Key type
+     * @param <V> Value type
+     * @return the cache value cast to the required type
+     * @throws WeldException if an expection is thrown while loading the value
+     * @throws ExecutionError if an error is thrown while loading the value
+     */
+    public static <T, K, V> T getCastCacheValue(LoadingCache<K, V> cache, Object key) {
+        return getCastCacheValue(cache, key, true);
+    }
+
+    /**
+     * Get and cast the cache value for the given key.
+     *
+     * @param cache
+     * @param key
+     * @param wrapExecutionProblem If <code>true</code>, wrap possible {@link ExecutionException} and
+     *        {@link UncheckedExecutionException}, otherwise {@link UncheckedExecutionException} may be thrown when execution
+     *        problem occurs
+     * @param <T> Required type
+     * @param <K> Key type
+     * @param <V> Value type
+     * @return the cache value cast to the required type
+     * @throws ExecutionError if an error is thrown while loading the value
+     */
+    @SuppressWarnings(""unchecked"")
+    public static <T, K, V> T getCastCacheValue(LoadingCache<K, V> cache, Object key, boolean wrapExecutionProblem) {
+        return (T) getCacheValue(cache, (K) key, wrapExecutionProblem);
+    }
+
+}
\ No newline at end of file",2013-07-04T09:25:04Z,117
"@@ -17,10 +17,12 @@
 
 package org.jboss.weld.util.reflection.instantiation;
 
-import java.util.Map;
+import static org.jboss.weld.util.cache.LoadingCacheUtils.getCacheValue;
 
 import com.google.common.base.Function;
-import com.google.common.collect.MapMaker;
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
 
 /**
  * Instantiator factory per loader.
@@ -31,7 +33,7 @@ public class LoaderInstantiatorFactory extends AbstractInstantiatorFactory imple
 
     private volatile Boolean enabled;
     @SuppressWarnings(""deprecation"")
-    private final Map<ClassLoader, Boolean> cached = new MapMaker().makeComputingMap(this);
+    private final LoadingCache<ClassLoader, Boolean> cached = CacheBuilder.newBuilder().build(CacheLoader.from(this));
 
     public boolean useInstantiators() {
         final ClassLoader tccl = Thread.currentThread().getContextClassLoader();
@@ -51,11 +53,11 @@ public boolean useInstantiators() {
             return enabled;
         }
 
-        return cached.get(tccl);
+        return getCacheValue(cached, tccl);
     }
 
     public void cleanup() {
-        cached.clear();
+        cached.invalidateAll();
     }
 
     public Boolean apply(ClassLoader tccl) {",2013-07-04T09:25:04Z,118
"@@ -28,4 +28,5 @@ INITIALIZER_METHOD_IS_GENERIC=Initializer method {0} declared on {1} may not be
 COULD_NOT_READ_SERVICES_LIST=Could not read services list from {0}
 COULD_NOT_READ_SERVICES_FILE=Could not read services file {0}
 EXTENSION_CLASS_NOT_FOUND=Extension class {0} not found
-CLASS_LOADING_ERROR = Error loading class {0}
\ No newline at end of file
+CLASS_LOADING_ERROR = Error loading class {0}
+UNABLE_TO_LOAD_CACHE_VALUE=Unable to load the cache value for the key {0}
\ No newline at end of file",2013-07-04T09:25:04Z,119
"@@ -17,19 +17,20 @@
 
 package org.jboss.weld.bean.proxy.util;
 
-import org.jboss.weld.Container;
-import org.jboss.weld.serialization.spi.ContextualStore;
-
-import javax.enterprise.inject.spi.Bean;
 import java.io.ObjectStreamException;
 import java.io.Serializable;
 
+import javax.enterprise.inject.spi.Bean;
+
+import org.jboss.weld.Container;
+import org.jboss.weld.exceptions.WeldException;
+import org.jboss.weld.logging.messages.BeanMessage;
+import org.jboss.weld.serialization.spi.ContextualStore;
+
 /**
- * A wrapper mostly for client proxies which provides header information useful
- * to generate the client proxy class in a VM before the proxy object is
- * deserialized. Only client proxies really need this extra step for
- * serialization and deserialization since the other proxy classes are generated
- * during bean archive deployment.
+ * A wrapper mostly for client proxies which provides header information useful to generate the client proxy class in a VM before the proxy object is
+ * deserialized. Only client proxies really need this extra step for serialization and deserialization since the other proxy classes are generated during bean
+ * archive deployment.
  *
  * @author David Allen
  */
@@ -49,8 +50,12 @@ public SerializableClientProxy(final String beanId) {
      * @return the proxy object
      * @throws java.io.ObjectStreamException
      */
+
     Object readResolve() throws ObjectStreamException {
         Bean<?> bean = Container.instance().services().get(ContextualStore.class).<Bean<Object>, Object>getContextual(beanId);
+        if (bean == null) {
+            throw new WeldException(BeanMessage.DESERIALIZATED_BEAN_WAS_NULL, beanId);
+        }
         return Container.instance().deploymentManager().getClientProxyProvider().getClientProxy(bean);
     }
 ",2013-11-26T08:04:13Z,120
"@@ -151,6 +151,7 @@ public enum BeanMessage {
     @MessageId(""001515"")UNABLE_TO_LOAD_MEMBER,
     @MessageId(""001516"")NAMED_RESOURCE_PRODUCER_FIELD,
     @MessageId(""001517"")PASSIVATING_BEAN_HAS_NON_PASSIVATION_CAPABLE_DECORATOR,
-    @MessageId(""001518"")PASSIVATING_BEAN_HAS_NON_PASSIVATION_CAPABLE_INTERCEPTOR
+    @MessageId(""001518"")PASSIVATING_BEAN_HAS_NON_PASSIVATION_CAPABLE_INTERCEPTOR,
+    @MessageId(""001519"")DESERIALIZATED_BEAN_WAS_NULL
 
 }",2013-11-26T08:04:13Z,16
"@@ -114,3 +114,4 @@ UNABLE_TO_LOAD_MEMBER=Unable to load annotated member {0}
 NAMED_RESOURCE_PRODUCER_FIELD=Resource producer field [{0}] must not have an EL name
 PASSIVATING_BEAN_HAS_NON_PASSIVATION_CAPABLE_DECORATOR=Managed bean declaring a passivating scope has a non-passivation capable decorator.  Bean:  {0}  Decorator: {1}
 PASSIVATING_BEAN_HAS_NON_PASSIVATION_CAPABLE_INTERCEPTOR=Managed bean declaring a passivating scope has a non-serializable interceptor.  Bean:  {0}  Interceptor: {1}
+DESERIALIZATED_BEAN_WAS_NULL=Failed to deserialize proxy object with beanId {0}. ",2013-11-26T08:04:13Z,17
"@@ -17,19 +17,20 @@
 
 package org.jboss.weld.bean.proxy.util;
 
-import org.jboss.weld.Container;
-import org.jboss.weld.serialization.spi.ContextualStore;
-
-import javax.enterprise.inject.spi.Bean;
 import java.io.ObjectStreamException;
 import java.io.Serializable;
 
+import javax.enterprise.inject.spi.Bean;
+
+import org.jboss.weld.Container;
+import org.jboss.weld.exceptions.WeldException;
+import org.jboss.weld.logging.messages.BeanMessage;
+import org.jboss.weld.serialization.spi.ContextualStore;
+
 /**
- * A wrapper mostly for client proxies which provides header information useful
- * to generate the client proxy class in a VM before the proxy object is
- * deserialized. Only client proxies really need this extra step for
- * serialization and deserialization since the other proxy classes are generated
- * during bean archive deployment.
+ * A wrapper mostly for client proxies which provides header information useful to generate the client proxy class in a VM before the proxy object is
+ * deserialized. Only client proxies really need this extra step for serialization and deserialization since the other proxy classes are generated during bean
+ * archive deployment.
  *
  * @author David Allen
  */
@@ -49,8 +50,12 @@ public SerializableClientProxy(final String beanId) {
      * @return the proxy object
      * @throws java.io.ObjectStreamException
      */
+
     Object readResolve() throws ObjectStreamException {
         Bean<?> bean = Container.instance().services().get(ContextualStore.class).<Bean<Object>, Object>getContextual(beanId);
+        if (bean == null) {
+            throw new WeldException(BeanMessage.DESERIALIZATED_BEAN_WAS_NULL, beanId);
+        }
         return Container.instance().deploymentManager().getClientProxyProvider().getClientProxy(bean);
     }
 ",2013-11-26T08:04:13Z,120
"@@ -151,6 +151,7 @@ public enum BeanMessage {
     @MessageId(""001515"")UNABLE_TO_LOAD_MEMBER,
     @MessageId(""001516"")NAMED_RESOURCE_PRODUCER_FIELD,
     @MessageId(""001517"")PASSIVATING_BEAN_HAS_NON_PASSIVATION_CAPABLE_DECORATOR,
-    @MessageId(""001518"")PASSIVATING_BEAN_HAS_NON_PASSIVATION_CAPABLE_INTERCEPTOR
+    @MessageId(""001518"")PASSIVATING_BEAN_HAS_NON_PASSIVATION_CAPABLE_INTERCEPTOR,
+    @MessageId(""001519"")DESERIALIZATED_BEAN_WAS_NULL
 
 }",2013-11-26T08:04:13Z,16
"@@ -114,3 +114,4 @@ UNABLE_TO_LOAD_MEMBER=Unable to load annotated member {0}
 NAMED_RESOURCE_PRODUCER_FIELD=Resource producer field [{0}] must not have an EL name
 PASSIVATING_BEAN_HAS_NON_PASSIVATION_CAPABLE_DECORATOR=Managed bean declaring a passivating scope has a non-passivation capable decorator.  Bean:  {0}  Decorator: {1}
 PASSIVATING_BEAN_HAS_NON_PASSIVATION_CAPABLE_INTERCEPTOR=Managed bean declaring a passivating scope has a non-serializable interceptor.  Bean:  {0}  Interceptor: {1}
+DESERIALIZATED_BEAN_WAS_NULL=Failed to deserialize proxy object with beanId {0}. ",2013-11-26T08:04:13Z,17
"@@ -36,6 +36,7 @@
 
 import org.jboss.weld.Container;
 import org.jboss.weld.annotated.backed.BackedAnnotatedType;
+import org.jboss.weld.annotated.unbacked.UnbackedAnnotatedType;
 import org.jboss.weld.bean.AbstractBean;
 import org.jboss.weld.bean.AbstractClassBean;
 import org.jboss.weld.bean.RIBean;
@@ -99,23 +100,15 @@ public BeanDeployer addClass(String className) {
         }
 
         if (clazz != null && !clazz.isAnnotation()) {
-            WeldClass<?> weldClass = null;
-            try {
-                weldClass = classTransformer.loadClass(clazz);
-            } catch (ResourceLoadingException e) {
-                log.info(IGNORING_CLASS_DUE_TO_LOADING_ERROR, className);
-                xlog.catching(INFO, e);
-            }
-            if (weldClass != null) {
-                getEnvironment().addClass(weldClass);
-            }
+            AnnotatedType<?> annotatedType = BackedAnnotatedType.of(clazz);
+            getEnvironment().addAnnotatedType(annotatedType);
         }
         return this;
     }
 
-    public BeanDeployer addSyntheticClass(AnnotatedType<?> clazz, Extension extension) {
-        WeldClass<?> weldClass = classTransformer.loadClass(clazz);
-        getEnvironment().addSyntheticClass(weldClass, extension);
+    public <T> BeanDeployer addSyntheticClass(AnnotatedType<T> annotatedType, Extension extension) {
+        AnnotatedType<T> unbacked = UnbackedAnnotatedType.of(annotatedType);
+        getEnvironment().addSyntheticAnnotatedType(unbacked, extension);
         return this;
     }
 
@@ -127,56 +120,58 @@ public BeanDeployer addClasses(Iterable<String> classes) {
     }
 
     public void processAnnotatedTypes() {
-        Set<WeldClass<?>> classesToBeAdded = new HashSet<WeldClass<?>>();
-        Set<WeldClass<?>> classesToBeRemoved = new HashSet<WeldClass<?>>();
-        for (WeldClass<?> weldClass : getEnvironment().getClasses()) {
+        Set<AnnotatedType<?>> classesToBeAdded = new HashSet<AnnotatedType<?>>();
+        Set<AnnotatedType<?>> classesToBeRemoved = new HashSet<AnnotatedType<?>>();
+
+        for (AnnotatedType<?> annotatedType : getEnvironment().getAnnotatedTypes()) {
             // fire event
-            boolean synthetic = getEnvironment().getSource(weldClass) != null;
+            boolean synthetic = getEnvironment().getAnnotatedTypeSource(annotatedType) != null;
             ProcessAnnotatedTypeImpl<?> event;
             if (synthetic) {
-                event = ProcessAnnotatedTypeFactory.create(getManager(), weldClass, getEnvironment().getSource(weldClass));
+                event = ProcessAnnotatedTypeFactory.create(getManager(), annotatedType, getEnvironment().getAnnotatedTypeSource(annotatedType));
             } else {
-                event = ProcessAnnotatedTypeFactory.create(getManager(), weldClass);
+                event = ProcessAnnotatedTypeFactory.create(getManager(), annotatedType);
             }
             event.fire();
             // process the result
             if (event.isVeto()) {
-                getEnvironment().vetoJavaClass(weldClass);
-                classesToBeRemoved.add(weldClass);
+                getEnvironment().vetoJavaClass(annotatedType.getJavaClass());
+                classesToBeRemoved.add(annotatedType);
             } else {
                 boolean dirty = event.isDirty();
                 if (dirty) {
-                    classesToBeRemoved.add(weldClass); // remove the original class
-                    AnnotatedType<?> modifiedType;
-                    if (synthetic) {
-                        modifiedType = ExternalAnnotatedType.of(event.getAnnotatedType());
+                    classesToBeRemoved.add(annotatedType); // remove the original class
+                    AnnotatedType<?> modifiedType = event.getAnnotatedType();
+                    // TODO use a common interface
+                    if (modifiedType instanceof BackedAnnotatedType || modifiedType instanceof UnbackedAnnotatedType) {
+                        annotatedType = modifiedType;
                     } else {
-                        modifiedType = DiscoveredExternalAnnotatedType.of(event.getAnnotatedType(), weldClass);
+                        annotatedType = UnbackedAnnotatedType.of(modifiedType);
                     }
-                    weldClass = classTransformer.loadClass(modifiedType);
                 }
 
                 // vetoed due to @Veto or @Requires
-                boolean vetoed = Beans.isVetoed(weldClass);
+                boolean vetoed = Beans.isVetoed(annotatedType);
 
                 if (dirty && !vetoed) {
-                    classesToBeAdded.add(weldClass); // add a replacement for the removed class
+                    classesToBeAdded.add(annotatedType); // add a replacement for the removed class
                 }
                 if (!dirty && vetoed) {
-                    getEnvironment().vetoJavaClass(weldClass);
-                    classesToBeRemoved.add(weldClass);
+                    getEnvironment().vetoJavaClass(annotatedType.getJavaClass());
+                    classesToBeRemoved.add(annotatedType);
                 }
             }
         }
-        getEnvironment().removeClasses(classesToBeRemoved);
-        getEnvironment().addClasses(classesToBeAdded);
+        getEnvironment().removeAnnotatedTypes(classesToBeRemoved);
+        getEnvironment().addAnnotatedTypes(classesToBeAdded);
     }
 
     public void processEnums() {
         EnumService enumService = getManager().getServices().get(EnumService.class);
-        for (WeldClass<?> clazz : getEnvironment().getClasses()) {
-            if (Reflections.isEnum(clazz.getJavaClass())) {
-                enumService.addEnumClass(Reflections.<WeldClass<Enum<?>>> cast(clazz));
+        for (AnnotatedType<?> annotatedType: getEnvironment().getAnnotatedTypes()) {
+            if (Reflections.isEnum(annotatedType.getJavaClass())) {
+                // TODO
+                enumService.addEnumClass(Reflections.<AnnotatedType<Enum<?>>> cast(annotatedType));
             }
         }
         // add @New injection points from enums
@@ -186,10 +181,10 @@ public void processEnums() {
     }
 
     public void createClassBeans() {
-        Multimap<Class<?>, WeldClass<?>> otherWeldClasses = HashMultimap.create();
+        Multimap<Class<?>, AnnotatedType<?>> otherWeldClasses = HashMultimap.create();
 
-        for (WeldClass<?> clazz : getEnvironment().getClasses()) {
-            createClassBean(clazz, otherWeldClasses);
+        for (AnnotatedType<?> annotatedType : getEnvironment().getAnnotatedTypes()) {
+            createClassBean(annotatedType, otherWeldClasses);
         }
         // create session beans
         for (InternalEjbDescriptor<?> ejbDescriptor : getEnvironment().getEjbDescriptors()) {
@@ -198,8 +193,9 @@ public void createClassBeans() {
             }
             if (ejbDescriptor.isSingleton() || ejbDescriptor.isStateful() || ejbDescriptor.isStateless()) {
                 if (otherWeldClasses.containsKey(ejbDescriptor.getBeanClass())) {
-                    for (WeldClass<?> c : otherWeldClasses.get(ejbDescriptor.getBeanClass())) {
-                        createSessionBean(ejbDescriptor, Reflections.<WeldClass> cast(c));
+                    for (AnnotatedType<?> annotatedType : otherWeldClasses.get(ejbDescriptor.getBeanClass())) {
+                        WeldClass<?> weldClass = classTransformer.loadClass(annotatedType);
+                        createSessionBean(ejbDescriptor, Reflections.<WeldClass> cast(weldClass));
                     }
                 } else {
                     createSessionBean(ejbDescriptor);
@@ -208,18 +204,21 @@ public void createClassBeans() {
         }
     }
 
-    protected void createClassBean(WeldClass<?> weldClass, Multimap<Class<?>, WeldClass<?>> otherWeldClasses) {
-        boolean managedBeanOrDecorator = !getEnvironment().getEjbDescriptors().contains(weldClass.getJavaClass()) && Beans.isTypeManagedBeanOrDecoratorOrInterceptor(weldClass);
-        if (managedBeanOrDecorator && weldClass.isAnnotationPresent(Decorator.class)) {
-            validateDecorator(weldClass);
-            createDecorator(weldClass);
-        } else if (managedBeanOrDecorator && weldClass.isAnnotationPresent(Interceptor.class)) {
-            validateInterceptor(weldClass);
-            createInterceptor(weldClass);
-        } else if (managedBeanOrDecorator && !weldClass.isAbstract()) {
-            createManagedBean(weldClass);
+    protected void createClassBean(AnnotatedType<?> annotatedType, Multimap<Class<?>, AnnotatedType<?>> otherWeldClasses) {
+        boolean managedBeanOrDecorator = !getEnvironment().getEjbDescriptors().contains(annotatedType.getJavaClass()) && Beans.isTypeManagedBeanOrDecoratorOrInterceptor(annotatedType);
+        if (managedBeanOrDecorator) {
+            WeldClass<?> weldClass = classTransformer.loadClass(annotatedType);
+            if (weldClass.isAnnotationPresent(Decorator.class)) {
+                validateDecorator(weldClass);
+                createDecorator(weldClass);
+            } else if (weldClass.isAnnotationPresent(Interceptor.class)) {
+                validateInterceptor(weldClass);
+                createInterceptor(weldClass);
+            } else if (!weldClass.isAbstract()) {
+                createManagedBean(weldClass);
+            }
         } else {
-            otherWeldClasses.put(weldClass.getJavaClass(), weldClass);
+            otherWeldClasses.put(annotatedType.getJavaClass(), annotatedType);
         }
     }
 ",2012-04-13T16:47:13Z,33
"@@ -31,8 +31,10 @@
 import javax.enterprise.event.Event;
 import javax.enterprise.inject.Instance;
 import javax.enterprise.inject.New;
+import javax.enterprise.inject.spi.AnnotatedType;
 import javax.enterprise.inject.spi.Extension;
 
+import org.jboss.weld.annotated.backed.BackedAnnotatedType;
 import org.jboss.weld.bean.AbstractBean;
 import org.jboss.weld.bean.AbstractClassBean;
 import org.jboss.weld.bean.DecoratorImpl;
@@ -74,8 +76,8 @@ public static BeanDeployerEnvironment newEnvironment(EjbDescriptors ejbDescripto
      */
     public static BeanDeployerEnvironment newConcurrentEnvironment(EjbDescriptors ejbDescriptors, BeanManagerImpl manager) {
         return new BeanDeployerEnvironment(
-                Sets.newSetFromMap(new ConcurrentHashMap<WeldClass<?>, Boolean>()),
-                new ConcurrentHashMap<WeldClass<?>, Extension>(),
+                Sets.newSetFromMap(new ConcurrentHashMap<AnnotatedType<?>, Boolean>()),
+                new ConcurrentHashMap<AnnotatedType<?>, Extension>(),
                 Sets.newSetFromMap(new ConcurrentHashMap<Class<?>, Boolean>()),
                 new ConcurrentHashMap<WeldClass<?>, AbstractClassBean<?>>(),
                 Sets.newSetFromMap(new ConcurrentHashMap<ProducerField<?, ?>, Boolean>()),
@@ -92,8 +94,8 @@ public static BeanDeployerEnvironment newConcurrentEnvironment(EjbDescriptors ej
                 manager);
     }
 
-    private final Set<WeldClass<?>> weldClasses;
-    private final Map<WeldClass<?>, Extension> weldClassSource;
+    private final Set<AnnotatedType<?>> annotatedTypes;
+    private final Map<AnnotatedType<?>, Extension> annotatedTypeSource;
     private final Set<Class<?>> vetoedClasses;
     private final Map<WeldClass<?>, AbstractClassBean<?>> classBeanMap;
     private final Map<WeldMethodKey<?, ?>, ProducerMethod<?, ?>> producerMethodBeanMap;
@@ -111,8 +113,8 @@ public static BeanDeployerEnvironment newConcurrentEnvironment(EjbDescriptors ej
     private final Map<InternalEjbDescriptor<?>, WeldClass<?>> newSessionBeanDescriptorsFromInjectionPoint;
 
     protected BeanDeployerEnvironment(
-            Set<WeldClass<?>> weldClasses,
-            Map<WeldClass<?>, Extension> weldClassSource,
+            Set<AnnotatedType<?>> annotatedTypes,
+            Map<AnnotatedType<?>, Extension> annotatedTypeSource,
             Set<Class<?>> vetoedClasses,
             Map<WeldClass<?>, AbstractClassBean<?>> classBeanMap,
             Set<ProducerField<?, ?>> producerFields,
@@ -127,8 +129,8 @@ protected BeanDeployerEnvironment(
             Set<WeldClass<?>> newManagedBeanClasses,
             Map<InternalEjbDescriptor<?>, WeldClass<?>> newSessionBeanDescriptorsFromInjectionPoint,
             BeanManagerImpl manager) {
-        this.weldClasses = weldClasses;
-        this.weldClassSource = weldClassSource;
+        this.annotatedTypes = annotatedTypes;
+        this.annotatedTypeSource = annotatedTypeSource;
         this.vetoedClasses = vetoedClasses;
         this.classBeanMap = classBeanMap;
         this.producerFields = producerFields;
@@ -148,8 +150,8 @@ protected BeanDeployerEnvironment(
 
     protected BeanDeployerEnvironment(EjbDescriptors ejbDescriptors, BeanManagerImpl manager) {
         this(
-                new HashSet<WeldClass<?>>(),
-                new HashMap<WeldClass<?>, Extension>(),
+                new HashSet<AnnotatedType<?>>(),
+                new HashMap<AnnotatedType<?>, Extension>(),
                 new HashSet<Class<?>>(),
                 new HashMap<WeldClass<?>, AbstractClassBean<?>>(),
                 new HashSet<ProducerField<?, ?>>(),
@@ -166,46 +168,46 @@ protected BeanDeployerEnvironment(EjbDescriptors ejbDescriptors, BeanManagerImpl
                 manager);
     }
 
-    public void addClass(WeldClass<?> weldClass) {
-        weldClasses.add(weldClass);
+    public void addAnnotatedType(AnnotatedType<?> annotatedType) {
+        this.annotatedTypes.add(annotatedType);
     }
 
-    public void addClasses(Collection<WeldClass<?>> classes) {
-        weldClasses.addAll(classes);
+    public void addAnnotatedTypes(Collection<AnnotatedType<?>> annotatedTypes) {
+        this.annotatedTypes.addAll(annotatedTypes);
     }
 
-    public void addSyntheticClass(WeldClass<?> weldClass, Extension extension) {
-        addClass(weldClass);
-        weldClassSource.put(weldClass, extension);
+    public void addSyntheticAnnotatedType(AnnotatedType<?> annotatedType, Extension extension) {
+        addAnnotatedType(annotatedType);
+        annotatedTypeSource.put(annotatedType, extension);
     }
 
-    public Set<WeldClass<?>> getClasses() {
-        return Collections.unmodifiableSet(weldClasses);
+    public Set<AnnotatedType<?>> getAnnotatedTypes() {
+        return Collections.unmodifiableSet(annotatedTypes);
     }
 
-    public Extension getSource(WeldClass<?> weldClass) {
-        return weldClassSource.get(weldClass);
+    public Extension getAnnotatedTypeSource(AnnotatedType<?> annotatedType) {
+        return annotatedTypeSource.get(annotatedType);
     }
 
-    public void removeClass(WeldClass<?> weldClass) {
-        weldClasses.remove(weldClass);
+    public void removeAnnotatedType(AnnotatedType<?> annotatedType) {
+        annotatedTypes.remove(annotatedType);
     }
 
-    public void removeClasses(Collection<WeldClass<?>> classes) {
-        for (WeldClass<?> clazz : classes) {
-            removeClass(clazz);
+    public void removeAnnotatedTypes(Collection<AnnotatedType<?>> annotatedTypes) {
+        for (AnnotatedType<?> annotatedType : annotatedTypes) {
+            removeAnnotatedType(annotatedType);
         }
     }
 
-    public void vetoJavaClass(WeldClass<?> weldClass) {
-        if (weldClass.isDiscovered()) {
-            vetoedClasses.add(weldClass.getJavaClass());
-        }
+    public void vetoJavaClass(Class<?> javaClass) {
+        vetoedClasses.add(javaClass);
     }
 
-    public void vetoClass(WeldClass<?> weldClass) {
-        vetoJavaClass(weldClass);
-        removeClass(weldClass);
+    public void vetoAnnotatedType(AnnotatedType<?> annotatedType) {
+        if (annotatedType instanceof BackedAnnotatedType<?>) {
+            vetoJavaClass(annotatedType.getJavaClass());
+        }
+        removeAnnotatedType(annotatedType);
     }
 
     public boolean isVetoed(Class<?> clazz) {
@@ -432,8 +434,8 @@ public Map<WeldClass<?>, AbstractClassBean<?>> getClassBeanMap() {
     }
 
     public void cleanup() {
-        this.weldClasses.clear();
-        this.weldClassSource.clear();
+        this.annotatedTypes.clear();
+        this.annotatedTypeSource.clear();
         this.vetoedClasses.clear();
         this.classBeanMap.clear();
         this.producerMethodBeanMap.clear();",2012-04-13T16:47:13Z,33
"@@ -132,11 +132,12 @@ public BeanDeployment(BeanDeploymentArchive beanDeploymentArchive, BeanManagerIm
             ejbDescriptors.addAll(beanDeploymentArchive.getEjbs());
         }
 
-        if (services.get(ExecutorServices.class) instanceof SingleThreadExecutorServices) {
-            beanDeployer = new BeanDeployer(beanManager, ejbDescriptors, deploymentServices);
-        } else {
-            beanDeployer = new ConcurrentBeanDeployer(beanManager, ejbDescriptors, deploymentServices);
-        }
+//        if (services.get(ExecutorServices.class) instanceof SingleThreadExecutorServices) {
+//            beanDeployer = new BeanDeployer(beanManager, ejbDescriptors, deploymentServices);
+//        } else {
+//            beanDeployer = new ConcurrentBeanDeployer(beanManager, ejbDescriptors, deploymentServices);
+//        }
+          beanDeployer = new BeanDeployer(beanManager, ejbDescriptors, deploymentServices);
 
         // Must at the Manager bean straight away, as it can be injected during startup!
         beanManager.addBean(new BeanManagerBean(beanManager));",2012-04-13T16:47:13Z,34
"@@ -21,10 +21,10 @@
  */
 package org.jboss.weld.bootstrap.events;
 
+import javax.enterprise.inject.spi.AnnotatedType;
 import javax.enterprise.inject.spi.Extension;
 import javax.enterprise.inject.spi.ProcessAnnotatedType;
 
-import org.jboss.weld.introspector.WeldClass;
 import org.jboss.weld.manager.BeanManagerImpl;
 
 /**
@@ -38,16 +38,16 @@ public class ProcessAnnotatedTypeFactory {
     private ProcessAnnotatedTypeFactory() {
     }
 
-    public static <X> ProcessAnnotatedTypeImpl<X> create(BeanManagerImpl beanManager, WeldClass<X> clazz) {
-        return create(beanManager, clazz, null);
+    public static <X> ProcessAnnotatedTypeImpl<X> create(BeanManagerImpl beanManager, AnnotatedType<X> annotatedType) {
+        return create(beanManager, annotatedType, null);
     }
 
-    public static <X> ProcessAnnotatedTypeImpl<X> create(BeanManagerImpl beanManager, WeldClass<X> clazz, Extension source) {
+    public static <X> ProcessAnnotatedTypeImpl<X> create(BeanManagerImpl beanManager, AnnotatedType<X> annotatedType, Extension source) {
         if (source == null) {
-            return new ProcessAnnotatedTypeImpl<X>(beanManager, clazz) {
+            return new ProcessAnnotatedTypeImpl<X>(beanManager, annotatedType) {
             };
         } else {
-            return new ProcessSyntheticAnnotatedTypeImpl<X>(beanManager, clazz, source) {
+            return new ProcessSyntheticAnnotatedTypeImpl<X>(beanManager, annotatedType, source) {
             };
         }
     }",2012-04-13T16:47:13Z,121
"@@ -22,7 +22,6 @@
 package org.jboss.weld.bootstrap.events;
 
 import static org.jboss.weld.util.reflection.Reflections.EMPTY_TYPES;
-import static org.jboss.weld.util.reflection.Reflections.cast;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -40,11 +39,9 @@
 import org.jboss.weld.logging.messages.XmlMessage;
 import org.jboss.weld.manager.BeanManagerImpl;
 import org.jboss.weld.metadata.MetadataImpl;
-import org.jboss.weld.util.collections.ViewProvider;
 import org.jboss.weld.util.collections.ListView;
 import org.jboss.weld.util.collections.SetView;
-
-;
+import org.jboss.weld.util.collections.ViewProvider;
 
 /**
  *
@@ -115,7 +112,7 @@ protected ViewProvider<Metadata<Class<?>>, Class<?>> getViewProvider() {
 
     @Override
     public Iterator<AnnotatedType<?>> getAnnotatedTypes() {
-        return cast(deployment.getBeanDeployer().getEnvironment().getClasses().iterator());
+        return deployment.getBeanDeployer().getEnvironment().getAnnotatedTypes().iterator();
     }
 
     @Override",2012-04-13T16:47:13Z,122
"@@ -28,12 +28,15 @@
 import java.util.Map;
 import java.util.Set;
 
+import javax.enterprise.inject.spi.AnnotatedType;
+
 import org.jboss.weld.bootstrap.api.Service;
 import org.jboss.weld.exceptions.IllegalStateException;
 import org.jboss.weld.introspector.WeldClass;
 import org.jboss.weld.logging.messages.BootstrapMessage;
 import org.jboss.weld.manager.BeanManagerImpl;
 import org.jboss.weld.manager.InjectionTargetValidator;
+import org.jboss.weld.resources.ClassTransformer;
 import org.jboss.weld.util.reflection.Reflections;
 
 /**
@@ -57,12 +60,13 @@ public EnumService(BeanManagerImpl manager) {
         this.instances = new HashSet<EnumInstanceContext<?>>();
     }
 
-    public <T extends Enum<?>> void addEnumClass(WeldClass<T> clazz) {
-        if (injectionTargets.containsKey(clazz.getJavaClass())) {
+    public <T extends Enum<?>> void addEnumClass(AnnotatedType<T> annotatedType) {
+        if (injectionTargets.containsKey(annotatedType.getJavaClass())) {
             return;
         }
-        EnumInjectionTarget<? extends Enum<?>> enumInjectionTarget = EnumInjectionTarget.of(clazz, manager);
-        injectionTargets.put(clazz.getJavaClass(), enumInjectionTarget);
+        WeldClass<T> weldClass = manager.getServices().get(ClassTransformer.class).loadClass(annotatedType);
+        EnumInjectionTarget<? extends Enum<?>> enumInjectionTarget = EnumInjectionTarget.of(weldClass, manager);
+        injectionTargets.put(weldClass.getJavaClass(), enumInjectionTarget);
         manager.getServices().get(InjectionTargetValidator.class).addInjectionTarget(enumInjectionTarget);
     }
 ",2012-04-13T16:47:13Z,123
"@@ -85,6 +85,7 @@
 import javax.enterprise.util.TypeLiteral;
 
 import org.jboss.weld.Container;
+import org.jboss.weld.annotated.backed.BackedAnnotatedType;
 import org.jboss.weld.bean.NewBean;
 import org.jboss.weld.bean.RIBean;
 import org.jboss.weld.bean.SessionBean;
@@ -1106,7 +1107,7 @@ public <T> WeldCreationalContext<T> createCreationalContext(Contextual<T> contex
     }
 
     public <T> AnnotatedType<T> createAnnotatedType(Class<T> type) {
-        return getServices().get(ClassTransformer.class).loadClass(type);
+        return BackedAnnotatedType.of(type);
     }
 
     public <X> Bean<? extends X> resolve(Set<Bean<? extends X>> beans) {",2012-04-13T16:47:13Z,4
"@@ -19,6 +19,8 @@
 import com.google.common.base.Function;
 import com.google.common.collect.ComputationException;
 import com.google.common.collect.MapMaker;
+
+import org.jboss.weld.annotated.backed.BackedAnnotatedType;
 import org.jboss.weld.bootstrap.api.Service;
 import org.jboss.weld.introspector.ForwardingAnnotatedType;
 import org.jboss.weld.introspector.WeldAnnotation;
@@ -180,6 +182,11 @@ public void clearAnnotationData(Class<? extends Annotation> annotationClass) {
 
     @SuppressWarnings(""unchecked"")
     public <T> WeldClass<T> loadClass(final AnnotatedType<T> clazz) {
+        // TODO
+        if (clazz instanceof BackedAnnotatedType<?>) {
+            return loadClass(clazz.getJavaClass());
+        }
+
         // don't wrap existing weld class, dup instances!
         if (clazz instanceof WeldClass) {
             return (WeldClass<T>) clazz;",2012-04-13T16:47:13Z,115
"@@ -73,6 +73,7 @@
 import javax.enterprise.inject.Requires;
 import javax.enterprise.inject.Typed;
 import javax.enterprise.inject.Veto;
+import javax.enterprise.inject.spi.AnnotatedConstructor;
 import javax.enterprise.inject.spi.AnnotatedType;
 import javax.enterprise.inject.spi.Bean;
 import javax.enterprise.inject.spi.BeanAttributes;
@@ -910,15 +911,24 @@ public static Set<Type> getTypedTypes(Map<Class<?>, Type> typeClosure, Class<?>
      * @param clazz The type to inspect
      * @return True if simple Web Bean, false otherwise
      */
-    public static boolean isTypeManagedBeanOrDecoratorOrInterceptor(WeldClass<?> clazz) {
-        Class<?> javaClass = clazz.getJavaClass();
-        return !javaClass.isEnum() && !Extension.class.isAssignableFrom(clazz.getJavaClass())
-                && !(clazz.isAnonymousClass() || (clazz.isMemberClass() && !clazz.isStatic())) && !Reflections.isParamerterizedTypeWithWildcard(javaClass)
-                && hasSimpleCdiConstructor(clazz);
+    public static boolean isTypeManagedBeanOrDecoratorOrInterceptor(AnnotatedType<?> annotatedType) {
+        Class<?> javaClass = annotatedType.getJavaClass();
+        return !javaClass.isEnum() && !Extension.class.isAssignableFrom(javaClass)
+                && !(javaClass.isAnonymousClass() || (javaClass.isMemberClass() && !Reflections.isStatic(javaClass)))
+                && !Reflections.isParamerterizedTypeWithWildcard(javaClass)
+                && hasSimpleCdiConstructor(annotatedType);
     }
 
-    public static boolean hasSimpleCdiConstructor(WeldClass<?> type) {
-        return type.getNoArgsWeldConstructor() != null || type.getWeldConstructors(Inject.class).size() > 0;
+    public static boolean hasSimpleCdiConstructor(AnnotatedType<?> type) {
+        for (AnnotatedConstructor<?> constructor : type.getConstructors()) {
+            if (constructor.getParameters().isEmpty()) {
+                return true;
+            }
+            if (constructor.isAnnotationPresent(Inject.class)) {
+                return true;
+            }
+        }
+        return false;
     }
 
     /**",2012-04-13T16:47:13Z,5
"@@ -25,6 +25,7 @@
 import java.util.List;
 import java.util.Set;
 
+import javax.context.Dependent;
 import javax.event.Event;
 import javax.event.Fires;
 import javax.inject.AmbiguousDependencyException;
@@ -107,7 +108,7 @@ public void validate()
             {
                throw new NullableDependencyException(""The injection point "" + injectionPoint + "" has nullable dependencies"");
             }
-            if (Beans.isPassivatingBean(bean) && !resolvedBean.isSerializable())
+            if (Beans.isPassivatingBean(bean) && !resolvedBean.isSerializable() && resolvedBean.getScopeType().equals(Dependent.class))
             {
                throw new UnserializableDependencyException(""The bean "" + bean + "" declares a passivating scopes but has non-serializable dependencies"");
             }",2009-03-24T23:33:28Z,124
"@@ -17,7 +17,6 @@
 
 package org.jboss.webbeans.bean;
 
-import java.io.Serializable;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import java.util.Arrays;
@@ -260,16 +259,14 @@ protected void initPrimitive()
       this.primitive = Reflections.isPrimitive(getType());
    }
 
-   protected boolean checkInjectionPointsAreSerializable()
+   private boolean checkInjectionPointsAreSerializable()
    {
-      // TODO CACHE THIS and rebuild on addBean
-      // TODO: a bit crude, don't check *all* injectionpoints, only those listed
-      // in the spec for passivation checks
+      boolean passivating = MetaDataCache.instance().getScopeModel(this.getScopeType()).isPassivating();
       for (AnnotatedInjectionPoint<?, ?> injectionPoint : getInjectionPoints())
       {
          Annotation[] bindings = injectionPoint.getMetaAnnotationsAsArray(BindingType.class);
          Bean<?> resolvedBean = manager.resolveByType(injectionPoint.getRawType(), bindings).iterator().next();
-         if (MetaDataCache.instance().getScopeModel(this.getScopeType()).isPassivating())
+         if (passivating)
          {
             if (Dependent.class.equals(resolvedBean.getScopeType()) && !resolvedBean.isSerializable() && (((injectionPoint instanceof AnnotatedField) && !((AnnotatedField<?>) injectionPoint).isTransient()) || (injectionPoint instanceof AnnotatedParameter)) )
             {
@@ -501,12 +498,12 @@ public boolean isPrimitive()
    @Override
    public boolean isSerializable()
    {
-      return _serializable;
+      return _serializable && checkInjectionPointsAreSerializable();
    }
 
    protected void initSerializable()
    {
-      _serializable = isPrimitive() || getTypes().contains(Serializable.class);
+      _serializable = Reflections.isSerializable(type);
    }
 
    /**",2009-03-24T23:33:28Z,125
"@@ -337,9 +337,9 @@ public void preDestroy(T instance)
    }
 
    @Override
-   public boolean isSerializable()
+   protected void initSerializable()
    {
-      return checkInjectionPointsAreSerializable();
+      super._serializable = true;
    }
 
    public InternalEjbDescriptor<T> getEjbDescriptor()",2009-03-24T23:33:28Z,126
"@@ -34,7 +34,6 @@
 import org.jboss.webbeans.injection.ParameterInjectionPoint;
 import org.jboss.webbeans.introspector.AnnotatedMethod;
 import org.jboss.webbeans.introspector.AnnotatedParameter;
-import org.jboss.webbeans.metadata.MetaDataCache;
 import org.jboss.webbeans.util.Names;
 
 /**
@@ -228,18 +227,7 @@ public String toString()
       buffer.append(""API types "" + getTypes() + "", binding types "" + getBindings());
       return buffer.toString();
    }
-   
-   @Override
-   public boolean isSerializable()
-   {
-      boolean passivatingScoped = MetaDataCache.instance().getScopeModel(scopeType).isPassivating();
-      if (passivatingScoped)
-      {
-         return checkInjectionPointsAreSerializable();
-      }
-      return true;
-   }
-   
+
    @Override
    public AbstractBean<?, ?> getSpecializedBean()
    {",2009-03-24T23:33:28Z,127
"@@ -78,5 +78,4 @@ public String getId()
       return id;
    }
 
-
 }",2009-03-24T23:33:28Z,128
"@@ -330,7 +330,7 @@ protected void checkType()
          throw new DefinitionException(""Simple bean "" + type + "" cannot be a parameterized type"");
       }
       boolean passivating = MetaDataCache.instance().getScopeModel(scopeType).isPassivating();
-      if (passivating && !Reflections.isSerializable(type))
+      if (passivating && !_serializable)
       {
          throw new DefinitionException(""Simple bean declaring a passivating scope must have a serializable implementation class "" + toString());
       }
@@ -509,24 +509,6 @@ public String toString()
       return buffer.toString();
    }
 
-   /**
-    * Indicates if the bean is serializable
-    * 
-    * @return true If serializable, false otherwise
-    */
-   @Override
-   public boolean isSerializable()
-   {
-      if (isDependent())
-      {
-         return Reflections.isSerializable(getType());
-      }
-      else
-      {
-         return checkInjectionPointsAreSerializable();
-      }
-   }
-
    @Override
    public SimpleBean<?> getSpecializedBean()
    {",2009-03-24T23:33:28Z,129
"@@ -555,26 +555,6 @@ public static boolean isProxy(Object instance)
       return instance.getClass().getName().indexOf(""_$$_javassist_"") > 0;
    }
 
-   /**
-    * Gets the type hierarchy for a class
-    * 
-    * A recursive function that adds the class to the set of type and then calls
-    * itself with the suprerclass as paramater until the top of the hierarchy is
-    * reached. For each steps, adds all interfaces of the class to the set.
-    * Since the data structure is a set, duplications are eliminated
-    * 
-    * 
-    * @deprecated see {@link HierarchyDiscovery} 
-    * @param clazz The class to examine
-    * @return The set of classes and interfaces in the hierarchy
-    * @see #getTypeHierachy(Class, Set)
-    */
-   @Deprecated
-   public static Set<Class<?>> getTypeHierachy(Class<?> clazz)
-   {
-      return new HierarchyDiscovery<Class<?>>(clazz).getFlattenedTypes();
-   }
-
    /**
     * Checks the bindingType to make sure the annotation was declared properly
     * as a binding type (annotated with @BindingType).
@@ -596,7 +576,7 @@ public static boolean isBindings(Annotation binding)
 
    public static boolean isSerializable(Class<?> clazz)
    {
-      return getTypeHierachy(clazz).contains(Serializable.class) || clazz.isPrimitive();
+      return clazz.isPrimitive() || Serializable.class.isAssignableFrom(clazz);
    }
 
 }",2009-03-24T23:33:28Z,130
"@@ -11,7 +11,8 @@
    express or implied. * See the License for the specific language
    governing permissions and * limitations under the License. */
 -->
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
     <parent>
         <artifactId>weld-core-parent</artifactId>
         <groupId>org.jboss.weld</groupId>
@@ -91,7 +92,7 @@
                             org.jboss.weld.manager;
                             org.jboss.weld.servlet;
                             org.jboss.weld.util;
-                            org.jboss.interceptor.*;
+                            org.jboss.weld.interceptor.*;
                             version=${osgi.version},
                             org.jboss.weld.el;
                             version=${osgi.version},
@@ -113,7 +114,8 @@
                              on foreign bundles.
                         -->
                         <Import-Package>
-                            org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=""[${slf4j.version},$${version;=+;${slf4j.version}})""; resolution:=optional,
+                            org.slf4j; org.slf4j.spi; org.slf4j.helpers;
+                            version=""[${slf4j.version},$${version;=+;${slf4j.version}})""; resolution:=optional,
                             ch.qos.cal10n; version=${cal10n.version}; resolution:=optional,
                             javax.interceptor.*, *;
                             resolution:=optional",2012-10-12T10:31:32Z,10
"@@ -46,8 +46,8 @@ public WeldCDIContainerFactory() {
         logger.debug(""Creation of a new Weld CDI container factory"");
         blackList = new HashSet<String>();
         blackList.add(""java.io.Serializable"");
-        blackList.add(""org.jboss.interceptor.proxy.LifecycleMixin"");
-        blackList.add(""org.jboss.interceptor.util.proxy.TargetInstanceProxy"");
+        blackList.add(""org.jboss.weld.interceptor.proxy.LifecycleMixin"");
+        blackList.add(""org.jboss.weld.interceptor.util.proxy.TargetInstanceProxy"");
         blackList.add(""javassist.util.proxy.ProxyObject"");
     }
 ",2012-10-12T10:31:32Z,131
"@@ -103,17 +103,17 @@ Import-Package org.jboss.weld.environment.osgi.api; \
                ch.qos.cal10n; \
                ch.qos.cal10n.verifier; \
                ch.qos.cal10n.util; version=0.7.2, \
-               org.jboss.interceptor.reader; \
-               org.jboss.interceptor.reader.cache; \
-               org.jboss.interceptor.spi.instance; \
-               org.jboss.interceptor.spi.context; \
-               org.jboss.interceptor.spi.model; \
-               org.jboss.interceptor.spi.metadata; \
-               org.jboss.interceptor.util; \
-               org.jboss.interceptor.util.proxy; \
-               org.jboss.interceptor.proxy; \
-               org.jboss.interceptor.proxy.javassist; \
-               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.interceptor.reader; \
+               org.jboss.weld.interceptor.reader.cache; \
+               org.jboss.weld.interceptor.spi.instance; \
+               org.jboss.weld.interceptor.spi.context; \
+               org.jboss.weld.interceptor.spi.model; \
+               org.jboss.weld.interceptor.spi.metadata; \
+               org.jboss.weld.interceptor.util; \
+               org.jboss.weld.interceptor.util.proxy; \
+               org.jboss.weld.interceptor.proxy; \
+               org.jboss.weld.interceptor.proxy.javassist; \
+               org.jboss.weld.interceptor.builder; \
                org.jboss.weld.manager.api; \
                org.jboss.weld.ejb.spi; \
                org.jboss.weld.ejb.spi.helpers; \
@@ -189,6 +189,6 @@ Import-Package org.jboss.weld.environment.osgi.api; \
                org.jboss.weld.environment.se.discovery; \
                org.jboss.weld.environment.se.discovery.url; \
                org.jboss.weld.environment.se.contexts; \
-               org.jboss.weld.messages; version=1.1.5
+               org.jboss.weld.messages; version=1.2.0-SNAPSHOT
 
 DynamicImport-Package *
\ No newline at end of file",2012-10-12T10:31:32Z,132
"@@ -97,17 +97,17 @@ Export-Package javax.el;version=2.2.0, \
                ch.qos.cal10n; \
                ch.qos.cal10n.verifier; \
                ch.qos.cal10n.util; version=0.7.2, \
-               org.jboss.interceptor.reader; \
-               org.jboss.interceptor.reader.cache; \
-               org.jboss.interceptor.spi.instance; \
-               org.jboss.interceptor.spi.context; \
-               org.jboss.interceptor.spi.model; \
-               org.jboss.interceptor.spi.metadata; \
-               org.jboss.interceptor.util; \
-               org.jboss.interceptor.util.proxy; \
-               org.jboss.interceptor.proxy; \
-               org.jboss.interceptor.proxy.javassist; \
-               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.interceptor.reader; \
+               org.jboss.weld.interceptor.reader.cache; \
+               org.jboss.weld.interceptor.spi.instance; \
+               org.jboss.weld.interceptor.spi.context; \
+               org.jboss.weld.interceptor.spi.model; \
+               org.jboss.weld.interceptor.spi.metadata; \
+               org.jboss.weld.interceptor.util; \
+               org.jboss.weld.interceptor.util.proxy; \
+               org.jboss.weld.interceptor.proxy; \
+               org.jboss.weld.interceptor.proxy.javassist; \
+               org.jboss.weld.interceptor.builder; \
                org.jboss.weld.manager.api; \
                org.jboss.weld.ejb.spi; \
                org.jboss.weld.ejb.spi.helpers; \
@@ -183,7 +183,7 @@ Export-Package javax.el;version=2.2.0, \
                org.jboss.weld.environment.se.discovery; \
                org.jboss.weld.environment.se.discovery.url; \
                org.jboss.weld.environment.se.contexts; \
-               org.jboss.weld.messages; version=1.1.5
+               org.jboss.weld.messages; version=1.2.0-SNAPSHOT
 
 
 DynamicImport-Package *",2012-10-12T10:31:32Z,133
"@@ -233,14 +233,15 @@ private void fireAllEvent(AbstractServiceEvent event, Event broadcaster,
       {
          try
          {
+            // here singleton issue
             broadcaster.select(eventClass,
-                               filteredServicesQualifiers(event,
-                                                          new SpecificationAnnotation(clazz),
-                                                          instance)).fire(event);
+               filteredServicesQualifiers(event,
+                  new SpecificationAnnotation(clazz),
+                  instance)).fire(event);
          }
          catch(Throwable t)
          {
-            t.printStackTrace();
+            //t.printStackTrace();
          }
       }
    }",2012-10-12T10:30:48Z,134
"@@ -95,13 +95,13 @@ public void startCDIOSGi() throws Exception {
 
     public void stopCDIOSGi() throws Exception {
         logger.info(""CDI-OSGi stop bundle management"");
-        started.set(false);
         for (Bundle bundle : context.getBundles()) {
             logger.trace(""Scanning {}"", bundle.getSymbolicName());
             if (managed.get(bundle.getBundleId()) != null) {
                 stopManagement(bundle);
             }
         }
+        started.set(false);
     }
 
     @Override
@@ -206,52 +206,30 @@ private void stopManagement(Bundle bundle) {
         boolean set = CDIOSGiExtension.currentBundle.get() != null;
         CDIOSGiExtension.currentBundle.set(bundle.getBundleId());
         CDIContainer holder = managed.get(bundle.getBundleId());
-        if (holder != null) {
-            BundleHolder bundleHolder = holder.getInstance().select(BundleHolder.class).get();
-            //if (bundleHolder.getState().equals(BundleState.VALID)) {
-                logger.trace(""Firing the BundleState.INVALID event"");
-                //bundleHolder.setState(BundleState.INVALID);
-                holder.getBeanManager().fireEvent(new Invalid());
-            //}
-            if(started.get()) {
-                factory().removeContainer(bundle);
-            }
-            logger.trace(""The container {} has been unregistered"",holder);
-            logger.trace(""Firing the BundleContainerEvents.BundleContainerShutdown event"");
-            holder.getBeanManager().fireEvent(new BundleContainerEvents.BundleContainerShutdown(bundle.getBundleContext()));
-
-            Collection<ServiceRegistration> regs = holder.getRegistrations();
-            logger.trace(""Unregistering the container registrations"");
-            /**for (ServiceRegistration reg : regs) {
+        if (started.get() && managed.containsKey(bundle.getBundleId())) {
+            if (holder != null) {
+                BundleHolder bundleHolder = holder.getInstance().select(BundleHolder.class).get();
                 try {
-                    reg.unregister();
-                } catch (IllegalStateException e) {// Ignore
-                    //logger.warn(""Unable to unregister a service"" + e.getCause());
-                }
-            }
-            try {
-                // unregistration for managed services. It should be done by the OSGi framework
-                logger.trace(""Unregistering the container managed services"");
-                RegistrationsHolderImpl regsHolder = holder.getInstance().select(RegistrationsHolderImpl.class).get();
-                for (ServiceRegistration r : regsHolder.getRegistrations()) {
-                    try {
-                        r.unregister();
-                    } catch (Exception e) {
-                        // the service is already unregistered if shutdown is called when bundle is stopped
-                        // but with a manual boostrap, you can't be sure
-                        //System.out.println(""Service already unregistered."");
+                    logger.trace(""Firing the BundleState.INVALID event"");
+                    holder.getBeanManager().fireEvent(new Invalid());
+                    logger.trace(""The container {} has been unregistered"",holder);
+                    logger.trace(""Firing the BundleContainerEvents.BundleContainerShutdown event"");
+                    // here singleton issue ?
+                    holder.getBeanManager().fireEvent(new BundleContainerEvents.BundleContainerShutdown(bundle.getBundleContext()));
+                } catch (Throwable t) {}
+                logger.trace(""Shutting down the container {}"", holder);
+                //holder.shutdown();
+                managed.remove(bundle.getBundleId());
+                if(started.get()) {
+                    if (factoryRef != null) {
+                        factory().removeContainer(bundle);
                     }
                 }
-            } catch (Throwable t) {
-                t.printStackTrace();
-            }   **/
-
-            logger.trace(""Shutting down the container {}"", holder);
-            holder.shutdown();
-            managed.remove(bundle.getBundleId());
-            logger.debug(""Bundle {} is unmanaged"", bundle.getSymbolicName());
-        } else {
-            logger.debug(""Bundle {} is not a bean bundle"", bundle.getSymbolicName());
+                holder.shutdown();
+                logger.debug(""Bundle {} is unmanaged"", bundle.getSymbolicName());
+            } else {
+                logger.debug(""Bundle {} is not a bean bundle"", bundle.getSymbolicName());
+            }
         }
         if (!set) {
             CDIOSGiExtension.currentBundle.remove();",2012-10-12T10:30:48Z,135
"@@ -2,8 +2,6 @@ Bundle-Activator org.jboss.weld.environment.osgi.impl.Activator
 
 Export-Package org.jboss.weld.environment.osgi.impl.extension.service;version=${pom.version}
 
-Embed-Dependency *; scope=compile; inline=true; artifactId=!org.osgi.core|org.osgi.compendium|weld-osgi-core-api|weld-osgi-core-spi
-
 Import-Package org.jboss.weld.environment.osgi.api; \
                org.jboss.weld.environment.osgi.api.annotation; \
                org.jboss.weld.environment.osgi.api.events; \
@@ -35,7 +33,61 @@ Import-Package org.jboss.weld.environment.osgi.api; \
                javassist.tools; \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
-               javassist.tools.web; version=3.14.0
+               javassist.tools.web; version=3.14.0, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29
+
 
 DynamicImport-Package *
 ",2012-10-12T10:30:48Z,136
"@@ -1,35 +0,0 @@
-<configuration debug=""false"">
-
-    <appender name=""Console"" class=""ch.qos.logback.core.ConsoleAppender"">
-        <filter class=""ch.qos.logback.classic.filter.ThresholdFilter"">
-            <level>info</level>
-        </filter>
-        <encoder>
-            <pattern>
-                %d{HH:mm:ss.SSS} %-15.-15([%-14.-14(%.-13thread])) %-5level %.-1000(%logger{25} - %msg) %n
-            </pattern>
-        </encoder>
-    </appender>
-
-    <appender name=""Log"" class=""ch.qos.logback.core.FileAppender"">
-        <file>cdi-osgi.log</file>
-        <append>false</append>
-        <filter class=""ch.qos.logback.classic.filter.ThresholdFilter"">
-            <level>trace</level>
-        </filter>
-        <encoder>
-            <pattern>
-                %d{HH:mm:ss.SSS} %-15.-15([%-14.-14(%.-13thread])) %-5level %.-1000(%logger{25} - %msg) %n %xEx{full}
-            </pattern>
-            <!--<pattern>
-                %d{HH:mm:ss.SSS} [%thread] %-5level %caller{1} %logger{25} - %msg%n %xEx{full}
-            </pattern>-->
-        </encoder>
-    </appender>
-
-    <root level=""trace"">
-        <appender-ref ref=""Console""/>
-        <appender-ref ref=""Log""/>
-    </root>
-
-</configuration>
\ No newline at end of file",2012-10-12T10:30:48Z,137
"@@ -84,11 +84,6 @@
          <artifactId>jsr250-api</artifactId>
       </dependency>
 
-      <dependency>
-         <groupId>com.google.guava</groupId>
-         <artifactId>guava</artifactId>
-      </dependency>
-
       <dependency>
          <groupId>org.jboss.interceptor</groupId>
          <artifactId>jboss-interceptor-spi</artifactId>
@@ -104,6 +99,11 @@
          <artifactId>jboss-interceptor-api</artifactId>
       </dependency>
 
+      <dependency>
+         <groupId>com.google.guava</groupId>
+         <artifactId>guava</artifactId>
+      </dependency>
+
       <dependency>
          <groupId>ch.qos.cal10n</groupId>
          <artifactId>cal10n-api</artifactId>",2012-10-12T10:30:48Z,138
"@@ -2,11 +2,7 @@ Bundle-Activator org.jboss.weld.environment.osgi.impl.WeldActivator
 
 Export-Package org.jboss.weld.environment.osgi.impl.embedded; version=${pom.version}
 
-Embed-Dependency *; scope=compile; inline=true; artifactId=!weld-osgi-core-spi|weld-osgi-core-extension|jboss-interceptor-api|javax.inject|jsr250-api|cdi-api|el-api
-
-Import-Package org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=1.6.1; resolution:=optional, \
-               ch.qos.cal10n; version=0.7.2; resolution:=optional, \
-               org.jboss.weld.environment.osgi.api; \
+Import-Package org.jboss.weld.environment.osgi.api; \
                org.jboss.weld.environment.osgi.api.annotation; \
                org.jboss.weld.environment.osgi.api.events; \
                org.jboss.weld.environment.osgi.spi;version=${pom.version}, \
@@ -20,6 +16,7 @@ Import-Package org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=1.6.1; resol
                javax.enterprise.inject.spi; \
                javax.enterprise.util; version=1.0.0, \
                javax.interceptor; version=1.1.0, \
+               org.osgi.framework, \
                javassist; \
                javassist.bytecode; \
                javassist.bytecode.analysis; \
@@ -36,6 +33,162 @@ Import-Package org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=1.6.1; resol
                javassist.tools; \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
-               javassist.tools.web; version=3.14.0
+               javassist.tools.web; version=3.14.0, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; \
+               org.slf4j.cal10n; \
+               org.slf4j.profiler; \
+               org.slf4j.agent; \
+               org.slf4j.instrumentation; \
+               org.slf4j.ext; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29, \
+               com.google.common.primitives; \
+               com.google.common.collect; \
+               com.google.common.util.concurrent; \
+               com.google.common.io; \
+               com.google.common.net; \
+               com.google.common.annotations; \
+               com.google.common.base; \
+               com.google.common.base.internal, \
+               ch.qos.cal10n; \
+               ch.qos.cal10n.verifier; \
+               ch.qos.cal10n.util; version=0.7.2, \
+               org.jboss.interceptor.reader; \
+               org.jboss.interceptor.reader.cache; \
+               org.jboss.interceptor.spi.instance; \
+               org.jboss.interceptor.spi.context; \
+               org.jboss.interceptor.spi.model; \
+               org.jboss.interceptor.spi.metadata; \
+               org.jboss.interceptor.util; \
+               org.jboss.interceptor.util.proxy; \
+               org.jboss.interceptor.proxy; \
+               org.jboss.interceptor.proxy.javassist; \
+               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.manager.api; \
+               org.jboss.weld.ejb.spi; \
+               org.jboss.weld.ejb.spi.helpers; \
+               org.jboss.weld.ejb.api; \
+               org.jboss.weld.context; \
+               org.jboss.weld.context.ejb; \
+               org.jboss.weld.context.unbound; \
+               org.jboss.weld.context.bound; \
+               org.jboss.weld.context.api; \
+               org.jboss.weld.context.http; \
+               org.jboss.weld.validation.spi; \
+               org.jboss.weld.transaction.spi; \
+               org.jboss.weld.servlet.api; \
+               org.jboss.weld.servlet.api.helpers; \
+               org.jboss.weld.resources.spi; \
+               org.jboss.weld.resources.spi.helpers; \
+               org.jboss.weld.bootstrap.spi; \
+               org.jboss.weld.bootstrap.spi.helpers; \
+               org.jboss.weld.bootstrap.api; \
+               org.jboss.weld.bootstrap.api.helpers; \
+               org.jboss.weld.serialization.spi; \
+               org.jboss.weld.serialization.spi.helpers; \
+               org.jboss.weld.security.spi; \
+               org.jboss.weld.injection.spi; \
+               org.jboss.weld.injection.spi.helpers; \
+               org.jboss.weld; \
+               org.jboss.weld.manager; \
+               org.jboss.weld.jsf; \
+               org.jboss.weld.ejb; \
+               org.jboss.weld.event; \
+               org.jboss.weld.introspector; \
+               org.jboss.weld.introspector.jlr; \
+               org.jboss.weld.context.beanstore; \
+               org.jboss.weld.context.beanstore.ejb; \
+               org.jboss.weld.context.beanstore.http; \
+               org.jboss.weld.context.cache; \
+               org.jboss.weld.context.conversation; \
+               org.jboss.weld.util; \
+               org.jboss.weld.util.dom; \
+               org.jboss.weld.util.reflection; \
+               org.jboss.weld.util.reflection.instantiation; \
+               org.jboss.weld.util.el; \
+               org.jboss.weld.util.bytecode; \
+               org.jboss.weld.util.collections; \
+               org.jboss.weld.exceptions; \
+               org.jboss.weld.metadata; \
+               org.jboss.weld.metadata.cache; \
+               org.jboss.weld.el; \
+               org.jboss.weld.xml; \
+               org.jboss.weld.servlet; \
+               org.jboss.weld.ws; \
+               org.jboss.weld.bean; \
+               org.jboss.weld.bean.builtin; \
+               org.jboss.weld.bean.builtin.ee; \
+               org.jboss.weld.bean.proxy; \
+               org.jboss.weld.bean.proxy.util; \
+               org.jboss.weld.bean.interceptor; \
+               org.jboss.weld.resources; \
+               org.jboss.weld.literal; \
+               org.jboss.weld.bootstrap; \
+               org.jboss.weld.bootstrap.events; \
+               org.jboss.weld.logging; \
+               org.jboss.weld.logging.messages; \
+               org.jboss.weld.serialization; \
+               org.jboss.weld.persistence; \
+               org.jboss.weld.resolution; \
+               org.jboss.weld.injection; \
+               org.jboss.weld.environment.se; \
+               org.jboss.weld.environment.se.events; \
+               org.jboss.weld.environment.se.bindings; \
+               org.jboss.weld.environment.se.threading; \
+               org.jboss.weld.environment.se.beans; \
+               org.jboss.weld.environment.se.discovery; \
+               org.jboss.weld.environment.se.discovery.url; \
+               org.jboss.weld.environment.se.contexts; \
+               org.jboss.weld.messages; version=1.1.3
 
 DynamicImport-Package *
\ No newline at end of file",2012-10-12T10:30:48Z,132
"@@ -34,43 +34,103 @@
          <email>matthieu.clochard@serli.com</email>
       </developer>
    </developers>
-    
-    <dependencies>
-    
-        <dependency>
-            <groupId>javax.inject</groupId>
-            <artifactId>javax.inject</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>org.jboss.interceptor</groupId>
-            <artifactId>jboss-interceptor-api</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>javax.el</groupId>
-            <artifactId>el-api</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>javax.enterprise</groupId>
-            <artifactId>cdi-api</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>org.javassist</groupId>
-            <artifactId>javassist</artifactId>
-        </dependency>
-        
-    </dependencies>
-
-    <build>
-        <plugins>
-            <plugin>
-                <groupId>org.apache.felix</groupId>
-                <artifactId>maven-bundle-plugin</artifactId>
-            </plugin>
-        </plugins>
-    </build>
-    
+
+   <dependencies>
+
+      <dependency>
+         <groupId>org.jboss.weld</groupId>
+         <artifactId>weld-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.weld.se</groupId>
+         <artifactId>weld-se-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.weld</groupId>
+         <artifactId>weld-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.weld</groupId>
+         <artifactId>weld-spi</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>javax.inject</groupId>
+         <artifactId>javax.inject</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>javax.el</groupId>
+         <artifactId>el-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>javax.enterprise</groupId>
+         <artifactId>cdi-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.interceptor</groupId>
+         <artifactId>jboss-interceptor-spi</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.interceptor</groupId>
+         <artifactId>jboss-interceptor-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.interceptor</groupId>
+         <artifactId>jboss-interceptor-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.javassist</groupId>
+         <artifactId>javassist</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>com.google.guava</groupId>
+         <artifactId>guava</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>ch.qos.cal10n</groupId>
+         <artifactId>cal10n-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.slf4j</groupId>
+         <artifactId>slf4j-ext</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.slf4j</groupId>
+         <artifactId>slf4j-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>ch.qos.logback</groupId>
+         <artifactId>logback-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>ch.qos.logback</groupId>
+         <artifactId>logback-classic</artifactId>
+      </dependency>
+
+   </dependencies>
+
+   <build>
+      <plugins>
+         <plugin>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>maven-bundle-plugin</artifactId>
+         </plugin>
+      </plugins>
+   </build>
+
 </project>",2012-10-12T10:30:48Z,139
"@@ -27,7 +27,164 @@ Export-Package javax.el;version=2.2.0, \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
                javassist.tools.web; version=3.14.0, \
-               com.sun.jdi
+               com.sun.jdi, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; \
+               org.slf4j.cal10n; \
+               org.slf4j.profiler; \
+               org.slf4j.agent; \
+               org.slf4j.instrumentation; \
+               org.slf4j.ext; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29, \
+               com.google.common.primitives; \
+               com.google.common.collect; \
+               com.google.common.util.concurrent; \
+               com.google.common.io; \
+               com.google.common.net; \
+               com.google.common.annotations; \
+               com.google.common.base; \
+               com.google.common.base.internal, \
+               ch.qos.cal10n; \
+               ch.qos.cal10n.verifier; \
+               ch.qos.cal10n.util; version=0.7.2, \
+               org.jboss.interceptor.reader; \
+               org.jboss.interceptor.reader.cache; \
+               org.jboss.interceptor.spi.instance; \
+               org.jboss.interceptor.spi.context; \
+               org.jboss.interceptor.spi.model; \
+               org.jboss.interceptor.spi.metadata; \
+               org.jboss.interceptor.util; \
+               org.jboss.interceptor.util.proxy; \
+               org.jboss.interceptor.proxy; \
+               org.jboss.interceptor.proxy.javassist; \
+               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.manager.api; \
+               org.jboss.weld.ejb.spi; \
+               org.jboss.weld.ejb.spi.helpers; \
+               org.jboss.weld.ejb.api; \
+               org.jboss.weld.context; \
+               org.jboss.weld.context.ejb; \
+               org.jboss.weld.context.unbound; \
+               org.jboss.weld.context.bound; \
+               org.jboss.weld.context.api; \
+               org.jboss.weld.context.http; \
+               org.jboss.weld.validation.spi; \
+               org.jboss.weld.transaction.spi; \
+               org.jboss.weld.servlet.api; \
+               org.jboss.weld.servlet.api.helpers; \
+               org.jboss.weld.resources.spi; \
+               org.jboss.weld.resources.spi.helpers; \
+               org.jboss.weld.bootstrap.spi; \
+               org.jboss.weld.bootstrap.spi.helpers; \
+               org.jboss.weld.bootstrap.api; \
+               org.jboss.weld.bootstrap.api.helpers; \
+               org.jboss.weld.serialization.spi; \
+               org.jboss.weld.serialization.spi.helpers; \
+               org.jboss.weld.security.spi; \
+               org.jboss.weld.injection.spi; \
+               org.jboss.weld.injection.spi.helpers; \
+               org.jboss.weld; \
+               org.jboss.weld.manager; \
+               org.jboss.weld.jsf; \
+               org.jboss.weld.ejb; \
+               org.jboss.weld.event; \
+               org.jboss.weld.introspector; \
+               org.jboss.weld.introspector.jlr; \
+               org.jboss.weld.context.beanstore; \
+               org.jboss.weld.context.beanstore.ejb; \
+               org.jboss.weld.context.beanstore.http; \
+               org.jboss.weld.context.cache; \
+               org.jboss.weld.context.conversation; \
+               org.jboss.weld.util; \
+               org.jboss.weld.util.dom; \
+               org.jboss.weld.util.reflection; \
+               org.jboss.weld.util.reflection.instantiation; \
+               org.jboss.weld.util.el; \
+               org.jboss.weld.util.bytecode; \
+               org.jboss.weld.util.collections; \
+               org.jboss.weld.exceptions; \
+               org.jboss.weld.metadata; \
+               org.jboss.weld.metadata.cache; \
+               org.jboss.weld.el; \
+               org.jboss.weld.xml; \
+               org.jboss.weld.servlet; \
+               org.jboss.weld.ws; \
+               org.jboss.weld.bean; \
+               org.jboss.weld.bean.builtin; \
+               org.jboss.weld.bean.builtin.ee; \
+               org.jboss.weld.bean.proxy; \
+               org.jboss.weld.bean.proxy.util; \
+               org.jboss.weld.bean.interceptor; \
+               org.jboss.weld.resources; \
+               org.jboss.weld.literal; \
+               org.jboss.weld.bootstrap; \
+               org.jboss.weld.bootstrap.events; \
+               org.jboss.weld.logging; \
+               org.jboss.weld.logging.messages; \
+               org.jboss.weld.serialization; \
+               org.jboss.weld.persistence; \
+               org.jboss.weld.resolution; \
+               org.jboss.weld.injection; \
+               org.jboss.weld.environment.se; \
+               org.jboss.weld.environment.se.events; \
+               org.jboss.weld.environment.se.bindings; \
+               org.jboss.weld.environment.se.threading; \
+               org.jboss.weld.environment.se.beans; \
+               org.jboss.weld.environment.se.discovery; \
+               org.jboss.weld.environment.se.discovery.url; \
+               org.jboss.weld.environment.se.contexts; \
+               org.jboss.weld.messages; version=1.1.3
+
 
 DynamicImport-Package *
 ",2012-10-12T10:30:48Z,133
"@@ -27,7 +27,164 @@ Export-Package javax.el;version=2.2.0, \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
                javassist.tools.web; version=3.14.0, \
-               com.sun.jdi
+               com.sun.jdi, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; \
+               org.slf4j.cal10n; \
+               org.slf4j.profiler; \
+               org.slf4j.agent; \
+               org.slf4j.instrumentation; \
+               org.slf4j.ext; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29, \
+               com.google.common.primitives; \
+               com.google.common.collect; \
+               com.google.common.util.concurrent; \
+               com.google.common.io; \
+               com.google.common.net; \
+               com.google.common.annotations; \
+               com.google.common.base; \
+               com.google.common.base.internal, \
+               ch.qos.cal10n; \
+               ch.qos.cal10n.verifier; \
+               ch.qos.cal10n.util; version=0.7.2, \
+               org.jboss.interceptor.reader; \
+               org.jboss.interceptor.reader.cache; \
+               org.jboss.interceptor.spi.instance; \
+               org.jboss.interceptor.spi.context; \
+               org.jboss.interceptor.spi.model; \
+               org.jboss.interceptor.spi.metadata; \
+               org.jboss.interceptor.util; \
+               org.jboss.interceptor.util.proxy; \
+               org.jboss.interceptor.proxy; \
+               org.jboss.interceptor.proxy.javassist; \
+               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.manager.api; \
+               org.jboss.weld.ejb.spi; \
+               org.jboss.weld.ejb.spi.helpers; \
+               org.jboss.weld.ejb.api; \
+               org.jboss.weld.context; \
+               org.jboss.weld.context.ejb; \
+               org.jboss.weld.context.unbound; \
+               org.jboss.weld.context.bound; \
+               org.jboss.weld.context.api; \
+               org.jboss.weld.context.http; \
+               org.jboss.weld.validation.spi; \
+               org.jboss.weld.transaction.spi; \
+               org.jboss.weld.servlet.api; \
+               org.jboss.weld.servlet.api.helpers; \
+               org.jboss.weld.resources.spi; \
+               org.jboss.weld.resources.spi.helpers; \
+               org.jboss.weld.bootstrap.spi; \
+               org.jboss.weld.bootstrap.spi.helpers; \
+               org.jboss.weld.bootstrap.api; \
+               org.jboss.weld.bootstrap.api.helpers; \
+               org.jboss.weld.serialization.spi; \
+               org.jboss.weld.serialization.spi.helpers; \
+               org.jboss.weld.security.spi; \
+               org.jboss.weld.injection.spi; \
+               org.jboss.weld.injection.spi.helpers; \
+               org.jboss.weld; \
+               org.jboss.weld.manager; \
+               org.jboss.weld.jsf; \
+               org.jboss.weld.ejb; \
+               org.jboss.weld.event; \
+               org.jboss.weld.introspector; \
+               org.jboss.weld.introspector.jlr; \
+               org.jboss.weld.context.beanstore; \
+               org.jboss.weld.context.beanstore.ejb; \
+               org.jboss.weld.context.beanstore.http; \
+               org.jboss.weld.context.cache; \
+               org.jboss.weld.context.conversation; \
+               org.jboss.weld.util; \
+               org.jboss.weld.util.dom; \
+               org.jboss.weld.util.reflection; \
+               org.jboss.weld.util.reflection.instantiation; \
+               org.jboss.weld.util.el; \
+               org.jboss.weld.util.bytecode; \
+               org.jboss.weld.util.collections; \
+               org.jboss.weld.exceptions; \
+               org.jboss.weld.metadata; \
+               org.jboss.weld.metadata.cache; \
+               org.jboss.weld.el; \
+               org.jboss.weld.xml; \
+               org.jboss.weld.servlet; \
+               org.jboss.weld.ws; \
+               org.jboss.weld.bean; \
+               org.jboss.weld.bean.builtin; \
+               org.jboss.weld.bean.builtin.ee; \
+               org.jboss.weld.bean.proxy; \
+               org.jboss.weld.bean.proxy.util; \
+               org.jboss.weld.bean.interceptor; \
+               org.jboss.weld.resources; \
+               org.jboss.weld.literal; \
+               org.jboss.weld.bootstrap; \
+               org.jboss.weld.bootstrap.events; \
+               org.jboss.weld.logging; \
+               org.jboss.weld.logging.messages; \
+               org.jboss.weld.serialization; \
+               org.jboss.weld.persistence; \
+               org.jboss.weld.resolution; \
+               org.jboss.weld.injection; \
+               org.jboss.weld.environment.se; \
+               org.jboss.weld.environment.se.events; \
+               org.jboss.weld.environment.se.bindings; \
+               org.jboss.weld.environment.se.threading; \
+               org.jboss.weld.environment.se.beans; \
+               org.jboss.weld.environment.se.discovery; \
+               org.jboss.weld.environment.se.discovery.url; \
+               org.jboss.weld.environment.se.contexts; \
+               org.jboss.weld.messages; version=1.1.3
+
 
 DynamicImport-Package *
 ",2012-10-12T10:30:48Z,140
"@@ -2,12 +2,12 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <parent>
+   <!--<parent>
       <groupId>org.jboss.weld.osgi.examples</groupId>
       <artifactId>weld-osgi-examples</artifactId>
       <version>1.1.3-SNAPSHOT</version>
       <relativePath>../pom.xml</relativePath>
-   </parent>
+   </parent>-->
     <modelVersion>4.0.0</modelVersion>
     <groupId>org.jboss.weld.osgi.examples</groupId>
     <artifactId>weld-osgi-container-equinox</artifactId>",2012-10-12T10:31:09Z,141
"@@ -2,302 +2,327 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <parent>
-      <groupId>org.jboss.weld.osgi.examples</groupId>
-      <artifactId>weld-osgi-examples</artifactId>
-      <version>1.1.3-SNAPSHOT</version>
-      <relativePath>../pom.xml</relativePath>
-   </parent>
-   <modelVersion>4.0.0</modelVersion>
-   <groupId>org.jboss.weld.osgi.examples</groupId>
-   <artifactId>weld-osgi-container-knopflerfish</artifactId>
-   <name>Weld OSGi (Examples Container Knopflerfish)</name>
-
-   <description>Standalone example for Weld-OSGi</description>
-
-   <url>http://www.seamframework.org/Weld</url>
-   <licenses>
-      <license>
-         <name>Apache License, Version 2.0</name>
-         <distribution>repo</distribution>
-         <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
-      </license>
-   </licenses>
-
-   <developers>
-      <developer>
-         <name>Mathieu Ancelin</name>
-         <email>mathieu.ancelin@serli.com</email>
-      </developer>
-      <developer>
-         <name>Matthieu Clochard</name>
-         <email>matthieu.clochard@serli.com</email>
-      </developer>
-   </developers>
-
-   <dependencies>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-divide</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-log</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-minus</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-plus</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-times</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-square</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-triangle</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-standalone</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-app</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-england</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-fwk</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-france</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-spain</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>javax.ws.rs</groupId>
-         <artifactId>jsr311-api</artifactId>
-         <version>1.1</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.codehaus.groovy</groupId>
-         <artifactId>groovy-all</artifactId>
-         <version>1.8.0-rc-3</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-spi</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-extension</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-mandatory</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-integration</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.osgi</groupId>
-         <artifactId>org.osgi.core</artifactId>
-         <version>4.2.0</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.main</artifactId>
-         <version>3.0.6</version>
-         <scope>provided</scope>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix.gogo</groupId>
-         <artifactId>org.apache.felix.gogo.commands</artifactId>
-         <version>0.4.0</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.bundlerepository</artifactId>
-         <version>1.2.1</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.shell.tui</artifactId>
-         <version>1.0.2</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.shell</artifactId>
-         <version>1.0.2</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.http.bundle</artifactId>
-         <version>2.0.4</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.log</artifactId>
-         <version>1.0.0</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.configadmin</artifactId>
-         <version>1.2.8</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld</groupId>
-         <artifactId>weld-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.se</groupId>
-         <artifactId>weld-se-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-   </dependencies>
-
-   <build>
-      <resources>
-         <resource>
-            <directory>src/main/resources</directory>
-             <filtering>true</filtering>
-         </resource>
-      </resources>
-      <plugins>
-         <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-antrun-plugin</artifactId>
-            <executions>
-               <execution>
-                  <id>compile</id>
-                  <phase>package</phase>
-                  <goals>
-                     <goal>run</goal>
-                  </goals>
-                  <configuration>
-                     <tasks>
-                        <copy file=""target/classes/config.properties"" tofile=""${project.build.directory}/config.properties""/>
-                        <copy file=""${maven.dependency.org.apache.felix.org.apache.felix.main.jar.path}"" tofile=""${project.build.directory}/felix.jar""/>
-                     </tasks>
-                  </configuration>
-               </execution>
-            </executions>
-         </plugin>
-
-         <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-assembly-plugin</artifactId>
-            <executions>
-               <execution>
-                  <id>create-executable-jar</id>
-                  <phase>package</phase>
-                  <goals>
-                     <goal>single</goal>
-                  </goals>
-                  <configuration>
-                     <descriptors>
-                        <descriptor>${basedir}/src/main/assembly/assembly.xml</descriptor>
-                     </descriptors>
-                     <finalName>${project.artifactId}-${project.version}</finalName>
-                  </configuration>
-               </execution>
-            </executions>
-         </plugin>
-      </plugins>
-   </build>
+    <!--<parent>
+        <groupId>org.jboss.weld.osgi.examples</groupId>
+        <artifactId>weld-osgi-examples</artifactId>
+        <version>1.1.3-SNAPSHOT</version>
+        <relativePath>../pom.xml</relativePath>
+    </parent>-->
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.jboss.weld.osgi.examples</groupId>
+    <artifactId>weld-osgi-container-knopflerfish</artifactId>
+    <version>1.1.3-SNAPSHOT</version>
+    <name>Weld OSGi (Examples Container Knopflerfish)</name>
+
+    <description>Standalone example for Weld-OSGi</description>
+
+    <url>http://www.seamframework.org/Weld</url>
+    <licenses>
+        <license>
+            <name>Apache License, Version 2.0</name>
+            <distribution>repo</distribution>
+            <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
+        </license>
+    </licenses>
+
+    <developers>
+        <developer>
+            <name>Mathieu Ancelin</name>
+            <email>mathieu.ancelin@serli.com</email>
+        </developer>
+        <developer>
+            <name>Matthieu Clochard</name>
+            <email>matthieu.clochard@serli.com</email>
+        </developer>
+    </developers>
+
+    <repositories>
+        <repository>
+            <releases>
+                <enabled>true</enabled>
+                <updatePolicy>never</updatePolicy>
+                <checksumPolicy>fail</checksumPolicy>
+            </releases>
+            <snapshots>
+                <enabled>true</enabled>
+                <updatePolicy>never</updatePolicy>
+                <checksumPolicy>fail</checksumPolicy>
+            </snapshots>
+            <id>Knopflerfish</id>
+            <name>Knopflerfish Releases Repository</name>
+            <url>http://www.knopflerfish.org/maven2</url>
+            <layout>default</layout>
+        </repository>
+    </repositories>
+
+    <dependencies>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-divide</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-log</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-minus</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-plus</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-times</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-square</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-triangle</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-standalone</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-app</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-england</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-fwk</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-france</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-spain</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>javax.ws.rs</groupId>
+            <artifactId>jsr311-api</artifactId>
+            <version>1.1</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.codehaus.groovy</groupId>
+            <artifactId>groovy-all</artifactId>
+            <version>1.8.0-rc-3</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-spi</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-extension</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-mandatory</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-integration</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld</groupId>
+            <artifactId>weld-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.se</groupId>
+            <artifactId>weld-se-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.osgi</groupId>
+            <artifactId>org.osgi.core</artifactId>
+            <version>4.2.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.osgi</groupId>
+            <artifactId>org.osgi.compendium</artifactId>
+            <version>4.2.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.knopflerfish</groupId>
+            <artifactId>framework</artifactId>
+            <version>5.1.14</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix.gogo</groupId>
+            <artifactId>org.apache.felix.gogo.commands</artifactId>
+            <version>0.4.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.bundlerepository</artifactId>
+            <version>1.2.1</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.shell.tui</artifactId>
+            <version>1.0.2</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.shell</artifactId>
+            <version>1.0.2</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.http.bundle</artifactId>
+            <version>2.0.4</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.log</artifactId>
+            <version>1.0.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.configadmin</artifactId>
+            <version>1.2.8</version>
+        </dependency>
+
+    </dependencies>
+
+    <build>
+        <resources>
+            <resource>
+                <directory>src/main/resources</directory>
+                <filtering>true</filtering>
+            </resource>
+        </resources>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-antrun-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>compile</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>run</goal>
+                        </goals>
+                        <configuration>
+                            <tasks>
+                                <copy file=""target/classes/config.xargs"" tofile=""${project.build.directory}/config.xargs""/>
+                                <copy file=""${maven.dependency.org.knopflerfish.framework.jar.path}"" tofile=""${project.build.directory}/knopflerfish.jar""/>
+                            </tasks>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-assembly-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>create-executable-jar</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>single</goal>
+                        </goals>
+                        <configuration>
+                            <descriptors>
+                                <descriptor>${basedir}/src/main/assembly/assembly.xml</descriptor>
+                            </descriptors>
+                            <finalName>${project.artifactId}-${project.version}</finalName>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+        </plugins>
+    </build>
 
 </project>",2012-10-12T10:31:09Z,142
"@@ -34,30 +34,25 @@
                 <include>org.jboss.weld.osgi:weld-osgi-core-spi</include>
                 <include>org.jboss.weld.osgi:weld-osgi-core-extension</include>
                 <include>org.jboss.weld.osgi:weld-osgi-core-mandatory</include>
+                <include>org.osgi:org.osgi.compendium</include>
                 <include>org.apache.felix:org.apache.felix.bundlerepository</include>
                 <include>org.apache.felix:org.apache.felix.shell.tui</include>
                 <include>org.apache.felix:org.apache.felix.shell</include>
                 <include>org.apache.felix:org.apache.felix.http.bundle</include>
                 <include>org.apache.felix:org.apache.felix.log</include>
                 <include>org.apache.felix:org.apache.felix.configadmin</include>
+                <include>org.codehaus.groovy:groovy-all</include>
                 <include>javax.ws.rs:jsr311-api</include>
             </includes>
         </dependencySet>
-        <dependencySet>
-            <useProjectArtifact>false</useProjectArtifact>
-            <outputDirectory></outputDirectory>
-            <includes>
-                <include>org.apache.felix:org.apache.felix.main</include>
-            </includes>
-        </dependencySet>
     </dependencySets>
     <files>
         <file>
-            <source>${project.build.directory}/felix.jar</source>
-            <outputDirectory>bin</outputDirectory>
+            <source>${project.build.directory}/knopflerfish.jar</source>
+            <outputDirectory></outputDirectory>
         </file>
         <file>
-            <source>${project.build.directory}/config.properties</source>
+            <source>${project.build.directory}/config.xargs</source>
             <outputDirectory>conf</outputDirectory>
         </file>
     </files>",2012-10-12T10:31:09Z,143
"@@ -1,49 +0,0 @@
-org.osgi.framework.storage.clean=onFirstInit
-
-felix.log.level=1
-
-org.osgi.framework.bootdelegation=sun.reflect
-
-felix.auto.install=  \
-file:modules/weld-osgi-core-api-${project.version}.jar \
-file:modules/weld-osgi-core-spi-${project.version}.jar \
-file:modules/weld-osgi-core-mandatory-${project.version}.jar \
-file:modules/weld-osgi-paint-api-${project.version}.jar  \
-file:modules/weld-osgi-paint-core-${project.version}.jar \
-file:modules/weld-osgi-paint-triangle-${project.version}.jar  \
-file:modules/weld-osgi-paint-square-${project.version}.jar  \
-file:modules/weld-osgi-calculator-api-${project.version}.jar  \
-file:modules/weld-osgi-calculator-core-${project.version}.jar  \
-file:modules/weld-osgi-calculator-log-${project.version}.jar  \
-file:modules/weld-osgi-calculator-divide-${project.version}.jar  \
-file:modules/weld-osgi-calculator-minus-${project.version}.jar  \
-file:modules/weld-osgi-calculator-plus-${project.version}.jar  \
-file:modules/weld-osgi-calculator-times-${project.version}.jar  \
-file:modules/weld-osgi-web-api-${project.version}.jar  \
-file:modules/weld-osgi-web-fwk-${project.version}.jar \
-file:modules/weld-osgi-web-france-${project.version}.jar  \
-file:modules/weld-osgi-web-spain-${project.version}.jar  \
-file:modules/weld-osgi-web-england-${project.version}.jar  \
-file:modules/weld-osgi-web-app-${project.version}.jar  \
-file:modules/weld-osgi-standalone-${project.version}.jar  \
-file:modules/jsr311-api-1.1.jar \
-file:modules/org.apache.felix.gogo.commands-0.4.0.jar  \
-file:modules/org.apache.felix.gogo.runtime-0.4.0.jar
-
-felix.auto.start= \
-file:modules/weld-osgi-core-extension-${project.version}.jar \
-file:modules/weld-osgi-core-integration-${project.version}.jar \
-file:modules/org.apache.felix.configadmin-1.2.8.jar \
-file:modules/org.apache.felix.http.bundle-2.0.4.jar \
-file:modules/org.apache.felix.log-1.0.0.jar \
-file:modules/org.apache.felix.shell-1.0.2.jar \
-file:modules/org.apache.felix.shell.tui-1.0.2.jar \
-file:modules/org.apache.felix.bundlerepository-1.2.1.jar
-
-org.osgi.service.http.port=9000
-org.apache.felix.http.whiteboardEnabled=true
-org.apache.felix.http.jettyEnabled=true
-org.apache.felix.http=true
-
-osgi.shell.telnet=on
-obr.repository.url=http://felix.apache.org/obr/releases.xml",2012-10-12T10:31:09Z,144
"@@ -0,0 +1,51 @@
+-init
+-launch
+
+-F org.osgi.framework.storage.clean=onFirstInit
+-F felix.log.level=1
+-F org.osgi.framework.bootdelegation=sun.reflect
+
+-install modules/weld-osgi-core-api-${project.version}.jar
+-install modules/weld-osgi-core-spi-${project.version}.jar
+-install modules/weld-osgi-core-mandatory-${project.version}.jar
+-install modules/weld-osgi-paint-api-${project.version}.jar
+-install modules/weld-osgi-paint-core-${project.version}.jar
+-install modules/weld-osgi-paint-triangle-${project.version}.jar
+-install modules/weld-osgi-paint-square-${project.version}.jar
+-install modules/weld-osgi-calculator-api-${project.version}.jar
+-install modules/weld-osgi-calculator-core-${project.version}.jar
+-install modules/weld-osgi-calculator-log-${project.version}.jar
+-install modules/weld-osgi-calculator-divide-${project.version}.jar
+-install modules/weld-osgi-calculator-minus-${project.version}.jar
+-install modules/weld-osgi-calculator-plus-${project.version}.jar
+-install modules/weld-osgi-calculator-times-${project.version}.jar
+-install modules/weld-osgi-web-api-${project.version}.jar
+-install modules/weld-osgi-web-fwk-${project.version}.jar
+-install modules/weld-osgi-web-france-${project.version}.jar
+-install modules/weld-osgi-web-spain-${project.version}.jar
+-install modules/weld-osgi-web-england-${project.version}.jar
+-install modules/weld-osgi-web-app-${project.version}.jar
+-install modules/weld-osgi-standalone-${project.version}.jar
+-install modules/groovy-all-1.8.0-rc-3.jar
+-install modules/jsr311-api-1.1.jar
+-install modules/org.apache.felix.gogo.commands-0.4.0.jar
+-install modules/org.apache.felix.gogo.runtime-0.4.0.jar
+-install modules/org.osgi.compendium-4.2.0.jar
+
+
+-istart modules/weld-osgi-core-extension-${project.version}.jar
+-istart modules/weld-osgi-core-integration-${project.version}.jar
+-istart modules/org.apache.felix.configadmin-1.2.8.jar
+-istart modules/org.apache.felix.http.bundle-2.0.4.jar
+-istart modules/org.apache.felix.log-1.0.0.jar
+-istart modules/org.apache.felix.shell-1.0.2.jar
+-istart modules/org.apache.felix.shell.tui-1.0.2.jar
+-istart modules/org.apache.felix.bundlerepository-1.2.1.jar
+
+-F org.osgi.service.http.port=9000
+-F org.apache.felix.http.whiteboardEnabled=true
+-F org.apache.felix.http.jettyEnabled=true
+-F org.apache.felix.http=true
+
+-F osgi.shell.telnet=on
+-F obr.repository.url=http://felix.apache.org/obr/releases.xml
\ No newline at end of file",2012-10-12T10:31:09Z,145
"@@ -1,150 +1,150 @@
 
 <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <modelVersion>4.0.0</modelVersion>
-   <groupId>org.jboss.weld.osgi</groupId>
-   <artifactId>weld-osgi-parent</artifactId>
-   <name>Weld OSGi (Parent)</name>
-   <packaging>pom</packaging>
-
-   <parent>
-      <groupId>org.jboss.weld</groupId>
-      <artifactId>weld-core-parent</artifactId>
-      <relativePath>../../parent/pom.xml</relativePath>
-      <version>1.1.3-SNAPSHOT</version>
-   </parent>
-
-   <licenses>
-      <license>
-         <name>Apache License, Version 2.0</name>
-         <distribution>repo</distribution>
-         <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
-      </license>
-   </licenses>
-   <url>http://www.seamframework.org/Weld</url>
-
-   <developers>
-      <developer>
-         <name>Mathieu Ancelin</name>
-         <email>mathieu.ancelin@serli.com</email>
-      </developer>
-      <developer>
-         <name>Matthieu Clochard</name>
-         <email>matthieu.clochard@serli.com</email>
-      </developer>
-   </developers>
-
-   <modules>
-      <module>core</module>
-      <module>examples</module>
-   </modules>
-
-   <profiles>
-      <profile>
-         <id>weld-osgi-docs</id>
-         <modules>
-            <module>docs</module>
-         </modules>
-      </profile>
-      <profile>
-         <id>weld-osgi-tests</id>
-         <modules>
-            <module>core</module>
-            <module>tests</module>
-         </modules>
-      </profile>
-   </profiles>
-
-   <description>
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.jboss.weld.osgi</groupId>
+    <artifactId>weld-osgi-parent</artifactId>
+    <name>Weld OSGi (Parent)</name>
+    <packaging>pom</packaging>
+
+    <parent>
+        <groupId>org.jboss.weld</groupId>
+        <artifactId>weld-core-parent</artifactId>
+        <relativePath>../../parent/pom.xml</relativePath>
+        <version>1.1.3-SNAPSHOT</version>
+    </parent>
+
+    <licenses>
+        <license>
+            <name>Apache License, Version 2.0</name>
+            <distribution>repo</distribution>
+            <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
+        </license>
+    </licenses>
+    <url>http://www.seamframework.org/Weld</url>
+
+    <developers>
+        <developer>
+            <name>Mathieu Ancelin</name>
+            <email>mathieu.ancelin@serli.com</email>
+        </developer>
+        <developer>
+            <name>Matthieu Clochard</name>
+            <email>matthieu.clochard@serli.com</email>
+        </developer>
+    </developers>
+
+    <modules>
+        <module>core</module>
+        <module>examples</module>
+    </modules>
+
+    <profiles>
+        <profile>
+            <id>weld-osgi-docs</id>
+            <modules>
+                <module>docs</module>
+            </modules>
+        </profile>
+        <profile>
+            <id>weld-osgi-tests</id>
+            <modules>
+                <module>core</module>
+                <module>tests</module>
+            </modules>
+        </profile>
+    </profiles>
+
+    <description>
       Support for Weld in OSGi Containers
-   </description>
-
-   <properties>
-      <osgi.version>4.2.0</osgi.version>
-      <javax.inject.version>1</javax.inject.version>
-      <javax.el.version>2.2</javax.el.version>
-      <jsr250.api>1.0</jsr250.api>
-      <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
-      <weld.api.version>1.2-SNAPSHOT</weld.api.version>
-      <slf4j.version>1.6.1</slf4j.version>
-      <logback.version>0.9.29</logback.version>
-   </properties>
-
-   <dependencyManagement>
-      <dependencies>
-
-         <dependency>
-            <groupId>org.osgi</groupId>
-            <artifactId>org.osgi.core</artifactId>
-            <version>${osgi.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.osgi</groupId>
-            <artifactId>org.osgi.compendium</artifactId>
-            <version>${osgi.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.jboss.weld</groupId>
-            <artifactId>weld-api</artifactId>
-            <version>${weld.api.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.jboss.weld</groupId>
-            <artifactId>weld-spi</artifactId>
-            <version>${weld.api.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>javax.inject</groupId>
-            <artifactId>javax.inject</artifactId>
-            <version>${javax.inject.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>javax.el</groupId>
-            <artifactId>el-api</artifactId>
-            <version>${javax.el.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>javax.annotation</groupId>
-            <artifactId>jsr250-api</artifactId>
-            <version>${jsr250.api}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.jboss.interceptor</groupId>
-            <artifactId>jboss-interceptor-api</artifactId>
-            <version>${jboss.interceptors.api.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-ext</artifactId>
-            <version>${slf4j.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-api</artifactId>
-            <version>${slf4j.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>ch.qos.logback</groupId>
-            <artifactId>logback-core</artifactId>
-            <version>${logback.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>ch.qos.logback</groupId>
-            <artifactId>logback-classic</artifactId>
-            <version>${logback.version}</version>
-         </dependency>
-
-      </dependencies>
-   </dependencyManagement>
+    </description>
+
+    <properties>
+        <osgi.version>4.2.0</osgi.version>
+        <javax.inject.version>1</javax.inject.version>
+        <javax.el.version>2.2</javax.el.version>
+        <jsr250.api>1.0</jsr250.api>
+        <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
+        <weld.api.version>1.2-SNAPSHOT</weld.api.version>
+        <slf4j.version>1.6.1</slf4j.version>
+        <logback.version>0.9.29</logback.version>
+    </properties>
+    
+    <dependencyManagement>
+        <dependencies>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.core</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.compendium</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld</groupId>
+                <artifactId>weld-api</artifactId>
+                <version>${weld.api.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld</groupId>
+                <artifactId>weld-spi</artifactId>
+                <version>${weld.api.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.inject</groupId>
+                <artifactId>javax.inject</artifactId>
+                <version>${javax.inject.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.el</groupId>
+                <artifactId>el-api</artifactId>
+                <version>${javax.el.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.annotation</groupId>
+                <artifactId>jsr250-api</artifactId>
+                <version>${jsr250.api}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.interceptor</groupId>
+                <artifactId>jboss-interceptor-api</artifactId>
+                <version>${jboss.interceptors.api.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.slf4j</groupId>
+                <artifactId>slf4j-ext</artifactId>
+                <version>${slf4j.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.slf4j</groupId>
+                <artifactId>slf4j-api</artifactId>
+                <version>${slf4j.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-core</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-classic</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
+        </dependencies>
+    </dependencyManagement>
 
 </project>",2012-10-12T10:31:09Z,146
"@@ -0,0 +1,4 @@
+#!/bin/sh
+
+cd ./examples/container-knopflerfish/target/weld-osgi-container-knopflerfish-1.1.3-SNAPSHOT-all/weld-osgi-container-knopflerfish-1.1.3-SNAPSHOT/
+java -jar knopflerfish.jar -xargs conf/config.xargs",2012-10-12T10:31:09Z,147
"@@ -48,13 +48,10 @@ public static void waitForEnvironment(BundleContext context) throws InterruptedE
         while(!ready) {
             ready = true;
             for(Bundle b : context.getBundles()) {
-                System.out.println(""wait for bundle "" + b.getSymbolicName());
                 if(b.getState() != Bundle.ACTIVE) {
                     ready = false;
                     break;
                 }
-                System.out.println(""bundle "" + b.getSymbolicName() + "" is ready"");
-                Thread.sleep(500);
             }
             Thread.sleep(500);
         }",2012-10-12T10:31:09Z,148
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
@@ -29,18 +46,15 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-extension</artifactId>
-            <version>${project.version}</version>
         </dependency>
         <dependency>
             <groupId>javax</groupId>
             <artifactId>javaee-web-api</artifactId>
-            <version>6.0</version>
             <scope>provided</scope>
         </dependency>
         <dependency>
             <groupId>org.osgi</groupId>
             <artifactId>org.osgi.core</artifactId>
-            <version>4.2.0</version>
             <scope>provided</scope>
         </dependency>
 ",2012-10-12T10:31:59Z,149
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
@@ -39,13 +56,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>",2012-10-12T10:31:59Z,150
"@@ -46,19 +46,16 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-extension</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>",2012-10-12T10:31:59Z,138
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
@@ -34,7 +51,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,151
"@@ -75,85 +75,4 @@
         Support for Weld in OSGi Containers
     </description>
 
-    <properties>
-        <osgi.version>4.2.0</osgi.version>
-        <javax.inject.version>1</javax.inject.version>
-        <javax.el.version>2.2</javax.el.version>
-        <jsr250.api>1.0</jsr250.api>
-        <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
-        <logback.version>0.9.29</logback.version>
-    </properties>
-
-    <dependencyManagement>
-        <dependencies>
-
-            <dependency>
-                <groupId>org.osgi</groupId>
-                <artifactId>org.osgi.core</artifactId>
-                <version>${osgi.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.osgi</groupId>
-                <artifactId>org.osgi.compendium</artifactId>
-                <version>${osgi.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.jboss.weld</groupId>
-                <artifactId>weld-api</artifactId>
-                <version>${weld.api.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.jboss.weld</groupId>
-                <artifactId>weld-spi</artifactId>
-                <version>${weld.api.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>javax.inject</groupId>
-                <artifactId>javax.inject</artifactId>
-                <version>${javax.inject.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>javax.el</groupId>
-                <artifactId>el-api</artifactId>
-                <version>${javax.el.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>javax.annotation</groupId>
-                <artifactId>jsr250-api</artifactId>
-                <version>${jsr250.api}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.slf4j</groupId>
-                <artifactId>slf4j-ext</artifactId>
-                <version>${slf4j.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.slf4j</groupId>
-                <artifactId>slf4j-api</artifactId>
-                <version>${slf4j.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>ch.qos.logback</groupId>
-                <artifactId>logback-core</artifactId>
-                <version>${logback.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>ch.qos.logback</groupId>
-                <artifactId>logback-classic</artifactId>
-                <version>${logback.version}</version>
-            </dependency>
-
-        </dependencies>
-    </dependencyManagement>
-
 </project>",2012-10-12T10:31:59Z,146
"@@ -58,7 +58,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,152
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,13 +58,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,153
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,13 +58,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,154
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -46,13 +63,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,155
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">",2012-10-12T10:31:59Z,156
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,7 +58,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,157
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">",2012-10-12T10:31:59Z,158
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,7 +58,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-innerscanner</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,159
"@@ -33,11 +33,6 @@
 
     <description>Integration tests launcher for Weld-OSGi</description>
 
-    <properties>
-        <version.pax.exam>2.5.0</version.pax.exam>
-        <version.org.apache.felix>4.0.3</version.org.apache.felix>
-    </properties>
-
     <url>http://www.seamframework.org/Weld</url>
     <licenses>
         <license>
@@ -69,28 +64,24 @@
         <dependency>
             <groupId>org.ops4j.pax.exam</groupId>
             <artifactId>pax-exam-junit4</artifactId>
-            <version>${version.pax.exam}</version>
             <scope>test</scope>
         </dependency>
 
         <dependency>
             <groupId>org.ops4j.pax.exam</groupId>
             <artifactId>pax-exam-container-native</artifactId>
-            <version>${version.pax.exam}</version>
             <scope>test</scope>
         </dependency>
 
         <dependency>
             <groupId>org.ops4j.pax.exam</groupId>
             <artifactId>pax-exam-link-mvn</artifactId>
-            <version>${version.pax.exam}</version>
             <scope>test</scope>
         </dependency>
 
         <dependency>
             <groupId>org.apache.felix</groupId>
             <artifactId>org.apache.felix.framework</artifactId>
-            <version>${version.org.apache.felix}</version>
             <scope>test</scope>
         </dependency>
 
@@ -107,37 +98,31 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-extension</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-integration</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld</groupId>
             <artifactId>weld-core</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.se</groupId>
             <artifactId>weld-se-core</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
@@ -208,49 +193,41 @@
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle2</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle3</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-importing</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-scanner</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-innerscanner</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-cdi-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-life-cycle</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,160
"@@ -1,4 +1,5 @@
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
     <modelVersion>4.0.0</modelVersion>
     <groupId>org.jboss.weld</groupId>
     <artifactId>weld-core-parent</artifactId>
@@ -69,6 +70,17 @@
         <selenium.maven.plugin.version>1.0.1</selenium.maven.plugin.version>
         <slf4j.version>1.6.1</slf4j.version>
         <testng.version>5.10</testng.version>
+        <osgi.version>4.2.0</osgi.version>
+        <!-- Weld OSGi deps -->
+        <javax.inject.version>1</javax.inject.version>
+        <javax.web.version>6.0</javax.web.version>
+        <javax.el.version>2.2</javax.el.version>
+        <jsr250.api>1.0</jsr250.api>
+        <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
+        <logback.version>0.9.29</logback.version>
+        <pax.exam.version>2.5.0</pax.exam.version>
+        <org.apache.felix.version>4.0.3</org.apache.felix.version>
+        <!-- Weld API -->
         <weld.api.version>1.2.0.Beta1</weld.api.version>
     </properties>
 
@@ -215,12 +227,6 @@
                 <version>${arquillian.version}</version>
             </dependency>
 
-            <dependency>
-                <groupId>org.jboss.arquillian.container</groupId>
-                <artifactId>arquillian-container-test-spi</artifactId>
-                <version>${arquillian.version}</version>
-            </dependency>
-
             <dependency>
                 <groupId>org.jboss.arquillian.container</groupId>
                 <artifactId>arquillian-weld-ee-embedded-1.1</artifactId>
@@ -357,8 +363,8 @@
             </dependency>
 
             <dependency>
-	            <groupId>org.jboss.spec.javax.ws.rs</groupId>
-	            <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
+                <groupId>org.jboss.spec.javax.ws.rs</groupId>
+                <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
                 <version>${jboss.spec.jaxrs.version}</version>
             </dependency>
 
@@ -448,6 +454,154 @@
                 <version>${project.version}</version>
             </dependency>
 
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-api</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-extension</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-spi</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-integration</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-bundle1</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-bundle2</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-bundle3</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-importing</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-scanner</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-innerscanner</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-cdi-spi</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-life-cycle</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.ops4j.pax.exam</groupId>
+                <artifactId>pax-exam-junit4</artifactId>
+                <version>${pax.exam.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.ops4j.pax.exam</groupId>
+                <artifactId>pax-exam-container-native</artifactId>
+                <version>${pax.exam.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.ops4j.pax.exam</groupId>
+                <artifactId>pax-exam-link-mvn</artifactId>
+                <version>${pax.exam.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.apache.felix</groupId>
+                <artifactId>org.apache.felix.framework</artifactId>
+                <version>${org.apache.felix.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.core</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.compendium</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.inject</groupId>
+                <artifactId>javax.inject</artifactId>
+                <version>${javax.inject.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax</groupId>
+                <artifactId>javaee-web-api</artifactId>
+                <version>${javax.web.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.el</groupId>
+                <artifactId>el-api</artifactId>
+                <version>${javax.el.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.annotation</groupId>
+                <artifactId>jsr250-api</artifactId>
+                <version>${jsr250.api}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-core</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-classic</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
             <dependency>
                 <groupId>org.jboss.shrinkwrap</groupId>
                 <artifactId>shrinkwrap-impl-base</artifactId>
@@ -536,7 +690,7 @@
                         <configLocation>weld-checkstyle/checkstyle.xml</configLocation>
                         <consoleOutput>true</consoleOutput>
                         <failsOnError>true</failsOnError>
-                        <useFile />
+                        <useFile/>
                     </configuration>
                     <dependencies>
                         <dependency>
@@ -574,7 +728,7 @@
                                         </goals>
                                     </pluginExecutionFilter>
                                     <action>
-                                        <ignore />
+                                        <ignore/>
                                     </action>
                                 </pluginExecution>
                             </pluginExecutions>
@@ -586,10 +740,10 @@
                     <artifactId>maven-compiler-plugin</artifactId>
                     <version>2.3.2</version>
                     <configuration>
-                       <source>1.6</source>
-                       <target>1.6</target>
+                        <source>1.6</source>
+                        <target>1.6</target>
                     </configuration>
-                 </plugin>
+                </plugin>
             </plugins>
 
         </pluginManagement>",2012-10-12T10:31:59Z,161
"@@ -11,7 +11,8 @@
    express or implied. * See the License for the specific language
    governing permissions and * limitations under the License. */
 -->
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
     <parent>
         <artifactId>weld-core-parent</artifactId>
         <groupId>org.jboss.weld</groupId>
@@ -91,7 +92,7 @@
                             org.jboss.weld.manager;
                             org.jboss.weld.servlet;
                             org.jboss.weld.util;
-                            org.jboss.interceptor.*;
+                            org.jboss.weld.interceptor.*;
                             version=${osgi.version},
                             org.jboss.weld.el;
                             version=${osgi.version},
@@ -113,7 +114,8 @@
                              on foreign bundles.
                         -->
                         <Import-Package>
-                            org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=""[${slf4j.version},$${version;=+;${slf4j.version}})""; resolution:=optional,
+                            org.slf4j; org.slf4j.spi; org.slf4j.helpers;
+                            version=""[${slf4j.version},$${version;=+;${slf4j.version}})""; resolution:=optional,
                             ch.qos.cal10n; version=${cal10n.version}; resolution:=optional,
                             javax.interceptor.*, *;
                             resolution:=optional",2012-10-12T10:31:32Z,10
"@@ -46,8 +46,8 @@ public WeldCDIContainerFactory() {
         logger.debug(""Creation of a new Weld CDI container factory"");
         blackList = new HashSet<String>();
         blackList.add(""java.io.Serializable"");
-        blackList.add(""org.jboss.interceptor.proxy.LifecycleMixin"");
-        blackList.add(""org.jboss.interceptor.util.proxy.TargetInstanceProxy"");
+        blackList.add(""org.jboss.weld.interceptor.proxy.LifecycleMixin"");
+        blackList.add(""org.jboss.weld.interceptor.util.proxy.TargetInstanceProxy"");
         blackList.add(""javassist.util.proxy.ProxyObject"");
     }
 ",2012-10-12T10:31:32Z,131
"@@ -103,17 +103,17 @@ Import-Package org.jboss.weld.environment.osgi.api; \
                ch.qos.cal10n; \
                ch.qos.cal10n.verifier; \
                ch.qos.cal10n.util; version=0.7.2, \
-               org.jboss.interceptor.reader; \
-               org.jboss.interceptor.reader.cache; \
-               org.jboss.interceptor.spi.instance; \
-               org.jboss.interceptor.spi.context; \
-               org.jboss.interceptor.spi.model; \
-               org.jboss.interceptor.spi.metadata; \
-               org.jboss.interceptor.util; \
-               org.jboss.interceptor.util.proxy; \
-               org.jboss.interceptor.proxy; \
-               org.jboss.interceptor.proxy.javassist; \
-               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.interceptor.reader; \
+               org.jboss.weld.interceptor.reader.cache; \
+               org.jboss.weld.interceptor.spi.instance; \
+               org.jboss.weld.interceptor.spi.context; \
+               org.jboss.weld.interceptor.spi.model; \
+               org.jboss.weld.interceptor.spi.metadata; \
+               org.jboss.weld.interceptor.util; \
+               org.jboss.weld.interceptor.util.proxy; \
+               org.jboss.weld.interceptor.proxy; \
+               org.jboss.weld.interceptor.proxy.javassist; \
+               org.jboss.weld.interceptor.builder; \
                org.jboss.weld.manager.api; \
                org.jboss.weld.ejb.spi; \
                org.jboss.weld.ejb.spi.helpers; \
@@ -189,6 +189,6 @@ Import-Package org.jboss.weld.environment.osgi.api; \
                org.jboss.weld.environment.se.discovery; \
                org.jboss.weld.environment.se.discovery.url; \
                org.jboss.weld.environment.se.contexts; \
-               org.jboss.weld.messages; version=1.1.5
+               org.jboss.weld.messages; version=1.2.0-SNAPSHOT
 
 DynamicImport-Package *
\ No newline at end of file",2012-10-12T10:31:32Z,132
"@@ -97,17 +97,17 @@ Export-Package javax.el;version=2.2.0, \
                ch.qos.cal10n; \
                ch.qos.cal10n.verifier; \
                ch.qos.cal10n.util; version=0.7.2, \
-               org.jboss.interceptor.reader; \
-               org.jboss.interceptor.reader.cache; \
-               org.jboss.interceptor.spi.instance; \
-               org.jboss.interceptor.spi.context; \
-               org.jboss.interceptor.spi.model; \
-               org.jboss.interceptor.spi.metadata; \
-               org.jboss.interceptor.util; \
-               org.jboss.interceptor.util.proxy; \
-               org.jboss.interceptor.proxy; \
-               org.jboss.interceptor.proxy.javassist; \
-               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.interceptor.reader; \
+               org.jboss.weld.interceptor.reader.cache; \
+               org.jboss.weld.interceptor.spi.instance; \
+               org.jboss.weld.interceptor.spi.context; \
+               org.jboss.weld.interceptor.spi.model; \
+               org.jboss.weld.interceptor.spi.metadata; \
+               org.jboss.weld.interceptor.util; \
+               org.jboss.weld.interceptor.util.proxy; \
+               org.jboss.weld.interceptor.proxy; \
+               org.jboss.weld.interceptor.proxy.javassist; \
+               org.jboss.weld.interceptor.builder; \
                org.jboss.weld.manager.api; \
                org.jboss.weld.ejb.spi; \
                org.jboss.weld.ejb.spi.helpers; \
@@ -183,7 +183,7 @@ Export-Package javax.el;version=2.2.0, \
                org.jboss.weld.environment.se.discovery; \
                org.jboss.weld.environment.se.discovery.url; \
                org.jboss.weld.environment.se.contexts; \
-               org.jboss.weld.messages; version=1.1.5
+               org.jboss.weld.messages; version=1.2.0-SNAPSHOT
 
 
 DynamicImport-Package *",2012-10-12T10:31:32Z,133
"@@ -233,14 +233,15 @@ private void fireAllEvent(AbstractServiceEvent event, Event broadcaster,
       {
          try
          {
+            // here singleton issue
             broadcaster.select(eventClass,
-                               filteredServicesQualifiers(event,
-                                                          new SpecificationAnnotation(clazz),
-                                                          instance)).fire(event);
+               filteredServicesQualifiers(event,
+                  new SpecificationAnnotation(clazz),
+                  instance)).fire(event);
          }
          catch(Throwable t)
          {
-            t.printStackTrace();
+            //t.printStackTrace();
          }
       }
    }",2012-10-12T10:30:48Z,134
"@@ -95,13 +95,13 @@ public void startCDIOSGi() throws Exception {
 
     public void stopCDIOSGi() throws Exception {
         logger.info(""CDI-OSGi stop bundle management"");
-        started.set(false);
         for (Bundle bundle : context.getBundles()) {
             logger.trace(""Scanning {}"", bundle.getSymbolicName());
             if (managed.get(bundle.getBundleId()) != null) {
                 stopManagement(bundle);
             }
         }
+        started.set(false);
     }
 
     @Override
@@ -206,52 +206,30 @@ private void stopManagement(Bundle bundle) {
         boolean set = CDIOSGiExtension.currentBundle.get() != null;
         CDIOSGiExtension.currentBundle.set(bundle.getBundleId());
         CDIContainer holder = managed.get(bundle.getBundleId());
-        if (holder != null) {
-            BundleHolder bundleHolder = holder.getInstance().select(BundleHolder.class).get();
-            //if (bundleHolder.getState().equals(BundleState.VALID)) {
-                logger.trace(""Firing the BundleState.INVALID event"");
-                //bundleHolder.setState(BundleState.INVALID);
-                holder.getBeanManager().fireEvent(new Invalid());
-            //}
-            if(started.get()) {
-                factory().removeContainer(bundle);
-            }
-            logger.trace(""The container {} has been unregistered"",holder);
-            logger.trace(""Firing the BundleContainerEvents.BundleContainerShutdown event"");
-            holder.getBeanManager().fireEvent(new BundleContainerEvents.BundleContainerShutdown(bundle.getBundleContext()));
-
-            Collection<ServiceRegistration> regs = holder.getRegistrations();
-            logger.trace(""Unregistering the container registrations"");
-            /**for (ServiceRegistration reg : regs) {
+        if (started.get() && managed.containsKey(bundle.getBundleId())) {
+            if (holder != null) {
+                BundleHolder bundleHolder = holder.getInstance().select(BundleHolder.class).get();
                 try {
-                    reg.unregister();
-                } catch (IllegalStateException e) {// Ignore
-                    //logger.warn(""Unable to unregister a service"" + e.getCause());
-                }
-            }
-            try {
-                // unregistration for managed services. It should be done by the OSGi framework
-                logger.trace(""Unregistering the container managed services"");
-                RegistrationsHolderImpl regsHolder = holder.getInstance().select(RegistrationsHolderImpl.class).get();
-                for (ServiceRegistration r : regsHolder.getRegistrations()) {
-                    try {
-                        r.unregister();
-                    } catch (Exception e) {
-                        // the service is already unregistered if shutdown is called when bundle is stopped
-                        // but with a manual boostrap, you can't be sure
-                        //System.out.println(""Service already unregistered."");
+                    logger.trace(""Firing the BundleState.INVALID event"");
+                    holder.getBeanManager().fireEvent(new Invalid());
+                    logger.trace(""The container {} has been unregistered"",holder);
+                    logger.trace(""Firing the BundleContainerEvents.BundleContainerShutdown event"");
+                    // here singleton issue ?
+                    holder.getBeanManager().fireEvent(new BundleContainerEvents.BundleContainerShutdown(bundle.getBundleContext()));
+                } catch (Throwable t) {}
+                logger.trace(""Shutting down the container {}"", holder);
+                //holder.shutdown();
+                managed.remove(bundle.getBundleId());
+                if(started.get()) {
+                    if (factoryRef != null) {
+                        factory().removeContainer(bundle);
                     }
                 }
-            } catch (Throwable t) {
-                t.printStackTrace();
-            }   **/
-
-            logger.trace(""Shutting down the container {}"", holder);
-            holder.shutdown();
-            managed.remove(bundle.getBundleId());
-            logger.debug(""Bundle {} is unmanaged"", bundle.getSymbolicName());
-        } else {
-            logger.debug(""Bundle {} is not a bean bundle"", bundle.getSymbolicName());
+                holder.shutdown();
+                logger.debug(""Bundle {} is unmanaged"", bundle.getSymbolicName());
+            } else {
+                logger.debug(""Bundle {} is not a bean bundle"", bundle.getSymbolicName());
+            }
         }
         if (!set) {
             CDIOSGiExtension.currentBundle.remove();",2012-10-12T10:30:48Z,135
"@@ -2,8 +2,6 @@ Bundle-Activator org.jboss.weld.environment.osgi.impl.Activator
 
 Export-Package org.jboss.weld.environment.osgi.impl.extension.service;version=${pom.version}
 
-Embed-Dependency *; scope=compile; inline=true; artifactId=!org.osgi.core|org.osgi.compendium|weld-osgi-core-api|weld-osgi-core-spi
-
 Import-Package org.jboss.weld.environment.osgi.api; \
                org.jboss.weld.environment.osgi.api.annotation; \
                org.jboss.weld.environment.osgi.api.events; \
@@ -35,7 +33,61 @@ Import-Package org.jboss.weld.environment.osgi.api; \
                javassist.tools; \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
-               javassist.tools.web; version=3.14.0
+               javassist.tools.web; version=3.14.0, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29
+
 
 DynamicImport-Package *
 ",2012-10-12T10:30:48Z,136
"@@ -1,35 +0,0 @@
-<configuration debug=""false"">
-
-    <appender name=""Console"" class=""ch.qos.logback.core.ConsoleAppender"">
-        <filter class=""ch.qos.logback.classic.filter.ThresholdFilter"">
-            <level>info</level>
-        </filter>
-        <encoder>
-            <pattern>
-                %d{HH:mm:ss.SSS} %-15.-15([%-14.-14(%.-13thread])) %-5level %.-1000(%logger{25} - %msg) %n
-            </pattern>
-        </encoder>
-    </appender>
-
-    <appender name=""Log"" class=""ch.qos.logback.core.FileAppender"">
-        <file>cdi-osgi.log</file>
-        <append>false</append>
-        <filter class=""ch.qos.logback.classic.filter.ThresholdFilter"">
-            <level>trace</level>
-        </filter>
-        <encoder>
-            <pattern>
-                %d{HH:mm:ss.SSS} %-15.-15([%-14.-14(%.-13thread])) %-5level %.-1000(%logger{25} - %msg) %n %xEx{full}
-            </pattern>
-            <!--<pattern>
-                %d{HH:mm:ss.SSS} [%thread] %-5level %caller{1} %logger{25} - %msg%n %xEx{full}
-            </pattern>-->
-        </encoder>
-    </appender>
-
-    <root level=""trace"">
-        <appender-ref ref=""Console""/>
-        <appender-ref ref=""Log""/>
-    </root>
-
-</configuration>
\ No newline at end of file",2012-10-12T10:30:48Z,137
"@@ -84,11 +84,6 @@
          <artifactId>jsr250-api</artifactId>
       </dependency>
 
-      <dependency>
-         <groupId>com.google.guava</groupId>
-         <artifactId>guava</artifactId>
-      </dependency>
-
       <dependency>
          <groupId>org.jboss.interceptor</groupId>
          <artifactId>jboss-interceptor-spi</artifactId>
@@ -104,6 +99,11 @@
          <artifactId>jboss-interceptor-api</artifactId>
       </dependency>
 
+      <dependency>
+         <groupId>com.google.guava</groupId>
+         <artifactId>guava</artifactId>
+      </dependency>
+
       <dependency>
          <groupId>ch.qos.cal10n</groupId>
          <artifactId>cal10n-api</artifactId>",2012-10-12T10:30:48Z,138
"@@ -2,11 +2,7 @@ Bundle-Activator org.jboss.weld.environment.osgi.impl.WeldActivator
 
 Export-Package org.jboss.weld.environment.osgi.impl.embedded; version=${pom.version}
 
-Embed-Dependency *; scope=compile; inline=true; artifactId=!weld-osgi-core-spi|weld-osgi-core-extension|jboss-interceptor-api|javax.inject|jsr250-api|cdi-api|el-api
-
-Import-Package org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=1.6.1; resolution:=optional, \
-               ch.qos.cal10n; version=0.7.2; resolution:=optional, \
-               org.jboss.weld.environment.osgi.api; \
+Import-Package org.jboss.weld.environment.osgi.api; \
                org.jboss.weld.environment.osgi.api.annotation; \
                org.jboss.weld.environment.osgi.api.events; \
                org.jboss.weld.environment.osgi.spi;version=${pom.version}, \
@@ -20,6 +16,7 @@ Import-Package org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=1.6.1; resol
                javax.enterprise.inject.spi; \
                javax.enterprise.util; version=1.0.0, \
                javax.interceptor; version=1.1.0, \
+               org.osgi.framework, \
                javassist; \
                javassist.bytecode; \
                javassist.bytecode.analysis; \
@@ -36,6 +33,162 @@ Import-Package org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=1.6.1; resol
                javassist.tools; \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
-               javassist.tools.web; version=3.14.0
+               javassist.tools.web; version=3.14.0, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; \
+               org.slf4j.cal10n; \
+               org.slf4j.profiler; \
+               org.slf4j.agent; \
+               org.slf4j.instrumentation; \
+               org.slf4j.ext; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29, \
+               com.google.common.primitives; \
+               com.google.common.collect; \
+               com.google.common.util.concurrent; \
+               com.google.common.io; \
+               com.google.common.net; \
+               com.google.common.annotations; \
+               com.google.common.base; \
+               com.google.common.base.internal, \
+               ch.qos.cal10n; \
+               ch.qos.cal10n.verifier; \
+               ch.qos.cal10n.util; version=0.7.2, \
+               org.jboss.interceptor.reader; \
+               org.jboss.interceptor.reader.cache; \
+               org.jboss.interceptor.spi.instance; \
+               org.jboss.interceptor.spi.context; \
+               org.jboss.interceptor.spi.model; \
+               org.jboss.interceptor.spi.metadata; \
+               org.jboss.interceptor.util; \
+               org.jboss.interceptor.util.proxy; \
+               org.jboss.interceptor.proxy; \
+               org.jboss.interceptor.proxy.javassist; \
+               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.manager.api; \
+               org.jboss.weld.ejb.spi; \
+               org.jboss.weld.ejb.spi.helpers; \
+               org.jboss.weld.ejb.api; \
+               org.jboss.weld.context; \
+               org.jboss.weld.context.ejb; \
+               org.jboss.weld.context.unbound; \
+               org.jboss.weld.context.bound; \
+               org.jboss.weld.context.api; \
+               org.jboss.weld.context.http; \
+               org.jboss.weld.validation.spi; \
+               org.jboss.weld.transaction.spi; \
+               org.jboss.weld.servlet.api; \
+               org.jboss.weld.servlet.api.helpers; \
+               org.jboss.weld.resources.spi; \
+               org.jboss.weld.resources.spi.helpers; \
+               org.jboss.weld.bootstrap.spi; \
+               org.jboss.weld.bootstrap.spi.helpers; \
+               org.jboss.weld.bootstrap.api; \
+               org.jboss.weld.bootstrap.api.helpers; \
+               org.jboss.weld.serialization.spi; \
+               org.jboss.weld.serialization.spi.helpers; \
+               org.jboss.weld.security.spi; \
+               org.jboss.weld.injection.spi; \
+               org.jboss.weld.injection.spi.helpers; \
+               org.jboss.weld; \
+               org.jboss.weld.manager; \
+               org.jboss.weld.jsf; \
+               org.jboss.weld.ejb; \
+               org.jboss.weld.event; \
+               org.jboss.weld.introspector; \
+               org.jboss.weld.introspector.jlr; \
+               org.jboss.weld.context.beanstore; \
+               org.jboss.weld.context.beanstore.ejb; \
+               org.jboss.weld.context.beanstore.http; \
+               org.jboss.weld.context.cache; \
+               org.jboss.weld.context.conversation; \
+               org.jboss.weld.util; \
+               org.jboss.weld.util.dom; \
+               org.jboss.weld.util.reflection; \
+               org.jboss.weld.util.reflection.instantiation; \
+               org.jboss.weld.util.el; \
+               org.jboss.weld.util.bytecode; \
+               org.jboss.weld.util.collections; \
+               org.jboss.weld.exceptions; \
+               org.jboss.weld.metadata; \
+               org.jboss.weld.metadata.cache; \
+               org.jboss.weld.el; \
+               org.jboss.weld.xml; \
+               org.jboss.weld.servlet; \
+               org.jboss.weld.ws; \
+               org.jboss.weld.bean; \
+               org.jboss.weld.bean.builtin; \
+               org.jboss.weld.bean.builtin.ee; \
+               org.jboss.weld.bean.proxy; \
+               org.jboss.weld.bean.proxy.util; \
+               org.jboss.weld.bean.interceptor; \
+               org.jboss.weld.resources; \
+               org.jboss.weld.literal; \
+               org.jboss.weld.bootstrap; \
+               org.jboss.weld.bootstrap.events; \
+               org.jboss.weld.logging; \
+               org.jboss.weld.logging.messages; \
+               org.jboss.weld.serialization; \
+               org.jboss.weld.persistence; \
+               org.jboss.weld.resolution; \
+               org.jboss.weld.injection; \
+               org.jboss.weld.environment.se; \
+               org.jboss.weld.environment.se.events; \
+               org.jboss.weld.environment.se.bindings; \
+               org.jboss.weld.environment.se.threading; \
+               org.jboss.weld.environment.se.beans; \
+               org.jboss.weld.environment.se.discovery; \
+               org.jboss.weld.environment.se.discovery.url; \
+               org.jboss.weld.environment.se.contexts; \
+               org.jboss.weld.messages; version=1.1.3
 
 DynamicImport-Package *
\ No newline at end of file",2012-10-12T10:30:48Z,132
"@@ -34,43 +34,103 @@
          <email>matthieu.clochard@serli.com</email>
       </developer>
    </developers>
-    
-    <dependencies>
-    
-        <dependency>
-            <groupId>javax.inject</groupId>
-            <artifactId>javax.inject</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>org.jboss.interceptor</groupId>
-            <artifactId>jboss-interceptor-api</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>javax.el</groupId>
-            <artifactId>el-api</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>javax.enterprise</groupId>
-            <artifactId>cdi-api</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>org.javassist</groupId>
-            <artifactId>javassist</artifactId>
-        </dependency>
-        
-    </dependencies>
-
-    <build>
-        <plugins>
-            <plugin>
-                <groupId>org.apache.felix</groupId>
-                <artifactId>maven-bundle-plugin</artifactId>
-            </plugin>
-        </plugins>
-    </build>
-    
+
+   <dependencies>
+
+      <dependency>
+         <groupId>org.jboss.weld</groupId>
+         <artifactId>weld-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.weld.se</groupId>
+         <artifactId>weld-se-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.weld</groupId>
+         <artifactId>weld-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.weld</groupId>
+         <artifactId>weld-spi</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>javax.inject</groupId>
+         <artifactId>javax.inject</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>javax.el</groupId>
+         <artifactId>el-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>javax.enterprise</groupId>
+         <artifactId>cdi-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.interceptor</groupId>
+         <artifactId>jboss-interceptor-spi</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.interceptor</groupId>
+         <artifactId>jboss-interceptor-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.interceptor</groupId>
+         <artifactId>jboss-interceptor-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.javassist</groupId>
+         <artifactId>javassist</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>com.google.guava</groupId>
+         <artifactId>guava</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>ch.qos.cal10n</groupId>
+         <artifactId>cal10n-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.slf4j</groupId>
+         <artifactId>slf4j-ext</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.slf4j</groupId>
+         <artifactId>slf4j-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>ch.qos.logback</groupId>
+         <artifactId>logback-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>ch.qos.logback</groupId>
+         <artifactId>logback-classic</artifactId>
+      </dependency>
+
+   </dependencies>
+
+   <build>
+      <plugins>
+         <plugin>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>maven-bundle-plugin</artifactId>
+         </plugin>
+      </plugins>
+   </build>
+
 </project>",2012-10-12T10:30:48Z,139
"@@ -27,7 +27,164 @@ Export-Package javax.el;version=2.2.0, \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
                javassist.tools.web; version=3.14.0, \
-               com.sun.jdi
+               com.sun.jdi, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; \
+               org.slf4j.cal10n; \
+               org.slf4j.profiler; \
+               org.slf4j.agent; \
+               org.slf4j.instrumentation; \
+               org.slf4j.ext; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29, \
+               com.google.common.primitives; \
+               com.google.common.collect; \
+               com.google.common.util.concurrent; \
+               com.google.common.io; \
+               com.google.common.net; \
+               com.google.common.annotations; \
+               com.google.common.base; \
+               com.google.common.base.internal, \
+               ch.qos.cal10n; \
+               ch.qos.cal10n.verifier; \
+               ch.qos.cal10n.util; version=0.7.2, \
+               org.jboss.interceptor.reader; \
+               org.jboss.interceptor.reader.cache; \
+               org.jboss.interceptor.spi.instance; \
+               org.jboss.interceptor.spi.context; \
+               org.jboss.interceptor.spi.model; \
+               org.jboss.interceptor.spi.metadata; \
+               org.jboss.interceptor.util; \
+               org.jboss.interceptor.util.proxy; \
+               org.jboss.interceptor.proxy; \
+               org.jboss.interceptor.proxy.javassist; \
+               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.manager.api; \
+               org.jboss.weld.ejb.spi; \
+               org.jboss.weld.ejb.spi.helpers; \
+               org.jboss.weld.ejb.api; \
+               org.jboss.weld.context; \
+               org.jboss.weld.context.ejb; \
+               org.jboss.weld.context.unbound; \
+               org.jboss.weld.context.bound; \
+               org.jboss.weld.context.api; \
+               org.jboss.weld.context.http; \
+               org.jboss.weld.validation.spi; \
+               org.jboss.weld.transaction.spi; \
+               org.jboss.weld.servlet.api; \
+               org.jboss.weld.servlet.api.helpers; \
+               org.jboss.weld.resources.spi; \
+               org.jboss.weld.resources.spi.helpers; \
+               org.jboss.weld.bootstrap.spi; \
+               org.jboss.weld.bootstrap.spi.helpers; \
+               org.jboss.weld.bootstrap.api; \
+               org.jboss.weld.bootstrap.api.helpers; \
+               org.jboss.weld.serialization.spi; \
+               org.jboss.weld.serialization.spi.helpers; \
+               org.jboss.weld.security.spi; \
+               org.jboss.weld.injection.spi; \
+               org.jboss.weld.injection.spi.helpers; \
+               org.jboss.weld; \
+               org.jboss.weld.manager; \
+               org.jboss.weld.jsf; \
+               org.jboss.weld.ejb; \
+               org.jboss.weld.event; \
+               org.jboss.weld.introspector; \
+               org.jboss.weld.introspector.jlr; \
+               org.jboss.weld.context.beanstore; \
+               org.jboss.weld.context.beanstore.ejb; \
+               org.jboss.weld.context.beanstore.http; \
+               org.jboss.weld.context.cache; \
+               org.jboss.weld.context.conversation; \
+               org.jboss.weld.util; \
+               org.jboss.weld.util.dom; \
+               org.jboss.weld.util.reflection; \
+               org.jboss.weld.util.reflection.instantiation; \
+               org.jboss.weld.util.el; \
+               org.jboss.weld.util.bytecode; \
+               org.jboss.weld.util.collections; \
+               org.jboss.weld.exceptions; \
+               org.jboss.weld.metadata; \
+               org.jboss.weld.metadata.cache; \
+               org.jboss.weld.el; \
+               org.jboss.weld.xml; \
+               org.jboss.weld.servlet; \
+               org.jboss.weld.ws; \
+               org.jboss.weld.bean; \
+               org.jboss.weld.bean.builtin; \
+               org.jboss.weld.bean.builtin.ee; \
+               org.jboss.weld.bean.proxy; \
+               org.jboss.weld.bean.proxy.util; \
+               org.jboss.weld.bean.interceptor; \
+               org.jboss.weld.resources; \
+               org.jboss.weld.literal; \
+               org.jboss.weld.bootstrap; \
+               org.jboss.weld.bootstrap.events; \
+               org.jboss.weld.logging; \
+               org.jboss.weld.logging.messages; \
+               org.jboss.weld.serialization; \
+               org.jboss.weld.persistence; \
+               org.jboss.weld.resolution; \
+               org.jboss.weld.injection; \
+               org.jboss.weld.environment.se; \
+               org.jboss.weld.environment.se.events; \
+               org.jboss.weld.environment.se.bindings; \
+               org.jboss.weld.environment.se.threading; \
+               org.jboss.weld.environment.se.beans; \
+               org.jboss.weld.environment.se.discovery; \
+               org.jboss.weld.environment.se.discovery.url; \
+               org.jboss.weld.environment.se.contexts; \
+               org.jboss.weld.messages; version=1.1.3
+
 
 DynamicImport-Package *
 ",2012-10-12T10:30:48Z,133
"@@ -27,7 +27,164 @@ Export-Package javax.el;version=2.2.0, \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
                javassist.tools.web; version=3.14.0, \
-               com.sun.jdi
+               com.sun.jdi, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; \
+               org.slf4j.cal10n; \
+               org.slf4j.profiler; \
+               org.slf4j.agent; \
+               org.slf4j.instrumentation; \
+               org.slf4j.ext; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29, \
+               com.google.common.primitives; \
+               com.google.common.collect; \
+               com.google.common.util.concurrent; \
+               com.google.common.io; \
+               com.google.common.net; \
+               com.google.common.annotations; \
+               com.google.common.base; \
+               com.google.common.base.internal, \
+               ch.qos.cal10n; \
+               ch.qos.cal10n.verifier; \
+               ch.qos.cal10n.util; version=0.7.2, \
+               org.jboss.interceptor.reader; \
+               org.jboss.interceptor.reader.cache; \
+               org.jboss.interceptor.spi.instance; \
+               org.jboss.interceptor.spi.context; \
+               org.jboss.interceptor.spi.model; \
+               org.jboss.interceptor.spi.metadata; \
+               org.jboss.interceptor.util; \
+               org.jboss.interceptor.util.proxy; \
+               org.jboss.interceptor.proxy; \
+               org.jboss.interceptor.proxy.javassist; \
+               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.manager.api; \
+               org.jboss.weld.ejb.spi; \
+               org.jboss.weld.ejb.spi.helpers; \
+               org.jboss.weld.ejb.api; \
+               org.jboss.weld.context; \
+               org.jboss.weld.context.ejb; \
+               org.jboss.weld.context.unbound; \
+               org.jboss.weld.context.bound; \
+               org.jboss.weld.context.api; \
+               org.jboss.weld.context.http; \
+               org.jboss.weld.validation.spi; \
+               org.jboss.weld.transaction.spi; \
+               org.jboss.weld.servlet.api; \
+               org.jboss.weld.servlet.api.helpers; \
+               org.jboss.weld.resources.spi; \
+               org.jboss.weld.resources.spi.helpers; \
+               org.jboss.weld.bootstrap.spi; \
+               org.jboss.weld.bootstrap.spi.helpers; \
+               org.jboss.weld.bootstrap.api; \
+               org.jboss.weld.bootstrap.api.helpers; \
+               org.jboss.weld.serialization.spi; \
+               org.jboss.weld.serialization.spi.helpers; \
+               org.jboss.weld.security.spi; \
+               org.jboss.weld.injection.spi; \
+               org.jboss.weld.injection.spi.helpers; \
+               org.jboss.weld; \
+               org.jboss.weld.manager; \
+               org.jboss.weld.jsf; \
+               org.jboss.weld.ejb; \
+               org.jboss.weld.event; \
+               org.jboss.weld.introspector; \
+               org.jboss.weld.introspector.jlr; \
+               org.jboss.weld.context.beanstore; \
+               org.jboss.weld.context.beanstore.ejb; \
+               org.jboss.weld.context.beanstore.http; \
+               org.jboss.weld.context.cache; \
+               org.jboss.weld.context.conversation; \
+               org.jboss.weld.util; \
+               org.jboss.weld.util.dom; \
+               org.jboss.weld.util.reflection; \
+               org.jboss.weld.util.reflection.instantiation; \
+               org.jboss.weld.util.el; \
+               org.jboss.weld.util.bytecode; \
+               org.jboss.weld.util.collections; \
+               org.jboss.weld.exceptions; \
+               org.jboss.weld.metadata; \
+               org.jboss.weld.metadata.cache; \
+               org.jboss.weld.el; \
+               org.jboss.weld.xml; \
+               org.jboss.weld.servlet; \
+               org.jboss.weld.ws; \
+               org.jboss.weld.bean; \
+               org.jboss.weld.bean.builtin; \
+               org.jboss.weld.bean.builtin.ee; \
+               org.jboss.weld.bean.proxy; \
+               org.jboss.weld.bean.proxy.util; \
+               org.jboss.weld.bean.interceptor; \
+               org.jboss.weld.resources; \
+               org.jboss.weld.literal; \
+               org.jboss.weld.bootstrap; \
+               org.jboss.weld.bootstrap.events; \
+               org.jboss.weld.logging; \
+               org.jboss.weld.logging.messages; \
+               org.jboss.weld.serialization; \
+               org.jboss.weld.persistence; \
+               org.jboss.weld.resolution; \
+               org.jboss.weld.injection; \
+               org.jboss.weld.environment.se; \
+               org.jboss.weld.environment.se.events; \
+               org.jboss.weld.environment.se.bindings; \
+               org.jboss.weld.environment.se.threading; \
+               org.jboss.weld.environment.se.beans; \
+               org.jboss.weld.environment.se.discovery; \
+               org.jboss.weld.environment.se.discovery.url; \
+               org.jboss.weld.environment.se.contexts; \
+               org.jboss.weld.messages; version=1.1.3
+
 
 DynamicImport-Package *
 ",2012-10-12T10:30:48Z,140
"@@ -2,12 +2,12 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <parent>
+   <!--<parent>
       <groupId>org.jboss.weld.osgi.examples</groupId>
       <artifactId>weld-osgi-examples</artifactId>
       <version>1.1.3-SNAPSHOT</version>
       <relativePath>../pom.xml</relativePath>
-   </parent>
+   </parent>-->
     <modelVersion>4.0.0</modelVersion>
     <groupId>org.jboss.weld.osgi.examples</groupId>
     <artifactId>weld-osgi-container-equinox</artifactId>",2012-10-12T10:31:09Z,141
"@@ -2,302 +2,327 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <parent>
-      <groupId>org.jboss.weld.osgi.examples</groupId>
-      <artifactId>weld-osgi-examples</artifactId>
-      <version>1.1.3-SNAPSHOT</version>
-      <relativePath>../pom.xml</relativePath>
-   </parent>
-   <modelVersion>4.0.0</modelVersion>
-   <groupId>org.jboss.weld.osgi.examples</groupId>
-   <artifactId>weld-osgi-container-knopflerfish</artifactId>
-   <name>Weld OSGi (Examples Container Knopflerfish)</name>
-
-   <description>Standalone example for Weld-OSGi</description>
-
-   <url>http://www.seamframework.org/Weld</url>
-   <licenses>
-      <license>
-         <name>Apache License, Version 2.0</name>
-         <distribution>repo</distribution>
-         <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
-      </license>
-   </licenses>
-
-   <developers>
-      <developer>
-         <name>Mathieu Ancelin</name>
-         <email>mathieu.ancelin@serli.com</email>
-      </developer>
-      <developer>
-         <name>Matthieu Clochard</name>
-         <email>matthieu.clochard@serli.com</email>
-      </developer>
-   </developers>
-
-   <dependencies>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-divide</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-log</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-minus</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-plus</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-times</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-square</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-triangle</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-standalone</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-app</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-england</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-fwk</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-france</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-spain</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>javax.ws.rs</groupId>
-         <artifactId>jsr311-api</artifactId>
-         <version>1.1</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.codehaus.groovy</groupId>
-         <artifactId>groovy-all</artifactId>
-         <version>1.8.0-rc-3</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-spi</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-extension</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-mandatory</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-integration</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.osgi</groupId>
-         <artifactId>org.osgi.core</artifactId>
-         <version>4.2.0</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.main</artifactId>
-         <version>3.0.6</version>
-         <scope>provided</scope>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix.gogo</groupId>
-         <artifactId>org.apache.felix.gogo.commands</artifactId>
-         <version>0.4.0</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.bundlerepository</artifactId>
-         <version>1.2.1</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.shell.tui</artifactId>
-         <version>1.0.2</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.shell</artifactId>
-         <version>1.0.2</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.http.bundle</artifactId>
-         <version>2.0.4</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.log</artifactId>
-         <version>1.0.0</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.configadmin</artifactId>
-         <version>1.2.8</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld</groupId>
-         <artifactId>weld-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.se</groupId>
-         <artifactId>weld-se-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-   </dependencies>
-
-   <build>
-      <resources>
-         <resource>
-            <directory>src/main/resources</directory>
-             <filtering>true</filtering>
-         </resource>
-      </resources>
-      <plugins>
-         <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-antrun-plugin</artifactId>
-            <executions>
-               <execution>
-                  <id>compile</id>
-                  <phase>package</phase>
-                  <goals>
-                     <goal>run</goal>
-                  </goals>
-                  <configuration>
-                     <tasks>
-                        <copy file=""target/classes/config.properties"" tofile=""${project.build.directory}/config.properties""/>
-                        <copy file=""${maven.dependency.org.apache.felix.org.apache.felix.main.jar.path}"" tofile=""${project.build.directory}/felix.jar""/>
-                     </tasks>
-                  </configuration>
-               </execution>
-            </executions>
-         </plugin>
-
-         <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-assembly-plugin</artifactId>
-            <executions>
-               <execution>
-                  <id>create-executable-jar</id>
-                  <phase>package</phase>
-                  <goals>
-                     <goal>single</goal>
-                  </goals>
-                  <configuration>
-                     <descriptors>
-                        <descriptor>${basedir}/src/main/assembly/assembly.xml</descriptor>
-                     </descriptors>
-                     <finalName>${project.artifactId}-${project.version}</finalName>
-                  </configuration>
-               </execution>
-            </executions>
-         </plugin>
-      </plugins>
-   </build>
+    <!--<parent>
+        <groupId>org.jboss.weld.osgi.examples</groupId>
+        <artifactId>weld-osgi-examples</artifactId>
+        <version>1.1.3-SNAPSHOT</version>
+        <relativePath>../pom.xml</relativePath>
+    </parent>-->
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.jboss.weld.osgi.examples</groupId>
+    <artifactId>weld-osgi-container-knopflerfish</artifactId>
+    <version>1.1.3-SNAPSHOT</version>
+    <name>Weld OSGi (Examples Container Knopflerfish)</name>
+
+    <description>Standalone example for Weld-OSGi</description>
+
+    <url>http://www.seamframework.org/Weld</url>
+    <licenses>
+        <license>
+            <name>Apache License, Version 2.0</name>
+            <distribution>repo</distribution>
+            <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
+        </license>
+    </licenses>
+
+    <developers>
+        <developer>
+            <name>Mathieu Ancelin</name>
+            <email>mathieu.ancelin@serli.com</email>
+        </developer>
+        <developer>
+            <name>Matthieu Clochard</name>
+            <email>matthieu.clochard@serli.com</email>
+        </developer>
+    </developers>
+
+    <repositories>
+        <repository>
+            <releases>
+                <enabled>true</enabled>
+                <updatePolicy>never</updatePolicy>
+                <checksumPolicy>fail</checksumPolicy>
+            </releases>
+            <snapshots>
+                <enabled>true</enabled>
+                <updatePolicy>never</updatePolicy>
+                <checksumPolicy>fail</checksumPolicy>
+            </snapshots>
+            <id>Knopflerfish</id>
+            <name>Knopflerfish Releases Repository</name>
+            <url>http://www.knopflerfish.org/maven2</url>
+            <layout>default</layout>
+        </repository>
+    </repositories>
+
+    <dependencies>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-divide</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-log</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-minus</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-plus</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-times</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-square</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-triangle</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-standalone</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-app</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-england</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-fwk</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-france</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-spain</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>javax.ws.rs</groupId>
+            <artifactId>jsr311-api</artifactId>
+            <version>1.1</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.codehaus.groovy</groupId>
+            <artifactId>groovy-all</artifactId>
+            <version>1.8.0-rc-3</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-spi</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-extension</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-mandatory</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-integration</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld</groupId>
+            <artifactId>weld-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.se</groupId>
+            <artifactId>weld-se-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.osgi</groupId>
+            <artifactId>org.osgi.core</artifactId>
+            <version>4.2.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.osgi</groupId>
+            <artifactId>org.osgi.compendium</artifactId>
+            <version>4.2.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.knopflerfish</groupId>
+            <artifactId>framework</artifactId>
+            <version>5.1.14</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix.gogo</groupId>
+            <artifactId>org.apache.felix.gogo.commands</artifactId>
+            <version>0.4.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.bundlerepository</artifactId>
+            <version>1.2.1</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.shell.tui</artifactId>
+            <version>1.0.2</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.shell</artifactId>
+            <version>1.0.2</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.http.bundle</artifactId>
+            <version>2.0.4</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.log</artifactId>
+            <version>1.0.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.configadmin</artifactId>
+            <version>1.2.8</version>
+        </dependency>
+
+    </dependencies>
+
+    <build>
+        <resources>
+            <resource>
+                <directory>src/main/resources</directory>
+                <filtering>true</filtering>
+            </resource>
+        </resources>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-antrun-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>compile</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>run</goal>
+                        </goals>
+                        <configuration>
+                            <tasks>
+                                <copy file=""target/classes/config.xargs"" tofile=""${project.build.directory}/config.xargs""/>
+                                <copy file=""${maven.dependency.org.knopflerfish.framework.jar.path}"" tofile=""${project.build.directory}/knopflerfish.jar""/>
+                            </tasks>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-assembly-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>create-executable-jar</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>single</goal>
+                        </goals>
+                        <configuration>
+                            <descriptors>
+                                <descriptor>${basedir}/src/main/assembly/assembly.xml</descriptor>
+                            </descriptors>
+                            <finalName>${project.artifactId}-${project.version}</finalName>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+        </plugins>
+    </build>
 
 </project>",2012-10-12T10:31:09Z,142
"@@ -34,30 +34,25 @@
                 <include>org.jboss.weld.osgi:weld-osgi-core-spi</include>
                 <include>org.jboss.weld.osgi:weld-osgi-core-extension</include>
                 <include>org.jboss.weld.osgi:weld-osgi-core-mandatory</include>
+                <include>org.osgi:org.osgi.compendium</include>
                 <include>org.apache.felix:org.apache.felix.bundlerepository</include>
                 <include>org.apache.felix:org.apache.felix.shell.tui</include>
                 <include>org.apache.felix:org.apache.felix.shell</include>
                 <include>org.apache.felix:org.apache.felix.http.bundle</include>
                 <include>org.apache.felix:org.apache.felix.log</include>
                 <include>org.apache.felix:org.apache.felix.configadmin</include>
+                <include>org.codehaus.groovy:groovy-all</include>
                 <include>javax.ws.rs:jsr311-api</include>
             </includes>
         </dependencySet>
-        <dependencySet>
-            <useProjectArtifact>false</useProjectArtifact>
-            <outputDirectory></outputDirectory>
-            <includes>
-                <include>org.apache.felix:org.apache.felix.main</include>
-            </includes>
-        </dependencySet>
     </dependencySets>
     <files>
         <file>
-            <source>${project.build.directory}/felix.jar</source>
-            <outputDirectory>bin</outputDirectory>
+            <source>${project.build.directory}/knopflerfish.jar</source>
+            <outputDirectory></outputDirectory>
         </file>
         <file>
-            <source>${project.build.directory}/config.properties</source>
+            <source>${project.build.directory}/config.xargs</source>
             <outputDirectory>conf</outputDirectory>
         </file>
     </files>",2012-10-12T10:31:09Z,143
"@@ -1,49 +0,0 @@
-org.osgi.framework.storage.clean=onFirstInit
-
-felix.log.level=1
-
-org.osgi.framework.bootdelegation=sun.reflect
-
-felix.auto.install=  \
-file:modules/weld-osgi-core-api-${project.version}.jar \
-file:modules/weld-osgi-core-spi-${project.version}.jar \
-file:modules/weld-osgi-core-mandatory-${project.version}.jar \
-file:modules/weld-osgi-paint-api-${project.version}.jar  \
-file:modules/weld-osgi-paint-core-${project.version}.jar \
-file:modules/weld-osgi-paint-triangle-${project.version}.jar  \
-file:modules/weld-osgi-paint-square-${project.version}.jar  \
-file:modules/weld-osgi-calculator-api-${project.version}.jar  \
-file:modules/weld-osgi-calculator-core-${project.version}.jar  \
-file:modules/weld-osgi-calculator-log-${project.version}.jar  \
-file:modules/weld-osgi-calculator-divide-${project.version}.jar  \
-file:modules/weld-osgi-calculator-minus-${project.version}.jar  \
-file:modules/weld-osgi-calculator-plus-${project.version}.jar  \
-file:modules/weld-osgi-calculator-times-${project.version}.jar  \
-file:modules/weld-osgi-web-api-${project.version}.jar  \
-file:modules/weld-osgi-web-fwk-${project.version}.jar \
-file:modules/weld-osgi-web-france-${project.version}.jar  \
-file:modules/weld-osgi-web-spain-${project.version}.jar  \
-file:modules/weld-osgi-web-england-${project.version}.jar  \
-file:modules/weld-osgi-web-app-${project.version}.jar  \
-file:modules/weld-osgi-standalone-${project.version}.jar  \
-file:modules/jsr311-api-1.1.jar \
-file:modules/org.apache.felix.gogo.commands-0.4.0.jar  \
-file:modules/org.apache.felix.gogo.runtime-0.4.0.jar
-
-felix.auto.start= \
-file:modules/weld-osgi-core-extension-${project.version}.jar \
-file:modules/weld-osgi-core-integration-${project.version}.jar \
-file:modules/org.apache.felix.configadmin-1.2.8.jar \
-file:modules/org.apache.felix.http.bundle-2.0.4.jar \
-file:modules/org.apache.felix.log-1.0.0.jar \
-file:modules/org.apache.felix.shell-1.0.2.jar \
-file:modules/org.apache.felix.shell.tui-1.0.2.jar \
-file:modules/org.apache.felix.bundlerepository-1.2.1.jar
-
-org.osgi.service.http.port=9000
-org.apache.felix.http.whiteboardEnabled=true
-org.apache.felix.http.jettyEnabled=true
-org.apache.felix.http=true
-
-osgi.shell.telnet=on
-obr.repository.url=http://felix.apache.org/obr/releases.xml",2012-10-12T10:31:09Z,144
"@@ -0,0 +1,51 @@
+-init
+-launch
+
+-F org.osgi.framework.storage.clean=onFirstInit
+-F felix.log.level=1
+-F org.osgi.framework.bootdelegation=sun.reflect
+
+-install modules/weld-osgi-core-api-${project.version}.jar
+-install modules/weld-osgi-core-spi-${project.version}.jar
+-install modules/weld-osgi-core-mandatory-${project.version}.jar
+-install modules/weld-osgi-paint-api-${project.version}.jar
+-install modules/weld-osgi-paint-core-${project.version}.jar
+-install modules/weld-osgi-paint-triangle-${project.version}.jar
+-install modules/weld-osgi-paint-square-${project.version}.jar
+-install modules/weld-osgi-calculator-api-${project.version}.jar
+-install modules/weld-osgi-calculator-core-${project.version}.jar
+-install modules/weld-osgi-calculator-log-${project.version}.jar
+-install modules/weld-osgi-calculator-divide-${project.version}.jar
+-install modules/weld-osgi-calculator-minus-${project.version}.jar
+-install modules/weld-osgi-calculator-plus-${project.version}.jar
+-install modules/weld-osgi-calculator-times-${project.version}.jar
+-install modules/weld-osgi-web-api-${project.version}.jar
+-install modules/weld-osgi-web-fwk-${project.version}.jar
+-install modules/weld-osgi-web-france-${project.version}.jar
+-install modules/weld-osgi-web-spain-${project.version}.jar
+-install modules/weld-osgi-web-england-${project.version}.jar
+-install modules/weld-osgi-web-app-${project.version}.jar
+-install modules/weld-osgi-standalone-${project.version}.jar
+-install modules/groovy-all-1.8.0-rc-3.jar
+-install modules/jsr311-api-1.1.jar
+-install modules/org.apache.felix.gogo.commands-0.4.0.jar
+-install modules/org.apache.felix.gogo.runtime-0.4.0.jar
+-install modules/org.osgi.compendium-4.2.0.jar
+
+
+-istart modules/weld-osgi-core-extension-${project.version}.jar
+-istart modules/weld-osgi-core-integration-${project.version}.jar
+-istart modules/org.apache.felix.configadmin-1.2.8.jar
+-istart modules/org.apache.felix.http.bundle-2.0.4.jar
+-istart modules/org.apache.felix.log-1.0.0.jar
+-istart modules/org.apache.felix.shell-1.0.2.jar
+-istart modules/org.apache.felix.shell.tui-1.0.2.jar
+-istart modules/org.apache.felix.bundlerepository-1.2.1.jar
+
+-F org.osgi.service.http.port=9000
+-F org.apache.felix.http.whiteboardEnabled=true
+-F org.apache.felix.http.jettyEnabled=true
+-F org.apache.felix.http=true
+
+-F osgi.shell.telnet=on
+-F obr.repository.url=http://felix.apache.org/obr/releases.xml
\ No newline at end of file",2012-10-12T10:31:09Z,145
"@@ -1,150 +1,150 @@
 
 <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <modelVersion>4.0.0</modelVersion>
-   <groupId>org.jboss.weld.osgi</groupId>
-   <artifactId>weld-osgi-parent</artifactId>
-   <name>Weld OSGi (Parent)</name>
-   <packaging>pom</packaging>
-
-   <parent>
-      <groupId>org.jboss.weld</groupId>
-      <artifactId>weld-core-parent</artifactId>
-      <relativePath>../../parent/pom.xml</relativePath>
-      <version>1.1.3-SNAPSHOT</version>
-   </parent>
-
-   <licenses>
-      <license>
-         <name>Apache License, Version 2.0</name>
-         <distribution>repo</distribution>
-         <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
-      </license>
-   </licenses>
-   <url>http://www.seamframework.org/Weld</url>
-
-   <developers>
-      <developer>
-         <name>Mathieu Ancelin</name>
-         <email>mathieu.ancelin@serli.com</email>
-      </developer>
-      <developer>
-         <name>Matthieu Clochard</name>
-         <email>matthieu.clochard@serli.com</email>
-      </developer>
-   </developers>
-
-   <modules>
-      <module>core</module>
-      <module>examples</module>
-   </modules>
-
-   <profiles>
-      <profile>
-         <id>weld-osgi-docs</id>
-         <modules>
-            <module>docs</module>
-         </modules>
-      </profile>
-      <profile>
-         <id>weld-osgi-tests</id>
-         <modules>
-            <module>core</module>
-            <module>tests</module>
-         </modules>
-      </profile>
-   </profiles>
-
-   <description>
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.jboss.weld.osgi</groupId>
+    <artifactId>weld-osgi-parent</artifactId>
+    <name>Weld OSGi (Parent)</name>
+    <packaging>pom</packaging>
+
+    <parent>
+        <groupId>org.jboss.weld</groupId>
+        <artifactId>weld-core-parent</artifactId>
+        <relativePath>../../parent/pom.xml</relativePath>
+        <version>1.1.3-SNAPSHOT</version>
+    </parent>
+
+    <licenses>
+        <license>
+            <name>Apache License, Version 2.0</name>
+            <distribution>repo</distribution>
+            <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
+        </license>
+    </licenses>
+    <url>http://www.seamframework.org/Weld</url>
+
+    <developers>
+        <developer>
+            <name>Mathieu Ancelin</name>
+            <email>mathieu.ancelin@serli.com</email>
+        </developer>
+        <developer>
+            <name>Matthieu Clochard</name>
+            <email>matthieu.clochard@serli.com</email>
+        </developer>
+    </developers>
+
+    <modules>
+        <module>core</module>
+        <module>examples</module>
+    </modules>
+
+    <profiles>
+        <profile>
+            <id>weld-osgi-docs</id>
+            <modules>
+                <module>docs</module>
+            </modules>
+        </profile>
+        <profile>
+            <id>weld-osgi-tests</id>
+            <modules>
+                <module>core</module>
+                <module>tests</module>
+            </modules>
+        </profile>
+    </profiles>
+
+    <description>
       Support for Weld in OSGi Containers
-   </description>
-
-   <properties>
-      <osgi.version>4.2.0</osgi.version>
-      <javax.inject.version>1</javax.inject.version>
-      <javax.el.version>2.2</javax.el.version>
-      <jsr250.api>1.0</jsr250.api>
-      <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
-      <weld.api.version>1.2-SNAPSHOT</weld.api.version>
-      <slf4j.version>1.6.1</slf4j.version>
-      <logback.version>0.9.29</logback.version>
-   </properties>
-
-   <dependencyManagement>
-      <dependencies>
-
-         <dependency>
-            <groupId>org.osgi</groupId>
-            <artifactId>org.osgi.core</artifactId>
-            <version>${osgi.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.osgi</groupId>
-            <artifactId>org.osgi.compendium</artifactId>
-            <version>${osgi.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.jboss.weld</groupId>
-            <artifactId>weld-api</artifactId>
-            <version>${weld.api.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.jboss.weld</groupId>
-            <artifactId>weld-spi</artifactId>
-            <version>${weld.api.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>javax.inject</groupId>
-            <artifactId>javax.inject</artifactId>
-            <version>${javax.inject.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>javax.el</groupId>
-            <artifactId>el-api</artifactId>
-            <version>${javax.el.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>javax.annotation</groupId>
-            <artifactId>jsr250-api</artifactId>
-            <version>${jsr250.api}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.jboss.interceptor</groupId>
-            <artifactId>jboss-interceptor-api</artifactId>
-            <version>${jboss.interceptors.api.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-ext</artifactId>
-            <version>${slf4j.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-api</artifactId>
-            <version>${slf4j.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>ch.qos.logback</groupId>
-            <artifactId>logback-core</artifactId>
-            <version>${logback.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>ch.qos.logback</groupId>
-            <artifactId>logback-classic</artifactId>
-            <version>${logback.version}</version>
-         </dependency>
-
-      </dependencies>
-   </dependencyManagement>
+    </description>
+
+    <properties>
+        <osgi.version>4.2.0</osgi.version>
+        <javax.inject.version>1</javax.inject.version>
+        <javax.el.version>2.2</javax.el.version>
+        <jsr250.api>1.0</jsr250.api>
+        <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
+        <weld.api.version>1.2-SNAPSHOT</weld.api.version>
+        <slf4j.version>1.6.1</slf4j.version>
+        <logback.version>0.9.29</logback.version>
+    </properties>
+    
+    <dependencyManagement>
+        <dependencies>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.core</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.compendium</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld</groupId>
+                <artifactId>weld-api</artifactId>
+                <version>${weld.api.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld</groupId>
+                <artifactId>weld-spi</artifactId>
+                <version>${weld.api.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.inject</groupId>
+                <artifactId>javax.inject</artifactId>
+                <version>${javax.inject.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.el</groupId>
+                <artifactId>el-api</artifactId>
+                <version>${javax.el.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.annotation</groupId>
+                <artifactId>jsr250-api</artifactId>
+                <version>${jsr250.api}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.interceptor</groupId>
+                <artifactId>jboss-interceptor-api</artifactId>
+                <version>${jboss.interceptors.api.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.slf4j</groupId>
+                <artifactId>slf4j-ext</artifactId>
+                <version>${slf4j.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.slf4j</groupId>
+                <artifactId>slf4j-api</artifactId>
+                <version>${slf4j.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-core</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-classic</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
+        </dependencies>
+    </dependencyManagement>
 
 </project>",2012-10-12T10:31:09Z,146
"@@ -0,0 +1,4 @@
+#!/bin/sh
+
+cd ./examples/container-knopflerfish/target/weld-osgi-container-knopflerfish-1.1.3-SNAPSHOT-all/weld-osgi-container-knopflerfish-1.1.3-SNAPSHOT/
+java -jar knopflerfish.jar -xargs conf/config.xargs",2012-10-12T10:31:09Z,147
"@@ -48,13 +48,10 @@ public static void waitForEnvironment(BundleContext context) throws InterruptedE
         while(!ready) {
             ready = true;
             for(Bundle b : context.getBundles()) {
-                System.out.println(""wait for bundle "" + b.getSymbolicName());
                 if(b.getState() != Bundle.ACTIVE) {
                     ready = false;
                     break;
                 }
-                System.out.println(""bundle "" + b.getSymbolicName() + "" is ready"");
-                Thread.sleep(500);
             }
             Thread.sleep(500);
         }",2012-10-12T10:31:09Z,148
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
@@ -29,18 +46,15 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-extension</artifactId>
-            <version>${project.version}</version>
         </dependency>
         <dependency>
             <groupId>javax</groupId>
             <artifactId>javaee-web-api</artifactId>
-            <version>6.0</version>
             <scope>provided</scope>
         </dependency>
         <dependency>
             <groupId>org.osgi</groupId>
             <artifactId>org.osgi.core</artifactId>
-            <version>4.2.0</version>
             <scope>provided</scope>
         </dependency>
 ",2012-10-12T10:31:59Z,149
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
@@ -39,13 +56,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>",2012-10-12T10:31:59Z,150
"@@ -46,19 +46,16 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-extension</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>",2012-10-12T10:31:59Z,138
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
@@ -34,7 +51,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,151
"@@ -75,85 +75,4 @@
         Support for Weld in OSGi Containers
     </description>
 
-    <properties>
-        <osgi.version>4.2.0</osgi.version>
-        <javax.inject.version>1</javax.inject.version>
-        <javax.el.version>2.2</javax.el.version>
-        <jsr250.api>1.0</jsr250.api>
-        <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
-        <logback.version>0.9.29</logback.version>
-    </properties>
-
-    <dependencyManagement>
-        <dependencies>
-
-            <dependency>
-                <groupId>org.osgi</groupId>
-                <artifactId>org.osgi.core</artifactId>
-                <version>${osgi.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.osgi</groupId>
-                <artifactId>org.osgi.compendium</artifactId>
-                <version>${osgi.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.jboss.weld</groupId>
-                <artifactId>weld-api</artifactId>
-                <version>${weld.api.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.jboss.weld</groupId>
-                <artifactId>weld-spi</artifactId>
-                <version>${weld.api.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>javax.inject</groupId>
-                <artifactId>javax.inject</artifactId>
-                <version>${javax.inject.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>javax.el</groupId>
-                <artifactId>el-api</artifactId>
-                <version>${javax.el.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>javax.annotation</groupId>
-                <artifactId>jsr250-api</artifactId>
-                <version>${jsr250.api}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.slf4j</groupId>
-                <artifactId>slf4j-ext</artifactId>
-                <version>${slf4j.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.slf4j</groupId>
-                <artifactId>slf4j-api</artifactId>
-                <version>${slf4j.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>ch.qos.logback</groupId>
-                <artifactId>logback-core</artifactId>
-                <version>${logback.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>ch.qos.logback</groupId>
-                <artifactId>logback-classic</artifactId>
-                <version>${logback.version}</version>
-            </dependency>
-
-        </dependencies>
-    </dependencyManagement>
-
 </project>",2012-10-12T10:31:59Z,146
"@@ -58,7 +58,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,152
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,13 +58,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,153
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,13 +58,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,154
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -46,13 +63,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,155
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">",2012-10-12T10:31:59Z,156
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,7 +58,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,157
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">",2012-10-12T10:31:59Z,158
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,7 +58,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-innerscanner</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,159
"@@ -33,11 +33,6 @@
 
     <description>Integration tests launcher for Weld-OSGi</description>
 
-    <properties>
-        <version.pax.exam>2.5.0</version.pax.exam>
-        <version.org.apache.felix>4.0.3</version.org.apache.felix>
-    </properties>
-
     <url>http://www.seamframework.org/Weld</url>
     <licenses>
         <license>
@@ -69,28 +64,24 @@
         <dependency>
             <groupId>org.ops4j.pax.exam</groupId>
             <artifactId>pax-exam-junit4</artifactId>
-            <version>${version.pax.exam}</version>
             <scope>test</scope>
         </dependency>
 
         <dependency>
             <groupId>org.ops4j.pax.exam</groupId>
             <artifactId>pax-exam-container-native</artifactId>
-            <version>${version.pax.exam}</version>
             <scope>test</scope>
         </dependency>
 
         <dependency>
             <groupId>org.ops4j.pax.exam</groupId>
             <artifactId>pax-exam-link-mvn</artifactId>
-            <version>${version.pax.exam}</version>
             <scope>test</scope>
         </dependency>
 
         <dependency>
             <groupId>org.apache.felix</groupId>
             <artifactId>org.apache.felix.framework</artifactId>
-            <version>${version.org.apache.felix}</version>
             <scope>test</scope>
         </dependency>
 
@@ -107,37 +98,31 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-extension</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-integration</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld</groupId>
             <artifactId>weld-core</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.se</groupId>
             <artifactId>weld-se-core</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
@@ -208,49 +193,41 @@
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle2</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle3</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-importing</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-scanner</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-innerscanner</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-cdi-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-life-cycle</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,160
"@@ -1,4 +1,5 @@
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
     <modelVersion>4.0.0</modelVersion>
     <groupId>org.jboss.weld</groupId>
     <artifactId>weld-core-parent</artifactId>
@@ -69,6 +70,17 @@
         <selenium.maven.plugin.version>1.0.1</selenium.maven.plugin.version>
         <slf4j.version>1.6.1</slf4j.version>
         <testng.version>5.10</testng.version>
+        <osgi.version>4.2.0</osgi.version>
+        <!-- Weld OSGi deps -->
+        <javax.inject.version>1</javax.inject.version>
+        <javax.web.version>6.0</javax.web.version>
+        <javax.el.version>2.2</javax.el.version>
+        <jsr250.api>1.0</jsr250.api>
+        <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
+        <logback.version>0.9.29</logback.version>
+        <pax.exam.version>2.5.0</pax.exam.version>
+        <org.apache.felix.version>4.0.3</org.apache.felix.version>
+        <!-- Weld API -->
         <weld.api.version>1.2.0.Beta1</weld.api.version>
     </properties>
 
@@ -215,12 +227,6 @@
                 <version>${arquillian.version}</version>
             </dependency>
 
-            <dependency>
-                <groupId>org.jboss.arquillian.container</groupId>
-                <artifactId>arquillian-container-test-spi</artifactId>
-                <version>${arquillian.version}</version>
-            </dependency>
-
             <dependency>
                 <groupId>org.jboss.arquillian.container</groupId>
                 <artifactId>arquillian-weld-ee-embedded-1.1</artifactId>
@@ -357,8 +363,8 @@
             </dependency>
 
             <dependency>
-	            <groupId>org.jboss.spec.javax.ws.rs</groupId>
-	            <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
+                <groupId>org.jboss.spec.javax.ws.rs</groupId>
+                <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
                 <version>${jboss.spec.jaxrs.version}</version>
             </dependency>
 
@@ -448,6 +454,154 @@
                 <version>${project.version}</version>
             </dependency>
 
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-api</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-extension</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-spi</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-integration</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-bundle1</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-bundle2</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-bundle3</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-importing</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-scanner</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-innerscanner</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-cdi-spi</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-life-cycle</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.ops4j.pax.exam</groupId>
+                <artifactId>pax-exam-junit4</artifactId>
+                <version>${pax.exam.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.ops4j.pax.exam</groupId>
+                <artifactId>pax-exam-container-native</artifactId>
+                <version>${pax.exam.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.ops4j.pax.exam</groupId>
+                <artifactId>pax-exam-link-mvn</artifactId>
+                <version>${pax.exam.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.apache.felix</groupId>
+                <artifactId>org.apache.felix.framework</artifactId>
+                <version>${org.apache.felix.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.core</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.compendium</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.inject</groupId>
+                <artifactId>javax.inject</artifactId>
+                <version>${javax.inject.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax</groupId>
+                <artifactId>javaee-web-api</artifactId>
+                <version>${javax.web.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.el</groupId>
+                <artifactId>el-api</artifactId>
+                <version>${javax.el.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.annotation</groupId>
+                <artifactId>jsr250-api</artifactId>
+                <version>${jsr250.api}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-core</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-classic</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
             <dependency>
                 <groupId>org.jboss.shrinkwrap</groupId>
                 <artifactId>shrinkwrap-impl-base</artifactId>
@@ -536,7 +690,7 @@
                         <configLocation>weld-checkstyle/checkstyle.xml</configLocation>
                         <consoleOutput>true</consoleOutput>
                         <failsOnError>true</failsOnError>
-                        <useFile />
+                        <useFile/>
                     </configuration>
                     <dependencies>
                         <dependency>
@@ -574,7 +728,7 @@
                                         </goals>
                                     </pluginExecutionFilter>
                                     <action>
-                                        <ignore />
+                                        <ignore/>
                                     </action>
                                 </pluginExecution>
                             </pluginExecutions>
@@ -586,10 +740,10 @@
                     <artifactId>maven-compiler-plugin</artifactId>
                     <version>2.3.2</version>
                     <configuration>
-                       <source>1.6</source>
-                       <target>1.6</target>
+                        <source>1.6</source>
+                        <target>1.6</target>
                     </configuration>
-                 </plugin>
+                </plugin>
             </plugins>
 
         </pluginManagement>",2012-10-12T10:31:59Z,161
"@@ -11,7 +11,8 @@
    express or implied. * See the License for the specific language
    governing permissions and * limitations under the License. */
 -->
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
     <parent>
         <artifactId>weld-core-parent</artifactId>
         <groupId>org.jboss.weld</groupId>
@@ -91,7 +92,7 @@
                             org.jboss.weld.manager;
                             org.jboss.weld.servlet;
                             org.jboss.weld.util;
-                            org.jboss.interceptor.*;
+                            org.jboss.weld.interceptor.*;
                             version=${osgi.version},
                             org.jboss.weld.el;
                             version=${osgi.version},
@@ -113,7 +114,8 @@
                              on foreign bundles.
                         -->
                         <Import-Package>
-                            org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=""[${slf4j.version},$${version;=+;${slf4j.version}})""; resolution:=optional,
+                            org.slf4j; org.slf4j.spi; org.slf4j.helpers;
+                            version=""[${slf4j.version},$${version;=+;${slf4j.version}})""; resolution:=optional,
                             ch.qos.cal10n; version=${cal10n.version}; resolution:=optional,
                             javax.interceptor.*, *;
                             resolution:=optional",2012-10-12T10:31:32Z,10
"@@ -46,8 +46,8 @@ public WeldCDIContainerFactory() {
         logger.debug(""Creation of a new Weld CDI container factory"");
         blackList = new HashSet<String>();
         blackList.add(""java.io.Serializable"");
-        blackList.add(""org.jboss.interceptor.proxy.LifecycleMixin"");
-        blackList.add(""org.jboss.interceptor.util.proxy.TargetInstanceProxy"");
+        blackList.add(""org.jboss.weld.interceptor.proxy.LifecycleMixin"");
+        blackList.add(""org.jboss.weld.interceptor.util.proxy.TargetInstanceProxy"");
         blackList.add(""javassist.util.proxy.ProxyObject"");
     }
 ",2012-10-12T10:31:32Z,131
"@@ -103,17 +103,17 @@ Import-Package org.jboss.weld.environment.osgi.api; \
                ch.qos.cal10n; \
                ch.qos.cal10n.verifier; \
                ch.qos.cal10n.util; version=0.7.2, \
-               org.jboss.interceptor.reader; \
-               org.jboss.interceptor.reader.cache; \
-               org.jboss.interceptor.spi.instance; \
-               org.jboss.interceptor.spi.context; \
-               org.jboss.interceptor.spi.model; \
-               org.jboss.interceptor.spi.metadata; \
-               org.jboss.interceptor.util; \
-               org.jboss.interceptor.util.proxy; \
-               org.jboss.interceptor.proxy; \
-               org.jboss.interceptor.proxy.javassist; \
-               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.interceptor.reader; \
+               org.jboss.weld.interceptor.reader.cache; \
+               org.jboss.weld.interceptor.spi.instance; \
+               org.jboss.weld.interceptor.spi.context; \
+               org.jboss.weld.interceptor.spi.model; \
+               org.jboss.weld.interceptor.spi.metadata; \
+               org.jboss.weld.interceptor.util; \
+               org.jboss.weld.interceptor.util.proxy; \
+               org.jboss.weld.interceptor.proxy; \
+               org.jboss.weld.interceptor.proxy.javassist; \
+               org.jboss.weld.interceptor.builder; \
                org.jboss.weld.manager.api; \
                org.jboss.weld.ejb.spi; \
                org.jboss.weld.ejb.spi.helpers; \
@@ -189,6 +189,6 @@ Import-Package org.jboss.weld.environment.osgi.api; \
                org.jboss.weld.environment.se.discovery; \
                org.jboss.weld.environment.se.discovery.url; \
                org.jboss.weld.environment.se.contexts; \
-               org.jboss.weld.messages; version=1.1.5
+               org.jboss.weld.messages; version=1.2.0-SNAPSHOT
 
 DynamicImport-Package *
\ No newline at end of file",2012-10-12T10:31:32Z,132
"@@ -97,17 +97,17 @@ Export-Package javax.el;version=2.2.0, \
                ch.qos.cal10n; \
                ch.qos.cal10n.verifier; \
                ch.qos.cal10n.util; version=0.7.2, \
-               org.jboss.interceptor.reader; \
-               org.jboss.interceptor.reader.cache; \
-               org.jboss.interceptor.spi.instance; \
-               org.jboss.interceptor.spi.context; \
-               org.jboss.interceptor.spi.model; \
-               org.jboss.interceptor.spi.metadata; \
-               org.jboss.interceptor.util; \
-               org.jboss.interceptor.util.proxy; \
-               org.jboss.interceptor.proxy; \
-               org.jboss.interceptor.proxy.javassist; \
-               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.interceptor.reader; \
+               org.jboss.weld.interceptor.reader.cache; \
+               org.jboss.weld.interceptor.spi.instance; \
+               org.jboss.weld.interceptor.spi.context; \
+               org.jboss.weld.interceptor.spi.model; \
+               org.jboss.weld.interceptor.spi.metadata; \
+               org.jboss.weld.interceptor.util; \
+               org.jboss.weld.interceptor.util.proxy; \
+               org.jboss.weld.interceptor.proxy; \
+               org.jboss.weld.interceptor.proxy.javassist; \
+               org.jboss.weld.interceptor.builder; \
                org.jboss.weld.manager.api; \
                org.jboss.weld.ejb.spi; \
                org.jboss.weld.ejb.spi.helpers; \
@@ -183,7 +183,7 @@ Export-Package javax.el;version=2.2.0, \
                org.jboss.weld.environment.se.discovery; \
                org.jboss.weld.environment.se.discovery.url; \
                org.jboss.weld.environment.se.contexts; \
-               org.jboss.weld.messages; version=1.1.5
+               org.jboss.weld.messages; version=1.2.0-SNAPSHOT
 
 
 DynamicImport-Package *",2012-10-12T10:31:32Z,133
"@@ -233,14 +233,15 @@ private void fireAllEvent(AbstractServiceEvent event, Event broadcaster,
       {
          try
          {
+            // here singleton issue
             broadcaster.select(eventClass,
-                               filteredServicesQualifiers(event,
-                                                          new SpecificationAnnotation(clazz),
-                                                          instance)).fire(event);
+               filteredServicesQualifiers(event,
+                  new SpecificationAnnotation(clazz),
+                  instance)).fire(event);
          }
          catch(Throwable t)
          {
-            t.printStackTrace();
+            //t.printStackTrace();
          }
       }
    }",2012-10-12T10:30:48Z,134
"@@ -95,13 +95,13 @@ public void startCDIOSGi() throws Exception {
 
     public void stopCDIOSGi() throws Exception {
         logger.info(""CDI-OSGi stop bundle management"");
-        started.set(false);
         for (Bundle bundle : context.getBundles()) {
             logger.trace(""Scanning {}"", bundle.getSymbolicName());
             if (managed.get(bundle.getBundleId()) != null) {
                 stopManagement(bundle);
             }
         }
+        started.set(false);
     }
 
     @Override
@@ -206,52 +206,30 @@ private void stopManagement(Bundle bundle) {
         boolean set = CDIOSGiExtension.currentBundle.get() != null;
         CDIOSGiExtension.currentBundle.set(bundle.getBundleId());
         CDIContainer holder = managed.get(bundle.getBundleId());
-        if (holder != null) {
-            BundleHolder bundleHolder = holder.getInstance().select(BundleHolder.class).get();
-            //if (bundleHolder.getState().equals(BundleState.VALID)) {
-                logger.trace(""Firing the BundleState.INVALID event"");
-                //bundleHolder.setState(BundleState.INVALID);
-                holder.getBeanManager().fireEvent(new Invalid());
-            //}
-            if(started.get()) {
-                factory().removeContainer(bundle);
-            }
-            logger.trace(""The container {} has been unregistered"",holder);
-            logger.trace(""Firing the BundleContainerEvents.BundleContainerShutdown event"");
-            holder.getBeanManager().fireEvent(new BundleContainerEvents.BundleContainerShutdown(bundle.getBundleContext()));
-
-            Collection<ServiceRegistration> regs = holder.getRegistrations();
-            logger.trace(""Unregistering the container registrations"");
-            /**for (ServiceRegistration reg : regs) {
+        if (started.get() && managed.containsKey(bundle.getBundleId())) {
+            if (holder != null) {
+                BundleHolder bundleHolder = holder.getInstance().select(BundleHolder.class).get();
                 try {
-                    reg.unregister();
-                } catch (IllegalStateException e) {// Ignore
-                    //logger.warn(""Unable to unregister a service"" + e.getCause());
-                }
-            }
-            try {
-                // unregistration for managed services. It should be done by the OSGi framework
-                logger.trace(""Unregistering the container managed services"");
-                RegistrationsHolderImpl regsHolder = holder.getInstance().select(RegistrationsHolderImpl.class).get();
-                for (ServiceRegistration r : regsHolder.getRegistrations()) {
-                    try {
-                        r.unregister();
-                    } catch (Exception e) {
-                        // the service is already unregistered if shutdown is called when bundle is stopped
-                        // but with a manual boostrap, you can't be sure
-                        //System.out.println(""Service already unregistered."");
+                    logger.trace(""Firing the BundleState.INVALID event"");
+                    holder.getBeanManager().fireEvent(new Invalid());
+                    logger.trace(""The container {} has been unregistered"",holder);
+                    logger.trace(""Firing the BundleContainerEvents.BundleContainerShutdown event"");
+                    // here singleton issue ?
+                    holder.getBeanManager().fireEvent(new BundleContainerEvents.BundleContainerShutdown(bundle.getBundleContext()));
+                } catch (Throwable t) {}
+                logger.trace(""Shutting down the container {}"", holder);
+                //holder.shutdown();
+                managed.remove(bundle.getBundleId());
+                if(started.get()) {
+                    if (factoryRef != null) {
+                        factory().removeContainer(bundle);
                     }
                 }
-            } catch (Throwable t) {
-                t.printStackTrace();
-            }   **/
-
-            logger.trace(""Shutting down the container {}"", holder);
-            holder.shutdown();
-            managed.remove(bundle.getBundleId());
-            logger.debug(""Bundle {} is unmanaged"", bundle.getSymbolicName());
-        } else {
-            logger.debug(""Bundle {} is not a bean bundle"", bundle.getSymbolicName());
+                holder.shutdown();
+                logger.debug(""Bundle {} is unmanaged"", bundle.getSymbolicName());
+            } else {
+                logger.debug(""Bundle {} is not a bean bundle"", bundle.getSymbolicName());
+            }
         }
         if (!set) {
             CDIOSGiExtension.currentBundle.remove();",2012-10-12T10:30:48Z,135
"@@ -2,8 +2,6 @@ Bundle-Activator org.jboss.weld.environment.osgi.impl.Activator
 
 Export-Package org.jboss.weld.environment.osgi.impl.extension.service;version=${pom.version}
 
-Embed-Dependency *; scope=compile; inline=true; artifactId=!org.osgi.core|org.osgi.compendium|weld-osgi-core-api|weld-osgi-core-spi
-
 Import-Package org.jboss.weld.environment.osgi.api; \
                org.jboss.weld.environment.osgi.api.annotation; \
                org.jboss.weld.environment.osgi.api.events; \
@@ -35,7 +33,61 @@ Import-Package org.jboss.weld.environment.osgi.api; \
                javassist.tools; \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
-               javassist.tools.web; version=3.14.0
+               javassist.tools.web; version=3.14.0, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29
+
 
 DynamicImport-Package *
 ",2012-10-12T10:30:48Z,136
"@@ -1,35 +0,0 @@
-<configuration debug=""false"">
-
-    <appender name=""Console"" class=""ch.qos.logback.core.ConsoleAppender"">
-        <filter class=""ch.qos.logback.classic.filter.ThresholdFilter"">
-            <level>info</level>
-        </filter>
-        <encoder>
-            <pattern>
-                %d{HH:mm:ss.SSS} %-15.-15([%-14.-14(%.-13thread])) %-5level %.-1000(%logger{25} - %msg) %n
-            </pattern>
-        </encoder>
-    </appender>
-
-    <appender name=""Log"" class=""ch.qos.logback.core.FileAppender"">
-        <file>cdi-osgi.log</file>
-        <append>false</append>
-        <filter class=""ch.qos.logback.classic.filter.ThresholdFilter"">
-            <level>trace</level>
-        </filter>
-        <encoder>
-            <pattern>
-                %d{HH:mm:ss.SSS} %-15.-15([%-14.-14(%.-13thread])) %-5level %.-1000(%logger{25} - %msg) %n %xEx{full}
-            </pattern>
-            <!--<pattern>
-                %d{HH:mm:ss.SSS} [%thread] %-5level %caller{1} %logger{25} - %msg%n %xEx{full}
-            </pattern>-->
-        </encoder>
-    </appender>
-
-    <root level=""trace"">
-        <appender-ref ref=""Console""/>
-        <appender-ref ref=""Log""/>
-    </root>
-
-</configuration>
\ No newline at end of file",2012-10-12T10:30:48Z,137
"@@ -84,11 +84,6 @@
          <artifactId>jsr250-api</artifactId>
       </dependency>
 
-      <dependency>
-         <groupId>com.google.guava</groupId>
-         <artifactId>guava</artifactId>
-      </dependency>
-
       <dependency>
          <groupId>org.jboss.interceptor</groupId>
          <artifactId>jboss-interceptor-spi</artifactId>
@@ -104,6 +99,11 @@
          <artifactId>jboss-interceptor-api</artifactId>
       </dependency>
 
+      <dependency>
+         <groupId>com.google.guava</groupId>
+         <artifactId>guava</artifactId>
+      </dependency>
+
       <dependency>
          <groupId>ch.qos.cal10n</groupId>
          <artifactId>cal10n-api</artifactId>",2012-10-12T10:30:48Z,138
"@@ -2,11 +2,7 @@ Bundle-Activator org.jboss.weld.environment.osgi.impl.WeldActivator
 
 Export-Package org.jboss.weld.environment.osgi.impl.embedded; version=${pom.version}
 
-Embed-Dependency *; scope=compile; inline=true; artifactId=!weld-osgi-core-spi|weld-osgi-core-extension|jboss-interceptor-api|javax.inject|jsr250-api|cdi-api|el-api
-
-Import-Package org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=1.6.1; resolution:=optional, \
-               ch.qos.cal10n; version=0.7.2; resolution:=optional, \
-               org.jboss.weld.environment.osgi.api; \
+Import-Package org.jboss.weld.environment.osgi.api; \
                org.jboss.weld.environment.osgi.api.annotation; \
                org.jboss.weld.environment.osgi.api.events; \
                org.jboss.weld.environment.osgi.spi;version=${pom.version}, \
@@ -20,6 +16,7 @@ Import-Package org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=1.6.1; resol
                javax.enterprise.inject.spi; \
                javax.enterprise.util; version=1.0.0, \
                javax.interceptor; version=1.1.0, \
+               org.osgi.framework, \
                javassist; \
                javassist.bytecode; \
                javassist.bytecode.analysis; \
@@ -36,6 +33,162 @@ Import-Package org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=1.6.1; resol
                javassist.tools; \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
-               javassist.tools.web; version=3.14.0
+               javassist.tools.web; version=3.14.0, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; \
+               org.slf4j.cal10n; \
+               org.slf4j.profiler; \
+               org.slf4j.agent; \
+               org.slf4j.instrumentation; \
+               org.slf4j.ext; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29, \
+               com.google.common.primitives; \
+               com.google.common.collect; \
+               com.google.common.util.concurrent; \
+               com.google.common.io; \
+               com.google.common.net; \
+               com.google.common.annotations; \
+               com.google.common.base; \
+               com.google.common.base.internal, \
+               ch.qos.cal10n; \
+               ch.qos.cal10n.verifier; \
+               ch.qos.cal10n.util; version=0.7.2, \
+               org.jboss.interceptor.reader; \
+               org.jboss.interceptor.reader.cache; \
+               org.jboss.interceptor.spi.instance; \
+               org.jboss.interceptor.spi.context; \
+               org.jboss.interceptor.spi.model; \
+               org.jboss.interceptor.spi.metadata; \
+               org.jboss.interceptor.util; \
+               org.jboss.interceptor.util.proxy; \
+               org.jboss.interceptor.proxy; \
+               org.jboss.interceptor.proxy.javassist; \
+               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.manager.api; \
+               org.jboss.weld.ejb.spi; \
+               org.jboss.weld.ejb.spi.helpers; \
+               org.jboss.weld.ejb.api; \
+               org.jboss.weld.context; \
+               org.jboss.weld.context.ejb; \
+               org.jboss.weld.context.unbound; \
+               org.jboss.weld.context.bound; \
+               org.jboss.weld.context.api; \
+               org.jboss.weld.context.http; \
+               org.jboss.weld.validation.spi; \
+               org.jboss.weld.transaction.spi; \
+               org.jboss.weld.servlet.api; \
+               org.jboss.weld.servlet.api.helpers; \
+               org.jboss.weld.resources.spi; \
+               org.jboss.weld.resources.spi.helpers; \
+               org.jboss.weld.bootstrap.spi; \
+               org.jboss.weld.bootstrap.spi.helpers; \
+               org.jboss.weld.bootstrap.api; \
+               org.jboss.weld.bootstrap.api.helpers; \
+               org.jboss.weld.serialization.spi; \
+               org.jboss.weld.serialization.spi.helpers; \
+               org.jboss.weld.security.spi; \
+               org.jboss.weld.injection.spi; \
+               org.jboss.weld.injection.spi.helpers; \
+               org.jboss.weld; \
+               org.jboss.weld.manager; \
+               org.jboss.weld.jsf; \
+               org.jboss.weld.ejb; \
+               org.jboss.weld.event; \
+               org.jboss.weld.introspector; \
+               org.jboss.weld.introspector.jlr; \
+               org.jboss.weld.context.beanstore; \
+               org.jboss.weld.context.beanstore.ejb; \
+               org.jboss.weld.context.beanstore.http; \
+               org.jboss.weld.context.cache; \
+               org.jboss.weld.context.conversation; \
+               org.jboss.weld.util; \
+               org.jboss.weld.util.dom; \
+               org.jboss.weld.util.reflection; \
+               org.jboss.weld.util.reflection.instantiation; \
+               org.jboss.weld.util.el; \
+               org.jboss.weld.util.bytecode; \
+               org.jboss.weld.util.collections; \
+               org.jboss.weld.exceptions; \
+               org.jboss.weld.metadata; \
+               org.jboss.weld.metadata.cache; \
+               org.jboss.weld.el; \
+               org.jboss.weld.xml; \
+               org.jboss.weld.servlet; \
+               org.jboss.weld.ws; \
+               org.jboss.weld.bean; \
+               org.jboss.weld.bean.builtin; \
+               org.jboss.weld.bean.builtin.ee; \
+               org.jboss.weld.bean.proxy; \
+               org.jboss.weld.bean.proxy.util; \
+               org.jboss.weld.bean.interceptor; \
+               org.jboss.weld.resources; \
+               org.jboss.weld.literal; \
+               org.jboss.weld.bootstrap; \
+               org.jboss.weld.bootstrap.events; \
+               org.jboss.weld.logging; \
+               org.jboss.weld.logging.messages; \
+               org.jboss.weld.serialization; \
+               org.jboss.weld.persistence; \
+               org.jboss.weld.resolution; \
+               org.jboss.weld.injection; \
+               org.jboss.weld.environment.se; \
+               org.jboss.weld.environment.se.events; \
+               org.jboss.weld.environment.se.bindings; \
+               org.jboss.weld.environment.se.threading; \
+               org.jboss.weld.environment.se.beans; \
+               org.jboss.weld.environment.se.discovery; \
+               org.jboss.weld.environment.se.discovery.url; \
+               org.jboss.weld.environment.se.contexts; \
+               org.jboss.weld.messages; version=1.1.3
 
 DynamicImport-Package *
\ No newline at end of file",2012-10-12T10:30:48Z,132
"@@ -34,43 +34,103 @@
          <email>matthieu.clochard@serli.com</email>
       </developer>
    </developers>
-    
-    <dependencies>
-    
-        <dependency>
-            <groupId>javax.inject</groupId>
-            <artifactId>javax.inject</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>org.jboss.interceptor</groupId>
-            <artifactId>jboss-interceptor-api</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>javax.el</groupId>
-            <artifactId>el-api</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>javax.enterprise</groupId>
-            <artifactId>cdi-api</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>org.javassist</groupId>
-            <artifactId>javassist</artifactId>
-        </dependency>
-        
-    </dependencies>
-
-    <build>
-        <plugins>
-            <plugin>
-                <groupId>org.apache.felix</groupId>
-                <artifactId>maven-bundle-plugin</artifactId>
-            </plugin>
-        </plugins>
-    </build>
-    
+
+   <dependencies>
+
+      <dependency>
+         <groupId>org.jboss.weld</groupId>
+         <artifactId>weld-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.weld.se</groupId>
+         <artifactId>weld-se-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.weld</groupId>
+         <artifactId>weld-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.weld</groupId>
+         <artifactId>weld-spi</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>javax.inject</groupId>
+         <artifactId>javax.inject</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>javax.el</groupId>
+         <artifactId>el-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>javax.enterprise</groupId>
+         <artifactId>cdi-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.interceptor</groupId>
+         <artifactId>jboss-interceptor-spi</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.interceptor</groupId>
+         <artifactId>jboss-interceptor-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.interceptor</groupId>
+         <artifactId>jboss-interceptor-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.javassist</groupId>
+         <artifactId>javassist</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>com.google.guava</groupId>
+         <artifactId>guava</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>ch.qos.cal10n</groupId>
+         <artifactId>cal10n-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.slf4j</groupId>
+         <artifactId>slf4j-ext</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.slf4j</groupId>
+         <artifactId>slf4j-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>ch.qos.logback</groupId>
+         <artifactId>logback-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>ch.qos.logback</groupId>
+         <artifactId>logback-classic</artifactId>
+      </dependency>
+
+   </dependencies>
+
+   <build>
+      <plugins>
+         <plugin>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>maven-bundle-plugin</artifactId>
+         </plugin>
+      </plugins>
+   </build>
+
 </project>",2012-10-12T10:30:48Z,139
"@@ -27,7 +27,164 @@ Export-Package javax.el;version=2.2.0, \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
                javassist.tools.web; version=3.14.0, \
-               com.sun.jdi
+               com.sun.jdi, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; \
+               org.slf4j.cal10n; \
+               org.slf4j.profiler; \
+               org.slf4j.agent; \
+               org.slf4j.instrumentation; \
+               org.slf4j.ext; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29, \
+               com.google.common.primitives; \
+               com.google.common.collect; \
+               com.google.common.util.concurrent; \
+               com.google.common.io; \
+               com.google.common.net; \
+               com.google.common.annotations; \
+               com.google.common.base; \
+               com.google.common.base.internal, \
+               ch.qos.cal10n; \
+               ch.qos.cal10n.verifier; \
+               ch.qos.cal10n.util; version=0.7.2, \
+               org.jboss.interceptor.reader; \
+               org.jboss.interceptor.reader.cache; \
+               org.jboss.interceptor.spi.instance; \
+               org.jboss.interceptor.spi.context; \
+               org.jboss.interceptor.spi.model; \
+               org.jboss.interceptor.spi.metadata; \
+               org.jboss.interceptor.util; \
+               org.jboss.interceptor.util.proxy; \
+               org.jboss.interceptor.proxy; \
+               org.jboss.interceptor.proxy.javassist; \
+               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.manager.api; \
+               org.jboss.weld.ejb.spi; \
+               org.jboss.weld.ejb.spi.helpers; \
+               org.jboss.weld.ejb.api; \
+               org.jboss.weld.context; \
+               org.jboss.weld.context.ejb; \
+               org.jboss.weld.context.unbound; \
+               org.jboss.weld.context.bound; \
+               org.jboss.weld.context.api; \
+               org.jboss.weld.context.http; \
+               org.jboss.weld.validation.spi; \
+               org.jboss.weld.transaction.spi; \
+               org.jboss.weld.servlet.api; \
+               org.jboss.weld.servlet.api.helpers; \
+               org.jboss.weld.resources.spi; \
+               org.jboss.weld.resources.spi.helpers; \
+               org.jboss.weld.bootstrap.spi; \
+               org.jboss.weld.bootstrap.spi.helpers; \
+               org.jboss.weld.bootstrap.api; \
+               org.jboss.weld.bootstrap.api.helpers; \
+               org.jboss.weld.serialization.spi; \
+               org.jboss.weld.serialization.spi.helpers; \
+               org.jboss.weld.security.spi; \
+               org.jboss.weld.injection.spi; \
+               org.jboss.weld.injection.spi.helpers; \
+               org.jboss.weld; \
+               org.jboss.weld.manager; \
+               org.jboss.weld.jsf; \
+               org.jboss.weld.ejb; \
+               org.jboss.weld.event; \
+               org.jboss.weld.introspector; \
+               org.jboss.weld.introspector.jlr; \
+               org.jboss.weld.context.beanstore; \
+               org.jboss.weld.context.beanstore.ejb; \
+               org.jboss.weld.context.beanstore.http; \
+               org.jboss.weld.context.cache; \
+               org.jboss.weld.context.conversation; \
+               org.jboss.weld.util; \
+               org.jboss.weld.util.dom; \
+               org.jboss.weld.util.reflection; \
+               org.jboss.weld.util.reflection.instantiation; \
+               org.jboss.weld.util.el; \
+               org.jboss.weld.util.bytecode; \
+               org.jboss.weld.util.collections; \
+               org.jboss.weld.exceptions; \
+               org.jboss.weld.metadata; \
+               org.jboss.weld.metadata.cache; \
+               org.jboss.weld.el; \
+               org.jboss.weld.xml; \
+               org.jboss.weld.servlet; \
+               org.jboss.weld.ws; \
+               org.jboss.weld.bean; \
+               org.jboss.weld.bean.builtin; \
+               org.jboss.weld.bean.builtin.ee; \
+               org.jboss.weld.bean.proxy; \
+               org.jboss.weld.bean.proxy.util; \
+               org.jboss.weld.bean.interceptor; \
+               org.jboss.weld.resources; \
+               org.jboss.weld.literal; \
+               org.jboss.weld.bootstrap; \
+               org.jboss.weld.bootstrap.events; \
+               org.jboss.weld.logging; \
+               org.jboss.weld.logging.messages; \
+               org.jboss.weld.serialization; \
+               org.jboss.weld.persistence; \
+               org.jboss.weld.resolution; \
+               org.jboss.weld.injection; \
+               org.jboss.weld.environment.se; \
+               org.jboss.weld.environment.se.events; \
+               org.jboss.weld.environment.se.bindings; \
+               org.jboss.weld.environment.se.threading; \
+               org.jboss.weld.environment.se.beans; \
+               org.jboss.weld.environment.se.discovery; \
+               org.jboss.weld.environment.se.discovery.url; \
+               org.jboss.weld.environment.se.contexts; \
+               org.jboss.weld.messages; version=1.1.3
+
 
 DynamicImport-Package *
 ",2012-10-12T10:30:48Z,133
"@@ -27,7 +27,164 @@ Export-Package javax.el;version=2.2.0, \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
                javassist.tools.web; version=3.14.0, \
-               com.sun.jdi
+               com.sun.jdi, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; \
+               org.slf4j.cal10n; \
+               org.slf4j.profiler; \
+               org.slf4j.agent; \
+               org.slf4j.instrumentation; \
+               org.slf4j.ext; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29, \
+               com.google.common.primitives; \
+               com.google.common.collect; \
+               com.google.common.util.concurrent; \
+               com.google.common.io; \
+               com.google.common.net; \
+               com.google.common.annotations; \
+               com.google.common.base; \
+               com.google.common.base.internal, \
+               ch.qos.cal10n; \
+               ch.qos.cal10n.verifier; \
+               ch.qos.cal10n.util; version=0.7.2, \
+               org.jboss.interceptor.reader; \
+               org.jboss.interceptor.reader.cache; \
+               org.jboss.interceptor.spi.instance; \
+               org.jboss.interceptor.spi.context; \
+               org.jboss.interceptor.spi.model; \
+               org.jboss.interceptor.spi.metadata; \
+               org.jboss.interceptor.util; \
+               org.jboss.interceptor.util.proxy; \
+               org.jboss.interceptor.proxy; \
+               org.jboss.interceptor.proxy.javassist; \
+               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.manager.api; \
+               org.jboss.weld.ejb.spi; \
+               org.jboss.weld.ejb.spi.helpers; \
+               org.jboss.weld.ejb.api; \
+               org.jboss.weld.context; \
+               org.jboss.weld.context.ejb; \
+               org.jboss.weld.context.unbound; \
+               org.jboss.weld.context.bound; \
+               org.jboss.weld.context.api; \
+               org.jboss.weld.context.http; \
+               org.jboss.weld.validation.spi; \
+               org.jboss.weld.transaction.spi; \
+               org.jboss.weld.servlet.api; \
+               org.jboss.weld.servlet.api.helpers; \
+               org.jboss.weld.resources.spi; \
+               org.jboss.weld.resources.spi.helpers; \
+               org.jboss.weld.bootstrap.spi; \
+               org.jboss.weld.bootstrap.spi.helpers; \
+               org.jboss.weld.bootstrap.api; \
+               org.jboss.weld.bootstrap.api.helpers; \
+               org.jboss.weld.serialization.spi; \
+               org.jboss.weld.serialization.spi.helpers; \
+               org.jboss.weld.security.spi; \
+               org.jboss.weld.injection.spi; \
+               org.jboss.weld.injection.spi.helpers; \
+               org.jboss.weld; \
+               org.jboss.weld.manager; \
+               org.jboss.weld.jsf; \
+               org.jboss.weld.ejb; \
+               org.jboss.weld.event; \
+               org.jboss.weld.introspector; \
+               org.jboss.weld.introspector.jlr; \
+               org.jboss.weld.context.beanstore; \
+               org.jboss.weld.context.beanstore.ejb; \
+               org.jboss.weld.context.beanstore.http; \
+               org.jboss.weld.context.cache; \
+               org.jboss.weld.context.conversation; \
+               org.jboss.weld.util; \
+               org.jboss.weld.util.dom; \
+               org.jboss.weld.util.reflection; \
+               org.jboss.weld.util.reflection.instantiation; \
+               org.jboss.weld.util.el; \
+               org.jboss.weld.util.bytecode; \
+               org.jboss.weld.util.collections; \
+               org.jboss.weld.exceptions; \
+               org.jboss.weld.metadata; \
+               org.jboss.weld.metadata.cache; \
+               org.jboss.weld.el; \
+               org.jboss.weld.xml; \
+               org.jboss.weld.servlet; \
+               org.jboss.weld.ws; \
+               org.jboss.weld.bean; \
+               org.jboss.weld.bean.builtin; \
+               org.jboss.weld.bean.builtin.ee; \
+               org.jboss.weld.bean.proxy; \
+               org.jboss.weld.bean.proxy.util; \
+               org.jboss.weld.bean.interceptor; \
+               org.jboss.weld.resources; \
+               org.jboss.weld.literal; \
+               org.jboss.weld.bootstrap; \
+               org.jboss.weld.bootstrap.events; \
+               org.jboss.weld.logging; \
+               org.jboss.weld.logging.messages; \
+               org.jboss.weld.serialization; \
+               org.jboss.weld.persistence; \
+               org.jboss.weld.resolution; \
+               org.jboss.weld.injection; \
+               org.jboss.weld.environment.se; \
+               org.jboss.weld.environment.se.events; \
+               org.jboss.weld.environment.se.bindings; \
+               org.jboss.weld.environment.se.threading; \
+               org.jboss.weld.environment.se.beans; \
+               org.jboss.weld.environment.se.discovery; \
+               org.jboss.weld.environment.se.discovery.url; \
+               org.jboss.weld.environment.se.contexts; \
+               org.jboss.weld.messages; version=1.1.3
+
 
 DynamicImport-Package *
 ",2012-10-12T10:30:48Z,140
"@@ -2,12 +2,12 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <parent>
+   <!--<parent>
       <groupId>org.jboss.weld.osgi.examples</groupId>
       <artifactId>weld-osgi-examples</artifactId>
       <version>1.1.3-SNAPSHOT</version>
       <relativePath>../pom.xml</relativePath>
-   </parent>
+   </parent>-->
     <modelVersion>4.0.0</modelVersion>
     <groupId>org.jboss.weld.osgi.examples</groupId>
     <artifactId>weld-osgi-container-equinox</artifactId>",2012-10-12T10:31:09Z,141
"@@ -2,302 +2,327 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <parent>
-      <groupId>org.jboss.weld.osgi.examples</groupId>
-      <artifactId>weld-osgi-examples</artifactId>
-      <version>1.1.3-SNAPSHOT</version>
-      <relativePath>../pom.xml</relativePath>
-   </parent>
-   <modelVersion>4.0.0</modelVersion>
-   <groupId>org.jboss.weld.osgi.examples</groupId>
-   <artifactId>weld-osgi-container-knopflerfish</artifactId>
-   <name>Weld OSGi (Examples Container Knopflerfish)</name>
-
-   <description>Standalone example for Weld-OSGi</description>
-
-   <url>http://www.seamframework.org/Weld</url>
-   <licenses>
-      <license>
-         <name>Apache License, Version 2.0</name>
-         <distribution>repo</distribution>
-         <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
-      </license>
-   </licenses>
-
-   <developers>
-      <developer>
-         <name>Mathieu Ancelin</name>
-         <email>mathieu.ancelin@serli.com</email>
-      </developer>
-      <developer>
-         <name>Matthieu Clochard</name>
-         <email>matthieu.clochard@serli.com</email>
-      </developer>
-   </developers>
-
-   <dependencies>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-divide</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-log</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-minus</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-plus</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-times</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-square</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-triangle</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-standalone</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-app</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-england</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-fwk</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-france</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-spain</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>javax.ws.rs</groupId>
-         <artifactId>jsr311-api</artifactId>
-         <version>1.1</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.codehaus.groovy</groupId>
-         <artifactId>groovy-all</artifactId>
-         <version>1.8.0-rc-3</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-spi</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-extension</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-mandatory</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-integration</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.osgi</groupId>
-         <artifactId>org.osgi.core</artifactId>
-         <version>4.2.0</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.main</artifactId>
-         <version>3.0.6</version>
-         <scope>provided</scope>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix.gogo</groupId>
-         <artifactId>org.apache.felix.gogo.commands</artifactId>
-         <version>0.4.0</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.bundlerepository</artifactId>
-         <version>1.2.1</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.shell.tui</artifactId>
-         <version>1.0.2</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.shell</artifactId>
-         <version>1.0.2</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.http.bundle</artifactId>
-         <version>2.0.4</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.log</artifactId>
-         <version>1.0.0</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.configadmin</artifactId>
-         <version>1.2.8</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld</groupId>
-         <artifactId>weld-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.se</groupId>
-         <artifactId>weld-se-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-   </dependencies>
-
-   <build>
-      <resources>
-         <resource>
-            <directory>src/main/resources</directory>
-             <filtering>true</filtering>
-         </resource>
-      </resources>
-      <plugins>
-         <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-antrun-plugin</artifactId>
-            <executions>
-               <execution>
-                  <id>compile</id>
-                  <phase>package</phase>
-                  <goals>
-                     <goal>run</goal>
-                  </goals>
-                  <configuration>
-                     <tasks>
-                        <copy file=""target/classes/config.properties"" tofile=""${project.build.directory}/config.properties""/>
-                        <copy file=""${maven.dependency.org.apache.felix.org.apache.felix.main.jar.path}"" tofile=""${project.build.directory}/felix.jar""/>
-                     </tasks>
-                  </configuration>
-               </execution>
-            </executions>
-         </plugin>
-
-         <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-assembly-plugin</artifactId>
-            <executions>
-               <execution>
-                  <id>create-executable-jar</id>
-                  <phase>package</phase>
-                  <goals>
-                     <goal>single</goal>
-                  </goals>
-                  <configuration>
-                     <descriptors>
-                        <descriptor>${basedir}/src/main/assembly/assembly.xml</descriptor>
-                     </descriptors>
-                     <finalName>${project.artifactId}-${project.version}</finalName>
-                  </configuration>
-               </execution>
-            </executions>
-         </plugin>
-      </plugins>
-   </build>
+    <!--<parent>
+        <groupId>org.jboss.weld.osgi.examples</groupId>
+        <artifactId>weld-osgi-examples</artifactId>
+        <version>1.1.3-SNAPSHOT</version>
+        <relativePath>../pom.xml</relativePath>
+    </parent>-->
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.jboss.weld.osgi.examples</groupId>
+    <artifactId>weld-osgi-container-knopflerfish</artifactId>
+    <version>1.1.3-SNAPSHOT</version>
+    <name>Weld OSGi (Examples Container Knopflerfish)</name>
+
+    <description>Standalone example for Weld-OSGi</description>
+
+    <url>http://www.seamframework.org/Weld</url>
+    <licenses>
+        <license>
+            <name>Apache License, Version 2.0</name>
+            <distribution>repo</distribution>
+            <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
+        </license>
+    </licenses>
+
+    <developers>
+        <developer>
+            <name>Mathieu Ancelin</name>
+            <email>mathieu.ancelin@serli.com</email>
+        </developer>
+        <developer>
+            <name>Matthieu Clochard</name>
+            <email>matthieu.clochard@serli.com</email>
+        </developer>
+    </developers>
+
+    <repositories>
+        <repository>
+            <releases>
+                <enabled>true</enabled>
+                <updatePolicy>never</updatePolicy>
+                <checksumPolicy>fail</checksumPolicy>
+            </releases>
+            <snapshots>
+                <enabled>true</enabled>
+                <updatePolicy>never</updatePolicy>
+                <checksumPolicy>fail</checksumPolicy>
+            </snapshots>
+            <id>Knopflerfish</id>
+            <name>Knopflerfish Releases Repository</name>
+            <url>http://www.knopflerfish.org/maven2</url>
+            <layout>default</layout>
+        </repository>
+    </repositories>
+
+    <dependencies>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-divide</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-log</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-minus</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-plus</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-times</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-square</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-triangle</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-standalone</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-app</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-england</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-fwk</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-france</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-spain</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>javax.ws.rs</groupId>
+            <artifactId>jsr311-api</artifactId>
+            <version>1.1</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.codehaus.groovy</groupId>
+            <artifactId>groovy-all</artifactId>
+            <version>1.8.0-rc-3</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-spi</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-extension</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-mandatory</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-integration</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld</groupId>
+            <artifactId>weld-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.se</groupId>
+            <artifactId>weld-se-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.osgi</groupId>
+            <artifactId>org.osgi.core</artifactId>
+            <version>4.2.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.osgi</groupId>
+            <artifactId>org.osgi.compendium</artifactId>
+            <version>4.2.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.knopflerfish</groupId>
+            <artifactId>framework</artifactId>
+            <version>5.1.14</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix.gogo</groupId>
+            <artifactId>org.apache.felix.gogo.commands</artifactId>
+            <version>0.4.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.bundlerepository</artifactId>
+            <version>1.2.1</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.shell.tui</artifactId>
+            <version>1.0.2</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.shell</artifactId>
+            <version>1.0.2</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.http.bundle</artifactId>
+            <version>2.0.4</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.log</artifactId>
+            <version>1.0.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.configadmin</artifactId>
+            <version>1.2.8</version>
+        </dependency>
+
+    </dependencies>
+
+    <build>
+        <resources>
+            <resource>
+                <directory>src/main/resources</directory>
+                <filtering>true</filtering>
+            </resource>
+        </resources>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-antrun-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>compile</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>run</goal>
+                        </goals>
+                        <configuration>
+                            <tasks>
+                                <copy file=""target/classes/config.xargs"" tofile=""${project.build.directory}/config.xargs""/>
+                                <copy file=""${maven.dependency.org.knopflerfish.framework.jar.path}"" tofile=""${project.build.directory}/knopflerfish.jar""/>
+                            </tasks>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-assembly-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>create-executable-jar</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>single</goal>
+                        </goals>
+                        <configuration>
+                            <descriptors>
+                                <descriptor>${basedir}/src/main/assembly/assembly.xml</descriptor>
+                            </descriptors>
+                            <finalName>${project.artifactId}-${project.version}</finalName>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+        </plugins>
+    </build>
 
 </project>",2012-10-12T10:31:09Z,142
"@@ -34,30 +34,25 @@
                 <include>org.jboss.weld.osgi:weld-osgi-core-spi</include>
                 <include>org.jboss.weld.osgi:weld-osgi-core-extension</include>
                 <include>org.jboss.weld.osgi:weld-osgi-core-mandatory</include>
+                <include>org.osgi:org.osgi.compendium</include>
                 <include>org.apache.felix:org.apache.felix.bundlerepository</include>
                 <include>org.apache.felix:org.apache.felix.shell.tui</include>
                 <include>org.apache.felix:org.apache.felix.shell</include>
                 <include>org.apache.felix:org.apache.felix.http.bundle</include>
                 <include>org.apache.felix:org.apache.felix.log</include>
                 <include>org.apache.felix:org.apache.felix.configadmin</include>
+                <include>org.codehaus.groovy:groovy-all</include>
                 <include>javax.ws.rs:jsr311-api</include>
             </includes>
         </dependencySet>
-        <dependencySet>
-            <useProjectArtifact>false</useProjectArtifact>
-            <outputDirectory></outputDirectory>
-            <includes>
-                <include>org.apache.felix:org.apache.felix.main</include>
-            </includes>
-        </dependencySet>
     </dependencySets>
     <files>
         <file>
-            <source>${project.build.directory}/felix.jar</source>
-            <outputDirectory>bin</outputDirectory>
+            <source>${project.build.directory}/knopflerfish.jar</source>
+            <outputDirectory></outputDirectory>
         </file>
         <file>
-            <source>${project.build.directory}/config.properties</source>
+            <source>${project.build.directory}/config.xargs</source>
             <outputDirectory>conf</outputDirectory>
         </file>
     </files>",2012-10-12T10:31:09Z,143
"@@ -1,49 +0,0 @@
-org.osgi.framework.storage.clean=onFirstInit
-
-felix.log.level=1
-
-org.osgi.framework.bootdelegation=sun.reflect
-
-felix.auto.install=  \
-file:modules/weld-osgi-core-api-${project.version}.jar \
-file:modules/weld-osgi-core-spi-${project.version}.jar \
-file:modules/weld-osgi-core-mandatory-${project.version}.jar \
-file:modules/weld-osgi-paint-api-${project.version}.jar  \
-file:modules/weld-osgi-paint-core-${project.version}.jar \
-file:modules/weld-osgi-paint-triangle-${project.version}.jar  \
-file:modules/weld-osgi-paint-square-${project.version}.jar  \
-file:modules/weld-osgi-calculator-api-${project.version}.jar  \
-file:modules/weld-osgi-calculator-core-${project.version}.jar  \
-file:modules/weld-osgi-calculator-log-${project.version}.jar  \
-file:modules/weld-osgi-calculator-divide-${project.version}.jar  \
-file:modules/weld-osgi-calculator-minus-${project.version}.jar  \
-file:modules/weld-osgi-calculator-plus-${project.version}.jar  \
-file:modules/weld-osgi-calculator-times-${project.version}.jar  \
-file:modules/weld-osgi-web-api-${project.version}.jar  \
-file:modules/weld-osgi-web-fwk-${project.version}.jar \
-file:modules/weld-osgi-web-france-${project.version}.jar  \
-file:modules/weld-osgi-web-spain-${project.version}.jar  \
-file:modules/weld-osgi-web-england-${project.version}.jar  \
-file:modules/weld-osgi-web-app-${project.version}.jar  \
-file:modules/weld-osgi-standalone-${project.version}.jar  \
-file:modules/jsr311-api-1.1.jar \
-file:modules/org.apache.felix.gogo.commands-0.4.0.jar  \
-file:modules/org.apache.felix.gogo.runtime-0.4.0.jar
-
-felix.auto.start= \
-file:modules/weld-osgi-core-extension-${project.version}.jar \
-file:modules/weld-osgi-core-integration-${project.version}.jar \
-file:modules/org.apache.felix.configadmin-1.2.8.jar \
-file:modules/org.apache.felix.http.bundle-2.0.4.jar \
-file:modules/org.apache.felix.log-1.0.0.jar \
-file:modules/org.apache.felix.shell-1.0.2.jar \
-file:modules/org.apache.felix.shell.tui-1.0.2.jar \
-file:modules/org.apache.felix.bundlerepository-1.2.1.jar
-
-org.osgi.service.http.port=9000
-org.apache.felix.http.whiteboardEnabled=true
-org.apache.felix.http.jettyEnabled=true
-org.apache.felix.http=true
-
-osgi.shell.telnet=on
-obr.repository.url=http://felix.apache.org/obr/releases.xml",2012-10-12T10:31:09Z,144
"@@ -0,0 +1,51 @@
+-init
+-launch
+
+-F org.osgi.framework.storage.clean=onFirstInit
+-F felix.log.level=1
+-F org.osgi.framework.bootdelegation=sun.reflect
+
+-install modules/weld-osgi-core-api-${project.version}.jar
+-install modules/weld-osgi-core-spi-${project.version}.jar
+-install modules/weld-osgi-core-mandatory-${project.version}.jar
+-install modules/weld-osgi-paint-api-${project.version}.jar
+-install modules/weld-osgi-paint-core-${project.version}.jar
+-install modules/weld-osgi-paint-triangle-${project.version}.jar
+-install modules/weld-osgi-paint-square-${project.version}.jar
+-install modules/weld-osgi-calculator-api-${project.version}.jar
+-install modules/weld-osgi-calculator-core-${project.version}.jar
+-install modules/weld-osgi-calculator-log-${project.version}.jar
+-install modules/weld-osgi-calculator-divide-${project.version}.jar
+-install modules/weld-osgi-calculator-minus-${project.version}.jar
+-install modules/weld-osgi-calculator-plus-${project.version}.jar
+-install modules/weld-osgi-calculator-times-${project.version}.jar
+-install modules/weld-osgi-web-api-${project.version}.jar
+-install modules/weld-osgi-web-fwk-${project.version}.jar
+-install modules/weld-osgi-web-france-${project.version}.jar
+-install modules/weld-osgi-web-spain-${project.version}.jar
+-install modules/weld-osgi-web-england-${project.version}.jar
+-install modules/weld-osgi-web-app-${project.version}.jar
+-install modules/weld-osgi-standalone-${project.version}.jar
+-install modules/groovy-all-1.8.0-rc-3.jar
+-install modules/jsr311-api-1.1.jar
+-install modules/org.apache.felix.gogo.commands-0.4.0.jar
+-install modules/org.apache.felix.gogo.runtime-0.4.0.jar
+-install modules/org.osgi.compendium-4.2.0.jar
+
+
+-istart modules/weld-osgi-core-extension-${project.version}.jar
+-istart modules/weld-osgi-core-integration-${project.version}.jar
+-istart modules/org.apache.felix.configadmin-1.2.8.jar
+-istart modules/org.apache.felix.http.bundle-2.0.4.jar
+-istart modules/org.apache.felix.log-1.0.0.jar
+-istart modules/org.apache.felix.shell-1.0.2.jar
+-istart modules/org.apache.felix.shell.tui-1.0.2.jar
+-istart modules/org.apache.felix.bundlerepository-1.2.1.jar
+
+-F org.osgi.service.http.port=9000
+-F org.apache.felix.http.whiteboardEnabled=true
+-F org.apache.felix.http.jettyEnabled=true
+-F org.apache.felix.http=true
+
+-F osgi.shell.telnet=on
+-F obr.repository.url=http://felix.apache.org/obr/releases.xml
\ No newline at end of file",2012-10-12T10:31:09Z,145
"@@ -1,150 +1,150 @@
 
 <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <modelVersion>4.0.0</modelVersion>
-   <groupId>org.jboss.weld.osgi</groupId>
-   <artifactId>weld-osgi-parent</artifactId>
-   <name>Weld OSGi (Parent)</name>
-   <packaging>pom</packaging>
-
-   <parent>
-      <groupId>org.jboss.weld</groupId>
-      <artifactId>weld-core-parent</artifactId>
-      <relativePath>../../parent/pom.xml</relativePath>
-      <version>1.1.3-SNAPSHOT</version>
-   </parent>
-
-   <licenses>
-      <license>
-         <name>Apache License, Version 2.0</name>
-         <distribution>repo</distribution>
-         <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
-      </license>
-   </licenses>
-   <url>http://www.seamframework.org/Weld</url>
-
-   <developers>
-      <developer>
-         <name>Mathieu Ancelin</name>
-         <email>mathieu.ancelin@serli.com</email>
-      </developer>
-      <developer>
-         <name>Matthieu Clochard</name>
-         <email>matthieu.clochard@serli.com</email>
-      </developer>
-   </developers>
-
-   <modules>
-      <module>core</module>
-      <module>examples</module>
-   </modules>
-
-   <profiles>
-      <profile>
-         <id>weld-osgi-docs</id>
-         <modules>
-            <module>docs</module>
-         </modules>
-      </profile>
-      <profile>
-         <id>weld-osgi-tests</id>
-         <modules>
-            <module>core</module>
-            <module>tests</module>
-         </modules>
-      </profile>
-   </profiles>
-
-   <description>
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.jboss.weld.osgi</groupId>
+    <artifactId>weld-osgi-parent</artifactId>
+    <name>Weld OSGi (Parent)</name>
+    <packaging>pom</packaging>
+
+    <parent>
+        <groupId>org.jboss.weld</groupId>
+        <artifactId>weld-core-parent</artifactId>
+        <relativePath>../../parent/pom.xml</relativePath>
+        <version>1.1.3-SNAPSHOT</version>
+    </parent>
+
+    <licenses>
+        <license>
+            <name>Apache License, Version 2.0</name>
+            <distribution>repo</distribution>
+            <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
+        </license>
+    </licenses>
+    <url>http://www.seamframework.org/Weld</url>
+
+    <developers>
+        <developer>
+            <name>Mathieu Ancelin</name>
+            <email>mathieu.ancelin@serli.com</email>
+        </developer>
+        <developer>
+            <name>Matthieu Clochard</name>
+            <email>matthieu.clochard@serli.com</email>
+        </developer>
+    </developers>
+
+    <modules>
+        <module>core</module>
+        <module>examples</module>
+    </modules>
+
+    <profiles>
+        <profile>
+            <id>weld-osgi-docs</id>
+            <modules>
+                <module>docs</module>
+            </modules>
+        </profile>
+        <profile>
+            <id>weld-osgi-tests</id>
+            <modules>
+                <module>core</module>
+                <module>tests</module>
+            </modules>
+        </profile>
+    </profiles>
+
+    <description>
       Support for Weld in OSGi Containers
-   </description>
-
-   <properties>
-      <osgi.version>4.2.0</osgi.version>
-      <javax.inject.version>1</javax.inject.version>
-      <javax.el.version>2.2</javax.el.version>
-      <jsr250.api>1.0</jsr250.api>
-      <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
-      <weld.api.version>1.2-SNAPSHOT</weld.api.version>
-      <slf4j.version>1.6.1</slf4j.version>
-      <logback.version>0.9.29</logback.version>
-   </properties>
-
-   <dependencyManagement>
-      <dependencies>
-
-         <dependency>
-            <groupId>org.osgi</groupId>
-            <artifactId>org.osgi.core</artifactId>
-            <version>${osgi.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.osgi</groupId>
-            <artifactId>org.osgi.compendium</artifactId>
-            <version>${osgi.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.jboss.weld</groupId>
-            <artifactId>weld-api</artifactId>
-            <version>${weld.api.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.jboss.weld</groupId>
-            <artifactId>weld-spi</artifactId>
-            <version>${weld.api.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>javax.inject</groupId>
-            <artifactId>javax.inject</artifactId>
-            <version>${javax.inject.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>javax.el</groupId>
-            <artifactId>el-api</artifactId>
-            <version>${javax.el.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>javax.annotation</groupId>
-            <artifactId>jsr250-api</artifactId>
-            <version>${jsr250.api}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.jboss.interceptor</groupId>
-            <artifactId>jboss-interceptor-api</artifactId>
-            <version>${jboss.interceptors.api.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-ext</artifactId>
-            <version>${slf4j.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-api</artifactId>
-            <version>${slf4j.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>ch.qos.logback</groupId>
-            <artifactId>logback-core</artifactId>
-            <version>${logback.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>ch.qos.logback</groupId>
-            <artifactId>logback-classic</artifactId>
-            <version>${logback.version}</version>
-         </dependency>
-
-      </dependencies>
-   </dependencyManagement>
+    </description>
+
+    <properties>
+        <osgi.version>4.2.0</osgi.version>
+        <javax.inject.version>1</javax.inject.version>
+        <javax.el.version>2.2</javax.el.version>
+        <jsr250.api>1.0</jsr250.api>
+        <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
+        <weld.api.version>1.2-SNAPSHOT</weld.api.version>
+        <slf4j.version>1.6.1</slf4j.version>
+        <logback.version>0.9.29</logback.version>
+    </properties>
+    
+    <dependencyManagement>
+        <dependencies>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.core</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.compendium</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld</groupId>
+                <artifactId>weld-api</artifactId>
+                <version>${weld.api.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld</groupId>
+                <artifactId>weld-spi</artifactId>
+                <version>${weld.api.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.inject</groupId>
+                <artifactId>javax.inject</artifactId>
+                <version>${javax.inject.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.el</groupId>
+                <artifactId>el-api</artifactId>
+                <version>${javax.el.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.annotation</groupId>
+                <artifactId>jsr250-api</artifactId>
+                <version>${jsr250.api}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.interceptor</groupId>
+                <artifactId>jboss-interceptor-api</artifactId>
+                <version>${jboss.interceptors.api.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.slf4j</groupId>
+                <artifactId>slf4j-ext</artifactId>
+                <version>${slf4j.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.slf4j</groupId>
+                <artifactId>slf4j-api</artifactId>
+                <version>${slf4j.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-core</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-classic</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
+        </dependencies>
+    </dependencyManagement>
 
 </project>",2012-10-12T10:31:09Z,146
"@@ -0,0 +1,4 @@
+#!/bin/sh
+
+cd ./examples/container-knopflerfish/target/weld-osgi-container-knopflerfish-1.1.3-SNAPSHOT-all/weld-osgi-container-knopflerfish-1.1.3-SNAPSHOT/
+java -jar knopflerfish.jar -xargs conf/config.xargs",2012-10-12T10:31:09Z,147
"@@ -48,13 +48,10 @@ public static void waitForEnvironment(BundleContext context) throws InterruptedE
         while(!ready) {
             ready = true;
             for(Bundle b : context.getBundles()) {
-                System.out.println(""wait for bundle "" + b.getSymbolicName());
                 if(b.getState() != Bundle.ACTIVE) {
                     ready = false;
                     break;
                 }
-                System.out.println(""bundle "" + b.getSymbolicName() + "" is ready"");
-                Thread.sleep(500);
             }
             Thread.sleep(500);
         }",2012-10-12T10:31:09Z,148
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
@@ -29,18 +46,15 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-extension</artifactId>
-            <version>${project.version}</version>
         </dependency>
         <dependency>
             <groupId>javax</groupId>
             <artifactId>javaee-web-api</artifactId>
-            <version>6.0</version>
             <scope>provided</scope>
         </dependency>
         <dependency>
             <groupId>org.osgi</groupId>
             <artifactId>org.osgi.core</artifactId>
-            <version>4.2.0</version>
             <scope>provided</scope>
         </dependency>
 ",2012-10-12T10:31:59Z,149
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
@@ -39,13 +56,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>",2012-10-12T10:31:59Z,150
"@@ -46,19 +46,16 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-extension</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>",2012-10-12T10:31:59Z,138
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
@@ -34,7 +51,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,151
"@@ -75,85 +75,4 @@
         Support for Weld in OSGi Containers
     </description>
 
-    <properties>
-        <osgi.version>4.2.0</osgi.version>
-        <javax.inject.version>1</javax.inject.version>
-        <javax.el.version>2.2</javax.el.version>
-        <jsr250.api>1.0</jsr250.api>
-        <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
-        <logback.version>0.9.29</logback.version>
-    </properties>
-
-    <dependencyManagement>
-        <dependencies>
-
-            <dependency>
-                <groupId>org.osgi</groupId>
-                <artifactId>org.osgi.core</artifactId>
-                <version>${osgi.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.osgi</groupId>
-                <artifactId>org.osgi.compendium</artifactId>
-                <version>${osgi.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.jboss.weld</groupId>
-                <artifactId>weld-api</artifactId>
-                <version>${weld.api.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.jboss.weld</groupId>
-                <artifactId>weld-spi</artifactId>
-                <version>${weld.api.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>javax.inject</groupId>
-                <artifactId>javax.inject</artifactId>
-                <version>${javax.inject.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>javax.el</groupId>
-                <artifactId>el-api</artifactId>
-                <version>${javax.el.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>javax.annotation</groupId>
-                <artifactId>jsr250-api</artifactId>
-                <version>${jsr250.api}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.slf4j</groupId>
-                <artifactId>slf4j-ext</artifactId>
-                <version>${slf4j.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.slf4j</groupId>
-                <artifactId>slf4j-api</artifactId>
-                <version>${slf4j.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>ch.qos.logback</groupId>
-                <artifactId>logback-core</artifactId>
-                <version>${logback.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>ch.qos.logback</groupId>
-                <artifactId>logback-classic</artifactId>
-                <version>${logback.version}</version>
-            </dependency>
-
-        </dependencies>
-    </dependencyManagement>
-
 </project>",2012-10-12T10:31:59Z,146
"@@ -58,7 +58,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,152
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,13 +58,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,153
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,13 +58,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,154
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -46,13 +63,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,155
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">",2012-10-12T10:31:59Z,156
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,7 +58,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,157
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">",2012-10-12T10:31:59Z,158
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,7 +58,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-innerscanner</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,159
"@@ -33,11 +33,6 @@
 
     <description>Integration tests launcher for Weld-OSGi</description>
 
-    <properties>
-        <version.pax.exam>2.5.0</version.pax.exam>
-        <version.org.apache.felix>4.0.3</version.org.apache.felix>
-    </properties>
-
     <url>http://www.seamframework.org/Weld</url>
     <licenses>
         <license>
@@ -69,28 +64,24 @@
         <dependency>
             <groupId>org.ops4j.pax.exam</groupId>
             <artifactId>pax-exam-junit4</artifactId>
-            <version>${version.pax.exam}</version>
             <scope>test</scope>
         </dependency>
 
         <dependency>
             <groupId>org.ops4j.pax.exam</groupId>
             <artifactId>pax-exam-container-native</artifactId>
-            <version>${version.pax.exam}</version>
             <scope>test</scope>
         </dependency>
 
         <dependency>
             <groupId>org.ops4j.pax.exam</groupId>
             <artifactId>pax-exam-link-mvn</artifactId>
-            <version>${version.pax.exam}</version>
             <scope>test</scope>
         </dependency>
 
         <dependency>
             <groupId>org.apache.felix</groupId>
             <artifactId>org.apache.felix.framework</artifactId>
-            <version>${version.org.apache.felix}</version>
             <scope>test</scope>
         </dependency>
 
@@ -107,37 +98,31 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-extension</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-integration</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld</groupId>
             <artifactId>weld-core</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.se</groupId>
             <artifactId>weld-se-core</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
@@ -208,49 +193,41 @@
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle2</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle3</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-importing</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-scanner</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-innerscanner</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-cdi-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-life-cycle</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,160
"@@ -1,4 +1,5 @@
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
     <modelVersion>4.0.0</modelVersion>
     <groupId>org.jboss.weld</groupId>
     <artifactId>weld-core-parent</artifactId>
@@ -69,6 +70,17 @@
         <selenium.maven.plugin.version>1.0.1</selenium.maven.plugin.version>
         <slf4j.version>1.6.1</slf4j.version>
         <testng.version>5.10</testng.version>
+        <osgi.version>4.2.0</osgi.version>
+        <!-- Weld OSGi deps -->
+        <javax.inject.version>1</javax.inject.version>
+        <javax.web.version>6.0</javax.web.version>
+        <javax.el.version>2.2</javax.el.version>
+        <jsr250.api>1.0</jsr250.api>
+        <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
+        <logback.version>0.9.29</logback.version>
+        <pax.exam.version>2.5.0</pax.exam.version>
+        <org.apache.felix.version>4.0.3</org.apache.felix.version>
+        <!-- Weld API -->
         <weld.api.version>1.2.0.Beta1</weld.api.version>
     </properties>
 
@@ -215,12 +227,6 @@
                 <version>${arquillian.version}</version>
             </dependency>
 
-            <dependency>
-                <groupId>org.jboss.arquillian.container</groupId>
-                <artifactId>arquillian-container-test-spi</artifactId>
-                <version>${arquillian.version}</version>
-            </dependency>
-
             <dependency>
                 <groupId>org.jboss.arquillian.container</groupId>
                 <artifactId>arquillian-weld-ee-embedded-1.1</artifactId>
@@ -357,8 +363,8 @@
             </dependency>
 
             <dependency>
-	            <groupId>org.jboss.spec.javax.ws.rs</groupId>
-	            <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
+                <groupId>org.jboss.spec.javax.ws.rs</groupId>
+                <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
                 <version>${jboss.spec.jaxrs.version}</version>
             </dependency>
 
@@ -448,6 +454,154 @@
                 <version>${project.version}</version>
             </dependency>
 
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-api</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-extension</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-spi</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-integration</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-bundle1</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-bundle2</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-bundle3</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-importing</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-scanner</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-innerscanner</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-cdi-spi</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-life-cycle</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.ops4j.pax.exam</groupId>
+                <artifactId>pax-exam-junit4</artifactId>
+                <version>${pax.exam.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.ops4j.pax.exam</groupId>
+                <artifactId>pax-exam-container-native</artifactId>
+                <version>${pax.exam.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.ops4j.pax.exam</groupId>
+                <artifactId>pax-exam-link-mvn</artifactId>
+                <version>${pax.exam.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.apache.felix</groupId>
+                <artifactId>org.apache.felix.framework</artifactId>
+                <version>${org.apache.felix.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.core</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.compendium</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.inject</groupId>
+                <artifactId>javax.inject</artifactId>
+                <version>${javax.inject.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax</groupId>
+                <artifactId>javaee-web-api</artifactId>
+                <version>${javax.web.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.el</groupId>
+                <artifactId>el-api</artifactId>
+                <version>${javax.el.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.annotation</groupId>
+                <artifactId>jsr250-api</artifactId>
+                <version>${jsr250.api}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-core</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-classic</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
             <dependency>
                 <groupId>org.jboss.shrinkwrap</groupId>
                 <artifactId>shrinkwrap-impl-base</artifactId>
@@ -536,7 +690,7 @@
                         <configLocation>weld-checkstyle/checkstyle.xml</configLocation>
                         <consoleOutput>true</consoleOutput>
                         <failsOnError>true</failsOnError>
-                        <useFile />
+                        <useFile/>
                     </configuration>
                     <dependencies>
                         <dependency>
@@ -574,7 +728,7 @@
                                         </goals>
                                     </pluginExecutionFilter>
                                     <action>
-                                        <ignore />
+                                        <ignore/>
                                     </action>
                                 </pluginExecution>
                             </pluginExecutions>
@@ -586,10 +740,10 @@
                     <artifactId>maven-compiler-plugin</artifactId>
                     <version>2.3.2</version>
                     <configuration>
-                       <source>1.6</source>
-                       <target>1.6</target>
+                        <source>1.6</source>
+                        <target>1.6</target>
                     </configuration>
-                 </plugin>
+                </plugin>
             </plugins>
 
         </pluginManagement>",2012-10-12T10:31:59Z,161
"@@ -11,7 +11,8 @@
    express or implied. * See the License for the specific language
    governing permissions and * limitations under the License. */
 -->
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
     <parent>
         <artifactId>weld-core-parent</artifactId>
         <groupId>org.jboss.weld</groupId>
@@ -91,7 +92,7 @@
                             org.jboss.weld.manager;
                             org.jboss.weld.servlet;
                             org.jboss.weld.util;
-                            org.jboss.interceptor.*;
+                            org.jboss.weld.interceptor.*;
                             version=${osgi.version},
                             org.jboss.weld.el;
                             version=${osgi.version},
@@ -113,7 +114,8 @@
                              on foreign bundles.
                         -->
                         <Import-Package>
-                            org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=""[${slf4j.version},$${version;=+;${slf4j.version}})""; resolution:=optional,
+                            org.slf4j; org.slf4j.spi; org.slf4j.helpers;
+                            version=""[${slf4j.version},$${version;=+;${slf4j.version}})""; resolution:=optional,
                             ch.qos.cal10n; version=${cal10n.version}; resolution:=optional,
                             javax.interceptor.*, *;
                             resolution:=optional",2012-10-12T10:31:32Z,10
"@@ -46,8 +46,8 @@ public WeldCDIContainerFactory() {
         logger.debug(""Creation of a new Weld CDI container factory"");
         blackList = new HashSet<String>();
         blackList.add(""java.io.Serializable"");
-        blackList.add(""org.jboss.interceptor.proxy.LifecycleMixin"");
-        blackList.add(""org.jboss.interceptor.util.proxy.TargetInstanceProxy"");
+        blackList.add(""org.jboss.weld.interceptor.proxy.LifecycleMixin"");
+        blackList.add(""org.jboss.weld.interceptor.util.proxy.TargetInstanceProxy"");
         blackList.add(""javassist.util.proxy.ProxyObject"");
     }
 ",2012-10-12T10:31:32Z,131
"@@ -103,17 +103,17 @@ Import-Package org.jboss.weld.environment.osgi.api; \
                ch.qos.cal10n; \
                ch.qos.cal10n.verifier; \
                ch.qos.cal10n.util; version=0.7.2, \
-               org.jboss.interceptor.reader; \
-               org.jboss.interceptor.reader.cache; \
-               org.jboss.interceptor.spi.instance; \
-               org.jboss.interceptor.spi.context; \
-               org.jboss.interceptor.spi.model; \
-               org.jboss.interceptor.spi.metadata; \
-               org.jboss.interceptor.util; \
-               org.jboss.interceptor.util.proxy; \
-               org.jboss.interceptor.proxy; \
-               org.jboss.interceptor.proxy.javassist; \
-               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.interceptor.reader; \
+               org.jboss.weld.interceptor.reader.cache; \
+               org.jboss.weld.interceptor.spi.instance; \
+               org.jboss.weld.interceptor.spi.context; \
+               org.jboss.weld.interceptor.spi.model; \
+               org.jboss.weld.interceptor.spi.metadata; \
+               org.jboss.weld.interceptor.util; \
+               org.jboss.weld.interceptor.util.proxy; \
+               org.jboss.weld.interceptor.proxy; \
+               org.jboss.weld.interceptor.proxy.javassist; \
+               org.jboss.weld.interceptor.builder; \
                org.jboss.weld.manager.api; \
                org.jboss.weld.ejb.spi; \
                org.jboss.weld.ejb.spi.helpers; \
@@ -189,6 +189,6 @@ Import-Package org.jboss.weld.environment.osgi.api; \
                org.jboss.weld.environment.se.discovery; \
                org.jboss.weld.environment.se.discovery.url; \
                org.jboss.weld.environment.se.contexts; \
-               org.jboss.weld.messages; version=1.1.5
+               org.jboss.weld.messages; version=1.2.0-SNAPSHOT
 
 DynamicImport-Package *
\ No newline at end of file",2012-10-12T10:31:32Z,132
"@@ -97,17 +97,17 @@ Export-Package javax.el;version=2.2.0, \
                ch.qos.cal10n; \
                ch.qos.cal10n.verifier; \
                ch.qos.cal10n.util; version=0.7.2, \
-               org.jboss.interceptor.reader; \
-               org.jboss.interceptor.reader.cache; \
-               org.jboss.interceptor.spi.instance; \
-               org.jboss.interceptor.spi.context; \
-               org.jboss.interceptor.spi.model; \
-               org.jboss.interceptor.spi.metadata; \
-               org.jboss.interceptor.util; \
-               org.jboss.interceptor.util.proxy; \
-               org.jboss.interceptor.proxy; \
-               org.jboss.interceptor.proxy.javassist; \
-               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.interceptor.reader; \
+               org.jboss.weld.interceptor.reader.cache; \
+               org.jboss.weld.interceptor.spi.instance; \
+               org.jboss.weld.interceptor.spi.context; \
+               org.jboss.weld.interceptor.spi.model; \
+               org.jboss.weld.interceptor.spi.metadata; \
+               org.jboss.weld.interceptor.util; \
+               org.jboss.weld.interceptor.util.proxy; \
+               org.jboss.weld.interceptor.proxy; \
+               org.jboss.weld.interceptor.proxy.javassist; \
+               org.jboss.weld.interceptor.builder; \
                org.jboss.weld.manager.api; \
                org.jboss.weld.ejb.spi; \
                org.jboss.weld.ejb.spi.helpers; \
@@ -183,7 +183,7 @@ Export-Package javax.el;version=2.2.0, \
                org.jboss.weld.environment.se.discovery; \
                org.jboss.weld.environment.se.discovery.url; \
                org.jboss.weld.environment.se.contexts; \
-               org.jboss.weld.messages; version=1.1.5
+               org.jboss.weld.messages; version=1.2.0-SNAPSHOT
 
 
 DynamicImport-Package *",2012-10-12T10:31:32Z,133
"@@ -233,14 +233,15 @@ private void fireAllEvent(AbstractServiceEvent event, Event broadcaster,
       {
          try
          {
+            // here singleton issue
             broadcaster.select(eventClass,
-                               filteredServicesQualifiers(event,
-                                                          new SpecificationAnnotation(clazz),
-                                                          instance)).fire(event);
+               filteredServicesQualifiers(event,
+                  new SpecificationAnnotation(clazz),
+                  instance)).fire(event);
          }
          catch(Throwable t)
          {
-            t.printStackTrace();
+            //t.printStackTrace();
          }
       }
    }",2012-10-12T10:30:48Z,134
"@@ -95,13 +95,13 @@ public void startCDIOSGi() throws Exception {
 
     public void stopCDIOSGi() throws Exception {
         logger.info(""CDI-OSGi stop bundle management"");
-        started.set(false);
         for (Bundle bundle : context.getBundles()) {
             logger.trace(""Scanning {}"", bundle.getSymbolicName());
             if (managed.get(bundle.getBundleId()) != null) {
                 stopManagement(bundle);
             }
         }
+        started.set(false);
     }
 
     @Override
@@ -206,52 +206,30 @@ private void stopManagement(Bundle bundle) {
         boolean set = CDIOSGiExtension.currentBundle.get() != null;
         CDIOSGiExtension.currentBundle.set(bundle.getBundleId());
         CDIContainer holder = managed.get(bundle.getBundleId());
-        if (holder != null) {
-            BundleHolder bundleHolder = holder.getInstance().select(BundleHolder.class).get();
-            //if (bundleHolder.getState().equals(BundleState.VALID)) {
-                logger.trace(""Firing the BundleState.INVALID event"");
-                //bundleHolder.setState(BundleState.INVALID);
-                holder.getBeanManager().fireEvent(new Invalid());
-            //}
-            if(started.get()) {
-                factory().removeContainer(bundle);
-            }
-            logger.trace(""The container {} has been unregistered"",holder);
-            logger.trace(""Firing the BundleContainerEvents.BundleContainerShutdown event"");
-            holder.getBeanManager().fireEvent(new BundleContainerEvents.BundleContainerShutdown(bundle.getBundleContext()));
-
-            Collection<ServiceRegistration> regs = holder.getRegistrations();
-            logger.trace(""Unregistering the container registrations"");
-            /**for (ServiceRegistration reg : regs) {
+        if (started.get() && managed.containsKey(bundle.getBundleId())) {
+            if (holder != null) {
+                BundleHolder bundleHolder = holder.getInstance().select(BundleHolder.class).get();
                 try {
-                    reg.unregister();
-                } catch (IllegalStateException e) {// Ignore
-                    //logger.warn(""Unable to unregister a service"" + e.getCause());
-                }
-            }
-            try {
-                // unregistration for managed services. It should be done by the OSGi framework
-                logger.trace(""Unregistering the container managed services"");
-                RegistrationsHolderImpl regsHolder = holder.getInstance().select(RegistrationsHolderImpl.class).get();
-                for (ServiceRegistration r : regsHolder.getRegistrations()) {
-                    try {
-                        r.unregister();
-                    } catch (Exception e) {
-                        // the service is already unregistered if shutdown is called when bundle is stopped
-                        // but with a manual boostrap, you can't be sure
-                        //System.out.println(""Service already unregistered."");
+                    logger.trace(""Firing the BundleState.INVALID event"");
+                    holder.getBeanManager().fireEvent(new Invalid());
+                    logger.trace(""The container {} has been unregistered"",holder);
+                    logger.trace(""Firing the BundleContainerEvents.BundleContainerShutdown event"");
+                    // here singleton issue ?
+                    holder.getBeanManager().fireEvent(new BundleContainerEvents.BundleContainerShutdown(bundle.getBundleContext()));
+                } catch (Throwable t) {}
+                logger.trace(""Shutting down the container {}"", holder);
+                //holder.shutdown();
+                managed.remove(bundle.getBundleId());
+                if(started.get()) {
+                    if (factoryRef != null) {
+                        factory().removeContainer(bundle);
                     }
                 }
-            } catch (Throwable t) {
-                t.printStackTrace();
-            }   **/
-
-            logger.trace(""Shutting down the container {}"", holder);
-            holder.shutdown();
-            managed.remove(bundle.getBundleId());
-            logger.debug(""Bundle {} is unmanaged"", bundle.getSymbolicName());
-        } else {
-            logger.debug(""Bundle {} is not a bean bundle"", bundle.getSymbolicName());
+                holder.shutdown();
+                logger.debug(""Bundle {} is unmanaged"", bundle.getSymbolicName());
+            } else {
+                logger.debug(""Bundle {} is not a bean bundle"", bundle.getSymbolicName());
+            }
         }
         if (!set) {
             CDIOSGiExtension.currentBundle.remove();",2012-10-12T10:30:48Z,135
"@@ -2,8 +2,6 @@ Bundle-Activator org.jboss.weld.environment.osgi.impl.Activator
 
 Export-Package org.jboss.weld.environment.osgi.impl.extension.service;version=${pom.version}
 
-Embed-Dependency *; scope=compile; inline=true; artifactId=!org.osgi.core|org.osgi.compendium|weld-osgi-core-api|weld-osgi-core-spi
-
 Import-Package org.jboss.weld.environment.osgi.api; \
                org.jboss.weld.environment.osgi.api.annotation; \
                org.jboss.weld.environment.osgi.api.events; \
@@ -35,7 +33,61 @@ Import-Package org.jboss.weld.environment.osgi.api; \
                javassist.tools; \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
-               javassist.tools.web; version=3.14.0
+               javassist.tools.web; version=3.14.0, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29
+
 
 DynamicImport-Package *
 ",2012-10-12T10:30:48Z,136
"@@ -1,35 +0,0 @@
-<configuration debug=""false"">
-
-    <appender name=""Console"" class=""ch.qos.logback.core.ConsoleAppender"">
-        <filter class=""ch.qos.logback.classic.filter.ThresholdFilter"">
-            <level>info</level>
-        </filter>
-        <encoder>
-            <pattern>
-                %d{HH:mm:ss.SSS} %-15.-15([%-14.-14(%.-13thread])) %-5level %.-1000(%logger{25} - %msg) %n
-            </pattern>
-        </encoder>
-    </appender>
-
-    <appender name=""Log"" class=""ch.qos.logback.core.FileAppender"">
-        <file>cdi-osgi.log</file>
-        <append>false</append>
-        <filter class=""ch.qos.logback.classic.filter.ThresholdFilter"">
-            <level>trace</level>
-        </filter>
-        <encoder>
-            <pattern>
-                %d{HH:mm:ss.SSS} %-15.-15([%-14.-14(%.-13thread])) %-5level %.-1000(%logger{25} - %msg) %n %xEx{full}
-            </pattern>
-            <!--<pattern>
-                %d{HH:mm:ss.SSS} [%thread] %-5level %caller{1} %logger{25} - %msg%n %xEx{full}
-            </pattern>-->
-        </encoder>
-    </appender>
-
-    <root level=""trace"">
-        <appender-ref ref=""Console""/>
-        <appender-ref ref=""Log""/>
-    </root>
-
-</configuration>
\ No newline at end of file",2012-10-12T10:30:48Z,137
"@@ -84,11 +84,6 @@
          <artifactId>jsr250-api</artifactId>
       </dependency>
 
-      <dependency>
-         <groupId>com.google.guava</groupId>
-         <artifactId>guava</artifactId>
-      </dependency>
-
       <dependency>
          <groupId>org.jboss.interceptor</groupId>
          <artifactId>jboss-interceptor-spi</artifactId>
@@ -104,6 +99,11 @@
          <artifactId>jboss-interceptor-api</artifactId>
       </dependency>
 
+      <dependency>
+         <groupId>com.google.guava</groupId>
+         <artifactId>guava</artifactId>
+      </dependency>
+
       <dependency>
          <groupId>ch.qos.cal10n</groupId>
          <artifactId>cal10n-api</artifactId>",2012-10-12T10:30:48Z,138
"@@ -2,11 +2,7 @@ Bundle-Activator org.jboss.weld.environment.osgi.impl.WeldActivator
 
 Export-Package org.jboss.weld.environment.osgi.impl.embedded; version=${pom.version}
 
-Embed-Dependency *; scope=compile; inline=true; artifactId=!weld-osgi-core-spi|weld-osgi-core-extension|jboss-interceptor-api|javax.inject|jsr250-api|cdi-api|el-api
-
-Import-Package org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=1.6.1; resolution:=optional, \
-               ch.qos.cal10n; version=0.7.2; resolution:=optional, \
-               org.jboss.weld.environment.osgi.api; \
+Import-Package org.jboss.weld.environment.osgi.api; \
                org.jboss.weld.environment.osgi.api.annotation; \
                org.jboss.weld.environment.osgi.api.events; \
                org.jboss.weld.environment.osgi.spi;version=${pom.version}, \
@@ -20,6 +16,7 @@ Import-Package org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=1.6.1; resol
                javax.enterprise.inject.spi; \
                javax.enterprise.util; version=1.0.0, \
                javax.interceptor; version=1.1.0, \
+               org.osgi.framework, \
                javassist; \
                javassist.bytecode; \
                javassist.bytecode.analysis; \
@@ -36,6 +33,162 @@ Import-Package org.slf4j; org.slf4j.spi; org.slf4j.helpers; version=1.6.1; resol
                javassist.tools; \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
-               javassist.tools.web; version=3.14.0
+               javassist.tools.web; version=3.14.0, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; \
+               org.slf4j.cal10n; \
+               org.slf4j.profiler; \
+               org.slf4j.agent; \
+               org.slf4j.instrumentation; \
+               org.slf4j.ext; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29, \
+               com.google.common.primitives; \
+               com.google.common.collect; \
+               com.google.common.util.concurrent; \
+               com.google.common.io; \
+               com.google.common.net; \
+               com.google.common.annotations; \
+               com.google.common.base; \
+               com.google.common.base.internal, \
+               ch.qos.cal10n; \
+               ch.qos.cal10n.verifier; \
+               ch.qos.cal10n.util; version=0.7.2, \
+               org.jboss.interceptor.reader; \
+               org.jboss.interceptor.reader.cache; \
+               org.jboss.interceptor.spi.instance; \
+               org.jboss.interceptor.spi.context; \
+               org.jboss.interceptor.spi.model; \
+               org.jboss.interceptor.spi.metadata; \
+               org.jboss.interceptor.util; \
+               org.jboss.interceptor.util.proxy; \
+               org.jboss.interceptor.proxy; \
+               org.jboss.interceptor.proxy.javassist; \
+               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.manager.api; \
+               org.jboss.weld.ejb.spi; \
+               org.jboss.weld.ejb.spi.helpers; \
+               org.jboss.weld.ejb.api; \
+               org.jboss.weld.context; \
+               org.jboss.weld.context.ejb; \
+               org.jboss.weld.context.unbound; \
+               org.jboss.weld.context.bound; \
+               org.jboss.weld.context.api; \
+               org.jboss.weld.context.http; \
+               org.jboss.weld.validation.spi; \
+               org.jboss.weld.transaction.spi; \
+               org.jboss.weld.servlet.api; \
+               org.jboss.weld.servlet.api.helpers; \
+               org.jboss.weld.resources.spi; \
+               org.jboss.weld.resources.spi.helpers; \
+               org.jboss.weld.bootstrap.spi; \
+               org.jboss.weld.bootstrap.spi.helpers; \
+               org.jboss.weld.bootstrap.api; \
+               org.jboss.weld.bootstrap.api.helpers; \
+               org.jboss.weld.serialization.spi; \
+               org.jboss.weld.serialization.spi.helpers; \
+               org.jboss.weld.security.spi; \
+               org.jboss.weld.injection.spi; \
+               org.jboss.weld.injection.spi.helpers; \
+               org.jboss.weld; \
+               org.jboss.weld.manager; \
+               org.jboss.weld.jsf; \
+               org.jboss.weld.ejb; \
+               org.jboss.weld.event; \
+               org.jboss.weld.introspector; \
+               org.jboss.weld.introspector.jlr; \
+               org.jboss.weld.context.beanstore; \
+               org.jboss.weld.context.beanstore.ejb; \
+               org.jboss.weld.context.beanstore.http; \
+               org.jboss.weld.context.cache; \
+               org.jboss.weld.context.conversation; \
+               org.jboss.weld.util; \
+               org.jboss.weld.util.dom; \
+               org.jboss.weld.util.reflection; \
+               org.jboss.weld.util.reflection.instantiation; \
+               org.jboss.weld.util.el; \
+               org.jboss.weld.util.bytecode; \
+               org.jboss.weld.util.collections; \
+               org.jboss.weld.exceptions; \
+               org.jboss.weld.metadata; \
+               org.jboss.weld.metadata.cache; \
+               org.jboss.weld.el; \
+               org.jboss.weld.xml; \
+               org.jboss.weld.servlet; \
+               org.jboss.weld.ws; \
+               org.jboss.weld.bean; \
+               org.jboss.weld.bean.builtin; \
+               org.jboss.weld.bean.builtin.ee; \
+               org.jboss.weld.bean.proxy; \
+               org.jboss.weld.bean.proxy.util; \
+               org.jboss.weld.bean.interceptor; \
+               org.jboss.weld.resources; \
+               org.jboss.weld.literal; \
+               org.jboss.weld.bootstrap; \
+               org.jboss.weld.bootstrap.events; \
+               org.jboss.weld.logging; \
+               org.jboss.weld.logging.messages; \
+               org.jboss.weld.serialization; \
+               org.jboss.weld.persistence; \
+               org.jboss.weld.resolution; \
+               org.jboss.weld.injection; \
+               org.jboss.weld.environment.se; \
+               org.jboss.weld.environment.se.events; \
+               org.jboss.weld.environment.se.bindings; \
+               org.jboss.weld.environment.se.threading; \
+               org.jboss.weld.environment.se.beans; \
+               org.jboss.weld.environment.se.discovery; \
+               org.jboss.weld.environment.se.discovery.url; \
+               org.jboss.weld.environment.se.contexts; \
+               org.jboss.weld.messages; version=1.1.3
 
 DynamicImport-Package *
\ No newline at end of file",2012-10-12T10:30:48Z,132
"@@ -34,43 +34,103 @@
          <email>matthieu.clochard@serli.com</email>
       </developer>
    </developers>
-    
-    <dependencies>
-    
-        <dependency>
-            <groupId>javax.inject</groupId>
-            <artifactId>javax.inject</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>org.jboss.interceptor</groupId>
-            <artifactId>jboss-interceptor-api</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>javax.el</groupId>
-            <artifactId>el-api</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>javax.enterprise</groupId>
-            <artifactId>cdi-api</artifactId>
-        </dependency>
-        
-        <dependency>
-            <groupId>org.javassist</groupId>
-            <artifactId>javassist</artifactId>
-        </dependency>
-        
-    </dependencies>
-
-    <build>
-        <plugins>
-            <plugin>
-                <groupId>org.apache.felix</groupId>
-                <artifactId>maven-bundle-plugin</artifactId>
-            </plugin>
-        </plugins>
-    </build>
-    
+
+   <dependencies>
+
+      <dependency>
+         <groupId>org.jboss.weld</groupId>
+         <artifactId>weld-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.weld.se</groupId>
+         <artifactId>weld-se-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.weld</groupId>
+         <artifactId>weld-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.weld</groupId>
+         <artifactId>weld-spi</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>javax.inject</groupId>
+         <artifactId>javax.inject</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>javax.el</groupId>
+         <artifactId>el-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>javax.enterprise</groupId>
+         <artifactId>cdi-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.interceptor</groupId>
+         <artifactId>jboss-interceptor-spi</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.interceptor</groupId>
+         <artifactId>jboss-interceptor-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.interceptor</groupId>
+         <artifactId>jboss-interceptor-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.javassist</groupId>
+         <artifactId>javassist</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>com.google.guava</groupId>
+         <artifactId>guava</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>ch.qos.cal10n</groupId>
+         <artifactId>cal10n-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.slf4j</groupId>
+         <artifactId>slf4j-ext</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>org.slf4j</groupId>
+         <artifactId>slf4j-api</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>ch.qos.logback</groupId>
+         <artifactId>logback-core</artifactId>
+      </dependency>
+
+      <dependency>
+         <groupId>ch.qos.logback</groupId>
+         <artifactId>logback-classic</artifactId>
+      </dependency>
+
+   </dependencies>
+
+   <build>
+      <plugins>
+         <plugin>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>maven-bundle-plugin</artifactId>
+         </plugin>
+      </plugins>
+   </build>
+
 </project>",2012-10-12T10:30:48Z,139
"@@ -27,7 +27,164 @@ Export-Package javax.el;version=2.2.0, \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
                javassist.tools.web; version=3.14.0, \
-               com.sun.jdi
+               com.sun.jdi, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; \
+               org.slf4j.cal10n; \
+               org.slf4j.profiler; \
+               org.slf4j.agent; \
+               org.slf4j.instrumentation; \
+               org.slf4j.ext; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29, \
+               com.google.common.primitives; \
+               com.google.common.collect; \
+               com.google.common.util.concurrent; \
+               com.google.common.io; \
+               com.google.common.net; \
+               com.google.common.annotations; \
+               com.google.common.base; \
+               com.google.common.base.internal, \
+               ch.qos.cal10n; \
+               ch.qos.cal10n.verifier; \
+               ch.qos.cal10n.util; version=0.7.2, \
+               org.jboss.interceptor.reader; \
+               org.jboss.interceptor.reader.cache; \
+               org.jboss.interceptor.spi.instance; \
+               org.jboss.interceptor.spi.context; \
+               org.jboss.interceptor.spi.model; \
+               org.jboss.interceptor.spi.metadata; \
+               org.jboss.interceptor.util; \
+               org.jboss.interceptor.util.proxy; \
+               org.jboss.interceptor.proxy; \
+               org.jboss.interceptor.proxy.javassist; \
+               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.manager.api; \
+               org.jboss.weld.ejb.spi; \
+               org.jboss.weld.ejb.spi.helpers; \
+               org.jboss.weld.ejb.api; \
+               org.jboss.weld.context; \
+               org.jboss.weld.context.ejb; \
+               org.jboss.weld.context.unbound; \
+               org.jboss.weld.context.bound; \
+               org.jboss.weld.context.api; \
+               org.jboss.weld.context.http; \
+               org.jboss.weld.validation.spi; \
+               org.jboss.weld.transaction.spi; \
+               org.jboss.weld.servlet.api; \
+               org.jboss.weld.servlet.api.helpers; \
+               org.jboss.weld.resources.spi; \
+               org.jboss.weld.resources.spi.helpers; \
+               org.jboss.weld.bootstrap.spi; \
+               org.jboss.weld.bootstrap.spi.helpers; \
+               org.jboss.weld.bootstrap.api; \
+               org.jboss.weld.bootstrap.api.helpers; \
+               org.jboss.weld.serialization.spi; \
+               org.jboss.weld.serialization.spi.helpers; \
+               org.jboss.weld.security.spi; \
+               org.jboss.weld.injection.spi; \
+               org.jboss.weld.injection.spi.helpers; \
+               org.jboss.weld; \
+               org.jboss.weld.manager; \
+               org.jboss.weld.jsf; \
+               org.jboss.weld.ejb; \
+               org.jboss.weld.event; \
+               org.jboss.weld.introspector; \
+               org.jboss.weld.introspector.jlr; \
+               org.jboss.weld.context.beanstore; \
+               org.jboss.weld.context.beanstore.ejb; \
+               org.jboss.weld.context.beanstore.http; \
+               org.jboss.weld.context.cache; \
+               org.jboss.weld.context.conversation; \
+               org.jboss.weld.util; \
+               org.jboss.weld.util.dom; \
+               org.jboss.weld.util.reflection; \
+               org.jboss.weld.util.reflection.instantiation; \
+               org.jboss.weld.util.el; \
+               org.jboss.weld.util.bytecode; \
+               org.jboss.weld.util.collections; \
+               org.jboss.weld.exceptions; \
+               org.jboss.weld.metadata; \
+               org.jboss.weld.metadata.cache; \
+               org.jboss.weld.el; \
+               org.jboss.weld.xml; \
+               org.jboss.weld.servlet; \
+               org.jboss.weld.ws; \
+               org.jboss.weld.bean; \
+               org.jboss.weld.bean.builtin; \
+               org.jboss.weld.bean.builtin.ee; \
+               org.jboss.weld.bean.proxy; \
+               org.jboss.weld.bean.proxy.util; \
+               org.jboss.weld.bean.interceptor; \
+               org.jboss.weld.resources; \
+               org.jboss.weld.literal; \
+               org.jboss.weld.bootstrap; \
+               org.jboss.weld.bootstrap.events; \
+               org.jboss.weld.logging; \
+               org.jboss.weld.logging.messages; \
+               org.jboss.weld.serialization; \
+               org.jboss.weld.persistence; \
+               org.jboss.weld.resolution; \
+               org.jboss.weld.injection; \
+               org.jboss.weld.environment.se; \
+               org.jboss.weld.environment.se.events; \
+               org.jboss.weld.environment.se.bindings; \
+               org.jboss.weld.environment.se.threading; \
+               org.jboss.weld.environment.se.beans; \
+               org.jboss.weld.environment.se.discovery; \
+               org.jboss.weld.environment.se.discovery.url; \
+               org.jboss.weld.environment.se.contexts; \
+               org.jboss.weld.messages; version=1.1.3
+
 
 DynamicImport-Package *
 ",2012-10-12T10:30:48Z,133
"@@ -27,7 +27,164 @@ Export-Package javax.el;version=2.2.0, \
                javassist.tools.reflect; \
                javassist.tools.rmi; \
                javassist.tools.web; version=3.14.0, \
-               com.sun.jdi
+               com.sun.jdi, \
+               org.slf4j; \
+               org.slf4j.spi; \
+               org.slf4j.helpers; \
+               org.slf4j.cal10n; \
+               org.slf4j.profiler; \
+               org.slf4j.agent; \
+               org.slf4j.instrumentation; \
+               org.slf4j.ext; version=1.6.1, \
+               ch.qos.logback.classic; \
+               ch.qos.logback.classic.filter; \
+               ch.qos.logback.classic.html; \
+               ch.qos.logback.classic.sift; \
+               ch.qos.logback.classic.spi; \
+               ch.qos.logback.classic.util; \
+               ch.qos.logback.classic.boolex; \
+               ch.qos.logback.classic.jul; \
+               ch.qos.logback.classic.helpers; \
+               ch.qos.logback.classic.net; \
+               ch.qos.logback.classic.jmx; \
+               ch.qos.logback.classic.joran; \
+               ch.qos.logback.classic.joran.action; \
+               ch.qos.logback.classic.log4j; \
+               ch.qos.logback.classic.db; \
+               ch.qos.logback.classic.db.names; \
+               ch.qos.logback.classic.selector; \
+               ch.qos.logback.classic.selector.servlet; \
+               ch.qos.logback.classic.encoder; \
+               ch.qos.logback.classic.turbo; \
+               ch.qos.logback.classic.pattern; \
+               ch.qos.logback.classic.gaffer; \
+               ch.qos.logback.core; \
+               ch.qos.logback.core.filter; \
+               ch.qos.logback.core.read; \
+               ch.qos.logback.core.html; \
+               ch.qos.logback.core.sift; \
+               ch.qos.logback.core.spi; \
+               ch.qos.logback.core.util; \
+               ch.qos.logback.core.boolex; \
+               ch.qos.logback.core.helpers; \
+               ch.qos.logback.core.net; \
+               ch.qos.logback.core.joran; \
+               ch.qos.logback.core.joran.event; \
+               ch.qos.logback.core.joran.spi; \
+               ch.qos.logback.core.joran.util; \
+               ch.qos.logback.core.joran.conditional; \
+               ch.qos.logback.core.joran.action; \
+               ch.qos.logback.core.rolling; \
+               ch.qos.logback.core.rolling.helper; \
+               ch.qos.logback.core.db; \
+               ch.qos.logback.core.db.dialect; \
+               ch.qos.logback.core.encoder; \
+               ch.qos.logback.core.status; \
+               ch.qos.logback.core.layout; \
+               ch.qos.logback.core.pattern; \
+               ch.qos.logback.core.pattern.parser; \
+               ch.qos.logback.core.pattern.util; \
+               ch.qos.logback.core.recovery; \
+               org.slf4j.impl; version=0.9.29, \
+               com.google.common.primitives; \
+               com.google.common.collect; \
+               com.google.common.util.concurrent; \
+               com.google.common.io; \
+               com.google.common.net; \
+               com.google.common.annotations; \
+               com.google.common.base; \
+               com.google.common.base.internal, \
+               ch.qos.cal10n; \
+               ch.qos.cal10n.verifier; \
+               ch.qos.cal10n.util; version=0.7.2, \
+               org.jboss.interceptor.reader; \
+               org.jboss.interceptor.reader.cache; \
+               org.jboss.interceptor.spi.instance; \
+               org.jboss.interceptor.spi.context; \
+               org.jboss.interceptor.spi.model; \
+               org.jboss.interceptor.spi.metadata; \
+               org.jboss.interceptor.util; \
+               org.jboss.interceptor.util.proxy; \
+               org.jboss.interceptor.proxy; \
+               org.jboss.interceptor.proxy.javassist; \
+               org.jboss.interceptor.builder; version=2.0.0, \
+               org.jboss.weld.manager.api; \
+               org.jboss.weld.ejb.spi; \
+               org.jboss.weld.ejb.spi.helpers; \
+               org.jboss.weld.ejb.api; \
+               org.jboss.weld.context; \
+               org.jboss.weld.context.ejb; \
+               org.jboss.weld.context.unbound; \
+               org.jboss.weld.context.bound; \
+               org.jboss.weld.context.api; \
+               org.jboss.weld.context.http; \
+               org.jboss.weld.validation.spi; \
+               org.jboss.weld.transaction.spi; \
+               org.jboss.weld.servlet.api; \
+               org.jboss.weld.servlet.api.helpers; \
+               org.jboss.weld.resources.spi; \
+               org.jboss.weld.resources.spi.helpers; \
+               org.jboss.weld.bootstrap.spi; \
+               org.jboss.weld.bootstrap.spi.helpers; \
+               org.jboss.weld.bootstrap.api; \
+               org.jboss.weld.bootstrap.api.helpers; \
+               org.jboss.weld.serialization.spi; \
+               org.jboss.weld.serialization.spi.helpers; \
+               org.jboss.weld.security.spi; \
+               org.jboss.weld.injection.spi; \
+               org.jboss.weld.injection.spi.helpers; \
+               org.jboss.weld; \
+               org.jboss.weld.manager; \
+               org.jboss.weld.jsf; \
+               org.jboss.weld.ejb; \
+               org.jboss.weld.event; \
+               org.jboss.weld.introspector; \
+               org.jboss.weld.introspector.jlr; \
+               org.jboss.weld.context.beanstore; \
+               org.jboss.weld.context.beanstore.ejb; \
+               org.jboss.weld.context.beanstore.http; \
+               org.jboss.weld.context.cache; \
+               org.jboss.weld.context.conversation; \
+               org.jboss.weld.util; \
+               org.jboss.weld.util.dom; \
+               org.jboss.weld.util.reflection; \
+               org.jboss.weld.util.reflection.instantiation; \
+               org.jboss.weld.util.el; \
+               org.jboss.weld.util.bytecode; \
+               org.jboss.weld.util.collections; \
+               org.jboss.weld.exceptions; \
+               org.jboss.weld.metadata; \
+               org.jboss.weld.metadata.cache; \
+               org.jboss.weld.el; \
+               org.jboss.weld.xml; \
+               org.jboss.weld.servlet; \
+               org.jboss.weld.ws; \
+               org.jboss.weld.bean; \
+               org.jboss.weld.bean.builtin; \
+               org.jboss.weld.bean.builtin.ee; \
+               org.jboss.weld.bean.proxy; \
+               org.jboss.weld.bean.proxy.util; \
+               org.jboss.weld.bean.interceptor; \
+               org.jboss.weld.resources; \
+               org.jboss.weld.literal; \
+               org.jboss.weld.bootstrap; \
+               org.jboss.weld.bootstrap.events; \
+               org.jboss.weld.logging; \
+               org.jboss.weld.logging.messages; \
+               org.jboss.weld.serialization; \
+               org.jboss.weld.persistence; \
+               org.jboss.weld.resolution; \
+               org.jboss.weld.injection; \
+               org.jboss.weld.environment.se; \
+               org.jboss.weld.environment.se.events; \
+               org.jboss.weld.environment.se.bindings; \
+               org.jboss.weld.environment.se.threading; \
+               org.jboss.weld.environment.se.beans; \
+               org.jboss.weld.environment.se.discovery; \
+               org.jboss.weld.environment.se.discovery.url; \
+               org.jboss.weld.environment.se.contexts; \
+               org.jboss.weld.messages; version=1.1.3
+
 
 DynamicImport-Package *
 ",2012-10-12T10:30:48Z,140
"@@ -2,12 +2,12 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <parent>
+   <!--<parent>
       <groupId>org.jboss.weld.osgi.examples</groupId>
       <artifactId>weld-osgi-examples</artifactId>
       <version>1.1.3-SNAPSHOT</version>
       <relativePath>../pom.xml</relativePath>
-   </parent>
+   </parent>-->
     <modelVersion>4.0.0</modelVersion>
     <groupId>org.jboss.weld.osgi.examples</groupId>
     <artifactId>weld-osgi-container-equinox</artifactId>",2012-10-12T10:31:09Z,141
"@@ -2,302 +2,327 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <parent>
-      <groupId>org.jboss.weld.osgi.examples</groupId>
-      <artifactId>weld-osgi-examples</artifactId>
-      <version>1.1.3-SNAPSHOT</version>
-      <relativePath>../pom.xml</relativePath>
-   </parent>
-   <modelVersion>4.0.0</modelVersion>
-   <groupId>org.jboss.weld.osgi.examples</groupId>
-   <artifactId>weld-osgi-container-knopflerfish</artifactId>
-   <name>Weld OSGi (Examples Container Knopflerfish)</name>
-
-   <description>Standalone example for Weld-OSGi</description>
-
-   <url>http://www.seamframework.org/Weld</url>
-   <licenses>
-      <license>
-         <name>Apache License, Version 2.0</name>
-         <distribution>repo</distribution>
-         <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
-      </license>
-   </licenses>
-
-   <developers>
-      <developer>
-         <name>Mathieu Ancelin</name>
-         <email>mathieu.ancelin@serli.com</email>
-      </developer>
-      <developer>
-         <name>Matthieu Clochard</name>
-         <email>matthieu.clochard@serli.com</email>
-      </developer>
-   </developers>
-
-   <dependencies>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-divide</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-log</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-minus</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-plus</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-calculator-times</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-square</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-paint-triangle</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-standalone</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-app</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-england</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-fwk</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-france</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi.examples</groupId>
-         <artifactId>weld-osgi-web-spain</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>javax.ws.rs</groupId>
-         <artifactId>jsr311-api</artifactId>
-         <version>1.1</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.codehaus.groovy</groupId>
-         <artifactId>groovy-all</artifactId>
-         <version>1.8.0-rc-3</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-spi</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-extension</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-mandatory</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.osgi</groupId>
-         <artifactId>weld-osgi-core-integration</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.osgi</groupId>
-         <artifactId>org.osgi.core</artifactId>
-         <version>4.2.0</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.main</artifactId>
-         <version>3.0.6</version>
-         <scope>provided</scope>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix.gogo</groupId>
-         <artifactId>org.apache.felix.gogo.commands</artifactId>
-         <version>0.4.0</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.bundlerepository</artifactId>
-         <version>1.2.1</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.shell.tui</artifactId>
-         <version>1.0.2</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.shell</artifactId>
-         <version>1.0.2</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.http.bundle</artifactId>
-         <version>2.0.4</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.log</artifactId>
-         <version>1.0.0</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.apache.felix</groupId>
-         <artifactId>org.apache.felix.configadmin</artifactId>
-         <version>1.2.8</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld</groupId>
-         <artifactId>weld-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>org.jboss.weld.se</groupId>
-         <artifactId>weld-se-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-   </dependencies>
-
-   <build>
-      <resources>
-         <resource>
-            <directory>src/main/resources</directory>
-             <filtering>true</filtering>
-         </resource>
-      </resources>
-      <plugins>
-         <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-antrun-plugin</artifactId>
-            <executions>
-               <execution>
-                  <id>compile</id>
-                  <phase>package</phase>
-                  <goals>
-                     <goal>run</goal>
-                  </goals>
-                  <configuration>
-                     <tasks>
-                        <copy file=""target/classes/config.properties"" tofile=""${project.build.directory}/config.properties""/>
-                        <copy file=""${maven.dependency.org.apache.felix.org.apache.felix.main.jar.path}"" tofile=""${project.build.directory}/felix.jar""/>
-                     </tasks>
-                  </configuration>
-               </execution>
-            </executions>
-         </plugin>
-
-         <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-assembly-plugin</artifactId>
-            <executions>
-               <execution>
-                  <id>create-executable-jar</id>
-                  <phase>package</phase>
-                  <goals>
-                     <goal>single</goal>
-                  </goals>
-                  <configuration>
-                     <descriptors>
-                        <descriptor>${basedir}/src/main/assembly/assembly.xml</descriptor>
-                     </descriptors>
-                     <finalName>${project.artifactId}-${project.version}</finalName>
-                  </configuration>
-               </execution>
-            </executions>
-         </plugin>
-      </plugins>
-   </build>
+    <!--<parent>
+        <groupId>org.jboss.weld.osgi.examples</groupId>
+        <artifactId>weld-osgi-examples</artifactId>
+        <version>1.1.3-SNAPSHOT</version>
+        <relativePath>../pom.xml</relativePath>
+    </parent>-->
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.jboss.weld.osgi.examples</groupId>
+    <artifactId>weld-osgi-container-knopflerfish</artifactId>
+    <version>1.1.3-SNAPSHOT</version>
+    <name>Weld OSGi (Examples Container Knopflerfish)</name>
+
+    <description>Standalone example for Weld-OSGi</description>
+
+    <url>http://www.seamframework.org/Weld</url>
+    <licenses>
+        <license>
+            <name>Apache License, Version 2.0</name>
+            <distribution>repo</distribution>
+            <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
+        </license>
+    </licenses>
+
+    <developers>
+        <developer>
+            <name>Mathieu Ancelin</name>
+            <email>mathieu.ancelin@serli.com</email>
+        </developer>
+        <developer>
+            <name>Matthieu Clochard</name>
+            <email>matthieu.clochard@serli.com</email>
+        </developer>
+    </developers>
+
+    <repositories>
+        <repository>
+            <releases>
+                <enabled>true</enabled>
+                <updatePolicy>never</updatePolicy>
+                <checksumPolicy>fail</checksumPolicy>
+            </releases>
+            <snapshots>
+                <enabled>true</enabled>
+                <updatePolicy>never</updatePolicy>
+                <checksumPolicy>fail</checksumPolicy>
+            </snapshots>
+            <id>Knopflerfish</id>
+            <name>Knopflerfish Releases Repository</name>
+            <url>http://www.knopflerfish.org/maven2</url>
+            <layout>default</layout>
+        </repository>
+    </repositories>
+
+    <dependencies>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-divide</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-log</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-minus</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-plus</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-calculator-times</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-square</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-paint-triangle</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-standalone</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-app</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-england</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-fwk</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-france</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi.examples</groupId>
+            <artifactId>weld-osgi-web-spain</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>javax.ws.rs</groupId>
+            <artifactId>jsr311-api</artifactId>
+            <version>1.1</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.codehaus.groovy</groupId>
+            <artifactId>groovy-all</artifactId>
+            <version>1.8.0-rc-3</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-spi</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-extension</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-mandatory</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.osgi</groupId>
+            <artifactId>weld-osgi-core-integration</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld</groupId>
+            <artifactId>weld-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.jboss.weld.se</groupId>
+            <artifactId>weld-se-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.osgi</groupId>
+            <artifactId>org.osgi.core</artifactId>
+            <version>4.2.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.osgi</groupId>
+            <artifactId>org.osgi.compendium</artifactId>
+            <version>4.2.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.knopflerfish</groupId>
+            <artifactId>framework</artifactId>
+            <version>5.1.14</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix.gogo</groupId>
+            <artifactId>org.apache.felix.gogo.commands</artifactId>
+            <version>0.4.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.bundlerepository</artifactId>
+            <version>1.2.1</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.shell.tui</artifactId>
+            <version>1.0.2</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.shell</artifactId>
+            <version>1.0.2</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.http.bundle</artifactId>
+            <version>2.0.4</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.log</artifactId>
+            <version>1.0.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.configadmin</artifactId>
+            <version>1.2.8</version>
+        </dependency>
+
+    </dependencies>
+
+    <build>
+        <resources>
+            <resource>
+                <directory>src/main/resources</directory>
+                <filtering>true</filtering>
+            </resource>
+        </resources>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-antrun-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>compile</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>run</goal>
+                        </goals>
+                        <configuration>
+                            <tasks>
+                                <copy file=""target/classes/config.xargs"" tofile=""${project.build.directory}/config.xargs""/>
+                                <copy file=""${maven.dependency.org.knopflerfish.framework.jar.path}"" tofile=""${project.build.directory}/knopflerfish.jar""/>
+                            </tasks>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-assembly-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>create-executable-jar</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>single</goal>
+                        </goals>
+                        <configuration>
+                            <descriptors>
+                                <descriptor>${basedir}/src/main/assembly/assembly.xml</descriptor>
+                            </descriptors>
+                            <finalName>${project.artifactId}-${project.version}</finalName>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+        </plugins>
+    </build>
 
 </project>",2012-10-12T10:31:09Z,142
"@@ -34,30 +34,25 @@
                 <include>org.jboss.weld.osgi:weld-osgi-core-spi</include>
                 <include>org.jboss.weld.osgi:weld-osgi-core-extension</include>
                 <include>org.jboss.weld.osgi:weld-osgi-core-mandatory</include>
+                <include>org.osgi:org.osgi.compendium</include>
                 <include>org.apache.felix:org.apache.felix.bundlerepository</include>
                 <include>org.apache.felix:org.apache.felix.shell.tui</include>
                 <include>org.apache.felix:org.apache.felix.shell</include>
                 <include>org.apache.felix:org.apache.felix.http.bundle</include>
                 <include>org.apache.felix:org.apache.felix.log</include>
                 <include>org.apache.felix:org.apache.felix.configadmin</include>
+                <include>org.codehaus.groovy:groovy-all</include>
                 <include>javax.ws.rs:jsr311-api</include>
             </includes>
         </dependencySet>
-        <dependencySet>
-            <useProjectArtifact>false</useProjectArtifact>
-            <outputDirectory></outputDirectory>
-            <includes>
-                <include>org.apache.felix:org.apache.felix.main</include>
-            </includes>
-        </dependencySet>
     </dependencySets>
     <files>
         <file>
-            <source>${project.build.directory}/felix.jar</source>
-            <outputDirectory>bin</outputDirectory>
+            <source>${project.build.directory}/knopflerfish.jar</source>
+            <outputDirectory></outputDirectory>
         </file>
         <file>
-            <source>${project.build.directory}/config.properties</source>
+            <source>${project.build.directory}/config.xargs</source>
             <outputDirectory>conf</outputDirectory>
         </file>
     </files>",2012-10-12T10:31:09Z,143
"@@ -1,49 +0,0 @@
-org.osgi.framework.storage.clean=onFirstInit
-
-felix.log.level=1
-
-org.osgi.framework.bootdelegation=sun.reflect
-
-felix.auto.install=  \
-file:modules/weld-osgi-core-api-${project.version}.jar \
-file:modules/weld-osgi-core-spi-${project.version}.jar \
-file:modules/weld-osgi-core-mandatory-${project.version}.jar \
-file:modules/weld-osgi-paint-api-${project.version}.jar  \
-file:modules/weld-osgi-paint-core-${project.version}.jar \
-file:modules/weld-osgi-paint-triangle-${project.version}.jar  \
-file:modules/weld-osgi-paint-square-${project.version}.jar  \
-file:modules/weld-osgi-calculator-api-${project.version}.jar  \
-file:modules/weld-osgi-calculator-core-${project.version}.jar  \
-file:modules/weld-osgi-calculator-log-${project.version}.jar  \
-file:modules/weld-osgi-calculator-divide-${project.version}.jar  \
-file:modules/weld-osgi-calculator-minus-${project.version}.jar  \
-file:modules/weld-osgi-calculator-plus-${project.version}.jar  \
-file:modules/weld-osgi-calculator-times-${project.version}.jar  \
-file:modules/weld-osgi-web-api-${project.version}.jar  \
-file:modules/weld-osgi-web-fwk-${project.version}.jar \
-file:modules/weld-osgi-web-france-${project.version}.jar  \
-file:modules/weld-osgi-web-spain-${project.version}.jar  \
-file:modules/weld-osgi-web-england-${project.version}.jar  \
-file:modules/weld-osgi-web-app-${project.version}.jar  \
-file:modules/weld-osgi-standalone-${project.version}.jar  \
-file:modules/jsr311-api-1.1.jar \
-file:modules/org.apache.felix.gogo.commands-0.4.0.jar  \
-file:modules/org.apache.felix.gogo.runtime-0.4.0.jar
-
-felix.auto.start= \
-file:modules/weld-osgi-core-extension-${project.version}.jar \
-file:modules/weld-osgi-core-integration-${project.version}.jar \
-file:modules/org.apache.felix.configadmin-1.2.8.jar \
-file:modules/org.apache.felix.http.bundle-2.0.4.jar \
-file:modules/org.apache.felix.log-1.0.0.jar \
-file:modules/org.apache.felix.shell-1.0.2.jar \
-file:modules/org.apache.felix.shell.tui-1.0.2.jar \
-file:modules/org.apache.felix.bundlerepository-1.2.1.jar
-
-org.osgi.service.http.port=9000
-org.apache.felix.http.whiteboardEnabled=true
-org.apache.felix.http.jettyEnabled=true
-org.apache.felix.http=true
-
-osgi.shell.telnet=on
-obr.repository.url=http://felix.apache.org/obr/releases.xml",2012-10-12T10:31:09Z,144
"@@ -0,0 +1,51 @@
+-init
+-launch
+
+-F org.osgi.framework.storage.clean=onFirstInit
+-F felix.log.level=1
+-F org.osgi.framework.bootdelegation=sun.reflect
+
+-install modules/weld-osgi-core-api-${project.version}.jar
+-install modules/weld-osgi-core-spi-${project.version}.jar
+-install modules/weld-osgi-core-mandatory-${project.version}.jar
+-install modules/weld-osgi-paint-api-${project.version}.jar
+-install modules/weld-osgi-paint-core-${project.version}.jar
+-install modules/weld-osgi-paint-triangle-${project.version}.jar
+-install modules/weld-osgi-paint-square-${project.version}.jar
+-install modules/weld-osgi-calculator-api-${project.version}.jar
+-install modules/weld-osgi-calculator-core-${project.version}.jar
+-install modules/weld-osgi-calculator-log-${project.version}.jar
+-install modules/weld-osgi-calculator-divide-${project.version}.jar
+-install modules/weld-osgi-calculator-minus-${project.version}.jar
+-install modules/weld-osgi-calculator-plus-${project.version}.jar
+-install modules/weld-osgi-calculator-times-${project.version}.jar
+-install modules/weld-osgi-web-api-${project.version}.jar
+-install modules/weld-osgi-web-fwk-${project.version}.jar
+-install modules/weld-osgi-web-france-${project.version}.jar
+-install modules/weld-osgi-web-spain-${project.version}.jar
+-install modules/weld-osgi-web-england-${project.version}.jar
+-install modules/weld-osgi-web-app-${project.version}.jar
+-install modules/weld-osgi-standalone-${project.version}.jar
+-install modules/groovy-all-1.8.0-rc-3.jar
+-install modules/jsr311-api-1.1.jar
+-install modules/org.apache.felix.gogo.commands-0.4.0.jar
+-install modules/org.apache.felix.gogo.runtime-0.4.0.jar
+-install modules/org.osgi.compendium-4.2.0.jar
+
+
+-istart modules/weld-osgi-core-extension-${project.version}.jar
+-istart modules/weld-osgi-core-integration-${project.version}.jar
+-istart modules/org.apache.felix.configadmin-1.2.8.jar
+-istart modules/org.apache.felix.http.bundle-2.0.4.jar
+-istart modules/org.apache.felix.log-1.0.0.jar
+-istart modules/org.apache.felix.shell-1.0.2.jar
+-istart modules/org.apache.felix.shell.tui-1.0.2.jar
+-istart modules/org.apache.felix.bundlerepository-1.2.1.jar
+
+-F org.osgi.service.http.port=9000
+-F org.apache.felix.http.whiteboardEnabled=true
+-F org.apache.felix.http.jettyEnabled=true
+-F org.apache.felix.http=true
+
+-F osgi.shell.telnet=on
+-F obr.repository.url=http://felix.apache.org/obr/releases.xml
\ No newline at end of file",2012-10-12T10:31:09Z,145
"@@ -1,150 +1,150 @@
 
 <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <modelVersion>4.0.0</modelVersion>
-   <groupId>org.jboss.weld.osgi</groupId>
-   <artifactId>weld-osgi-parent</artifactId>
-   <name>Weld OSGi (Parent)</name>
-   <packaging>pom</packaging>
-
-   <parent>
-      <groupId>org.jboss.weld</groupId>
-      <artifactId>weld-core-parent</artifactId>
-      <relativePath>../../parent/pom.xml</relativePath>
-      <version>1.1.3-SNAPSHOT</version>
-   </parent>
-
-   <licenses>
-      <license>
-         <name>Apache License, Version 2.0</name>
-         <distribution>repo</distribution>
-         <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
-      </license>
-   </licenses>
-   <url>http://www.seamframework.org/Weld</url>
-
-   <developers>
-      <developer>
-         <name>Mathieu Ancelin</name>
-         <email>mathieu.ancelin@serli.com</email>
-      </developer>
-      <developer>
-         <name>Matthieu Clochard</name>
-         <email>matthieu.clochard@serli.com</email>
-      </developer>
-   </developers>
-
-   <modules>
-      <module>core</module>
-      <module>examples</module>
-   </modules>
-
-   <profiles>
-      <profile>
-         <id>weld-osgi-docs</id>
-         <modules>
-            <module>docs</module>
-         </modules>
-      </profile>
-      <profile>
-         <id>weld-osgi-tests</id>
-         <modules>
-            <module>core</module>
-            <module>tests</module>
-         </modules>
-      </profile>
-   </profiles>
-
-   <description>
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.jboss.weld.osgi</groupId>
+    <artifactId>weld-osgi-parent</artifactId>
+    <name>Weld OSGi (Parent)</name>
+    <packaging>pom</packaging>
+
+    <parent>
+        <groupId>org.jboss.weld</groupId>
+        <artifactId>weld-core-parent</artifactId>
+        <relativePath>../../parent/pom.xml</relativePath>
+        <version>1.1.3-SNAPSHOT</version>
+    </parent>
+
+    <licenses>
+        <license>
+            <name>Apache License, Version 2.0</name>
+            <distribution>repo</distribution>
+            <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
+        </license>
+    </licenses>
+    <url>http://www.seamframework.org/Weld</url>
+
+    <developers>
+        <developer>
+            <name>Mathieu Ancelin</name>
+            <email>mathieu.ancelin@serli.com</email>
+        </developer>
+        <developer>
+            <name>Matthieu Clochard</name>
+            <email>matthieu.clochard@serli.com</email>
+        </developer>
+    </developers>
+
+    <modules>
+        <module>core</module>
+        <module>examples</module>
+    </modules>
+
+    <profiles>
+        <profile>
+            <id>weld-osgi-docs</id>
+            <modules>
+                <module>docs</module>
+            </modules>
+        </profile>
+        <profile>
+            <id>weld-osgi-tests</id>
+            <modules>
+                <module>core</module>
+                <module>tests</module>
+            </modules>
+        </profile>
+    </profiles>
+
+    <description>
       Support for Weld in OSGi Containers
-   </description>
-
-   <properties>
-      <osgi.version>4.2.0</osgi.version>
-      <javax.inject.version>1</javax.inject.version>
-      <javax.el.version>2.2</javax.el.version>
-      <jsr250.api>1.0</jsr250.api>
-      <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
-      <weld.api.version>1.2-SNAPSHOT</weld.api.version>
-      <slf4j.version>1.6.1</slf4j.version>
-      <logback.version>0.9.29</logback.version>
-   </properties>
-
-   <dependencyManagement>
-      <dependencies>
-
-         <dependency>
-            <groupId>org.osgi</groupId>
-            <artifactId>org.osgi.core</artifactId>
-            <version>${osgi.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.osgi</groupId>
-            <artifactId>org.osgi.compendium</artifactId>
-            <version>${osgi.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.jboss.weld</groupId>
-            <artifactId>weld-api</artifactId>
-            <version>${weld.api.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.jboss.weld</groupId>
-            <artifactId>weld-spi</artifactId>
-            <version>${weld.api.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>javax.inject</groupId>
-            <artifactId>javax.inject</artifactId>
-            <version>${javax.inject.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>javax.el</groupId>
-            <artifactId>el-api</artifactId>
-            <version>${javax.el.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>javax.annotation</groupId>
-            <artifactId>jsr250-api</artifactId>
-            <version>${jsr250.api}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.jboss.interceptor</groupId>
-            <artifactId>jboss-interceptor-api</artifactId>
-            <version>${jboss.interceptors.api.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-ext</artifactId>
-            <version>${slf4j.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-api</artifactId>
-            <version>${slf4j.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>ch.qos.logback</groupId>
-            <artifactId>logback-core</artifactId>
-            <version>${logback.version}</version>
-         </dependency>
-
-         <dependency>
-            <groupId>ch.qos.logback</groupId>
-            <artifactId>logback-classic</artifactId>
-            <version>${logback.version}</version>
-         </dependency>
-
-      </dependencies>
-   </dependencyManagement>
+    </description>
+
+    <properties>
+        <osgi.version>4.2.0</osgi.version>
+        <javax.inject.version>1</javax.inject.version>
+        <javax.el.version>2.2</javax.el.version>
+        <jsr250.api>1.0</jsr250.api>
+        <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
+        <weld.api.version>1.2-SNAPSHOT</weld.api.version>
+        <slf4j.version>1.6.1</slf4j.version>
+        <logback.version>0.9.29</logback.version>
+    </properties>
+    
+    <dependencyManagement>
+        <dependencies>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.core</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.compendium</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld</groupId>
+                <artifactId>weld-api</artifactId>
+                <version>${weld.api.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld</groupId>
+                <artifactId>weld-spi</artifactId>
+                <version>${weld.api.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.inject</groupId>
+                <artifactId>javax.inject</artifactId>
+                <version>${javax.inject.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.el</groupId>
+                <artifactId>el-api</artifactId>
+                <version>${javax.el.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.annotation</groupId>
+                <artifactId>jsr250-api</artifactId>
+                <version>${jsr250.api}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.interceptor</groupId>
+                <artifactId>jboss-interceptor-api</artifactId>
+                <version>${jboss.interceptors.api.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.slf4j</groupId>
+                <artifactId>slf4j-ext</artifactId>
+                <version>${slf4j.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.slf4j</groupId>
+                <artifactId>slf4j-api</artifactId>
+                <version>${slf4j.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-core</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-classic</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
+        </dependencies>
+    </dependencyManagement>
 
 </project>",2012-10-12T10:31:09Z,146
"@@ -0,0 +1,4 @@
+#!/bin/sh
+
+cd ./examples/container-knopflerfish/target/weld-osgi-container-knopflerfish-1.1.3-SNAPSHOT-all/weld-osgi-container-knopflerfish-1.1.3-SNAPSHOT/
+java -jar knopflerfish.jar -xargs conf/config.xargs",2012-10-12T10:31:09Z,147
"@@ -48,13 +48,10 @@ public static void waitForEnvironment(BundleContext context) throws InterruptedE
         while(!ready) {
             ready = true;
             for(Bundle b : context.getBundles()) {
-                System.out.println(""wait for bundle "" + b.getSymbolicName());
                 if(b.getState() != Bundle.ACTIVE) {
                     ready = false;
                     break;
                 }
-                System.out.println(""bundle "" + b.getSymbolicName() + "" is ready"");
-                Thread.sleep(500);
             }
             Thread.sleep(500);
         }",2012-10-12T10:31:09Z,148
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
@@ -29,18 +46,15 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-extension</artifactId>
-            <version>${project.version}</version>
         </dependency>
         <dependency>
             <groupId>javax</groupId>
             <artifactId>javaee-web-api</artifactId>
-            <version>6.0</version>
             <scope>provided</scope>
         </dependency>
         <dependency>
             <groupId>org.osgi</groupId>
             <artifactId>org.osgi.core</artifactId>
-            <version>4.2.0</version>
             <scope>provided</scope>
         </dependency>
 ",2012-10-12T10:31:59Z,149
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
@@ -39,13 +56,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>",2012-10-12T10:31:59Z,150
"@@ -46,19 +46,16 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-extension</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>",2012-10-12T10:31:59Z,138
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
@@ -34,7 +51,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,151
"@@ -75,85 +75,4 @@
         Support for Weld in OSGi Containers
     </description>
 
-    <properties>
-        <osgi.version>4.2.0</osgi.version>
-        <javax.inject.version>1</javax.inject.version>
-        <javax.el.version>2.2</javax.el.version>
-        <jsr250.api>1.0</jsr250.api>
-        <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
-        <logback.version>0.9.29</logback.version>
-    </properties>
-
-    <dependencyManagement>
-        <dependencies>
-
-            <dependency>
-                <groupId>org.osgi</groupId>
-                <artifactId>org.osgi.core</artifactId>
-                <version>${osgi.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.osgi</groupId>
-                <artifactId>org.osgi.compendium</artifactId>
-                <version>${osgi.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.jboss.weld</groupId>
-                <artifactId>weld-api</artifactId>
-                <version>${weld.api.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.jboss.weld</groupId>
-                <artifactId>weld-spi</artifactId>
-                <version>${weld.api.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>javax.inject</groupId>
-                <artifactId>javax.inject</artifactId>
-                <version>${javax.inject.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>javax.el</groupId>
-                <artifactId>el-api</artifactId>
-                <version>${javax.el.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>javax.annotation</groupId>
-                <artifactId>jsr250-api</artifactId>
-                <version>${jsr250.api}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.slf4j</groupId>
-                <artifactId>slf4j-ext</artifactId>
-                <version>${slf4j.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>org.slf4j</groupId>
-                <artifactId>slf4j-api</artifactId>
-                <version>${slf4j.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>ch.qos.logback</groupId>
-                <artifactId>logback-core</artifactId>
-                <version>${logback.version}</version>
-            </dependency>
-
-            <dependency>
-                <groupId>ch.qos.logback</groupId>
-                <artifactId>logback-classic</artifactId>
-                <version>${logback.version}</version>
-            </dependency>
-
-        </dependencies>
-    </dependencyManagement>
-
 </project>",2012-10-12T10:31:59Z,146
"@@ -58,7 +58,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,152
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,13 +58,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,153
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,13 +58,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,154
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -46,13 +63,11 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,155
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">",2012-10-12T10:31:59Z,156
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,7 +58,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,157
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">",2012-10-12T10:31:59Z,158
"@@ -1,4 +1,21 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2012, Red Hat, Inc., and individual contributors
+  ~ by the @authors tag. See the copyright.txt in the distribution for a
+  ~ full listing of individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
 <project xmlns=""http://maven.apache.org/POM/4.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
@@ -41,7 +58,6 @@
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-innerscanner</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,159
"@@ -33,11 +33,6 @@
 
     <description>Integration tests launcher for Weld-OSGi</description>
 
-    <properties>
-        <version.pax.exam>2.5.0</version.pax.exam>
-        <version.org.apache.felix>4.0.3</version.org.apache.felix>
-    </properties>
-
     <url>http://www.seamframework.org/Weld</url>
     <licenses>
         <license>
@@ -69,28 +64,24 @@
         <dependency>
             <groupId>org.ops4j.pax.exam</groupId>
             <artifactId>pax-exam-junit4</artifactId>
-            <version>${version.pax.exam}</version>
             <scope>test</scope>
         </dependency>
 
         <dependency>
             <groupId>org.ops4j.pax.exam</groupId>
             <artifactId>pax-exam-container-native</artifactId>
-            <version>${version.pax.exam}</version>
             <scope>test</scope>
         </dependency>
 
         <dependency>
             <groupId>org.ops4j.pax.exam</groupId>
             <artifactId>pax-exam-link-mvn</artifactId>
-            <version>${version.pax.exam}</version>
             <scope>test</scope>
         </dependency>
 
         <dependency>
             <groupId>org.apache.felix</groupId>
             <artifactId>org.apache.felix.framework</artifactId>
-            <version>${version.org.apache.felix}</version>
             <scope>test</scope>
         </dependency>
 
@@ -107,37 +98,31 @@
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-api</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-extension</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi</groupId>
             <artifactId>weld-osgi-core-integration</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld</groupId>
             <artifactId>weld-core</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.se</groupId>
             <artifactId>weld-se-core</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
@@ -208,49 +193,41 @@
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle1</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle2</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-bundle3</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-importing</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-scanner</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-innerscanner</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-cdi-spi</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
         <dependency>
             <groupId>org.jboss.weld.osgi.tests</groupId>
             <artifactId>weld-osgi-life-cycle</artifactId>
-            <version>${project.version}</version>
         </dependency>
 
     </dependencies>",2012-10-12T10:31:59Z,160
"@@ -1,4 +1,5 @@
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
     <modelVersion>4.0.0</modelVersion>
     <groupId>org.jboss.weld</groupId>
     <artifactId>weld-core-parent</artifactId>
@@ -69,6 +70,17 @@
         <selenium.maven.plugin.version>1.0.1</selenium.maven.plugin.version>
         <slf4j.version>1.6.1</slf4j.version>
         <testng.version>5.10</testng.version>
+        <osgi.version>4.2.0</osgi.version>
+        <!-- Weld OSGi deps -->
+        <javax.inject.version>1</javax.inject.version>
+        <javax.web.version>6.0</javax.web.version>
+        <javax.el.version>2.2</javax.el.version>
+        <jsr250.api>1.0</jsr250.api>
+        <jboss.interceptors.api.version>1.1</jboss.interceptors.api.version>
+        <logback.version>0.9.29</logback.version>
+        <pax.exam.version>2.5.0</pax.exam.version>
+        <org.apache.felix.version>4.0.3</org.apache.felix.version>
+        <!-- Weld API -->
         <weld.api.version>1.2.0.Beta1</weld.api.version>
     </properties>
 
@@ -215,12 +227,6 @@
                 <version>${arquillian.version}</version>
             </dependency>
 
-            <dependency>
-                <groupId>org.jboss.arquillian.container</groupId>
-                <artifactId>arquillian-container-test-spi</artifactId>
-                <version>${arquillian.version}</version>
-            </dependency>
-
             <dependency>
                 <groupId>org.jboss.arquillian.container</groupId>
                 <artifactId>arquillian-weld-ee-embedded-1.1</artifactId>
@@ -357,8 +363,8 @@
             </dependency>
 
             <dependency>
-	            <groupId>org.jboss.spec.javax.ws.rs</groupId>
-	            <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
+                <groupId>org.jboss.spec.javax.ws.rs</groupId>
+                <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
                 <version>${jboss.spec.jaxrs.version}</version>
             </dependency>
 
@@ -448,6 +454,154 @@
                 <version>${project.version}</version>
             </dependency>
 
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-api</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-extension</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-spi</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi</groupId>
+                <artifactId>weld-osgi-core-integration</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-bundle1</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-bundle2</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-bundle3</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-importing</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-scanner</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-innerscanner</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-cdi-spi</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.jboss.weld.osgi.tests</groupId>
+                <artifactId>weld-osgi-life-cycle</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.ops4j.pax.exam</groupId>
+                <artifactId>pax-exam-junit4</artifactId>
+                <version>${pax.exam.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.ops4j.pax.exam</groupId>
+                <artifactId>pax-exam-container-native</artifactId>
+                <version>${pax.exam.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.ops4j.pax.exam</groupId>
+                <artifactId>pax-exam-link-mvn</artifactId>
+                <version>${pax.exam.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.apache.felix</groupId>
+                <artifactId>org.apache.felix.framework</artifactId>
+                <version>${org.apache.felix.version}</version>
+                <scope>test</scope>
+            </dependency>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.core</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.osgi</groupId>
+                <artifactId>org.osgi.compendium</artifactId>
+                <version>${osgi.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.inject</groupId>
+                <artifactId>javax.inject</artifactId>
+                <version>${javax.inject.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax</groupId>
+                <artifactId>javaee-web-api</artifactId>
+                <version>${javax.web.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.el</groupId>
+                <artifactId>el-api</artifactId>
+                <version>${javax.el.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.annotation</groupId>
+                <artifactId>jsr250-api</artifactId>
+                <version>${jsr250.api}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-core</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>ch.qos.logback</groupId>
+                <artifactId>logback-classic</artifactId>
+                <version>${logback.version}</version>
+            </dependency>
+
             <dependency>
                 <groupId>org.jboss.shrinkwrap</groupId>
                 <artifactId>shrinkwrap-impl-base</artifactId>
@@ -536,7 +690,7 @@
                         <configLocation>weld-checkstyle/checkstyle.xml</configLocation>
                         <consoleOutput>true</consoleOutput>
                         <failsOnError>true</failsOnError>
-                        <useFile />
+                        <useFile/>
                     </configuration>
                     <dependencies>
                         <dependency>
@@ -574,7 +728,7 @@
                                         </goals>
                                     </pluginExecutionFilter>
                                     <action>
-                                        <ignore />
+                                        <ignore/>
                                     </action>
                                 </pluginExecution>
                             </pluginExecutions>
@@ -586,10 +740,10 @@
                     <artifactId>maven-compiler-plugin</artifactId>
                     <version>2.3.2</version>
                     <configuration>
-                       <source>1.6</source>
-                       <target>1.6</target>
+                        <source>1.6</source>
+                        <target>1.6</target>
                     </configuration>
-                 </plugin>
+                </plugin>
             </plugins>
 
         </pluginManagement>",2012-10-12T10:31:59Z,161
"@@ -1,7 +1,6 @@
 <project basedir=""."" name=""Numberguess Example Build"" default=""restart"">
 	
 	<property name=""example.name"" value=""webbeans-numberguess"" />
-	<property name=""pom.file"" value=""pom-jboss5.xml"" />
 
 	<import file=""../../build.xml"" />
 	",2009-09-22T20:38:20Z,162
"@@ -1,86 +0,0 @@
-<?xml version=""1.0""?>
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-   <modelVersion>4.0.0</modelVersion>
-   
-   <parent>
-      <groupId>org.jboss.webbeans.examples</groupId>
-      <artifactId>webbeans-examples-parent</artifactId>
-      <version>1.0.0-SNAPSHOT</version>
-   </parent>
-   
-   <groupId>org.jboss.webbeans.examples</groupId>
-   <artifactId>webbeans-numberguess</artifactId>
-   <packaging>war</packaging>
-   <name>Web Beans Examples: Numberguess for JBoss AS 5.x</name>
-   
-   <pluginRepositories>
-        <pluginRepository>
-            <id>codehaus snapshot repository</id>
-            <url>http://snapshots.repository.codehaus.org/</url>
-            <releases>
-                <enabled>true</enabled>
-            </releases>
-        </pluginRepository>
-    </pluginRepositories>
-   
-   <dependencies>
-      <dependency>
-         <groupId>org.testng</groupId>
-         <artifactId>testng</artifactId>
-         <scope>test</scope>
-         <classifier>jdk15</classifier>
-      </dependency>
-      
-      <dependency>
-         <groupId>org.jboss.webbeans</groupId>
-         <artifactId>jsr299-api</artifactId>
-         <scope>provided</scope>
-      </dependency>
-      
-      <dependency>
-         <groupId>javax.faces</groupId>
-         <artifactId>jsf-api</artifactId>
-         <scope>provided</scope>
-      </dependency>
-      
-      <dependency>
-        <groupId>com.sun.facelets</groupId>
-        <artifactId>jsf-facelets</artifactId>
-        <scope>runtime</scope>
-      </dependency>
-      
-      <!-- <dependency>
-         <groupId>org.jboss.el</groupId>
-         <artifactId>jboss-el</artifactId>
-         <exclusions>
-            <exclusion>
-               <groupId>javax.el</groupId>
-               <artifactId>el-api</artifactId>
-            </exclusion>
-         </exclusions>
-      </dependency>-->
-      
-      <dependency>
-         <groupId>org.glassfish.web</groupId>
-         <artifactId>el-impl</artifactId>
-         <exclusions>
-            <exclusion>
-               <groupId>javax.el</groupId>
-               <artifactId>el-api</artifactId>
-            </exclusion>
-         </exclusions>
-      </dependency>
-      <dependency>
-      	<groupId>javax.annotation</groupId>
-      	<artifactId>jsr250-api</artifactId>
-         <scope>provided</scope>
-      </dependency>
-      
-   </dependencies>
-   
-   <build>
-      <finalName>webbeans-numberguess</finalName>
-   </build>
-   
-</project>
-",2009-09-22T20:38:20Z,163
"@@ -43,23 +43,6 @@
          <scope>provided</scope>
       </dependency>
       
-      <dependency>
-        <groupId>com.sun.facelets</groupId>
-        <artifactId>jsf-facelets</artifactId>
-        <scope>runtime</scope>
-      </dependency>
-      
-      <!-- <dependency>
-         <groupId>org.jboss.el</groupId>
-         <artifactId>jboss-el</artifactId>
-         <exclusions>
-            <exclusion>
-               <groupId>javax.el</groupId>
-               <artifactId>el-api</artifactId>
-            </exclusion>
-         </exclusions>
-      </dependency>-->
-      
       <dependency>
          <groupId>org.glassfish.web</groupId>
          <artifactId>el-impl</artifactId>
@@ -70,6 +53,7 @@
             </exclusion>
          </exclusions>
       </dependency>
+      
       <dependency>
       	<groupId>javax.annotation</groupId>
       	<artifactId>jsr250-api</artifactId>",2009-09-22T20:38:20Z,164
"@@ -44,6 +44,7 @@
 import org.jboss.weld.bean.ProducerMethod;
 import org.jboss.weld.bean.RIBean;
 import org.jboss.weld.bean.SessionBean;
+import org.jboss.weld.bean.builtin.ExtensionBean;
 import org.jboss.weld.bean.builtin.ee.EEResourceProducerField;
 import org.jboss.weld.bootstrap.api.ServiceRegistry;
 import org.jboss.weld.bootstrap.events.ProcessBeanImpl;
@@ -278,4 +279,7 @@ public E getEnvironment() {
         return environment;
     }
 
+    public void addExtension(ExtensionBean bean) {
+        getEnvironment().addExtension(bean);
+    }
 }",2013-08-05T10:39:57Z,165
"@@ -71,6 +71,7 @@ public ExtensionBeanDeployer deployBeans() {
             Set<ObserverMethodImpl<?, ?>> observerMethods = new HashSet<ObserverMethodImpl<?, ?>>();
             createObserverMethods(bean, beanDeployment.getBeanManager(), clazz, observerMethods);
             beanDeployment.getBeanManager().addBean(bean);
+            beanDeployment.getBeanDeployer().addExtension(bean);
             for (ObserverMethodImpl<?, ?> observerMethod : observerMethods) {
                 observerMethod.initialize();
                 beanDeployment.getBeanManager().addObserver(observerMethod);",2013-08-05T10:39:57Z,166
"@@ -0,0 +1,18 @@
+package org.jboss.weld.tests.extensions.injection;
+
+import java.io.Serializable;
+
+import javax.inject.Inject;
+
+/**
+ *
+ */
+public class Client implements Serializable {
+
+    @Inject
+    private MyExtension myExtension;
+
+    public MyExtension getMyExtension() {
+        return myExtension;
+    }
+}",2013-08-05T10:39:57Z,167
"@@ -0,0 +1,49 @@
+package org.jboss.weld.tests.extensions.injection;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertSame;
+import static org.junit.Assert.fail;
+
+import java.io.NotSerializableException;
+
+import javax.enterprise.inject.spi.Extension;
+import javax.inject.Inject;
+
+import org.jboss.arquillian.container.test.api.Deployment;
+import org.jboss.arquillian.junit.Arquillian;
+import org.jboss.shrinkwrap.api.Archive;
+import org.jboss.shrinkwrap.api.BeanArchive;
+import org.jboss.shrinkwrap.api.ShrinkWrap;
+import org.jboss.weld.test.util.Utils;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+/**
+ *
+ */
+@RunWith(Arquillian.class)
+public class InjectedExtensionIsPassivationCapableDependencyTest {
+
+    @Deployment
+    public static Archive<?> deploy() {
+        return ShrinkWrap.create(BeanArchive.class)
+            .addClass(Utils.class)
+            .addPackage(InjectedExtensionIsPassivationCapableDependencyTest.class.getPackage())
+            .addAsServiceProvider(Extension.class, MyExtension.class);
+    }
+
+    @Inject
+    private Client client;
+
+    @Test
+    public void testInjectedExtensionIsPassivationCapableDependency() throws Exception {
+        assertNotNull(client.getMyExtension());
+
+        try {
+            Utils.serialize(client);
+        } catch (NotSerializableException e) {
+            fail(""Expected Client to be serializable, but it was not: "" + e);
+        }
+    }
+}",2013-08-05T10:39:57Z,168
"@@ -0,0 +1,19 @@
+package org.jboss.weld.tests.extensions.injection;
+
+import javax.enterprise.inject.spi.Extension;
+
+/**
+ *
+ */
+public class MyExtension implements Extension {
+
+    public String foo;
+
+    public String getFoo() {
+        return foo;
+    }
+
+    public void setFoo(String foo) {
+        this.foo = foo;
+    }
+}",2013-08-05T10:39:57Z,169
"@@ -10,12 +10,16 @@
          Weld allows you to exclude classes in your archive from scanning, having
          container lifecycle events fired, and being deployed as beans.
       </para>
-      
+
       <para>
          In this tutorial, we'll explore this feature via an example; a more formal specification can be found in the
          xsd, located at <ulink url=""http://jboss.org/schema/weld/beans_1_1.xsd"">http://jboss.org/schema/weld/beans_1_1.xsd</ulink>.
       </para>
+
+      <para>All the configuration is done in the <filename>beans.xml</filename> file. For more information see <xref linkend=""packaging""/></para>
       
+      <example>
+        <title>beans.xml</title>
       <programlisting role=""XML""><![CDATA[<?xml version=""1.0"" encoding=""UTF-8""?>
 <beans xmlns=""http://java.sun.com/xml/ns/javaee"" 
        xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" 
@@ -54,6 +58,7 @@
     </weld:scan>
     
 </beans>]]></programlisting>
+      </example>
 
       <para>
          In this example we show the most common use cases for exercising fine control over which classes",2012-12-20T08:52:05Z,170
"@@ -259,7 +259,7 @@ public void sendMessage(String price) {
     
    </section>
   
-   <section>
+   <section id=""packaging"">
       <title>Packaging and deployment</title>
     
       <para>",2012-12-20T08:52:05Z,171
"@@ -22,16 +22,10 @@
  */
 package org.jboss.weld.context;
 
-import org.jboss.weld.Container;
-import org.jboss.weld.context.beanstore.BoundBeanStore;
-import org.jboss.weld.context.beanstore.ConversationNamingScheme;
-import org.jboss.weld.context.beanstore.NamingScheme;
-import org.jboss.weld.context.conversation.ConversationIdGenerator;
-import org.jboss.weld.context.conversation.ConversationImpl;
-import org.jboss.weld.logging.messages.ConversationMessage;
+import static org.jboss.weld.context.conversation.ConversationIdGenerator.CONVERSATION_ID_GENERATOR_ATTRIBUTE_NAME;
+import static org.jboss.weld.logging.messages.ConversationMessage.NO_CONVERSATION_FOUND_TO_RESTORE;
+import static org.jboss.weld.util.reflection.Reflections.cast;
 
-import javax.enterprise.context.ConversationScoped;
-import javax.enterprise.inject.Instance;
 import java.lang.annotation.Annotation;
 import java.util.Collection;
 import java.util.HashMap;
@@ -40,16 +34,24 @@
 import java.util.Map.Entry;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicReference;
+import javax.enterprise.context.ConversationScoped;
+import javax.enterprise.inject.Instance;
 
-import static org.jboss.weld.context.conversation.ConversationIdGenerator.CONVERSATION_ID_GENERATOR_ATTRIBUTE_NAME;
-import static org.jboss.weld.util.reflection.Reflections.cast;
+import org.jboss.weld.Container;
+import org.jboss.weld.context.beanstore.BoundBeanStore;
+import org.jboss.weld.context.beanstore.ConversationNamingScheme;
+import org.jboss.weld.context.beanstore.NamingScheme;
+import org.jboss.weld.context.conversation.ConversationIdGenerator;
+import org.jboss.weld.context.conversation.ConversationImpl;
+import org.jboss.weld.logging.messages.ConversationMessage;
 
 
 /**
  * The base of the conversation context, which can use a variety of storage
  * forms
  *
  * @author Pete Muir
+ * @author George Sapountzis
  */
 public abstract class AbstractConversationContext<R, S> extends AbstractBoundContext<R> implements ConversationContext {
 
@@ -173,6 +175,59 @@ public void activate() {
         this.activate(null);
     }
 
+    protected void associateRequest() {
+        ManagedConversation conversation = new ConversationImpl(conversationContexts);
+        setRequestAttribute(getRequest(), CURRENT_CONVERSATION_ATTRIBUTE_NAME, conversation);
+
+        // Set a temporary bean store, this will be attached at the end of the request if needed
+        NamingScheme namingScheme = new ConversationNamingScheme(ConversationContext.class.getName(), ""transient"");
+        setBeanStore(createRequestBeanStore(namingScheme, getRequest()));
+        setRequestAttribute(getRequest(), ConversationNamingScheme.PARAMETER_NAME, namingScheme);
+    }
+
+    protected void associateRequest(String cid) {
+        ManagedConversation conversation = getConversation(cid);
+        setRequestAttribute(getRequest(), CURRENT_CONVERSATION_ATTRIBUTE_NAME, conversation);
+
+        NamingScheme namingScheme = new ConversationNamingScheme(ConversationContext.class.getName(), cid);
+        setBeanStore(createRequestBeanStore(namingScheme, getRequest()));
+        getBeanStore().attach();
+    }
+
+    public void activate(String cid) {
+        if (getBeanStore() == null) {
+            if (!isAssociated()) {
+                throw new IllegalStateException(""Must call associate() before calling activate()"");
+            }
+            // Activate the context
+            super.setActive(true);
+
+            // Attach the conversation
+            if (cid != null) {
+                ManagedConversation conversation = getConversation(cid);
+                if (conversation != null) {
+                    boolean lock = conversation.lock(getConcurrentAccessTimeout());
+                    if (lock) {
+                        associateRequest(cid);
+                    } else {
+                        // Associate the request with a new transient conversation
+                        associateRequest();
+                        throw new BusyConversationException(ConversationMessage.CONVERSATION_LOCK_TIMEDOUT, cid);
+                    }
+                } else {
+                    // CDI 6.7.4 we must activate a new transient conversation before we throw the exception
+                    associateRequest();
+                    // Make sure that the conversation already exists
+                    throw new NonexistentConversationException(NO_CONVERSATION_FOUND_TO_RESTORE, cid);
+                }
+            } else {
+                associateRequest();
+            }
+        } else {
+            throw new IllegalStateException(""Context is already active"");
+        }
+    }
+
     @Override
     public void deactivate() {
         // Disassociate from the current conversation
@@ -224,39 +279,6 @@ public void deactivate() {
         }
     }
 
-    public void activate(String cid) {
-        if (getBeanStore() == null) {
-            if (!isAssociated()) {
-                throw new IllegalStateException(""Must call associate() before calling activate()"");
-            }
-            // Activate the context
-            super.setActive(true);
-
-            // Attach the conversation
-            if (cid == null || getConversation(cid) == null) {
-                ManagedConversation conversation = new ConversationImpl(conversationContexts);
-                setRequestAttribute(getRequest(), CURRENT_CONVERSATION_ATTRIBUTE_NAME, conversation);
-                // Set a temporary bean store, this will be attached at the end of
-                // the request if needed
-                NamingScheme namingScheme = new ConversationNamingScheme(ConversationContext.class.getName(), ""transient"");
-                setBeanStore(createRequestBeanStore(namingScheme, getRequest()));
-                setRequestAttribute(getRequest(), ConversationNamingScheme.PARAMETER_NAME, namingScheme);
-            } else {
-                setRequestAttribute(getRequest(), CURRENT_CONVERSATION_ATTRIBUTE_NAME, getConversation(cid));
-                if (getCurrentConversation().lock(getConcurrentAccessTimeout())) {
-                    NamingScheme namingScheme = new ConversationNamingScheme(ConversationContext.class.getName(), cid);
-                    setBeanStore(createRequestBeanStore(namingScheme, getRequest()));
-                    getBeanStore().attach();
-                } else {
-                    throw new BusyConversationException(ConversationMessage.CONVERSATION_LOCK_TIMEDOUT, cid);
-                }
-            }
-
-        } else {
-            throw new IllegalStateException(""Context is already active"");
-        }
-    }
-
     @Override
     public void invalidate() {
         for (ManagedConversation conversation : getConversations()) {",2011-10-31T16:08:54Z,172
"@@ -28,13 +28,11 @@
 import static org.jboss.weld.logging.Category.JSF;
 import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
 import static org.jboss.weld.logging.messages.ConversationMessage.CLEANING_UP_TRANSIENT_CONVERSATION;
-import static org.jboss.weld.logging.messages.ConversationMessage.NO_CONVERSATION_FOUND_TO_RESTORE;
 import static org.jboss.weld.logging.messages.JsfMessage.CLEANING_UP_CONVERSATION;
 import static org.jboss.weld.logging.messages.JsfMessage.FOUND_CONVERSATION_FROM_REQUEST;
 import static org.jboss.weld.logging.messages.JsfMessage.RESUMING_CONVERSATION;
 
 import java.util.Map;
-
 import javax.enterprise.context.spi.Context;
 import javax.enterprise.inject.Instance;
 import javax.faces.context.FacesContext;
@@ -45,8 +43,6 @@
 
 import org.jboss.weld.Container;
 import org.jboss.weld.context.ConversationContext;
-import org.jboss.weld.context.ManagedConversation;
-import org.jboss.weld.context.NonexistentConversationException;
 import org.jboss.weld.context.http.HttpConversationContext;
 import org.slf4j.cal10n.LocLogger;
 
@@ -102,13 +98,6 @@ private void activateConversations(FacesContext facesContext) {
         HttpConversationContext conversationContext = instance().select(HttpConversationContext.class).get();
         String cid = getConversationId(facesContext, conversationContext);
         log.debug(RESUMING_CONVERSATION, cid);
-        ManagedConversation conversation = conversationContext.getConversation(cid);
-        if (cid != null && conversation == null) {
-            // CDI 6.7.4 we must activate a new transient conversation before we throw the exception
-            conversationContext.activate(null);
-            // Make sure that the conversation already exists
-            throw new NonexistentConversationException(NO_CONVERSATION_FOUND_TO_RESTORE, cid);
-        }
 
         /*
          * Don't try to reactivate the ConversationContext if we have already activated it for this request",2011-10-31T16:08:54Z,173
"@@ -1,5 +1,5 @@
 # Container a number of properties associated with installing Weld into JBoss AS and running the TCK in JBoss AS
-#jboss.home=/Users/alesj/projects/as7/as/build/target/jboss-as-7.1.0.Alpha1-SNAPSHOT
+#jboss.home=/Users/alesj/java_lib/jboss-as-7.0.2.Final
 org.jboss.testharness.container.javaOpts=-Xms128m -Xmx512m -XX:MaxPermSize=256m -Dorg.jboss.resolver.warning=true -Dsun.rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000
 
 # time to allow before attempting to restart JBoss AS",2011-10-31T16:08:54Z,174
"@@ -235,7 +235,7 @@
                                 <suiteXmlFile>src/test/resources/tck-tests.xml</suiteXmlFile>
                             </suiteXmlFiles>
                             <systemPropertyVariables>
-                                <jboss.server.config.file.name>standalone.xml</jboss.server.config.file.name>
+                                <jboss.server.config.file.name>standalone-preview.xml</jboss.server.config.file.name>
                             </systemPropertyVariables>
                             <systemProperties>
                                 <property>
@@ -301,7 +301,7 @@
                                 <suiteXmlFile>src/test/resources/tck-tests.xml</suiteXmlFile>
                             </suiteXmlFiles>
                             <systemPropertyVariables>
-                                <jboss.server.config.file.name>standalone.xml</jboss.server.config.file.name>
+                                <jboss.server.config.file.name>standalone-preview.xml</jboss.server.config.file.name>
                             </systemPropertyVariables>
                             <systemProperties>
                                 <property>",2011-10-31T16:08:54Z,175
"@@ -22,16 +22,10 @@
  */
 package org.jboss.weld.context;
 
-import org.jboss.weld.Container;
-import org.jboss.weld.context.beanstore.BoundBeanStore;
-import org.jboss.weld.context.beanstore.ConversationNamingScheme;
-import org.jboss.weld.context.beanstore.NamingScheme;
-import org.jboss.weld.context.conversation.ConversationIdGenerator;
-import org.jboss.weld.context.conversation.ConversationImpl;
-import org.jboss.weld.logging.messages.ConversationMessage;
+import static org.jboss.weld.context.conversation.ConversationIdGenerator.CONVERSATION_ID_GENERATOR_ATTRIBUTE_NAME;
+import static org.jboss.weld.logging.messages.ConversationMessage.NO_CONVERSATION_FOUND_TO_RESTORE;
+import static org.jboss.weld.util.reflection.Reflections.cast;
 
-import javax.enterprise.context.ConversationScoped;
-import javax.enterprise.inject.Instance;
 import java.lang.annotation.Annotation;
 import java.util.Collection;
 import java.util.HashMap;
@@ -40,16 +34,24 @@
 import java.util.Map.Entry;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicReference;
+import javax.enterprise.context.ConversationScoped;
+import javax.enterprise.inject.Instance;
 
-import static org.jboss.weld.context.conversation.ConversationIdGenerator.CONVERSATION_ID_GENERATOR_ATTRIBUTE_NAME;
-import static org.jboss.weld.util.reflection.Reflections.cast;
+import org.jboss.weld.Container;
+import org.jboss.weld.context.beanstore.BoundBeanStore;
+import org.jboss.weld.context.beanstore.ConversationNamingScheme;
+import org.jboss.weld.context.beanstore.NamingScheme;
+import org.jboss.weld.context.conversation.ConversationIdGenerator;
+import org.jboss.weld.context.conversation.ConversationImpl;
+import org.jboss.weld.logging.messages.ConversationMessage;
 
 
 /**
  * The base of the conversation context, which can use a variety of storage
  * forms
  *
  * @author Pete Muir
+ * @author George Sapountzis
  */
 public abstract class AbstractConversationContext<R, S> extends AbstractBoundContext<R> implements ConversationContext {
 
@@ -173,6 +175,59 @@ public void activate() {
         this.activate(null);
     }
 
+    protected void associateRequest() {
+        ManagedConversation conversation = new ConversationImpl(conversationContexts);
+        setRequestAttribute(getRequest(), CURRENT_CONVERSATION_ATTRIBUTE_NAME, conversation);
+
+        // Set a temporary bean store, this will be attached at the end of the request if needed
+        NamingScheme namingScheme = new ConversationNamingScheme(ConversationContext.class.getName(), ""transient"");
+        setBeanStore(createRequestBeanStore(namingScheme, getRequest()));
+        setRequestAttribute(getRequest(), ConversationNamingScheme.PARAMETER_NAME, namingScheme);
+    }
+
+    protected void associateRequest(String cid) {
+        ManagedConversation conversation = getConversation(cid);
+        setRequestAttribute(getRequest(), CURRENT_CONVERSATION_ATTRIBUTE_NAME, conversation);
+
+        NamingScheme namingScheme = new ConversationNamingScheme(ConversationContext.class.getName(), cid);
+        setBeanStore(createRequestBeanStore(namingScheme, getRequest()));
+        getBeanStore().attach();
+    }
+
+    public void activate(String cid) {
+        if (getBeanStore() == null) {
+            if (!isAssociated()) {
+                throw new IllegalStateException(""Must call associate() before calling activate()"");
+            }
+            // Activate the context
+            super.setActive(true);
+
+            // Attach the conversation
+            if (cid != null) {
+                ManagedConversation conversation = getConversation(cid);
+                if (conversation != null) {
+                    boolean lock = conversation.lock(getConcurrentAccessTimeout());
+                    if (lock) {
+                        associateRequest(cid);
+                    } else {
+                        // Associate the request with a new transient conversation
+                        associateRequest();
+                        throw new BusyConversationException(ConversationMessage.CONVERSATION_LOCK_TIMEDOUT, cid);
+                    }
+                } else {
+                    // CDI 6.7.4 we must activate a new transient conversation before we throw the exception
+                    associateRequest();
+                    // Make sure that the conversation already exists
+                    throw new NonexistentConversationException(NO_CONVERSATION_FOUND_TO_RESTORE, cid);
+                }
+            } else {
+                associateRequest();
+            }
+        } else {
+            throw new IllegalStateException(""Context is already active"");
+        }
+    }
+
     @Override
     public void deactivate() {
         // Disassociate from the current conversation
@@ -224,39 +279,6 @@ public void deactivate() {
         }
     }
 
-    public void activate(String cid) {
-        if (getBeanStore() == null) {
-            if (!isAssociated()) {
-                throw new IllegalStateException(""Must call associate() before calling activate()"");
-            }
-            // Activate the context
-            super.setActive(true);
-
-            // Attach the conversation
-            if (cid == null || getConversation(cid) == null) {
-                ManagedConversation conversation = new ConversationImpl(conversationContexts);
-                setRequestAttribute(getRequest(), CURRENT_CONVERSATION_ATTRIBUTE_NAME, conversation);
-                // Set a temporary bean store, this will be attached at the end of
-                // the request if needed
-                NamingScheme namingScheme = new ConversationNamingScheme(ConversationContext.class.getName(), ""transient"");
-                setBeanStore(createRequestBeanStore(namingScheme, getRequest()));
-                setRequestAttribute(getRequest(), ConversationNamingScheme.PARAMETER_NAME, namingScheme);
-            } else {
-                setRequestAttribute(getRequest(), CURRENT_CONVERSATION_ATTRIBUTE_NAME, getConversation(cid));
-                if (getCurrentConversation().lock(getConcurrentAccessTimeout())) {
-                    NamingScheme namingScheme = new ConversationNamingScheme(ConversationContext.class.getName(), cid);
-                    setBeanStore(createRequestBeanStore(namingScheme, getRequest()));
-                    getBeanStore().attach();
-                } else {
-                    throw new BusyConversationException(ConversationMessage.CONVERSATION_LOCK_TIMEDOUT, cid);
-                }
-            }
-
-        } else {
-            throw new IllegalStateException(""Context is already active"");
-        }
-    }
-
     @Override
     public void invalidate() {
         for (ManagedConversation conversation : getConversations()) {",2011-10-31T16:08:54Z,172
"@@ -28,13 +28,11 @@
 import static org.jboss.weld.logging.Category.JSF;
 import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
 import static org.jboss.weld.logging.messages.ConversationMessage.CLEANING_UP_TRANSIENT_CONVERSATION;
-import static org.jboss.weld.logging.messages.ConversationMessage.NO_CONVERSATION_FOUND_TO_RESTORE;
 import static org.jboss.weld.logging.messages.JsfMessage.CLEANING_UP_CONVERSATION;
 import static org.jboss.weld.logging.messages.JsfMessage.FOUND_CONVERSATION_FROM_REQUEST;
 import static org.jboss.weld.logging.messages.JsfMessage.RESUMING_CONVERSATION;
 
 import java.util.Map;
-
 import javax.enterprise.context.spi.Context;
 import javax.enterprise.inject.Instance;
 import javax.faces.context.FacesContext;
@@ -45,8 +43,6 @@
 
 import org.jboss.weld.Container;
 import org.jboss.weld.context.ConversationContext;
-import org.jboss.weld.context.ManagedConversation;
-import org.jboss.weld.context.NonexistentConversationException;
 import org.jboss.weld.context.http.HttpConversationContext;
 import org.slf4j.cal10n.LocLogger;
 
@@ -102,13 +98,6 @@ private void activateConversations(FacesContext facesContext) {
         HttpConversationContext conversationContext = instance().select(HttpConversationContext.class).get();
         String cid = getConversationId(facesContext, conversationContext);
         log.debug(RESUMING_CONVERSATION, cid);
-        ManagedConversation conversation = conversationContext.getConversation(cid);
-        if (cid != null && conversation == null) {
-            // CDI 6.7.4 we must activate a new transient conversation before we throw the exception
-            conversationContext.activate(null);
-            // Make sure that the conversation already exists
-            throw new NonexistentConversationException(NO_CONVERSATION_FOUND_TO_RESTORE, cid);
-        }
 
         /*
          * Don't try to reactivate the ConversationContext if we have already activated it for this request",2011-10-31T16:08:54Z,173
"@@ -1,5 +1,5 @@
 # Container a number of properties associated with installing Weld into JBoss AS and running the TCK in JBoss AS
-#jboss.home=/Users/alesj/projects/as7/as/build/target/jboss-as-7.1.0.Alpha1-SNAPSHOT
+#jboss.home=/Users/alesj/java_lib/jboss-as-7.0.2.Final
 org.jboss.testharness.container.javaOpts=-Xms128m -Xmx512m -XX:MaxPermSize=256m -Dorg.jboss.resolver.warning=true -Dsun.rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000
 
 # time to allow before attempting to restart JBoss AS",2011-10-31T16:08:54Z,174
"@@ -235,7 +235,7 @@
                                 <suiteXmlFile>src/test/resources/tck-tests.xml</suiteXmlFile>
                             </suiteXmlFiles>
                             <systemPropertyVariables>
-                                <jboss.server.config.file.name>standalone.xml</jboss.server.config.file.name>
+                                <jboss.server.config.file.name>standalone-preview.xml</jboss.server.config.file.name>
                             </systemPropertyVariables>
                             <systemProperties>
                                 <property>
@@ -301,7 +301,7 @@
                                 <suiteXmlFile>src/test/resources/tck-tests.xml</suiteXmlFile>
                             </suiteXmlFiles>
                             <systemPropertyVariables>
-                                <jboss.server.config.file.name>standalone.xml</jboss.server.config.file.name>
+                                <jboss.server.config.file.name>standalone-preview.xml</jboss.server.config.file.name>
                             </systemPropertyVariables>
                             <systemProperties>
                                 <property>",2011-10-31T16:08:54Z,175
"@@ -22,16 +22,10 @@
  */
 package org.jboss.weld.context;
 
-import org.jboss.weld.Container;
-import org.jboss.weld.context.beanstore.BoundBeanStore;
-import org.jboss.weld.context.beanstore.ConversationNamingScheme;
-import org.jboss.weld.context.beanstore.NamingScheme;
-import org.jboss.weld.context.conversation.ConversationIdGenerator;
-import org.jboss.weld.context.conversation.ConversationImpl;
-import org.jboss.weld.logging.messages.ConversationMessage;
+import static org.jboss.weld.context.conversation.ConversationIdGenerator.CONVERSATION_ID_GENERATOR_ATTRIBUTE_NAME;
+import static org.jboss.weld.logging.messages.ConversationMessage.NO_CONVERSATION_FOUND_TO_RESTORE;
+import static org.jboss.weld.util.reflection.Reflections.cast;
 
-import javax.enterprise.context.ConversationScoped;
-import javax.enterprise.inject.Instance;
 import java.lang.annotation.Annotation;
 import java.util.Collection;
 import java.util.HashMap;
@@ -40,16 +34,24 @@
 import java.util.Map.Entry;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicReference;
+import javax.enterprise.context.ConversationScoped;
+import javax.enterprise.inject.Instance;
 
-import static org.jboss.weld.context.conversation.ConversationIdGenerator.CONVERSATION_ID_GENERATOR_ATTRIBUTE_NAME;
-import static org.jboss.weld.util.reflection.Reflections.cast;
+import org.jboss.weld.Container;
+import org.jboss.weld.context.beanstore.BoundBeanStore;
+import org.jboss.weld.context.beanstore.ConversationNamingScheme;
+import org.jboss.weld.context.beanstore.NamingScheme;
+import org.jboss.weld.context.conversation.ConversationIdGenerator;
+import org.jboss.weld.context.conversation.ConversationImpl;
+import org.jboss.weld.logging.messages.ConversationMessage;
 
 
 /**
  * The base of the conversation context, which can use a variety of storage
  * forms
  *
  * @author Pete Muir
+ * @author George Sapountzis
  */
 public abstract class AbstractConversationContext<R, S> extends AbstractBoundContext<R> implements ConversationContext {
 
@@ -173,6 +175,59 @@ public void activate() {
         this.activate(null);
     }
 
+    protected void associateRequest() {
+        ManagedConversation conversation = new ConversationImpl(conversationContexts);
+        setRequestAttribute(getRequest(), CURRENT_CONVERSATION_ATTRIBUTE_NAME, conversation);
+
+        // Set a temporary bean store, this will be attached at the end of the request if needed
+        NamingScheme namingScheme = new ConversationNamingScheme(ConversationContext.class.getName(), ""transient"");
+        setBeanStore(createRequestBeanStore(namingScheme, getRequest()));
+        setRequestAttribute(getRequest(), ConversationNamingScheme.PARAMETER_NAME, namingScheme);
+    }
+
+    protected void associateRequest(String cid) {
+        ManagedConversation conversation = getConversation(cid);
+        setRequestAttribute(getRequest(), CURRENT_CONVERSATION_ATTRIBUTE_NAME, conversation);
+
+        NamingScheme namingScheme = new ConversationNamingScheme(ConversationContext.class.getName(), cid);
+        setBeanStore(createRequestBeanStore(namingScheme, getRequest()));
+        getBeanStore().attach();
+    }
+
+    public void activate(String cid) {
+        if (getBeanStore() == null) {
+            if (!isAssociated()) {
+                throw new IllegalStateException(""Must call associate() before calling activate()"");
+            }
+            // Activate the context
+            super.setActive(true);
+
+            // Attach the conversation
+            if (cid != null) {
+                ManagedConversation conversation = getConversation(cid);
+                if (conversation != null) {
+                    boolean lock = conversation.lock(getConcurrentAccessTimeout());
+                    if (lock) {
+                        associateRequest(cid);
+                    } else {
+                        // Associate the request with a new transient conversation
+                        associateRequest();
+                        throw new BusyConversationException(ConversationMessage.CONVERSATION_LOCK_TIMEDOUT, cid);
+                    }
+                } else {
+                    // CDI 6.7.4 we must activate a new transient conversation before we throw the exception
+                    associateRequest();
+                    // Make sure that the conversation already exists
+                    throw new NonexistentConversationException(NO_CONVERSATION_FOUND_TO_RESTORE, cid);
+                }
+            } else {
+                associateRequest();
+            }
+        } else {
+            throw new IllegalStateException(""Context is already active"");
+        }
+    }
+
     @Override
     public void deactivate() {
         // Disassociate from the current conversation
@@ -224,39 +279,6 @@ public void deactivate() {
         }
     }
 
-    public void activate(String cid) {
-        if (getBeanStore() == null) {
-            if (!isAssociated()) {
-                throw new IllegalStateException(""Must call associate() before calling activate()"");
-            }
-            // Activate the context
-            super.setActive(true);
-
-            // Attach the conversation
-            if (cid == null || getConversation(cid) == null) {
-                ManagedConversation conversation = new ConversationImpl(conversationContexts);
-                setRequestAttribute(getRequest(), CURRENT_CONVERSATION_ATTRIBUTE_NAME, conversation);
-                // Set a temporary bean store, this will be attached at the end of
-                // the request if needed
-                NamingScheme namingScheme = new ConversationNamingScheme(ConversationContext.class.getName(), ""transient"");
-                setBeanStore(createRequestBeanStore(namingScheme, getRequest()));
-                setRequestAttribute(getRequest(), ConversationNamingScheme.PARAMETER_NAME, namingScheme);
-            } else {
-                setRequestAttribute(getRequest(), CURRENT_CONVERSATION_ATTRIBUTE_NAME, getConversation(cid));
-                if (getCurrentConversation().lock(getConcurrentAccessTimeout())) {
-                    NamingScheme namingScheme = new ConversationNamingScheme(ConversationContext.class.getName(), cid);
-                    setBeanStore(createRequestBeanStore(namingScheme, getRequest()));
-                    getBeanStore().attach();
-                } else {
-                    throw new BusyConversationException(ConversationMessage.CONVERSATION_LOCK_TIMEDOUT, cid);
-                }
-            }
-
-        } else {
-            throw new IllegalStateException(""Context is already active"");
-        }
-    }
-
     @Override
     public void invalidate() {
         for (ManagedConversation conversation : getConversations()) {",2011-10-31T16:08:54Z,172
"@@ -28,13 +28,11 @@
 import static org.jboss.weld.logging.Category.JSF;
 import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
 import static org.jboss.weld.logging.messages.ConversationMessage.CLEANING_UP_TRANSIENT_CONVERSATION;
-import static org.jboss.weld.logging.messages.ConversationMessage.NO_CONVERSATION_FOUND_TO_RESTORE;
 import static org.jboss.weld.logging.messages.JsfMessage.CLEANING_UP_CONVERSATION;
 import static org.jboss.weld.logging.messages.JsfMessage.FOUND_CONVERSATION_FROM_REQUEST;
 import static org.jboss.weld.logging.messages.JsfMessage.RESUMING_CONVERSATION;
 
 import java.util.Map;
-
 import javax.enterprise.context.spi.Context;
 import javax.enterprise.inject.Instance;
 import javax.faces.context.FacesContext;
@@ -45,8 +43,6 @@
 
 import org.jboss.weld.Container;
 import org.jboss.weld.context.ConversationContext;
-import org.jboss.weld.context.ManagedConversation;
-import org.jboss.weld.context.NonexistentConversationException;
 import org.jboss.weld.context.http.HttpConversationContext;
 import org.slf4j.cal10n.LocLogger;
 
@@ -102,13 +98,6 @@ private void activateConversations(FacesContext facesContext) {
         HttpConversationContext conversationContext = instance().select(HttpConversationContext.class).get();
         String cid = getConversationId(facesContext, conversationContext);
         log.debug(RESUMING_CONVERSATION, cid);
-        ManagedConversation conversation = conversationContext.getConversation(cid);
-        if (cid != null && conversation == null) {
-            // CDI 6.7.4 we must activate a new transient conversation before we throw the exception
-            conversationContext.activate(null);
-            // Make sure that the conversation already exists
-            throw new NonexistentConversationException(NO_CONVERSATION_FOUND_TO_RESTORE, cid);
-        }
 
         /*
          * Don't try to reactivate the ConversationContext if we have already activated it for this request",2011-10-31T16:08:54Z,173
"@@ -1,5 +1,5 @@
 # Container a number of properties associated with installing Weld into JBoss AS and running the TCK in JBoss AS
-#jboss.home=/Users/alesj/projects/as7/as/build/target/jboss-as-7.1.0.Alpha1-SNAPSHOT
+#jboss.home=/Users/alesj/java_lib/jboss-as-7.0.2.Final
 org.jboss.testharness.container.javaOpts=-Xms128m -Xmx512m -XX:MaxPermSize=256m -Dorg.jboss.resolver.warning=true -Dsun.rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000
 
 # time to allow before attempting to restart JBoss AS",2011-10-31T16:08:54Z,174
"@@ -235,7 +235,7 @@
                                 <suiteXmlFile>src/test/resources/tck-tests.xml</suiteXmlFile>
                             </suiteXmlFiles>
                             <systemPropertyVariables>
-                                <jboss.server.config.file.name>standalone.xml</jboss.server.config.file.name>
+                                <jboss.server.config.file.name>standalone-preview.xml</jboss.server.config.file.name>
                             </systemPropertyVariables>
                             <systemProperties>
                                 <property>
@@ -301,7 +301,7 @@
                                 <suiteXmlFile>src/test/resources/tck-tests.xml</suiteXmlFile>
                             </suiteXmlFiles>
                             <systemPropertyVariables>
-                                <jboss.server.config.file.name>standalone.xml</jboss.server.config.file.name>
+                                <jboss.server.config.file.name>standalone-preview.xml</jboss.server.config.file.name>
                             </systemPropertyVariables>
                             <systemProperties>
                                 <property>",2011-10-31T16:08:54Z,175
"@@ -16,22 +16,31 @@
  */
 package org.jboss.weld.annotated;
 
+import static org.jboss.weld.logging.Category.BOOTSTRAP;
+import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
 import static org.jboss.weld.logging.messages.MetadataMessage.INVALID_PARAMETER_POSITION;
 import static org.jboss.weld.logging.messages.MetadataMessage.METADATA_SOURCE_RETURNED_NULL;
+import static org.jboss.weld.logging.messages.MetadataMessage.NOT_IN_HIERARCHY;
+import static org.jboss.weld.logging.messages.MetadataMessage.NO_CONSTRUCTOR;
+
+import java.util.HashSet;
+import java.util.Set;
 
 import javax.enterprise.inject.spi.Annotated;
 import javax.enterprise.inject.spi.AnnotatedMember;
 import javax.enterprise.inject.spi.AnnotatedParameter;
 import javax.enterprise.inject.spi.AnnotatedType;
 
 import org.jboss.weld.exceptions.IllegalArgumentException;
+import org.slf4j.cal10n.LocLogger;
 
 /**
  * Validates that methods of an {@link Annotated} implementation return sane values.
  * @author Jozef Hartinger
  *
  */
 public class AnnotatedTypeValidator {
+    private static final LocLogger log = loggerFactory().getLogger(BOOTSTRAP);
 
     private AnnotatedTypeValidator() {
     }
@@ -62,11 +71,40 @@ public static void validateAnnotatedType(AnnotatedType<?> type) {
         checkNotNull(type.getFields(), ""getFields()"", type);
         checkNotNull(type.getConstructors(), ""getConstructors()"", type);
         checkNotNull(type.getMethods(), ""getMethods()"", type);
+        checkSensibility(type);
     }
 
     private static void checkNotNull(Object expression, String methodName, Object target) {
         if (expression == null) {
             throw new IllegalArgumentException(METADATA_SOURCE_RETURNED_NULL, methodName, target);
         }
     }
+
+    /**
+     * Checks if the given AnnotatedType is sensible, otherwise provides warnings.
+     */
+    private static void checkSensibility(AnnotatedType<?> type) {
+        // check if it has a constructor
+        if (type.getConstructors().isEmpty() && !type.getJavaClass().isInterface()) {
+            log.warn(NO_CONSTRUCTOR, type);
+        }
+
+        Set<Class<?>> hierarchy = new HashSet<Class<?>>();
+        for (Class<?> clazz = type.getJavaClass(); clazz != null; clazz = clazz.getSuperclass()) {
+            hierarchy.add(clazz);
+        }
+
+        checkMembersBelongToHierarchy(type.getConstructors(), hierarchy, type);
+        checkMembersBelongToHierarchy(type.getMethods(), hierarchy, type);
+        checkMembersBelongToHierarchy(type.getFields(), hierarchy, type);
+    }
+
+    private static void checkMembersBelongToHierarchy(Iterable<? extends AnnotatedMember<?>> members, Set<Class<?>> hierarchy, AnnotatedType<?> type) {
+        for (AnnotatedMember<?> member : members) {
+            if (!hierarchy.contains(member.getJavaMember().getDeclaringClass())) {
+                log.warn(NOT_IN_HIERARCHY, member.toString(), type.toString());
+            }
+        }
+    }
+
 }",2013-06-03T14:39:48Z,11
"@@ -51,4 +51,6 @@ public enum MetadataMessage {
     @MessageId(""001113"")NOT_A_SCOPE,
     @MessageId(""001114"")METADATA_SOURCE_RETURNED_NULL,
     @MessageId(""001115"")INVALID_PARAMETER_POSITION,
+    @MessageId(""001116"")NO_CONSTRUCTOR,
+    @MessageId(""001117"")NOT_IN_HIERARCHY;
 }",2013-06-03T14:39:48Z,12
"@@ -16,6 +16,7 @@
  */
 package org.jboss.weld.manager;
 
+import static org.jboss.weld.annotated.AnnotatedTypeValidator.validateAnnotatedType;
 import static org.jboss.weld.logging.Category.BOOTSTRAP;
 import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
 import static org.jboss.weld.logging.messages.BeanManagerMessage.AMBIGUOUS_BEANS_FOR_DEPENDENCY;
@@ -1380,6 +1381,7 @@ public <T> InjectionTargetFactoryImpl<T> getLocalInjectionTargetFactory(Annotate
      */
     @Override
     public <T> InjectionTargetFactoryImpl<T> getInjectionTargetFactory(AnnotatedType<T> type) {
+        validateAnnotatedType(type);
         BeanManagerImpl manager = BeanManagerLookupService.lookupBeanManager(type.getJavaClass(), this);
         return new InjectionTargetFactoryImpl<T>(type, manager);
     }",2013-06-03T14:39:48Z,4
"@@ -16,8 +16,6 @@
  */
 package org.jboss.weld.manager;
 
-import static org.jboss.weld.annotated.AnnotatedTypeValidator.validateAnnotatedType;
-
 import javax.enterprise.inject.spi.AnnotatedType;
 import javax.enterprise.inject.spi.Bean;
 import javax.enterprise.inject.spi.Decorator;
@@ -57,7 +55,6 @@ public class InjectionTargetFactoryImpl<T> implements WeldInjectionTargetFactory
 
     protected InjectionTargetFactoryImpl(AnnotatedType<T> type, BeanManagerImpl manager) {
         this.manager = manager;
-        validateAnnotatedType(type);
         this.type = manager.getServices().get(ClassTransformer.class).getEnhancedAnnotatedType(type, manager.getId());
         this.injectionTargetService = manager.getServices().get(InjectionTargetService.class);
         this.injectionServices = manager.getServices().get(InjectionServices.class);",2013-06-03T14:39:48Z,13
"@@ -14,3 +14,5 @@ TYPES_EMPTY=BeanAttributes.getTypes() may not return an empty set {0}
 NOT_A_SCOPE={0} defined on {1} is not a scope annotation
 METADATA_SOURCE_RETURNED_NULL={0} returned null for {1}
 INVALID_PARAMETER_POSITION=Parameter position {0} of parameter {1} is not valid
+NO_CONSTRUCTOR=AnnotatedType ({0}) without a constructor
+NOT_IN_HIERARCHY=Member ({0}) does not belong to the actual class hierarchy of the annotatedType ({1})",2013-06-03T14:39:48Z,14
"@@ -27,7 +27,7 @@
 import static org.jboss.weld.logging.messages.BeanMessage.ONLY_ONE_SCOPE_ALLOWED;
 import static org.jboss.weld.logging.messages.BeanMessage.PRODUCER_CAST_ERROR;
 import static org.jboss.weld.logging.messages.BeanMessage.PRODUCER_METHOD_WITH_TYPE_VARIABLE_RETURN_TYPE_MUST_BE_DEPENDENT;
-import static org.jboss.weld.logging.messages.BeanMessage.PRODUCER_METHOD_WITH_WILDCARD_RETURN_TYPE_MUST_BE_DEPENDENT;
+import static org.jboss.weld.logging.messages.BeanMessage.PRODUCER_METHOD_CANNOT_HAVE_A_WILDCARD_RETURN_TYPE;
 import static org.jboss.weld.logging.messages.BeanMessage.RETURN_TYPE_MUST_BE_CONCRETE;
 import static org.jboss.weld.logging.messages.BeanMessage.USING_DEFAULT_SCOPE;
 import static org.jboss.weld.logging.messages.BeanMessage.USING_SCOPE;
@@ -183,7 +183,7 @@ else if (getWeldAnnotated().isParameterizedType())
             }
             else if (type instanceof WildcardType)
             {
-               throw new DefinitionException(PRODUCER_METHOD_WITH_WILDCARD_RETURN_TYPE_MUST_BE_DEPENDENT, getWeldAnnotated());
+               throw new DefinitionException(PRODUCER_METHOD_CANNOT_HAVE_A_WILDCARD_RETURN_TYPE, getWeldAnnotated());
             }
          }
       }",2010-11-13T19:05:55Z,15
"@@ -133,7 +133,7 @@ public enum BeanMessage
    @MessageId(""000095"") GENERIC_SESSION_BEAN_MUST_BE_DEPENDENT,
    @MessageId(""000096"") PRODUCER_FIELD_ON_SESSION_BEAN_MUST_BE_STATIC,
    @MessageId(""000097"") PRODUCER_METHOD_WITH_TYPE_VARIABLE_RETURN_TYPE_MUST_BE_DEPENDENT,
-   @MessageId(""000098"") PRODUCER_METHOD_WITH_WILDCARD_RETURN_TYPE_MUST_BE_DEPENDENT,
+   @MessageId(""000098"") PRODUCER_METHOD_CANNOT_HAVE_A_WILDCARD_RETURN_TYPE,
    @MessageId(""000099"") CANNOT_LOAD_CLASS,
    @MessageId(""001500"") PROXY_DESERIALIZATION_FAILURE,
    @MessageId(""001501"") BEAN_INSTANCE_NOT_SET_ON_PROXY,",2010-11-13T19:05:55Z,16
"@@ -96,7 +96,7 @@ INJECTED_FIELD_CANNOT_BE_PRODUCER=Injected field {0} cannot be annotated @Produc
 GENERIC_SESSION_BEAN_MUST_BE_DEPENDENT=Session bean with generic class {0} must be @Depedent scope
 PRODUCER_FIELD_ON_SESSION_BEAN_MUST_BE_STATIC=Producer fields on session beans must be static. Field {0} declared on {1}
 PRODUCER_METHOD_WITH_TYPE_VARIABLE_RETURN_TYPE_MUST_BE_DEPENDENT=A producer method with a parameterized return type with a type variable must be declared @Dependent scoped. Method {0}
-PRODUCER_METHOD_WITH_WILDCARD_RETURN_TYPE_MUST_BE_DEPENDENT=A producer method cannot have a return type parameterized with wildcards. Method {0}  
+PRODUCER_METHOD_CANNOT_HAVE_A_WILDCARD_RETURN_TYPE=A producer method cannot have a return type parameterized with wildcards. Method {0}  
 CANNOT_LOAD_CLASS=Cannot load class {0} during deserialization of proxy
 PROXY_DESERIALIZATION_FAILURE=Failed to deserialize proxy object
 BEAN_INSTANCE_NOT_SET_ON_PROXY=Method call requires a BeanInstance which has not been set for this proxy",2010-11-13T19:05:55Z,17
"@@ -16,22 +16,31 @@
  */
 package org.jboss.weld.annotated;
 
+import static org.jboss.weld.logging.Category.BOOTSTRAP;
+import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
 import static org.jboss.weld.logging.messages.MetadataMessage.INVALID_PARAMETER_POSITION;
 import static org.jboss.weld.logging.messages.MetadataMessage.METADATA_SOURCE_RETURNED_NULL;
+import static org.jboss.weld.logging.messages.MetadataMessage.NOT_IN_HIERARCHY;
+import static org.jboss.weld.logging.messages.MetadataMessage.NO_CONSTRUCTOR;
+
+import java.util.HashSet;
+import java.util.Set;
 
 import javax.enterprise.inject.spi.Annotated;
 import javax.enterprise.inject.spi.AnnotatedMember;
 import javax.enterprise.inject.spi.AnnotatedParameter;
 import javax.enterprise.inject.spi.AnnotatedType;
 
 import org.jboss.weld.exceptions.IllegalArgumentException;
+import org.slf4j.cal10n.LocLogger;
 
 /**
  * Validates that methods of an {@link Annotated} implementation return sane values.
  * @author Jozef Hartinger
  *
  */
 public class AnnotatedTypeValidator {
+    private static final LocLogger log = loggerFactory().getLogger(BOOTSTRAP);
 
     private AnnotatedTypeValidator() {
     }
@@ -62,11 +71,40 @@ public static void validateAnnotatedType(AnnotatedType<?> type) {
         checkNotNull(type.getFields(), ""getFields()"", type);
         checkNotNull(type.getConstructors(), ""getConstructors()"", type);
         checkNotNull(type.getMethods(), ""getMethods()"", type);
+        checkSensibility(type);
     }
 
     private static void checkNotNull(Object expression, String methodName, Object target) {
         if (expression == null) {
             throw new IllegalArgumentException(METADATA_SOURCE_RETURNED_NULL, methodName, target);
         }
     }
+
+    /**
+     * Checks if the given AnnotatedType is sensible, otherwise provides warnings.
+     */
+    private static void checkSensibility(AnnotatedType<?> type) {
+        // check if it has a constructor
+        if (type.getConstructors().isEmpty() && !type.getJavaClass().isInterface()) {
+            log.warn(NO_CONSTRUCTOR, type);
+        }
+
+        Set<Class<?>> hierarchy = new HashSet<Class<?>>();
+        for (Class<?> clazz = type.getJavaClass(); clazz != null; clazz = clazz.getSuperclass()) {
+            hierarchy.add(clazz);
+        }
+
+        checkMembersBelongToHierarchy(type.getConstructors(), hierarchy, type);
+        checkMembersBelongToHierarchy(type.getMethods(), hierarchy, type);
+        checkMembersBelongToHierarchy(type.getFields(), hierarchy, type);
+    }
+
+    private static void checkMembersBelongToHierarchy(Iterable<? extends AnnotatedMember<?>> members, Set<Class<?>> hierarchy, AnnotatedType<?> type) {
+        for (AnnotatedMember<?> member : members) {
+            if (!hierarchy.contains(member.getJavaMember().getDeclaringClass())) {
+                log.warn(NOT_IN_HIERARCHY, member.toString(), type.toString());
+            }
+        }
+    }
+
 }",2013-06-03T14:39:48Z,11
"@@ -51,4 +51,6 @@ public enum MetadataMessage {
     @MessageId(""001113"")NOT_A_SCOPE,
     @MessageId(""001114"")METADATA_SOURCE_RETURNED_NULL,
     @MessageId(""001115"")INVALID_PARAMETER_POSITION,
+    @MessageId(""001116"")NO_CONSTRUCTOR,
+    @MessageId(""001117"")NOT_IN_HIERARCHY;
 }",2013-06-03T14:39:48Z,12
"@@ -16,6 +16,7 @@
  */
 package org.jboss.weld.manager;
 
+import static org.jboss.weld.annotated.AnnotatedTypeValidator.validateAnnotatedType;
 import static org.jboss.weld.logging.Category.BOOTSTRAP;
 import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
 import static org.jboss.weld.logging.messages.BeanManagerMessage.AMBIGUOUS_BEANS_FOR_DEPENDENCY;
@@ -1380,6 +1381,7 @@ public <T> InjectionTargetFactoryImpl<T> getLocalInjectionTargetFactory(Annotate
      */
     @Override
     public <T> InjectionTargetFactoryImpl<T> getInjectionTargetFactory(AnnotatedType<T> type) {
+        validateAnnotatedType(type);
         BeanManagerImpl manager = BeanManagerLookupService.lookupBeanManager(type.getJavaClass(), this);
         return new InjectionTargetFactoryImpl<T>(type, manager);
     }",2013-06-03T14:39:48Z,4
"@@ -16,8 +16,6 @@
  */
 package org.jboss.weld.manager;
 
-import static org.jboss.weld.annotated.AnnotatedTypeValidator.validateAnnotatedType;
-
 import javax.enterprise.inject.spi.AnnotatedType;
 import javax.enterprise.inject.spi.Bean;
 import javax.enterprise.inject.spi.Decorator;
@@ -57,7 +55,6 @@ public class InjectionTargetFactoryImpl<T> implements WeldInjectionTargetFactory
 
     protected InjectionTargetFactoryImpl(AnnotatedType<T> type, BeanManagerImpl manager) {
         this.manager = manager;
-        validateAnnotatedType(type);
         this.type = manager.getServices().get(ClassTransformer.class).getEnhancedAnnotatedType(type, manager.getId());
         this.injectionTargetService = manager.getServices().get(InjectionTargetService.class);
         this.injectionServices = manager.getServices().get(InjectionServices.class);",2013-06-03T14:39:48Z,13
"@@ -14,3 +14,5 @@ TYPES_EMPTY=BeanAttributes.getTypes() may not return an empty set {0}
 NOT_A_SCOPE={0} defined on {1} is not a scope annotation
 METADATA_SOURCE_RETURNED_NULL={0} returned null for {1}
 INVALID_PARAMETER_POSITION=Parameter position {0} of parameter {1} is not valid
+NO_CONSTRUCTOR=AnnotatedType ({0}) without a constructor
+NOT_IN_HIERARCHY=Member ({0}) does not belong to the actual class hierarchy of the annotatedType ({1})",2013-06-03T14:39:48Z,14
"@@ -27,7 +27,7 @@
 import static org.jboss.weld.logging.messages.BeanMessage.ONLY_ONE_SCOPE_ALLOWED;
 import static org.jboss.weld.logging.messages.BeanMessage.PRODUCER_CAST_ERROR;
 import static org.jboss.weld.logging.messages.BeanMessage.PRODUCER_METHOD_WITH_TYPE_VARIABLE_RETURN_TYPE_MUST_BE_DEPENDENT;
-import static org.jboss.weld.logging.messages.BeanMessage.PRODUCER_METHOD_WITH_WILDCARD_RETURN_TYPE_MUST_BE_DEPENDENT;
+import static org.jboss.weld.logging.messages.BeanMessage.PRODUCER_METHOD_CANNOT_HAVE_A_WILDCARD_RETURN_TYPE;
 import static org.jboss.weld.logging.messages.BeanMessage.RETURN_TYPE_MUST_BE_CONCRETE;
 import static org.jboss.weld.logging.messages.BeanMessage.USING_DEFAULT_SCOPE;
 import static org.jboss.weld.logging.messages.BeanMessage.USING_SCOPE;
@@ -183,7 +183,7 @@ else if (getWeldAnnotated().isParameterizedType())
             }
             else if (type instanceof WildcardType)
             {
-               throw new DefinitionException(PRODUCER_METHOD_WITH_WILDCARD_RETURN_TYPE_MUST_BE_DEPENDENT, getWeldAnnotated());
+               throw new DefinitionException(PRODUCER_METHOD_CANNOT_HAVE_A_WILDCARD_RETURN_TYPE, getWeldAnnotated());
             }
          }
       }",2010-11-13T19:05:55Z,15
"@@ -133,7 +133,7 @@ public enum BeanMessage
    @MessageId(""000095"") GENERIC_SESSION_BEAN_MUST_BE_DEPENDENT,
    @MessageId(""000096"") PRODUCER_FIELD_ON_SESSION_BEAN_MUST_BE_STATIC,
    @MessageId(""000097"") PRODUCER_METHOD_WITH_TYPE_VARIABLE_RETURN_TYPE_MUST_BE_DEPENDENT,
-   @MessageId(""000098"") PRODUCER_METHOD_WITH_WILDCARD_RETURN_TYPE_MUST_BE_DEPENDENT,
+   @MessageId(""000098"") PRODUCER_METHOD_CANNOT_HAVE_A_WILDCARD_RETURN_TYPE,
    @MessageId(""000099"") CANNOT_LOAD_CLASS,
    @MessageId(""001500"") PROXY_DESERIALIZATION_FAILURE,
    @MessageId(""001501"") BEAN_INSTANCE_NOT_SET_ON_PROXY,",2010-11-13T19:05:55Z,16
"@@ -96,7 +96,7 @@ INJECTED_FIELD_CANNOT_BE_PRODUCER=Injected field {0} cannot be annotated @Produc
 GENERIC_SESSION_BEAN_MUST_BE_DEPENDENT=Session bean with generic class {0} must be @Depedent scope
 PRODUCER_FIELD_ON_SESSION_BEAN_MUST_BE_STATIC=Producer fields on session beans must be static. Field {0} declared on {1}
 PRODUCER_METHOD_WITH_TYPE_VARIABLE_RETURN_TYPE_MUST_BE_DEPENDENT=A producer method with a parameterized return type with a type variable must be declared @Dependent scoped. Method {0}
-PRODUCER_METHOD_WITH_WILDCARD_RETURN_TYPE_MUST_BE_DEPENDENT=A producer method cannot have a return type parameterized with wildcards. Method {0}  
+PRODUCER_METHOD_CANNOT_HAVE_A_WILDCARD_RETURN_TYPE=A producer method cannot have a return type parameterized with wildcards. Method {0}  
 CANNOT_LOAD_CLASS=Cannot load class {0} during deserialization of proxy
 PROXY_DESERIALIZATION_FAILURE=Failed to deserialize proxy object
 BEAN_INSTANCE_NOT_SET_ON_PROXY=Method call requires a BeanInstance which has not been set for this proxy",2010-11-13T19:05:55Z,17
"@@ -297,7 +297,7 @@ protected void postSpecialize() {
         if (isSpecializing() && getSpecializedBean().getWeldAnnotated().isAnnotationPresent(Named.class)) {
             this.name = getSpecializedBean().getName();
         }
-        BeansClosure closure = BeansClosure.getClosure(beanManager);
+        BeansClosure closure = beanManager.getClosure();
         closure.addSpecialized(getSpecializedBean(), this);
     }
 ",2012-09-27T11:41:13Z,176
"@@ -445,15 +445,15 @@ protected void checkBeanImplementation() {
     @Override
     protected void preSpecialize(BeanDeployerEnvironment environment) {
         super.preSpecialize(environment);
-        BeansClosure closure = BeansClosure.getClosure(beanManager);
+        BeansClosure closure = beanManager.getClosure();
         if (closure.isEJB(getWeldAnnotated().getWeldSuperclass())) {
             throw new DefinitionException(SPECIALIZING_BEAN_MUST_EXTEND_A_BEAN, this);
         }
     }
 
     @Override
     protected void specialize(BeanDeployerEnvironment environment) {
-        BeansClosure closure = BeansClosure.getClosure(beanManager);
+        BeansClosure closure = beanManager.getClosure();
         Bean<?> specializedBean = closure.getClassBean(getWeldAnnotated().getWeldSuperclass());
         if (specializedBean == null) {
             throw new DefinitionException(SPECIALIZING_BEAN_MUST_EXTEND_A_BEAN, this);",2012-09-27T11:41:13Z,92
"@@ -245,7 +245,7 @@ protected void preSpecialize(BeanDeployerEnvironment environment) {
 
     @Override
     protected void specialize(BeanDeployerEnvironment environment) {
-        BeansClosure closure = BeansClosure.getClosure(beanManager);
+        BeansClosure closure = beanManager.getClosure();
         WeldMethod<?, ?> superClassMethod = getDeclaringBean().getWeldAnnotated().getWeldSuperclass().getWeldMethod(getWeldAnnotated().getJavaMember());
         ProducerMethod<?, ?> check = closure.getProducerMethod(superClassMethod);
         if (check == null) {",2012-09-27T11:41:13Z,177
"@@ -264,15 +264,15 @@ protected void checkScopeAllowed() {
     protected void preSpecialize(BeanDeployerEnvironment environment) {
         super.preSpecialize(environment);
         // We appear to check this twice?
-        BeansClosure closure = BeansClosure.getClosure(beanManager);
+        BeansClosure closure = beanManager.getClosure();
         if (closure.isEJB(getWeldAnnotated().getWeldSuperclass()) == false) {
             throw new DefinitionException(SPECIALIZING_ENTERPRISE_BEAN_MUST_EXTEND_AN_ENTERPRISE_BEAN, this);
         }
     }
 
     @Override
     protected void specialize(BeanDeployerEnvironment environment) {
-        BeansClosure closure = BeansClosure.getClosure(beanManager);
+        BeansClosure closure = beanManager.getClosure();
         Bean<?> specializedBean = closure.getClassBean(getWeldAnnotated().getWeldSuperclass());
         if (specializedBean == null) {
             throw new IllegalStateException(SPECIALIZING_ENTERPRISE_BEAN_MUST_EXTEND_AN_ENTERPRISE_BEAN, this);",2012-09-27T11:41:13Z,93
"@@ -203,7 +203,7 @@ public void createBeans(Environment environment) {
         // TODO Register the context beans
         beanDeployer.createBeans();
 
-        BeansClosure closure = BeansClosure.getClosure(beanManager);
+        BeansClosure closure = beanManager.getClosure();
         closure.addEnvironment(beanDeployer.getEnvironment());
     }
 ",2012-09-27T11:41:13Z,34
"@@ -95,7 +95,6 @@
 import org.jboss.weld.serialization.spi.ContextualStore;
 import org.jboss.weld.serialization.spi.ProxyServices;
 import org.jboss.weld.transaction.spi.TransactionServices;
-import org.jboss.weld.util.BeansClosure;
 import org.jboss.weld.util.ServiceLoader;
 import org.jboss.weld.util.reflection.Formats;
 import org.jboss.weld.util.reflection.Reflections;
@@ -406,7 +405,7 @@ public Bootstrap endInitialization() {
                         riBean.cleanupAfterBoot();
                     }
                 }
-                BeansClosure.getClosure(beanManager).clear();
+                beanManager.getClosure().clear();
             }
         }
         return this;",2012-09-27T11:41:13Z,25
"@@ -242,6 +242,11 @@ public class BeanManagerImpl implements WeldManager, Serializable {
     private final transient Map<Class<?>, InterceptionModel<ClassMetadata<?>, ?>> interceptorModelRegistry = new ConcurrentHashMap<Class<?>, InterceptionModel<ClassMetadata<?>, ?>>();
     private final transient MetadataCachingReader interceptorMetadataReader = new DefaultMetadataCachingReader();
 
+    /**
+     * Beans closure
+     */
+    private final transient BeansClosure closure;
+
     /**
      * Create a new, root, manager
      *
@@ -363,8 +368,12 @@ private BeanManagerImpl(
         this.childActivities = new CopyOnWriteArraySet<BeanManagerImpl>();
         TypeSafeObserverResolver observerResolver = new TypeSafeObserverResolver(this, createDynamicAccessibleIterable(ObserverMethodTransform.INSTANCE));
         this.accessibleObserverNotifier = ObserverNotifier.of(observerResolver, getServices());
+        this.closure = new BeansClosure(this);
     }
 
+    public BeansClosure getClosure() {
+        return closure;
+    }
 
     private <T> Iterable<T> createDynamicAccessibleIterable(final Transform<T> transform) {
         return new Iterable<T>() {
@@ -856,7 +865,6 @@ public ServiceRegistry getServices() {
     @SuppressWarnings({""deprecation"", ""unchecked""})
     @Deprecated // should nto be used anymore
     public Map<Contextual<?>, Contextual<?>> getSpecializedBeans() {
-        BeansClosure closure = BeansClosure.getClosure(this);
         return closure.getSpecialized();
     }
 
@@ -938,7 +946,6 @@ public <T> InjectionTarget<T> createInjectionTarget(EjbDescriptor<T> descriptor)
     }
 
     public <X> Bean<? extends X> getMostSpecializedBean(Bean<X> bean) {
-        BeansClosure closure = BeansClosure.getClosure(this);
         //noinspection unchecked
         return (Bean<? extends X>) closure.mostSpecialized(bean);
     }
@@ -1056,7 +1063,7 @@ public void cleanup() {
         this.namespaces.clear();
         this.accessibleObserverNotifier.clear();
         this.observers.clear();
-        BeansClosure.removeClosure(this);
+        this.closure.destroy();
     }
 
     public Map<Class<?>, InterceptionModel<ClassMetadata<?>, ?>> getInterceptorModelRegistry() {",2012-09-27T11:41:13Z,4
"@@ -533,7 +533,7 @@ public static boolean isAlternative(WeldAnnotated<?, ?> annotated, MergedStereot
      * @return true if bean is specialized by some bean in all beans
      */
     public static <T extends Bean<?>> boolean isSpecialized(T bean, BeanManagerImpl beanManager) {
-        BeansClosure closure = BeansClosure.getClosure(beanManager);
+        BeansClosure closure = beanManager.getClosure();
         return closure.isSpecialized(bean);
     }
 
@@ -546,7 +546,7 @@ public static <T extends Bean<?>> boolean isSpecialized(T bean, BeanManagerImpl
      * @return true if bean is specialized by some bean in beans
      */
     public static <T extends Bean<?>> boolean isSpecialized(T bean, Set<T> beans, BeanManagerImpl beanManager) {
-        BeansClosure closure = BeansClosure.getClosure(beanManager);
+        BeansClosure closure = beanManager.getClosure();
         Bean<?> specializedBean = closure.getSpecialized(bean);
         //noinspection SuspiciousMethodCalls
         return (specializedBean != null && beans.contains(specializedBean));
@@ -557,7 +557,7 @@ public static <T extends Bean<?>> boolean isSpecialized(T bean, Set<T> beans, Be
      */
     public static boolean isSuppressedBySpecialization(Bean<?> bean, BeanManagerImpl manager) {
         if (bean instanceof AbstractReceiverBean<?, ?, ?>) {
-            BeansClosure closure = BeansClosure.getClosure(manager);
+            BeansClosure closure = manager.getClosure();
             if (closure.isSpecialized(Reflections.<AbstractReceiverBean<?, ?, ?>>cast(bean).getDeclaringBean())) {
                 // if a bean is specialized, its producer methods are not enabled (WELD-977)
                 return true;",2012-09-27T11:41:13Z,5
"@@ -22,6 +22,14 @@
 
 package org.jboss.weld.util;
 
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+
+import javax.enterprise.inject.spi.Bean;
+
 import org.jboss.weld.bean.AbstractClassBean;
 import org.jboss.weld.bean.ProducerMethod;
 import org.jboss.weld.bootstrap.BeanDeployerEnvironment;
@@ -31,88 +39,77 @@
 import org.jboss.weld.manager.BeanManagerImpl;
 import org.jboss.weld.manager.BeanManagers;
 
-import javax.enterprise.inject.spi.Bean;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
-
 /**
  * Keeps the BDA closure information.
  *
  * @author <a href=""mailto:ales.justin@jboss.org"">Ales Justin</a>
  */
 public final class BeansClosure {
 
-    private static final Map<BeanManagerImpl, BeansClosure> closureMap = new HashMap<BeanManagerImpl, BeansClosure>();
+    private final BeanManagerImpl owner;
+    private volatile Set<BeanManagerImpl> accessibleBeanManagers;
 
     private final Map<Bean<?>, Bean<?>> specialized = new ConcurrentHashMap<Bean<?>, Bean<?>>();
     private final Map<BeanDeployerEnvironment, Object> envs = new ConcurrentHashMap<BeanDeployerEnvironment, Object>();
 
-    /**
-     * Get beans closure.
-     *
-     * @param beanManager the bean manager
-     * @return beans closure
-     */
-    public static BeansClosure getClosure(BeanManagerImpl beanManager) {
-        BeansClosure closure = closureMap.get(beanManager);
-        if (closure == null) {
-            synchronized (closureMap) {
-                closure = closureMap.get(beanManager);
-                if (closure == null) {
-                    closure = new BeansClosure();
-                    for (Iterable<BeanManagerImpl> beanManagers : BeanManagers.getAccessibleClosure(beanManager)) {
+    public BeansClosure(BeanManagerImpl owner) {
+        this.owner = owner;
+    }
+
+    private Set<BeanManagerImpl> getAccessibleBeanManagers() {
+        if (accessibleBeanManagers == null) {
+            synchronized (this) {
+                if (accessibleBeanManagers == null) {
+                    Set<BeanManagerImpl> tmp = new HashSet<BeanManagerImpl>();
+                    for (Iterable<BeanManagerImpl> beanManagers : BeanManagers.getAccessibleClosure(owner)) {
                         for (BeanManagerImpl accessibleBeanManager : beanManagers) {
-                            closureMap.put(accessibleBeanManager, closure);
+                            if (owner != accessibleBeanManager) {
+                                tmp.add(accessibleBeanManager);
+                            }
                         }
                     }
+                    accessibleBeanManagers = tmp;
                 }
             }
         }
-        return closure;
+        return accessibleBeanManagers;
     }
 
-    /**
-     * Remove beans closure.
-     *
-     * @param beanManager the bean manager
-     */
-    public static void removeClosure(BeanManagerImpl beanManager) {
-        BeansClosure closure = closureMap.remove(beanManager);
-        if (closure != null)
-            closure.destroy();
-    }
+    // --- modification methods
 
-    /**
-     * Remove accesible beans closure.
-     *
-     * @param beanManager the bean manager
-     */
-    public static void removeAccessibleClosure(BeanManagerImpl beanManager) {
-        for (Iterable<BeanManagerImpl> beanManagers : BeanManagers.getAccessibleClosure(beanManager)) {
-            for (BeanManagerImpl accessibleBeanManager : beanManagers) {
-                removeClosure(accessibleBeanManager);
-            }
+    public void addSpecialized(Bean<?> target, Bean<?> override) {
+        addSpecializedInternal(target, override);
+        for (BeanManagerImpl accessibleBeanManager : getAccessibleBeanManagers()) {
+            BeansClosure closure = accessibleBeanManager.getClosure();
+            closure.addSpecializedInternal(target, override);
         }
     }
 
-    // --- modification methods
-
-    public void addSpecialized(Bean<?> target, Bean<?> override) {
+    protected void addSpecializedInternal(Bean<?> target, Bean<?> override) {
         specialized.put(target, override);
     }
 
     public void addEnvironment(BeanDeployerEnvironment environment) {
+        addEnvironmentInternal(environment);
+        for (BeanManagerImpl accessibleBeanManager : getAccessibleBeanManagers()) {
+            BeansClosure closure = accessibleBeanManager.getClosure();
+            closure.addEnvironmentInternal(environment);
+        }
+    }
+
+    protected void addEnvironmentInternal(BeanDeployerEnvironment environment) {
         envs.put(environment, Object.class);
     }
 
     public void clear() {
         envs.clear();
     }
 
-    private void destroy() {
+    public void destroy() {
         specialized.clear();
+        if (accessibleBeanManagers != null) {
+            accessibleBeanManagers.clear();
+        }
     }
 
     // -- querys",2012-09-27T11:41:13Z,5
"@@ -42,11 +42,11 @@
 import org.jboss.weld.ejb.EjbDescriptors;
 import org.jboss.weld.ejb.spi.EjbServices;
 import org.jboss.weld.manager.BeanManagerImpl;
+import org.jboss.weld.manager.Enabled;
 import org.jboss.weld.resources.spi.ResourceLoader;
 import org.jboss.weld.security.spi.SecurityServices;
 import org.jboss.weld.transaction.spi.TransactionServices;
 import org.jboss.weld.validation.spi.ValidationServices;
-import org.jboss.weld.xml.BeansXmlParser;
 import org.slf4j.cal10n.LocLogger;
 
 /**
@@ -70,10 +70,10 @@ public BeanDeployment(BeanDeploymentArchive beanDeploymentArchive, BeanManagerIm
       ServiceRegistry services = new SimpleServiceRegistry();
       services.addAll(deploymentServices.entrySet());
       services.addAll(beanDeploymentArchive.getServices().entrySet());
-      this.beanManager = BeanManagerImpl.newManager(deploymentManager, beanDeploymentArchive.getId(), services, new BeansXmlParser(services.get(ResourceLoader.class), beanDeploymentArchive.getBeansXml()).parse());
-      log.debug(ENABLED_ALTERNATIVES, this.beanManager, beanManager.getEnabledClasses().getAlternativeClasses(), beanManager.getEnabledClasses().getAlternativeStereotypes());
-      log.debug(ENABLED_DECORATORS, this.beanManager, beanManager.getEnabledClasses().getDecorators());
-      log.debug(ENABLED_INTERCEPTORS, this.beanManager, beanManager.getEnabledClasses().getInterceptors());
+      this.beanManager = BeanManagerImpl.newManager(deploymentManager, beanDeploymentArchive.getId(), services, Enabled.of(beanDeploymentArchive.getBeansXml(), services.get(ResourceLoader.class)));
+      log.debug(ENABLED_ALTERNATIVES, this.beanManager, beanManager.getEnabled().getAlternativeClasses(), beanManager.getEnabled().getAlternativeStereotypes());
+      log.debug(ENABLED_DECORATORS, this.beanManager, beanManager.getEnabled().getDecorators());
+      log.debug(ENABLED_INTERCEPTORS, this.beanManager, beanManager.getEnabled().getInterceptors());
       if (beanManager.getServices().contains(EjbServices.class))
       {
          // Must populate EJB cache first, as we need it to detect whether a",2010-08-17T13:57:35Z,34
"@@ -477,9 +477,9 @@ private void validateEnabledInterceptorClasses(BeanManagerImpl beanManager)
       {
          interceptorBeanClasses.add(interceptor.getBeanClass());
       }
-      for (Class<?> enabledInterceptorClass : beanManager.getEnabledClasses().getInterceptors())
+      for (Class<?> enabledInterceptorClass : beanManager.getEnabled().getInterceptors())
       {
-         if (beanManager.getEnabledClasses().getInterceptors().indexOf(enabledInterceptorClass) < beanManager.getEnabledClasses().getInterceptors().lastIndexOf(enabledInterceptorClass))
+         if (beanManager.getEnabled().getInterceptors().indexOf(enabledInterceptorClass) < beanManager.getEnabled().getInterceptors().lastIndexOf(enabledInterceptorClass))
          {
             throw new DeploymentException(INTERCEPTOR_SPECIFIED_TWICE, enabledInterceptorClass + "" specified twice"");
          }
@@ -498,9 +498,9 @@ private void validateEnabledDecoratorClasses(BeanManagerImpl beanManager)
       {
          decoratorBeanClasses.add(bean.getBeanClass());
       }
-      for (Class<?> clazz : beanManager.getEnabledClasses().getDecorators())
+      for (Class<?> clazz : beanManager.getEnabled().getDecorators())
       {
-         if (beanManager.getEnabledClasses().getDecorators().indexOf(clazz) < beanManager.getEnabledClasses().getDecorators().lastIndexOf(clazz))
+         if (beanManager.getEnabled().getDecorators().indexOf(clazz) < beanManager.getEnabled().getDecorators().lastIndexOf(clazz))
          {
             throw new DeploymentException(DECORATOR_SPECIFIED_TWICE, clazz);
          }
@@ -514,7 +514,7 @@ private void validateEnabledDecoratorClasses(BeanManagerImpl beanManager)
    private void validateEnabledAlternatives(BeanManagerImpl beanManager)
    {
       List<Class<?>> seenAlternatives = new ArrayList<Class<?>>();
-      for (Class<? extends Annotation> stereotype : beanManager.getEnabledClasses().getAlternativeStereotypes())
+      for (Class<? extends Annotation> stereotype : beanManager.getEnabled().getAlternativeStereotypes())
       {
          if (!beanManager.isStereotype(stereotype))
          {
@@ -530,7 +530,7 @@ private void validateEnabledAlternatives(BeanManagerImpl beanManager)
          }
          seenAlternatives.add(stereotype);
       }
-      for (Class<?> clazz : beanManager.getEnabledClasses().getAlternativeClasses())
+      for (Class<?> clazz : beanManager.getEnabled().getAlternativeClasses())
       {
          if (clazz.isAnnotation() || clazz.isInterface())
          {
@@ -598,7 +598,7 @@ private static boolean isInjectionPointSatisfied(InjectionPoint ij, Set<?> resol
    {
       if (ij.getBean() instanceof Decorator<?>)
       {
-         if (beanManager.getEnabledClasses().getDecorators().contains(ij.getBean().getBeanClass()))
+         if (beanManager.getEnabled().getDecorators().contains(ij.getBean().getBeanClass()))
          {
             return resolvedBeans.size() > 0;
          }",2010-08-17T13:57:35Z,178
"@@ -16,6 +16,7 @@
  */
 package org.jboss.weld.bootstrap;
 
+import static org.jboss.weld.bootstrap.spi.BeansXml.EMPTY_BEANS_XML;
 import static org.jboss.weld.logging.Category.BOOTSTRAP;
 import static org.jboss.weld.logging.Category.VERSION;
 import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
@@ -26,6 +27,7 @@
 import static org.jboss.weld.logging.messages.BootstrapMessage.MANAGER_NOT_INITIALIZED;
 import static org.jboss.weld.logging.messages.BootstrapMessage.UNSPECIFIED_REQUIRED_SERVICE;
 import static org.jboss.weld.logging.messages.BootstrapMessage.VALIDATING_BEANS;
+import static org.jboss.weld.manager.Enabled.EMPTY_ENABLED;
 
 import java.net.URL;
 import java.util.Collection;
@@ -55,6 +57,7 @@
 import org.jboss.weld.bootstrap.events.BeforeBeanDiscoveryImpl;
 import org.jboss.weld.bootstrap.events.BeforeShutdownImpl;
 import org.jboss.weld.bootstrap.spi.BeanDeploymentArchive;
+import org.jboss.weld.bootstrap.spi.BeansXml;
 import org.jboss.weld.bootstrap.spi.Deployment;
 import org.jboss.weld.context.AbstractApplicationContext;
 import org.jboss.weld.context.ApplicationContext;
@@ -78,7 +81,6 @@
 import org.jboss.weld.jsf.JsfApiAbstraction;
 import org.jboss.weld.logging.messages.VersionMessage;
 import org.jboss.weld.manager.BeanManagerImpl;
-import org.jboss.weld.manager.EnabledClasses;
 import org.jboss.weld.metadata.TypeStore;
 import org.jboss.weld.metadata.cache.MetaAnnotationStore;
 import org.jboss.weld.persistence.PersistenceApiAbstraction;
@@ -98,6 +100,7 @@
 import org.jboss.weld.util.serviceProvider.DefaultServiceLoaderFactory;
 import org.jboss.weld.util.serviceProvider.ServiceLoaderFactory;
 import org.jboss.weld.ws.WSApiAbstraction;
+import org.jboss.weld.xml.BeansXmlParser;
 import org.slf4j.cal10n.LocLogger;
 
 /**
@@ -155,9 +158,9 @@ public Collection<EjbDescriptor<?>> getEjbs()
                return Collections.emptySet();
             }
 
-            public Collection<URL> getBeansXml()
+            public BeansXml getBeansXml()
             {
-               return Collections.emptySet();
+               return EMPTY_BEANS_XML;
             }
 
             public Collection<BeanDeploymentArchive> getBeanDeploymentArchives()
@@ -233,6 +236,12 @@ private BeanDeployment visit(BeanDeploymentArchive beanDeploymentArchive, Map<Be
    private Environment environment;
    private Deployment deployment;
    private DeploymentVisitor deploymentVisitor;
+   private final BeansXmlParser beansXmlParser;
+   
+   public WeldBootstrap()
+   {
+      this.beansXmlParser = new BeansXmlParser();
+   }
 
    public Bootstrap startContainer(Environment environment, Deployment deployment, BeanStore applicationBeanStore)
    {
@@ -291,7 +300,7 @@ public Bootstrap startContainer(Environment environment, Deployment deployment,
          deploymentServices.add(TypeStore.class, implementationServices.get(TypeStore.class));
 
          this.environment = environment;
-         this.deploymentManager = BeanManagerImpl.newRootManager(""deployment"", deploymentServices, new EnabledClasses());
+         this.deploymentManager = BeanManagerImpl.newRootManager(""deployment"", deploymentServices, EMPTY_ENABLED);
 
          Container.initialize(deploymentManager, ServiceRegistries.unmodifiableServiceRegistry(deployment.getServices()));
          Container.instance().setState(ContainerState.STARTING);
@@ -489,5 +498,15 @@ protected static void verifyServices(ServiceRegistry services, Set<Class<? exten
          }
       }
    }
+   
+   public BeansXml parse(Iterable<URL> urls)
+   {
+      return beansXmlParser.parse(urls);
+   }
+   
+   public BeansXml parse(URL url)
+   {
+      return beansXmlParser.parse(url);
+   }
 
 }",2010-08-17T13:57:35Z,25
"@@ -168,7 +168,7 @@ public class BeanManagerImpl implements WeldManager, Serializable
     * archive accessibility, and the configuration for this bean deployment
     * archive
     */
-   private transient final EnabledClasses enabledClasses;
+   private transient final Enabled enabled;
    private transient final Set<CurrentActivity> currentActivities;   
 
    /*
@@ -231,7 +231,7 @@ public class BeanManagerImpl implements WeldManager, Serializable
     * @param serviceRegistry
     * @return
     */
-   public static BeanManagerImpl newRootManager(String id, ServiceRegistry serviceRegistry, EnabledClasses enabledClasses)
+   public static BeanManagerImpl newRootManager(String id, ServiceRegistry serviceRegistry, Enabled enabled)
    {  
       ListMultimap<Class<? extends Annotation>, Context> contexts = Multimaps.newListMultimap(new ConcurrentHashMap<Class<? extends Annotation>, Collection<Context>>(), CopyOnWriteArrayListSupplier.<Context>instance());
 
@@ -248,7 +248,7 @@ public static BeanManagerImpl newRootManager(String id, ServiceRegistry serviceR
             contexts, 
             new CopyOnWriteArraySet<CurrentActivity>(), 
             new HashMap<Contextual<?>, Contextual<?>>(), 
-            enabledClasses,
+            enabled,
             id,
             new AtomicInteger());
    }
@@ -259,7 +259,7 @@ public static BeanManagerImpl newRootManager(String id, ServiceRegistry serviceR
     * @param serviceRegistry
     * @return
     */
-   public static BeanManagerImpl newManager(BeanManagerImpl rootManager, String id, ServiceRegistry services, EnabledClasses enabledClasses)
+   public static BeanManagerImpl newManager(BeanManagerImpl rootManager, String id, ServiceRegistry services, Enabled enabled)
    {  
       return new BeanManagerImpl(
             services, 
@@ -274,7 +274,7 @@ public static BeanManagerImpl newManager(BeanManagerImpl rootManager, String id,
             rootManager.getContexts(), 
             new CopyOnWriteArraySet<CurrentActivity>(), 
             new HashMap<Contextual<?>, Contextual<?>>(), 
-            enabledClasses,
+            enabled,
             id,
             new AtomicInteger());
    }
@@ -310,7 +310,7 @@ public static BeanManagerImpl newChildActivityManager(BeanManagerImpl parentMana
             parentManager.getContexts(), 
             parentManager.getCurrentActivities(), 
             parentManager.getSpecializedBeans(),
-            parentManager.getEnabledClasses(),
+            parentManager.getEnabled(),
             new StringBuilder().append(parentManager.getChildIds().incrementAndGet()).toString(),
             parentManager.getChildIds());
    }
@@ -334,7 +334,7 @@ private BeanManagerImpl(
          ListMultimap<Class<? extends Annotation>, Context> contexts, 
          Set<CurrentActivity> currentActivities, 
          Map<Contextual<?>, Contextual<?>> specializedBeans, 
-         EnabledClasses enabledClasses,
+         Enabled enabled,
          String id,
          AtomicInteger childIds)
    {
@@ -349,7 +349,7 @@ private BeanManagerImpl(
       this.currentActivities = currentActivities;
       this.specializedBeans = specializedBeans;
       this.observers = observers;
-      this.enabledClasses = enabledClasses;
+      this.enabled = enabled;
       this.namespaces = namespaces;
       this.id = id;
       this.childIds = new AtomicInteger();
@@ -458,29 +458,20 @@ public <T> Set<ObserverMethod<? super T>> resolveObserverMethods(Type eventType,
    {
       return (Set) observerResolver.resolve(new ResolvableBuilder().addTypes(new HierarchyDiscovery(eventType).getTypeClosure()).addType(Object.class).addQualifiers(qualifiers).addQualifierIfAbsent(AnyLiteral.INSTANCE).create());
    }
-
-   /**
-    * A collection of enabled alternative classes
-    * 
-    */
-   public Collection<Class<?>> getEnabledAlternativeClasses()
-   {
-      return getEnabledClasses().getAlternativeClasses();
-   }
    
    /**
     * Enabled Alternatives, Interceptors and Decorators
     * 
     * @return
     */
-   public EnabledClasses getEnabledClasses()
+   public Enabled getEnabled()
    {
-      return enabledClasses;
+      return enabled;
    }
    
    public boolean isBeanEnabled(Bean<?> bean)
    {
-      return Beans.isBeanEnabled(bean, getEnabledClasses());   
+      return Beans.isBeanEnabled(bean, getEnabled());   
    }
    
    public Set<Bean<?>> getBeans(Type beanType, Annotation... qualifiers)
@@ -840,7 +831,7 @@ public String toString()
    {
       StringBuilder buffer = new StringBuilder();
       buffer.append(""Manager\n"");
-      buffer.append(""Enabled alternatives: "" + getEnabledClasses().getAlternativeClasses() + "" "" + getEnabledClasses().getAlternativeStereotypes() + ""\n"");
+      buffer.append(""Enabled alternatives: "" + getEnabled().getAlternativeClasses() + "" "" + getEnabled().getAlternativeStereotypes() + ""\n"");
       buffer.append(""Registered contexts: "" + contexts.keySet() + ""\n"");
       buffer.append(""Registered beans: "" + getBeans().size() + ""\n"");
       buffer.append(""Specialized beans: "" + specializedBeans.size() + ""\n"");",2010-08-17T13:57:35Z,4
"@@ -0,0 +1,108 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2008, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,  
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.weld.manager;
+
+import static com.google.common.collect.Lists.transform;
+
+import java.lang.annotation.Annotation;
+import java.util.Collections;
+import java.util.List;
+
+import org.jboss.weld.bootstrap.spi.BeansXml;
+import org.jboss.weld.resources.spi.ResourceLoader;
+
+import com.google.common.base.Function;
+
+/**
+ * 
+ * @author Nicklas Karlsson
+ * 
+ */
+public class Enabled
+{
+   
+   private static class ClassLoader<T> implements Function<String, Class<? extends T>>
+   {
+      
+      private final ResourceLoader resourceLoader;
+      
+      public ClassLoader(ResourceLoader resourceLoader)
+      {
+         this.resourceLoader = resourceLoader;
+      }
+
+      public Class<? extends T> apply(String from)
+      {
+         return (Class<? extends T>) resourceLoader.classForName(from);
+      }
+      
+   }
+   
+   public static Enabled of(BeansXml beansXml, ResourceLoader resourceLoader)
+   {
+      if (beansXml == null)
+      {
+         return EMPTY_ENABLED;
+      }
+      else
+      {
+         ClassLoader<Object> classLoader = new ClassLoader<Object>(resourceLoader);
+         ClassLoader<Annotation> annotationLoader = new ClassLoader<Annotation>(resourceLoader);
+         return new Enabled(
+               transform(beansXml.getEnabledAlternativeStereotypes(), annotationLoader),
+               transform(beansXml.getEnabledAlternativeClasses(), classLoader),
+               transform(beansXml.getEnabledDecorators(), classLoader),
+               transform(beansXml.getEnabledInterceptors(), classLoader)
+            );
+      }
+   }
+   
+   public static final Enabled EMPTY_ENABLED = new Enabled(Collections.<Class<? extends Annotation>>emptyList(), Collections.<Class<?>>emptyList(), Collections.<Class<?>>emptyList(), Collections.<Class<?>>emptyList());
+
+   private final List<Class<? extends Annotation>> alternativeStereotypes;
+   private final List<Class<?>> alternativeClasses;
+   private final List<Class<?>> decorators;
+   private final List<Class<?>> interceptors;
+
+   private Enabled(List<Class<? extends Annotation>> alternativeStereotypes, List<Class<?>> alternativeClasses, List<Class<?>> decorators, List<Class<?>> interceptors)
+   {
+      this.alternativeStereotypes = alternativeStereotypes;
+      this.alternativeClasses = alternativeClasses;
+      this.decorators = decorators;
+      this.interceptors = interceptors;
+   }
+
+   public List<Class<? extends Annotation>> getAlternativeStereotypes()
+   {
+      return Collections.unmodifiableList(alternativeStereotypes);
+   }
+
+   public List<Class<?>> getAlternativeClasses()
+   {
+      return Collections.unmodifiableList(alternativeClasses);
+   }
+
+   public List<Class<?>> getDecorators()
+   {
+      return Collections.unmodifiableList(decorators);
+   }
+
+   public List<Class<?>> getInterceptors()
+   {
+      return Collections.unmodifiableList(interceptors);
+   }
+}",2010-08-17T13:57:35Z,179
"@@ -1,72 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2008, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,  
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.manager;
-
-import java.lang.annotation.Annotation;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
-/**
- * 
- * @author Nicklas Karlsson
- * 
- */
-public class EnabledClasses
-{
-
-   private final List<Class<? extends Annotation>> alternativeStereotypes;
-   private final List<Class<?>> alternativeClasses;
-   private final List<Class<?>> decorators;
-   private final List<Class<?>> interceptors;
-
-   public EnabledClasses()
-   {
-      this.alternativeClasses = Collections.emptyList();
-      this.alternativeStereotypes = Collections.emptyList();
-      this.decorators = Collections.emptyList();
-      this.interceptors = Collections.emptyList();
-   }
-
-   public EnabledClasses(List<Class<? extends Annotation>> alternativeStereotypes, List<Class<?>> alternativeClasses, List<Class<?>> decorators, List<Class<?>> interceptors)
-   {
-      this.alternativeStereotypes = new ArrayList<Class<? extends Annotation>>(alternativeStereotypes);
-      this.alternativeClasses = new ArrayList<Class<?>>(alternativeClasses);
-      this.decorators = new ArrayList<Class<?>>(decorators);
-      this.interceptors = new ArrayList<Class<?>>(interceptors);
-   }
-
-   public List<Class<? extends Annotation>> getAlternativeStereotypes()
-   {
-      return Collections.unmodifiableList(alternativeStereotypes);
-   }
-
-   public List<Class<?>> getAlternativeClasses()
-   {
-      return Collections.unmodifiableList(alternativeClasses);
-   }
-
-   public List<Class<?>> getDecorators()
-   {
-      return Collections.unmodifiableList(decorators);
-   }
-
-   public List<Class<?>> getInterceptors()
-   {
-      return Collections.unmodifiableList(interceptors);
-   }
-}",2010-08-17T13:57:35Z,180
"@@ -45,7 +45,7 @@ protected boolean matches(Resolvable resolvable, Decorator<?> bean)
    {
       return Reflections.matches(Collections.singleton(bean.getDelegateType()), resolvable.getTypes())
             && Beans.containsAllQualifiers(bean.getDelegateQualifiers(), resolvable.getQualifiers(), getBeanManager())
-            && getBeanManager().getEnabledClasses().getDecorators().contains(bean.getBeanClass());
+            && getBeanManager().getEnabled().getDecorators().contains(bean.getBeanClass());
    }
    
    @Override
@@ -56,7 +56,7 @@ protected Set<Decorator<?>> sortResult(Set<Decorator<?>> matchedDecorators)
          
          public int compare(Decorator<?> o1, Decorator<?> o2)
          {
-            List<Class<?>> enabledDecorators = getBeanManager().getEnabledClasses().getDecorators();
+            List<Class<?>> enabledDecorators = getBeanManager().getEnabled().getDecorators();
             int p1 = enabledDecorators.indexOf(((Decorator<?>) o1).getBeanClass());
             int p2 = enabledDecorators.indexOf(((Decorator<?>) o2).getBeanClass());
             return p1 - p2;",2010-08-17T13:57:35Z,181
"@@ -44,7 +44,7 @@ public TypeSafeInterceptorResolver(BeanManagerImpl manager, Iterable<Interceptor
    @Override
    protected boolean matches(InterceptorResolvable resolvable, Interceptor<?> bean)
    {
-      return bean.intercepts(resolvable.getInterceptionType()) && bean.getInterceptorBindings().size() > 0 && Beans.containsAllInterceptionBindings(bean.getInterceptorBindings(), resolvable.getQualifiers(), getManager()) && getManager().getEnabledClasses().getInterceptors().contains(bean.getBeanClass());
+      return bean.intercepts(resolvable.getInterceptionType()) && bean.getInterceptorBindings().size() > 0 && Beans.containsAllInterceptionBindings(bean.getInterceptorBindings(), resolvable.getQualifiers(), getManager()) && getManager().getEnabled().getInterceptors().contains(bean.getBeanClass());
    }
 
    @Override
@@ -55,8 +55,8 @@ protected Set<Interceptor<?>> sortResult(Set<Interceptor<?>> matchedInterceptors
 
          public int compare(Interceptor<?> o1, Interceptor<?> o2)
          {
-            int p1 = getManager().getEnabledClasses().getInterceptors().indexOf(((InterceptorImpl<?>) o1).getType());
-            int p2 = getManager().getEnabledClasses().getInterceptors().indexOf(((InterceptorImpl<?>) o2).getType());
+            int p1 = getManager().getEnabled().getInterceptors().indexOf(((InterceptorImpl<?>) o1).getType());
+            int p2 = getManager().getEnabled().getInterceptors().indexOf(((InterceptorImpl<?>) o2).getType());
             return p1 - p2;
          }
 ",2010-08-17T13:57:35Z,182
"@@ -92,7 +92,7 @@
 import org.jboss.weld.introspector.WeldParameter;
 import org.jboss.weld.manager.BeanManagerImpl;
 import org.jboss.weld.manager.BeanManagers;
-import org.jboss.weld.manager.EnabledClasses;
+import org.jboss.weld.manager.Enabled;
 import org.jboss.weld.metadata.cache.InterceptorBindingModel;
 import org.jboss.weld.metadata.cache.MergedStereotypes;
 import org.jboss.weld.metadata.cache.MetaAnnotationStore;
@@ -591,7 +591,7 @@ public static <T extends Bean<?>> Set<T> removeDisabledAndSpecializedBeans(Set<T
          Set<T> result = new HashSet<T>();
          for (T bean : beans)
          {
-            if (isBeanEnabled(bean, beanManager.getEnabledClasses()) && !isSpecialized(bean, beans, beanManager))
+            if (isBeanEnabled(bean, beanManager.getEnabled()) && !isSpecialized(bean, beans, beanManager))
             {
                result.add(bean);
             }
@@ -600,19 +600,19 @@ public static <T extends Bean<?>> Set<T> removeDisabledAndSpecializedBeans(Set<T
       }
    }
 
-   public static boolean isBeanEnabled(Bean<?> bean, EnabledClasses enabledClasses)
+   public static boolean isBeanEnabled(Bean<?> bean, Enabled enabled)
    {
       if (bean.isAlternative())
       {
-         if (enabledClasses.getAlternativeClasses().contains(bean.getBeanClass()))
+         if (enabled.getAlternativeClasses().contains(bean.getBeanClass()))
          {
             return true;
          }
          else
          {
             for (Class<? extends Annotation> stereotype : bean.getStereotypes())
             {
-               if (enabledClasses.getAlternativeStereotypes().contains(stereotype))
+               if (enabled.getAlternativeStereotypes().contains(stereotype))
                {
                   return true;
                }
@@ -621,11 +621,11 @@ public static boolean isBeanEnabled(Bean<?> bean, EnabledClasses enabledClasses)
       }
       else if (bean instanceof DecoratorImpl<?>)
       {
-         return enabledClasses.getDecorators().contains(bean.getBeanClass());
+         return enabled.getDecorators().contains(bean.getBeanClass());
       }
       else if (bean instanceof InterceptorImpl<?>)
       {
-         return enabledClasses.getInterceptors().contains(bean.getBeanClass());
+         return enabled.getInterceptors().contains(bean.getBeanClass());
       }
       else
       {",2010-08-17T13:57:35Z,5
"@@ -0,0 +1,102 @@
+/**
+ * 
+ */
+package org.jboss.weld.xml;
+
+import static org.jboss.weld.logging.messages.XmlMessage.CONFIGURATION_ERROR;
+import static org.jboss.weld.logging.messages.XmlMessage.LOAD_ERROR;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.URL;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+
+import org.jboss.weld.exceptions.IllegalArgumentException;
+import org.w3c.dom.Document;
+
+abstract class BeansXmlDocumentLoader
+{
+
+   private final URL beansXml;
+
+   BeansXmlDocumentLoader(URL beansXml)
+   {
+      this.beansXml = beansXml;
+   }
+
+   protected abstract Document loadDocument(InputStream in);
+
+   public Document run()
+   {
+      InputStream is = null;
+      try
+      {
+         is = openStream();
+         return loadDocument(is);
+      }
+      finally
+      {
+         closeStream(is);
+      }
+   }
+
+   private void closeStream(InputStream in)
+   {
+      if (in != null)
+      {
+         try
+         {
+            in.close();
+         }
+         catch (IOException e)
+         {
+            throw new IllegalStateException(""Error closing stream "" + in);
+         }
+      }
+   }
+
+   private InputStream openStream()
+   {
+      if (beansXml == null)
+      {
+         throw new org.jboss.weld.exceptions.IllegalStateException(LOAD_ERROR, ""URL: null"");
+      }
+      try
+      {
+         return beansXml.openStream();
+      }
+      catch (IOException e)
+      {
+         throw new org.jboss.weld.exceptions.IllegalStateException(LOAD_ERROR, e, beansXml.toString());
+      }
+   }
+
+   protected boolean isDocumentEmpty(InputStream in)
+   {
+      try
+      {
+         return in.available() == 0;
+      }
+      catch (IOException e)
+      {
+         throw new IllegalArgumentException(LOAD_ERROR, e, beansXml.toString());
+      }
+   }
+
+   protected DocumentBuilder createDocumentBuilder()
+   {
+      try
+      {
+         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+         factory.setNamespaceAware(true);
+         return factory.newDocumentBuilder();
+      }
+      catch (ParserConfigurationException e)
+      {
+         throw new org.jboss.weld.exceptions.IllegalStateException(CONFIGURATION_ERROR, e);
+      }
+   }
+}
\ No newline at end of file",2010-08-17T13:57:35Z,183
"@@ -16,14 +16,10 @@
  */
 package org.jboss.weld.xml;
 
-import static org.jboss.weld.logging.messages.XmlMessage.CANNOT_LOAD_CLASS;
-
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.List;
 
-import org.jboss.weld.resources.spi.ResourceLoader;
-import org.jboss.weld.resources.spi.ResourceLoadingException;
 import org.jboss.weld.util.dom.NodeListIterable;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
@@ -32,19 +28,20 @@
 /**
  * 
  * @author Nicklas Karlsson
+ * @author Pete Muir
  * 
  */
 class BeansXmlElement
 {
-   private final URL file;
+   
+   private final URL url;
    private final Element element;
    private final String localName;
    private final String namespaceURI;
 
-   BeansXmlElement(URL file, Element element, String localName, String namespaceURI)
+   BeansXmlElement(URL url, Element element, String localName, String namespaceURI)
    {
-      super();
-      this.file = file;
+      this.url = url;
       this.element = element;
       this.localName = localName;
       this.namespaceURI = namespaceURI;
@@ -60,43 +57,27 @@ private static String getClassNameFromElement(Element element)
       return null;
    }
 
-   public <T> List<Class<T>> getClasses(ResourceLoader resourceLoader)
+   public List<String> getClassNames()
    {
-      List<Class<T>> classes = new ArrayList<Class<T>>();
+      List<String> classes = new ArrayList<String>();
       for (Node child : new NodeListIterable(element.getElementsByTagNameNS(namespaceURI, localName)))
       {
          // Unsafe looking cast is actually safe as the NodeList only contains Elements
          String className = getClassNameFromElement((Element) child);
-         if (className == null)
-         {
-            continue;
-         }
-         try
+         if (className != null)
          {
-            classes.add((Class<T>) resourceLoader.classForName(className));
-         }
-         catch (ResourceLoadingException e)
-         {
-            throw new WeldXmlException(CANNOT_LOAD_CLASS, className, file);
+            classes.add(className);
          }
       }
       return classes;
    }
 
-   public URL getFile()
-   {
-      return file;
-   }
-
-   public Element getElement()
-   {
-      return element;
-   }
-
    @Override
    public String toString()
    {
-      return ""File: "" + getFile() + ""; Node: "" + getElement();
+      return element + "" in "" + url;
    }
+   
+   
 
 }
\ No newline at end of file",2010-08-17T13:57:35Z,184
"@@ -0,0 +1,43 @@
+package org.jboss.weld.xml;
+
+import java.util.List;
+
+import org.jboss.weld.bootstrap.spi.BeansXml;
+
+public class BeansXmlImpl implements BeansXml
+{
+
+   private final List<String> enabledAlternativeClasses;
+   private final List<String> enabledAlternativeStereotypes;
+   private final List<String> enabledDecorators;
+   private final List<String> enabledInterceptors;
+   
+   public BeansXmlImpl(List<String> enabledAlternativeClasses, List<String> enabledAlternativeStereotypes, List<String> enabledDecorators, List<String> enabledInterceptors)
+   {
+      this.enabledAlternativeClasses = enabledAlternativeClasses;
+      this.enabledAlternativeStereotypes = enabledAlternativeStereotypes;
+      this.enabledDecorators = enabledDecorators;
+      this.enabledInterceptors = enabledInterceptors;
+   }
+
+   public List<String> getEnabledAlternativeClasses()
+   {
+      return enabledAlternativeClasses;
+   }
+
+   public List<String> getEnabledAlternativeStereotypes()
+   {
+      return enabledAlternativeStereotypes;
+   }
+
+   public List<String> getEnabledDecorators()
+   {
+      return enabledDecorators;
+   }
+
+   public List<String> getEnabledInterceptors()
+   {
+      return enabledInterceptors;
+   }
+
+}",2010-08-17T13:57:35Z,185
"@@ -16,24 +16,26 @@
  */
 package org.jboss.weld.xml;
 
-import static org.jboss.weld.logging.messages.XmlMessage.CONFIGURATION_ERROR;
+import static java.util.Collections.emptyList;
+import static org.jboss.weld.bootstrap.spi.BeansXml.EMPTY_BEANS_XML;
 import static org.jboss.weld.logging.messages.XmlMessage.LOAD_ERROR;
+import static org.jboss.weld.logging.messages.XmlMessage.MULTIPLE_ALTERNATIVES;
+import static org.jboss.weld.logging.messages.XmlMessage.MULTIPLE_DECORATORS;
+import static org.jboss.weld.logging.messages.XmlMessage.MULTIPLE_INTERCEPTORS;
 import static org.jboss.weld.logging.messages.XmlMessage.PARSING_ERROR;
 
 import java.io.IOException;
 import java.io.InputStream;
-import java.lang.annotation.Annotation;
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
-
-import org.jboss.weld.manager.EnabledClasses;
-import org.jboss.weld.resources.spi.ResourceLoader;
+import org.jboss.weld.bootstrap.spi.BeansXml;
+import org.jboss.weld.exceptions.DefinitionException;
+import org.jboss.weld.logging.messages.XmlMessage;
 import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.NodeList;
 import org.xml.sax.SAXException;
 
 /**
@@ -44,137 +46,97 @@
  */
 public class BeansXmlParser
 {
-   
-   public static final String NAMESPACE_URI = ""http://java.sun.com/xml/ns/javaee"";
-   
-   private final Iterable<URL> beansXmls;
-   private final ResourceLoader resourceLoader;
 
-   public BeansXmlParser(ResourceLoader resourceLoader, Iterable<URL> beansXmls)
-   {
-      this.beansXmls = beansXmls;
-      this.resourceLoader = resourceLoader;
-   }
+   public static final String NAMESPACE_URI = ""http://java.sun.com/xml/ns/javaee"";
 
-   public EnabledClasses parse()
+   public BeansXml parse(final URL beansXml)
    {
-      DocumentBuilder documentBuilder = createDocumentBuilder();
-      MergedElements mergedElements = new MergedElements();
-      for (URL beansXml : beansXmls)
+      Document document = new BeansXmlDocumentLoader(beansXml)
       {
-         if (!isBeansXmlOK(beansXml))
+
+         @Override
+         protected Document loadDocument(InputStream in)
          {
-            continue;
+            if (isDocumentEmpty(in))
+            {
+               return null;
+            }
+            try
+            {
+               Document document = createDocumentBuilder().parse(in);
+               document.normalize();
+               return document;
+            }
+            catch (SAXException e)
+            {
+               throw new org.jboss.weld.exceptions.IllegalStateException(PARSING_ERROR, e, beansXml.toString());
+            }
+            catch (IOException e)
+            {
+               throw new org.jboss.weld.exceptions.IllegalStateException(LOAD_ERROR, e, beansXml.toString());
+            }
          }
-         Document document = loadDocument(documentBuilder, beansXml);
+      }.run();
+
+      if (document == null)
+      {
+         return EMPTY_BEANS_XML;
+      }
+      else
+      {
          if (document.getDocumentElement().getNamespaceURI() == null)
          {
-            mergedElements.merge(beansXml, document, ""*"");
+            return parseDocument(beansXml, document.getDocumentElement(), ""*"");
          }
          else
          {
-            mergedElements.merge(beansXml, document, NAMESPACE_URI);
+            return parseDocument(beansXml, document.getDocumentElement(), NAMESPACE_URI);
          }
-         
       }
-      List<Class<?>> enabledAlternativeClasses = new ArrayList<Class<?>>();
-      List<Class<? extends Annotation>> enabledAlternativeStereotypes = new ArrayList<Class<? extends Annotation>>();
-      List<Class<?>> enabledDecoratorClasses = new ArrayList<Class<?>>();
-      List<Class<?>> enabledInterceptorClasses = new ArrayList<Class<?>>();
-      for (BeansXmlElement element : mergedElements.getAlternativeClassElements())
-      {
-         enabledAlternativeClasses.addAll(element.getClasses(resourceLoader));
-      }
-      for (BeansXmlElement element : mergedElements.getAlternativeStereotypeElements())
-      {
-         enabledAlternativeStereotypes.addAll(element.<Annotation>getClasses(resourceLoader));
-      }
-      for (BeansXmlElement element : mergedElements.getDecoratorsElements())
-      {
-         enabledDecoratorClasses.addAll(element.getClasses(resourceLoader));
-      }
-      for (BeansXmlElement element : mergedElements.getInterceptorsElements())
-      {
-         enabledInterceptorClasses.addAll(element.getClasses(resourceLoader));
-      }
-      return new EnabledClasses(enabledAlternativeStereotypes, enabledAlternativeClasses, enabledDecoratorClasses, enabledInterceptorClasses);
    }
 
-   private Document loadDocument(DocumentBuilder documentBuilder, URL beansXml)
+   private BeansXml parseDocument(URL url, Element documentElement, String namespaceURI)
    {
-      Document document;
-      InputStream in = null;
-      try
-      {
-         in = beansXml.openStream();
-         document = documentBuilder.parse(in);
-         document.normalize();
-      }
-      catch (SAXException e)
-      {
-         throw new WeldXmlException(PARSING_ERROR, e, beansXml.toString());
-      }
-      catch (IOException e)
-      {
-         throw new WeldXmlException(LOAD_ERROR, e, beansXml.toString());
-      }
-      finally
-      {
-         closeStream(in);
-      }
-      return document;
-   }
-
-   private void closeStream(InputStream in)
-   {
-      if (in == null)
-      {
-         return;
-      }
-      try
-      {
-         in.close();
-      }
-      catch (IOException e)
-      {
-         e.printStackTrace();
-      }
+      return new BeansXmlImpl(
+            findClassNames(url, documentElement, namespaceURI, ""alternatives"", ""class"", MULTIPLE_ALTERNATIVES),
+            findClassNames(url, documentElement, namespaceURI, ""alternatives"", ""stereotype"", MULTIPLE_ALTERNATIVES),
+            findClassNames(url, documentElement, namespaceURI, ""decorators"", ""class"", MULTIPLE_DECORATORS),
+            findClassNames(url, documentElement, namespaceURI, ""interceptors"", ""class"", MULTIPLE_INTERCEPTORS)
+         ); 
    }
-
-   private boolean isBeansXmlOK(URL beansXml)
+   
+   private static List<String> findClassNames(URL url, Element beans, String namespaceURI, String localGroupName, String localName, XmlMessage multipleViolationMessage)
    {
-      if (beansXml == null)
+      NodeList nodeList = beans.getElementsByTagNameNS(namespaceURI, localGroupName);
+      if (nodeList.getLength() > 1)
       {
-         throw new WeldXmlException(LOAD_ERROR, ""URL: null"");
+         throw new DefinitionException(multipleViolationMessage);
       }
-      InputStream in = null;
-      try
+      else if (nodeList.getLength() == 1)
       {
-         in = beansXml.openStream();
-         return in.available() > 0;
+         return new BeansXmlElement(url, (Element) nodeList.item(0), localName, namespaceURI).getClassNames();
       }
-      catch (IOException e)
+      else
       {
-         throw new WeldXmlException(LOAD_ERROR, e, beansXml.toString());
-      }
-      finally
-      {
-         closeStream(in);
+         return emptyList();
       }
    }
 
-   private DocumentBuilder createDocumentBuilder()
+   public BeansXml parse(Iterable<URL> urls)
    {
-      try
-      {
-         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-         factory.setNamespaceAware(true);
-         return factory.newDocumentBuilder();
-      }
-      catch (ParserConfigurationException e)
-      {
-         throw new WeldXmlException(CONFIGURATION_ERROR, e);
-      }
+      List<String> alternativeStereotypes = new ArrayList<String>();
+      List<String> alternativeClasses = new ArrayList<String>();
+      List<String> decorators = new ArrayList<String>();
+      List<String> interceptors = new ArrayList<String>();
+      for (URL url : urls)
+      {
+         BeansXml beansXml = parse(url);
+         alternativeStereotypes.addAll(beansXml.getEnabledAlternativeStereotypes());
+         alternativeClasses.addAll(beansXml.getEnabledAlternativeClasses());
+         decorators.addAll(beansXml.getEnabledDecorators());
+         interceptors.addAll(beansXml.getEnabledInterceptors());
+      }
+      return new BeansXmlImpl(alternativeClasses, alternativeStereotypes, decorators, interceptors);
    }
 
 }",2010-08-17T13:57:35Z,186
"@@ -1,98 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2008, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,  
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jboss.weld.xml;
-
-import static org.jboss.weld.logging.messages.XmlMessage.MULTIPLE_ALTERNATIVES;
-import static org.jboss.weld.logging.messages.XmlMessage.MULTIPLE_DECORATORS;
-import static org.jboss.weld.logging.messages.XmlMessage.MULTIPLE_INTERCEPTORS;
-
-import java.net.URL;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
-import org.jboss.weld.logging.messages.XmlMessage;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.NodeList;
-
-/**
- * 
- * @author Nicklas Karlsson
- * 
- */
-class MergedElements
-{
-   private List<BeansXmlElement> alternativeClassElements;
-   private List<BeansXmlElement> alternativeStereotypeElements;
-   private List<BeansXmlElement> decoratorsElements;
-   private List<BeansXmlElement> interceptorsElements;
-
-   public MergedElements()
-   {
-      this.alternativeClassElements = new ArrayList<BeansXmlElement>();
-      this.alternativeStereotypeElements = new ArrayList<BeansXmlElement>();
-      this.decoratorsElements = new ArrayList<BeansXmlElement>();
-      this.interceptorsElements = new ArrayList<BeansXmlElement>();
-   }
-
-   public void merge(URL url, Document beansXmlDocument, String namespaceURI)
-   {
-      Element documentElement = beansXmlDocument.getDocumentElement();
-      alternativeClassElements.addAll(findNamedElement(url, documentElement, namespaceURI, ""alternatives"", ""class"", MULTIPLE_ALTERNATIVES));
-      alternativeStereotypeElements.addAll(findNamedElement(url, documentElement, namespaceURI, ""alternatives"", ""stereotype"", MULTIPLE_ALTERNATIVES));
-      interceptorsElements.addAll(findNamedElement(url, documentElement, namespaceURI, ""interceptors"", ""class"", MULTIPLE_INTERCEPTORS));
-      decoratorsElements.addAll(findNamedElement(url, documentElement, namespaceURI, ""decorators"", ""class"", MULTIPLE_DECORATORS));
-   }
-
-   private List<BeansXmlElement> findNamedElement(URL url, Element beans, String namespaceURI, String localGroupName, String localName, XmlMessage multipleViolationMessage)
-   {
-      List<BeansXmlElement> elements = new ArrayList<BeansXmlElement>();
-      NodeList nodeList = beans.getElementsByTagNameNS(namespaceURI, localGroupName);
-      if (nodeList.getLength() > 1)
-      {
-         throw new WeldXmlException(multipleViolationMessage);
-      }
-      else if (nodeList.getLength() == 1)
-      {
-         BeansXmlElement element = new BeansXmlElement(url, (Element) nodeList.item(0), localName, namespaceURI);
-         elements.add(element);
-      }
-      return elements;
-   }
-
-   public List<BeansXmlElement> getAlternativeClassElements()
-   {
-      return Collections.unmodifiableList(alternativeClassElements);
-   }
-
-   public List<BeansXmlElement> getAlternativeStereotypeElements()
-   {
-      return Collections.unmodifiableList(alternativeStereotypeElements);
-   }
-
-   public List<BeansXmlElement> getDecoratorsElements()
-   {
-      return Collections.unmodifiableList(decoratorsElements);
-   }
-
-   public List<BeansXmlElement> getInterceptorsElements()
-   {
-      return Collections.unmodifiableList(interceptorsElements);
-   }
-
-}",2010-08-17T13:57:35Z,187
"@@ -1,40 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2008, Red Hat, Inc., and individual contributors
- * by the @authors tag. See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,  
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.jboss.weld.xml;
-
-/**
- * Used for exceptions from the Weld XML parser and provides localization
- * support.
- * 
- * @author David Allen
- */
-public class WeldXmlException extends org.jboss.weld.exceptions.InjectionException
-{
-
-   private static final long serialVersionUID = 2L;
-
-   public WeldXmlException(Throwable throwable)
-   {
-      super(throwable);
-   }
-
-   public <E extends Enum<?>> WeldXmlException(E key, Object... args)
-   {
-      super(key, args);
-   }
-}",2010-08-17T13:57:35Z,188
"@@ -544,7 +544,7 @@ public <T> Set<ObserverMethod<?, T>> resolveObserverMethods(T event, Annotation.
       bindingAnnotations.add(new AnyLiteral());
       checkEventType(clazz);
       Set<ObserverMethod<?, T>> observers = new HashSet<ObserverMethod<?, T>>();
-      Set<ObserverMethod<?,?>> eventObservers = observerResolver.resolve(ResolvableFactory.of(new Reflections.HierarchyDiscovery(clazz).getFlattenedTypes(),  bindingAnnotations));
+      Set<ObserverMethod<?,?>> eventObservers = observerResolver.resolve(ResolvableFactory.of(new Reflections.HierarchyDiscovery(clazz).getFlattenedTypes(),  bindingAnnotations, null));
       for (ObserverMethod<?,?> observer : eventObservers)
       {
          observers.add((ObserverMethod<?, T>) observer);
@@ -785,7 +785,7 @@ public void addContext(Context context)
 =    */
    public void addObserver(ObserverMethod<?, ?> observer)
    {
-      checkEventType(observer.getObservedType());
+      //checkEventType(observer.getObservedType());
       observers.add(observer);
       log.trace(""Added observer "" + observer);
       for (BeanManagerImpl childActivity : childActivities)
@@ -993,14 +993,14 @@ public List<Decorator<?>> resolveDecorators(Set<Type> types, Annotation... bindi
    {
       checkResolveDecoratorsArguments(types, Arrays.asList(bindings));
       // TODO Fix this cast and make the resolver return a list
-      return new ArrayList<Decorator<?>>(decoratorResolver.resolve(ResolvableFactory.of(types, bindings)));
+      return new ArrayList<Decorator<?>>(decoratorResolver.resolve(ResolvableFactory.of(types, null, bindings)));
    }
    
    public List<Decorator<?>> resolveDecorators(Set<Type> types, Set<Annotation> bindings)
    {
       checkResolveDecoratorsArguments(types, bindings);
       // TODO Fix this cast and make the resolver return a list
-      return new ArrayList<Decorator<?>>(decoratorResolver.resolve(ResolvableFactory.of(types, bindings)));
+      return new ArrayList<Decorator<?>>(decoratorResolver.resolve(ResolvableFactory.of(types, bindings, null)));
    }
 
    private void checkResolveDecoratorsArguments(Set<Type> types, Collection<Annotation> bindings)",2009-08-14T00:24:39Z,189
"@@ -163,7 +163,7 @@ else if (getDeclaringBean() instanceof EnterpriseBean<?>)
     */
    protected void initDisposalMethod(BeanDeployerEnvironment environment)
    {
-      Set<DisposalMethodBean<T>> disposalBeans = environment.resolveDisposalBeans(getAnnotatedItem());
+      Set<DisposalMethodBean<?>> disposalBeans = environment.resolveDisposalBeans(getTypes(), getBindings(), getDeclaringBean());
 
       if (disposalBeans.size() == 1)
       {",2009-08-14T00:24:39Z,127
"@@ -16,6 +16,8 @@
  */
 package org.jboss.webbeans.bootstrap;
 
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -37,39 +39,35 @@
 import org.jboss.webbeans.bean.standard.AbstractStandardBean;
 import org.jboss.webbeans.bean.standard.ExtensionBean;
 import org.jboss.webbeans.ejb.EjbDescriptorCache;
-import org.jboss.webbeans.introspector.WBAnnotated;
 import org.jboss.webbeans.introspector.WBClass;
 import org.jboss.webbeans.introspector.WBMethod;
 import org.jboss.webbeans.resolution.ResolvableFactory;
-import org.jboss.webbeans.resolution.TypeSafeBeanResolver;
-import org.jboss.webbeans.resolution.TypeSafeResolver;
+import org.jboss.webbeans.resolution.TypeSafeDisposerResolver;
 
 public class BeanDeployerEnvironment
 {
 
    private final Map<WBClass<?>, AbstractClassBean<?>> classBeanMap;
    private final Map<WBMethod<?, ?>, ProducerMethodBean<?>> producerMethodBeanMap;
-   private final Map<WBMethod<?, ?>, DisposalMethodBean<?>> disposalMethodBeanMap;
    private final Set<RIBean<?>> beans;
    private final Set<ObserverMethod<?, ?>> observers;
    private final List<DisposalMethodBean<?>> allDisposalBeans;
    private final Set<DisposalMethodBean<?>> resolvedDisposalBeans;
    private final Set<DecoratorBean<?>> decorators;
    private final EjbDescriptorCache ejbDescriptors;
-   private final TypeSafeResolver<DisposalMethodBean<?>> disposalMethodResolver;
+   private final TypeSafeDisposerResolver disposalMethodResolver;
 
    public BeanDeployerEnvironment(EjbDescriptorCache ejbDescriptors, BeanManagerImpl manager)
    {
       this.classBeanMap = new HashMap<WBClass<?>, AbstractClassBean<?>>();
       this.producerMethodBeanMap = new HashMap<WBMethod<?, ?>, ProducerMethodBean<?>>();
-      this.disposalMethodBeanMap = new HashMap<WBMethod<?, ?>, DisposalMethodBean<?>>();
       this.allDisposalBeans = new ArrayList<DisposalMethodBean<?>>();
       this.resolvedDisposalBeans = new HashSet<DisposalMethodBean<?>>();
       this.beans = new HashSet<RIBean<?>>();
       this.decorators = new HashSet<DecoratorBean<?>>();
       this.observers = new HashSet<ObserverMethod<?, ?>>();
       this.ejbDescriptors = ejbDescriptors;
-      this.disposalMethodResolver = new TypeSafeBeanResolver<DisposalMethodBean<?>>(manager, allDisposalBeans);
+      this.disposalMethodResolver = new TypeSafeDisposerResolver(manager, allDisposalBeans);
    }
 
    public ProducerMethodBean<?> getProducerMethod(WBMethod<?, ?> method)
@@ -85,21 +83,6 @@ public ProducerMethodBean<?> getProducerMethod(WBMethod<?, ?> method)
          return bean;
       }
    }
-
-   
-   public DisposalMethodBean<?> getDisposalMethod(WBMethod<?, ?> method)
-   {
-      if (!producerMethodBeanMap.containsKey(method))
-      {
-         return null;
-      }
-      else
-      {
-         DisposalMethodBean<?> bean = disposalMethodBeanMap.get(method);
-         bean.initialize(this);
-         return bean;
-      }
-   }
    
    public AbstractClassBean<?> getClassBean(WBClass<?> clazz)
    {
@@ -153,7 +136,6 @@ public void addBean(DecoratorBean<?> bean)
    public void addBean(DisposalMethodBean<?> bean)
    {
       allDisposalBeans.add(bean);
-      disposalMethodBeanMap.put(bean.getAnnotatedItem(), bean);
    }
    
    public void addObserver(ObserverMethod<?, ?> observer)
@@ -198,17 +180,11 @@ public EjbDescriptorCache getEjbDescriptors()
     * @param bindings The binding types to match
     * @return The set of matching disposal methods
     */
-   public <T> Set<DisposalMethodBean<T>> resolveDisposalBeans(WBAnnotated<T, ?> annotatedItem)
+   public Set<DisposalMethodBean<?>> resolveDisposalBeans(Set<Type> types, Set<Annotation> bindings, AbstractClassBean<?> declaringBean)
    {
-      // Correct?
-      Set<DisposalMethodBean<?>> beans = disposalMethodResolver.resolve(ResolvableFactory.of(annotatedItem));
-      Set<DisposalMethodBean<T>> disposalBeans = new HashSet<DisposalMethodBean<T>>();
-      for (DisposalMethodBean<?> bean : beans)
-      {
-         disposalBeans.add((DisposalMethodBean<T>) bean);
-      }
-      resolvedDisposalBeans.addAll(disposalBeans);
-      return Collections.unmodifiableSet(disposalBeans);
+      Set<DisposalMethodBean<?>> beans = disposalMethodResolver.resolve(ResolvableFactory.of(types, bindings, declaringBean));
+      resolvedDisposalBeans.addAll(beans);
+      return Collections.unmodifiableSet(beans);
    }
 
 }",2009-08-14T00:24:39Z,190
"@@ -19,7 +19,6 @@
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import java.lang.reflect.TypeVariable;
-import java.lang.reflect.WildcardType;
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.List;
@@ -112,10 +111,10 @@ private void checkObserverMethod()
                {
                   throw new DefinitionException(""Cannot use a type variable "" + type + "" in an parameterized type "" + toString());
                }
-               else if (type instanceof WildcardType)
-               {
-                  throw new DefinitionException(""Cannot use a wildcard variable "" + type + "" in an parameterized type "" + toString());
-               }
+//               else if (type instanceof WildcardType)
+//               {
+//                  throw new DefinitionException(""Cannot use a wildcard variable "" + type + "" in an parameterized type "" + toString());
+//               }
             }
          }
       }",2009-08-14T00:24:39Z,191
"@@ -20,6 +20,8 @@
 import java.lang.reflect.Type;
 import java.util.Set;
 
+import org.jboss.webbeans.bean.AbstractClassBean;
+
 public abstract class ForwardingResolvable implements Resolvable
 {
    
@@ -54,6 +56,11 @@ public Class<?> getJavaClass()
    {
       return delegate().getJavaClass();
    }
+   
+   public AbstractClassBean<?> getDeclaringBean()
+   {
+      return delegate().getDeclaringBean();
+   }
 
    @Override
    public boolean equals(Object obj)",2009-08-14T00:24:39Z,192
"@@ -20,6 +20,8 @@
 import java.lang.reflect.Type;
 import java.util.Set;
 
+import org.jboss.webbeans.bean.AbstractClassBean;
+
 /**
  * Something that is resovable by the resolver. A resolvable is defined by it's
  * bindings and type closure
@@ -78,5 +80,11 @@ public interface Resolvable
     * @return the java class
     */
    public Class<?> getJavaClass();
+   
+   /**
+    * Get the declaring the injection point, or null if there is none
+    * @return
+    */
+   public AbstractClassBean<?> getDeclaringBean();
 
 }",2009-08-14T00:24:39Z,193
"@@ -24,6 +24,7 @@
 import java.util.Map;
 import java.util.Set;
 
+import org.jboss.webbeans.bean.AbstractClassBean;
 import org.jboss.webbeans.introspector.WBAnnotated;
 import org.jboss.webbeans.literal.CurrentLiteral;
 import org.jboss.webbeans.util.Reflections;
@@ -41,18 +42,18 @@ public static Resolvable of(WBAnnotated<?, ?> element)
       {
          Set<Type> types = new HashSet<Type>();
          types.add(element.getBaseType());
-         return new ResolvableImpl(element.getBindings(), types);
+         return new ResolvableImpl(element.getBindings(), types, null);
       }
    }
 
-   public static Resolvable of(Set<Type> typeClosure, Set<Annotation> bindings)
+   public static Resolvable of(Set<Type> typeClosure, Set<Annotation> bindings, AbstractClassBean<?> declaringBean)
    {
-      return new ResolvableImpl(bindings, typeClosure);
+      return new ResolvableImpl(bindings, typeClosure, declaringBean);
    }
 
-   public static Resolvable of(Set<Type> typeClosure, Annotation... bindings)
+   public static Resolvable of(Set<Type> typeClosure, AbstractClassBean<?> declaringBean, Annotation... bindings)
    {
-      return new ResolvableImpl(new HashSet<Annotation>(Arrays.asList(bindings)), typeClosure);
+      return new ResolvableImpl(new HashSet<Annotation>(Arrays.asList(bindings)), typeClosure, declaringBean);
    }
 
    private ResolvableFactory() {}
@@ -63,8 +64,9 @@ private static class ResolvableImpl implements Resolvable
       private final Set<Annotation> bindings;
       private final Map<Class<? extends Annotation>, Annotation> annotations;
       private final Set<Type> typeClosure;
+      private final AbstractClassBean<?> declaringBean;
 
-      public ResolvableImpl(Set<Annotation> bindings, Set<Type> typeClosure)
+      public ResolvableImpl(Set<Annotation> bindings, Set<Type> typeClosure, AbstractClassBean<?> declaringBean)
       {
          this.bindings = bindings;
          if (bindings.size() == 0)
@@ -77,6 +79,7 @@ public ResolvableImpl(Set<Annotation> bindings, Set<Type> typeClosure)
          {
             annotations.put(annotation.annotationType(), annotation);
          }
+         this.declaringBean = declaringBean;
       }
 
       public Set<Annotation> getBindings()
@@ -109,6 +112,11 @@ public Class<?> getJavaClass()
          // No underlying java class
          return null;
       }
+      
+      public AbstractClassBean<?> getDeclaringBean()
+      {
+         return declaringBean;
+      }
 
       @Override
       public String toString()",2009-08-14T00:24:39Z,193
"@@ -31,6 +31,7 @@
 import javax.enterprise.inject.spi.InjectionPoint;
 
 import org.jboss.webbeans.BeanManagerImpl;
+import org.jboss.webbeans.bean.AbstractClassBean;
 import org.jboss.webbeans.injection.WBInjectionPoint;
 import org.jboss.webbeans.introspector.AnnotationStore;
 import org.jboss.webbeans.introspector.WBAnnotated;
@@ -196,6 +197,11 @@ public Set<Type> getTypeClosure()
    {
       return typeClosure;
    }
+   
+   public AbstractClassBean<?> getDeclaringBean()
+   {
+      return null;
+   }
 
    @Override
    public Type getBaseType()",2009-08-14T00:24:39Z,193
"@@ -0,0 +1,74 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2008, Red Hat Middleware LLC, and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,  
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.webbeans.resolution;
+
+import java.util.Collections;
+import java.util.Set;
+
+import org.jboss.webbeans.BeanManagerImpl;
+import org.jboss.webbeans.bean.DisposalMethodBean;
+import org.jboss.webbeans.util.Beans;
+import org.jboss.webbeans.util.Reflections;
+
+/**
+ * @author pmuir
+ *
+ */
+public class TypeSafeDisposerResolver extends TypeSafeResolver<DisposalMethodBean<?>>
+{
+
+   private final BeanManagerImpl manager;
+
+   public TypeSafeDisposerResolver(BeanManagerImpl manager, Iterable<DisposalMethodBean<?>> disposers)
+   {
+      super(disposers);
+      this.manager = manager;
+   }
+
+   @Override
+   protected boolean matches(Resolvable resolvable, DisposalMethodBean<?> disposer)
+   {
+         return resolvable.getDeclaringBean().equals(disposer.getDeclaringBean()) && Reflections.isAssignableFrom(disposer.getType(), resolvable.getTypeClosure()) && Beans.containsAllBindings(disposer.getBindings(), resolvable.getBindings(), manager);
+   }
+   
+   /**
+    * @return the manager
+    */
+   public BeanManagerImpl getManager()
+   {
+      return manager;
+   }
+
+   @Override
+   protected Set<DisposalMethodBean<?>> filterResult(Set<DisposalMethodBean<?>> matched)
+   {
+      return matched;
+   }
+
+   @Override
+   protected Iterable<ResolvableTransformer> getTransformers()
+   {
+      return Collections.emptySet();
+   }
+
+   @Override
+   protected Set<DisposalMethodBean<?>> sortResult(Set<DisposalMethodBean<?>> matched)
+   {
+      return matched;
+   }
+
+}",2009-08-14T00:24:39Z,194
"@@ -0,0 +1,27 @@
+package org.jboss.webbeans.test.unit.implementation.producer.method;
+
+import javax.enterprise.context.spi.CreationalContext;
+import javax.enterprise.inject.spi.Bean;
+
+import org.jboss.testharness.impl.packaging.Artifact;
+import org.jboss.webbeans.test.AbstractWebBeansTest;
+import org.testng.annotations.Test;
+
+@Artifact
+public class DisposalMethodOnOtherBeanNotResolvedTest extends AbstractWebBeansTest
+{
+   @Test
+   public void test()
+   {
+      FooDisposer.reset();
+      FooProducer.reset();
+      Bean<Foo> bean = getBean(Foo.class);
+      CreationalContext<Foo> ctx = getCurrentManager().createCreationalContext(bean);
+      Foo instance = bean.create(ctx);
+      assert instance.getBlah().equals(""foo!"");
+      bean.destroy(instance, ctx);
+      assert !FooDisposer.isDisposed();
+      assert FooProducer.isDisposed();
+   }
+
+}",2009-08-14T00:24:39Z,195
"@@ -0,0 +1,41 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2008, Red Hat Middleware LLC, and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,  
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.webbeans.test.unit.implementation.producer.method;
+
+/**
+ * @author pmuir
+ *
+ */
+public class Foo
+{
+   
+   private final String blah;
+   
+   public Foo(String blah)
+   {
+      this.blah = blah;
+   }
+
+   /**
+    * @return the blah
+    */
+   public String getBlah()
+   {
+      return blah;
+   }
+
+}",2009-08-14T00:24:39Z,196
"@@ -0,0 +1,56 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2008, Red Hat Middleware LLC, and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,  
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.webbeans.test.unit.implementation.producer.method;
+
+import javax.enterprise.inject.Any;
+import javax.enterprise.inject.Disposes;
+import javax.enterprise.inject.Produces;
+
+/**
+ * @author pmuir
+ *
+ */
+public class FooDisposer
+{
+
+   private static boolean disposed;
+   
+   public static void reset()
+   {
+      disposed = false;
+   }
+   
+   void disposeFoo(@Disposes @Any Foo foo)
+   {
+      disposed = true;
+   }
+   
+   /**
+    * @return the disposed
+    */
+   public static boolean isDisposed()
+   {
+      return disposed;
+   }
+   
+   @Produces @Important
+   public Foo getFoo()
+   {
+      return new Foo(""bar!"");
+   }
+   
+}",2009-08-14T00:24:39Z,197
"@@ -0,0 +1,55 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2008, Red Hat Middleware LLC, and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,  
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.webbeans.test.unit.implementation.producer.method;
+
+import javax.enterprise.inject.Current;
+import javax.enterprise.inject.Disposes;
+import javax.enterprise.inject.Produces;
+
+/**
+ * @author pmuir
+ *
+ */
+public class FooProducer
+{
+
+   @Produces Foo getFoo()
+   {
+      return new Foo(""foo!"");
+   }
+   
+   private static boolean disposed;
+   
+   public static void reset()
+   {
+      disposed = false;
+   }
+   
+   public void disposeFoo(@Disposes @Current Foo foo)
+   {
+      disposed = true;
+   }
+   
+   /**
+    * @return the disposed
+    */
+   public static boolean isDisposed()
+   {
+      return disposed;
+   }
+   
+}",2009-08-14T00:24:39Z,198
"@@ -16,6 +16,8 @@
  */
 package org.jboss.weld.bean.builtin;
 
+import static org.jboss.weld.ContainerState.INITIALIZED;
+import static org.jboss.weld.ContainerState.VALIDATED;
 import static org.jboss.weld.logging.messages.BeanManagerMessage.METHOD_NOT_AVAILABLE_DURING_INITIALIZATION;
 
 import java.io.ObjectStreamException;
@@ -63,61 +65,61 @@ public BeanManagerImpl delegate() {
 
     @Override
     public Object getReference(Bean<?> bean, Type beanType, CreationalContext<?> ctx) {
-        checkContainerInitialized(""getReference()"");
+        checkContainerValidated(""getReference()"");
         return super.getReference(bean, beanType, ctx);
     }
 
     @Override
     public Object getInjectableReference(InjectionPoint ij, CreationalContext<?> ctx) {
-        checkContainerInitialized(""getInjectableReference()"");
+        checkContainerValidated(""getInjectableReference()"");
         return super.getInjectableReference(ij, ctx);
     }
 
     @Override
     public Set<Bean<?>> getBeans(Type beanType, Annotation... qualifiers) {
-        checkContainerInitialized(""getBeans()"");
+        checkContainerValidated(""getBeans()"");
         return super.getBeans(beanType, qualifiers);
     }
 
     @Override
     public Set<Bean<?>> getBeans(String name) {
-        checkContainerInitialized(""getBeans()"");
+        checkContainerValidated(""getBeans()"");
         return super.getBeans(name);
     }
 
     @Override
     public Bean<?> getPassivationCapableBean(String id) {
-        checkContainerInitialized(""getPassivationCapableBean()"");
+        checkContainerValidated(""getPassivationCapableBean()"");
         return super.getPassivationCapableBean(id);
     }
 
     @Override
     public <X> Bean<? extends X> resolve(Set<Bean<? extends X>> beans) {
-        checkContainerInitialized(""resolve()"");
+        checkContainerValidated(""resolve()"");
         return super.resolve(beans);
     }
 
     @Override
     public void validate(InjectionPoint injectionPoint) {
-        checkContainerInitialized(""validate()"", ContainerState.VALIDATED, ContainerState.INITIALIZED);
+        checkContainerValidated(""validate()"");
         super.validate(injectionPoint);
     }
 
     @Override
     public <T> Set<ObserverMethod<? super T>> resolveObserverMethods(T event, Annotation... qualifiers) {
-        checkContainerInitialized(""resolveObserverMethods()"");
+        checkContainerValidated(""resolveObserverMethods()"");
         return super.resolveObserverMethods(event, qualifiers);
     }
 
     @Override
     public List<Decorator<?>> resolveDecorators(Set<Type> types, Annotation... qualifiers) {
-        checkContainerInitialized(""resolveDecorators()"");
+        checkContainerValidated(""resolveDecorators()"");
         return super.resolveDecorators(types, qualifiers);
     }
 
     @Override
     public List<Interceptor<?>> resolveInterceptors(InterceptionType type, Annotation... interceptorBindings) {
-        checkContainerInitialized(""resolveInterceptors()"");
+        checkContainerValidated(""resolveInterceptors()"");
         return super.resolveInterceptors(type, interceptorBindings);
     }
 
@@ -126,29 +128,19 @@ protected Object readResolve() throws ObjectStreamException {
     }
 
     /**
-     * Verifies that the container has been initialized. If no {@link ContainerState} arguments are provided this method
-     * verifies that the container is in the INITIALIZED state. If the arguments are provided, this method verifies that the
-     * container is in one of the states. Otherwise, {@link IllegalStateException} is thrown.
+     * Verifies that the container has been validated. If it hasn't been, an {@link IllegalStateException} is thrown.
      *
      * @param methodName
      * @throws IllegalStateException If the application initialization is not finished yet
      */
-    private void checkContainerInitialized(String methodName, ContainerState... allowedStates) {
+    private void checkContainerValidated(String methodName) {
         if (this.container == null) {
             this.container = Container.instance();
         }
-        if (allowedStates == null || allowedStates.length == 0) {
-            if (ContainerState.INITIALIZED.equals(container.getState())) {
-                return;
-            }
-        } else {
-            for (ContainerState state : allowedStates) {
-                if (container.getState().equals(state)) {
-                    return;
-                }
-            }
+        ContainerState state = container.getState();
+        if (!INITIALIZED.equals(state) && !VALIDATED.equals(state)) {
+            throw new IllegalStateException(METHOD_NOT_AVAILABLE_DURING_INITIALIZATION, methodName);
         }
-        throw new IllegalStateException(METHOD_NOT_AVAILABLE_DURING_INITIALIZATION, methodName);
     }
 
     public static BeanManagerImpl unwrap(BeanManager manager) {",2013-03-18T19:23:01Z,199
"@@ -22,9 +22,12 @@
 import java.lang.reflect.Member;
 import java.lang.reflect.Type;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
 
+import javax.enterprise.context.Dependent;
+import javax.enterprise.context.spi.CreationalContext;
 import javax.enterprise.event.Observes;
 import javax.enterprise.inject.spi.AfterBeanDiscovery;
 import javax.enterprise.inject.spi.AfterDeploymentValidation;
@@ -122,43 +125,7 @@ private void testUnavailableMethods(BeanManager beanManager) {
         }
 
         try {
-            beanManager.validate(new InjectionPoint() {
-
-                @Override
-                public boolean isTransient() {
-                    return false;
-                }
-
-                @Override
-                public boolean isDelegate() {
-                    return false;
-                }
-
-                @Override
-                public Type getType() {
-                    return Foo.class;
-                }
-
-                @Override
-                public Set<Annotation> getQualifiers() {
-                    return null;
-                }
-
-                @Override
-                public Member getMember() {
-                    return null;
-                }
-
-                @Override
-                public Bean<?> getBean() {
-                    return null;
-                }
-
-                @Override
-                public Annotated getAnnotated() {
-                    return null;
-                }
-            });
+            beanManager.validate(new FooInjectionPoint());
             fail(""validate() must not be available"");
         } catch (IllegalStateException e) {
             // Expected
@@ -181,7 +148,118 @@ void observeInjectionPoint(@Observes ProcessInjectionPoint<?, ?> event) {
     }
 
     void validate(@Observes AfterDeploymentValidation event, BeanManager manager) {
-        manager.validate(injectionPoint); // should pass
+        testAvailableMethods(manager);
+    }
+
+    private void testAvailableMethods(BeanManager beanManager) {
+        beanManager.getReference(new FooBean(), Foo.class, beanManager.createCreationalContext(null));
+        beanManager.getBeans(""foo"");
+        beanManager.getBeans(Foo.class);
+        beanManager.getInjectableReference(
+                beanManager.createInjectionPoint(beanManager.createAnnotatedType(Foo.class).getFields().iterator().next()),
+                beanManager.createCreationalContext(null));
+        beanManager.resolve(null);
+        beanManager.resolveObserverMethods(new Foo());
+        beanManager.resolveInterceptors(InterceptionType.AROUND_INVOKE, new AnnotationLiteral<Transactional>() { });
+        beanManager.resolveDecorators(new HashSet<Type>(Arrays.asList(Foo.class)));
+        beanManager.validate(injectionPoint);
+        beanManager.getPassivationCapableBean(""foo"");
+    }
+
+
+    private static class FooBean implements Bean<Foo> {
+        @Override
+        public Class<?> getBeanClass() {
+            return Foo.class;
+        }
+
+        @Override
+        public Set<InjectionPoint> getInjectionPoints() {
+            return Collections.emptySet();
+        }
+
+        @Override
+        public boolean isNullable() {
+            return false;
+        }
+
+        @Override
+        public Set<Type> getTypes() {
+            HashSet<Type> set = new HashSet<Type>();
+            set.add(Foo.class);
+            return set;
+        }
+
+        @Override
+        public Set<Annotation> getQualifiers() {
+            return Collections.emptySet();
+        }
+
+        @Override
+        public Class<? extends Annotation> getScope() {
+            return Dependent.class;
+        }
+
+        @Override
+        public String getName() {
+            return null;
+        }
+
+        @Override
+        public Set<Class<? extends Annotation>> getStereotypes() {
+            return Collections.emptySet();
+        }
+
+        @Override
+        public boolean isAlternative() {
+            return false;
+        }
+
+        @Override
+        public Foo create(CreationalContext<Foo> creationalContext) {
+            return null;
+        }
+
+        @Override
+        public void destroy(Foo instance, CreationalContext<Foo> creationalContext) {
+        }
     }
 
+    private static class FooInjectionPoint implements InjectionPoint {
+
+        @Override
+        public boolean isTransient() {
+            return false;
+        }
+
+        @Override
+        public boolean isDelegate() {
+            return false;
+        }
+
+        @Override
+        public Type getType() {
+            return Foo.class;
+        }
+
+        @Override
+        public Set<Annotation> getQualifiers() {
+            return null;
+        }
+
+        @Override
+        public Member getMember() {
+            return null;
+        }
+
+        @Override
+        public Bean<?> getBean() {
+            return null;
+        }
+
+        @Override
+        public Annotated getAnnotated() {
+            return null;
+        }
+    }
 }",2013-03-18T19:23:01Z,200
"@@ -120,6 +120,12 @@
             <groupId>org.jboss.spec.javax.ws.rs</groupId>
             <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
         </dependency>
+        
+        <dependency>
+            <groupId>org.jboss.resteasy</groupId>
+            <artifactId>resteasy-jaxrs</artifactId>
+            <version>2.3.4.Final</version>
+        </dependency>
 
         <dependency>
             <groupId>org.slf4j</groupId>",2012-07-23T23:17:01Z,201
"@@ -0,0 +1,46 @@
+/*
+* JBoss, Home of Professional Open Source
+* Copyright 2005, JBoss Inc., and individual contributors as indicated
+* by the @authors tag. See the copyright.txt in the distribution for a
+* full listing of individual contributors.
+*
+* This is free software; you can redistribute it and/or modify it
+* under the terms of the GNU Lesser General Public License as
+* published by the Free Software Foundation; either version 2.1 of
+* the License, or (at your option) any later version.
+*
+* This software is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+* Lesser General Public License for more details.
+*
+* You should have received a copy of the GNU Lesser General Public
+* License along with this software; if not, write to the Free
+* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+* 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+*/
+package org.jboss.resteasy.cdi.interceptors;
+
+import javax.interceptor.AroundInvoke;
+import javax.interceptor.InvocationContext;
+
+/**
+ * 
+ * @author <a href=""ron.sigal@jboss.com"">Ron Sigal</a>
+ * @version $Revision: 1.1 $
+ *
+ * Copyright Jul 21, 2012
+ */
+public class Interceptor0
+{
+   @AroundInvoke
+   public Object intercept(InvocationContext ctx) throws Exception
+   {
+	  System.out.println(""*** Intercepting call to Interceptor0.intercept()"");
+      VisitList.add(this);
+      Object result = ctx.proceed();
+      System.out.println(""*** Back from call to Interceptor0.intercept()"");
+      return result;
+   }
+}
+",2012-07-23T23:17:01Z,202
"@@ -0,0 +1,46 @@
+/*
+* JBoss, Home of Professional Open Source
+* Copyright 2005, JBoss Inc., and individual contributors as indicated
+* by the @authors tag. See the copyright.txt in the distribution for a
+* full listing of individual contributors.
+*
+* This is free software; you can redistribute it and/or modify it
+* under the terms of the GNU Lesser General Public License as
+* published by the Free Software Foundation; either version 2.1 of
+* the License, or (at your option) any later version.
+*
+* This software is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+* Lesser General Public License for more details.
+*
+* You should have received a copy of the GNU Lesser General Public
+* License along with this software; if not, write to the Free
+* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+* 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+*/
+package org.jboss.resteasy.cdi.interceptors;
+
+import javax.interceptor.AroundInvoke;
+import javax.interceptor.InvocationContext;
+
+/**
+ * 
+ * @author <a href=""ron.sigal@jboss.com"">Ron Sigal</a>
+ * @version $Revision: 1.1 $
+ *
+ * Copyright Jul 21, 2012
+ */
+public class Interceptor1
+{   
+   @AroundInvoke
+   public Object intercept(InvocationContext ctx) throws Exception
+   {
+      System.out.println(""*** Intercepting call to Interceptor1.intercept()"");
+      VisitList.add(this);
+      Object result = ctx.proceed();
+      System.out.println(""*** Back from call to Interceptor1.intercept()"");
+      return result;
+   }
+}
+",2012-07-23T23:17:01Z,203
"@@ -0,0 +1,49 @@
+/*
+* JBoss, Home of Professional Open Source
+* Copyright 2005, JBoss Inc., and individual contributors as indicated
+* by the @authors tag. See the copyright.txt in the distribution for a
+* full listing of individual contributors.
+*
+* This is free software; you can redistribute it and/or modify it
+* under the terms of the GNU Lesser General Public License as
+* published by the Free Software Foundation; either version 2.1 of
+* the License, or (at your option) any later version.
+*
+* This software is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+* Lesser General Public License for more details.
+*
+* You should have received a copy of the GNU Lesser General Public
+* License along with this software; if not, write to the Free
+* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+* 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+*/
+package org.jboss.resteasy.cdi.interceptors;
+
+import javax.interceptor.AroundInvoke;
+import javax.interceptor.Interceptor;
+import javax.interceptor.InvocationContext;
+
+/**
+ * 
+ * @author <a href=""ron.sigal@jboss.com"">Ron Sigal</a>
+ * @version $Revision: 1.1 $
+ *
+ * Copyright Jul 21, 2012
+ */
+@Interceptor
+@TestBinding(placement=""CLASS"")
+public class Interceptor2
+{
+   @AroundInvoke
+   public Object intercept(InvocationContext ctx) throws Exception
+   {
+      System.out.println(""*** Intercepting call to Interceptor2.intercept()"");
+      VisitList.add(this);
+      Object result = ctx.proceed();
+      System.out.println(""*** Back from call to Interceptor2.intercept()"");
+      return result;
+   }
+}
+",2012-07-23T23:17:01Z,204
"@@ -0,0 +1,49 @@
+/*
+* JBoss, Home of Professional Open Source
+* Copyright 2005, JBoss Inc., and individual contributors as indicated
+* by the @authors tag. See the copyright.txt in the distribution for a
+* full listing of individual contributors.
+*
+* This is free software; you can redistribute it and/or modify it
+* under the terms of the GNU Lesser General Public License as
+* published by the Free Software Foundation; either version 2.1 of
+* the License, or (at your option) any later version.
+*
+* This software is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+* Lesser General Public License for more details.
+*
+* You should have received a copy of the GNU Lesser General Public
+* License along with this software; if not, write to the Free
+* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+* 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+*/
+package org.jboss.resteasy.cdi.interceptors;
+
+import javax.interceptor.AroundInvoke;
+import javax.interceptor.Interceptor;
+import javax.interceptor.InvocationContext;
+
+/**
+ * 
+ * @author <a href=""ron.sigal@jboss.com"">Ron Sigal</a>
+ * @version $Revision: 1.1 $
+ *
+ * Copyright Jul 21, 2012
+ */
+@Interceptor
+@TestBinding(placement=""METHOD"")
+public class Interceptor3
+{
+   @AroundInvoke
+   public Object intercept(InvocationContext ctx) throws Exception
+   {
+      System.out.println(""*** Intercepting call to Interceptor3.intercept()"");
+      VisitList.add(this);
+      Object result = ctx.proceed();
+      System.out.println(""*** Back from call to Interceptor3.intercept()"");
+      return result;
+   }
+}
+",2012-07-23T23:17:01Z,205
"@@ -0,0 +1,77 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2012, Red Hat, Inc. and/or its affiliates, and individual
+ * contributors by the @authors tag. See the copyright.txt in the 
+ * distribution for a full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,  
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.resteasy.cdi.interceptors;
+
+import java.util.ArrayList;
+
+import javax.enterprise.context.RequestScoped;
+import javax.interceptor.Interceptors;
+import javax.ws.rs.POST;
+import javax.ws.rs.Path;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+
+/**
+ * 
+ * @author <a href=""ron.sigal@jboss.com"">Ron Sigal</a>
+ * @version $Revision: 1.1 $
+ *
+ * Copyright May 7, 2012
+ */
+@Path(""/"")
+@RequestScoped
+@Interceptors ({Interceptor0.class})
+@TestBinding(placement=""CLASS"")
+public class InterceptorResource
+{  
+   @POST
+   @Path(""test"")
+   @Produces(MediaType.TEXT_PLAIN)
+   @Interceptors ({Interceptor1.class})
+   @TestBinding(placement=""METHOD"")
+   public Response test()
+   {
+      ArrayList<Object> visitList = VisitList.getList();
+      for (int i = 0; i < visitList.size(); i++)
+      {
+         System.out.println(visitList.get(i).toString());
+      }
+      boolean status = true;
+//      if (!(visitList.get(0) instanceof Interceptor0))
+//      {
+//         System.out.println(""Interceptor0 missing"");
+//         status = false;
+//      }
+//      if (!(visitList.get(1) instanceof Interceptor2))
+//      {
+//         System.out.println(""Interceptor2 missing"");
+//         status = false;
+//      }
+//      if (!(visitList.get(2) instanceof Interceptor1))
+//      {
+//         System.out.println(""Interceptor1 missing"");
+//         status = false;
+//      }
+//      if (!(visitList.get(3) instanceof Interceptor3))
+//      {
+//         System.out.println(""Interceptor3 missing"");
+//         status = false;
+//      }
+      return status ? Response.ok().build() : Response.serverError().build();
+   }
+}",2012-07-23T23:17:01Z,206
"@@ -0,0 +1,35 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2012, Red Hat, Inc. and/or its affiliates, and individual
+ * contributors by the @authors tag. See the copyright.txt in the 
+ * distribution for a full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,  
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.resteasy.cdi.interceptors;
+
+import javax.ws.rs.ApplicationPath;
+import javax.ws.rs.core.Application;
+
+/**
+ * A class extending {@link Application} and annotated with @ApplicationPath is the Java EE 6
+ * ""no XML"" approach to activating JAX-RS.
+ * 
+ * <p>
+ * Resources are served relative to the servlet path specified in the {@link ApplicationPath}
+ * annotation.
+ * </p>
+ */
+@ApplicationPath(""/rest"")
+public class JaxRsActivator extends Application
+{
+   /* class body intentionally left blank */
+}",2012-07-23T23:17:01Z,207
"@@ -0,0 +1,47 @@
+/*
+* JBoss, Home of Professional Open Source
+* Copyright 2005, JBoss Inc., and individual contributors as indicated
+* by the @authors tag. See the copyright.txt in the distribution for a
+* full listing of individual contributors.
+*
+* This is free software; you can redistribute it and/or modify it
+* under the terms of the GNU Lesser General Public License as
+* published by the Free Software Foundation; either version 2.1 of
+* the License, or (at your option) any later version.
+*
+* This software is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+* Lesser General Public License for more details.
+*
+* You should have received a copy of the GNU Lesser General Public
+* License along with this software; if not, write to the Free
+* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+* 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+*/
+package org.jboss.resteasy.cdi.interceptors;
+
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.ElementType.TYPE;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import javax.interceptor.InterceptorBinding;
+
+/**
+ * 
+ * @author <a href=""ron.sigal@jboss.com"">Ron Sigal</a>
+ * @version $Revision: 1.1 $
+ *
+ * Copyright Jul 21, 2012
+ */
+@InterceptorBinding
+@Target({TYPE, METHOD})
+@Retention(RUNTIME)
+public @interface TestBinding
+{
+   String placement() default ""CLASS"";
+}
+",2012-07-23T23:17:01Z,208
"@@ -0,0 +1,47 @@
+/*
+* JBoss, Home of Professional Open Source
+* Copyright 2005, JBoss Inc., and individual contributors as indicated
+* by the @authors tag. See the copyright.txt in the distribution for a
+* full listing of individual contributors.
+*
+* This is free software; you can redistribute it and/or modify it
+* under the terms of the GNU Lesser General Public License as
+* published by the Free Software Foundation; either version 2.1 of
+* the License, or (at your option) any later version.
+*
+* This software is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+* Lesser General Public License for more details.
+*
+* You should have received a copy of the GNU Lesser General Public
+* License along with this software; if not, write to the Free
+* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+* 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+*/
+package org.jboss.resteasy.cdi.interceptors;
+
+import java.util.ArrayList;
+
+/**
+ * 
+ * @author <a href=""ron.sigal@jboss.com"">Ron Sigal</a>
+ * @version $Revision: 1.1 $
+ *
+ * Copyright Jul 21, 2012
+ */
+public class VisitList
+{
+   static private ArrayList<Object> visitList = new ArrayList<Object>();
+   
+   static public void add(Object interceptor)
+   {
+      visitList.add(interceptor);
+   }
+   
+   static public ArrayList<Object> getList()
+   {
+      return new ArrayList<Object>(visitList);
+   }
+}
+",2012-07-23T23:17:01Z,209
"@@ -0,0 +1,84 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2012, Red Hat, Inc. and/or its affiliates, and individual
+ * contributors by the @authors tag. See the copyright.txt in the 
+ * distribution for a full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,  
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.resteasy.test.cdi.interceptors;
+
+import static org.junit.Assert.assertEquals;
+
+import java.util.logging.Logger;
+
+import javax.inject.Inject;
+import javax.swing.text.Utilities;
+
+import org.jboss.arquillian.container.test.api.Deployment;
+import org.jboss.arquillian.junit.Arquillian;
+import org.jboss.resteasy.cdi.interceptors.Interceptor2;
+import org.jboss.resteasy.cdi.interceptors.Interceptor3;
+import org.jboss.resteasy.cdi.interceptors.InterceptorResource;
+import org.jboss.resteasy.cdi.interceptors.Interceptor0;
+import org.jboss.resteasy.cdi.interceptors.Interceptor1;
+import org.jboss.resteasy.cdi.interceptors.JaxRsActivator;
+import org.jboss.resteasy.cdi.interceptors.TestBinding;
+import org.jboss.resteasy.cdi.interceptors.VisitList;
+import org.jboss.resteasy.client.ClientRequest;
+import org.jboss.resteasy.client.ClientResponse;
+import org.jboss.shrinkwrap.api.Archive;
+import org.jboss.shrinkwrap.api.ShrinkWrap;
+import org.jboss.shrinkwrap.api.asset.EmptyAsset;
+import org.jboss.shrinkwrap.api.spec.WebArchive;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+/**
+ * This is a collection of tests addressed to the interactions of 
+ * Resteasy, CDI, EJB, and so forth in the context of a JEE Application Server.
+ * 
+ * It tests the injection of a variety of beans into Resteasy objects.
+ * 
+ * @author <a href=""ron.sigal@jboss.com"">Ron Sigal</a>
+ * @version $Revision: 1.1 $
+ *
+ * Copyright May 8, 2012
+ */
+@RunWith(Arquillian.class)
+public class InterceptorTest
+{
+	@Deployment
+	public static Archive<?> createTestArchive()
+	{
+		WebArchive war = ShrinkWrap.create(WebArchive.class, ""resteasy-cdi-ejb-test.war"")
+		    .addClasses(JaxRsActivator.class, Utilities.class)
+            .addClasses(InterceptorResource.class, Interceptor0.class, Interceptor1.class)
+            .addClasses(TestBinding.class, Interceptor2.class, Interceptor3.class)
+            .addClasses(VisitList.class)
+		    .addAsWebInfResource(""interceptorBeans.xml"", ""beans.xml"");
+	   System.out.println(war.toString(true));
+	   return war;
+	}
+	   
+	/**
+	 */
+	@Test
+	public void test() throws Exception
+	{
+	   System.out.println(""starting testVerifyScopes()"");
+	   ClientRequest request = new ClientRequest(""http://localhost:8080/resteasy-cdi-ejb-test/rest/test/"");
+	   ClientResponse<?> response = request.post();
+	   System.out.println(""Status: "" + response.getStatus());
+	   assertEquals(200, response.getStatus());
+	   response.releaseConnection();
+	}
+}",2012-07-23T23:17:01Z,210
"@@ -0,0 +1,8 @@
+<beans xmlns=""http://java.sun.com/xml/ns/javaee""
+xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+xsi:schemaLocation=""http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/beans_1_0.xsd"">
+<interceptors>
+<class>org.jboss.resteasy.cdi.interceptors.Interceptor2</class>
+<class>org.jboss.resteasy.cdi.interceptors.Interceptor3</class>
+</interceptors>
+</beans>",2012-07-23T23:17:01Z,211
"@@ -70,6 +70,7 @@
 import javax.inject.Scope;
 import java.beans.Introspector;
 import java.lang.annotation.Annotation;
+import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashSet;
@@ -106,21 +107,6 @@ private static <T> InterceptorMetadata<T>[] emptyInterceptorMetadataArray() {
         return cast(EMPTY_INTERCEPTOR_METADATA_ARRAY);
     }
 
-    private InterceptorMetadata<SerializableContextual<?, ?>>[] toSerializableContextualArray(List<Interceptor<?>> interceptors) {
-        List<InterceptorMetadata<SerializableContextual<Interceptor<?>, ?>>> serializableContextuals = new ArrayList<InterceptorMetadata<SerializableContextual<Interceptor<?>, ?>>>();
-        for (Interceptor<?> interceptor : interceptors) {
-
-            SerializableContextualImpl<Interceptor<?>, ?> contextual = new SerializableContextualImpl(interceptor, getServices().get(ContextualStore.class));
-            if (interceptor instanceof InterceptorImpl) {
-                serializableContextuals.add(beanManager.getInterceptorMetadataReader().getInterceptorMetadata(new SerializableContextualInterceptorReference(contextual, WeldInterceptorClassMetadata.of(((InterceptorImpl) interceptor).getWeldAnnotated()))));
-            } else {
-                //custom interceptor
-                serializableContextuals.add(new CustomInterceptorMetadata(new SerializableContextualInterceptorReference(contextual, null), beanManager.getInterceptorMetadataReader().getClassMetadata(interceptor.getBeanClass())));
-            }
-        }
-        return serializableContextuals.toArray(AbstractClassBean.<SerializableContextual<?, ?>>emptyInterceptorMetadataArray());
-    }
-
     // Logger
     private static final LocLogger log = loggerFactory().getLogger(BEAN);
 
@@ -184,122 +170,9 @@ public void initialize(BeanDeployerEnvironment environment) {
         initTargetClassInterceptors();
     }
 
-    protected void initInterceptionModelForType() {
-        ClassMetadata<?> classMetadata = beanManager.getInterceptorMetadataReader().getClassMetadata(getType());
-
-        InterceptionModelBuilder<ClassMetadata<?>, ?> builder = InterceptionModelBuilder.<ClassMetadata<?>>newBuilderFor(classMetadata);
-
-        // initialize CDI interceptors
-        Set<Annotation> classBindingAnnotations = new InterceptorBindingSet(beanManager);
-        classBindingAnnotations.addAll(beanManager.extractInterceptorBindings(getWeldAnnotated().getAnnotations()));
-        for (Class<? extends Annotation> annotation : getStereotypes()) {
-            classBindingAnnotations.addAll(beanManager.extractInterceptorBindings(beanManager.getStereotypeDefinition(annotation)));
-        }
-        if (classBindingAnnotations.size() > 0) {
-            if (Beans.findInterceptorBindingConflicts(beanManager, classBindingAnnotations)) {
-                throw new DeploymentException(CONFLICTING_INTERCEPTOR_BINDINGS, getType());
-            }
-
-            Annotation[] classBindingAnnotationsArray = classBindingAnnotations.toArray(new Annotation[classBindingAnnotations.size()]);
-
-            List<Interceptor<?>> resolvedPostConstructInterceptors = beanManager.resolveInterceptors(InterceptionType.POST_CONSTRUCT, classBindingAnnotationsArray);
-            builder.interceptPostConstruct().with(toSerializableContextualArray(resolvedPostConstructInterceptors));
-
-            List<Interceptor<?>> resolvedPreDestroyInterceptors = beanManager.resolveInterceptors(InterceptionType.PRE_DESTROY, classBindingAnnotationsArray);
-            builder.interceptPreDestroy().with(toSerializableContextualArray(resolvedPreDestroyInterceptors));
-
-            List<Interceptor<?>> resolvedPrePassivateInterceptors = beanManager.resolveInterceptors(InterceptionType.PRE_PASSIVATE, classBindingAnnotationsArray);
-            builder.interceptPrePassivate().with(toSerializableContextualArray(resolvedPrePassivateInterceptors));
-
-            List<Interceptor<?>> resolvedPostActivateInterceptors = beanManager.resolveInterceptors(InterceptionType.POST_ACTIVATE, classBindingAnnotationsArray);
-            builder.interceptPostActivate().with(toSerializableContextualArray(resolvedPostActivateInterceptors));
-
-        }
-        List<WeldMethod<?, ?>> businessMethods = Beans.getInterceptableMethods(getWeldAnnotated());
-        for (WeldMethod<?, ?> method : businessMethods) {
-            Set<Annotation> methodBindingAnnotations = new InterceptorBindingSet(beanManager);
-            methodBindingAnnotations.addAll(classBindingAnnotations);
-            methodBindingAnnotations.addAll(beanManager.extractInterceptorBindings(method.getAnnotations()));
-            if (methodBindingAnnotations.size() > 0) {
-                if (Beans.findInterceptorBindingConflicts(beanManager, methodBindingAnnotations)) {
-                    throw new DeploymentException(CONFLICTING_INTERCEPTOR_BINDINGS, getType() + ""."" + method.getName() + ""()"");
-                }
-
-                Annotation[] methodBindingAnnotationsArray = methodBindingAnnotations.toArray(new Annotation[methodBindingAnnotations.size()]);
-
-                List<Interceptor<?>> methodBoundInterceptors = beanManager.resolveInterceptors(InterceptionType.AROUND_INVOKE, methodBindingAnnotationsArray);
-                if (methodBoundInterceptors != null && methodBoundInterceptors.size() > 0) {
-                    if (method.isFinal()) {
-                        throw new DefinitionException(FINAL_INTERCEPTED_BEAN_METHOD_NOT_ALLOWED, method, methodBoundInterceptors.get(0).getBeanClass().getName());
-                    }
-                    builder.interceptAroundInvoke(Reflections.<AnnotatedMethod<T>>cast(method).getJavaMember()).with(toSerializableContextualArray(methodBoundInterceptors));
-                }
-
-                methodBoundInterceptors = beanManager.resolveInterceptors(InterceptionType.AROUND_TIMEOUT, methodBindingAnnotationsArray);
-                if (methodBoundInterceptors != null && methodBoundInterceptors.size() > 0) {
-                    if (method.isFinal()) {
-                        throw new DefinitionException(FINAL_INTERCEPTED_BEAN_METHOD_NOT_ALLOWED, method, methodBoundInterceptors.get(0).getBeanClass().getName());
-                    }
-                    builder.interceptAroundTimeout(Reflections.<AnnotatedMethod<T>>cast(method).getJavaMember()).with(toSerializableContextualArray(methodBoundInterceptors));
-                }
-
-            }
-        }
-
-        // initialize EJB3 interceptors
-        Class<?>[] classDeclaredInterceptors = null;
-        if (getWeldAnnotated().isAnnotationPresent(InterceptionUtils.getInterceptorsAnnotationClass())) {
-            Annotation interceptorsAnnotation = getType().getAnnotation(InterceptionUtils.getInterceptorsAnnotationClass());
-            classDeclaredInterceptors = SecureReflections.extractValues(interceptorsAnnotation);
-        }
-
-        if (classDeclaredInterceptors != null) {
-            for (Class<?> clazz : classDeclaredInterceptors) {
-                builder.interceptAll().with(beanManager.getInterceptorMetadataReader().getInterceptorMetadata(clazz));
-            }
-        }
-
-        for (WeldMethod<?, ?> method : businessMethods) {
-            boolean excludeClassInterceptors = method.isAnnotationPresent(InterceptionUtils.getExcludeClassInterceptorsAnnotationClass());
-            Class<?>[] methodDeclaredInterceptors = null;
-            if (method.isAnnotationPresent(InterceptionUtils.getInterceptorsAnnotationClass())) {
-                methodDeclaredInterceptors = SecureReflections.extractValues(method.getAnnotation(InterceptionUtils.getInterceptorsAnnotationClass()));
-            }
-            if (excludeClassInterceptors) {
-                builder.ignoreGlobalInterceptors(Reflections.<AnnotatedMethod<T>>cast(method).getJavaMember());
-            }
-            if (methodDeclaredInterceptors != null && methodDeclaredInterceptors.length > 0) {
-                List<InterceptorMetadata<?>> methodDeclaredInterceptorMetadatas = new ArrayList<InterceptorMetadata<?>>();
-                for (Class<?> clazz : methodDeclaredInterceptors) {
-                    methodDeclaredInterceptorMetadatas.add(beanManager.getInterceptorMetadataReader().getInterceptorMetadata(clazz));
-                }
-                if (method.isFinal()) {
-                    throw new DefinitionException(FINAL_INTERCEPTED_BEAN_METHOD_NOT_ALLOWED, method, methodDeclaredInterceptors[0].getName());
-                }
-                if (method.isAnnotationPresent(beanManager.getServices().get(EJBApiAbstraction.class).TIMEOUT_ANNOTATION_CLASS)) {
-                    builder.interceptAroundTimeout(Reflections.<AnnotatedMethod<T>>cast(method).getJavaMember()).with(methodDeclaredInterceptorMetadatas.toArray(new InterceptorMetadata[]{}));
-                } else {
-                    builder.interceptAroundInvoke(Reflections.<AnnotatedMethod<T>>cast(method).getJavaMember()).with(methodDeclaredInterceptorMetadatas.toArray(new InterceptorMetadata[]{}));
-                }
-            }
-        }
-        InterceptionModel<ClassMetadata<?>, ?> interceptionModel = builder.build();
-
-        if (interceptionModel.getAllInterceptors().size() > 0 || hasSerializationOrInvocationInterceptorMethods) {
-            if (getWeldAnnotated().isFinal()) {
-                throw new DefinitionException(FINAL_BEAN_CLASS_WITH_INTERCEPTORS_NOT_ALLOWED, this);
-            }
-            beanManager.getInterceptorModelRegistry().put(getType(), ((InterceptionModel<ClassMetadata<?>, ?>) interceptionModel));
-        }
-
-
-    }
-
     @Override
     public void initializeAfterBeanDiscovery() {
-        if (isInterceptionCandidate() && !beanManager.getInterceptorModelRegistry().containsKey(getType())) {
-            initInterceptionModelForType();
-        }
+        initInterceptorsIfNeeded();
         initDecorators();
         super.initializeAfterBeanDiscovery();
         if (isSubclassed()) {
@@ -311,6 +184,12 @@ public void initializeAfterBeanDiscovery() {
         }
     }
 
+    protected void initInterceptorsIfNeeded() {
+        if (isInterceptionCandidate() && !beanManager.getInterceptorModelRegistry().containsKey(getType())) {
+            new InterceptionModelInitializer().init();
+        }
+    }
+
     public void initDecorators() {
         this.decorators = getBeanManager().resolveDecorators(getTypes(), getQualifiers());
     }
@@ -322,7 +201,7 @@ public boolean hasDecorators() {
     protected T applyDecorators(T instance, CreationalContext<T> creationalContext, InjectionPoint originalInjectionPoint) {
         assert hasDecorators() : ""Bean does not have decorators"";
         TargetBeanInstance beanInstance = new TargetBeanInstance(this, instance);
-        DecorationHelper<T> decorationHelper = new DecorationHelper<T>(beanInstance, this, decoratorProxyFactory.getProxyClass(), beanManager, getServices().get(ContextualStore.class), decorators);
+        DecorationHelper<T> decorationHelper = new DecorationHelper<T>(beanInstance, this, decoratorProxyFactory.getProxyClass(), beanManager, getContextualStore(), decorators);
         DecorationHelper.push(decorationHelper);
         final T outerDelegate;
         try {
@@ -580,4 +459,191 @@ protected Class<T> createEnhancedSubclass() {
         return new InterceptedSubclassFactory<T>(getType(), getTypes(), this, enhancedMethodSignatures).getProxyClass();
     }
 
+    private ContextualStore getContextualStore() {
+        return getServices().get(ContextualStore.class);
+    }
+
+
+    private class InterceptionModelInitializer {
+
+        private List<WeldMethod<?,?>> businessMethods;
+        private InterceptionModelBuilder<ClassMetadata<?>,?> builder;
+
+        public void init() {
+            businessMethods = Beans.getInterceptableMethods(getWeldAnnotated());
+            builder = InterceptionModelBuilder.<ClassMetadata<?>>newBuilderFor(getClassMetadata());
+
+            initCdiInterceptors();
+            initEjbInterceptors();
+
+            InterceptionModel<ClassMetadata<?>, ?> interceptionModel = builder.build();
+            if (interceptionModel.getAllInterceptors().size() > 0 || hasSerializationOrInvocationInterceptorMethods) {
+                if (getWeldAnnotated().isFinal()) {
+                    throw new DefinitionException(FINAL_BEAN_CLASS_WITH_INTERCEPTORS_NOT_ALLOWED, AbstractClassBean.this);
+                }
+                beanManager.getInterceptorModelRegistry().put(getType(), interceptionModel);
+            }
+        }
+
+        private ClassMetadata<T> getClassMetadata() {
+            return beanManager.getInterceptorMetadataReader().getClassMetadata(getType());
+        }
+
+        private void initCdiInterceptors() {
+            Set<Annotation> classBindingAnnotations = getClassInterceptorBindings();
+            initCdiLifecycleInterceptors(classBindingAnnotations);
+            initCdiBusinessMethodInterceptors(classBindingAnnotations);
+        }
+
+        private Set<Annotation> getClassInterceptorBindings() {
+            Set<Annotation> classBindingAnnotations = new InterceptorBindingSet(beanManager);
+            classBindingAnnotations.addAll(beanManager.extractInterceptorBindings(getWeldAnnotated().getAnnotations()));
+            for (Class<? extends Annotation> annotation : getStereotypes()) {
+                classBindingAnnotations.addAll(beanManager.extractInterceptorBindings(beanManager.getStereotypeDefinition(annotation)));
+            }
+            return classBindingAnnotations;
+        }
+
+        private void initCdiLifecycleInterceptors(Set<Annotation> classBindingAnnotations) {
+            if (classBindingAnnotations.size() == 0) {
+                return;
+            }
+            if (Beans.findInterceptorBindingConflicts(beanManager, classBindingAnnotations)) {
+                throw new DeploymentException(CONFLICTING_INTERCEPTOR_BINDINGS, getType());
+            }
+
+            Annotation[] classBindingAnnotationsArray = classBindingAnnotations.toArray(new Annotation[classBindingAnnotations.size()]);
+            initLifeCycleInterceptor(InterceptionType.POST_CONSTRUCT, classBindingAnnotationsArray);
+            initLifeCycleInterceptor(InterceptionType.PRE_DESTROY, classBindingAnnotationsArray);
+            initLifeCycleInterceptor(InterceptionType.PRE_PASSIVATE, classBindingAnnotationsArray);
+            initLifeCycleInterceptor(InterceptionType.POST_ACTIVATE, classBindingAnnotationsArray);
+        }
+
+        private void initLifeCycleInterceptor(InterceptionType interceptionType, Annotation[] classBindingAnnotationsArray) {
+            List<Interceptor<?>> resolvedInterceptors = beanManager.resolveInterceptors(interceptionType, classBindingAnnotationsArray);
+            builder.intercept(interceptionType).with(toSerializableContextualArray(resolvedInterceptors));
+        }
+
+        private void initCdiBusinessMethodInterceptors(Set<Annotation> classBindingAnnotations) {
+            for (WeldMethod<?, ?> method : businessMethods) {
+                initCdiBusinessMethodInterceptor(method, getMethodBindingAnnotations(classBindingAnnotations, method));
+            }
+        }
+
+        private Set<Annotation> getMethodBindingAnnotations(Set<Annotation> classBindingAnnotations, WeldMethod<?, ?> method) {
+            Set<Annotation> methodBindingAnnotations = new InterceptorBindingSet(beanManager);
+            methodBindingAnnotations.addAll(classBindingAnnotations);
+            methodBindingAnnotations.addAll(beanManager.extractInterceptorBindings(method.getAnnotations()));
+            return methodBindingAnnotations;
+        }
+
+        private void initCdiBusinessMethodInterceptor(WeldMethod<?, ?> method, Set<Annotation> methodBindingAnnotations) {
+            if (methodBindingAnnotations.size() == 0) {
+                return;
+            }
+            if (Beans.findInterceptorBindingConflicts(beanManager, methodBindingAnnotations)) {
+                throw new DeploymentException(CONFLICTING_INTERCEPTOR_BINDINGS, getType() + ""."" + method.getName() + ""()"");
+            }
+
+            Annotation[] methodBindingAnnotationsArray = methodBindingAnnotations.toArray(new Annotation[methodBindingAnnotations.size()]);
+            initInterceptor(InterceptionType.AROUND_INVOKE, method, methodBindingAnnotationsArray);
+            initInterceptor(InterceptionType.AROUND_TIMEOUT, method, methodBindingAnnotationsArray);
+        }
+
+        private void initInterceptor(InterceptionType interceptionType, WeldMethod<?, ?> method, Annotation[] methodBindingAnnotationsArray) {
+            List<Interceptor<?>> methodBoundInterceptors = beanManager.resolveInterceptors(interceptionType, methodBindingAnnotationsArray);
+            if (methodBoundInterceptors != null && methodBoundInterceptors.size() > 0) {
+                if (method.isFinal()) {
+                    throw new DefinitionException(FINAL_INTERCEPTED_BEAN_METHOD_NOT_ALLOWED, method, methodBoundInterceptors.get(0).getBeanClass().getName());
+                }
+                Method javaMethod = Reflections.<AnnotatedMethod<T>>cast(method).getJavaMember();
+                builder.intercept(interceptionType, javaMethod).with(toSerializableContextualArray(methodBoundInterceptors));
+            }
+        }
+
+        private void initEjbInterceptors() {
+            initClassDeclaredEjbInterceptors();
+            for (WeldMethod<?, ?> method : businessMethods) {
+                initMethodDeclaredEjbInterceptors(method);
+            }
+        }
+
+        private void initClassDeclaredEjbInterceptors() {
+            Class<?>[] classDeclaredInterceptors = null;
+            if (getWeldAnnotated().isAnnotationPresent(InterceptionUtils.getInterceptorsAnnotationClass())) {
+                Annotation interceptorsAnnotation = getType().getAnnotation(InterceptionUtils.getInterceptorsAnnotationClass());
+                classDeclaredInterceptors = SecureReflections.extractValues(interceptorsAnnotation);
+            }
+
+            if (classDeclaredInterceptors != null) {
+                for (Class<?> clazz : classDeclaredInterceptors) {
+                    builder.interceptAll().with(beanManager.getInterceptorMetadataReader().getInterceptorMetadata(clazz));
+                }
+            }
+        }
+
+        private void initMethodDeclaredEjbInterceptors(WeldMethod<?, ?> method) {
+            Method javaMethod = Reflections.<AnnotatedMethod<T>>cast(method).getJavaMember();
+
+            boolean excludeClassInterceptors = method.isAnnotationPresent(InterceptionUtils.getExcludeClassInterceptorsAnnotationClass());
+            if (excludeClassInterceptors) {
+                builder.ignoreGlobalInterceptors(javaMethod);
+            }
+
+            Class<?>[] methodDeclaredInterceptors = getMethodDeclaredInterceptors(method);
+            if (methodDeclaredInterceptors != null && methodDeclaredInterceptors.length > 0) {
+                if (method.isFinal()) {
+                    throw new DefinitionException(FINAL_INTERCEPTED_BEAN_METHOD_NOT_ALLOWED, method, methodDeclaredInterceptors[0].getName());
+                }
+
+                InterceptionType interceptionType = isTimeoutAnnotationPresentOn(method)
+                        ? InterceptionType.AROUND_TIMEOUT
+                        : InterceptionType.AROUND_INVOKE;
+                InterceptorMetadata[] interceptors = getMethodDeclaredInterceptorMetadatas(methodDeclaredInterceptors);
+                builder.intercept(interceptionType, javaMethod).with(interceptors);
+            }
+        }
+
+        private InterceptorMetadata[] getMethodDeclaredInterceptorMetadatas(Class<?>[] methodDeclaredInterceptors) {
+            List<InterceptorMetadata<?>> list = new ArrayList<InterceptorMetadata<?>>();
+            for (Class<?> clazz : methodDeclaredInterceptors) {
+                list.add(beanManager.getInterceptorMetadataReader().getInterceptorMetadata(clazz));
+            }
+            return list.toArray(new InterceptorMetadata[list.size()]);
+        }
+
+        private boolean isTimeoutAnnotationPresentOn(WeldMethod<?, ?> method) {
+            return method.isAnnotationPresent(beanManager.getServices().get(EJBApiAbstraction.class).TIMEOUT_ANNOTATION_CLASS);
+        }
+
+        private Class<?>[] getMethodDeclaredInterceptors(WeldMethod<?, ?> method) {
+            Class<?>[] methodDeclaredInterceptors = null;
+            if (method.isAnnotationPresent(InterceptionUtils.getInterceptorsAnnotationClass())) {
+                methodDeclaredInterceptors = SecureReflections.extractValues(method.getAnnotation(InterceptionUtils.getInterceptorsAnnotationClass()));
+            }
+            return methodDeclaredInterceptors;
+        }
+
+        private InterceptorMetadata<SerializableContextual<?, ?>>[] toSerializableContextualArray(List<Interceptor<?>> interceptors) {
+            List<InterceptorMetadata<SerializableContextual<Interceptor<?>, ?>>> serializableContextuals = new ArrayList<InterceptorMetadata<SerializableContextual<Interceptor<?>, ?>>>();
+            for (Interceptor<?> interceptor : interceptors) {
+                serializableContextuals.add(getInterceptorMetadata(interceptor));
+            }
+            return serializableContextuals.toArray(AbstractClassBean.<SerializableContextual<?, ?>>emptyInterceptorMetadataArray());
+        }
+
+        private InterceptorMetadata<SerializableContextual<Interceptor<?>, ?>> getInterceptorMetadata(Interceptor<?> interceptor) {
+            SerializableContextualImpl<Interceptor<?>, ?> contextual = new SerializableContextualImpl(interceptor, getContextualStore());
+            if (interceptor instanceof InterceptorImpl) {
+                InterceptorImpl interceptorImpl = (InterceptorImpl) interceptor;
+                WeldInterceptorClassMetadata classMetadata = WeldInterceptorClassMetadata.of(interceptorImpl.getWeldAnnotated());
+                SerializableContextualInterceptorReference interceptorReference = new SerializableContextualInterceptorReference(contextual, classMetadata);
+                return beanManager.getInterceptorMetadataReader().getInterceptorMetadata(interceptorReference);
+            } else {
+                //custom interceptor
+                ClassMetadata<?> classMetadata = beanManager.getInterceptorMetadataReader().getClassMetadata(interceptor.getBeanClass());
+                return new CustomInterceptorMetadata(new SerializableContextualInterceptorReference(contextual, null), classMetadata);
+            }
+        }
+    }
 }",2012-03-13T11:15:55Z,2
"@@ -342,9 +342,7 @@ protected T createInstance(CreationalContext<T> ctx) {
 
     @Override
     public void initializeAfterBeanDiscovery() {
-        if (isInterceptionCandidate() && !beanManager.getInterceptorModelRegistry().containsKey(getType())) {
-            initInterceptionModelForType();
-        }
+        initInterceptorsIfNeeded();
         if (this.passivationCapableBean && this.hasDecorators()) {
             for (Decorator<?> decorator : this.getDecorators()) {
                 if (!(PassivationCapable.class.isAssignableFrom(decorator.getClass())) || !((WeldDecorator<?>) decorator).getWeldAnnotated().isSerializable()) {",2012-03-13T11:15:55Z,92
"@@ -25,6 +25,7 @@
 
 /**
  * @author <a href=""mailto:mariusb@redhat.com"">Marius Bogoevici</a>
+ * @author <a href=""mailto:marko.luksa@gmail.com"">Marko Luksa</a>
  */
 public class InterceptionModelBuilder<T, I> {
 
@@ -54,27 +55,43 @@ public MethodInterceptorDescriptor interceptAll() {
     }
 
     public MethodInterceptorDescriptor interceptAroundInvoke(Method m) {
-        return new MethodInterceptorDescriptor(m, InterceptionType.AROUND_INVOKE);
+        return intercept(javax.enterprise.inject.spi.InterceptionType.AROUND_INVOKE, m);
     }
 
     public MethodInterceptorDescriptor interceptAroundTimeout(Method m) {
-        return new MethodInterceptorDescriptor(m, InterceptionType.AROUND_TIMEOUT);
+        return intercept(javax.enterprise.inject.spi.InterceptionType.AROUND_TIMEOUT, m);
+    }
+
+    public MethodInterceptorDescriptor intercept(javax.enterprise.inject.spi.InterceptionType interceptionType, Method m) {
+        InterceptionType weldInterceptionType = InterceptionType.valueOf(interceptionType);
+        if (weldInterceptionType.isLifecycleCallback()) {
+            throw new IllegalArgumentException(""Illegal interception type: "" + interceptionType);
+        }
+        return new MethodInterceptorDescriptor(m, weldInterceptionType);
     }
 
     public MethodInterceptorDescriptor interceptPostConstruct() {
-        return new MethodInterceptorDescriptor(null, InterceptionType.POST_CONSTRUCT);
+        return intercept(javax.enterprise.inject.spi.InterceptionType.POST_CONSTRUCT);
     }
 
     public MethodInterceptorDescriptor interceptPreDestroy() {
-        return new MethodInterceptorDescriptor(null, InterceptionType.PRE_DESTROY);
+        return intercept(javax.enterprise.inject.spi.InterceptionType.PRE_DESTROY);
     }
 
     public MethodInterceptorDescriptor interceptPrePassivate() {
-        return new MethodInterceptorDescriptor(null, InterceptionType.PRE_PASSIVATE);
+        return intercept(javax.enterprise.inject.spi.InterceptionType.PRE_PASSIVATE);
     }
 
     public MethodInterceptorDescriptor interceptPostActivate() {
-        return new MethodInterceptorDescriptor(null, InterceptionType.POST_ACTIVATE);
+        return intercept(javax.enterprise.inject.spi.InterceptionType.POST_ACTIVATE);
+    }
+
+    public MethodInterceptorDescriptor intercept(javax.enterprise.inject.spi.InterceptionType interceptionType) {
+        InterceptionType weldInterceptionType = InterceptionType.valueOf(interceptionType);
+        if (!weldInterceptionType.isLifecycleCallback()) {
+            throw new IllegalArgumentException(""Illegal interception type: "" + interceptionType);
+        }
+        return new MethodInterceptorDescriptor(null, weldInterceptionType);
     }
 
     public void ignoreGlobalInterceptors(Method m) {",2012-03-13T11:15:55Z,212
"@@ -26,6 +26,7 @@
 
 /**
  * @author Marius Bogoevici
+ * @author Marko Luksa
  */
 public class InterceptorMethodHandler implements MethodHandler, Serializable {
 
@@ -84,14 +85,17 @@ public Object invoke(Object self, Method thisMethod, Method proceed, Object[] ar
                     return proceed.invoke(self, args);
                 }
             }
-            if (InterceptionTypeRegistry.isSupported(InterceptionType.AROUND_TIMEOUT) && thisMethod.isAnnotationPresent(InterceptionTypeRegistry.getAnnotationClass(InterceptionType.AROUND_TIMEOUT))) {
-                return executeInterception(isProxy() ? null : self, thisMethod, thisMethod, args, InterceptionType.AROUND_TIMEOUT);
-            } else {
-                return executeInterception(isProxy() ? null : self, thisMethod, thisMethod, args, InterceptionType.AROUND_INVOKE);
-            }
+            return executeInterception(isProxy() ? null : self, thisMethod, thisMethod, args, getInterceptionType(thisMethod));
         }
         return null;
+    }
 
+    private InterceptionType getInterceptionType(Method thisMethod) {
+        if (InterceptionTypeRegistry.isSupported(InterceptionType.AROUND_TIMEOUT) && thisMethod.isAnnotationPresent(InterceptionTypeRegistry.getAnnotationClass(InterceptionType.AROUND_TIMEOUT))) {
+            return InterceptionType.AROUND_TIMEOUT;
+        } else {
+            return InterceptionType.AROUND_INVOKE;
+        }
     }
 
     private Object executeInterception(Object self, Method proceedingMethod, Method thisMethod, Object[] args, InterceptionType interceptionType) throws Throwable {",2012-03-13T11:15:55Z,213
"@@ -45,4 +45,8 @@ public boolean isLifecycleCallback() {
     public String annotationClassName() {
         return annotationClassName;
     }
+
+    public static InterceptionType valueOf(javax.enterprise.inject.spi.InterceptionType interceptionType) {
+        return valueOf(interceptionType.name());
+    }
 }",2012-03-13T11:15:55Z,214
"@@ -324,7 +324,7 @@ protected ManagedBean(WeldClass<T> type, String idSuffix, BeanManagerImpl beanMa
       initTypes();
       initQualifiers();
       initConstructor();
-      this.proxiable = Proxies.isTypeProxyable(type.getBaseType());
+      this.proxiable = Proxies.isTypesProxyable(type.getTypeClosure());
    }
 
    /**",2010-11-16T16:13:05Z,92
"@@ -82,7 +82,7 @@ protected ProducerField(WeldField<T, ? super X> field, AbstractClassBean<X> decl
       initTypes();
       initQualifiers();
       initStereotypes();
-      this.proxiable = Proxies.isTypeProxyable(field.getBaseType());
+      this.proxiable = Proxies.isTypesProxyable(field.getTypeClosure());
    }
    
    protected static String createId(WeldField<?, ?> field, AbstractClassBean<?> declaringBean)",2010-11-16T16:13:05Z,215
"@@ -86,7 +86,7 @@ protected ProducerMethod(WeldMethod<T, ? super X> method, AbstractClassBean<X> d
       this.id = createId(method, declaringBean);
       initStereotypes();
       initProducerMethodInjectableParameters();
-      this.proxiable = Proxies.isTypeProxyable(method.getBaseType());
+      this.proxiable = Proxies.isTypesProxyable(method.getTypeClosure());
    }
 
    protected String createId(WeldMethod<T, ? super X> method, AbstractClassBean<X> declaringBean)",2010-11-16T16:13:05Z,177
"@@ -0,0 +1,61 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2008, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,  
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.weld.introspector;
+
+import java.lang.reflect.Type;
+import java.util.Set;
+
+import org.jboss.weld.util.LazyValueHolder;
+import org.jboss.weld.util.reflection.HierarchyDiscovery;
+
+/**
+ * {@link LazyValueHolder} that calculates a type closue. In many cases this
+ * will not be needed, so computing it on demand saves memory and startup time.
+ * 
+ * @author Stuart Douglas
+ * 
+ */
+public class TypeClosureLazyValueHolder extends LazyValueHolder<Set<Type>>
+{
+
+   private final Type type;
+
+   private final Set<Type> types;
+
+   public TypeClosureLazyValueHolder(Type type)
+   {
+      this.type = type;
+      this.types = null;
+   }
+
+   public TypeClosureLazyValueHolder(Set<Type> types)
+   {
+      this.type = null;
+      this.types = types;
+   }
+
+   @Override
+   protected Set<Type> computeValue()
+   {
+      if (types != null)
+      {
+         return types;
+      }
+      return new HierarchyDiscovery(type).getTypeClosure();
+   }
+
+}",2010-11-16T16:13:05Z,216
"@@ -36,6 +36,7 @@
 import org.jboss.weld.literal.DefaultLiteral;
 import org.jboss.weld.metadata.TypeStore;
 import org.jboss.weld.resources.ClassTransformer;
+import org.jboss.weld.util.LazyValueHolder;
 import org.jboss.weld.util.collections.ArraySet;
 import org.jboss.weld.util.collections.ArraySetMultimap;
 import org.jboss.weld.util.collections.Arrays2;
@@ -128,7 +129,7 @@ private static void addMetaAnnotation(ArraySetMultimap<Class<? extends Annotatio
    private final Class<T> rawType;
    private final Type[] actualTypeArguments; 
    private final Type type;
-   private final Set<Type> typeClosure;
+   private final LazyValueHolder<Set<Type>> typeClosure;
 
    /**
     * Constructor
@@ -139,7 +140,7 @@ private static void addMetaAnnotation(ArraySetMultimap<Class<? extends Annotatio
     * @param annotationMap A map of annotation to register
     * 
     */
-   public AbstractWeldAnnotated(Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, ClassTransformer classTransformer, Class<T> rawType, Type type, Set<Type> typeClosure)
+   public AbstractWeldAnnotated(Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, ClassTransformer classTransformer, Class<T> rawType, Type type, final LazyValueHolder<Set<Type>> typeClosure)
    {
       if (annotationMap == null)
       {
@@ -168,7 +169,7 @@ public AbstractWeldAnnotated(Map<Class<? extends Annotation>, Annotation> annota
       {
          this.actualTypeArguments = new Type[0];
       }
-      this.typeClosure = Collections.unmodifiableSet(new ArraySet<Type>(typeClosure));
+      this.typeClosure = typeClosure;
    }
 
    protected AbstractWeldAnnotated(Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, TypeStore typeStore)
@@ -239,7 +240,7 @@ public Type getBaseType()
 
    public Set<Type> getTypeClosure()
    {
-      return typeClosure;
+      return typeClosure.get();
    }
    
    public Set<Annotation> getAnnotations()",2010-11-16T16:13:05Z,217
"@@ -25,6 +25,7 @@
 import org.jboss.weld.introspector.WeldCallable;
 import org.jboss.weld.introspector.WeldClass;
 import org.jboss.weld.resources.ClassTransformer;
+import org.jboss.weld.util.LazyValueHolder;
 
 /**
  * @author pmuir
@@ -33,7 +34,7 @@
 public abstract class AbstractWeldCallable<T, X, S extends Member> extends AbstractWeldMember<T, X, S> implements WeldCallable<T, X, S>
 {  
    
-   protected AbstractWeldCallable(Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, ClassTransformer classTransformer, Member member, Class<T> rawType, Type type, Set<Type> typeClosure, WeldClass<X> declaringType)
+   protected AbstractWeldCallable(Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, ClassTransformer classTransformer, Member member, Class<T> rawType, Type type, LazyValueHolder<Set<Type>> typeClosure, WeldClass<X> declaringType)
    {
       super(annotationMap, declaredAnnotationMap, classTransformer, member, rawType, type, typeClosure, declaringType);
    }",2010-11-16T16:13:05Z,218
"@@ -26,6 +26,7 @@
 import org.jboss.weld.introspector.WeldClass;
 import org.jboss.weld.introspector.WeldMember;
 import org.jboss.weld.resources.ClassTransformer;
+import org.jboss.weld.util.LazyValueHolder;
 import org.jboss.weld.util.reflection.Reflections;
 
 /**
@@ -50,7 +51,7 @@ public abstract class AbstractWeldMember<T, X, S extends Member> extends Abstrac
     * 
     * @param annotationMap The annotation map
     */
-   protected AbstractWeldMember(Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, ClassTransformer classTransformer, Member member, Class<T> rawType, Type type, Set<Type> typeClosure, WeldClass<X> declaringType)
+   protected AbstractWeldMember(Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, ClassTransformer classTransformer, Member member, Class<T> rawType, Type type, LazyValueHolder<Set<Type>> typeClosure, WeldClass<X> declaringType)
    {
       super(annotationMap, declaredAnnotationMap, classTransformer, rawType, type, typeClosure);
       this.declaringType = declaringType;",2010-11-16T16:13:05Z,219
"@@ -25,11 +25,11 @@
 import java.util.Map;
 import java.util.Set;
 
+import org.jboss.weld.introspector.TypeClosureLazyValueHolder;
 import org.jboss.weld.introspector.WeldAnnotation;
 import org.jboss.weld.introspector.WeldMethod;
 import org.jboss.weld.resources.ClassTransformer;
 import org.jboss.weld.util.collections.HashSetSupplier;
-import org.jboss.weld.util.reflection.HierarchyDiscovery;
 import org.jboss.weld.util.reflection.SecureReflections;
 
 import com.google.common.collect.Multimaps;
@@ -75,7 +75,7 @@ public static <A extends Annotation> WeldAnnotation<A> of(Class<A> annotationTyp
     */
    protected WeldAnnotationImpl(Class<T> annotationType, Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, ClassTransformer classTransformer)
    {
-      super(annotationType, annotationType, null, new HierarchyDiscovery(annotationType).getTypeClosure(), annotationMap, declaredAnnotationMap, classTransformer);
+      super(annotationType, annotationType, null, new TypeClosureLazyValueHolder(annotationType), annotationMap, declaredAnnotationMap, classTransformer);
       this.clazz = annotationType;
       members = new HashSet<WeldMethod<?, ?>>();
       annotatedMembers = Multimaps.newSetMultimap(new HashMap<Class<? extends Annotation>, Collection<WeldMethod<?, ?>>>(), HashSetSupplier.<WeldMethod<?, ?>>instance());",2010-11-16T16:13:05Z,220
"@@ -42,15 +42,16 @@
 import org.jboss.weld.introspector.ConstructorSignature;
 import org.jboss.weld.introspector.ExternalAnnotatedType;
 import org.jboss.weld.introspector.MethodSignature;
+import org.jboss.weld.introspector.TypeClosureLazyValueHolder;
 import org.jboss.weld.introspector.WeldClass;
 import org.jboss.weld.introspector.WeldConstructor;
 import org.jboss.weld.introspector.WeldField;
 import org.jboss.weld.introspector.WeldMethod;
 import org.jboss.weld.resources.ClassTransformer;
+import org.jboss.weld.util.LazyValueHolder;
 import org.jboss.weld.util.collections.ArraySet;
 import org.jboss.weld.util.collections.ArraySetMultimap;
 import org.jboss.weld.util.reflection.Formats;
-import org.jboss.weld.util.reflection.HierarchyDiscovery;
 import org.jboss.weld.util.reflection.Reflections;
 import org.jboss.weld.util.reflection.SecureReflections;
 
@@ -109,20 +110,20 @@ public class WeldClassImpl<T> extends AbstractWeldAnnotated<T, Class<T>> impleme
 
    public static <T> WeldClass<T> of(Class<T> clazz, ClassTransformer classTransformer)
    {
-      return new WeldClassImpl<T>(clazz, clazz, null, new HierarchyDiscovery(clazz).getTypeClosure(), buildAnnotationMap(clazz.getAnnotations()), buildAnnotationMap(clazz.getDeclaredAnnotations()), classTransformer);
+      return new WeldClassImpl<T>(clazz, clazz, null, new TypeClosureLazyValueHolder(clazz), buildAnnotationMap(clazz.getAnnotations()), buildAnnotationMap(clazz.getDeclaredAnnotations()), classTransformer);
    }
 
    public static <T> WeldClass<T> of(AnnotatedType<T> annotatedType, ClassTransformer classTransformer)
    {
-      return new WeldClassImpl<T>(annotatedType.getJavaClass(), annotatedType.getBaseType(), annotatedType, annotatedType.getTypeClosure(), buildAnnotationMap(annotatedType.getAnnotations()), buildAnnotationMap(annotatedType.getAnnotations()), classTransformer);
+      return new WeldClassImpl<T>(annotatedType.getJavaClass(), annotatedType.getBaseType(), annotatedType, new TypeClosureLazyValueHolder(annotatedType.getTypeClosure()), buildAnnotationMap(annotatedType.getAnnotations()), buildAnnotationMap(annotatedType.getAnnotations()), classTransformer);
    }
 
    public static <T> WeldClass<T> of(Class<T> rawType, Type type, ClassTransformer classTransformer)
    {
-      return new WeldClassImpl<T>(rawType, type, null, new HierarchyDiscovery(type).getTypeClosure(), buildAnnotationMap(rawType.getAnnotations()), buildAnnotationMap(rawType.getDeclaredAnnotations()), classTransformer);
+      return new WeldClassImpl<T>(rawType, type, null, new TypeClosureLazyValueHolder(type), buildAnnotationMap(rawType.getAnnotations()), buildAnnotationMap(rawType.getDeclaredAnnotations()), classTransformer);
    }
 
-   protected WeldClassImpl(Class<T> rawType, Type type, AnnotatedType<T> annotatedType, Set<Type> typeClosure, Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, ClassTransformer classTransformer)
+   protected WeldClassImpl(Class<T> rawType, Type type, AnnotatedType<T> annotatedType, LazyValueHolder<Set<Type>> typeClosure, Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, ClassTransformer classTransformer)
    {
       super(annotationMap, declaredAnnotationMap, classTransformer, rawType, type, typeClosure);
 ",2010-11-16T16:13:05Z,221
"@@ -33,14 +33,15 @@
 
 import org.jboss.weld.exceptions.DefinitionException;
 import org.jboss.weld.introspector.ConstructorSignature;
+import org.jboss.weld.introspector.TypeClosureLazyValueHolder;
 import org.jboss.weld.introspector.WeldClass;
 import org.jboss.weld.introspector.WeldConstructor;
 import org.jboss.weld.introspector.WeldParameter;
 import org.jboss.weld.logging.messages.ReflectionMessage;
 import org.jboss.weld.manager.BeanManagerImpl;
 import org.jboss.weld.resources.ClassTransformer;
+import org.jboss.weld.util.LazyValueHolder;
 import org.jboss.weld.util.reflection.Formats;
-import org.jboss.weld.util.reflection.HierarchyDiscovery;
 import org.jboss.weld.util.reflection.Reflections;
 import org.jboss.weld.util.reflection.SecureReflections;
 
@@ -66,12 +67,12 @@ public class WeldConstructorImpl<T> extends AbstractWeldCallable<T, T, Construct
 
    public static <T> WeldConstructor<T> of(Constructor<T> constructor, WeldClass<T> declaringClass, ClassTransformer classTransformer)
    {
-      return new WeldConstructorImpl<T>(constructor, constructor.getDeclaringClass(), constructor.getDeclaringClass(), null, new HierarchyDiscovery(constructor.getDeclaringClass()).getTypeClosure(), buildAnnotationMap(constructor.getAnnotations()), buildAnnotationMap(constructor.getDeclaredAnnotations()), declaringClass, classTransformer);
+      return new WeldConstructorImpl<T>(constructor, constructor.getDeclaringClass(), constructor.getDeclaringClass(), null, new TypeClosureLazyValueHolder(constructor.getDeclaringClass()), buildAnnotationMap(constructor.getAnnotations()), buildAnnotationMap(constructor.getDeclaredAnnotations()), declaringClass, classTransformer);
    }
 
    public static <T> WeldConstructor<T> of(AnnotatedConstructor<T> annotatedConstructor, WeldClass<T> declaringClass, ClassTransformer classTransformer)
    {
-      return new WeldConstructorImpl<T>(annotatedConstructor.getJavaMember(), annotatedConstructor.getJavaMember().getDeclaringClass(), annotatedConstructor.getBaseType(), annotatedConstructor, annotatedConstructor.getTypeClosure(), buildAnnotationMap(annotatedConstructor.getAnnotations()), buildAnnotationMap(annotatedConstructor.getAnnotations()), declaringClass, classTransformer);
+      return new WeldConstructorImpl<T>(annotatedConstructor.getJavaMember(), annotatedConstructor.getJavaMember().getDeclaringClass(), annotatedConstructor.getBaseType(), annotatedConstructor, new TypeClosureLazyValueHolder(annotatedConstructor.getTypeClosure()), buildAnnotationMap(annotatedConstructor.getAnnotations()), buildAnnotationMap(annotatedConstructor.getAnnotations()), declaringClass, classTransformer);
    }
 
    /**
@@ -82,7 +83,7 @@ public static <T> WeldConstructor<T> of(AnnotatedConstructor<T> annotatedConstru
     * @param constructor The constructor method
     * @param declaringClass The declaring class
     */
-   private WeldConstructorImpl(Constructor<T> constructor, final Class<T> rawType, final Type type, AnnotatedConstructor<T> annotatedConstructor, Set<Type> typeClosure, Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, WeldClass<T> declaringClass, ClassTransformer classTransformer)
+   private WeldConstructorImpl(Constructor<T> constructor, final Class<T> rawType, final Type type, AnnotatedConstructor<T> annotatedConstructor, LazyValueHolder<Set<Type>> typeClosure, Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, WeldClass<T> declaringClass, ClassTransformer classTransformer)
    {
       super(annotationMap, declaredAnnotationMap, classTransformer, constructor, rawType, type, typeClosure, declaringClass);
       this.constructor = constructor;",2010-11-16T16:13:05Z,222
"@@ -17,7 +17,6 @@
 package org.jboss.weld.introspector.jlr;
 
 import static org.jboss.weld.logging.messages.UtilMessage.ACCESS_ERROR_ON_FIELD;
-import static org.jboss.weld.util.reflection.Reflections.cast;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
@@ -28,11 +27,12 @@
 import javax.enterprise.inject.spi.AnnotatedField;
 
 import org.jboss.weld.exceptions.WeldException;
+import org.jboss.weld.introspector.TypeClosureLazyValueHolder;
 import org.jboss.weld.introspector.WeldClass;
 import org.jboss.weld.introspector.WeldField;
 import org.jboss.weld.resources.ClassTransformer;
+import org.jboss.weld.util.LazyValueHolder;
 import org.jboss.weld.util.reflection.Formats;
-import org.jboss.weld.util.reflection.HierarchyDiscovery;
 import org.jboss.weld.util.reflection.Reflections;
 import org.jboss.weld.util.reflection.SecureReflections;
 
@@ -53,12 +53,12 @@ public class WeldFieldImpl<T, X> extends AbstractWeldMember<T, X, Field> impleme
 
    public static <T, X> WeldFieldImpl<T, X> of(Field field, WeldClass<X> declaringClass, ClassTransformer classTransformer)
    {
-      return new WeldFieldImpl<T, X>(field, Reflections.<Class<T>>cast(field.getType()), field.getGenericType(), new HierarchyDiscovery(field.getGenericType()).getTypeClosure(), buildAnnotationMap(field.getAnnotations()), buildAnnotationMap(field.getDeclaredAnnotations()), declaringClass, classTransformer);
+      return new WeldFieldImpl<T, X>(field, Reflections.<Class<T>> cast(field.getType()), field.getGenericType(), new TypeClosureLazyValueHolder(field.getGenericType()), buildAnnotationMap(field.getAnnotations()), buildAnnotationMap(field.getDeclaredAnnotations()), declaringClass, classTransformer);
    }
 
    public static <X> WeldFieldImpl<?, X> of(AnnotatedField<? super X> annotatedField, WeldClass<X> declaringClass, ClassTransformer classTransformer)
    {
-      return new WeldFieldImpl<Object, X>(annotatedField.getJavaMember(), Reflections.<Class<Object>>cast(annotatedField.getJavaMember().getType()), annotatedField.getBaseType(), annotatedField.getTypeClosure(), buildAnnotationMap(annotatedField.getAnnotations()), buildAnnotationMap(annotatedField.getAnnotations()), declaringClass, classTransformer);
+      return new WeldFieldImpl<Object, X>(annotatedField.getJavaMember(), Reflections.<Class<Object>> cast(annotatedField.getJavaMember().getType()), annotatedField.getBaseType(), new TypeClosureLazyValueHolder(annotatedField.getTypeClosure()), buildAnnotationMap(annotatedField.getAnnotations()), buildAnnotationMap(annotatedField.getAnnotations()), declaringClass, classTransformer);
    }
 
    /**
@@ -70,7 +70,7 @@ public static <X> WeldFieldImpl<?, X> of(AnnotatedField<? super X> annotatedFiel
     * @param field The actual field
     * @param declaringClass The abstraction of the declaring class
     */
-   private WeldFieldImpl(Field field, final Class<T> rawType, final Type type, Set<Type> typeClosure, Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, WeldClass<X> declaringClass, ClassTransformer classTransformer)
+   private WeldFieldImpl(Field field, final Class<T> rawType, final Type type, LazyValueHolder<Set<Type>> typeClosure, Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, WeldClass<X> declaringClass, ClassTransformer classTransformer)
    {
       super(annotationMap, declaredAnnotationMap, classTransformer, field, rawType, type, typeClosure, declaringClass);
       this.field = field;",2010-11-16T16:13:05Z,223
"@@ -32,13 +32,14 @@
 
 import org.jboss.weld.exceptions.DefinitionException;
 import org.jboss.weld.introspector.MethodSignature;
+import org.jboss.weld.introspector.TypeClosureLazyValueHolder;
 import org.jboss.weld.introspector.WeldClass;
 import org.jboss.weld.introspector.WeldMethod;
 import org.jboss.weld.introspector.WeldParameter;
 import org.jboss.weld.logging.messages.ReflectionMessage;
 import org.jboss.weld.resources.ClassTransformer;
+import org.jboss.weld.util.LazyValueHolder;
 import org.jboss.weld.util.reflection.Formats;
-import org.jboss.weld.util.reflection.HierarchyDiscovery;
 import org.jboss.weld.util.reflection.Reflections;
 import org.jboss.weld.util.reflection.SecureReflections;
 
@@ -67,12 +68,12 @@ public class WeldMethodImpl<T, X> extends AbstractWeldCallable<T, X, Method> imp
 
    public static <T, X> WeldMethodImpl<T, X> of(Method method, WeldClass<X> declaringClass, ClassTransformer classTransformer)
    {
-      return new WeldMethodImpl<T, X>(method, Reflections.<Class<T>>cast(method.getReturnType()), method.getGenericReturnType(), new HierarchyDiscovery(method.getGenericReturnType()).getTypeClosure(), null, buildAnnotationMap(method.getAnnotations()), buildAnnotationMap(method.getDeclaredAnnotations()), declaringClass, classTransformer);
+      return new WeldMethodImpl<T, X>(method, Reflections.<Class<T>> cast(method.getReturnType()), method.getGenericReturnType(), new TypeClosureLazyValueHolder(method.getGenericReturnType()), null, buildAnnotationMap(method.getAnnotations()), buildAnnotationMap(method.getDeclaredAnnotations()), declaringClass, classTransformer);
    }
 
    public static <T, X> WeldMethodImpl<T, X> of(AnnotatedMethod<? super X> method, WeldClass<X> declaringClass, ClassTransformer classTransformer)
    {
-      return new WeldMethodImpl<T, X>(method.getJavaMember(), Reflections.<Class<T>>cast(method.getJavaMember().getReturnType()), method.getBaseType(), method.getTypeClosure(), method, buildAnnotationMap(method.getAnnotations()), buildAnnotationMap(method.getAnnotations()), declaringClass, classTransformer);
+      return new WeldMethodImpl<T, X>(method.getJavaMember(), Reflections.<Class<T>> cast(method.getJavaMember().getReturnType()), method.getBaseType(), new TypeClosureLazyValueHolder(method.getTypeClosure()), method, buildAnnotationMap(method.getAnnotations()), buildAnnotationMap(method.getAnnotations()), declaringClass, classTransformer);
    }
 
    /**
@@ -84,7 +85,7 @@ public static <T, X> WeldMethodImpl<T, X> of(AnnotatedMethod<? super X> method,
     * @param method The underlying method
     * @param declaringClass The declaring class abstraction
     */
-   private WeldMethodImpl(Method method, final Class<T> rawType, final Type type, Set<Type> typeClosure, AnnotatedMethod<? super X> annotatedMethod, Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, WeldClass<X> declaringClass, ClassTransformer classTransformer)
+   private WeldMethodImpl(Method method, final Class<T> rawType, final Type type, LazyValueHolder<Set<Type>> typeClosure, AnnotatedMethod<? super X> annotatedMethod, Map<Class<? extends Annotation>, Annotation> annotationMap, Map<Class<? extends Annotation>, Annotation> declaredAnnotationMap, WeldClass<X> declaringClass, ClassTransformer classTransformer)
    {
       super(annotationMap, declaredAnnotationMap, classTransformer, method, rawType, type, typeClosure, declaringClass);
       this.method = method;",2010-11-16T16:13:05Z,224
"@@ -26,11 +26,12 @@
 import javax.enterprise.inject.spi.AnnotatedCallable;
 
 import org.jboss.weld.exceptions.IllegalArgumentException;
+import org.jboss.weld.introspector.TypeClosureLazyValueHolder;
 import org.jboss.weld.introspector.WeldCallable;
 import org.jboss.weld.introspector.WeldClass;
 import org.jboss.weld.introspector.WeldParameter;
 import org.jboss.weld.resources.ClassTransformer;
-import org.jboss.weld.util.reflection.HierarchyDiscovery;
+import org.jboss.weld.util.LazyValueHolder;
 
 /**
  * Represents a parameter
@@ -46,12 +47,12 @@ public class WeldParameterImpl<T, X> extends AbstractWeldAnnotated<T, Object> im
    
    public static <T, X> WeldParameter<T, X> of(Annotation[] annotations, Class<T> rawType, Type type, WeldCallable<?, X, ?> declaringMember, int position, ClassTransformer classTransformer)
    {
-      return new WeldParameterImpl<T, X>(annotations, rawType, type, new HierarchyDiscovery(type).getTypeClosure(), declaringMember, position, classTransformer);
+      return new WeldParameterImpl<T, X>(annotations, rawType, type, new TypeClosureLazyValueHolder(type), declaringMember, position, classTransformer);
    }
    
    public static <T, X> WeldParameter<T, X> of(Set<Annotation> annotations, Class<T> rawType, Type type, WeldCallable<?, X, ?> declaringMember, int position, ClassTransformer classTransformer)
    {
-      return new WeldParameterImpl<T, X>(annotations.toArray(EMPTY_ANNOTATIONS), rawType, type, new HierarchyDiscovery(type).getTypeClosure(), declaringMember, position, classTransformer);
+      return new WeldParameterImpl<T, X>(annotations.toArray(EMPTY_ANNOTATIONS), rawType, type, new TypeClosureLazyValueHolder(type), declaringMember, position, classTransformer);
    }
    
    private final int position;
@@ -63,7 +64,7 @@ public static <T, X> WeldParameter<T, X> of(Set<Annotation> annotations, Class<T
     * @param annotations The annotations array
     * @param type The type of the parameter
     */
-   protected WeldParameterImpl(Annotation[] annotations, Class<T> rawType, Type type, Set<Type> typeClosure, WeldCallable<?, X, ?> declaringMember, int position, ClassTransformer classTransformer)
+   protected WeldParameterImpl(Annotation[] annotations, Class<T> rawType, Type type, LazyValueHolder<Set<Type>> typeClosure, WeldCallable<?, X, ?> declaringMember, int position, ClassTransformer classTransformer)
    {
       super(buildAnnotationMap(annotations), buildAnnotationMap(annotations), classTransformer, rawType, type, typeClosure);
       this.declaringMember = declaringMember;",2010-11-16T16:13:05Z,225
"@@ -25,7 +25,7 @@
 import java.lang.reflect.Type;
 import java.lang.reflect.TypeVariable;
 import java.security.AccessControlException;
-import java.util.HashMap;
+import java.util.Collections;
 import java.util.Map;
 import java.util.Set;
 
@@ -39,32 +39,30 @@ public class HierarchyDiscovery {
 
     private final Type type;
 
-    private BiMap<Type, Class<?>> types;
-    private Map<Class, Type> cache = new HashMap<Class, Type>();
+    // should be ok, as there can be only one class in hierarchy
+    private BiMap<Class<?>, Type> types;
 
     public HierarchyDiscovery(Type type) {
         this.type = type;
     }
 
     protected void add(Class<?> clazz, Type type) {
-        types.forcePut(type, clazz);
-        cache.put(clazz, type);
+        types.forcePut(clazz, type);
     }
 
     public Set<Type> getTypeClosure() {
         if (types == null) {
             init();
-            cache = null;
         }
         // Return an independent set with no ties to the BiMap used
-        return new ArraySet<Type>(types.keySet()).trimToSize();
+        return new ArraySet<Type>(types.values()).trimToSize();
     }
 
     public Map<Class<?>, Type> getTypeMap() {
         if (types == null) {
             init();
         }
-        return types.inverse();
+        return Collections.unmodifiableMap(types);
     }
 
     private void init() {
@@ -191,7 +189,7 @@ private Type resolveTypeParameter(ParameterizedType type, Type beanType, TypeVar
 
         // step2. generic super class
         Class<?> superClass = actualType.getSuperclass();
-        Type genericSuperType = cache.get(superClass); // did we resolve already
+        Type genericSuperType = types.get(superClass); // did we resolve already
         if (genericSuperType == null)
             genericSuperType = actualType.getGenericSuperclass();
 
@@ -205,7 +203,7 @@ private Type resolveTypeParameter(ParameterizedType type, Type beanType, TypeVar
             if (interfaceType instanceof ParameterizedType) {
                 Type rawType = ((ParameterizedType) interfaceType).getRawType();
                 if (rawType instanceof Class<?>) {
-                    Type cached = cache.get(Class.class.cast(rawType));
+                    Type cached = types.get(Class.class.cast(rawType));
                     if (cached != null)
                         interfaceType = cached;
                 }",2012-03-08T10:48:08Z,226
"@@ -1,5 +1,5 @@
 # Container a number of properties associated with installing Weld into JBoss AS and running the TCK in JBoss AS
-#jboss.home=/Users/alesj/java_lib/jboss-as-7.1.0.Final/
+jboss.home=/Users/alesj/java_lib/jboss-as-7.1.0.Final/
 org.jboss.testharness.container.javaOpts=-Xms128m -Xmx512m -XX:MaxPermSize=256m -Dorg.jboss.resolver.warning=true -Dsun.rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000
 
 # time to allow before attempting to restart JBoss AS",2012-03-08T10:48:08Z,174
"@@ -270,7 +270,7 @@ private void initEEInjectionPoints()
    @Override
    protected void checkType()
    {
-      if (getAnnotatedItem().isNonStaticMemberClass())
+      if (getAnnotatedItem().isAnonymousClass() || (getAnnotatedItem().isMemberClass() && !getAnnotatedItem().isStatic()))
       {
          throw new DefinitionException(""Simple bean "" + type + "" cannot be a non-static inner class"");
       }",2009-11-03T17:34:07Z,92
"@@ -289,7 +289,7 @@ protected boolean isTypeManagedBeanOrDecoratorOrInterceptor(WeldClass<?> clazz)
       JsfApiAbstraction jsfApiAbstraction = manager.getServices().get(JsfApiAbstraction.class);
       ServletApiAbstraction servletApiAbstraction = manager.getServices().get(ServletApiAbstraction.class);
       return !Extension.class.isAssignableFrom(clazz.getJavaClass()) &&
-             !clazz.isNonStaticMemberClass() &&
+             !(clazz.isAnonymousClass() || (clazz.isMemberClass() && !clazz.isStatic())) &&
              !Reflections.isParamerterizedTypeWithWildcard(javaClass) && 
              !servletApiAbstraction.SERVLET_CLASS.isAssignableFrom(javaClass) && 
              !servletApiAbstraction.FILTER_CLASS.isAssignableFrom(javaClass) && ",2009-11-03T17:34:07Z,165
"@@ -107,9 +107,19 @@ public WeldClass<?> getWeldSuperclass()
       return delegate().getWeldSuperclass();
    }
 
-   public boolean isNonStaticMemberClass()
+   public boolean isLocalClass()
    {
-      return delegate().isNonStaticMemberClass();
+      return delegate().isLocalClass();
+   }
+   
+   public boolean isMemberClass()
+   {
+      return delegate().isMemberClass();
+   }
+   
+   public boolean isAnonymousClass()
+   {
+      return delegate().isAnonymousClass();
    }
 
    @Override",2009-11-03T17:34:07Z,227
"@@ -207,18 +207,17 @@ public interface WeldClass<T> extends WeldAnnotated<T, Class<T>>, AnnotatedType<
     */
    public WeldClass<?> getWeldSuperclass();
 
-   /**
-    * Determine if this is a non-static member class
-    *
-    * @return true if this is a non-static member  
-    */
-   public boolean isNonStaticMemberClass();
-
    public boolean isParameterizedType();
 
    public boolean isAbstract();
 
    public boolean isEnum();
+   
+   public boolean isMemberClass();
+   
+   public boolean isLocalClass();
+   
+   public boolean isAnonymousClass();
 
    public <S> S cast(Object object);
 ",2009-11-03T17:34:07Z,228
"@@ -121,8 +121,10 @@ public class WeldClassImpl<T> extends AbstractWeldAnnotated<T, Class<T>> impleme
    // Cached string representation
    private final String toString;
 
-   private final boolean _nonStaticMemberClass;
    private final boolean _abstract;
+   private final boolean _member;
+   private final boolean _local;
+   private final boolean _anonymous;
    private final boolean _enum;
 
    public static <T> WeldClass<T> of(Class<T> clazz, ClassTransformer classTransformer)
@@ -200,7 +202,9 @@ public Set<WeldField<?, T>> get()
          }
         
       });
-      this._nonStaticMemberClass = Reflections.isNonStaticInnerClass(rawType);
+      this._local = rawType.isLocalClass();
+      this._anonymous = rawType.isAnonymousClass();
+      this._member = rawType.isMemberClass();
       this._abstract = Reflections.isAbstract(rawType);
       this._enum = rawType.isEnum();
 
@@ -538,9 +542,19 @@ public WeldConstructor<T> getDeclaredWeldConstructor(ConstructorSignature signat
       return Collections.unmodifiableSet(annotatedFields.get(annotationType));
    }
 
-   public boolean isNonStaticMemberClass()
+   public boolean isLocalClass()
    {
-      return _nonStaticMemberClass;
+      return _local;
+   }
+   
+   public boolean isAnonymousClass()
+   {
+      return _anonymous;
+   }
+   
+   public boolean isMemberClass()
+   {
+      return _member;
    }
 
    public boolean isAbstract()",2009-11-03T17:34:07Z,221
"@@ -39,6 +39,7 @@
 import org.jboss.weld.introspector.WeldConstructor;
 import org.jboss.weld.introspector.WeldParameter;
 import org.jboss.weld.resources.ClassTransformer;
+import org.jboss.weld.util.Reflections;
 
 import com.google.common.base.Supplier;
 import com.google.common.collect.ListMultimap;
@@ -116,12 +117,24 @@ public List<WeldParameter<?, T>> get()
          }
       }
       
+      // If the class is a (non-static) member class, its constructors parameterTypes array will prefix the
+      // outer class instance, whilst the genericParameterTypes array isn't prefix'd 
+      int nesting = Reflections.getNesting(declaringClass.getJavaClass());
       for (int i = 0; i < constructor.getParameterTypes().length; i++)
       {
+         int gi = i - nesting;
          if (constructor.getParameterAnnotations()[i].length > 0 || annotatedTypeParameters.containsKey(i))
          {
             Class<?> clazz = constructor.getParameterTypes()[i];
-            Type type = constructor.getGenericParameterTypes()[i];
+            Type type;
+            if (constructor.getGenericParameterTypes().length > gi && gi >=0)
+            {
+               type = constructor.getGenericParameterTypes()[gi];
+            }
+            else
+            {
+               type = clazz;
+            }
             WeldParameter<?, T> parameter = null;
             if (annotatedTypeParameters.containsKey(i))
             {
@@ -144,9 +157,9 @@ public List<WeldParameter<?, T>> get()
          {
             Class<?> clazz = constructor.getParameterTypes()[i];
             Type type;
-            if (constructor.getGenericParameterTypes().length > i)
+            if (constructor.getGenericParameterTypes().length > gi && gi >=0)
             {
-               type = constructor.getGenericParameterTypes()[i];
+               type = constructor.getGenericParameterTypes()[gi];
             }
             else
             {",2009-11-03T17:34:07Z,222
"@@ -307,6 +307,18 @@ public static boolean isFinal(Class<?> clazz)
    {
       return Modifier.isFinal(clazz.getModifiers());
    }
+   
+   public static int getNesting(Class<?> clazz)
+   {
+      if (clazz.isMemberClass() && !isStatic(clazz))
+      {
+         return 1 + getNesting(clazz.getDeclaringClass());
+      }
+      else
+      {
+         return 0;
+      }
+   }
 
    /**
     * Checks if member is final
@@ -395,17 +407,6 @@ public static boolean isAbstract(Class<?> clazz)
       return Modifier.isAbstract(clazz.getModifiers());
    }
 
-   /**
-    * Checks if class is a non-static inner one
-    * 
-    * @param clazz Class to Check
-    * @return True if static, false otherwise
-    */
-   public static boolean isNonStaticInnerClass(Class<?> clazz)
-   {
-      return (clazz.isMemberClass() || clazz.isAnonymousClass()) && !isStatic(clazz);
-   }
-
    /**
     * Gets a constructor with matching parameter types
     * ",2009-11-03T17:34:07Z,229
"@@ -1,14 +1,14 @@
 package org.jboss.weld.test.unit.reflection.clazz;
 
 
-class Kangaroo 
+public class Kangaroo 
 {
    LittleKangarooInHerPouch<String> procreate()
    {
       return new LittleKangarooInHerPouch<String>(""Joey"");
    }
 
-   class LittleKangarooInHerPouch<T>
+   public class LittleKangarooInHerPouch<T>
    {
       LittleKangarooInHerPouch(T formalParam)
       {",2009-11-03T17:34:07Z,230
"@@ -0,0 +1,12 @@
+package org.jboss.weld.test.unit.reflection.clazz;
+
+public class Koala
+{
+   
+   public Animal procreate()
+   {
+      class BabyKoala implements Animal {}
+      return new BabyKoala();
+   }
+
+}",2009-11-03T17:34:07Z,231
"@@ -0,0 +1,12 @@
+package org.jboss.weld.test.unit.reflection.clazz;
+
+
+public class Possum
+{
+   
+   public Possum procreate()
+   {
+      return new Possum() {};
+   }
+
+}",2009-11-03T17:34:07Z,232
"@@ -22,12 +22,26 @@ public class WeldClassTest
    private final ClassTransformer transformer = new ClassTransformer(new TypeStore());
    
    @Test(groups = ""broken"", description=""WELD-216"")
-   public void testNonStaticInnerClassWithGenericTypes()
+   public void testMemberClassWithGenericTypes()
    {
       AnnotatedType at = WeldClassImpl.of(new Kangaroo().procreate().getClass(), transformer);
       WeldClassImpl.of(at, transformer);
    }
    
+   @Test(description=""WELD-216"")
+   public void testLocalClassWithGenericTypes()
+   {
+      AnnotatedType at = WeldClassImpl.of(new Koala().procreate().getClass(), transformer);
+      WeldClassImpl.of(at, transformer);
+   }
+   
+   @Test(description=""WELD-216"")
+   public void testAnonymousClassWithGenericTypes()
+   {
+      AnnotatedType at = WeldClassImpl.of(new Possum().procreate().getClass(), transformer);
+      WeldClassImpl.of(at, transformer);
+   }
+   
    @Test
    public void testDeclaredAnnotations()
    {",2009-11-03T17:34:07Z,233
"@@ -44,7 +44,7 @@
 import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
 import static org.jboss.weld.logging.messages.BootstrapMessage.BEAN_IS_BOTH_INTERCEPTOR_AND_DECORATOR;
 import static org.jboss.weld.logging.messages.BootstrapMessage.IGNORING_CLASS_DUE_TO_LOADING_ERROR;
-import static org.slf4j.ext.XLogger.Level.DEBUG;
+import static org.slf4j.ext.XLogger.Level.INFO;
 
 /**
  * @author pmuir
@@ -76,17 +76,17 @@ public BeanDeployer addClass(String className) {
         try {
             clazz = resourceLoader.classForName(className);
         } catch (ResourceLoadingException e) {
-            log.debug(IGNORING_CLASS_DUE_TO_LOADING_ERROR, className);
-            xlog.catching(DEBUG, e);
+            log.info(IGNORING_CLASS_DUE_TO_LOADING_ERROR, className);
+            xlog.catching(INFO, e);
         }
 
         if (clazz != null && !clazz.isAnnotation() && !clazz.isEnum()) {
             WeldClass<?> weldClass = null;
             try {
                 weldClass = classTransformer.loadClass(clazz);
             } catch (ResourceLoadingException e) {
-                log.debug(IGNORING_CLASS_DUE_TO_LOADING_ERROR, className);
-                xlog.catching(DEBUG, e);
+                log.info(IGNORING_CLASS_DUE_TO_LOADING_ERROR, className);
+                xlog.catching(INFO, e);
             }
 
             if (weldClass != null) {",2011-11-03T11:32:52Z,33
"@@ -16,56 +16,15 @@
  */
 package org.jboss.weld.bean;
 
-import static org.jboss.weld.logging.Category.BEAN;
-import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
-import static org.jboss.weld.logging.messages.BeanMessage.CONFLICTING_INTERCEPTOR_BINDINGS;
-import static org.jboss.weld.logging.messages.BeanMessage.FINAL_BEAN_CLASS_WITH_INTERCEPTORS_NOT_ALLOWED;
-import static org.jboss.weld.logging.messages.BeanMessage.FINAL_INTERCEPTED_BEAN_METHOD_NOT_ALLOWED;
-import static org.jboss.weld.logging.messages.BeanMessage.INVOCATION_ERROR;
-import static org.jboss.weld.logging.messages.BeanMessage.ONLY_ONE_SCOPE_ALLOWED;
-import static org.jboss.weld.logging.messages.BeanMessage.PARAMETER_ANNOTATION_NOT_ALLOWED_ON_CONSTRUCTOR;
-import static org.jboss.weld.logging.messages.BeanMessage.PROXY_INSTANTIATION_FAILED;
-import static org.jboss.weld.logging.messages.BeanMessage.SPECIALIZING_BEAN_MUST_EXTEND_A_BEAN;
-import static org.jboss.weld.logging.messages.BeanMessage.USING_DEFAULT_SCOPE;
-import static org.jboss.weld.logging.messages.BeanMessage.USING_SCOPE;
-import static org.jboss.weld.util.reflection.Reflections.cast;
-
-import java.beans.Introspector;
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Type;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-
 import javassist.util.proxy.ProxyObject;
-
-import javax.enterprise.context.Dependent;
-import javax.enterprise.context.NormalScope;
-import javax.enterprise.context.spi.CreationalContext;
-import javax.enterprise.event.Observes;
-import javax.enterprise.inject.Disposes;
-import javax.enterprise.inject.spi.AnnotatedMethod;
-import javax.enterprise.inject.spi.Decorator;
-import javax.enterprise.inject.spi.InjectionPoint;
-import javax.enterprise.inject.spi.InjectionTarget;
-import javax.enterprise.inject.spi.InterceptionType;
-import javax.enterprise.inject.spi.Interceptor;
-import javax.inject.Scope;
-
 import org.jboss.interceptor.builder.InterceptionModelBuilder;
 import org.jboss.interceptor.spi.metadata.ClassMetadata;
 import org.jboss.interceptor.spi.metadata.InterceptorMetadata;
 import org.jboss.interceptor.spi.model.InterceptionModel;
 import org.jboss.interceptor.util.InterceptionUtils;
 import org.jboss.weld.bean.interceptor.SerializableContextualInterceptorReference;
 import org.jboss.weld.bean.interceptor.WeldInterceptorClassMetadata;
-import org.jboss.weld.bean.proxy.CombinedInterceptorAndDecoratorStackMethodHandler;
-import org.jboss.weld.bean.proxy.DecorationHelper;
-import org.jboss.weld.bean.proxy.InterceptedSubclassFactory;
-import org.jboss.weld.bean.proxy.ProxyFactory;
-import org.jboss.weld.bean.proxy.TargetBeanInstance;
+import org.jboss.weld.bean.proxy.*;
 import org.jboss.weld.bootstrap.BeanDeployerEnvironment;
 import org.jboss.weld.bootstrap.api.ServiceRegistry;
 import org.jboss.weld.context.SerializableContextualImpl;
@@ -92,6 +51,23 @@
 import org.jboss.weld.util.reflection.SecureReflections;
 import org.slf4j.cal10n.LocLogger;
 
+import javax.enterprise.context.Dependent;
+import javax.enterprise.context.NormalScope;
+import javax.enterprise.context.spi.CreationalContext;
+import javax.enterprise.event.Observes;
+import javax.enterprise.inject.Disposes;
+import javax.enterprise.inject.spi.*;
+import javax.inject.Scope;
+import java.beans.Introspector;
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Type;
+import java.util.*;
+
+import static org.jboss.weld.logging.Category.BEAN;
+import static org.jboss.weld.logging.LoggerFactory.loggerFactory;
+import static org.jboss.weld.logging.messages.BeanMessage.*;
+import static org.jboss.weld.util.reflection.Reflections.cast;
+
 /**
  * An abstract bean representation common for class-based beans
  * 
@@ -250,30 +226,26 @@ protected void initInterceptionModelForType()
                throw new DeploymentException(CONFLICTING_INTERCEPTOR_BINDINGS, getType() + ""."" + method.getName() + ""()"");
             }
 
-            if (method.isAnnotationPresent(beanManager.getServices().get(EJBApiAbstraction.class).TIMEOUT_ANNOTATION_CLASS))
+            List<Interceptor<?>> methodBoundInterceptors = beanManager.resolveInterceptors(InterceptionType.AROUND_INVOKE, methodBindingAnnotations.toArray(new Annotation[]{}));
+            if (methodBoundInterceptors != null && methodBoundInterceptors.size() > 0)
             {
-               List<Interceptor<?>> methodBoundInterceptors = beanManager.resolveInterceptors(InterceptionType.AROUND_TIMEOUT, methodBindingAnnotations.toArray(new Annotation[]{}));
-               if (methodBoundInterceptors != null && methodBoundInterceptors.size() > 0)
+               if (method.isFinal())
                {
-                  if (method.isFinal())
-                  {
-                     throw new DefinitionException(FINAL_INTERCEPTED_BEAN_METHOD_NOT_ALLOWED, method, methodBoundInterceptors.get(0).getBeanClass().getName());
-                  }
-                  builder.interceptAroundTimeout(Reflections.<AnnotatedMethod<T>>cast(method).getJavaMember()).with(toSerializableContextualArray(methodBoundInterceptors));
+                  throw new DefinitionException(FINAL_INTERCEPTED_BEAN_METHOD_NOT_ALLOWED, method, methodBoundInterceptors.get(0).getBeanClass().getName());
                }
+               builder.interceptAroundInvoke(Reflections.<AnnotatedMethod<T>>cast(method).getJavaMember()).with(toSerializableContextualArray(methodBoundInterceptors));
             }
-            else
+            
+            methodBoundInterceptors = beanManager.resolveInterceptors(InterceptionType.AROUND_TIMEOUT, methodBindingAnnotations.toArray(new Annotation[]{}));
+            if (methodBoundInterceptors != null && methodBoundInterceptors.size() > 0)
             {
-               List<Interceptor<?>> methodBoundInterceptors = beanManager.resolveInterceptors(InterceptionType.AROUND_INVOKE, methodBindingAnnotations.toArray(new Annotation[]{}));
-               if (methodBoundInterceptors != null && methodBoundInterceptors.size() > 0)
+               if (method.isFinal())
                {
-                  if (method.isFinal())
-                  {
-                     throw new DefinitionException(FINAL_INTERCEPTED_BEAN_METHOD_NOT_ALLOWED, method, methodBoundInterceptors.get(0).getBeanClass().getName());
-                  }
-                  builder.interceptAroundInvoke(Reflections.<AnnotatedMethod<T>>cast(method).getJavaMember()).with(toSerializableContextualArray(methodBoundInterceptors));
+                  throw new DefinitionException(FINAL_INTERCEPTED_BEAN_METHOD_NOT_ALLOWED, method, methodBoundInterceptors.get(0).getBeanClass().getName());
                }
+               builder.interceptAroundTimeout(Reflections.<AnnotatedMethod<T>>cast(method).getJavaMember()).with(toSerializableContextualArray(methodBoundInterceptors));
             }
+
          }
       }
 ",2011-09-12T00:15:03Z,2
"@@ -56,10 +56,10 @@ PRODUCER_CAST_ERROR=Cannot cast producer type {0} to bean type {1}
 RETURN_TYPE_MUST_BE_CONCRETE=Return type must be concrete:  {0}
 NULL_NOT_ALLOWED_FROM_PRODUCER=Cannot return null from a non-dependent producer method:  {0}
 NON_SERIALIZABLE_PRODUCT_ERROR=Producers cannot declare passivating scope and return a non-serializable class:  {0}
-NON_SERIALIZABLE_FIELD_INJECTION_ERROR=Producers cannot produce non-serializable instances for injection into non-transient fields of passivating beans\\n\\nProducer\:  {0}\\nInjection Point\:  {1}
-NON_SERIALIZABLE_INITIALIZER_PARAM_INJECTION_ERROR=Producers cannot produce non-serializable instances for injection into parameters of initializers of beans declaring passivating scope.\\n\\nBean\:  {0}\\nInjection Point\:  {1}
-NON_SERIALIZABLE_PRODUCER_PARAM_INJECTION_ERROR=Producers cannot produce non-serializable instances for injection into parameters of producer methods declaring passivating scope.\\n\\nBean\:  {0}\\nInjection Point\:  {1}
-NON_SERIALIZABLE_CONSTRUCTOR_PARAM_INJECTION_ERROR=Producers cannot produce non-serializable instances for injection into parameters of constructors of beans declaring passivating scope.\\n\\nBean\:  {0}\\nInjection Point\:  {1}
+NON_SERIALIZABLE_FIELD_INJECTION_ERROR=Producers cannot produce non-serializable instances for injection into non-transient fields of passivating beans\n\nProducer:  {0}\nInjection Point:  {1}
+NON_SERIALIZABLE_INITIALIZER_PARAM_INJECTION_ERROR=Producers cannot produce non-serializable instances for injection into parameters of initializers of beans declaring passivating scope.\n\nBean:  {0}\nInjection Point:  {1}
+NON_SERIALIZABLE_PRODUCER_PARAM_INJECTION_ERROR=Producers cannot produce non-serializable instances for injection into parameters of producer methods declaring passivating scope.\n\nBean:  {0}\nInjection Point:  {1}
+NON_SERIALIZABLE_CONSTRUCTOR_PARAM_INJECTION_ERROR=Producers cannot produce non-serializable instances for injection into parameters of constructors of beans declaring passivating scope.\n\nBean:  {0}\nInjection Point:  {1}
 DELEGATE_ON_NON_INITIALIZER_METHOD=Method with @Delegate parameter must be an initializer method:  {0}
 NO_DELEGATE_FOR_DECORATOR=No delegate injection points defined for {0}
 TOO_MANY_DELEGATES_FOR_DECORATOR=Too many delegate injection points defined for {0}
@@ -75,7 +75,7 @@ FINAL_BEAN_CLASS_WITH_DECORATORS_NOT_ALLOWED=Bean class which has decorators can
 FINAL_DECORATED_BEAN_METHOD_NOT_ALLOWED=Decorated bean method {0} (decorated by {1}) cannot be declared final
 PUBLIC_FIELD_ON_NORMAL_SCOPED_BEAN_NOT_ALLOWED=Normal scoped managed bean implementation class has a public field:  {0}
 PARAMETER_ANNOTATION_NOT_ALLOWED_ON_CONSTRUCTOR=Managed bean constructor must not have a parameter annotated {0}:  {1}
-MULTIPLE_DISPOSAL_METHODS=Cannot declare multiple disposal methods for this producer method.\\n\\nProducer method\:  {0}\\nDisposal methods\:  {1}
+MULTIPLE_DISPOSAL_METHODS=Cannot declare multiple disposal methods for this producer method.\n\nProducer method:  {0}\nDisposal methods:  {1}
 PRODUCER_METHOD_NOT_SPECIALIZING=Specialized producer method does not override a method on the direct superclass:  {0}
 EJB_NOT_FOUND=Could not find the EJB in JNDI:  {0}
 EJB_CANNOT_BE_INTERCEPTOR=Enterprise beans cannot be interceptors:  {0}",2012-12-14T22:27:25Z,17
"@@ -36,7 +36,7 @@
         <arquillian.glassfish.version>1.0.0.CR1</arquillian.glassfish.version>
         <arquillian.jboss6.version>1.0.0.CR2</arquillian.jboss6.version>
         <atinject.tck.version>1.0.0-PFD-3</atinject.tck.version>
-        <cal10n.version>0.7.2</cal10n.version>
+        <cal10n.version>0.7.4</cal10n.version>
         <cargo.maven2.plugin.version>1.0</cargo.maven2.plugin.version>
         <cdi.api.version>1.0-SP4</cdi.api.version>
         <cdi.tck.version>1.0.4.SP3</cdi.tck.version>",2012-12-14T22:27:25Z,161
"@@ -37,7 +37,7 @@
         <arquillian.glassfish.version>1.0.0.CR1</arquillian.glassfish.version>
         <arquillian.jboss6.version>1.0.0.CR2</arquillian.jboss6.version>
         <atinject.tck.version>1.0.0-PFD-3</atinject.tck.version>
-        <cal10n.version>0.7.4</cal10n.version>
+        <cal10n.version>0.7.6</cal10n.version>
         <cargo.maven2.plugin.version>1.0</cargo.maven2.plugin.version>
         <cdi.api.version>1.0-SP4</cdi.api.version>
         <cdi.tck.version>1.0.4.SP3</cdi.tck.version>",2013-07-04T14:16:04Z,161
"@@ -28,9 +28,8 @@
 import javax.enterprise.inject.spi.Bean;
 import javax.enterprise.inject.spi.InjectionPoint;
 
-import org.jboss.weld.bean.ForwardingBean;
 import org.jboss.weld.manager.BeanManagerImpl;
-import org.jboss.weld.serialization.BeanHolder;
+import org.jboss.weld.util.bean.SerializableForwardingBean;
 import org.jboss.weld.util.reflection.Reflections;
 
 /**
@@ -53,28 +52,13 @@ protected BeanMetadataBean(String idSuffix, BeanManagerImpl beanManager) {
     protected Bean<?> newInstance(InjectionPoint ip, CreationalContext<Bean<?>> creationalContext) {
         Contextual<?> contextual = getParentCreationalContext(creationalContext).getContextual();
         if (contextual instanceof Bean<?>) {
-            return SerializableProxy.of((Bean<?>) contextual);
+            if (contextual instanceof Serializable) {
+                return Reflections.cast(contextual);
+            } else {
+                return SerializableForwardingBean.of((Bean<?>) contextual);
+            }
         } else {
             throw new IllegalArgumentException(""Unable to determine Bean metadata for "" + ip);
         }
     }
-
-    protected static class SerializableProxy<T> extends ForwardingBean<T> implements Serializable {
-
-        public static <T> SerializableProxy<T> of(Bean<T> bean) {
-            return new SerializableProxy<T>(bean);
-        }
-
-        private static final long serialVersionUID = 3010119463206410943L;
-        private BeanHolder<T> holder;
-
-        protected SerializableProxy(Bean<T> bean) {
-            this.holder = new BeanHolder<T>(bean);
-        }
-
-        @Override
-        protected Bean<T> delegate() {
-            return holder.get();
-        }
-    }
 }",2012-09-19T16:06:24Z,234
"@@ -21,6 +21,7 @@
  */
 package org.jboss.weld.bean.builtin;
 
+import java.io.Serializable;
 import java.lang.annotation.Annotation;
 import java.util.Collections;
 import java.util.Set;
@@ -36,6 +37,7 @@
 import org.jboss.weld.context.WeldCreationalContext;
 import org.jboss.weld.literal.InterceptedLiteral;
 import org.jboss.weld.manager.BeanManagerImpl;
+import org.jboss.weld.util.bean.SerializableForwardingBean;
 
 /**
  * Allows an interceptor to obtain information about the bean it intercepts.
@@ -63,7 +65,12 @@ protected Bean<?> newInstance(InjectionPoint ip, CreationalContext<Bean<?>> ctx)
         Contextual<?> interceptedContextual = interceptedBeanContext.getContextual();
 
         if (interceptedContextual instanceof Bean<?>) {
-            return SerializableProxy.of((Bean<?>) interceptedContextual);
+            Bean<?> bean = (Bean<?>) interceptedContextual;
+            if (bean instanceof Serializable) {
+                return bean;
+            } else {
+                return SerializableForwardingBean.of(bean);
+            }
         } else {
             throw new IllegalArgumentException(""Unable to determine @Intercepted Bean<?> for this interceptor."");
         }",2012-09-19T16:06:24Z,235
"@@ -27,10 +27,12 @@
 
 import javax.enterprise.context.spi.Contextual;
 import javax.enterprise.context.spi.CreationalContext;
+import javax.enterprise.inject.spi.Bean;
 import javax.enterprise.inject.spi.InjectionPoint;
 
 import org.jboss.weld.context.api.ContextualInstance;
 import org.jboss.weld.injection.spi.ResourceReference;
+import org.jboss.weld.util.bean.SerializableForwardingBean;
 import org.jboss.weld.util.reflection.Reflections;
 
 import edu.umd.cs.findbugs.annotations.SuppressWarnings;
@@ -137,7 +139,15 @@ public Contextual<T> getContextual() {
     }
 
     public void storeContextual() {
-        persistentContextual = contextual;
+        if (contextual instanceof Serializable) {
+            persistentContextual = contextual;
+        } else {
+            if (contextual instanceof Bean<?>) {
+                persistentContextual = SerializableForwardingBean.of(Reflections.<Bean<T>> cast(contextual));
+            } else {
+                throw new IllegalArgumentException(""Unable to store non-serializable "" + contextual);
+            }
+        }
     }
 
     public InjectionPoint loadInjectionPoint() {",2012-09-19T16:06:24Z,26
"@@ -124,7 +124,6 @@ private void storeMetadata(CreationalContext<T> creationalContext) {
         if (disposalMethod != null) {
             if (disposalMethod.hasBeanMetadataParameter()) {
                 WeldCreationalContext<T> ctx = getWeldCreationalContext(creationalContext);
-                checkValue(ctx.getContextual());
                 ctx.storeContextual();
             }
             if (disposalMethod.hasInjectionPointMetadataParameter()) {",2012-09-19T16:06:24Z,236
"@@ -0,0 +1,217 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2012, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.weld.serialization;
+
+import java.io.Serializable;
+
+import javax.enterprise.inject.spi.AnnotatedCallable;
+import javax.enterprise.inject.spi.AnnotatedConstructor;
+import javax.enterprise.inject.spi.AnnotatedField;
+import javax.enterprise.inject.spi.AnnotatedMethod;
+import javax.enterprise.inject.spi.AnnotatedParameter;
+import javax.enterprise.inject.spi.Bean;
+import javax.enterprise.inject.spi.InjectionPoint;
+
+import org.jboss.weld.exceptions.IllegalArgumentException;
+import org.jboss.weld.exceptions.IllegalStateException;
+import org.jboss.weld.logging.messages.BeanMessage;
+import org.jboss.weld.util.reflection.Reflections;
+
+/**
+ * Serializable holder for {@link InjectionPoint}.
+ *
+ * @author Jozef Hartinger
+ * 
+ */
+public class InjectionPointHolder extends AbstractSerializableHolder<InjectionPoint> {
+
+    private static final long serialVersionUID = -6128821485743815308L;
+
+    private final InjectionPointIdentifier identifier;
+
+    public InjectionPointHolder(InjectionPoint ip) {
+        if (ip.getBean() == null) {
+            this.identifier = new NoopInjectionPointIdentifier(ip);
+        } else if (ip.getAnnotated() instanceof AnnotatedField<?>) {
+            AnnotatedField<?> field = Reflections.cast(ip.getAnnotated());
+            this.identifier = new FieldInjectionPointIdentifier(ip.getBean(), field);
+        } else if (ip.getAnnotated() instanceof AnnotatedParameter<?>) {
+            AnnotatedParameter<?> parameter = Reflections.cast(ip.getAnnotated());
+            if (parameter.getDeclaringCallable() instanceof AnnotatedConstructor<?>) {
+                AnnotatedConstructor<?> constructor = Reflections.cast(parameter.getDeclaringCallable());
+                this.identifier = new ConstructorParameterInjectionPointIdentifier(ip.getBean(), parameter.getPosition(), constructor);
+            } else if (parameter.getDeclaringCallable() instanceof AnnotatedMethod<?>) {
+                AnnotatedMethod<?> method = Reflections.cast(parameter.getDeclaringCallable());
+                this.identifier = new MethodParameterInjectionPointIdentifier(ip.getBean(), parameter.getPosition(), method);
+            } else {
+                throw new IllegalArgumentException(BeanMessage.INVALID_ANNOTATED_CALLABLE, parameter.getDeclaringCallable());
+            }
+        } else {
+            throw new IllegalArgumentException(BeanMessage.INVALID_ANNOTATED_OF_INJECTION_POINT, ip.getAnnotated(), ip);
+        }
+    }
+
+    @Override
+    protected InjectionPoint initialize() {
+        return identifier.restoreInjectionPoint();
+    }
+
+    private static interface InjectionPointIdentifier extends Serializable {
+        InjectionPoint restoreInjectionPoint();
+    }
+
+    /**
+     * Noop implementation of {@link InjectionPointIdentifier}. An instance is serializable as long as the underlying
+     * {@link InjectionPoint} is serializable. This identifier should only be used to wrap {@link InjectionPoint}s that do not
+     * belong to a bean.
+     * 
+     * @author Jozef Hartinger
+     * 
+     */
+    private static class NoopInjectionPointIdentifier implements InjectionPointIdentifier {
+
+        private static final long serialVersionUID = 6952579330771485841L;
+
+        private final InjectionPoint ip;
+
+        public NoopInjectionPointIdentifier(InjectionPoint ip) {
+            this.ip = ip;
+        }
+
+        @Override
+        public InjectionPoint restoreInjectionPoint() {
+            return ip;
+        }
+
+    }
+
+    private abstract static class AbstractInjectionPointIdentifier implements InjectionPointIdentifier {
+
+        private static final long serialVersionUID = -8167922066673252787L;
+
+        private final BeanHolder<?> bean;
+
+        public AbstractInjectionPointIdentifier(Bean<?> bean) {
+            this.bean = BeanHolder.of(bean);
+        }
+
+        @Override
+        public InjectionPoint restoreInjectionPoint() {
+            InjectionPoint injectionPoint = null;
+            for (InjectionPoint ip : bean.get().getInjectionPoints()) {
+                if (matches(ip)) {
+                    if (injectionPoint != null) {
+                        throw new IllegalStateException(BeanMessage.UNABLE_TO_RESTORE_INJECTION_POINT_MULTIPLE, bean.get(), injectionPoint, ip);
+                    }
+                    injectionPoint = ip;
+                }
+            }
+            if (injectionPoint == null) {
+                throw new IllegalStateException(BeanMessage.UNABLE_TO_RESTORE_INJECTION_POINT, bean.get());
+            }
+            return injectionPoint;
+        }
+
+        protected abstract boolean matches(InjectionPoint ip);
+    }
+
+    private static class FieldInjectionPointIdentifier extends AbstractInjectionPointIdentifier {
+
+        private static final long serialVersionUID = 4581216810217284043L;
+
+        private final FieldHolder field;
+
+        public FieldInjectionPointIdentifier(Bean<?> bean, AnnotatedField<?> field) {
+            super(bean);
+            this.field = new FieldHolder(field.getJavaMember());
+        }
+
+        @Override
+        protected boolean matches(InjectionPoint ip) {
+            if (ip.getAnnotated() instanceof AnnotatedField<?>) {
+                AnnotatedField<?> annotatedField = Reflections.cast(ip.getAnnotated());
+                return (field.get().equals(annotatedField.getJavaMember()));
+            }
+            return false;
+        }
+    }
+
+    private abstract static class AbstractParameterInjectionPointIdentifier extends AbstractInjectionPointIdentifier {
+
+        private static final long serialVersionUID = -3618042716814281161L;
+
+        private final int position;
+
+        public AbstractParameterInjectionPointIdentifier(Bean<?> bean, int position) {
+            super(bean);
+            this.position = position;
+        }
+
+        @Override
+        protected boolean matches(InjectionPoint ip) {
+            if (ip.getAnnotated() instanceof AnnotatedParameter<?>) {
+                AnnotatedParameter<?> annotatedParameter = Reflections.cast(ip.getAnnotated());
+                return position == annotatedParameter.getPosition() && matches(ip, annotatedParameter.getDeclaringCallable());
+            }
+            return false;
+        }
+
+        protected abstract boolean matches(InjectionPoint ip, AnnotatedCallable<?> annotatedCallable);
+    }
+
+    private static class ConstructorParameterInjectionPointIdentifier extends AbstractParameterInjectionPointIdentifier {
+
+        private static final long serialVersionUID = 638702977751948835L;
+
+        private final ConstructorHolder<?> constructor;
+
+        public ConstructorParameterInjectionPointIdentifier(Bean<?> bean, int position, AnnotatedConstructor<?> constructor) {
+            super(bean, position);
+            this.constructor = ConstructorHolder.of(constructor.getJavaMember());
+        }
+
+        @Override
+        protected boolean matches(InjectionPoint ip, AnnotatedCallable<?> annotatedCallable) {
+            if (annotatedCallable instanceof AnnotatedConstructor<?>) {
+                AnnotatedConstructor<?> annotatedConstructor = Reflections.cast(ip.getAnnotated());
+                return constructor.get().equals(annotatedConstructor.getJavaMember());
+            }
+            return false;
+        }
+    }
+
+    private static class MethodParameterInjectionPointIdentifier extends AbstractParameterInjectionPointIdentifier {
+
+        private static final long serialVersionUID = -3263543692438746424L;
+
+        private final MethodHolder method;
+
+        public MethodParameterInjectionPointIdentifier(Bean<?> bean, int position, AnnotatedMethod<?> constructor) {
+            super(bean, position);
+            this.method = new MethodHolder(constructor.getJavaMember());
+        }
+
+        @Override
+        protected boolean matches(InjectionPoint ip, AnnotatedCallable<?> annotatedCallable) {
+            if (annotatedCallable instanceof AnnotatedMethod<?>) {
+                AnnotatedConstructor<?> annotatedMethod = Reflections.cast(ip.getAnnotated());
+                return method.get().equals(annotatedMethod.getJavaMember());
+            }
+            return false;
+        }
+    }
+}",2012-09-19T16:06:24Z,237
"@@ -0,0 +1,44 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2012, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.weld.util.bean;
+
+import java.io.Serializable;
+
+import javax.enterprise.inject.spi.Bean;
+
+import org.jboss.weld.bean.ForwardingBean;
+import org.jboss.weld.serialization.BeanHolder;
+
+public class SerializableForwardingBean<T> extends ForwardingBean<T> implements Serializable {
+
+    private static final long serialVersionUID = 6857565199244590365L;
+
+    public static <T> SerializableForwardingBean<T> of(Bean<T> bean) {
+        return new SerializableForwardingBean<T>(bean);
+    }
+
+    private final BeanHolder<T> holder;
+
+    public SerializableForwardingBean(Bean<T> bean) {
+        this.holder = new BeanHolder<T>(bean);
+    }
+
+    @Override
+    protected Bean<T> delegate() {
+        return holder.get();
+    }
+}",2012-09-19T16:06:24Z,238
"@@ -22,17 +22,16 @@
 import static org.jboss.weld.logging.messages.BeanMessage.CREATED_SESSION_BEAN_PROXY;
 import static org.jboss.weld.logging.messages.BeanMessage.INVALID_REMOVE_METHOD_INVOCATION;
 
+import java.io.ObjectStreamException;
 import java.io.Serializable;
 import java.lang.reflect.Method;
-import java.util.Collection;
-
-import javax.enterprise.context.spi.CreationalContext;
 
 import org.jboss.weld.annotated.enhanced.MethodSignature;
 import org.jboss.weld.annotated.enhanced.jlr.MethodSignatureImpl;
 import org.jboss.weld.bean.SessionBean;
 import org.jboss.weld.ejb.api.SessionObjectReference;
 import org.jboss.weld.exceptions.UnsupportedOperationException;
+import org.jboss.weld.manager.BeanManagerImpl;
 import org.jboss.weld.util.reflection.Reflections;
 import org.slf4j.cal10n.LocLogger;
 
@@ -50,24 +49,23 @@ public class EnterpriseBeanProxyMethodHandler<T> implements MethodHandler, Seria
     // The log provider
     private static final LocLogger log = loggerFactory().getLogger(BEAN);
 
+    private final BeanManagerImpl manager;
+    private final String beanId;
     private final SessionObjectReference reference;
-    private final Class<?> objectInterface;
-    private final Collection<MethodSignature> removeMethodSignatures;
-    private final boolean clientCanCallRemoveMethods;
-    private final boolean stateful;
+
+    private final transient SessionBean<T> bean;
 
     /**
      * Constructor
      *
      * @param bean the session bean
      * @param creationalContext
      */
-    public EnterpriseBeanProxyMethodHandler(SessionBean<T> bean, CreationalContext<T> creationalContext) {
-        this.objectInterface = bean.getEjbDescriptor().getObjectInterface();
-        this.removeMethodSignatures = bean.getEjbDescriptor().getRemoveMethodSignatures();
-        this.clientCanCallRemoveMethods = bean.isClientCanCallRemoveMethods();
+    public EnterpriseBeanProxyMethodHandler(SessionBean<T> bean) {
+        this.bean = bean;
+        this.manager = bean.getBeanManager();
+        this.beanId = bean.getId();
         this.reference = bean.createReference();
-        this.stateful = bean.getEjbDescriptor().isStateful();
         log.trace(CREATED_SESSION_BEAN_PROXY, bean);
     }
 
@@ -87,17 +85,18 @@ public EnterpriseBeanProxyMethodHandler(SessionBean<T> bean, CreationalContext<T
      * @return the resulting value of the method invocation.
      * @throws Throwable if the method invocation fails.
      */
+    @Override
     public Object invoke(Object self, Method method, Method proceed, Object[] args) throws Throwable {
         if (""destroy"".equals(method.getName()) && Marker.isMarker(0, method, args)) {
-            if (stateful) {
+            if (bean.getEjbDescriptor().isStateful()) {
                 if(!reference.isRemoved()) {
                     reference.remove();
                 }
             }
             return null;
         }
 
-        if (!clientCanCallRemoveMethods && isRemoveMethod(method)) {
+        if (!bean.isClientCanCallRemoveMethods() && isRemoveMethod(method)) {
             throw new UnsupportedOperationException(INVALID_REMOVE_METHOD_INVOCATION, method);
         }
         Class<?> businessInterface = getBusinessInterface(method);
@@ -114,20 +113,34 @@ public Object invoke(Object self, Method method, Method proceed, Object[] args)
     private boolean isRemoveMethod(Method method) {
         // TODO we can certainly optimize this search algorithm!
         MethodSignature methodSignature = new MethodSignatureImpl(method);
-        return removeMethodSignatures.contains(methodSignature);
+        return bean.getEjbDescriptor().getRemoveMethodSignatures().contains(methodSignature);
     }
 
     private boolean isToStringMethod(Method method) {
         return ""toString"".equals(method.getName()) && method.getParameterTypes().length == 0;
     }
 
     private Class<?> getBusinessInterface(Method method) {
-        Class<?> businessInterface = method.getDeclaringClass();
-        if (businessInterface.equals(Object.class)) {
-            return objectInterface;
-        } else {
-            return businessInterface;
+        Class<?> declaringClass = method.getDeclaringClass();
+        if (declaringClass.equals(Object.class)) {
+            return bean.getEjbDescriptor().getObjectInterface();
+        }
+        if (bean.getEjbDescriptor().getLocalBusinessInterfacesAsClasses().contains(declaringClass)) {
+            return declaringClass;
+        }
+        // TODO we can certainly optimize this search algorithm!
+        for (Class<?> view : bean.getEjbDescriptor().getLocalBusinessInterfacesAsClasses()) {
+            for (Class<?> currentClass = view; currentClass != Object.class && currentClass != null; currentClass = currentClass.getSuperclass()) {
+                if (currentClass.equals(view)) {
+                    return view;
+                }
+            }
         }
+        throw new RuntimeException(""Unable to locate a business interface declaring "" + method);
     }
 
+    @SuppressWarnings(""unchecked"")
+    private Object readResolve() throws ObjectStreamException {
+        return new EnterpriseBeanProxyMethodHandler<T>((SessionBean<T>) manager.getPassivationCapableBean(beanId));
+    }
 }",2013-03-26T10:50:41Z,239
"@@ -16,15 +16,20 @@
  */
 package org.jboss.weld.ejb;
 
+import java.lang.reflect.Method;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Set;
+
 import org.jboss.weld.annotated.enhanced.MethodSignature;
 import org.jboss.weld.annotated.enhanced.jlr.MethodSignatureImpl;
 import org.jboss.weld.ejb.spi.BusinessInterfaceDescriptor;
 import org.jboss.weld.ejb.spi.EjbDescriptor;
 import org.jboss.weld.ejb.spi.helpers.ForwardingEjbDescriptor;
 
-import java.lang.reflect.Method;
-import java.util.ArrayList;
-import java.util.Collection;
+import com.google.common.base.Function;
+import com.google.common.collect.Collections2;
+import com.google.common.collect.ImmutableSet;
 
 /**
  * More powerful version of {@link EjbDescriptor} that exposes Maps for some
@@ -35,9 +40,20 @@
  */
 public class InternalEjbDescriptor<T> extends ForwardingEjbDescriptor<T> {
 
+    private static class BusinessInterfaceDescriptorToClassFunction implements Function<BusinessInterfaceDescriptor<?>, Class<?>> {
+
+        private static final BusinessInterfaceDescriptorToClassFunction INSTANCE = new BusinessInterfaceDescriptorToClassFunction();
+
+        @Override
+        public Class<?> apply(BusinessInterfaceDescriptor<?> input) {
+            return input.getInterface();
+        }
+    }
+
     private final Class<?> objectInterface;
     private final EjbDescriptor<T> delegate;
     private final Collection<MethodSignature> removeMethodSignatures;
+    private final Set<Class<?>> localBusinessInterfaces;
 
     public InternalEjbDescriptor(EjbDescriptor<T> ejbDescriptor) {
         this.delegate = ejbDescriptor;
@@ -48,6 +64,7 @@ public InternalEjbDescriptor(EjbDescriptor<T> ejbDescriptor) {
                 removeMethodSignatures.add(new MethodSignatureImpl(method));
             }
         }
+        this.localBusinessInterfaces = ImmutableSet.copyOf(Collections2.transform(getLocalBusinessInterfaces(), BusinessInterfaceDescriptorToClassFunction.INSTANCE));
     }
 
     @Override
@@ -71,4 +88,7 @@ private static Class<?> findObjectInterface(Collection<BusinessInterfaceDescript
         }
     }
 
+    public Set<Class<?>> getLocalBusinessInterfacesAsClasses() {
+        return localBusinessInterfaces;
+    }
 }",2013-03-26T10:50:41Z,240
"@@ -60,7 +60,7 @@ public T newInstance(CreationalContext<T> ctx, BeanManagerImpl manager, AroundCo
         try {
             T instance = AccessController.doPrivileged(NewInstanceAction.of(proxyClass));
             ctx.push(instance);
-            ProxyFactory.setBeanInstance(instance, createEnterpriseTargetBeanInstance(ctx), bean);
+            ProxyFactory.setBeanInstance(instance, createEnterpriseTargetBeanInstance(), bean);
             return instance;
         } catch (PrivilegedActionException e) {
             if (e.getCause() instanceof InstantiationException) {
@@ -75,8 +75,8 @@ public T newInstance(CreationalContext<T> ctx, BeanManagerImpl manager, AroundCo
         }
     }
 
-    protected EnterpriseTargetBeanInstance createEnterpriseTargetBeanInstance(CreationalContext<T> creationalContext) {
-        return new InjectionPointPropagatingEnterpriseTargetBeanInstance(bean.getBeanClass(), new EnterpriseBeanProxyMethodHandler<T>(bean, creationalContext), bean.getBeanManager());
+    protected EnterpriseTargetBeanInstance createEnterpriseTargetBeanInstance() {
+        return new InjectionPointPropagatingEnterpriseTargetBeanInstance(bean.getBeanClass(), new EnterpriseBeanProxyMethodHandler<T>(bean), bean.getBeanManager());
     }
 
     @Override",2013-03-26T10:50:41Z,86
"@@ -872,13 +872,13 @@ public interface ResourceLoader extends Service {
             <title><literal>CDIProvider</literal></title>
             <para>
                 CDI 1.1 provides a simplified approach to accessing the BeanManager / CDI container from components that do not support injection. 
-                This is done by the CDI class API. The integrating part can either use <literal>org.jboss.weld.Weld</literal> provided by Weld core
+                This is done by the CDI class API. The integrating part can either use <literal>org.jboss.weld.SimpleCDI</literal> provided by Weld core
                 and register it using <literal>javax.enterprise.inject.spi.CDIProvider</literal> file that is visible to the CDI API classes or use the
                 <literal>CDI.setCDIProvider(CDIProvider provider)</literal> method method early in the deployment.
             </para>
             <para>
                 Alternatively, an integrating part may provide a specialized implementation such as the one provided by
-                <ulink url=""https://github.com/weld/as7-weld-subsystem/commit/58183e0b0f5edd28f7f9bc23abc703867175f95d"">AS7 integration</ulink>.
+                <ulink url=""https://github.com/wildfly/wildfly/blob/master/weld/src/main/java/org/jboss/as/weld/WeldProvider.java"">WildFly integration</ulink>.
             </para>
         </section>
         <section>",2014-03-14T09:27:34Z,241
"@@ -0,0 +1,117 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2014, Red Hat, Inc., and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.weld;
+
+import static org.jboss.weld.util.reflection.Reflections.cast;
+
+import java.lang.annotation.Annotation;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Set;
+
+import javax.enterprise.inject.Instance;
+import javax.enterprise.inject.spi.CDI;
+import javax.enterprise.util.TypeLiteral;
+
+import org.jboss.weld.bean.builtin.BeanManagerProxy;
+import org.jboss.weld.logging.BeanManagerLogger;
+
+import com.google.common.collect.ImmutableSet;
+
+/**
+ * Abstract implementation of CDI which forwards all Instance methods to a delegate. Furthermore, it allows the calling class to be identified
+ * using the {@link #getCallingClassName()} method.
+ *
+ * @author Jozef Hartinger
+ *
+ * @param <T>
+ */
+public abstract class AbstractCDI<T> extends CDI<T> {
+
+    // used for caller detection
+    protected final Set<String> subclassNames;
+
+    public AbstractCDI() {
+        Set<String> names = new HashSet<String>();
+        for (Class<?> clazz = getClass(); clazz != CDI.class; clazz = clazz.getSuperclass()) {
+            names.add(clazz.getName());
+        }
+        this.subclassNames = ImmutableSet.copyOf(names);
+    }
+
+    @Override
+    public Iterator<T> iterator() {
+        return getInstance().iterator();
+    }
+
+    @Override
+    public T get() {
+        return getInstance().get();
+    }
+
+    @Override
+    public Instance<T> select(Annotation... qualifiers) {
+        return getInstance().select(qualifiers);
+    }
+
+    @Override
+    public <U extends T> Instance<U> select(Class<U> subtype, Annotation... qualifiers) {
+        return getInstance().select(subtype, qualifiers);
+    }
+
+    @Override
+    public <U extends T> Instance<U> select(TypeLiteral<U> subtype, Annotation... qualifiers) {
+        return getInstance().select(subtype, qualifiers);
+    }
+
+    @Override
+    public boolean isUnsatisfied() {
+        return getInstance().isUnsatisfied();
+    }
+
+    @Override
+    public boolean isAmbiguous() {
+        return getInstance().isAmbiguous();
+    }
+
+    @Override
+    public void destroy(T instance) {
+        getInstance().destroy(instance);
+    }
+
+    /**
+     * Examines {@link StackTraceElement}s to figure out which class invoked a method on {@link CDI}.
+     */
+    protected String getCallingClassName() {
+        boolean outerSubclassReached = false;
+        for (StackTraceElement element : Thread.currentThread().getStackTrace()) {
+            // the method call that leads to the first invocation of this class or its subclass is considered the caller
+            if (!subclassNames.contains(element.getClassName())) {
+                if (outerSubclassReached) {
+                    return element.getClassName();
+                }
+            } else {
+                outerSubclassReached = true;
+            }
+        }
+        throw BeanManagerLogger.LOG.unableToIdentifyBeanManager();
+    }
+
+    private Instance<T> getInstance() {
+        return cast(BeanManagerProxy.unwrap(getBeanManager()).instance());
+    }
+}",2014-03-14T09:27:34Z,242
"@@ -16,17 +16,10 @@
  */
 package org.jboss.weld;
 
-import java.lang.annotation.Annotation;
-import java.util.Collections;
 import java.util.HashSet;
-import java.util.Iterator;
 import java.util.Map;
 import java.util.Set;
 
-import javax.enterprise.inject.Instance;
-import javax.enterprise.inject.spi.CDI;
-import javax.enterprise.util.TypeLiteral;
-
 import org.jboss.weld.bean.builtin.BeanManagerProxy;
 import org.jboss.weld.bootstrap.spi.BeanDeploymentArchive;
 import org.jboss.weld.logging.BeanManagerLogger;
@@ -42,7 +35,7 @@
  * @author Jozef Hartinger
  *
  */
-public class Weld extends CDI<Object> {
+public class SimpleCDI extends AbstractCDI<Object> {
 
     private class ClassNameToBeanManager extends CacheLoader<String, BeanManagerProxy> {
 
@@ -58,7 +51,6 @@ public BeanManagerImpl findBeanManager(String callerClassName) {
             if (callerClassName == null) {
                 throw BeanManagerLogger.LOG.unableToIdentifyBeanManager();
             }
-            Container container = Container.instance();
             Set<BeanManagerImpl> managers = new HashSet<BeanManagerImpl>();
             for (Map.Entry<BeanDeploymentArchive, BeanManagerImpl> entry : container.beanDeploymentArchives().entrySet()) {
                 for (String className : entry.getKey().getBeanClasses()) {
@@ -79,16 +71,15 @@ public BeanManagerImpl findBeanManager(String callerClassName) {
     }
 
     private final LoadingCache<String, BeanManagerProxy> beanManagers;
-    // used for caller detection
-    private final Set<String> subclassNames;
+    private final Container container;
+
+    public SimpleCDI() {
+        this(Container.instance());
+    }
 
-    public Weld() {
+    public SimpleCDI(Container container) {
+        this.container = container;
         beanManagers = CacheBuilder.newBuilder().weakValues().build(new ClassNameToBeanManager());
-        Set<String> names = new HashSet<String>();
-        for (Class<?> clazz = getClass(); clazz != CDI.class; clazz = clazz.getSuperclass()) {
-            names.add(clazz.getName());
-        }
-        this.subclassNames = Collections.unmodifiableSet(names);
     }
 
     /**
@@ -107,81 +98,23 @@ protected BeanManagerImpl ambiguousBeanManager(String callerClassName, Set<BeanM
 
     @Override
     public BeanManagerProxy getBeanManager() {
-        ContainerState state = Container.instance().getState();
+        ContainerState state = container.getState();
         if (state.equals(ContainerState.STOPPED) || state.equals(ContainerState.SHUTDOWN)) {
             throw BeanManagerLogger.LOG.beanManagerNotAvailable();
         }
         return beanManagers.getUnchecked(getCallingClassName());
     }
 
-    /**
-     * Examines {@link StackTraceElement}s to figure out which class invoked a method on {@link CDI}.
-     */
-    protected String getCallingClassName() {
-        boolean outerSubclassReached = false;
-        for (StackTraceElement element : Thread.currentThread().getStackTrace()) {
-            // the method call that leads to the first invocation of this class or its subclass is considered the caller
-            if (!subclassNames.contains(element.getClassName())) {
-                if (outerSubclassReached) {
-                    return element.getClassName();
-                }
-            } else {
-                outerSubclassReached = true;
-            }
-        }
-        throw BeanManagerLogger.LOG.unableToIdentifyBeanManager();
-    }
-
-    @Override
-    public Iterator<Object> iterator() {
-        return getInstance().iterator();
-    }
-
-    @Override
-    public Object get() {
-        return getInstance().get();
-    }
-
-    @Override
-    public Instance<Object> select(Annotation... qualifiers) {
-        return getInstance().select(qualifiers);
-    }
-
-    @Override
-    public <U> Instance<U> select(Class<U> subtype, Annotation... qualifiers) {
-        return getInstance().select(subtype, qualifiers);
-    }
-
-    @Override
-    public <U> Instance<U> select(TypeLiteral<U> subtype, Annotation... qualifiers) {
-        return getInstance().select(subtype, qualifiers);
-    }
-
-    @Override
-    public boolean isUnsatisfied() {
-        return getInstance().isUnsatisfied();
-    }
-
-    @Override
-    public boolean isAmbiguous() {
-        return getInstance().isAmbiguous();
-    }
-
-    protected Instance<Object> getInstance() {
-        return getBeanManager().delegate().instance();
-    }
-
     @Override
     public String toString() {
         return ""Weld"";
     }
 
-    public void cleanup() {
-        beanManagers.invalidateAll();
+    protected Container getContainer() {
+        return container;
     }
 
-    @Override
-    public void destroy(Object instance) {
-        getInstance().destroy(instance);
+    public void cleanup() {
+        beanManagers.invalidateAll();
     }
 }",2014-03-14T09:27:34Z,243
"@@ -18,11 +18,8 @@
 
 import java.util.concurrent.ConcurrentMap;
 
-import javax.enterprise.inject.spi.CDI;
-
 import org.jboss.weld.Container;
 import org.jboss.weld.ContainerState;
-import org.jboss.weld.Weld;
 import org.jboss.weld.bootstrap.events.BeforeShutdownImpl;
 import org.jboss.weld.bootstrap.spi.BeanDeploymentArchive;
 import org.jboss.weld.context.ApplicationContext;
@@ -64,14 +61,6 @@ public void shutdown() {
                 Container container = Container.instance(contextId);
                 container.setState(ContainerState.SHUTDOWN);
                 container.cleanup();
-                // remove BeanManager references
-                try {
-                    CDI<?> cdi = CDI.current();
-                    if (cdi instanceof Weld) {
-                        ((Weld) cdi).cleanup();
-                    }
-                } catch (java.lang.IllegalStateException ignored) {
-                }
             }
         }
     }",2014-03-14T09:27:34Z,244
"@@ -20,16 +20,12 @@
 import javax.enterprise.inject.spi.CDIProvider;
 
 import org.jboss.weld.Container;
-import org.jboss.weld.Weld;
+import org.jboss.weld.SimpleCDI;
 import org.jboss.weld.manager.BeanManagerImpl;
 
 public class StaticWeldProvider implements CDIProvider {
 
-    private static class WeldSingleton {
-        private static final Weld WELD_INSTANCE = new EnhancedWeld();
-    }
-
-    private static class EnhancedWeld extends Weld {
+    private static class EnhancedCDI extends SimpleCDI {
 
         @Override
         protected BeanManagerImpl unsatisfiedBeanManager(String callerClassName) {
@@ -46,6 +42,6 @@ protected BeanManagerImpl unsatisfiedBeanManager(String callerClassName) {
 
     @Override
     public CDI<Object> getCDI() {
-        return WeldSingleton.WELD_INSTANCE;
+        return new EnhancedCDI();
     }
 }",2014-03-14T09:27:34Z,245
"@@ -25,7 +25,7 @@
 import org.jboss.shrinkwrap.api.BeanArchive;
 import org.jboss.shrinkwrap.api.ShrinkWrap;
 import org.jboss.shrinkwrap.api.spec.JavaArchive;
-import org.jboss.weld.Weld;
+import org.jboss.weld.SimpleCDI;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -39,7 +39,7 @@ public static JavaArchive getDeployment() {
 
     @Test
     public void testStandalone() {
-        CDI<Object> cdi = new Weld();
+        CDI<Object> cdi = new SimpleCDI();
         assertEquals(""pong"", cdi.select(ScrewDriver.class).get().ping());
     }
 }",2014-03-14T09:27:34Z,246
"@@ -16,7 +16,6 @@
  */
 package org.jboss.weld.event;
 
-import static javax.enterprise.event.Reception.ALWAYS;
 import static org.jboss.weld.logging.messages.EventMessage.INVALID_DISPOSES_PARAMETER;
 import static org.jboss.weld.logging.messages.EventMessage.INVALID_INITIALIZER;
 import static org.jboss.weld.logging.messages.EventMessage.INVALID_PRODUCER;
@@ -230,65 +229,65 @@ public void notify(final T event)
     */
    protected void sendEvent(final T event)
    {
-      
-      CreationalContext<?> creationalContext = createCreationalContext();
-      try
+      if (observerMethod.isStatic())
+      {
+         sendEvent(event, null, beanManager.createCreationalContext(declaringBean));
+      }
+      else if (reception.equals(Reception.IF_EXISTS))
       {
-         Object instance = getReceiver(creationalContext);
+         Object receiver = getReceiverIfExists();
          // The observer is conditional, and there is no existing bean
-         if (instance == null)
+         if (receiver == null)
          {
             return;
          }
          else
          {
-            // As we are working with the contextual instance, we may not have the
-            // actual object, but a container proxy (e.g. EJB)
-            observerMethod.invokeOnInstanceWithSpecialValue(instance, Observes.class, event, beanManager, creationalContext, ObserverException.class);
+            sendEvent(event, receiver, null);
          }
       }
-      finally
+      else
       {
-         if (creationalContext != null && Dependent.class.equals(declaringBean.getScope()))
-         {
-            creationalContext.release();
-         }
+         CreationalContext<?> creationalContext = beanManager.createCreationalContext(declaringBean);
+         Object receiver = beanManager.getReference(declaringBean, creationalContext, false);
+         sendEvent(event, receiver, creationalContext);
       }
+
    }
 
-   /**
-    * Creates the creational context if the observer method is not conditional
-    * 
-    * @return
-    */
-   private CreationalContext<?> createCreationalContext()
+   private void sendEvent(T event, Object receiver, CreationalContext<?> creationalContext)
    {
-      if (reception.equals(ALWAYS))
+      try
       {
-         return beanManager.createCreationalContext(declaringBean);
+         if (receiver == null)
+         {
+            observerMethod.invokeWithSpecialValue(receiver, Observes.class, event, beanManager, creationalContext, ObserverException.class);
+         }
+         else
+         {
+            // As we are working with the contextual instance, we may not have the
+            // actual object, but a container proxy (e.g. EJB)
+            observerMethod.invokeOnInstanceWithSpecialValue(receiver, Observes.class, event, beanManager, creationalContext, ObserverException.class);
+         }
       }
-      else
+      finally
       {
-         return null;
+         if (creationalContext != null && Dependent.class.equals(declaringBean.getScope()))
+         {
+            creationalContext.release();
+         }
       }
    }
    
-   private Object getReceiver(CreationalContext<?> creationalContext)
+   private Object getReceiverIfExists()
    {
-      if (reception.equals(ALWAYS))
+      try
       {
-         return beanManager.getReference(declaringBean, creationalContext, false);
+         return beanManager.getReference(declaringBean, null, false);
       }
-      else
+      catch (ContextNotActiveException e)
       {
-         try
-         {
-            return beanManager.getReference(declaringBean, creationalContext, false);
-         }
-         catch (ContextNotActiveException e) 
-         {
-            return null;
-         }
+         return null;
       }
    }
    ",2010-08-17T23:53:40Z,247
