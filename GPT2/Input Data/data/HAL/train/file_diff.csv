file_diff,commit_time,file_diff_id
"@@ -29,7 +29,10 @@
 import org.jboss.hal.core.mvp.HasPresenter;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
@@ -43,17 +46,14 @@
 
 public class LdapKeyStoreElement implements IsElement<HTMLElement>, Attachable, HasPresenter<OtherSettingsPresenter> {
 
-    private final Metadata metadata;
     private final Table<NamedNode> table;
     private final Form<NamedNode> attributes;
     private final Form<ModelNode> newItemTemplate;
     private final HTMLElement root;
     private OtherSettingsPresenter presenter;
 
-    public LdapKeyStoreElement(final Metadata metadata, final TableButtonFactory tableButtonFactory,
-            final Resources resources) {
-        this.metadata = metadata;
-
+    public LdapKeyStoreElement(final StatementContext statementContext, final Metadata metadata,
+            final TableButtonFactory tableButtonFactory, final Resources resources) {
         this.table = new ModelNodeTable.Builder<NamedNode>(Ids.ELYTRON_LDAP_KEY_STORE_TABLE,
                 metadata)
                 .button(tableButtonFactory.add(Ids.ELYTRON_LDAP_KEY_STORE_ADD, Names.LDAP_KEY_STORE,
@@ -67,14 +67,29 @@ public LdapKeyStoreElement(final Metadata metadata, final TableButtonFactory tab
         this.attributes = new ModelNodeForm.Builder<NamedNode>(Ids.ELYTRON_LDAP_KEY_STORE_ATTRIBUTES_FORM, metadata)
                 .onSave(((form, changedValues) -> presenter.saveLdapKeyStore(form.getModel().getName(), changedValues)))
                 .build();
-        Metadata nitMetadata = metadata.forComplexAttribute(NEW_ITEM_TEMPLATE, false);
+
+        Metadata nitMetadata = metadata.forComplexAttribute(NEW_ITEM_TEMPLATE);
         this.newItemTemplate = new ModelNodeForm.Builder<>(Ids.ELYTRON_LDAP_KEY_STORE_NEW_ITEM_TEMPLATE_FORM,
                 nitMetadata)
                 .include(NEW_ITEM_PATH, NEW_ITEM_RDN, NEW_ITEM_ATTRIBUTES)
                 .unsorted()
                 .customFormItem(NEW_ITEM_ATTRIBUTES, (attributeDescription) -> new NewItemAttributesItem())
+                .singleton(
+                        () -> {
+                            Operation operation = null;
+                            if (table.selectedRow() != null) {
+                                ResourceAddress address = AddressTemplates.LDAP_KEY_STORE_ADDRESS.resolve(statementContext,
+                                        table.selectedRow().getName());
+                                operation = new Operation.Builder(address, READ_ATTRIBUTE_OPERATION)
+                                        .param(NAME, NEW_ITEM_TEMPLATE)
+                                        .build();
+                            }
+                            return operation;
+                        },
+                        () -> presenter.addNewItemTemplate(table.selectedRow().getName()))
                 .onSave((form, changedValues) -> presenter.saveNewItemTemplate(table.selectedRow().getName(),
                         changedValues))
+                .prepareReset(form -> presenter.resetNewItemTemplate(table.selectedRow().getName(), form))
                 .build();
 
         Tabs tabs = new Tabs();",2017-06-30T20:05:17Z,174
"@@ -27,6 +27,7 @@
 import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
 import com.gwtplatform.mvp.client.proxy.ProxyPlace;
 import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.form.Form.FinishReset;
 import org.jboss.hal.core.ComplexAttributeOperations;
 import org.jboss.hal.core.CrudOperations;
 import org.jboss.hal.core.OperationFactory;
@@ -290,8 +291,23 @@ void saveLdapKeyStore(final String name, final Map<String, Object> changedValues
                 this::reloadLdapKeyStores);
     }
 
+    void addNewItemTemplate(final String ldapKeyStore) {
+        ca.add(Ids.ELYTRON_LDAP_KEY_STORE_NEW_ITEM_TEMPLATE_ADD, ldapKeyStore, NEW_ITEM_TEMPLATE,
+                AddressTemplates.LDAP_KEY_STORE_ADDRESS, this::reloadLdapKeyStores);
+    }
+
     void saveNewItemTemplate(final String ldapKeyStore, final Map<String, Object> changedValues) {
         ca.save(ldapKeyStore, NEW_ITEM_TEMPLATE, AddressTemplates.LDAP_KEY_STORE_ADDRESS, changedValues,
                 this::reloadLdapKeyStores);
     }
+
+    void resetNewItemTemplate(final String ldapKeyStore, final Form<ModelNode> form) {
+        ca.reset(ldapKeyStore, NEW_ITEM_TEMPLATE, AddressTemplates.LDAP_KEY_STORE_ADDRESS,
+                new FinishReset<ModelNode>(form) {
+                    @Override
+                    public void afterReset(final Form<ModelNode> form) {
+                        reloadLdapKeyStores();
+                    }
+                });
+    }
 }",2017-06-30T20:05:17Z,116
"@@ -27,6 +27,7 @@
 import org.jboss.hal.dmr.NamedNode;
 import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.MetadataRegistry;
+import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
@@ -75,8 +76,9 @@ public class OtherSettingsView extends HalViewImpl implements OtherSettingsPrese
     private OtherSettingsPresenter presenter;
 
     @Inject
-    OtherSettingsView(final MetadataRegistry metadataRegistry, final TableButtonFactory tableButtonFactory, final
-            Resources resources) {
+    OtherSettingsView(final StatementContext statementContext, final MetadataRegistry metadataRegistry,
+            final TableButtonFactory tableButtonFactory, final
+    Resources resources) {
 
         VerticalNavigation navigation = new VerticalNavigation();
         registerAttachable(navigation);
@@ -124,16 +126,16 @@ public class OtherSettingsView extends HalViewImpl implements OtherSettingsPrese
 
         // NewItemAttributesItem newItemAttributes = new NewItemAttributesItem();
         Metadata metadata = metadataRegistry.lookup(AddressTemplates.LDAP_KEY_STORE_ADDRESS);
-        ldapKeyStoreElement = new LdapKeyStoreElement(metadata, tableButtonFactory, resources);
-                // new ResourceView.Builder(tableButtonFactory, primaryIdStores,
-                // Ids.ELYTRON_LDAP_KEY_STORE, ""LDAP Key Store"", LDAP_KEY_STORE_ADDRESS, this,
-                // () -> presenter.reload())
-                // .setNavigation(navigation)
-                // .setMetadataRegistry(metadataRegistry)
-                // .setTableAddCallback((name, address) -> presenter.reload())
-                // .build()
-                // .addComplexAttributeAsTab(""new-item-template"", singletonList(newItemAttributes))
-                // .create();
+        ldapKeyStoreElement = new LdapKeyStoreElement(statementContext, metadata, tableButtonFactory, resources);
+        // new ResourceView.Builder(tableButtonFactory, primaryIdStores,
+        // Ids.ELYTRON_LDAP_KEY_STORE, ""LDAP Key Store"", LDAP_KEY_STORE_ADDRESS, this,
+        // () -> presenter.reload())
+        // .setNavigation(navigation)
+        // .setMetadataRegistry(metadataRegistry)
+        // .setTableAddCallback((name, address) -> presenter.reload())
+        // .build()
+        // .addComplexAttributeAsTab(""new-item-template"", singletonList(newItemAttributes))
+        // .create();
         navigation.addSecondary(primaryIdStores, Ids.ELYTRON_LDAP_KEY_STORE, Names.LDAP_KEY_STORE,
                 ldapKeyStoreElement.asElement());
 ",2017-06-30T20:05:17Z,175
"@@ -16,14 +16,22 @@
 package org.jboss.hal.core;
 
 import java.util.Map;
+import javax.annotation.Nullable;
 import javax.inject.Inject;
 import javax.inject.Provider;
 
+import com.google.gwt.safehtml.shared.SafeHtml;
 import com.google.web.bindery.event.shared.EventBus;
 import jsinterop.annotations.JsIgnore;
 import org.jboss.gwt.flow.Progress;
 import org.jboss.hal.ballroom.LabelBuilder;
+import org.jboss.hal.ballroom.dialog.DialogFactory;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
 import org.jboss.hal.dmr.Composite;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.Operation;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.AddressTemplate;
@@ -34,6 +42,13 @@
 import org.jboss.hal.resources.Resources;
 import org.jboss.hal.spi.Callback;
 import org.jboss.hal.spi.Footer;
+import org.jboss.hal.spi.Message;
+import org.jboss.hal.spi.MessageEvent;
+
+import static org.jboss.hal.dmr.ModelDescriptionConstants.NAME;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.UNDEFINE_ATTRIBUTE_OPERATION;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.VALUE;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.WRITE_ATTRIBUTE_OPERATION;
 
 /**
  * Class to create, read, update and delete complex attributes. This class mirrors some of the methods from {@link
@@ -69,6 +84,69 @@ public ComplexAttributeOperations(final EventBus eventBus,
     }
 
 
+    // ------------------------------------------------------ (c)reate with dialog
+
+    /**
+     * Opens an add-resource-dialog for the given complex attribute. The dialog contains fields for all required
+     * attributes. When clicking ""Add"", a new complex attribute created and written to the specified resource.
+     * After the resource has been updated, a success message is fired and the specified callback is executed.
+     *
+     * @param id               the id used for the add resource dialog
+     * @param resource         the resource name
+     * @param complexAttribute the name of the complex attribute
+     * @param template         the address template which is resolved against the current statement context and the
+     *                         resource name to get the resource address for the operation
+     * @param callback         the callback executed after the resource has been added
+     */
+    @JsIgnore
+    public void add(final String id, final String resource, final String complexAttribute,
+            final AddressTemplate template, final Callback callback) {
+        metadataProcessor.lookup(template, progress.get(), new SuccessfulMetadataCallback(eventBus, resources) {
+            @Override
+            public void onMetadata(final Metadata metadata) {
+                String type = labelBuilder.label(complexAttribute);
+                Metadata caMetadata = metadata.forComplexAttribute(complexAttribute);
+                Form<ModelNode> form = new ModelNodeForm.Builder<>(id, caMetadata)
+                        .addOnly()
+                        .requiredOnly()
+                        .build();
+                AddResourceDialog dialog = new AddResourceDialog(resources.messages().addResourceTitle(type), form,
+                        (name, model) -> add(resource, complexAttribute, template, model, callback));
+                dialog.show();
+            }
+        });
+    }
+
+
+    // ------------------------------------------------------ (c)reate operation
+
+    /**
+     * Writes the payload of the complext attribute to the specified resource. After the resource has been updated,
+     * a success message is fired and the specified callback is executed.
+     *
+     * @param resource         the resource name
+     * @param complexAttribute the name of the complex attribute
+     * @param template         the address template which is resolved against the current statement context and the
+     *                         resource name to get the resource address for the operation
+     * @param payload          the optional payload for the complex attribute (may be null or undefined)
+     * @param callback         the callback executed after the resource has been added
+     */
+    @JsIgnore
+    public void add(final String resource, final String complexAttribute, final AddressTemplate template,
+            @Nullable final ModelNode payload, final Callback callback) {
+        ResourceAddress address = template.resolve(statementContext, resource);
+        Operation operation = new Operation.Builder(address, WRITE_ATTRIBUTE_OPERATION)
+                .param(NAME, complexAttribute)
+                .param(VALUE, payload)
+                .build();
+        dispatcher.execute(operation, result -> {
+            String type = labelBuilder.label(complexAttribute);
+            MessageEvent.fire(eventBus, Message.success(resources.messages().addSingleResourceSuccess(type)));
+            callback.execute();
+        });
+    }
+
+
     // ------------------------------------------------------ (u)pdate using address
 
     /**
@@ -85,14 +163,14 @@ public ComplexAttributeOperations(final EventBus eventBus,
      * @param callback         the callback executed after the resource has been saved
      */
     @JsIgnore
-    public void save(String resource, String complexAttribute, final AddressTemplate template,
+    public void save(final String resource, final String complexAttribute, final AddressTemplate template,
             final Map<String, Object> changedValues, final Callback callback) {
         metadataProcessor.lookup(template, progress.get(), new SuccessfulMetadataCallback(eventBus, resources) {
             @Override
             public void onMetadata(final Metadata metadata) {
                 ResourceAddress address = template.resolve(statementContext, resource);
-                Metadata caMeta = metadata.forComplexAttribute(complexAttribute);
-                save(complexAttribute, address, changedValues, caMeta, callback);
+                Metadata caMetadata = metadata.forComplexAttribute(complexAttribute);
+                save(complexAttribute, address, changedValues, caMetadata, callback);
             }
         });
     }
@@ -113,14 +191,45 @@ public void onMetadata(final Metadata metadata) {
      * @param callback         the callback executed after the resource has been saved
      */
     @JsIgnore
-    public void save(String complexAttribute, final ResourceAddress address, final Map<String, Object> changedValues,
-            final Metadata metadata, final Callback callback) {
+    public void save(final String complexAttribute, final ResourceAddress address,
+            final Map<String, Object> changedValues, final Metadata metadata, final Callback callback) {
         Composite operations = operationFactory(complexAttribute).fromChangeSet(address, changedValues, metadata);
         crud.save(operations, resources.messages().modifySingleResourceSuccess(labelBuilder.label(complexAttribute)),
                 callback);
     }
 
 
+    // ------------------------------------------------------ (u) reset using template
+
+    /**
+     * Undefines the complex attribute. After the attribute has been undefined a standard success message is fired and
+     * the specified callback is executed.
+     *
+     * @param resource         the resource name
+     * @param complexAttribute the name of the complex attribute
+     * @param template         the address template which is resolved against the current statement context and the
+     *                         resource name to get the resource address for the operation
+     * @param callback         the callback executed after the complex attribute has been undefined
+     */
+    @JsIgnore
+    public void reset(final String resource, final String complexAttribute, final AddressTemplate template,
+            final Callback callback) {
+        String type = labelBuilder.label(complexAttribute);
+        ResourceAddress address = template.resolve(statementContext, resource);
+        Operation operation = new Operation.Builder(address, UNDEFINE_ATTRIBUTE_OPERATION)
+                .param(NAME, complexAttribute)
+                .build();
+        SafeHtml question = resources.messages().resetComplexAttributeConfirmationQuestion(type);
+        DialogFactory.showConfirmation(
+                resources.messages().resetConfirmationTitle(type), question,
+                () -> dispatcher.execute(operation, result -> {
+                    MessageEvent.fire(eventBus,
+                            Message.success(resources.messages().resetComplexAttributeSuccess(type)));
+                    callback.execute();
+                }));
+    }
+
+
     // ------------------------------------------------------ helper methods
 
     private OperationFactory operationFactory(String complexAttribute) {",2017-06-30T20:05:17Z,176
"@@ -588,7 +588,14 @@ public void attach() {
             asElement().appendChild(alert.asElement());
         }
         if (singleton && ping != null && ping.get() != null) {
-            Core.INSTANCE.dispatcher().execute(ping.get(), result -> flip(READONLY), (op, failure) -> flip(EMPTY));
+            Core.INSTANCE.dispatcher().execute(ping.get(),
+                    result -> {
+                        if (!result.isDefined()) {
+                            flip(EMPTY);
+                        } else {
+                            flip(READONLY);
+                        }
+                    }, (op, failure) -> flip(EMPTY));
         }
     }
 ",2017-06-30T20:05:17Z,60
"@@ -215,6 +215,8 @@ public interface Ids {
     String ELYTRON_LDAP_KEY_STORE_ADD = build(ELYTRON_LDAP_KEY_STORE, ADD_SUFFIX);
     String ELYTRON_LDAP_KEY_STORE_ATTRIBUTES_FORM = build(ELYTRON_LDAP_KEY_STORE, ""attributes"", FORM_SUFFIX);
     String ELYTRON_LDAP_KEY_STORE_ATTRIBUTES_TAB = build(ELYTRON_LDAP_KEY_STORE, ""attributes"", TAB_SUFFIX);
+    String ELYTRON_LDAP_KEY_STORE_NEW_ITEM_TEMPLATE_ADD = build(ELYTRON_LDAP_KEY_STORE, ""new-item-template"",
+            ADD_SUFFIX);
     String ELYTRON_LDAP_KEY_STORE_NEW_ITEM_TEMPLATE_FORM = build(ELYTRON_LDAP_KEY_STORE, ""new-item-template"",
             FORM_SUFFIX);
     String ELYTRON_LDAP_KEY_STORE_NEW_ITEM_TEMPLATE_TAB = build(ELYTRON_LDAP_KEY_STORE, ""new-item-template"",",2017-06-30T20:05:17Z,111
"@@ -259,6 +259,8 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml requiredMarker();
     String requires(String requires);
     String resetConfirmationTitle(String type);
+    SafeHtml resetComplexAttributeConfirmationQuestion(String name);
+    SafeHtml resetComplexAttributeSuccess(String name);
     SafeHtml resetConfirmationQuestion(String name);
     SafeHtml resetResourceSuccess(String type, String name);
     SafeHtml resetSingletonConfirmationQuestion();",2017-06-30T20:05:17Z,94
"@@ -202,6 +202,8 @@ replicationStrategy=<strong>Replication</strong><br/>When using replication, the
 requiredHelp=Required fields are marked with <abbr class=""req"" title=""required""><i class=""fa fa-asterisk""></i></abbr>
 requiredMarker=<abbr class=""req"" title=""required""><i class=""fa fa-asterisk""></i></abbr>
 requires=Requires {0}
+resetComplexAttributeConfirmationQuestion=Do you really want to reset {0}?
+resetComplexAttributeSuccess=<strong>{0}</strong> successfully reset.
 resetConfirmationTitle=Reset {0}
 resetConfirmationQuestion=Do you really want to reset <strong>{0}</strong>? All non-required attributes will be undefined or reset to its default value (if any).
 resetResourceSuccess={0} <strong>{1}</strong> successfully reset.",2017-06-30T20:05:17Z,94
"@@ -22,9 +22,7 @@
 
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
-import elemental.client.Browser;
 import elemental.dom.Element;
-import org.jboss.hal.ballroom.dialog.DialogFactory;
 import org.jboss.hal.core.datasource.DataSource;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderColumn;
@@ -66,6 +64,7 @@ public class DataSourceColumn extends FinderColumn<DataSource> {
     private final EventBus eventBus;
     private final StatementContext statementContext;
     private final Resources resources;
+    private final Finder finder;
     private Server server;
 
     @Inject
@@ -86,8 +85,10 @@ public DataSourceColumn(final ServerActions serverActions,
         this.eventBus = eventBus;
         this.statementContext = statementContext;
         this.resources = resources;
+        this.finder = finder;
 
         setItemsProvider((context, callback) -> {
+            // TODO Support standalone mode
             ResourceAddress serverAddress = AddressTemplate.of(""/{selected.host}/{selected.server}"")
                     .resolve(statementContext);
             ResourceAddress dataSourceAddress = DATA_SOURCE_SUBSYSTEM_TEMPLATE.resolve(statementContext);
@@ -203,27 +204,33 @@ ResourceAddress dataSourceAddress(DataSource dataSource) {
                 : DATA_SOURCE_TEMPLATE.resolve(statementContext, dataSource.getName());
     }
 
+    private ResourceAddress dataSourceConfigurationAddress(DataSource dataSource) {
+        String profile = server.get(PROFILE_NAME).asString();
+        return AddressTemplate.of(""/profile=*/subsystem=datasources/data-source=*"")
+                .resolve(statementContext, profile, dataSource.getName());
+    }
+
     void enableDataSource(DataSource dataSource) {
-        Browser.getWindow().alert(Names.NYI);
+        ResourceAddress address = dataSourceConfigurationAddress(dataSource);
+        Operation operation = new Operation.Builder(WRITE_ATTRIBUTE_OPERATION, address)
+                .param(NAME, ENABLED)
+                .param(VALUE, true)
+                .build();
+        dispatcher.execute(operation, result -> {
+            MessageEvent.fire(eventBus, Message.success(resources.messages().dataSourceEnabled(dataSource.getName())));
+            finder.refresh();
+        });
     }
 
     void enableStatistics(DataSource dataSource) {
-        if (dataSource.isEnabled()) {
-            DialogFactory.confirmation(resources.constants().enableStatistics(),
-                    resources.messages().enableStatisticsOnEnabledDataSource(dataSource.getName(),
-                            statementContext.selectedServer()),
-                    () -> {
-                        Browser.getWindow().alert(Names.NYI);
-                        return true;
-                    });
-        } else {
-            DialogFactory.confirmation(resources.constants().enableStatistics(),
-                    resources.messages().enableStatisticsOnDisabledDataSource(dataSource.getName(),
-                            statementContext.selectedServer()),
-                    () -> {
-                        Browser.getWindow().alert(Names.NYI);
-                        return true;
-                    });
-        }
+        ResourceAddress address = dataSourceConfigurationAddress(dataSource);
+        Operation operation = new Operation.Builder(WRITE_ATTRIBUTE_OPERATION, address)
+                .param(NAME, STATISTICS_ENABLED)
+                .param(VALUE, true)
+                .build();
+        dispatcher.execute(operation, result -> {
+            MessageEvent.fire(eventBus, Message.success(resources.messages().statisticsEnabled(dataSource.getName())));
+            finder.refresh();
+        });
     }
 }
\ No newline at end of file",2016-07-17T16:10:52Z,246
"@@ -85,20 +85,12 @@ class DataSourcePreview extends PreviewContent<DataSource> {
         previewBuilder().add(needsRestartWarning);
 
         noStatisticsWarning = new Alert(Icons.WARNING,
-                new SafeHtmlBuilder()
-                        .append(resources.messages().dataSourceStatisticsDisabled(dataSource.getName()))
-                        .appendEscaped("" "")
-                        .append(resources.messages().staleStatistics())
-                        .toSafeHtml(),
+                resources.messages().dataSourceStatisticsDisabled(dataSource.getName()),
                 resources.constants().enableStatistics(), event -> column.enableStatistics(dataSource));
         previewBuilder().add(noStatisticsWarning);
 
         disabledWarning = new Alert(Icons.WARNING,
-                new SafeHtmlBuilder()
-                        .append(resources.messages().dataSourceDisabledNoStatistics(dataSource.getName()))
-                        .appendEscaped("" "")
-                        .append(resources.messages().staleStatistics())
-                        .toSafeHtml(),
+                resources.messages().dataSourceDisabledNoStatistics(dataSource.getName()),
                 resources.constants().enable(), event -> column.enableDataSource(dataSource));
         previewBuilder().add(disabledWarning);
 ",2016-07-17T16:10:52Z,247
"@@ -131,19 +131,32 @@ private class RefreshFunction implements Function<FunctionContext> {
         public void execute(final Control<FunctionContext> control) {
             FinderColumn column = getColumn(segment.getColumnId());
             if (column != null) {
-                column.refresh(() -> {
-                    if (column.contains(segment.getItemId())) {
-                        column.markSelected(segment.getItemId());
-                        column.selectedRow().click();
-                        control.proceed();
-                    } else {
-                        logger.error(""Error in Finder.RefreshFunction: Unable to select item '{}' in column '{}'"",
-                                segment.getItemId(), segment.getColumnId());
+                // refresh the existing column
+                column.refresh(() -> selectItem(column, control));
+            } else {
+                // append the column
+                appendColumn(segment.getColumnId(), new AsyncCallback<FinderColumn>() {
+                    @Override
+                    public void onFailure(final Throwable throwable) {
                         control.abort();
                     }
+
+                    @Override
+                    public void onSuccess(final FinderColumn finderColumn) {
+                        selectItem(finderColumn, control);
+                    }
                 });
+            }
+        }
+
+        private void selectItem(FinderColumn column, Control<FunctionContext> control) {
+            if (column.contains(segment.getItemId())) {
+                column.markSelected(segment.getItemId());
+                control.getContext().push(column);
+                control.proceed();
             } else {
-                logger.error(""Error in Finder.RefreshFunction: Unable to find column '{}'"", segment.getColumnId());
+                logger.error(""Error in Finder.RefreshFunction: Unable to select item '{}' in column '{}'"",
+                        segment.getItemId(), segment.getColumnId());
                 control.abort();
             }
         }
@@ -426,6 +439,13 @@ public void reset(final String token, final String initialColumn, final PreviewC
         updateHistory();
     }
 
+    /**
+     * Refreshes the current path.
+     */
+    public void refresh() {
+        refresh(getContext().getPath());
+    }
+
     /**
      * Refreshes the specified path.
      * <p>
@@ -434,6 +454,7 @@ public void reset(final String token, final String initialColumn, final PreviewC
      */
     public void refresh(FinderPath path) {
         if (!path.isEmpty()) {
+
             int index = 0;
             Function[] functions = new Function[path.size()];
             for (FinderSegment segment : path) {
@@ -446,7 +467,14 @@ public void refresh(FinderPath path) {
                         public void onFailure(final FunctionContext context) {}
 
                         @Override
-                        public void onSuccess(final FunctionContext context) {}
+                        public void onSuccess(final FunctionContext context) {
+                            if (!context.emptyStack()) {
+                                FinderColumn column = context.pop();
+                                if (column.selectedRow() != null) {
+                                    column.selectedRow().click();
+                                }
+                            }
+                        }
                     }, functions);
         }
     }",2016-07-17T16:10:52Z,248
"@@ -59,6 +59,7 @@
 import static org.jboss.hal.dmr.ModelNodeHelper.getOrDefault;
 
 /**
+ * TODO Support standalone mode
  * @author Harald Pehl
  */
 public class ServerActions {",2016-07-17T16:10:52Z,93
"@@ -68,8 +68,6 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     String duplicateResource(String type);
 
     SafeHtml emptyModelNodeForm();
-    SafeHtml enableStatisticsOnDisabledDataSource(String name, String server);
-    SafeHtml enableStatisticsOnEnabledDataSource(String name, String server);
     SafeHtml endpointError(String url);
     SafeHtml endpointOk(String url);
 
@@ -176,11 +174,15 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml serverTimeout(String name);
     SafeHtml serverUndefined(String name);
 
+    SafeHtml staleStatistics();
+
     SafeHtml startServerGroupError(String name);
     SafeHtml startServerGroupSuccess(String name);
     SafeHtml startServerError(String name);
     SafeHtml startServerSuccess(String name);
 
+    SafeHtml statisticsEnabled(String name);
+
     String stop(String name);
     SafeHtml stopServerGroupError(String name);
     SafeHtml stopServerGroupQuestion(String name);
@@ -197,8 +199,6 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml suspendServerQuestion(String name);
     SafeHtml suspendServerSuccess(String name);
 
-    SafeHtml staleStatistics();
-
     SafeHtml testConnectionError();
     SafeHtml testConnectionSuccess();
     SafeHtml topologyError();",2016-07-17T16:10:52Z,94
"@@ -40,8 +40,6 @@ deploymentReplaced[\=1]=<strong>One</strong> deployment has been replaced.
 domainControllerTimeout=The domain controller <strong>{0}</strong> does not respond. Please check the log files and refresh this page after the domain controller is up and running again.
 duplicateResource=A {0} with this name already exists.
 emptyModelNodeForm=<strong>No attributes.</strong> This resource doesn&#39;t contain attributes or only complex attributes which are currently not supported.
-enableStatisticsOnDisabledDataSource=The data source <strong>{0}</strong> is currently disabled. In order to enable statistics, <ol><li>the <code>statistics-enabled</code> flag will be set to <code>true</>,</li><li>the data source will be enabled and</li><li>the server <strong>{1}</strong> will be reloaded.</li></ol>
-enableStatisticsOnEnabledDataSource=The data source <strong>{0}</strong> is currently enabled. In order to enable statistics, <ol><li>the data source will be disabled,<li>the <code>statistics-enabled</code> flag will be set to <code>true</>,</li><li>the data source will be re-enabled and</li><li>the server <strong>{1}</strong> will be reloaded.</li></ol>
 endpointError=The management interface does not respond. Please make sure<ul><li>you have added users to be able to access the admin console</li><li>the management interface is up and running</li><li><a href=""#"" class=""alert-link"">{0}</a> is configured as an allowed origin</li></ul>
 endpointOk=The management interface at <a href=""#"" class=""alert-link"">{0}</a> is up and running.
 flushConnectionSuccess=Flush connection successful
@@ -140,6 +138,7 @@ startServerError=Failed to start server <strong>{0}</strong>.
 startServerGroupError=Failed to start server group <strong>{0}</strong>.
 startServerGroupSuccess=Server group <strong>{0}</strong> successfully started.
 startServerSuccess=Server <strong>{0}</strong> successfully started.
+statisticsEnabled=Statistics for <strong>{0}</strong> successfully enabled.
 stop=Stop {0}
 stopServerError=Failed to stop server <strong>{0}</strong>.
 stopServerGroupError=Failed to stop server group <strong>{0}</strong>.",2016-07-17T16:10:52Z,94
"@@ -42,9 +42,9 @@
  */
 public class EndpointManager {
 
+    public static final String CONNECT_PARAMETER = ""connect"";
     static final String DEFAULT_HOST = ""localhost""; // must be in sync with the default value in endpoint.dmr!
     static final int DEFAULT_PORT = 9990; // must be in sync with the default value in endpoint.dmr!
-    private static final String CONNECT_PARAMETER = ""connect"";
     @NonNls private static final Logger logger = LoggerFactory.getLogger(EndpointManager.class);
 
     private final Endpoints endpoints;",2017-01-14T13:37:31Z,18
"@@ -23,7 +23,10 @@
 import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
 import elemental.client.Browser;
 import elemental.dom.Element;
+import elemental.html.Location;
 import org.jboss.gwt.elemento.core.IsElement;
+import org.jboss.hal.ballroom.dialog.Dialog;
+import org.jboss.hal.client.bootstrap.endpoint.EndpointManager;
 import org.jboss.hal.config.Endpoints;
 import org.jboss.hal.config.Environment;
 import org.jboss.hal.config.User;
@@ -108,6 +111,7 @@ public interface MyView extends HalView, HasPresenter<HeaderPresenter> {
         void showReload(String text, String tooltip);
         void hideReload();
         void showMessage(Message message);
+        void hideReconnect();
 
         void selectTopLevelCategory(String nameToken);
         void updateLinks(FinderContext finderContext);
@@ -183,6 +187,14 @@ protected void onBind() {
         registerHandler(getEventBus().addHandler(ModelBrowserPathEvent.getType(), this));
     }
 
+    @Override
+    protected void onReveal() {
+        super.onReveal();
+        if (endpoints.isSameOrigin()) {
+            getView().hideReconnect();
+        }
+    }
+
 
     // ------------------------------------------------------ reload / restart
 
@@ -261,11 +273,25 @@ void toggleMessages() {
     }
 
     void reconnect() {
-        Browser.getWindow().alert(Names.NYI);
+        Location location = Browser.getWindow().getLocation();
+        String url = Endpoints.getBaseUrl() + location.getPathname() + ""?"" + EndpointManager.CONNECT_PARAMETER;
+        Browser.getWindow().getLocation().assign(url);
     }
 
     void logout() {
-        Browser.getWindow().alert(Names.NYI);
+        if (environment.isSingleSignOn()) {
+            Browser.getWindow().alert(Names.NYI);
+        } else {
+            Element p = Browser.getDocument().createElement(""p"");
+            p.setInnerHTML(resources.messages().closeToLogout().asString());
+            Dialog dialog = new Dialog.Builder(resources.constants().logout())
+                    .add(p)
+                    .closeIcon(true)
+                    .closeOnEsc(true)
+                    .primary(resources.constants().ok(), () -> true)
+                    .build();
+            dialog.show();
+        }
     }
 
 ",2017-01-14T13:37:31Z,95
"@@ -96,6 +96,7 @@ public static HeaderView create(final Places places, final User user, final Reso
     @DataElement Element messagesLabel;
     @DataElement Element userName;
     @DataElement Element roles;
+    @DataElement Element connectedToContainer;
     @DataElement Element connectedTo;
     @DataElement Element accessControl;
     @DataElement Element patching;
@@ -236,6 +237,11 @@ void onReconnect() {
         presenter.reconnect();
     }
 
+    @Override
+    public void hideReconnect() {
+        Elements.setVisible(connectedToContainer, false);
+    }
+
 
     // ------------------------------------------------------ modes
 ",2017-01-14T13:37:31Z,98
"@@ -86,7 +86,7 @@
                     <li><a data-element=""logout"" class=""clickable"">{{resources().constants().logout()}}</a></li>
                 </ul>
             </li>
-            <li class=""dropdown"">
+            <li class=""dropdown"" data-element=""connectedToContainer"">
                 <a class=""clickable dropdown-toggle"" data-toggle=""dropdown"">
                     <span class=""fa fa-globe""></span>
                     <b class=""caret""></b>",2017-01-14T13:37:31Z,162
"@@ -118,6 +118,11 @@ public void setAccessControlProvider(final AccessControlProvider accessControlPr
         this.accessControlProvider = accessControlProvider;
     }
 
+    @Override
+    public boolean isSingleSignOn() {
+        return false; // not yet implemented
+    }
+
     @Override
     public String toString() {
         return ""Environment(HAL "" + halVersion + "", "" + instanceInfo + "", management version "" + managementVersion +",2017-01-14T13:37:31Z,151
"@@ -61,4 +61,6 @@ void setInstanceInfo(String productName, String productVersion,
     AccessControlProvider getAccessControlProvider();
 
     void setAccessControlProvider(AccessControlProvider accessControlProvider);
+
+    boolean isSingleSignOn();
 }",2017-01-14T13:37:31Z,152
"@@ -63,6 +63,7 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml chooseSharedStore();
     SafeHtml chooseStrategy();
     String chooseTemplate(String custom);
+    SafeHtml closeToLogout();
     SafeHtml configuredMailServer(String servers);
     String connectedTo(String url);
     SafeHtml contentAdded(@PluralCount int size);",2017-01-14T13:37:31Z,94
"@@ -19,6 +19,7 @@ chooseServerGroupsToUndeploy=Choose the server groups for undeploying <strong>{0
 chooseSharedStore=Choose which role the server should take in the shared store policy:
 chooseStrategy=Please choose the basic strategy for the HA policy:
 chooseTemplate=Choose one of the predefined templates to quickly add a datasource or choose ""{0}"" to specify your own settings.
+closeToLogout=In order to logout, please close the current window / tab and reopen the console.
 configuredMailServer=Configured mail servers: {0}
 connectedTo=Connected to {0}
 contentAdded=<strong>{0}</strong> content items have been added.",2017-01-14T13:37:31Z,94
"@@ -284,7 +284,7 @@ private <T extends NamedNode> String lazyToken(String tlc, T model,
 
     @Override
     @SuppressWarnings(""HardCodedStringLiteral"")
-    public void update(final StaticItem item) {
+    public void update(StaticItem item) {
         // remember selection
         HTMLElement element = (HTMLElement) document.querySelector(DOT + topology + "" ."" + selected);
         String hostName = element != null ? String.valueOf(element.dataset.get(""host"")) : null;
@@ -452,7 +452,7 @@ private HTMLElement buildTable(List<Host> hosts, List<ServerGroup> serverGroups,
         return table;
     }
 
-    private HTMLElement hostElement(final Host host) {
+    private HTMLElement hostElement(Host host) {
         HTMLElement dropdown;
         HTMLTableCellElement th = th()
                 .css(asList(rowHeader, statusCss(host)).toArray(new String[]{}))
@@ -495,7 +495,7 @@ private HTMLElement hostElement(final Host host) {
         return th;
     }
 
-    private HTMLElement serverGroupElement(final ServerGroup serverGroup) {
+    private HTMLElement serverGroupElement(ServerGroup serverGroup) {
         HTMLElement dropdown;
         HTMLTableCellElement element = th()
                 .on(click, event -> serverGroupDetails(serverGroup))
@@ -638,7 +638,7 @@ private boolean isVisible() {
 
     // ------------------------------------------------------ host
 
-    private void hostDetails(final Host host) {
+    private void hostDetails(Host host) {
         clearSelected();
         HTMLElement element = (HTMLElement) document.querySelector(hostSelector(host));
         if (element != null) {
@@ -668,19 +668,19 @@ private boolean isAllowed(Host host) {
                 .isAllowed(Constraint.executable(AddressTemplate.of(""/host="" + host.getAddressName()), RELOAD));
     }
 
-    private List<HTMLElement> hostActions(final Host host) {
+    private List<HTMLElement> hostActions(Host host) {
         List<HTMLElement> actions = new ArrayList<>();
         actions.add(actionLink(event -> hostActions.reload(host), resources.constants().reload()));
         actions.add(actionLink(event -> hostActions.restart(host), resources.constants().restart()));
         return actions;
     }
 
-    private String[] statusCss(final Host host) {
+    private String[] statusCss(Host host) {
         return hostActions.isPending(host) ? new String[]{withProgress} : new String[]{};
     }
 
     @Override
-    public void onHostAction(final HostActionEvent event) {
+    public void onHostAction(HostActionEvent event) {
         if (isVisible()) {
             Host host = event.getHost();
 
@@ -695,7 +695,7 @@ public void onHostAction(final HostActionEvent event) {
     }
 
     @Override
-    public void onHostResult(final HostResultEvent event) {
+    public void onHostResult(HostResultEvent event) {
         if (isVisible()) {
             Host host = event.getHost();
 
@@ -705,14 +705,14 @@ public void onHostResult(final HostResultEvent event) {
         }
     }
 
-    private String hostSelector(final Host host) {
+    private String hostSelector(Host host) {
         return ""[data-host='"" + host.getName() + ""']""; //NON-NLS
     }
 
 
     // ------------------------------------------------------ server group
 
-    private void serverGroupDetails(final ServerGroup serverGroup) {
+    private void serverGroupDetails(ServerGroup serverGroup) {
         clearSelected();
         HTMLElement element = (HTMLElement) document.querySelector(serverGroupSelector(serverGroup));
         if (element != null) {
@@ -736,7 +736,7 @@ private boolean isAllowed(ServerGroup serverGroup) {
                 .isAllowed(constraints);
     }
 
-    private List<HTMLElement> serverGroupActions(final ServerGroup serverGroup) {
+    private List<HTMLElement> serverGroupActions(ServerGroup serverGroup) {
         List<HTMLElement> actions = new ArrayList<>();
 
         // Order is: reload, restart, suspend, resume, stop, start
@@ -756,12 +756,15 @@ private List<HTMLElement> serverGroupActions(final ServerGroup serverGroup) {
         if (serverGroup.hasServers(server -> server.isStopped() || server.isFailed())) {
             actions.add(actionLink(event -> serverGroupActions.start(serverGroup), resources.constants().start()));
         }
+        // add kill link regardless of state to destroy and kill servers which might show a wrong state
+        actions.add(actionLink(event -> serverGroupActions.destroy(serverGroup), resources.constants().destroy()));
+        actions.add(actionLink(event -> serverGroupActions.kill(serverGroup), resources.constants().kill()));
 
         return actions;
     }
 
     @Override
-    public void onServerGroupAction(final ServerGroupActionEvent event) {
+    public void onServerGroupAction(ServerGroupActionEvent event) {
         if (isVisible()) {
             ServerGroup serverGroup = event.getServerGroup();
             disableDropdown(Ids.serverGroup(serverGroup.getName()), serverGroup.getName());
@@ -773,21 +776,21 @@ public void onServerGroupAction(final ServerGroupActionEvent event) {
     }
 
     @Override
-    public void onServerGroupResult(final ServerGroupResultEvent event) {
+    public void onServerGroupResult(ServerGroupResultEvent event) {
         if (isVisible()) {
             event.getServers().forEach(server -> stopProgress(serverSelector(server)));
             update(null);
         }
     }
 
-    private String serverGroupSelector(final ServerGroup serverGroup) {
+    private String serverGroupSelector(ServerGroup serverGroup) {
         return ""[data-server-group='"" + serverGroup.getName() + ""']""; //NON-NLS
     }
 
 
     // ------------------------------------------------------ server
 
-    private void serverDetails(final Server server) {
+    private void serverDetails(Server server) {
         clearSelected();
         HTMLElement element = (HTMLElement) document.querySelector(serverSelector(server));
         if (element != null) {
@@ -827,7 +830,7 @@ private boolean isAllowed(Server server) {
                         RELOAD));
     }
 
-    private List<HTMLElement> serverActions(final Server server) {
+    private List<HTMLElement> serverActions(Server server) {
         List<HTMLElement> actions = new ArrayList<>();
 
         if (!server.isStarted()) {
@@ -849,65 +852,66 @@ private List<HTMLElement> serverActions(final Server server) {
             }
             actions.add(actionLink(event -> serverActions.stop(server), resources.constants().stop()));
         }
-        // add kill link regardless of server state to kill servers which might show a wrong state
+        // add kill link regardless of state to destroy and kill servers which might show a wrong state
+        actions.add(actionLink(event -> serverActions.destroy(server), resources.constants().destroy()));
         actions.add(actionLink(event -> serverActions.kill(server), resources.constants().kill()));
 
         return actions;
     }
 
-    private String[] statusCss(final Server server) {
+    private String[] statusCss(Server server) {
         Set<String> status = new HashSet<>();
         ServerStatusSwitch sss = new ServerStatusSwitch(serverActions) {
             @Override
-            protected void onPending(final Server server) {
+            protected void onPending(Server server) {
             }
 
             @Override
-            protected void onBootErrors(final Server server) {
+            protected void onBootErrors(Server server) {
                 status.add(error);
             }
 
             @Override
-            protected void onFailed(final Server server) {
+            protected void onFailed(Server server) {
                 status.add(error);
             }
 
             @Override
-            protected void onAdminMode(final Server server) {
+            protected void onAdminMode(Server server) {
                 status.add(inactive);
             }
 
             @Override
-            protected void onStarting(final Server server) {
+            protected void onStarting(Server server) {
             }
 
             @Override
-            protected void onSuspended(final Server server) {
+            protected void onSuspended(Server server) {
                 status.add(suspended);
             }
 
             @Override
-            protected void onNeedsReload(final Server server) {
+            protected void onNeedsReload(Server server) {
                 status.add(warning);
             }
 
             @Override
-            protected void onNeedsRestart(final Server server) {
+            protected void onNeedsRestart(Server server) {
                 status.add(warning);
             }
 
             @Override
-            protected void onRunning(final Server server) {
+            protected void onRunning(Server server) {
                 status.add(ok);
             }
 
             @Override
-            protected void onStopped(final Server server) {
+            protected void onStopped(Server server) {
                 status.add(inactive);
             }
 
             @Override
-            protected void onUnknown(final Server server) {
+            protected void onUnknown(Server server) {
             }
         };
         sss.accept(server);
@@ -918,7 +922,7 @@ protected void onUnknown(final Server server) {
     }
 
     @Override
-    public void onServerAction(final ServerActionEvent event) {
+    public void onServerAction(ServerActionEvent event) {
         if (isVisible()) {
             Server server = event.getServer();
             disableDropdown(server.getId(), server.getName());
@@ -927,14 +931,14 @@ public void onServerAction(final ServerActionEvent event) {
     }
 
     @Override
-    public void onServerResult(final ServerResultEvent event) {
+    public void onServerResult(ServerResultEvent event) {
         if (isVisible()) {
             stopProgress(serverSelector(event.getServer()));
             updateServer(event.getServer());
         }
     }
 
-    private String serverSelector(final Server server) {
+    private String serverSelector(Server server) {
         return ""[data-server='"" + server.getId() + ""']""; //NON-NLS
     }
 }",2018-06-22T08:12:38Z,227
"@@ -191,6 +191,18 @@ public List<ItemAction<ServerGroup>> actions() {
                             .constraints(constraints(item, START_SERVERS))
                             .build());
                 }
+                // add destroy and kill action regardless of state
+                // to destroy and kill servers which might show a wrong state
+                actions.add(new ItemAction.Builder<ServerGroup>()
+                        .title(resources.constants().destroy())
+                        .handler(serverGroupActions::destroy)
+                        .constraints(constraints(item, DESTROY))
+                        .build());
+                actions.add(new ItemAction.Builder<ServerGroup>()
+                        .title(resources.constants().kill())
+                        .handler(serverGroupActions::kill)
+                        .constraints(constraints(item, KILL))
+                        .build());
                 return actions;
             }
         });
@@ -199,22 +211,22 @@ public List<ItemAction<ServerGroup>> actions() {
         eventBus.addHandler(ServerGroupResultEvent.getType(), this);
     }
 
-    private Constraints constraints(final ServerGroup serverGroup, String operation) {
+    private Constraints constraints(ServerGroup serverGroup, String operation) {
         return Constraints.or(
                 Constraint.executable(AddressTemplate.of(""/server-group=*""), operation),
                 Constraint.executable(serverGroupTemplate(serverGroup), operation)
         );
     }
 
     @Override
-    public void onServerGroupAction(final ServerGroupActionEvent event) {
+    public void onServerGroupAction(ServerGroupActionEvent event) {
         if (isVisible()) {
             event.getServers().forEach(server -> ItemMonitor.startProgress(server.getId()));
         }
     }
 
     @Override
-    public void onServerGroupResult(final ServerGroupResultEvent event) {
+    public void onServerGroupResult(ServerGroupResultEvent event) {
         if (isVisible()) {
             event.getServers().forEach(server -> ItemMonitor.stopProgress(server.getId()));
             refresh(RESTORE_SELECTION);",2018-06-22T08:12:38Z,71
"@@ -410,7 +410,13 @@ public List<ItemAction<Server>> actions() {
                                 .build());
                     }
                 }
-                // add kill action regardless of server state to kill servers which might show a wrong state
+                // add destroy and kill action regardless of state
+                // to destroy and kill servers which might show a wrong state
+                actions.add(new ItemAction.Builder<Server>()
+                        .title(resources.constants().destroy())
+                        .handler(serverActions::destroy)
+                        .constraint(Constraint.executable(serverConfigTemplate(item), DESTROY))
+                        .build());
                 actions.add(new ItemAction.Builder<Server>()
                         .title(resources.constants().kill())
                         .handler(serverActions::kill)",2018-06-22T08:12:38Z,23
"@@ -20,7 +20,7 @@
  * operations, but for the various GWT events.
  */
 public enum Action {
-    RELOAD, RESTART, SUSPEND, RESUME, START, STOP, KILL;
+    RELOAD, RESTART, SUSPEND, RESUME, START, STOP, DESTROY, KILL;
 
     public static boolean isStarting(Action action) {
         return action == RELOAD || action == RESTART || action == RESUME || action == START;",2018-06-22T08:12:38Z,19
"@@ -300,6 +300,46 @@ public void start(ServerGroup serverGroup) {
         }
     }
 
+    public void destroy(ServerGroup serverGroup) {
+        List<Server> startedServers = serverGroup.getServers(Server::isStarted);
+        DialogFactory.showConfirmation(resources.messages().destroy(serverGroup.getName()),
+                resources.messages().destroyServerGroupQuestion(serverGroup.getName()),
+                () -> {
+                    prepare(serverGroup, startedServers, Action.DESTROY);
+                    Operation operation = new Operation.Builder(serverGroup.getAddress(), DESTROY_SERVERS).build();
+                    dispatcher.execute(operation,
+                            result -> repeatCompositeUntil(dispatcher, timeout(serverGroup, Action.DESTROY),
+                                    readServerConfigStatus(startedServers),
+                                    checkServerConfigStatus(startedServers.size(), STOPPED, DISABLED))
+                                    .subscribe(new ServerGroupTimeoutCallback(serverGroup, startedServers,
+                                            resources.messages().destroyServerGroupSuccess(serverGroup.getName()))),
+                            new ServerGroupFailedCallback(serverGroup, startedServers,
+                                    resources.messages().destroyServerError(serverGroup.getName())),
+                            new ServerGroupExceptionCallback(serverGroup, startedServers,
+                                    resources.messages().destroyServerError(serverGroup.getName())));
+                });
+    }
+
+    public void kill(ServerGroup serverGroup) {
+        List<Server> startedServers = serverGroup.getServers(Server::isStarted);
+        DialogFactory.showConfirmation(resources.messages().kill(serverGroup.getName()),
+                resources.messages().killServerGroupQuestion(serverGroup.getName()),
+                () -> {
+                    prepare(serverGroup, startedServers, Action.KILL);
+                    Operation operation = new Operation.Builder(serverGroup.getAddress(), KILL_SERVERS).build();
+                    dispatcher.execute(operation,
+                            result -> repeatCompositeUntil(dispatcher, timeout(serverGroup, Action.KILL),
+                                    readServerConfigStatus(startedServers),
+                                    checkServerConfigStatus(startedServers.size(), STOPPED, DISABLED))
+                                    .subscribe(new ServerGroupTimeoutCallback(serverGroup, startedServers,
+                                            resources.messages().killServerGroupSuccess(serverGroup.getName()))),
+                            new ServerGroupFailedCallback(serverGroup, startedServers,
+                                    resources.messages().killServerError(serverGroup.getName())),
+                            new ServerGroupExceptionCallback(serverGroup, startedServers,
+                                    resources.messages().killServerError(serverGroup.getName())));
+                });
+    }
+
     private int timeout(ServerGroup serverGroup, Action action) {
         int timeout = DEFAULT_TIMEOUT;
         switch (action) {",2018-06-22T08:12:38Z,96
"@@ -112,7 +112,8 @@ public class ServerActions {
     public static final int SERVER_STOP_TIMEOUT = 5;
     public static final int SERVER_RELOAD_TIMEOUT = 10;
     public static final int SERVER_RESTART_TIMEOUT = SERVER_STOP_TIMEOUT + SERVER_START_TIMEOUT;
-    private static final int SERVER_KILL_TIMEOUT = 5;
+    private static final int SERVER_DESTROY_TIMEOUT = SERVER_STOP_TIMEOUT + 5;
+    private static final int SERVER_KILL_TIMEOUT = SERVER_STOP_TIMEOUT + 5;
     @NonNls private static final Logger logger = LoggerFactory.getLogger(ServerActions.class);
 
     private static AddressTemplate serverConfigTemplate(Server server) {
@@ -518,6 +519,24 @@ public void stopNow(Server server) {
                 new ServerExceptionCallback(server, resources.messages().stopServerError(server.getName())));
     }
 
+    public void destroy(Server server) {
+        DialogFactory.showConfirmation(resources.messages().destroy(server.getName()),
+                resources.messages().destroyServerQuestion(server.getName()),
+                () -> {
+                    prepare(server, Action.DESTROY);
+                    Operation operation = new Operation.Builder(server.getServerConfigAddress(), DESTROY).build();
+                    dispatcher.execute(operation,
+                            result -> repeatOperationUntil(dispatcher, SERVER_DESTROY_TIMEOUT,
+                                    readServerConfigStatus(server), checkServerConfigStatus(STOPPED, DISABLED))
+                                    .subscribe(new ServerTimeoutCallback(server, Action.DESTROY,
+                                            resources.messages().destroyServerSuccess(server.getName()))),
+                            new ServerFailedCallback(server,
+                                    resources.messages().destroyServerError(server.getName())),
+                            new ServerExceptionCallback(server,
+                                    resources.messages().destroyServerError(server.getName())));
+                });
+    }
+
     public void kill(Server server) {
         DialogFactory.showConfirmation(resources.messages().kill(server.getName()),
                 resources.messages().killServerQuestion(server.getName()),",2018-06-22T08:12:38Z,93
"@@ -226,6 +226,8 @@ public interface ModelDescriptionConstants {
     String DESCRIPTION = ""description"";
     String DESTINATION_ADDRESS = ""destination-address"";
     String DESTINATION_PORT = ""destination-port"";
+    String DESTROY = ""destroy"";
+    String DESTROY_SERVERS = ""destroy-servers"";
     String DIR_CONTEXT = ""dir-context"";
     String DIRECT_VERIFICATION = ""direct-verification"";
     String DISABLED = ""disabled"";
@@ -410,6 +412,7 @@ public interface ModelDescriptionConstants {
     String KEYCLOAK = ""keycloak"";
     String KEYCLOAK_SERVER_URL = ""keycloak-server-url"";
     String KILL = ""kill"";
+    String KILL_SERVERS = ""kill-servers"";
     String LARGEST_THREAD_COUNT = ""largest-thread-count"";
     String LAST_CONNECTED = ""last-connected"";
     String LAST_UPDATED_TIME = ""last-updated-time"";",2018-06-22T08:12:38Z,109
"@@ -118,6 +118,8 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String deploymentSuccessful();
     String deployments();
     String description();
+
+    String destroy();
     String details();
     String directory();
     String disable();",2018-06-22T08:12:38Z,100
"@@ -132,6 +132,20 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml deploymentUnknownState(String name);
     String deprecated(String since, String reason);
     String destinationFilterDescription();
+
+    String destroy(String name);
+
+    SafeHtml destroyServerError(String name);
+
+    SafeHtml destroyServerQuestion(String name);
+
+    SafeHtml destroyServerSuccess(String name);
+
+    SafeHtml destroyServerGroupError(String name);
+
+    SafeHtml destroyServerGroupQuestion(String name);
+
+    SafeHtml destroyServerGroupSuccess(String name);
     SafeHtml disableSSLManagementQuestion(String serverName);
     SafeHtml disableSSLManagementError(String cause);
     SafeHtml disableSSLManagementSuccess();
@@ -253,13 +267,16 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml jpaStatisticsDisabled(String name, String deployment);
 
     String kill(String name);
-
     SafeHtml killServerError(String name);
-
     SafeHtml killServerQuestion(String name);
-
     SafeHtml killServerSuccess(String name);
 
+    SafeHtml killServerGroupError(String name);
+
+    SafeHtml killServerGroupQuestion(String name);
+
+    SafeHtml killServerGroupSuccess(String name);
+
     SafeHtml largeLogFile(String size);
     SafeHtml lastOperationException();
     SafeHtml lastOperationFailed();",2018-06-22T08:12:38Z,94
"@@ -94,6 +94,7 @@ deploymentInProgress=Deployment in progress
 deploymentSuccessful=Deployment successful
 deployments=Deployments
 description=Description
+destroy=Destroy
 details=Details
 directory=directory
 disable=Disable",2018-06-22T08:12:38Z,100
"@@ -111,6 +111,13 @@ deploymentSuccessful=<strong>{0}</strong> has been successfully deployed.
 deploymentUnknownState=The state of deployment <strong>{0}</strong> is unknown.
 deprecated=Deprecated since {0}, reason: {1}
 destinationFilterDescription=Filter by: name, type, deployment
+destroy=Destroy {0}
+destroyServerError=Failed to destroy server <strong>{0}</strong>.
+destroyServerQuestion=Are you sure you want to destroy the server <strong>{0}</strong>?
+destroyServerSuccess=Server <strong>{0}</strong> successfully destroyed.
+destroyServerGroupError=Failed to destroy server group <strong>{0}</strong>.
+destroyServerGroupQuestion=Are you sure you want to destroy the server group <strong>{0}</strong>?
+destroyServerGroupSuccess=Server group <strong>{0}</strong> successfully destroyed.
 disableSSLManagementQuestion=Do you want to disable SSL of the HTTP Management Console ? Also, choose below if you want to reload {0} ? If not, you must reload it manually later and point the browser to the unsecured URL address of HTTP Management Console.
 disableSSLManagementSuccess=The SSL was successfully deactivated from the HTTP Management Console.
 disableSSLManagementError=There wan an error trying to remove SSL from the HTTP Management Console. Cause: {0}.
@@ -227,6 +234,9 @@ kill=Kill {0}
 killServerError=Failed to kill server <strong>{0}</strong>.
 killServerQuestion=Are you sure you want to kill the server <strong>{0}</strong>?
 killServerSuccess=Server <strong>{0}</strong> successfully killed.
+killServerGroupError=Failed to kill server group <strong>{0}</strong>.
+killServerGroupQuestion=Are you sure you want to kill the server group <strong>{0}</strong>?
+killServerGroupSuccess=Server group <strong>{0}</strong> successfully killed.
 largeLogFile=The log file is larger than <strong>{0}</strong>. Please not that the download of large log files can take longer.
 lastOperationException=Unable to execute last operation
 lastOperationFailed=Last operation failed",2018-06-22T08:12:38Z,94
"@@ -22,9 +22,7 @@
 
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
-import elemental.client.Browser;
 import elemental.dom.Element;
-import org.jboss.hal.ballroom.dialog.DialogFactory;
 import org.jboss.hal.core.datasource.DataSource;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderColumn;
@@ -66,6 +64,7 @@ public class DataSourceColumn extends FinderColumn<DataSource> {
     private final EventBus eventBus;
     private final StatementContext statementContext;
     private final Resources resources;
+    private final Finder finder;
     private Server server;
 
     @Inject
@@ -86,8 +85,10 @@ public DataSourceColumn(final ServerActions serverActions,
         this.eventBus = eventBus;
         this.statementContext = statementContext;
         this.resources = resources;
+        this.finder = finder;
 
         setItemsProvider((context, callback) -> {
+            // TODO Support standalone mode
             ResourceAddress serverAddress = AddressTemplate.of(""/{selected.host}/{selected.server}"")
                     .resolve(statementContext);
             ResourceAddress dataSourceAddress = DATA_SOURCE_SUBSYSTEM_TEMPLATE.resolve(statementContext);
@@ -203,27 +204,33 @@ ResourceAddress dataSourceAddress(DataSource dataSource) {
                 : DATA_SOURCE_TEMPLATE.resolve(statementContext, dataSource.getName());
     }
 
+    private ResourceAddress dataSourceConfigurationAddress(DataSource dataSource) {
+        String profile = server.get(PROFILE_NAME).asString();
+        return AddressTemplate.of(""/profile=*/subsystem=datasources/data-source=*"")
+                .resolve(statementContext, profile, dataSource.getName());
+    }
+
     void enableDataSource(DataSource dataSource) {
-        Browser.getWindow().alert(Names.NYI);
+        ResourceAddress address = dataSourceConfigurationAddress(dataSource);
+        Operation operation = new Operation.Builder(WRITE_ATTRIBUTE_OPERATION, address)
+                .param(NAME, ENABLED)
+                .param(VALUE, true)
+                .build();
+        dispatcher.execute(operation, result -> {
+            MessageEvent.fire(eventBus, Message.success(resources.messages().dataSourceEnabled(dataSource.getName())));
+            finder.refresh();
+        });
     }
 
     void enableStatistics(DataSource dataSource) {
-        if (dataSource.isEnabled()) {
-            DialogFactory.confirmation(resources.constants().enableStatistics(),
-                    resources.messages().enableStatisticsOnEnabledDataSource(dataSource.getName(),
-                            statementContext.selectedServer()),
-                    () -> {
-                        Browser.getWindow().alert(Names.NYI);
-                        return true;
-                    });
-        } else {
-            DialogFactory.confirmation(resources.constants().enableStatistics(),
-                    resources.messages().enableStatisticsOnDisabledDataSource(dataSource.getName(),
-                            statementContext.selectedServer()),
-                    () -> {
-                        Browser.getWindow().alert(Names.NYI);
-                        return true;
-                    });
-        }
+        ResourceAddress address = dataSourceConfigurationAddress(dataSource);
+        Operation operation = new Operation.Builder(WRITE_ATTRIBUTE_OPERATION, address)
+                .param(NAME, STATISTICS_ENABLED)
+                .param(VALUE, true)
+                .build();
+        dispatcher.execute(operation, result -> {
+            MessageEvent.fire(eventBus, Message.success(resources.messages().statisticsEnabled(dataSource.getName())));
+            finder.refresh();
+        });
     }
 }
\ No newline at end of file",2016-07-17T16:10:52Z,246
"@@ -85,20 +85,12 @@ class DataSourcePreview extends PreviewContent<DataSource> {
         previewBuilder().add(needsRestartWarning);
 
         noStatisticsWarning = new Alert(Icons.WARNING,
-                new SafeHtmlBuilder()
-                        .append(resources.messages().dataSourceStatisticsDisabled(dataSource.getName()))
-                        .appendEscaped("" "")
-                        .append(resources.messages().staleStatistics())
-                        .toSafeHtml(),
+                resources.messages().dataSourceStatisticsDisabled(dataSource.getName()),
                 resources.constants().enableStatistics(), event -> column.enableStatistics(dataSource));
         previewBuilder().add(noStatisticsWarning);
 
         disabledWarning = new Alert(Icons.WARNING,
-                new SafeHtmlBuilder()
-                        .append(resources.messages().dataSourceDisabledNoStatistics(dataSource.getName()))
-                        .appendEscaped("" "")
-                        .append(resources.messages().staleStatistics())
-                        .toSafeHtml(),
+                resources.messages().dataSourceDisabledNoStatistics(dataSource.getName()),
                 resources.constants().enable(), event -> column.enableDataSource(dataSource));
         previewBuilder().add(disabledWarning);
 ",2016-07-17T16:10:52Z,247
"@@ -131,19 +131,32 @@ private class RefreshFunction implements Function<FunctionContext> {
         public void execute(final Control<FunctionContext> control) {
             FinderColumn column = getColumn(segment.getColumnId());
             if (column != null) {
-                column.refresh(() -> {
-                    if (column.contains(segment.getItemId())) {
-                        column.markSelected(segment.getItemId());
-                        column.selectedRow().click();
-                        control.proceed();
-                    } else {
-                        logger.error(""Error in Finder.RefreshFunction: Unable to select item '{}' in column '{}'"",
-                                segment.getItemId(), segment.getColumnId());
+                // refresh the existing column
+                column.refresh(() -> selectItem(column, control));
+            } else {
+                // append the column
+                appendColumn(segment.getColumnId(), new AsyncCallback<FinderColumn>() {
+                    @Override
+                    public void onFailure(final Throwable throwable) {
                         control.abort();
                     }
+
+                    @Override
+                    public void onSuccess(final FinderColumn finderColumn) {
+                        selectItem(finderColumn, control);
+                    }
                 });
+            }
+        }
+
+        private void selectItem(FinderColumn column, Control<FunctionContext> control) {
+            if (column.contains(segment.getItemId())) {
+                column.markSelected(segment.getItemId());
+                control.getContext().push(column);
+                control.proceed();
             } else {
-                logger.error(""Error in Finder.RefreshFunction: Unable to find column '{}'"", segment.getColumnId());
+                logger.error(""Error in Finder.RefreshFunction: Unable to select item '{}' in column '{}'"",
+                        segment.getItemId(), segment.getColumnId());
                 control.abort();
             }
         }
@@ -426,6 +439,13 @@ public void reset(final String token, final String initialColumn, final PreviewC
         updateHistory();
     }
 
+    /**
+     * Refreshes the current path.
+     */
+    public void refresh() {
+        refresh(getContext().getPath());
+    }
+
     /**
      * Refreshes the specified path.
      * <p>
@@ -434,6 +454,7 @@ public void reset(final String token, final String initialColumn, final PreviewC
      */
     public void refresh(FinderPath path) {
         if (!path.isEmpty()) {
+
             int index = 0;
             Function[] functions = new Function[path.size()];
             for (FinderSegment segment : path) {
@@ -446,7 +467,14 @@ public void refresh(FinderPath path) {
                         public void onFailure(final FunctionContext context) {}
 
                         @Override
-                        public void onSuccess(final FunctionContext context) {}
+                        public void onSuccess(final FunctionContext context) {
+                            if (!context.emptyStack()) {
+                                FinderColumn column = context.pop();
+                                if (column.selectedRow() != null) {
+                                    column.selectedRow().click();
+                                }
+                            }
+                        }
                     }, functions);
         }
     }",2016-07-17T16:10:52Z,248
"@@ -59,6 +59,7 @@
 import static org.jboss.hal.dmr.ModelNodeHelper.getOrDefault;
 
 /**
+ * TODO Support standalone mode
  * @author Harald Pehl
  */
 public class ServerActions {",2016-07-17T16:10:52Z,93
"@@ -68,8 +68,6 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     String duplicateResource(String type);
 
     SafeHtml emptyModelNodeForm();
-    SafeHtml enableStatisticsOnDisabledDataSource(String name, String server);
-    SafeHtml enableStatisticsOnEnabledDataSource(String name, String server);
     SafeHtml endpointError(String url);
     SafeHtml endpointOk(String url);
 
@@ -176,11 +174,15 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml serverTimeout(String name);
     SafeHtml serverUndefined(String name);
 
+    SafeHtml staleStatistics();
+
     SafeHtml startServerGroupError(String name);
     SafeHtml startServerGroupSuccess(String name);
     SafeHtml startServerError(String name);
     SafeHtml startServerSuccess(String name);
 
+    SafeHtml statisticsEnabled(String name);
+
     String stop(String name);
     SafeHtml stopServerGroupError(String name);
     SafeHtml stopServerGroupQuestion(String name);
@@ -197,8 +199,6 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml suspendServerQuestion(String name);
     SafeHtml suspendServerSuccess(String name);
 
-    SafeHtml staleStatistics();
-
     SafeHtml testConnectionError();
     SafeHtml testConnectionSuccess();
     SafeHtml topologyError();",2016-07-17T16:10:52Z,94
"@@ -40,8 +40,6 @@ deploymentReplaced[\=1]=<strong>One</strong> deployment has been replaced.
 domainControllerTimeout=The domain controller <strong>{0}</strong> does not respond. Please check the log files and refresh this page after the domain controller is up and running again.
 duplicateResource=A {0} with this name already exists.
 emptyModelNodeForm=<strong>No attributes.</strong> This resource doesn&#39;t contain attributes or only complex attributes which are currently not supported.
-enableStatisticsOnDisabledDataSource=The data source <strong>{0}</strong> is currently disabled. In order to enable statistics, <ol><li>the <code>statistics-enabled</code> flag will be set to <code>true</>,</li><li>the data source will be enabled and</li><li>the server <strong>{1}</strong> will be reloaded.</li></ol>
-enableStatisticsOnEnabledDataSource=The data source <strong>{0}</strong> is currently enabled. In order to enable statistics, <ol><li>the data source will be disabled,<li>the <code>statistics-enabled</code> flag will be set to <code>true</>,</li><li>the data source will be re-enabled and</li><li>the server <strong>{1}</strong> will be reloaded.</li></ol>
 endpointError=The management interface does not respond. Please make sure<ul><li>you have added users to be able to access the admin console</li><li>the management interface is up and running</li><li><a href=""#"" class=""alert-link"">{0}</a> is configured as an allowed origin</li></ul>
 endpointOk=The management interface at <a href=""#"" class=""alert-link"">{0}</a> is up and running.
 flushConnectionSuccess=Flush connection successful
@@ -140,6 +138,7 @@ startServerError=Failed to start server <strong>{0}</strong>.
 startServerGroupError=Failed to start server group <strong>{0}</strong>.
 startServerGroupSuccess=Server group <strong>{0}</strong> successfully started.
 startServerSuccess=Server <strong>{0}</strong> successfully started.
+statisticsEnabled=Statistics for <strong>{0}</strong> successfully enabled.
 stop=Stop {0}
 stopServerError=Failed to stop server <strong>{0}</strong>.
 stopServerGroupError=Failed to stop server group <strong>{0}</strong>.",2016-07-17T16:10:52Z,94
"@@ -47,6 +47,8 @@ public static class Api {
         @JsMethod(namespace = GLOBAL, name = ""$"")
         public static native Api element(HTMLInputElement element);
 
+        public native boolean bootstrapSwitch();
+
         public native boolean bootstrapSwitch(String method);
 
         public native void bootstrapSwitch(String method, boolean param);",2019-03-20T19:30:39Z,99
"@@ -25,6 +25,7 @@
 import org.jboss.hal.resources.CSS;
 import org.jboss.hal.resources.Ids;
 
+import static org.jboss.gwt.elemento.core.Elements.i;
 import static org.jboss.gwt.elemento.core.Elements.*;
 import static org.jboss.gwt.elemento.core.EventType.bind;
 import static org.jboss.gwt.elemento.core.EventType.change;
@@ -161,8 +162,13 @@ private void switchToExpressionMode() {
         @Override
         public void attach() {
             super.attach();
-            inputElement.classList.add(bootstrapSwitch);
-            SwitchBridge.Api.element(inputElement).onChange((event, state) -> modifyValue(state));
+            HTMLElement editElement = SwitchItem.this.element(EDITING);
+            if (Elements.isVisible(editElement) && editElement.querySelector(""."" + bootstrapSwitchContainer) == null) {
+                inputElement.classList.add(bootstrapSwitch);
+                SwitchBridge.Api api = SwitchBridge.Api.element(inputElement);
+                api.bootstrapSwitch();
+                api.onChange((event, state) -> modifyValue(state));
+            }
         }
 
         @Override",2019-03-20T19:30:39Z,192
"@@ -56,6 +56,7 @@ public interface CSS {
     String bootstrapError = ""bootstrap-error"";
     String bootstrapSelect = ""bootstrap-select"";
     String bootstrapSwitch = ""bootstrap-switch"";
+    String bootstrapSwitchContainer = ""bootstrap-switch-container"";
     String breadcrumb = ""breadcrumb"";
     String breakTooltip = ""break-tooltip"";
     String btn = ""btn"";",2019-03-20T19:30:39Z,159
"@@ -27,7 +27,7 @@
 public class DataSourceTemplate {
 
     @SuppressWarnings(""HardCodedStringLiteral"")
-    enum Vendor {
+    public enum Vendor {
         H2(""H2""),
         POSTGRE_SQL(""PostgreSQL""),
         MYSQL(""MySQL""),
@@ -36,7 +36,7 @@ enum Vendor {
         DB2(""IBM DB2""),
         SYBASE(""Sybase"");
 
-        private final String label;
+        public final String label;
 
         Vendor(String label) {
             this.label = label;",2018-06-28T18:24:04Z,80
"@@ -104,6 +104,7 @@ public DataSourceTemplates() {
                     dataSource.get(JNDI_NAME).set(""java:/PostgresDS"");
                     dataSource.get(DRIVER_NAME).set(POSTGRESQL);
                     dataSource.get(CONNECTION_URL).set(""jdbc:postgresql://localhost:5432/postgresdb"");
+                    dataSource.get(DATASOURCE_CLASS).set(""org.postgresql.ds.PGSimpleDataSource"");
                     dataSource.get(USER_NAME).set(ADMIN);
                     dataSource.get(PASSWORD).set(ADMIN);
                     dataSource.get(BACKGROUND_VALIDATION).set(true);
@@ -192,6 +193,7 @@ public DataSourceTemplates() {
                     dataSource.get(JNDI_NAME).set(""java:/OracleDS"");
                     dataSource.get(DRIVER_NAME).set(ORACLE);
                     dataSource.get(CONNECTION_URL).set(""jdbc:oracle:thin:@localhost:1521:orcalesid"");
+                    dataSource.get(DATASOURCE_CLASS).set(""oracle.jdbc.pool.OracleDataSource"");
                     dataSource.get(USER_NAME).set(ADMIN);
                     dataSource.get(PASSWORD).set(ADMIN);
                     dataSource.get(BACKGROUND_VALIDATION).set(true);
@@ -243,6 +245,7 @@ public DataSourceTemplates() {
                     dataSource.get(DRIVER_NAME).set(SQLSERVER);
                     dataSource.get(CONNECTION_URL)
                             .set(""jdbc:microsoft:sqlserver://localhost:1433;DatabaseName=MyDatabase"");
+                    dataSource.get(DATASOURCE_CLASS).set(""com.microsoft.sqlserver.jdbc.SQLServerDataSource"");
                     dataSource.get(USER_NAME).set(ADMIN);
                     dataSource.get(PASSWORD).set(ADMIN);
                     dataSource.get(BACKGROUND_VALIDATION).set(true);",2018-06-28T18:24:04Z,80
"@@ -63,7 +63,7 @@ class ChooseTemplateStep extends WizardStep<Context, State> {
                                         String id = ((HTMLInputElement) event.target).value;
                                         wizard().getContext().template = templates.getTemplate(id);
                                     }))
-                            .add(span().textContent(template.getId())))
+                            .add(span().textContent(template.getVendor().label)))
                     .asElement());
         }
 ",2018-06-28T18:24:04Z,143
"@@ -26,6 +26,7 @@
 import org.jboss.hal.core.finder.FinderContext;
 import org.jboss.hal.core.finder.FinderPathFactory;
 import org.jboss.hal.core.finder.FinderSegment;
+import org.jboss.hal.core.finder.ItemActionFactory;
 import org.jboss.hal.core.finder.PreviewContent;
 import org.jboss.hal.core.finder.StaticItem;
 import org.jboss.hal.core.finder.StaticItemColumn;
@@ -36,6 +37,7 @@
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.flow.Progress;
 import org.jboss.hal.meta.security.SecurityContextRegistry;
+import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
@@ -75,6 +77,7 @@ public BrowseByColumn(Finder finder,
             SecurityContextRegistry securityContextRegistry,
             @Footer Provider<Progress> progress,
             EventBus eventBus,
+            ItemActionFactory itemActionFactory,
             Dispatcher dispatcher,
             Places places,
             FinderPathFactory finderPathFactory,
@@ -97,6 +100,11 @@ public BrowseByColumn(Finder finder,
                                 .nextColumn(Ids.SERVER_GROUP)
                                 .onPreview(new PreviewContent<>(Names.SERVER_GROUPS,
                                         resources.previews().runtimeServerGroups()))
+                                .build(),
+                        new StaticItem.Builder(Names.MANAGEMENT_OPERATIONS)
+                                .onPreview(new PreviewContent<>(Names.MANAGEMENT_OPERATIONS,
+                                        resources.previews().runtimeManagementOperations()))
+                                .action(itemActionFactory.view(NameTokens.MANAGEMENT_OPERATIONS))
                                 .build()
                 ));
     }",2018-12-27T19:52:32Z,208
"@@ -75,7 +75,6 @@
 import static org.jboss.hal.client.runtime.host.HostColumn.HOST_CONFIGURATION_CHANGES_ADDRESS;
 import static org.jboss.hal.client.runtime.host.HostColumn.HOST_CONNECTION_ADDRESS;
 import static org.jboss.hal.client.runtime.host.HostColumn.HOST_MANAGEMENT_OPERATIONS_ADDRESS;
-import static org.jboss.hal.client.runtime.managementoperations.ManagementOperationsPresenter.MANAGEMENT_OPERATIONS_TEMPLATE;
 import static org.jboss.hal.core.finder.FinderColumn.RefreshMode.RESTORE_SELECTION;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.flow.Flow.series;
@@ -267,11 +266,6 @@ public List<ItemAction<Host>> actions() {
                             actions.add(itemActionFactory.placeRequest(resources.constants().configurationChanges(),
                                     ccPlaceRequest, Constraint.executable(HOST_CONFIGURATION_CHANGES_TEMPLATE, ADD)));
                         }
-                        PlaceRequest moPlaceRequest = new PlaceRequest.Builder()
-                                .nameToken(NameTokens.MANAGEMENT_OPERATIONS).build();
-                        actions.add(itemActionFactory.placeRequest(resources.constants().managementOperations(),
-                                moPlaceRequest, Constraint.executable(MANAGEMENT_OPERATIONS_TEMPLATE,
-                                        READ_RESOURCE_OPERATION)));
                         // TODO Add additional operations like :reload(admin-mode=true), :clean-obsolete-content or :take-snapshot
                         actions.add(ItemAction.separator());
                         actions.add(new ItemAction.Builder<Host>()",2018-12-27T19:52:32Z,5
"@@ -55,9 +55,8 @@ static ExecutionStatus find(String name) {
 
 
     private String address;
-    private boolean nonProgressing;
 
-    ManagementOperations(NamedNode node, String nonProgressingId) {
+    ManagementOperations(NamedNode node) {
         super(node.getName(), node.asModelNode());
         StringBuilder builder = new StringBuilder();
         builder.append(""/"");
@@ -69,7 +68,6 @@ static ExecutionStatus find(String name) {
             }
         }
         this.address = builder.toString();
-        this.nonProgressing = nonProgressingId != null && nonProgressingId.equals(node.getName());
     }
 
     public String getAccessMechanism() {
@@ -81,7 +79,19 @@ public String getAddress() {
     }
 
     public boolean isNonProgressing() {
-        return nonProgressing;
+        return hasDefined(HAL_NON_PROGRESSING) && get(HAL_NON_PROGRESSING).asBoolean();
+    }
+
+    public void setAsNonProgressing() {
+        get(HAL_NON_PROGRESSING).set(true);
+    }
+
+    public String getActiveAddressHost() {
+        return hasDefined(HAL_ACTIVE_ADDRESS_HOST) ? get(HAL_ACTIVE_ADDRESS_HOST).asString() : null;
+    }
+
+    public String getActiveAddressServer() {
+        return hasDefined(HAL_ACTIVE_ADDRESS_SERVER) ? get(HAL_ACTIVE_ADDRESS_SERVER).asString() : null;
     }
 
     public String getCallerThread() {",2018-12-27T19:52:32Z,249
"@@ -81,6 +81,12 @@ public HTMLElement getStatusElement() {
     public SafeHtml getDescriptionHtml() {
         SafeHtmlBuilder html = new SafeHtmlBuilder();
         html.append(resources.messages().operationLabel(operation.getOperation()));
+        if (operation.getActiveAddressHost() != null) {
+            html.append(resources.messages().operationHost(operation.getActiveAddressHost()));
+        }
+        if (operation.getActiveAddressServer() != null) {
+            html.append(resources.messages().operationServer(operation.getActiveAddressServer()));
+        }
         html.append(resources.messages().addressLabel(operation.getAddress()));
         html.append(resources.messages().callerThreadLabel(operation.getCallerThread()));
         html.append(resources.messages()",2018-12-27T19:52:32Z,250
"@@ -15,10 +15,14 @@
  */
 package org.jboss.hal.client.runtime.managementoperations;
 
+import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 import javax.inject.Inject;
+import javax.inject.Provider;
 
+import com.google.common.base.Joiner;
 import com.google.gwt.safehtml.shared.SafeHtmlUtils;
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.client.annotations.NameToken;
@@ -35,33 +39,50 @@
 import org.jboss.hal.dmr.Composite;
 import org.jboss.hal.dmr.CompositeResult;
 import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.ModelType;
 import org.jboss.hal.dmr.NamedNode;
 import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.Property;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.flow.FlowContext;
+import org.jboss.hal.flow.Outcome;
+import org.jboss.hal.flow.Progress;
+import org.jboss.hal.flow.Task;
 import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Footer;
 import org.jboss.hal.spi.Message;
 import org.jboss.hal.spi.MessageEvent;
 import org.jboss.hal.spi.Requires;
+import rx.Completable;
+import rx.Single;
 
+import static java.util.stream.Collectors.toList;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
+import static org.jboss.hal.flow.Flow.series;
 import static org.jboss.hal.meta.token.NameTokens.MANAGEMENT_OPERATIONS;
 
 public class ManagementOperationsPresenter extends
         ApplicationFinderPresenter<ManagementOperationsPresenter.MyView, ManagementOperationsPresenter.MyProxy> {
 
+    private static final String EQ = ""="";
+    private static final String WILDCARD = ""*"";
+    private static final String WFLYDM_0089 = ""WFLYDM0089"";
+    private AddressTemplate MGMT_OPERATIONS_TEMPLATE = AddressTemplate.of(""/core-service=management/service=management-operations"");
     public static final String MANAGEMENT_OPERATIONS_ADDRESS = ""{selected.host}/core-service=management/service=management-operations"";
-    public static final String ACTIVE_OPERATIONS_ADDRESS = ""{selected.host}/core-service=management/service=management-operations/active-operation=*"";
-    public static final AddressTemplate MANAGEMENT_OPERATIONS_TEMPLATE = AddressTemplate.of(
-            MANAGEMENT_OPERATIONS_ADDRESS);
-    public static final AddressTemplate ACTIVE_OPERATIONS_TEMPLATE = AddressTemplate.of(ACTIVE_OPERATIONS_ADDRESS);
+    private static final String ACTIVE_OPERATIONS_ADDRESS = ""{selected.host}/core-service=management/service=management-operations/active-operation=*"";
+    public static final AddressTemplate MANAGEMENT_OPERATIONS_TEMPLATE = AddressTemplate.of(MANAGEMENT_OPERATIONS_ADDRESS);
+    static final AddressTemplate ACTIVE_OPERATIONS_TEMPLATE = AddressTemplate.of(ACTIVE_OPERATIONS_ADDRESS);
 
     private final FinderPathFactory finderPathFactory;
     private final Dispatcher dispatcher;
     private final StatementContext statementContext;
+    private Provider<Progress> progress;
     private final Resources resources;
     private EventBus eventBus;
     private Environment environment;
@@ -75,13 +96,15 @@ public ManagementOperationsPresenter(EventBus eventBus,
             FinderPathFactory finderPathFactory,
             Dispatcher dispatcher,
             StatementContext statementContext,
+            @Footer Provider<Progress> progress,
             Resources resources) {
         super(eventBus, view, myProxy, finder);
         this.eventBus = eventBus;
         this.environment = environment;
         this.finderPathFactory = finderPathFactory;
         this.dispatcher = dispatcher;
         this.statementContext = statementContext;
+        this.progress = progress;
         this.resources = resources;
     }
 
@@ -93,7 +116,18 @@ protected void onBind() {
 
     @Override
     public FinderPath finderPath() {
-        return environment.isStandalone() ? finderPathFactory.runtimeServerPath() : finderPathFactory.runtimeHostPath();
+        if (environment.isStandalone()) {
+            // in standalone mode, the Management Operations option is on a drop down as the StandaloneServerColumn
+            // generic type is Server, doesn't accomodate a static option to add the Management Operations
+            // and changing the column to a StaticItemColumn would require too much change for little return
+            return finderPathFactory.runtimeServerPath()
+                    .append(Ids.RUNTIME_SUBSYSTEM, MANAGEMENT_OPERATIONS,
+                            resources.constants().monitor(), Names.MANAGEMENT_OPERATIONS);
+        } else {
+            return new FinderPath()
+                    .append(Ids.DOMAIN_BROWSE_BY, Ids.MANAGEMENT_OPERATIONS,
+                            Names.RUNTIME, Names.MANAGEMENT_OPERATIONS);
+        }
     }
 
     public StatementContext getStatementContext() {
@@ -102,68 +136,354 @@ public StatementContext getStatementContext() {
 
     @Override
     protected void reload() {
-        ResourceAddress addressFindNP = MANAGEMENT_OPERATIONS_TEMPLATE.resolve(statementContext);
-        Operation operationFindNP = new Operation.Builder(addressFindNP, FIND_NON_PROGRESSING_OPERATION)
-                .build();
+        if (environment.isStandalone()) {
 
-        ResourceAddress addressMO = MANAGEMENT_OPERATIONS_TEMPLATE.resolve(statementContext);
-        Operation operationMO = new Operation.Builder(addressMO, READ_CHILDREN_RESOURCES_OPERATION)
-                .param(CHILD_TYPE, ACTIVE_OPERATION)
-                .build();
+            ResourceAddress addressFindNP = MANAGEMENT_OPERATIONS_TEMPLATE.resolve(statementContext);
+            Operation operationFindNP = new Operation.Builder(addressFindNP, FIND_NON_PROGRESSING_OPERATION)
+                    .build();
 
-        dispatcher.execute(new Composite(operationFindNP, operationMO), (CompositeResult result) -> {
+            ResourceAddress addressMO = MANAGEMENT_OPERATIONS_TEMPLATE.resolve(statementContext);
+            Operation operationMO = new Operation.Builder(addressMO, READ_CHILDREN_RESOURCES_OPERATION)
+                    .param(CHILD_TYPE, ACTIVE_OPERATION)
+                    .build();
 
-            ModelNode resultNP = result.step(0).get(RESULT);
-            ModelNode resultOperations = result.step(1).get(RESULT);
-            final String nonProgressingId = resultNP.isDefined() ? resultNP.asString() : null;
-            getView().update(asNamedNodes(resultOperations.asPropertyList()), nonProgressingId);
+            dispatcher.execute(new Composite(operationFindNP, operationMO), (CompositeResult result) -> {
+                ModelNode resultNP = result.step(0).get(RESULT);
+                ModelNode resultOperations = result.step(1).get(RESULT);
+                final String nonProgressingId = resultNP.isDefined() ? resultNP.asString() : null;
 
-        });
+                List<ManagementOperations> activeOps = asNamedNodes(resultOperations.asPropertyList()).stream()
+                        .map(ManagementOperations::new)
+                        .peek(activeOp -> {
+                            if (nonProgressingId != null && nonProgressingId.equals(activeOp.getName())) {
+                                activeOp.setAsNonProgressing();
+                            }
+                        })
+                        .collect(toList());
+
+                getView().update(activeOps);
+            });
+        } else {
+
+            // return available hosts, to later call a find-non-progressing-operation on each host
+            Task<FlowContext> hostsTask = context -> {
+                ResourceAddress address = new ResourceAddress();
+                Operation operation = new Operation.Builder(address, READ_CHILDREN_NAMES_OPERATION)
+                        .param(CHILD_TYPE, HOST)
+                        .build();
+                return dispatcher.execute(operation)
+                        .doOnSuccess(result -> {
+                            List<String> hosts = result.asList().stream()
+                                    .map(ModelNode::asString)
+                                    .collect(toList());
+                            context.set(HOSTS, hosts);
+                        })
+                        .toCompletable();
+            };
+
+            // return running servers, to later call a find-non-progressing-operation on each runtime server
+            Task<FlowContext> serversTask = context -> {
+                // /host=*/server=*:query(select=[host,name],where={server-state=running})
+                ResourceAddress address = new ResourceAddress()
+                        .add(HOST, WILDCARD)
+                        .add(SERVER, WILDCARD);
+                Operation operation = new Operation.Builder(address, QUERY)
+                        .param(SELECT, new ModelNode().add(HOST).add(NAME))
+                        .param(WHERE, new ModelNode().set(SERVER_STATE, ""running""))
+                        .build();
+                return dispatcher.execute(operation)
+                        .doOnSuccess(result -> {
+                            List<String> servers = Collections.emptyList();
+                            if (result != null && result.isDefined()) {
+                                servers = result.asList().stream()
+                                        .map(r -> hostServerAddress(r.get(RESULT)))
+                                        .collect(toList());
+                            }
+                            context.set(""servers"", servers);
+                        })
+                        .toCompletable();
+            };
+
+            // call find-non-progressing-operation and read-resource of active operations
+            // on each host and server
+            Task<FlowContext> findNonProgressingTask = context -> {
+
+                List<String> hosts = context.get(HOSTS);
+                List<String> servers = context.get(""servers"");
+
+                Composite composite = new Composite();
+                for (String host : hosts) {
+                    ResourceAddress address = new ResourceAddress().add(HOST, host)
+                            .add(CORE_SERVICE, MANAGEMENT)
+                            .add(SERVICE, MANAGEMENT_OPERATIONS);
+                    Operation operation = new Operation.Builder(address, FIND_NON_PROGRESSING_OPERATION).build();
+                    composite.add(operation);
+
+                    ResourceAddress ad = new ResourceAddress(address.clone()).add(ACTIVE_OPERATION, WILDCARD);
+                    Operation operationMO = new Operation.Builder(ad, READ_RESOURCE_OPERATION)
+                            .build();
+                    composite.add(operationMO);
+                }
+                if (!servers.isEmpty()) {
+                    for (String server : servers) {
+                        ResourceAddress address = AddressTemplate.of(server)
+                                .append(MGMT_OPERATIONS_TEMPLATE)
+                                .resolve(statementContext);
+                        Operation findOp = new Operation.Builder(address, FIND_NON_PROGRESSING_OPERATION).build();
+                        composite.add(findOp);
+
+                        ResourceAddress ad = new ResourceAddress(address.clone()).add(ACTIVE_OPERATION, WILDCARD);
+                        Operation operation = new Operation.Builder(ad, READ_RESOURCE_OPERATION).build();
+                        composite.add(operation);
+                    }
+                }
+                return dispatcher.execute(composite)
+                        .doOnSuccess(response -> {
+                            List<String> nonProgressingOps = new ArrayList<>();
+                            List<ManagementOperations> ops = new ArrayList<>();
+                            for (ModelNode r : response) {
+                                ModelNode result = r.get(RESULT);
+                                if (result != null && result.isDefined()) {
+                                    ModelType type = result.getType();
+                                    // if model is LIST it is the list of active operations
+                                    if (ModelType.LIST.equals(type)) {
+                                        for (ModelNode op : result.asList()) {
+                                            ModelNode opResult = op.get(RESULT);
+                                            // the result has two addresses
+                                            // 1) the active-operation address itself, example
+                                            //  /host=master/server=server-three/core-service=management/service=management-operations/active-operation=1940701884
+                                            // 2) the resource address
+                                            //  /host=master/server=server-three/subsystem=elytron/filesystem-realm=file1
+                                            // the active-operation address should be store to later use it to cancel, if needed
+                                            // the resource address is displayed to the user
+                                            ModelNode activeOpAddress = op.get(ADDRESS);
+                                            opResult.get(HAL_ACTIVE_OP_ADDRESS).set(activeOpAddress);
+                                            String opId = null;
+                                            List<Property> activeOperationAddressList = activeOpAddress.asPropertyList();
+                                            for (Property p : activeOperationAddressList) {
+                                                if (p.getName().equals(ACTIVE_OPERATION)) {
+                                                    opId = p.getValue().asString();
+                                                }
+                                                // the result doesn't show the full address of a running server
+                                                // store the host and server to later show in the view
+                                                if (p.getName().equals(HOST)) {
+                                                    opResult.get(HAL_ACTIVE_ADDRESS_HOST).set(p.getValue().asString());
+                                                }
+                                                if (p.getName().equals(SERVER)) {
+                                                    opResult.get(HAL_ACTIVE_ADDRESS_SERVER).set(p.getValue().asString());
+                                                }
+                                            }
+                                            NamedNode node = new NamedNode(opId, opResult);
+                                            ManagementOperations activeOp = new ManagementOperations(node);
+                                            ops.add(activeOp);
+                                        }
+                                    } else {
+                                        nonProgressingOps.add(result.asString());
+                                    }
+                                }
+                            }
+                            // if there are non progressing operations, mark them in the list
+                            if (!nonProgressingOps.isEmpty()) {
+                                Collections.sort(nonProgressingOps);
+                                for (ManagementOperations mop : ops) {
+                                    if (nonProgressingOps.indexOf(mop.getName()) > -1) {
+                                        mop.setAsNonProgressing();
+                                    }
+                                }
+                            }
+                            context.set(""active-operations"", ops);
+                        })
+                        .toCompletable();
+            };
+
+            series(new FlowContext(progress.get()), hostsTask, serversTask, findNonProgressingTask)
+                    .subscribe(new Outcome<FlowContext>() {
+                        @Override
+                        public void onError(FlowContext context, Throwable error) {
+                            MessageEvent.fire(getEventBus(), Message.error(SafeHtmlUtils.fromString(
+                                    ""Error loading management operations: "" + error.getMessage())));
+                        }
+
+                        @Override
+                        public void onSuccess(FlowContext context) {
+                            List<ManagementOperations> ops = context.get(""active-operations"");
+                            getView().update(ops);
+                        }
+                    });
+        }
     }
 
     void cancelNonProgressingOperation() {
-        ResourceAddress address = MANAGEMENT_OPERATIONS_TEMPLATE.resolve(statementContext);
-        Operation operation = new Operation.Builder(address, CANCEL_NON_PROGRESSING_OPERATION)
-                .build();
-        dispatcher.execute(operation,
-                result -> {
-                    MessageEvent.fire(eventBus,
-                            Message.info(resources.messages().cancelledOperation(result.asString())));
-                    reload();
-                },
-                (operation1, failure) -> {
-                    MessageEvent.fire(eventBus, Message.error(SafeHtmlUtils.fromString(failure)));
-                    reload();
-                },
-                (operation1, exception) -> {
-                    MessageEvent.fire(eventBus,
-                            Message.error(SafeHtmlUtils.fromString(exception.getMessage())));
-                    reload();
-                });
+        if (environment.isStandalone()) {
+            ResourceAddress address = MANAGEMENT_OPERATIONS_TEMPLATE.resolve(statementContext);
+            Operation operation = new Operation.Builder(address, CANCEL_NON_PROGRESSING_OPERATION)
+                    .build();
+            dispatcher.execute(operation,
+                    result -> {
+                        MessageEvent.fire(eventBus,
+                                Message.info(resources.messages().cancelledOperation(result.asString())));
+                        reload();
+                    },
+                    (operation1, failure) -> {
+                        // the cancel-non-progressing-operation returns an exception message if there are no
+                        // operation to cancel, handle this a non error in HAL
+                        if (failure.contains(WFLYDM_0089)) {
+                            MessageEvent.fire(eventBus, Message.success(SafeHtmlUtils.fromString(failure)));
+                        } else {
+                            MessageEvent.fire(eventBus, Message.error(SafeHtmlUtils.fromString(failure)));
+                        }
+                        reload();
+                    },
+                    (operation1, ex) -> {
+                        // the cancel-non-progressing-operation returns an exception message if there are no
+                        // operation to cancel, handle this a non error in HAL
+                        if (ex.getMessage().contains(WFLYDM_0089)) {
+                            MessageEvent.fire(eventBus, Message.success(SafeHtmlUtils.fromString(ex.getMessage())));
+                        } else {
+                            MessageEvent.fire(eventBus, Message.error(SafeHtmlUtils.fromString(ex.getMessage())));
+                        }
+                        reload();
+                    });
+        } else {
+            Composite composite = new Composite();
+            // return running hosts, to later call a cancel-non-progressing-operation on each host
+            ResourceAddress rootAddress = new ResourceAddress();
+            Operation opHosts = new Operation.Builder(rootAddress, READ_CHILDREN_NAMES_OPERATION)
+                    .param(CHILD_TYPE, HOST)
+                    .build();
+            composite.add(opHosts);
+
+            ResourceAddress address = new ResourceAddress()
+                    .add(HOST, WILDCARD)
+                    .add(SERVER, WILDCARD);
+            Operation opRunningServers = new Operation.Builder(address, QUERY)
+                    .param(SELECT, new ModelNode().add(HOST).add(NAME))
+                    .param(WHERE, new ModelNode().set(SERVER_STATE, ""running""))
+                    .build();
+            composite.add(opRunningServers);
+
+            dispatcher.execute(composite, (CompositeResult compositeResult) -> {
+
+                // available hosts
+                List<String> hosts = compositeResult.step(0).get(RESULT).asList().stream()
+                        .map(ModelNode::asString)
+                        .collect(toList());
+
+                // runing servers
+                List<String> servers = Collections.emptyList();
+                ModelNode result = compositeResult.step(1);
+                if (result != null && result.isDefined()) {
+                    servers = result.get(RESULT).asList().stream()
+                            .map(r -> hostServerAddress(r.get(RESULT)))
+                            .collect(toList());
+                }
+
+                // run each :cancel-non-progressing-operation on a specific task
+                // because the :cancel-non-progressing-operation returns as a failure
+                // for this case, continue to run the next task
+                List<Task<FlowContext>> tasks = new ArrayList<>(hosts.size());
+                for (String host : hosts) {
+                    // call cancel-non-progressing-operation on each host
+                    Task<FlowContext> task = context -> {
+                        ResourceAddress hostAddress = new ResourceAddress().add(HOST, host)
+                                .add(CORE_SERVICE, MANAGEMENT)
+                                .add(SERVICE, MANAGEMENT_OPERATIONS);
+                        return buildCancelOperation(hostAddress, context);
+                    };
+                    tasks.add(task);
+                }
+
+                for (String server : servers) {
+                    // call cancel-non-progressing-operation on each server
+                    Task<FlowContext> task = context -> {
+                        ResourceAddress serverAddress = AddressTemplate.of(server)
+                                .append(MGMT_OPERATIONS_TEMPLATE)
+                                .resolve(statementContext);
+                        return buildCancelOperation(serverAddress, context);
+                    };
+                    tasks.add(task);
+                }
+
+                series(new FlowContext(progress.get()), tasks)
+                        .subscribe(new Outcome<FlowContext>() {
+                            @Override
+                            public void onError(FlowContext context, Throwable error) {
+                                MessageEvent.fire(getEventBus(), Message.error(SafeHtmlUtils.fromString(
+                                        ""Error loading management operations: "" + error.getMessage())));
+                            }
+
+                            @Override
+                            public void onSuccess(FlowContext context) {
+                                if (context.emptyStack()) {
+                                    // display the standard message if there is no cancelled operation
+                                    MessageEvent.fire(eventBus,
+                                            Message.success(SafeHtmlUtils.fromString(context.get(WFLYDM_0089))));
+                                } else {
+                                    // display the cancelled non progressing operation ids
+                                    List<String> canceledOps = new ArrayList<>();
+                                    while (!context.emptyStack()) {
+                                        canceledOps.add(context.pop());
+                                    }
+                                    String ids = Joiner.on("", "").join(canceledOps);
+                                    MessageEvent.fire(eventBus,
+                                            Message.success(resources.messages().cancelledOperation(ids)));
+                                }
+                                reload();
+                            }
+                        });
+            });
+        }
+    }
+
+    private Completable buildCancelOperation(ResourceAddress address, FlowContext context) {
+        Operation operation = new Operation.Builder(address, CANCEL_NON_PROGRESSING_OPERATION).build();
+        return dispatcher.execute(operation)
+                .doOnSuccess(result -> {
+                    if (result.isDefined()) {
+                        context.push(result.asString());
+                    }
+                })
+                .onErrorResumeNext(ex -> {
+                    // the cancel-non-progressing-operation returns an exception message if there are no
+                    // operation to cancel, handle this a non error in HAL
+                    if (ex.getMessage().contains(WFLYDM_0089)) {
+                        context.set(WFLYDM_0089, ex.getMessage());
+                        return Single.just(new ModelNode());
+                    } else {
+                        return Single.error(ex);
+                    }
+                })
+                .toCompletable();
     }
 
     public void cancel(ManagementOperations item) {
         DialogFactory.showConfirmation(resources.constants().cancelActiveOperation(),
                 resources.messages().cancelActiveOperation(item.getName()),
                 () -> {
-                    ResourceAddress address = ACTIVE_OPERATIONS_TEMPLATE.resolve(statementContext, item.getName());
-                    Operation operation = new Operation.Builder(address, CANCEL_OPERATION)
-                            .build();
+                    ResourceAddress address;
+                    if (environment.isStandalone()) {
+                        address = ACTIVE_OPERATIONS_TEMPLATE.resolve(statementContext, item.getName());
+                    } else {
+                        address = new ResourceAddress(item.get(HAL_ACTIVE_OP_ADDRESS));
+                    }
+                    Operation operation = new Operation.Builder(address, CANCEL_OPERATION).build();
                     dispatcher.execute(operation, result -> reload());
                 });
     }
 
+    private String hostServerAddress(ModelNode model) {
+        return HOST + EQ + model.get(HOST).asString() + ""/"" + SERVER + EQ + model.get(NAME).asString();
+    }
 
     // @formatter:off
     @ProxyCodeSplit
     @NameToken(MANAGEMENT_OPERATIONS)
     @Requires({MANAGEMENT_OPERATIONS_ADDRESS, ACTIVE_OPERATIONS_ADDRESS})
     public interface MyProxy extends ProxyPlace<ManagementOperationsPresenter> {
-
     }
 
     public interface MyView extends HalView, HasPresenter<ManagementOperationsPresenter> {
-        void update(List<NamedNode> nodes, String nonProgressingOperation);
+        void update(List<ManagementOperations> activeOperations);
     }
     // @formatter:on
 }",2018-12-27T19:52:32Z,251
"@@ -24,7 +24,6 @@
 import org.jboss.hal.ballroom.dataprovider.DataProvider;
 import org.jboss.hal.core.mbui.listview.ModelNodeListView;
 import org.jboss.hal.core.mvp.HalViewImpl;
-import org.jboss.hal.dmr.NamedNode;
 import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.resources.Constants;
@@ -34,7 +33,6 @@
 import org.jboss.hal.resources.Resources;
 
 import static java.util.Comparator.comparing;
-import static java.util.stream.Collectors.toList;
 import static org.jboss.hal.client.runtime.managementoperations.ManagementOperationsPresenter.ACTIVE_OPERATIONS_TEMPLATE;
 import static org.jboss.hal.client.runtime.managementoperations.ManagementOperationsPresenter.MANAGEMENT_OPERATIONS_TEMPLATE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
@@ -73,13 +71,17 @@ public ManagementOperationsView(MetadataRegistry metadataRegistry, Resources res
                 .toolbarAttribute(new Toolbar.Attribute<>(ACCESS_MECHANISM, constants.accessMechanism(),
                         (node, filter) -> node.getAccessMechanism().toLowerCase().equals(filter.toLowerCase()),
                         comparing(ManagementOperations::getAccessMechanism)))
-                .toolbarAttribute(new Toolbar.Attribute<>(OPERATION, resources.constants().operation(),
-                        (model, filter) -> model.getOperation().contains(filter), null))
                 .toolbarAttribute(new Toolbar.Attribute<>(ADDRESS, resources.constants().address(),
-                        (model, filter) -> model.getAddress().contains(filter), null))
+                        // filter by three address attributes: address, host and server
+                        (model, filter) -> model.getAddress().contains(filter)
+                                || (model.getActiveAddressHost() != null && model.getActiveAddressHost().contains(filter))
+                                || (model.getActiveAddressServer() != null && model.getActiveAddressServer().contains(filter)),
+                        null))
                 .toolbarAttribute(new Toolbar.Attribute<>(EXECUTION_STATUS, resources.constants().executionStatus(),
                         (node, filter) -> node.getExecutionStatus().toLowerCase().contains(filter.toLowerCase()),
                         comparing(ManagementOperations::getExecutionStatus)))
+                .toolbarAttribute(new Toolbar.Attribute<>(OPERATION, resources.constants().operation(),
+                        (model, filter) -> model.getOperation().contains(filter), null))
                 .toolbarAction(new Toolbar.Action(Ids.build(ACTIVE_OPERATION, Ids.REFRESH),
                         constants.reload(), findDescription, () -> presenter.reload()))
                 .toolbarAction(new Toolbar.Action(Ids.build(ACTIVE_OPERATION, Ids.CANCEL_NON_PROGRESSING_OPERATION),
@@ -98,12 +100,9 @@ public void setPresenter(ManagementOperationsPresenter presenter) {
     }
 
     @Override
-    public void update(List<NamedNode> nodes, String nonProgressingOperation) {
-        List<ManagementOperations> operations = nodes.stream()
-                .map((NamedNode node) -> new ManagementOperations(node, nonProgressingOperation))
-                .collect(toList());
-        dataProvider.update(operations);
-        if (operations.isEmpty()) {
+    public void update(List<ManagementOperations> activeOperations) {
+        dataProvider.update(activeOperations);
+        if (activeOperations.isEmpty()) {
             listView.showEmptyState(EMPTY);
         }
     }",2018-12-27T19:52:32Z,252
"@@ -62,7 +62,6 @@
 import static org.jboss.hal.client.runtime.configurationchanges.ConfigurationChangesPresenter.HOST_CONFIGURATION_CHANGES_ADDRESS;
 import static org.jboss.hal.client.runtime.configurationchanges.ConfigurationChangesPresenter.HOST_CONFIGURATION_CHANGES_TEMPLATE;
 import static org.jboss.hal.client.runtime.managementoperations.ManagementOperationsPresenter.MANAGEMENT_OPERATIONS_ADDRESS;
-import static org.jboss.hal.client.runtime.managementoperations.ManagementOperationsPresenter.MANAGEMENT_OPERATIONS_TEMPLATE;
 import static org.jboss.hal.client.runtime.server.StandaloneServerColumn.MANAGEMENT_ADDRESS;
 import static org.jboss.hal.core.finder.FinderColumn.RefreshMode.RESTORE_SELECTION;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
@@ -180,11 +179,6 @@ public List<ItemAction<Server>> actions() {
                         actions.add(itemActionFactory.placeRequest(resources.constants().configurationChanges(),
                                 ccPlaceRequest, Constraint.executable(HOST_CONFIGURATION_CHANGES_TEMPLATE, ADD)));
                     }
-                    PlaceRequest moPlaceRequest = new PlaceRequest.Builder()
-                            .nameToken(NameTokens.MANAGEMENT_OPERATIONS).build();
-                    actions.add(itemActionFactory.placeRequest(resources.constants().managementOperations(),
-                            moPlaceRequest, Constraint.executable(MANAGEMENT_OPERATIONS_TEMPLATE,
-                                    READ_RESOURCE_OPERATION)));
                     actions.add(new ItemAction.Builder<Server>()
                             .title(resources.constants().editURL())
                             .handler(itm -> serverActions.editUrl(itm, () -> refresh(RESTORE_SELECTION)))",2018-12-27T19:52:32Z,50
"@@ -122,6 +122,10 @@ public SubsystemColumn(Finder finder,
                 items.add(new SubsystemMetadata.Builder(Ids.SERVER_RUNTIME_STATUS, resources.constants().status())
                         .token(NameTokens.SERVER_RUNTIME)
                         .build());
+                items.add(new SubsystemMetadata.Builder(Ids.MANAGEMENT_OPERATIONS, resources.constants().managementOperations())
+                        .token(NameTokens.MANAGEMENT_OPERATIONS)
+                        .preview(resources.previews().runtimeManagementOperations())
+                        .build());
                 items.addAll(existingSubsystems.values().stream()
                         .sorted(comparing(SubsystemMetadata::getTitle))
                         .collect(toList()));",2018-12-27T19:52:32Z,119
"@@ -337,9 +337,13 @@ public interface ModelDescriptionConstants {
     String GROUPING_HANDLER = ""grouping-handler"";
     String HA_POLICY = ""ha-policy"";
     // HAL_* attributes are used internally only!
+    String HAL_ACTIVE_OP_ADDRESS = ""hal-active-op-address"";
+    String HAL_ACTIVE_ADDRESS_HOST = ""hal-active-address-host"";
+    String HAL_ACTIVE_ADDRESS_SERVER = ""hal-active-address-server"";
     String HAL_INDEX = ""hal-index"";
     String HAL_LABEL = ""hal-label"";
     String HAL_LENGTH = ""hal-length"";
+    String HAL_NON_PROGRESSING = ""hal-non-progressing"";
     String HAL_RECURSIVE = ""hal-recursive"";
     String HANDLER = ""handler"";
     String HANDLERS = ""handlers"";",2018-12-27T19:52:32Z,109
"@@ -482,6 +482,7 @@ public interface Ids {
     String MAIL_SESSION_ITEM = ""mail-session-item"";
     String MAIL_SESSION_REFRESH = ""mail-session-refresh"";
     String MANAGEMENT = ""management"";
+    String MANAGEMENT_OPERATIONS = ""mgmt-operations"";
     String MEMBERSHIP = ""membership"";
     String MEMBERSHIP_EXCLUDE = ""membership-exclude"";
     String MEMBERSHIP_INCLUDE = ""membership-include"";",2018-12-27T19:52:32Z,111
"@@ -263,6 +263,8 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml obtainCertificateError(String alias, String resource, String error);
     SafeHtml obtainCertificateSuccess(String alias, String resource);
     SafeHtml operationLabel(String name);
+    SafeHtml operationHost(String name);
+    SafeHtml operationServer(String name);
     SafeHtml pageNotFound(String invalidHistoryToken);
     SafeHtml patchAddError(String patchId, String error);
     SafeHtml patchHostNeedsRestart(String hostname);",2018-12-27T19:52:32Z,94
"@@ -215,6 +215,7 @@ public interface Names {
     String MANAGEMENT_INTERFACE = ""Management Interface"";
     String MANAGEMENT_CONSOLE = ""Management Console"";
     String MANAGEMENT_MODEL = ""Management Model"";
+    String MANAGEMENT_OPERATIONS = ""Management Operations"";
     String MAPPERS_DECODERS = ""Mappers / Decoders"";
     String MAPPING_MODULE = ""Mapping Module"";
     String MASTER = ""Master"";",2018-12-27T19:52:32Z,112
"@@ -281,7 +281,7 @@ public interface Previews extends ClientBundleWithLookup {
     ExternalTextResource managementExtensions();
 
 
-    // ------------------------------------------------------ runtime
+    // ------------------------------------------------------ patching
 
     @Source(""previews/patching/patching.html"")
     ExternalTextResource patching();
@@ -324,6 +324,9 @@ public interface Previews extends ClientBundleWithLookup {
     @Source(""previews/runtime/logfiles.html"")
     ExternalTextResource runtimeLogFiles();
 
+    @Source(""previews/runtime/management-operations.html"")
+    ExternalTextResource runtimeManagementOperations();
+
     @Source(""previews/runtime/messaging-server.html"")
     ExternalTextResource runtimeMessagingServer();
 ",2018-12-27T19:52:32Z,134
"@@ -330,6 +330,8 @@ noWrite=No write behaviour has been defined for this store. Please choose a beha
 obtainCertificateError=There was an error to obtain the certificate for alias <strong>{0}</strong> of Key Store <strong>{1}</strong>. Cause: {2}
 obtainCertificateSuccess=The certificate identified by alias <strong>{0}</strong> of Key Store <strong>{1}</strong> was obtained with success.
 operationLabel=<p>Operation: <strong>{0}</strong></p>
+operationHost=<p>Host: <strong>{0}</strong></p>
+operationServer=<p>Server: <strong>{0}</strong></p>
 operations={0, number} operations
 pageNotFound=Page <strong>{0}</strong> not found.
 patchAddError=There is an error installing patch {0}. Reason: {1}",2018-12-27T19:52:32Z,94
"@@ -326,6 +326,8 @@ noPatchesForHost=N\u00e3o h\u00e1 corre\u00e7\u00f5es instaladas para este servi
 obtainCertificateError=Ocorreu um erro ao obter o certificado para o alias <strong>{0}</strong> de armazenamento de chaves <strong>{1}</strong>. Causa: {2}
 obtainCertificateSuccess=O certificado identificado pelo alias <strong>{0}</strong> de armazenamento de chaves <strong>{1}</strong> foi obtido com \u00EAxito.
 operationLabel=<p>Opera\u00E7\u00E3o: <strong>{0}</strong></p>
+operationHost=<p>Host: <strong>{0}</strong></p>
+operationServer=<p>Server: <strong>{0}</strong></p>
 operations={0, number} opera\u00E7\u00F5es
 pageNotFound=P\u00E1gina <strong>{0}</strong> n\u00E3o encontrada.
 patchAddError=Ocorreu um erro ao instalar o patch {0}. Motivo: {1}",2018-12-27T19:52:32Z,94
"@@ -0,0 +1,5 @@
+<p>A management operation is an operation that is performed on the ${build.shortName} and is related to administration scope. The HTTP handling related to application usage (ejb, rest, jms, etc) are not registered as a management operation.</p>
+<p>Adding a deployment, changing of datasource's password, increasing thread-pools are examples of management operations.</p>
+<p>There are management operations that needs exclusive locks to write to resources, if this exlcusive lock is held more than 15s, it is considered a non progressing operation and it will be reported in this view.</p>
+<p>The management operations view, allows the administrator to list all running management operations of a standalone server or all hosts and servers of the domain. It also allows to cancel any active management operation or cancel all the non progressing operations.</p>
+",2018-12-27T19:52:32Z,253
"@@ -19,7 +19,7 @@
     ""javascript-auto-complete"": ""1.0.4"",
     ""jquery"": ""~2.2.4"",
     ""jstree"": ""~3.3.3"",
-    ""patternfly"": ""~3.23.0"",
+    ""patternfly"": ""~3.23.1"",
     ""tagmanager"": ""~3.0.2"",
     ""zeroclipboard"": ""^2.2.0""
   },",2017-03-31T08:41:08Z,213
"@@ -17,7 +17,6 @@
 
 import javax.inject.Inject;
 
-import com.google.gwt.user.client.Window;
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.client.PresenterWidget;
 import com.gwtplatform.mvp.client.proxy.PlaceManager;
@@ -29,6 +28,7 @@
 import org.jboss.hal.client.tools.MacroOptionsDialog;
 import org.jboss.hal.config.Endpoints;
 import org.jboss.hal.config.Environment;
+import org.jboss.hal.config.Settings;
 import org.jboss.hal.config.semver.Version;
 import org.jboss.hal.core.expression.ExpressionDialog;
 import org.jboss.hal.core.expression.ExpressionResolver;
@@ -45,8 +45,6 @@
 import org.jboss.hal.spi.Message;
 import org.jboss.hal.spi.MessageEvent;
 
-import static org.jboss.hal.resources.Names.NYI;
-
 /**
  * @author Harald Pehl
  */
@@ -66,6 +64,7 @@ public interface MyView extends HalView, HasPresenter<FooterPresenter> {
 
     private final Environment environment;
     private final PlaceManager placeManager;
+    private final Settings settings;
     private final Macros macros;
     private final ExpressionResolver expressionResolver;
     private final Resources resources;
@@ -80,12 +79,14 @@ public FooterPresenter(final EventBus eventBus,
             final Environment environment,
             final Endpoints endpoints,
             final PlaceManager placeManager,
+            final Settings settings,
             final Macros macros,
             final ExpressionResolver expressionResolver,
             final Resources resources) {
         super(eventBus, view);
         this.environment = environment;
         this.placeManager = placeManager;
+        this.settings = settings;
         this.macros = macros;
         this.expressionResolver = expressionResolver;
         this.resources = resources;
@@ -167,6 +168,6 @@ public void onMacroFinished(final MacroFinishedEvent event) {
     }
 
     void onSettings() {
-        Window.alert(NYI);
+        new SettingsDialog(environment, settings, resources).show();
     }
 }",2017-03-31T08:41:08Z,102
"@@ -378,15 +378,15 @@ public void onRolesChanged(final RolesChangedEvent event) {
     }
 
     void runAs(final String role) {
-        DialogFactory.showConfirmation(resources.constants().runAs(),
+        DialogFactory.showConfirmation(resources.constants().runAsRoleTitle(),
                 resources.messages().reloadSettings(), () -> {
                     settings.set(RUN_AS, role);
                     Browser.getWindow().getLocation().reload();
                 });
     }
 
     void clearRunAs() {
-        DialogFactory.showConfirmation(resources.constants().runAs(),
+        DialogFactory.showConfirmation(resources.constants().clearRunAsTitle(),
                 resources.messages().reloadSettings(), () -> {
                     settings.set(RUN_AS, null);
                     Browser.getWindow().getLocation().reload();",2017-03-31T08:41:08Z,95
"@@ -0,0 +1,107 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.skeleton;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import com.google.gwt.core.client.GWT;
+import elemental.client.Browser;
+import org.jboss.hal.ballroom.dialog.DialogFactory;
+import org.jboss.hal.ballroom.form.NumberSelectItem;
+import org.jboss.hal.config.Environment;
+import org.jboss.hal.config.Settings;
+import org.jboss.hal.config.Settings.Key;
+import org.jboss.hal.core.mbui.dialog.ModifyResourceDialog;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.Property;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Resources;
+
+import static java.util.Comparator.naturalOrder;
+import static org.jboss.hal.config.Settings.Key.COLLECT_USER_DATA;
+import static org.jboss.hal.config.Settings.Key.LOCALE;
+import static org.jboss.hal.config.Settings.Key.PAGE_LENGTH;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.ALLOWED;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.ATTRIBUTES;
+
+/**
+ * @author Harald Pehl
+ */
+class SettingsDialog {
+
+    private static final SettingsResources RESOURCES = GWT.create(SettingsResources.class);
+
+    private final Settings settings;
+    private final ModelNodeForm<ModelNode> form;
+    private final ModifyResourceDialog dialog;
+    private final boolean multipleLocales;
+    private boolean changes;
+
+    SettingsDialog(final Environment environment, final Settings settings, final Resources resources) {
+        this.settings = settings;
+        this.changes = false;
+
+        List<String> locales = environment.getLocales();
+        locales.sort(naturalOrder());
+        multipleLocales = locales.size() > 1;
+
+        Metadata metadata = Metadata.staticDescription(RESOURCES.settings());
+        if (multipleLocales) {
+            Property locale = metadata.getDescription().findAttribute(ATTRIBUTES, LOCALE.key());
+            if (locale != null && locale.getValue().hasDefined(ALLOWED)) {
+                locales.forEach(l -> locale.getValue().get(ALLOWED).add(l));
+            }
+        }
+
+        List<String> attributes = new ArrayList<>();
+        attributes.add(COLLECT_USER_DATA.key());
+        if (multipleLocales) {
+            attributes.add(LOCALE.key());
+        }
+        attributes.add(PAGE_LENGTH.key());
+        form = new ModelNodeForm.Builder<>(Ids.SETTINGS_FORM, metadata)
+                .include(attributes)
+                .customFormItem(PAGE_LENGTH.key(),
+                        attributeDescription -> new NumberSelectItem(PAGE_LENGTH.key(), new long[]{10, 20, 50}))
+                .build();
+
+        dialog = new ModifyResourceDialog(resources.constants().settings(), form,
+                (form, changedValues) -> {
+                    changedValues.forEach((key, value) -> settings.set(Key.from(key), value));
+                    changes = !changedValues.isEmpty();
+                },
+                () -> {
+                    if (changes) {
+                        DialogFactory.showConfirmation(resources.constants().settings(),
+                                resources.messages().reloadSettings(),
+                                () -> Browser.getWindow().getLocation().reload());
+                    }
+                });
+    }
+
+    void show() {
+        ModelNode modelNode = new ModelNode();
+        modelNode.get(COLLECT_USER_DATA.key()).set(settings.get(COLLECT_USER_DATA).asBoolean());
+        if (multipleLocales) {
+            modelNode.get(LOCALE.key()).set(settings.get(LOCALE).value());
+        }
+        modelNode.get(PAGE_LENGTH.key()).set(settings.get(PAGE_LENGTH).asInt(Settings.DEFAULT_PAGE_LENGTH));
+        dialog.show(modelNode);
+    }
+}",2017-03-31T08:41:08Z,254
"@@ -0,0 +1,28 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.skeleton;
+
+import com.google.gwt.resources.client.ClientBundle;
+import com.google.gwt.resources.client.TextResource;
+
+/**
+ * @author Harald Pehl
+ */
+public interface SettingsResources extends ClientBundle {
+
+    @Source(""settings.base64"")
+    TextResource settings();
+}",2017-03-31T08:41:08Z,255
"@@ -0,0 +1 @@
+bwAAAAIAB2NvbW1lbnRzALxUaGlzIGZpbGUgaXMgbm90IHVzZWQhIEl0J3MganVzdCBoZXJlIHRvIGdlbmVyYXRlIHRoZSBiYXNlNjQgZW5jb2RlZCB2ZXJzaW9uIHVzaW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9oYWwvZG1yLmNtZC4gUGxlYXNlIGtlZXAgdGhlIGF0dHJpYnV0ZXMgaW4gc3luYyB3aXRoIG9yZy5qYm9zcy5oYWwuY29uZmlnLlNldHRpbmdzLktleQAKYXR0cmlidXRlc28AAAADABFjb2xsZWN0LXVzZXItZGF0YW8AAAADAAR0eXBldFoAC2Rlc2NyaXB0aW9ucwDHRW5hYmxlIFVzYWdlIERhdGEgQ29sbGVjdGlvbjogVGhlIEFkbWluIENvbnNvbGUgaGFzIHRoZSBjYXBhYmlsaXR5IHRvIGNvbGxlY3QgdXNhZ2UgZGF0YSB2aWEgR29vZ2xlIEFuYWx5dGljcy4gVGhpcyBkYXRhIHdpbGwgYmUgdXNlZCBleGNsdXNpdmVseSBieSBSZWQgSGF0IHRvIGltcHJvdmUgdGhlIGNvbnNvbGUgaW4gZnV0dXJlIHJlbGVhc2VzLgAIbmlsbGFibGVaAQAGbG9jYWxlbwAAAAQABHR5cGV0cwALZGVzY3JpcHRpb25zABxUaGUgdXNlciBpbnRlcmZhY2UgbGFuZ3VhZ2UuAAhuaWxsYWJsZVoAAAdhbGxvd2VkbAAAAAAAC3BhZ2UtbGVuZ3RobwAAAAMABHR5cGV0SQALZGVzY3JpcHRpb25zADdUaGUgbnVtYmVyIG9mIGl0ZW1zIHdoaWNoIGFyZSBkaXNwbGF5ZWQgaW4gdGFibGUgcGFnZXMuAAhuaWxsYWJsZVoB",2017-03-31T08:41:08Z,256
"@@ -0,0 +1,21 @@
+{
+    ""comment"" => ""This file is not used! It's just here to generate the base64 encoded version using https://github.com/hal/dmr.cmd. Please keep the attributes in sync with org.jboss.hal.config.Settings.Key"",
+    ""attributes"" => {
+        ""collect-user-data"" => {
+            ""type"" => BOOLEAN,
+            ""description"" => ""Enable Usage Data Collection: The Admin Console has the capability to collect usage data via Google Analytics. This data will be used exclusively by Red Hat to improve the console in future releases."",
+            ""nillable"" => true
+        },
+        ""locale"" => {
+            ""type"" => STRING,
+            ""description"" => ""The user interface language."",
+            ""nillable"" => false,
+            ""allowed"" => [],
+        },
+        ""page-length"" => {
+            ""type"" => INT,
+            ""description"" => ""The number of items which are displayed in table pages."",
+            ""nillable"" => true
+        }
+    }
+}",2017-03-31T08:41:08Z,257
"@@ -115,7 +115,7 @@ public static class Builder {
         private boolean closeIcon;
         private boolean closeOnEsc;
         private boolean fadeIn;
-        private Callback onClose;
+        private Callback closed;
 
         public Builder(final String title) {
             this.title = title;
@@ -221,8 +221,8 @@ public Builder closeOnEsc(boolean closeOnEsc) {
             return this;
         }
 
-        public Builder onClose(Callback onClose) {
-            this.onClose = onClose;
+        public Builder closed(Callback closed) {
+            this.closed = closed;
             return this;
         }
 
@@ -329,14 +329,14 @@ private static void reset() {
     // ------------------------------------------------------ dialog instance
 
     private final boolean closeOnEsc;
-    private final Callback onClose;
+    private final Callback closed;
     private final Map<Integer, ButtonElement> buttons;
     private final List<Attachable> attachables;
 
     Dialog(final Builder builder) {
         reset();
         this.closeOnEsc = builder.closeOnEsc;
-        this.onClose = builder.onClose;
+        this.closed = builder.closed;
         this.buttons = new HashMap<>();
         this.attachables = new ArrayList<>();
 
@@ -412,10 +412,10 @@ public void show() {
      */
     void close() {
         attachables.forEach(Attachable::detach);
-        if (onClose != null) {
-            onClose.execute();
-        }
         $(SELECTOR_ID).modal(""hide"");
+        if (closed != null) {
+            closed.execute();
+        }
     }
 
 ",2017-03-31T08:41:08Z,187
"@@ -37,6 +37,7 @@
 abstract class AbstractAppearance<T> implements Appearance<T> {
 
     static final String LABEL_ELEMENT = ""labelElement"";
+    static final String INPUT_CONTAINER = ""inputContainer"";
     static final Messages MESSAGES = GWT.create(Messages.class);
     protected static final Constants CONSTANTS = GWT.create(Constants.class);
 ",2017-03-31T08:41:08Z,258
"@@ -47,7 +47,6 @@
 @SuppressWarnings(""WeakerAccess"")
 public abstract class EditingAppearance<T> extends AbstractAppearance<T> {
 
-    private static final String INPUT_CONTAINER = ""inputContainer"";
     private static final String EXPRESSION_BUTTON = ""expressionButton"";
     private static final String SUGGEST_BUTTON = ""suggestButton"";
     private static final String PEEK_BUTTON = ""peekButton"";",2017-03-31T08:41:08Z,259
"@@ -39,7 +39,7 @@ private static class NumberReadOnlyAppearance extends ReadOnlyAppearance<Long> {
 
         @Override
         protected String name() {
-            return ""NumberReadOnlyAppearance"";
+            return ""NumberSelectReadOnlyAppearance"";
         }
     }
 
@@ -52,7 +52,7 @@ private static class NumberEditingAppearance extends EditingAppearance<Long> {
 
         @Override
         protected String name() {
-            return ""NumberEditingAppearance"";
+            return ""NumberSelectEditingAppearance"";
         }
 
         @Override",2017-03-31T08:41:08Z,133
"@@ -0,0 +1,261 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.ballroom.form;
+
+import java.util.EnumSet;
+import java.util.HashMap;
+import java.util.Map;
+
+import elemental.dom.Element;
+import elemental.html.ButtonElement;
+import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.hal.ballroom.LabelBuilder;
+import org.jboss.hal.dmr.model.Deprecation;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.UIConstants;
+
+import static org.jboss.gwt.elemento.core.EventType.click;
+import static org.jboss.hal.ballroom.form.Decoration.*;
+import static org.jboss.hal.ballroom.form.Form.State.EDITING;
+import static org.jboss.hal.ballroom.form.Form.State.READONLY;
+import static org.jboss.hal.resources.CSS.*;
+
+/**
+ * A form item to select from a small set of distinct numbers using a button group.
+ *
+ * @author Harald Pehl
+ */
+public class NumberSelectItem extends AbstractFormItem<Long> {
+
+    private static class NumberSelectReadOnlyAppearance extends ReadOnlyAppearance<Long> {
+
+        NumberSelectReadOnlyAppearance() {
+            super(EnumSet.of(DEFAULT, DEPRECATED, HINT, RESTRICTED));
+        }
+
+        @Override
+        protected String name() {
+            return ""NumberSelectReadOnlyAppearance"";
+        }
+    }
+
+
+    private class NumberSelectEditingAppearance extends AbstractAppearance<Long> {
+
+        private static final String BUTTON_GROUP = ""buttonGroup"";
+        private static final String NUMBER = ""number"";
+
+        private final Map<Long, ButtonElement> buttons;
+        private final Element buttonGroup;
+        private final Element helpBlock;
+        private final Element inputContainer;
+        private final Element root;
+
+        NumberSelectEditingAppearance(long[] numbers) {
+            super(EnumSet.of(DEPRECATED, ENABLED, INVALID, REQUIRED));
+            this.buttons = new HashMap<>();
+
+            // @formatter:off
+            Elements.Builder builder = new Elements.Builder()
+                .div().css(formGroup)
+                    .label().css(controlLabel, halFormLabel).rememberAs(LABEL_ELEMENT).end()
+                    .div().css(halFormInput).rememberAs(INPUT_CONTAINER)
+                        .div().css(btnGroup).attr(UIConstants.ROLE, UIConstants.GROUP).rememberAs(BUTTON_GROUP);
+                            for (long number : numbers) {
+                                String value = String.valueOf(number);
+                                builder.button()
+                                        .data(NUMBER, value)
+                                        .css(btn, btnDefault)
+                                        .on(click, event -> {
+                                            showValue(number);
+                                            modifyValue(number);
+                                        })
+                                        .rememberAs(value)
+                                        .textContent(value)
+                                        .end();
+                                buttons.put(number, builder.referenceFor(value));
+                            }
+                        builder.end()
+                    .end()
+                .end();
+            // @formatter:on
+
+            helpBlock = Appearance.helpBlock();
+            buttonGroup = builder.referenceFor(BUTTON_GROUP);
+            labelElement = builder.referenceFor(LABEL_ELEMENT);
+            inputContainer = builder.referenceFor(INPUT_CONTAINER);
+            root = builder.build();
+        }
+
+        @Override
+        protected String name() {
+            return ""NumberSelectEditingAppearance"";
+        }
+
+        @Override
+        public void attach() {
+            // noop
+        }
+
+        @Override
+        public Element asElement() {
+            return root;
+        }
+
+        @Override
+        public void setId(final String id) {
+            this.id = Ids.build(id, EDITING.name().toLowerCase());
+            root.getDataset().setAt(FORM_ITEM_GROUP, this.id);
+            buttonGroup.setId(this.id);
+            labelElement.setHtmlFor(this.id);
+        }
+
+        @Override
+        public void setName(final String name) {
+            // noop
+        }
+
+        @Override
+        public void showValue(final Long value) {
+            buttons.forEach((number, button) -> {
+                if (number.equals(value)) {
+                    button.getClassList().remove(btnDefault);
+                    button.getClassList().add(btnPrimary);
+                } else {
+                    button.getClassList().remove(btnPrimary);
+                    button.getClassList().add(btnDefault);
+                }
+            });
+        }
+
+        @Override
+        public void clearValue() {
+            buttons.values().forEach(button -> button.getClassList().remove(btnPrimary));
+        }
+
+        @Override
+        <C> void safeApply(final Decoration decoration, final C context) {
+            switch (decoration) {
+
+                case DEPRECATED:
+                    markAsDeprecated((Deprecation) context);
+                    break;
+
+                case ENABLED:
+                    buttons.values().forEach(button -> button.setDisabled(false));
+                    break;
+
+                case INVALID:
+                    helpBlock.setTextContent(String.valueOf(context));
+                    root.getClassList().add(hasError);
+                    inputContainer.appendChild(helpBlock);
+                    break;
+
+                case REQUIRED:
+                    markAsRequired();
+                    break;
+
+                // unsupported
+                case DEFAULT:
+                case EXPRESSION:
+                case HINT:
+                case SENSITIVE:
+                case SUGGESTIONS:
+                    break;
+            }
+        }
+
+        @Override
+        void safeUnapply(final Decoration decoration) {
+            switch (decoration) {
+
+                case DEPRECATED:
+                    clearDeprecation();
+                    break;
+
+                case ENABLED:
+                    buttons.values().forEach(button -> button.setDisabled(true));
+                    break;
+
+                case INVALID:
+                    root.getClassList().remove(hasError);
+                    Elements.failSafeRemove(inputContainer, helpBlock);
+                    break;
+
+                case REQUIRED:
+                    clearRequired();
+                    break;
+
+                // unsupported
+                case DEFAULT:
+                case EXPRESSION:
+                case HINT:
+                case SENSITIVE:
+                case SUGGESTIONS:
+                    break;
+            }
+        }
+
+        @Override
+        public int getTabIndex() {
+            return buttonGroup.getTabIndex();
+        }
+
+        @Override
+        public void setAccessKey(final char key) {
+            // noop
+        }
+
+        @Override
+        public void setFocus(final boolean focused) {
+            if (focused) {
+                buttonGroup.focus();
+            } else {
+                buttonGroup.blur();
+            }
+        }
+
+        @Override
+        public void setTabIndex(final int index) {
+            buttonGroup.setTabIndex(index);
+        }
+    }
+
+
+    public NumberSelectItem(final String name, final long[] numbers) {
+        this(name, new LabelBuilder().label(name), numbers);
+    }
+
+    public NumberSelectItem(final String name, final String label, final long[] numbers) {
+        super(name, label, null);
+
+        // read-only appearance
+        addAppearance(READONLY, new NumberSelectReadOnlyAppearance());
+
+        // editing appearance
+        addAppearance(EDITING, new NumberSelectEditingAppearance(numbers));
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return false;
+    }
+
+    @Override
+    public boolean supportsExpressions() {
+        return false;
+    }
+}",2017-03-31T08:41:08Z,260
"@@ -40,8 +40,6 @@
  */
 abstract class SelectBoxEditingAppearance<T> extends AbstractAppearance<T> {
 
-    private static final String INPUT_CONTAINER = ""inputContainer"";
-
     final SelectElement selectElement;
     private final Element root;
     private final Element inputContainer;",2017-03-31T08:41:08Z,261
"@@ -27,20 +27,39 @@
  */
 public class Settings {
 
+    @SuppressWarnings(""DuplicateStringLiteralInspection"")
     public enum Key {
         COLLECT_USER_DATA(""collect-user-data"", true),
         LOCALE(""locale"", true),
         PAGE_LENGTH(""page-length"", true),
         RUN_AS(""run-as"", false);
 
+        public static Key from(@NonNls String key) {
+            switch (key) {
+                case ""collect-user-data"":
+                    return COLLECT_USER_DATA;
+                case ""locale"":
+                    return LOCALE;
+                case ""page-length"":
+                    return PAGE_LENGTH;
+                case ""run-as"":
+                    return RUN_AS;
+                default:
+                    return null;
+            }
+        }
+
         private final String key;
         private final boolean persistent;
 
         Key(@NonNls final String key, final boolean persistent) {
-
             this.key = key;
             this.persistent = persistent;
         }
+
+        public String key() {
+            return key;
+        }
     }
 
 
@@ -74,7 +93,7 @@ public String value() {
 
 
     @Inject
-    public static Settings INSTANCE;
+    public static Settings INSTANCE; // use only if no DI is available!
     public static final String DEFAULT_LOCALE = ""en"";
     public static final int DEFAULT_PAGE_LENGTH = 10;
     private static final int EXPIRES = 365; // days
@@ -86,7 +105,7 @@ public Settings() {
     }
 
     public <T> void load(Key key, T defaultValue) {
-        String value = Cookies.get(key(key));
+        String value = Cookies.get(cookieName(key));
         if (value == null) {
             if (defaultValue != null) {
                 value = String.valueOf(defaultValue);
@@ -102,17 +121,17 @@ public Value get(Key key) {
     public <T> void set(Key key, T value) {
         values.put(key, new Value(value != null ? String.valueOf(value) : null));
         if (value == null) {
-            Cookies.remove(key(key));
+            Cookies.remove(cookieName(key));
         } else {
             if (key.persistent) {
-                Cookies.set(key(key), String.valueOf(value), EXPIRES);
+                Cookies.set(cookieName(key), String.valueOf(value), EXPIRES);
             } else {
-                Cookies.set(key(key), String.valueOf(value));
+                Cookies.set(cookieName(key), String.valueOf(value));
             }
         }
     }
 
-    private String key(Key key) {
+    private String cookieName(Key key) {
         return Ids.build(Ids.COOKIE_PREFIX, key.key);
     }
 }",2017-03-31T08:41:08Z,262
"@@ -45,17 +45,23 @@ public interface Callback {
      * Callback#onModify(Form, Map)}.
      */
     public ModifyResourceDialog(final String title, final Form<ModelNode> form, final Callback callback) {
+        this(title, form, callback, null);
+    }
+
+    public ModifyResourceDialog(final String title, final Form<ModelNode> form, final Callback callback,
+            org.jboss.hal.spi.Callback closed) {
         form.setSaveCallback((f, changedValues) -> saveForm(callback, f, changedValues));
-        init(title, form);
+        init(title, form, closed);
     }
 
-    private void init(final String title, final Form<ModelNode> form) {
+    private void init(final String title, final Form<ModelNode> form, final org.jboss.hal.spi.Callback closed) {
         this.form = form;
         this.dialog = new Dialog.Builder(title)
                 .add(form.asElement())
                 .saveCancel(form::save)
                 .size(Size.MEDIUM)
                 .closeOnEsc(true)
+                .closed(closed)
                 .build();
         this.dialog.registerAttachable(form);
     }",2017-03-31T08:41:08Z,263
"@@ -67,6 +67,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String clear();
     String clearMessages();
     String clearRunAs();
+    String clearRunAsTitle();
     String clone();
     String cloneProfile();
     String close();
@@ -357,6 +358,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String role();
     String roles();
     String runAs();
+    String runAsRoleTitle();
     String running();
 
     String sameOrigin();",2017-03-31T08:41:08Z,100
"@@ -460,6 +460,7 @@ public interface Ids {
     String SERVER_STATUS_MAIN_ATTRIBUTES_FORM = build(SERVER_STATUS, ""main-attributes"", FORM_SUFFIX);
     String SERVER_STATUS_SYSTEM_PROPERTIES_ENTRY = build(SERVER_STATUS, ""system-properties"", ENTRY_SUFFIX);
     String SERVER_STATUS_SYSTEM_PROPERTIES_TABLE = build(SERVER_STATUS, ""system-properties"", TABLE_SUFFIX);
+    String SETTINGS_FORM = ""settings-form"";
     String SOCKET_BINDING_GROUP = ""socket-binding-group"";
     String SOCKET_BINDING_GROUP_ADD = build(SOCKET_BINDING_GROUP, ADD_SUFFIX);
     String SOCKET_BINDING_GROUP_REFRESH = build(SOCKET_BINDING_GROUP, REFRESH_SUFFIX);",2017-03-31T08:41:08Z,111
"@@ -26,6 +26,7 @@ chooseTemplate=Choose Template
 clear=Clear
 clearMessages=Clear Messages
 clearRunAs=Clear run as role
+clearRunAsTitle=Clear Run as Role
 clone=Clone
 cloneProfile=Clone Profile
 close=Close
@@ -301,6 +302,7 @@ review=Review
 role=Role
 roles=Roles
 runAs=Run as
+runAsRoleTitle=Run as Role
 running=Running
 sameOrigin=Bundled console
 save=Save",2017-03-31T08:41:08Z,100
"@@ -101,6 +101,8 @@
 import org.jboss.hal.client.configuration.subsystem.messaging.RemoteActiveMQPresenter;
 import org.jboss.hal.client.configuration.subsystem.microprofile.Mbui_MicroProfileConfigView;
 import org.jboss.hal.client.configuration.subsystem.microprofile.MicroProfileConfigPresenter;
+import org.jboss.hal.client.configuration.subsystem.microprofile.MicroProfileMetricsPresenter;
+import org.jboss.hal.client.configuration.subsystem.microprofile.MicroProfileMetricsView;
 import org.jboss.hal.client.configuration.subsystem.modcluster.Mbui_ModclusterView;
 import org.jboss.hal.client.configuration.subsystem.modcluster.ModclusterPresenter;
 import org.jboss.hal.client.configuration.subsystem.remoting.Mbui_RemotingView;
@@ -512,6 +514,11 @@ protected void configure() {
                 MicroProfileHealthView.class,
                 MicroProfileHealthPresenter.MyProxy.class);
 
+        bindPresenter(MicroProfileMetricsPresenter.class,
+                MicroProfileMetricsPresenter.MyView.class,
+                MicroProfileMetricsView.class,
+                MicroProfileMetricsPresenter.MyProxy.class);
+
         bindPresenter(ModclusterPresenter.class,
                 ModclusterPresenter.MyView.class,
                 Mbui_ModclusterView.class,",2018-11-14T12:11:44Z,44
"@@ -19,7 +19,9 @@
 
 interface AddressTemplates {
 
-    String MICROPROFILE_CONFIG_SUBSYSTEM_ADDRESS = ""/{selected.profile}/subsystem=microprofile-config-smallrye"";
+    String MICRO_PROFILE_CONFIG_ADDRESS = ""/{selected.profile}/subsystem=microprofile-config-smallrye"";
+    String MICRO_PROFILE_METRICS_ADDRESS = ""/{selected.profile}/subsystem=microprofile-metrics-smallrye"";
 
-    AddressTemplate MICROPROFILE_CONFIG_SUBSYSTEM_TEMPLATE = AddressTemplate.of(MICROPROFILE_CONFIG_SUBSYSTEM_ADDRESS);
+    AddressTemplate MICRO_PROFILE_CONFIG_TEMPLATE = AddressTemplate.of(MICRO_PROFILE_CONFIG_ADDRESS);
+    AddressTemplate MICRO_PROFILE_METRICS_TEMPLATE = AddressTemplate.of(MICRO_PROFILE_METRICS_ADDRESS);
 }",2018-11-14T12:11:44Z,264
"@@ -21,7 +21,6 @@
 import com.gwtplatform.mvp.client.annotations.NameToken;
 import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
 import com.gwtplatform.mvp.client.proxy.ProxyPlace;
-import org.jboss.hal.core.ComplexAttributeOperations;
 import org.jboss.hal.core.CrudOperations;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderPath;
@@ -35,8 +34,8 @@
 import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.spi.Requires;
 
-import static org.jboss.hal.client.configuration.subsystem.microprofile.AddressTemplates.MICROPROFILE_CONFIG_SUBSYSTEM_ADDRESS;
-import static org.jboss.hal.client.configuration.subsystem.microprofile.AddressTemplates.MICROPROFILE_CONFIG_SUBSYSTEM_TEMPLATE;
+import static org.jboss.hal.client.configuration.subsystem.microprofile.AddressTemplates.MICRO_PROFILE_CONFIG_ADDRESS;
+import static org.jboss.hal.client.configuration.subsystem.microprofile.AddressTemplates.MICRO_PROFILE_CONFIG_TEMPLATE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.MICROPROFILE_CONFIG_SMALLRYE;
 
 public class MicroProfileConfigPresenter
@@ -46,7 +45,6 @@ public class MicroProfileConfigPresenter
     private final CrudOperations crud;
     private final FinderPathFactory finderPathFactory;
     private final StatementContext statementContext;
-    private final ComplexAttributeOperations ca;
 
     @Inject
     public MicroProfileConfigPresenter(EventBus eventBus,
@@ -55,13 +53,11 @@ public MicroProfileConfigPresenter(EventBus eventBus,
             Finder finder,
             CrudOperations crud,
             FinderPathFactory finderPathFactory,
-            StatementContext statementContext,
-            ComplexAttributeOperations ca) {
+            StatementContext statementContext) {
         super(eventBus, view, myProxy, finder);
         this.crud = crud;
         this.finderPathFactory = finderPathFactory;
         this.statementContext = statementContext;
-        this.ca = ca;
     }
 
     @Override
@@ -72,7 +68,7 @@ protected void onBind() {
 
     @Override
     public ResourceAddress resourceAddress() {
-        return MICROPROFILE_CONFIG_SUBSYSTEM_TEMPLATE.resolve(statementContext);
+        return MICRO_PROFILE_CONFIG_TEMPLATE.resolve(statementContext);
     }
 
     @Override
@@ -82,15 +78,15 @@ public FinderPath finderPath() {
 
     @Override
     protected void reload() {
-        crud.readRecursive(MICROPROFILE_CONFIG_SUBSYSTEM_TEMPLATE.resolve(statementContext),
+        crud.readRecursive(MICRO_PROFILE_CONFIG_TEMPLATE.resolve(statementContext),
                 result -> getView().update(result));
     }
 
 
     // @formatter:off
     @ProxyCodeSplit
-    @NameToken(NameTokens.MICROPROFILE_CONFIG)
-    @Requires(MICROPROFILE_CONFIG_SUBSYSTEM_ADDRESS)
+    @NameToken(NameTokens.MICRO_PROFILE_CONFIG)
+    @Requires(MICRO_PROFILE_CONFIG_ADDRESS)
     public interface MyProxy extends ProxyPlace<MicroProfileConfigPresenter> {
     }
 ",2018-11-14T12:11:44Z,265
"@@ -0,0 +1,97 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.microprofile;
+
+import javax.inject.Inject;
+
+import com.google.web.bindery.event.shared.EventBus;
+import com.gwtplatform.mvp.client.annotations.NameToken;
+import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
+import com.gwtplatform.mvp.client.proxy.ProxyPlace;
+import org.jboss.hal.core.CrudOperations;
+import org.jboss.hal.core.finder.Finder;
+import org.jboss.hal.core.finder.FinderPath;
+import org.jboss.hal.core.finder.FinderPathFactory;
+import org.jboss.hal.core.mvp.ApplicationFinderPresenter;
+import org.jboss.hal.core.mvp.HalView;
+import org.jboss.hal.core.mvp.HasPresenter;
+import org.jboss.hal.core.mvp.SupportsExpertMode;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.meta.token.NameTokens;
+import org.jboss.hal.spi.Requires;
+
+import static org.jboss.hal.client.configuration.subsystem.microprofile.AddressTemplates.MICRO_PROFILE_METRICS_ADDRESS;
+import static org.jboss.hal.client.configuration.subsystem.microprofile.AddressTemplates.MICRO_PROFILE_METRICS_TEMPLATE;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.MICROPROFILE_METRICS_SMALLRYE;
+
+public class MicroProfileMetricsPresenter
+        extends ApplicationFinderPresenter<MicroProfileMetricsPresenter.MyView, MicroProfileMetricsPresenter.MyProxy>
+        implements SupportsExpertMode {
+
+    private final CrudOperations crud;
+    private final FinderPathFactory finderPathFactory;
+    private final StatementContext statementContext;
+
+    @Inject
+    public MicroProfileMetricsPresenter(EventBus eventBus,
+            MyView view,
+            MyProxy myProxy,
+            Finder finder,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext) {
+        super(eventBus, view, myProxy, finder);
+        this.crud = crud;
+        this.finderPathFactory = finderPathFactory;
+        this.statementContext = statementContext;
+    }
+
+    @Override
+    protected void onBind() {
+        super.onBind();
+        getView().setPresenter(this);
+    }
+
+    @Override
+    public ResourceAddress resourceAddress() {
+        return MICRO_PROFILE_METRICS_TEMPLATE.resolve(statementContext);
+    }
+
+    @Override
+    public FinderPath finderPath() {
+        return finderPathFactory.configurationSubsystemPath(MICROPROFILE_METRICS_SMALLRYE);
+    }
+
+    @Override
+    protected void reload() {
+        crud.read(MICRO_PROFILE_METRICS_TEMPLATE, result -> getView().update(result));
+    }
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @Requires(MICRO_PROFILE_METRICS_ADDRESS)
+    @NameToken(NameTokens.MICRO_PROFILE_METRICS)
+    public interface MyProxy extends ProxyPlace<MicroProfileMetricsPresenter> {
+    }
+
+    public interface MyView extends HalView, HasPresenter<MicroProfileMetricsPresenter> {
+        void update(ModelNode payload);
+    }
+    // @formatter:on
+}",2018-11-14T12:11:44Z,266
"@@ -0,0 +1,66 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.microprofile;
+
+import javax.inject.Inject;
+
+import elemental2.dom.HTMLElement;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.core.mvp.HalViewImpl;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.MetadataRegistry;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+
+import static org.jboss.gwt.elemento.core.Elements.h;
+import static org.jboss.gwt.elemento.core.Elements.p;
+import static org.jboss.hal.ballroom.LayoutBuilder.column;
+import static org.jboss.hal.ballroom.LayoutBuilder.row;
+import static org.jboss.hal.client.configuration.subsystem.microprofile.AddressTemplates.MICRO_PROFILE_METRICS_TEMPLATE;
+
+public class MicroProfileMetricsView extends HalViewImpl implements MicroProfileMetricsPresenter.MyView {
+
+    private final Form<ModelNode> form;
+    private MicroProfileMetricsPresenter presenter;
+
+    @Inject
+    public MicroProfileMetricsView(MetadataRegistry metadataRegistry) {
+        Metadata metadata = metadataRegistry.lookup(MICRO_PROFILE_METRICS_TEMPLATE);
+        form = new ModelNodeForm.Builder<>(Ids.MICRO_PROFILE_METRICS_FORM, metadata)
+                .build();
+        registerAttachable(form);
+
+        HTMLElement root = row()
+                .add(column()
+                        .add(h(1).textContent(Names.MICROPROFILE_METRICS))
+                        .add(p().textContent(metadata.getDescription().getDescription()))
+                        .add(form))
+                .asElement();
+        initElement(root);
+    }
+
+    @Override
+    public void setPresenter(MicroProfileMetricsPresenter presenter) {
+        this.presenter = presenter;
+    }
+
+    @Override
+    public void update(ModelNode payload) {
+        form.view(payload);
+    }
+}",2018-11-14T12:11:44Z,267
"@@ -42,7 +42,7 @@
 import static org.jboss.hal.client.runtime.subsystem.microprofile.health.AddressTemplates.MICROPROFILE_HEALTH_ADDRESS;
 import static org.jboss.hal.client.runtime.subsystem.microprofile.health.AddressTemplates.MICROPROFILE_HEALTH_TEMPLATE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.CHECK;
-import static org.jboss.hal.resources.Ids.MICROPROFILE_HEALTH;
+import static org.jboss.hal.resources.Ids.MICRO_PROFILE_HEALTH;
 
 public class MicroProfileHealthPresenter
         extends ApplicationFinderPresenter<MicroProfileHealthPresenter.MyView, MicroProfileHealthPresenter.MyProxy>
@@ -84,7 +84,7 @@ public ResourceAddress resourceAddress() {
     @Override
     public FinderPath finderPath() {
         return finderPathFactory.runtimeServerPath()
-                .append(Ids.RUNTIME_SUBSYSTEM, MICROPROFILE_HEALTH,
+                .append(Ids.RUNTIME_SUBSYSTEM, MICRO_PROFILE_HEALTH,
                         resources.constants().monitor(), Names.MICROPROFILE_HEALTH);
     }
 
@@ -104,7 +104,7 @@ StatementContext getStatementContext() {
     // @formatter:off
     @ProxyCodeSplit
     @Requires(MICROPROFILE_HEALTH_ADDRESS)
-    @NameToken(NameTokens.MICROPROFILE_HEALTH)
+    @NameToken(NameTokens.MICRO_PROFILE_HEALTH)
     public interface MyProxy extends ProxyPlace<MicroProfileHealthPresenter> {
     }
 ",2018-11-14T12:11:44Z,122
"@@ -39,7 +39,7 @@
 import static org.jboss.hal.ballroom.LayoutBuilder.row;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.resources.Ids.FORM;
-import static org.jboss.hal.resources.Ids.MICROPROFILE_HEALTH;
+import static org.jboss.hal.resources.Ids.MICRO_PROFILE_HEALTH;
 import static org.jboss.hal.resources.Ids.TABLE;
 
 public class MicroProfileHealthView extends HalViewImpl implements MicroProfileHealthPresenter.MyView {
@@ -58,13 +58,13 @@ public MicroProfileHealthView(Resources resources, MicroProfileHealthCheckResour
 
         Metadata metadata = Metadata.staticDescription(mpCheckResource.checksOperationDescription());
 
-        checkTable = new ModelNodeTable.Builder<>(Ids.build(MICROPROFILE_HEALTH, TABLE), metadata)
+        checkTable = new ModelNodeTable.Builder<>(Ids.build(MICRO_PROFILE_HEALTH, TABLE), metadata)
                 .button(resources.constants().refresh(), table -> presenter.reload())
                 .column(Names.NAME, (cell, type, row, meta) -> row.get(NAME).asString())
                 .column(Names.STATE, (cell, type, row, meta) -> row.get(STATE).asString())
                 .build();
 
-        checkForm = new ModelNodeForm.Builder<>(Ids.build(MICROPROFILE_HEALTH, FORM), metadata)
+        checkForm = new ModelNodeForm.Builder<>(Ids.build(MICRO_PROFILE_HEALTH, FORM), metadata)
                 .includeRuntime()
                 .readOnly()
                 .unsorted()",2018-11-14T12:11:44Z,123
"@@ -135,8 +135,13 @@ public Subsystems(Resources resources) {
                 .build());
         addConfiguration(new SubsystemMetadata.Builder(MICROPROFILE_CONFIG_SMALLRYE, Names.MICROPROFILE_CONFIG)
                 .subtitle(Names.SMALLRYE)
-                .token(NameTokens.MICROPROFILE_CONFIG)
-                .preview(resources.previews().configurationMicroprofileConfig())
+                .token(NameTokens.MICRO_PROFILE_CONFIG)
+                .preview(resources.previews().configurationMicroProfileConfig())
+                .build());
+        addConfiguration(new SubsystemMetadata.Builder(MICROPROFILE_METRICS_SMALLRYE, Names.MICROPROFILE_METRICS)
+                .subtitle(Names.SMALLRYE)
+                .token(NameTokens.MICRO_PROFILE_METRICS)
+                .preview(resources.previews().configurationMicroProfileMetrics())
                 .build());
         addConfiguration(new SubsystemMetadata.Builder(MODCLUSTER, Names.MODCLUSTER)
                 .nextColumn(Ids.MODCLUSTER_PROXY)
@@ -243,7 +248,7 @@ public Subsystems(Resources resources) {
                 .preview(resources.previews().runtimeMessagingServer())
                 .build());
         addRuntime(new SubsystemMetadata.Builder(MICROPROFILE_HEALTH_SMALLRYE, Names.MICROPROFILE_HEALTH)
-                .token(NameTokens.MICROPROFILE_HEALTH)
+                .token(NameTokens.MICRO_PROFILE_HEALTH)
                 .build());
         addRuntime(new SubsystemMetadata.Builder(TRANSACTIONS, Names.TRANSACTION)
                 .token(NameTokens.TRANSACTIONS_RUNTIME)",2018-11-14T12:11:44Z,37
"@@ -512,6 +512,7 @@ public interface ModelDescriptionConstants {
     String METRIC = ""metric"";
     String MICROPROFILE_CONFIG_SMALLRYE = ""microprofile-config-smallrye"";
     String MICROPROFILE_HEALTH_SMALLRYE = ""microprofile-health-smallrye"";
+    String MICROPROFILE_METRICS_SMALLRYE = ""microprofile-metrics-smallrye"";
     String MIME_MAPPING = ""mime-mapping"";
     String MIN = ""min"";
     String MIN_POOL_SIZE = ""min-pool-size"";",2018-11-14T12:11:44Z,109
"@@ -85,8 +85,9 @@ public interface NameTokens {
     String MESSAGING_SERVER_CLUSTERING = ""messaging-server-clustering"";
     String MESSAGING_SERVER_DESTINATION = ""messaging-server-destination"";
     String MESSAGING_SERVER_HA_POLICY = ""messaging-server-ha-policy"";
-    String MICROPROFILE_CONFIG = ""micro-profile-config"";
-    String MICROPROFILE_HEALTH = ""micro-profile-health"";
+    String MICRO_PROFILE_CONFIG = ""micro-profile-config"";
+    String MICRO_PROFILE_HEALTH = ""micro-profile-health"";
+    String MICRO_PROFILE_METRICS = ""micro-profile-metrics"";
     String MODCLUSTER = ModelDescriptionConstants.MODCLUSTER;
     String MODEL_BROWSER = ""model-browser"";
     String PATCHING = ""patching"";",2018-11-14T12:11:44Z,46
"@@ -547,7 +547,8 @@ public interface Ids {
     String MESSAGING_SERVER_RUNTIME = ""msg-server-r"";
     String MESSAGING_SERVER_RUNTIME_REFRESH = ""msg-server-r-refresh"";
     String MESSAGING_SERVER_SETTINGS = ""msg-server-settings"";
-    String MICROPROFILE_HEALTH = ""microprofile-health"";
+    String MICRO_PROFILE_HEALTH = ""microprofile-health"";
+    String MICRO_PROFILE_METRICS_FORM = ""microprofile-metrics-form"";
     String MODCLUSTER_PROXY = ""modcluster-proxy"";
     String MODCLUSTER_PROXY_ADD = ""modcluster-proxy-add"";
     String MODCLUSTER_PROXY_REFRESH = ""modcluster-proxy-refresh"";",2018-11-14T12:11:44Z,111
"@@ -229,6 +229,7 @@ public interface Names {
     String MESSAGING_REMOTE_ACTIVEMQ = ""Remote ActiveMQ"";
     String MICROPROFILE_CONFIG = ""Microprofile Config"";
     String MICROPROFILE_HEALTH = ""MicroProfile Health"";
+    String MICROPROFILE_METRICS = ""MicroProfile Metrics"";
     String MIME_MAPPING = ""Mime Mapping"";
     String MINIMUM_PERMISSIONS = ""Minimum Permissions"";
     String MISSING_DEPENDENCIES = ""Missing Dependencies"";",2018-11-14T12:11:44Z,112
"@@ -140,7 +140,10 @@ public interface Previews extends ClientBundleWithLookup {
     ExternalTextResource configurationMail();
 
     @Source(""previews/configuration/microprofile-config.html"")
-    ExternalTextResource configurationMicroprofileConfig();
+    ExternalTextResource configurationMicroProfileConfig();
+
+    @Source(""previews/configuration/microprofile-metrics.html"")
+    ExternalTextResource configurationMicroProfileMetrics();
 
     @Source(""previews/configuration/messaging.html"")
     ExternalTextResource configurationMessaging();",2018-11-14T12:11:44Z,134
"@@ -0,0 +1,18 @@
+<!--
+  ~ Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<p>Support Eclipse MicroProfile Metrics in WildFly. The integration uses the
+    <a href=""https://github.com/smallrye/smallrye-metrics/"">SmallRye</a> component to provide the MicroProfile Metrics implementation.
+</p>",2018-11-14T12:11:44Z,268
"@@ -22,6 +22,7 @@ interface AddressTemplates {
     // @formatter:off
     String ELYTRON_SUBSYSTEM_ADDRESS = ""{selected.host}/{selected.server}/subsystem=elytron"";
     AddressTemplate ELYTRON_SUBSYSTEM_TEMPLATE = AddressTemplate.of(ELYTRON_SUBSYSTEM_ADDRESS);
+    AddressTemplate ELYTRON_PROFILE_TEMPLATE = AddressTemplate.of(""{selected.profile}/subsystem=elytron"");
 
     // ------------------------------------------------------ address (a-z)
 ",2018-08-14T22:43:29Z,269
"@@ -36,6 +36,7 @@
 import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.security.Constraint;
+import org.jboss.hal.resources.Constants;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
@@ -66,15 +67,18 @@ public class KeyStoreElement implements IsElement<HTMLElement>, Attachable {
     KeyStoreElement(Resources resources, Metadata metadata) {
 
         LabelBuilder labelBuilder = new LabelBuilder();
+        Constants cons = resources.constants();
         table = new ModelNodeTable.Builder<NamedNode>(id(TABLE), metadata)
-                .button(new Button<>(resources.constants().load(),
-                        table -> presenter.loadKeyStore(table.selectedRow().getName()),
+                .button(new Button<>(cons.load(), table -> presenter.loadKeyStore(table.selectedRow().getName()),
                         Constraint.executable(KEY_STORE_TEMPLATE, LOAD)))
-                .button(new Button<>(resources.constants().store(),
-                        table -> presenter.storeKeyStore(table.selectedRow().getName()),
+                .button(new Button<>(cons.store(), table -> presenter.storeKeyStore(table.selectedRow().getName()),
                         Constraint.executable(KEY_STORE_TEMPLATE, STORE)))
+                .button(new Button<>(cons.generateKeyPair(), table -> generateKeyPair(metadata),
+                        Constraint.executable(KEY_STORE_TEMPLATE, GENERATE_KEY_PAIR)))
+                .button(new Button<>(cons.importCertificate(), table -> importCertificate(metadata),
+                        Constraint.executable(KEY_STORE_TEMPLATE, IMPORT_CERTIFICATE)))
                 .column(NAME, (cell, t, row, meta) -> row.getName())
-                .column(new InlineAction<>(resources.constants().aliases(),
+                .column(new InlineAction<>(cons.aliases(),
                         row -> {
                             selectedKeystore = row.getName();
                             showAliases(metadata.getTemplate(), row.getName());
@@ -94,29 +98,29 @@ public class KeyStoreElement implements IsElement<HTMLElement>, Attachable {
                 .asElement();
 
         aliasesTable = new ModelNodeTable.Builder<>(id(ALIAS, TABLE), metadata)
-                .button(new Button<>(resources.constants().changeAlias(),
-                        table -> changeAlias(metadata, table.selectedRow().asString()),
+                .button(new Button<>(cons.changeAlias(), table -> changeAlias(metadata, table.selectedRow().asString()),
                         Constraint.executable(KEY_STORE_TEMPLATE, CHANGE_ALIAS)))
-                .button(new Button<>(resources.constants().exportCertificate(),
+                .button(new Button<>(cons.exportCertificate(),
                         table -> exportCertificate(metadata, table.selectedRow().asString()),
                         Constraint.executable(KEY_STORE_TEMPLATE, EXPORT_CERTIFICATE)))
-                .button(new Button<>(resources.constants().generateCSR(),
-                        labelBuilder.label(GENERATE_CERTIFICATE_SIGNING_REQUEST),
+                .button(new Button<>(cons.generateCSR(), labelBuilder.label(GENERATE_CERTIFICATE_SIGNING_REQUEST),
                         table -> generateCSR(metadata, table.selectedRow().asString()),
                         Constraint.executable(KEY_STORE_TEMPLATE, GENERATE_CERTIFICATE_SIGNING_REQUEST)))
-                .button(new Button<>(resources.constants().generateKeyPair(),
-                        table -> generateKeyPair(metadata),
-                        Constraint.executable(KEY_STORE_TEMPLATE, GENERATE_KEY_PAIR)))
-                .button(new Button<>(resources.constants().importCertificate(),
-                        table -> importCertificate(metadata),
-                        Constraint.executable(KEY_STORE_TEMPLATE, IMPORT_CERTIFICATE)))
-                .button(new Button<>(resources.constants().removeAlias(),
+                .button(new Button<>(cons.removeAlias(),
                         table -> removeKeyStoreAlias(metadata, table.selectedRow().asString()),
                         Constraint.executable(KEY_STORE_TEMPLATE, REMOVE_ALIAS)))
-                .button(new Button<>(resources.constants().details(),
-                        resources.constants().viewDetailsAlias(),
+                .button(new Button<>(cons.details(), cons.viewDetailsAlias(),
                         table -> readKeystoreAlias(metadata, table.selectedRow().asString()),
                         Constraint.executable(KEY_STORE_TEMPLATE, READ_ALIAS)))
+                .button(new Button<>(cons.obtain(), cons.obtainCertificate(),
+                        table -> obtainCertificate(metadata, table.selectedRow().asString()),
+                        Constraint.executable(KEY_STORE_TEMPLATE, OBTAIN_CERTIFICATE)))
+                .button(new Button<>(cons.revoke(), cons.revokeCertificate(),
+                        table -> revokeCertificate(metadata, table.selectedRow().asString()),
+                        Constraint.executable(KEY_STORE_TEMPLATE, REVOKE_CERTIFICATE)))
+                .button(new Button<>(cons.verifyRenew(), cons.verifyRenewCertificate(),
+                        table -> verifyRenewCertificate(metadata, table.selectedRow().asString()),
+                        Constraint.executable(KEY_STORE_TEMPLATE, SHOULD_RENEW_CERTIFICATE)))
                 .column(ALIAS, (cell, t, row, meta) -> row.asString())
                 .build();
 
@@ -128,15 +132,15 @@ public class KeyStoreElement implements IsElement<HTMLElement>, Attachable {
                 .build();
 
         HTMLElement aliasesSection = section()
-                .add(h(1).textContent(resources.constants().aliases()))
+                .add(h(1).textContent(cons.aliases()))
                 .add(aliasesTable)
                 .add(formAlias)
                 .asElement();
 
         pages = new Pages(id(PAGES), id(PAGE), mainSection);
         pages.addPage(id(PAGE), id(ALIAS, PAGE),
                 () -> Names.KEY_STORE + "": "" + selectedKeystore,
-                () -> resources.constants().aliases(), aliasesSection);
+                () -> cons.aliases(), aliasesSection);
 
         root = section()
                 .add(pages)
@@ -160,23 +164,33 @@ public void attach() {
         // disable table buttons if there is no selected row
         table.enableButton(0, false);
         table.enableButton(1, false);
+        table.enableButton(2, false);
+        table.enableButton(3, false);
 
         aliasesTable.enableButton(0, false);
         aliasesTable.enableButton(1, false);
         aliasesTable.enableButton(2, false);
+        aliasesTable.enableButton(3, false);
+        aliasesTable.enableButton(4, false);
         aliasesTable.enableButton(5, false);
         aliasesTable.enableButton(6, false);
+        aliasesTable.enableButton(7, false);
 
         table.onSelectionChange(table1 -> {
             table.enableButton(0, table1.hasSelection());
             table.enableButton(1, table1.hasSelection());
+            table.enableButton(2, table1.hasSelection());
+            table.enableButton(3, table1.hasSelection());
         });
         aliasesTable.onSelectionChange(table1 -> {
             table1.enableButton(0, table1.hasSelection());
             table1.enableButton(1, table1.hasSelection());
             table1.enableButton(2, table1.hasSelection());
+            table1.enableButton(3, table1.hasSelection());
+            table1.enableButton(4, table1.hasSelection());
             table1.enableButton(5, table1.hasSelection());
             table1.enableButton(6, table1.hasSelection());
+            table1.enableButton(7, table1.hasSelection());
             if (table1.hasSelection()) {
                 String alias = table1.selectedRow().asString();
                 String value = aliasDetailsMapping.get(alias);
@@ -249,12 +263,24 @@ private void generateCSR(Metadata metadata, String alias) {
         presenter.generateCSR(metadata, selectedKeystore, alias);
     }
 
+    private void obtainCertificate(Metadata metadata, String alias) {
+        presenter.obtainCertificate(metadata, selectedKeystore, alias);
+    }
+
+    private void revokeCertificate(Metadata metadata, String alias) {
+        presenter.revokeCertificate(metadata, selectedKeystore, alias);
+    }
+
+    private void verifyRenewCertificate(Metadata metadata, String alias) {
+        presenter.verifyRenewCertificate(metadata, selectedKeystore, alias);
+    }
+
     private void generateKeyPair(Metadata metadata) {
-        presenter.generateKeyPair(metadata, selectedKeystore, this::updateAliases);
+        presenter.generateKeyPair(metadata, table.selectedRow().getName());
     }
 
     private void importCertificate(Metadata metadata) {
-        presenter.importCertificate(metadata, selectedKeystore, this::updateAliases);
+        presenter.importCertificate(metadata, table.selectedRow().getName());
     }
 
 }",2018-08-14T22:43:29Z,270
"@@ -53,8 +53,6 @@
 import org.jboss.hal.spi.Message;
 import org.jboss.hal.spi.MessageEvent;
 import org.jboss.hal.spi.Requires;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import static org.jboss.gwt.elemento.core.Elements.p;
 import static org.jboss.hal.client.runtime.subsystem.elytron.AddressTemplates.*;
@@ -133,7 +131,6 @@ private Operation operation(AddressTemplate template) {
     }
 
     // ----------------- certificate authority account
-static Logger _log = LoggerFactory.getLogger(""org.jboss"");
 
     void createAccount(String name) {
         Metadata metadata = metadataRegistry.lookup(CERTIFICATE_AUTHORITY_ACCOUNT_TEMPLATE)
@@ -224,7 +221,7 @@ void updateAccount(String name) {
         Dialog dialog = new Dialog.Builder(title)
                 .add(p().textContent(resources.messages().updateAccountQuestion(name)).asElement())
                 .add(form.asElement())
-                .primary(resources.constants().create(), form::save)
+                .primary(resources.constants().update(), form::save)
                 .size(Dialog.Size.MEDIUM)
                 .closeOnEsc(true)
                 .cancel()
@@ -273,7 +270,7 @@ void changeAccountKey(String name) {
         Dialog dialog = new Dialog.Builder(title)
                 .add(p().textContent(resources.messages().changeAccountKeyQuestion(name)).asElement())
                 .add(form.asElement())
-                .primary(resources.constants().create(), form::save)
+                .primary(resources.constants().change(), form::save)
                 .size(Dialog.Size.MEDIUM)
                 .closeOnEsc(true)
                 .cancel()",2018-08-14T22:43:29Z,271
"@@ -15,23 +15,32 @@
  */
 package org.jboss.hal.client.runtime.subsystem.elytron;
 
+import java.util.ArrayList;
 import java.util.Collections;
+import java.util.Date;
 import java.util.List;
 import java.util.function.Consumer;
 
 import javax.inject.Inject;
+import javax.inject.Provider;
 
 import com.google.gwt.safehtml.shared.SafeHtml;
 import com.google.gwt.safehtml.shared.SafeHtmlUtils;
+import com.google.gwt.user.datepicker.client.CalendarUtil;
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.client.annotations.NameToken;
 import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
 import com.gwtplatform.mvp.client.proxy.ProxyPlace;
 import elemental2.dom.HTMLElement;
+import org.jboss.hal.ballroom.Alert;
+import org.jboss.hal.ballroom.Format;
 import org.jboss.hal.ballroom.LabelBuilder;
+import org.jboss.hal.ballroom.autocomplete.SuggestCapabilitiesAutoComplete;
 import org.jboss.hal.ballroom.dialog.Dialog;
 import org.jboss.hal.ballroom.dialog.DialogFactory;
 import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.config.Environment;
+import org.jboss.hal.core.SuccessfulOutcome;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderPath;
 import org.jboss.hal.core.finder.FinderPathFactory;
@@ -48,29 +57,39 @@
 import org.jboss.hal.dmr.Operation;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.flow.FlowContext;
+import org.jboss.hal.flow.Progress;
+import org.jboss.hal.flow.Task;
 import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.token.NameTokens;
+import org.jboss.hal.resources.Icons;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Footer;
 import org.jboss.hal.spi.Message;
 import org.jboss.hal.spi.MessageEvent;
 import org.jboss.hal.spi.Requires;
 
+import static org.jboss.gwt.elemento.core.Elements.div;
+import static org.jboss.gwt.elemento.core.Elements.p;
 import static org.jboss.hal.client.runtime.subsystem.elytron.AddressTemplates.*;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
+import static org.jboss.hal.flow.Flow.series;
+import static org.jboss.hal.resources.Ids.FORM;
 
 public class StoresPresenter extends ApplicationFinderPresenter<StoresPresenter.MyView, StoresPresenter.MyProxy>
         implements SupportsExpertMode {
 
     private static final String SPACE = "" "";
-
+    private Environment environment;
     private final FinderPathFactory finderPathFactory;
     private final StatementContext statementContext;
     private Resources resources;
+    private Provider<Progress> progress;
     private Dispatcher dispatcher;
 
     @Inject
@@ -79,12 +98,16 @@ public StoresPresenter(EventBus eventBus,
             MyProxy proxy,
             Resources resources,
             Finder finder,
+            @Footer Provider<Progress> progress,
             Dispatcher dispatcher,
+            Environment environment,
             FinderPathFactory finderPathFactory,
             StatementContext statementContext) {
         super(eventBus, view, proxy, finder);
         this.resources = resources;
+        this.progress = progress;
         this.dispatcher = dispatcher;
+        this.environment = environment;
         this.finderPathFactory = finderPathFactory;
         this.statementContext = statementContext;
     }
@@ -123,15 +146,15 @@ protected void reload() {
         });
     }
 
+    // ----------------- credential store
+
     private Operation operation(AddressTemplate template) {
         return new Operation.Builder(template.getParent().resolve(statementContext), READ_CHILDREN_RESOURCES_OPERATION)
                 .param(INCLUDE_RUNTIME, true)
                 .param(CHILD_TYPE, template.lastName())
                 .build();
     }
 
-    // ----------------- credential store
-
     void reloadCredentialStore(String name) {
         Operation operation = new Operation.Builder(CREDENTIAL_STORE_TEMPLATE.resolve(statementContext, name), RELOAD)
                 .build();
@@ -183,6 +206,9 @@ void addAlias(Metadata metadata, String name, Consumer<List<ModelNode>> callback
         dialog.show();
     }
 
+
+    // ----------------- key store
+
     void setSecret(Metadata metadata, String name, String alias) {
         AddressTemplate template = metadata.getTemplate();
         String resource = Names.CREDENTIAL_STORE + SPACE + name;
@@ -196,23 +222,23 @@ void setSecret(Metadata metadata, String name, String alias) {
         model.get(ALIAS).set(alias);
         form.getFormItem(ALIAS).setEnabled(false);
         form.edit(model);
-        DialogFactory.buildConfirmation(resources.constants().setSecret(), question, formElement, Dialog.Size.MEDIUM, () -> {
-            ResourceAddress address = template.resolve(statementContext, name);
-            Operation addOp = new Operation.Builder(address, REMOVE_ALIAS)
-                    .param(ALIAS, alias)
-                    .build();
-            dispatcher.execute(addOp, result -> MessageEvent.fire(getEventBus(),
-                    Message.success(resources.messages().setSecretPasswordSuccess(alias, resource))),
-                    (operation, failure) -> MessageEvent.fire(getEventBus(),
-                            Message.error(resources.messages().setSecretPasswordError(alias, resource, failure))),
-                    (operation, ex) -> MessageEvent.fire(getEventBus(),
-                            Message.error(resources.messages().setSecretPasswordError(alias, resource, ex.getMessage()))));
-
-        }).show();
-    }
-
+        DialogFactory.buildConfirmation(resources.constants().setSecret(), question, formElement, Dialog.Size.MEDIUM,
+                () -> {
+                    ResourceAddress address = template.resolve(statementContext, name);
+                    Operation addOp = new Operation.Builder(address, REMOVE_ALIAS)
+                            .param(ALIAS, alias)
+                            .build();
+                    dispatcher.execute(addOp, result -> MessageEvent.fire(getEventBus(),
+                            Message.success(resources.messages().setSecretPasswordSuccess(alias, resource))),
+                            (operation, failure) -> MessageEvent.fire(getEventBus(),
+                                    Message.error(
+                                            resources.messages().setSecretPasswordError(alias, resource, failure))),
+                            (operation, ex) -> MessageEvent.fire(getEventBus(),
+                                    Message.error(resources.messages()
+                                            .setSecretPasswordError(alias, resource, ex.getMessage()))));
 
-    // ----------------- key store
+                }).show();
+    }
 
     void loadKeyStore(String name) {
         Operation operation = new Operation.Builder(KEY_STORE_TEMPLATE.resolve(statementContext, name), LOAD)
@@ -232,7 +258,7 @@ void storeKeyStore(String name) {
         Operation operation = new Operation.Builder(KEY_STORE_TEMPLATE.resolve(statementContext, name), STORE)
                 .build();
         dispatcher.execute(operation, result -> MessageEvent.fire(getEventBus(),
-                        Message.success(resources.messages().storeSuccess(name))),
+                Message.success(resources.messages().storeSuccess(name))),
                 (operation1, failure) -> MessageEvent.fire(getEventBus(),
                         Message.error(resources.messages().storeError(name, failure))),
                 (operation1, exception) -> MessageEvent.fire(getEventBus(),
@@ -242,62 +268,85 @@ void storeKeyStore(String name) {
     void changeAlias(Metadata metadata, String name, String alias, Consumer<List<ModelNode>> callback) {
         AddressTemplate template = metadata.getTemplate();
         String resource = Names.KEY_STORE + SPACE + name;
-        Metadata opMetadata = metadata.forOperation(CHANGE_ALIAS);
-        SafeHtml question = SafeHtmlUtils.fromString(opMetadata.getDescription().getDescription());
-        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(template.lastName(), CHANGE_ALIAS), opMetadata)
+        metadata = metadata.forOperation(CHANGE_ALIAS);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(template.lastName(), CHANGE_ALIAS), metadata)
                 .build();
-        form.attach();
-        HTMLElement formElement = form.asElement();
-        ModelNode model = new ModelNode();
-        model.get(ALIAS).set(alias);
-        form.getFormItem(ALIAS).setEnabled(false);
-        form.edit(model);
-        DialogFactory.buildConfirmation(resources.constants().changeAlias(), question, formElement, Dialog.Size.MEDIUM, () -> {
-            form.save();
+        form.setSaveCallback((form1, changedValues) -> {
             String newAlias = form.getModel().get(""new-alias"").asString();
-            Composite composite = new Composite();
             ResourceAddress address = template.resolve(statementContext, name);
-            Operation addOp = new Operation.Builder(address, CHANGE_ALIAS)
-                    .payload(form.getModel())
-                    .build();
-            composite.add(addOp);
-            Operation operation = new Operation.Builder(address, READ_ALIASES_OPERATION)
-                    .build();
-            composite.add(operation);
 
-            dispatcher.execute(composite, (CompositeResult result) -> {
-                        MessageEvent.fire(getEventBus(),
-                                Message.success(resources.messages().changeAliasSuccess(alias, newAlias, resource)));
-                        ModelNode aliases = result.step(1).get(RESULT);
-                        if (aliases.isDefined()) {
-                            callback.accept(aliases.asList());
-                        } else {
-                            callback.accept(Collections.emptyList());
+            List<Task<FlowContext>> tasks = new ArrayList<>();
+            tasks.add(flowContext -> {
+                Operation operation = new Operation.Builder(address, CHANGE_ALIAS)
+                        .payload(form.getModel())
+                        .build();
+
+                return dispatcher.execute(operation)
+                        .toCompletable();
+            });
+            tasks.add(flowContext -> {
+                Operation operation = new Operation.Builder(KEY_STORE_TEMPLATE.resolve(statementContext, name), STORE)
+                        .build();
+
+                return dispatcher.execute(operation)
+                        .toCompletable();
+            });
+            tasks.add(flowContext -> {
+                Operation operation = new Operation.Builder(address, READ_ALIASES_OPERATION)
+                        .build();
+
+                return dispatcher.execute(operation)
+                        .doOnSuccess(flowContext::push)
+                        .toCompletable();
+            });
+
+            series(new FlowContext(progress.get()), tasks)
+                    .subscribe(new SuccessfulOutcome<FlowContext>(getEventBus(), resources) {
+                        @Override
+                        public void onSuccess(FlowContext flowContext) {
+                            MessageEvent.fire(getEventBus(),
+                                    Message.success(
+                                            resources.messages().changeAliasSuccess(alias, newAlias, resource)));
+                            ModelNode aliases = flowContext.pop();
+                            if (aliases.isDefined()) {
+                                callback.accept(aliases.asList());
+                            } else {
+                                callback.accept(Collections.emptyList());
+                            }
                         }
-                    },
-                    (op, failure) -> MessageEvent.fire(getEventBus(),
-                            Message.error(resources.messages().changeAliasError(alias, newAlias, resource, failure))),
-                    (op, ex) -> MessageEvent.fire(getEventBus(),
-                            Message.error(resources.messages().changeAliasError(alias, newAlias, resource, ex.getMessage()))));
 
-        }).show();
+                        @Override
+                        public void onError(FlowContext context, Throwable ex) {
+                            MessageEvent.fire(getEventBus(),
+                                    Message.error(
+                                            resources.messages()
+                                                    .changeAliasError(alias, newAlias, resource, ex.getMessage())));
+                        }
+                    });
+        });
+        ModelNode model = new ModelNode();
+        model.get(ALIAS).set(alias);
+        form.getFormItem(ALIAS).setEnabled(false);
+        Dialog dialog = new Dialog.Builder(resources.constants().changeAlias())
+                .add(p().textContent(metadata.getDescription().getDescription()).asElement())
+                .add(form.asElement())
+                .primary(resources.constants().change(), form::save)
+                .size(Dialog.Size.MEDIUM)
+                .closeOnEsc(true)
+                .cancel()
+                .build();
+        dialog.registerAttachable(form);
+        dialog.show();
+        form.edit(model);
     }
 
     void exportCertificate(Metadata metadata, String name, String alias) {
         AddressTemplate template = metadata.getTemplate();
         String resource = Names.KEY_STORE + SPACE + name;
-        Metadata opMetadata = metadata.forOperation(EXPORT_CERTIFICATE);
-        SafeHtml question = SafeHtmlUtils.fromString(opMetadata.getDescription().getDescription());
-        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(template.lastName(), EXPORT_CERTIFICATE), opMetadata)
+        metadata = metadata.forOperation(EXPORT_CERTIFICATE);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(template.lastName(), EXPORT_CERTIFICATE), metadata)
                 .build();
-        form.attach();
-        HTMLElement formElement = form.asElement();
-        ModelNode model = new ModelNode();
-        model.get(ALIAS).set(alias);
-        form.getFormItem(ALIAS).setEnabled(false);
-        form.edit(model);
-        DialogFactory.buildConfirmation(resources.constants().exportCertificate(), question, formElement, Dialog.Size.MEDIUM, () -> {
-            form.save();
+        form.setSaveCallback((form1, changedValues) -> {
             ResourceAddress address = template.resolve(statementContext, name);
             Operation operation = new Operation.Builder(address, EXPORT_CERTIFICATE)
                     .payload(form.getModel())
@@ -308,26 +357,33 @@ void exportCertificate(Metadata metadata, String name, String alias) {
                     (op, failure) -> MessageEvent.fire(getEventBus(),
                             Message.error(resources.messages().exportCertificateError(alias, path, resource, failure))),
                     (op, ex) -> MessageEvent.fire(getEventBus(),
-                            Message.error(resources.messages().exportCertificateError(alias, path, resource, ex.getMessage()))));
-
-        }).show();
+                            Message.error(resources.messages()
+                                    .exportCertificateError(alias, path, resource, ex.getMessage()))));
+        });
+        ModelNode model = new ModelNode();
+        model.get(ALIAS).set(alias);
+        form.getFormItem(ALIAS).setEnabled(false);
+        Dialog dialog = new Dialog.Builder(resources.constants().exportCertificate())
+                .add(p().textContent(metadata.getDescription().getDescription()).asElement())
+                .add(form.asElement())
+                .primary(resources.constants().export(), form::save)
+                .size(Dialog.Size.MEDIUM)
+                .closeOnEsc(true)
+                .cancel()
+                .build();
+        dialog.registerAttachable(form);
+        dialog.show();
+        form.edit(model);
     }
 
     void generateCSR(Metadata metadata, String name, String alias) {
         AddressTemplate template = metadata.getTemplate();
         String resource = Names.KEY_STORE + SPACE + name;
         Metadata opMetadata = metadata.forOperation(GENERATE_CERTIFICATE_SIGNING_REQUEST);
-        SafeHtml question = SafeHtmlUtils.fromString(opMetadata.getDescription().getDescription());
-        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(template.lastName(), GENERATE_CERTIFICATE_SIGNING_REQUEST), opMetadata)
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(
+                Ids.build(template.lastName(), GENERATE_CERTIFICATE_SIGNING_REQUEST), opMetadata)
                 .build();
-        form.attach();
-        HTMLElement formElement = form.asElement();
-        ModelNode model = new ModelNode();
-        model.get(ALIAS).set(alias);
-        form.getFormItem(ALIAS).setEnabled(false);
-        form.edit(model);
-        DialogFactory.buildConfirmation(resources.constants().generateCSR(), question, formElement, Dialog.Size.MEDIUM, () -> {
-            form.save();
+        form.setSaveCallback((form1, changedValues) -> {
             ResourceAddress address = template.resolve(statementContext, name);
             Operation operation = new Operation.Builder(address, GENERATE_CERTIFICATE_SIGNING_REQUEST)
                     .payload(form.getModel())
@@ -338,103 +394,314 @@ void generateCSR(Metadata metadata, String name, String alias) {
                     (op, failure) -> MessageEvent.fire(getEventBus(),
                             Message.error(resources.messages().generateCSRError(alias, path, resource, failure))),
                     (op, ex) -> MessageEvent.fire(getEventBus(),
-                            Message.error(resources.messages().generateCSRError(alias, path, resource, ex.getMessage()))));
+                            Message.error(
+                                    resources.messages().generateCSRError(alias, path, resource, ex.getMessage()))));
+        });
+        ModelNode model = new ModelNode();
+        model.get(ALIAS).set(alias);
+        form.getFormItem(ALIAS).setEnabled(false);
+        Dialog dialog = new Dialog.Builder(resources.constants().generateCSR())
+                .add(p().textContent(metadata.getDescription().getDescription()).asElement())
+                .add(form.asElement())
+                .primary(resources.constants().generate(), form::save)
+                .size(Dialog.Size.MEDIUM)
+                .closeOnEsc(true)
+                .cancel()
+                .build();
+        dialog.registerAttachable(form);
+        dialog.show();
+        form.edit(model);
 
-        }).show();
     }
 
-    void generateKeyPair(Metadata metadata, String name, Consumer<List<ModelNode>> callback) {
+    void generateKeyPair(Metadata metadata, String name) {
         AddressTemplate template = metadata.getTemplate();
         String resource = Names.KEY_STORE + SPACE + name;
-        Metadata opMetadata = metadata.forOperation(GENERATE_KEY_PAIR);
-        SafeHtml question = SafeHtmlUtils.fromString(opMetadata.getDescription().getDescription());
-        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(template.lastName(), GENERATE_KEY_PAIR), opMetadata)
+        metadata = metadata.forOperation(GENERATE_KEY_PAIR);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(template.lastName(), GENERATE_KEY_PAIR), metadata)
                 .build();
-        form.attach();
-        HTMLElement formElement = form.asElement();
-        form.edit(new ModelNode());
-        DialogFactory.buildConfirmation(resources.constants().generateKeyPair(), question, formElement,
-                Dialog.Size.MEDIUM, () -> {
-                    form.save();
-                    ResourceAddress address = template.resolve(statementContext, name);
-                    Composite composite = new Composite();
-                    Operation operation = new Operation.Builder(address, GENERATE_KEY_PAIR)
-                            .payload(form.getModel())
-                            .build();
-                    composite.add(operation);
-                    Operation opRead = new Operation.Builder(address, READ_ALIASES_OPERATION)
-                            .build();
-                    composite.add(opRead);
-                    String alias = form.getModel().get(ALIAS).asString();
-
-                    dispatcher.execute(composite, (CompositeResult result) -> {
-                                MessageEvent.fire(getEventBus(),
-                                        Message.success(resources.messages().generateKeyPairSuccess(alias, resource)));
-                                ModelNode aliases = result.step(1).get(RESULT);
-                                if (aliases.isDefined()) {
-                                    callback.accept(aliases.asList());
-                                } else {
-                                    callback.accept(Collections.emptyList());
-                                }
-                            },
-                            (op, failure) -> MessageEvent.fire(getEventBus(),
+        form.setSaveCallback((form1, changedValues) -> {
+            ResourceAddress address = template.resolve(statementContext, name);
+            String alias = form.getModel().get(ALIAS).asString();
+            List<Task<FlowContext>> tasks = new ArrayList<>();
+            tasks.add(flowContext -> {
+                Operation operation = new Operation.Builder(address, GENERATE_KEY_PAIR)
+                        .payload(form.getModel())
+                        .build();
+
+                return dispatcher.execute(operation)
+                        .toCompletable();
+            });
+            tasks.add(flowContext -> {
+                Operation operation = new Operation.Builder(KEY_STORE_TEMPLATE.resolve(statementContext, name), STORE)
+                        .build();
+
+                return dispatcher.execute(operation)
+                        .toCompletable();
+            });
+            tasks.add(flowContext -> {
+                Operation operation = new Operation.Builder(address, READ_ALIASES_OPERATION)
+                        .build();
+
+                return dispatcher.execute(operation)
+                        .toCompletable();
+            });
+
+            series(new FlowContext(progress.get()), tasks)
+                    .subscribe(new SuccessfulOutcome<FlowContext>(getEventBus(), resources) {
+                        @Override
+                        public void onSuccess(FlowContext flowContext) {
+                            MessageEvent.fire(getEventBus(),
+                                    Message.success(resources.messages().generateKeyPairSuccess(alias, resource)));
+                        }
+
+                        @Override
+                        public void onError(FlowContext context, Throwable ex) {
+                            MessageEvent.fire(getEventBus(),
                                     Message.error(
-                                            resources.messages().generateKeyPairError(alias, resource, failure))),
-                            (op, ex) -> MessageEvent.fire(getEventBus(),
-                                    Message.error(resources.messages()
-                                            .generateKeyPairError(alias, resource, ex.getMessage()))));
+                                            resources.messages()
+                                                    .generateKeyPairError(alias, resource, ex.getMessage())));
+                        }
+                    });
+        });
 
-                }).show();
+        Dialog dialog = new Dialog.Builder(resources.constants().generateKeyPair())
+                .add(p().textContent(metadata.getDescription().getDescription()).asElement())
+                .add(form.asElement())
+                .primary(resources.constants().generate(), form::save)
+                .size(Dialog.Size.MEDIUM)
+                .closeOnEsc(true)
+                .cancel()
+                .build();
+        dialog.registerAttachable(form);
+        dialog.show();
+        form.edit(new ModelNode());
     }
 
-    void importCertificate(Metadata metadata, String name, Consumer<List<ModelNode>> callback) {
+    void importCertificate(Metadata metadata, String name) {
         AddressTemplate template = metadata.getTemplate();
         String resource = Names.KEY_STORE + SPACE + name;
-        Metadata opMetadata = metadata.forOperation(IMPORT_CERTIFICATE);
-        SafeHtml question = SafeHtmlUtils.fromString(opMetadata.getDescription().getDescription());
-        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(template.lastName(), IMPORT_CERTIFICATE), opMetadata)
+        metadata = metadata.forOperation(IMPORT_CERTIFICATE);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(template.lastName(), IMPORT_CERTIFICATE), metadata)
                 .build();
-        HTMLElement formElement = form.asElement();
-        form.attach();
-        form.edit(new ModelNode());
-        DialogFactory.buildConfirmation(resources.constants().importCertificate(), question, formElement,
-                Dialog.Size.MEDIUM, () -> {
-                    form.save();
-                    ModelNode payload = form.getModel();
-                    String path = payload.get(PATH).asString();
-                    if (!payload.hasDefined(VALIDATE)) {
-                        payload.get(VALIDATE).set(false);
-                    }
-                    ResourceAddress address = template.resolve(statementContext, name);
-                    Composite composite = new Composite();
-                    Operation operation = new Operation.Builder(address, IMPORT_CERTIFICATE)
-                            .payload(payload)
-                            .build();
-                    composite.add(operation);
-                    Operation opRead = new Operation.Builder(address, READ_ALIASES_OPERATION)
-                            .build();
-                    composite.add(opRead);
-                    String alias = payload.get(ALIAS).asString();
-                    dispatcher.execute(composite, (CompositeResult result) -> {
-                                MessageEvent.fire(getEventBus(),
-                                        Message.success(resources.messages().importCertificateSuccess(alias, path, resource)));
-                                ModelNode aliases = result.step(1).get(RESULT);
-                                if (aliases.isDefined()) {
-                                    callback.accept(aliases.asList());
-                                } else {
-                                    callback.accept(Collections.emptyList());
-                                }
-                            },
-                            (op, failure) -> MessageEvent.fire(getEventBus(),
+        form.setSaveCallback((form1, changedValues) -> {
+            ModelNode payload = form.getModel();
+            String path = payload.get(PATH).asString();
+            if (!payload.hasDefined(VALIDATE)) {
+                payload.get(VALIDATE).set(false);
+            }
+            ResourceAddress address = template.resolve(statementContext, name);
+            String alias = payload.get(ALIAS).asString();
+            List<Task<FlowContext>> tasks = new ArrayList<>();
+            tasks.add(flowContext -> {
+                Operation operation = new Operation.Builder(address, IMPORT_CERTIFICATE)
+                        .payload(payload)
+                        .build();
+
+                return dispatcher.execute(operation)
+                        .doOnError(ex -> MessageEvent.fire(getEventBus(),
+                                Message.error(resources.messages()
+                                        .importCertificateError(alias, path, resource, ex.getMessage()))))
+                        .toCompletable();
+            });
+            tasks.add(flowContext -> {
+                Operation operation = new Operation.Builder(KEY_STORE_TEMPLATE.resolve(statementContext, name), STORE)
+                        .build();
+
+                return dispatcher.execute(operation)
+                        .doOnError(ex -> MessageEvent.fire(getEventBus(),
+                                Message.error(resources.messages().storeError(resource, ex.getMessage()))))
+                        .toCompletable();
+            });
+            tasks.add(flowContext -> {
+                Operation operation = new Operation.Builder(address, READ_ALIASES_OPERATION)
+                        .build();
+
+                return dispatcher.execute(operation)
+                        .doOnError(ex -> MessageEvent.fire(getEventBus(),
+                                Message.error(resources.messages().readAliasesError(resource, ex.getMessage()))))
+                        .toCompletable();
+            });
+
+            series(new FlowContext(progress.get()), tasks)
+                    .subscribe(new SuccessfulOutcome<FlowContext>(getEventBus(), resources) {
+                        @Override
+                        public void onSuccess(FlowContext flowContext) {
+                            MessageEvent.fire(getEventBus(),
+                                    Message.success(
+                                            resources.messages().importCertificateSuccess(alias, path, resource)));
+                        }
+
+                        @Override
+                        public void onError(FlowContext context, Throwable ex) {
+                            MessageEvent.fire(getEventBus(),
                                     Message.error(
-                                            resources.messages().importCertificateError(alias, path, resource, failure))),
-                            (op, ex) -> MessageEvent.fire(getEventBus(),
-                                    Message.error(resources.messages()
-                                            .importCertificateError(alias, path, resource, ex.getMessage()))));
+                                            resources.messages().removeAliasError(alias, resource, ex.getMessage())));
+                        }
+                    });
+        });
 
-                }).show();
+        Dialog dialog = new Dialog.Builder(resources.constants().importCertificate())
+                .add(p().textContent(metadata.getDescription().getDescription()).asElement())
+                .add(form.asElement())
+                .primary(resources.constants().importt(), form::save)
+                .size(Dialog.Size.MEDIUM)
+                .closeOnEsc(true)
+                .cancel()
+                .build();
+        dialog.registerAttachable(form);
+        dialog.show();
+        form.edit(new ModelNode());
+    }
+
+    void obtainCertificate(Metadata metadata, String name, String alias) {
+        metadata = metadata.forOperation(OBTAIN_CERTIFICATE);
+        String id = Ids.build(KEY_STORE, OBTAIN_CERTIFICATE, FORM);
+        String title = new LabelBuilder().label(CERTIFICATE_AUTHORITY_ACCOUNT);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata)
+                .build();
+        form.setSaveCallback((form1, changedValues) -> {
+            ResourceAddress address = KEY_STORE_TEMPLATE.resolve(statementContext, name);
+            Operation operation = new Operation.Builder(address, OBTAIN_CERTIFICATE)
+                    .payload(form.getModel())
+                    .build();
+            dispatcher.execute(operation, result -> MessageEvent.fire(getEventBus(),
+                    Message.success(resources.messages().obtainCertificateSuccess(alias, name))),
+                    (operation1, failure) -> MessageEvent.fire(getEventBus(),
+                            Message.error(resources.messages().obtainCertificateError(alias, name, failure))),
+                    (operation1, ex) -> MessageEvent.fire(getEventBus(),
+                            Message.error(resources.messages().obtainCertificateError(alias, name, ex.getMessage()))));
+        });
+        Dialog dialog = new Dialog.Builder(title)
+                .add(p().textContent(metadata.getDescription().getDescription()).asElement())
+                .add(form.asElement())
+                .primary(resources.constants().obtain(), form::save)
+                .size(Dialog.Size.MEDIUM)
+                .closeOnEsc(true)
+                .cancel()
+                .build();
+        dialog.registerAttachable(form);
+        ModelNode model = new ModelNode();
+        model.get(ALIAS).set(alias);
+        form.getFormItem(ALIAS).setEnabled(false);
+        if (!environment.isStandalone()) {
+            // the capability reference the /profile=* resource and the template attached to the metadata
+            // points to the {selected.host}/{selected.server}, so we need to register the template to the profile
+            String capability = metadata.getDescription()
+                    .get(ATTRIBUTES)
+                    .get(CERTIFICATE_AUTHORITY_ACCOUNT)
+                    .get(CAPABILITY_REFERENCE)
+                    .asString();
+            form.getFormItem(CERTIFICATE_AUTHORITY_ACCOUNT)
+                    .registerSuggestHandler(
+                            new SuggestCapabilitiesAutoComplete(dispatcher, statementContext, capability,
+                                    ELYTRON_PROFILE_TEMPLATE));
+        }
+        dialog.show();
+        form.edit(model);
+    }
+
+    void revokeCertificate(Metadata metadata, String name, String alias) {
+        metadata = metadata.forOperation(REVOKE_CERTIFICATE);
+        String id = Ids.build(KEY_STORE, REVOKE_CERTIFICATE, FORM);
+        String title = new LabelBuilder().label(CERTIFICATE_AUTHORITY_ACCOUNT);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata)
+                .build();
+        form.setSaveCallback((form1, changedValues) -> {
+            ResourceAddress address = KEY_STORE_TEMPLATE.resolve(statementContext, name);
+            Operation operation = new Operation.Builder(address, REVOKE_CERTIFICATE)
+                    .payload(form.getModel())
+                    .build();
+            dispatcher.execute(operation, result -> MessageEvent.fire(getEventBus(),
+                    Message.success(resources.messages().revokeCertificateSuccess(alias, name))),
+                    (operation1, failure) -> MessageEvent.fire(getEventBus(),
+                            Message.error(resources.messages().revokeCertificateError(alias, name, failure))),
+                    (operation1, ex) -> MessageEvent.fire(getEventBus(),
+                            Message.error(resources.messages().revokeCertificateError(alias, name, ex.getMessage()))));
+        });
+        Dialog dialog = new Dialog.Builder(title)
+                .add(p().textContent(metadata.getDescription().getDescription()).asElement())
+                .add(form.asElement())
+                .primary(resources.constants().revoke(), form::save)
+                .size(Dialog.Size.MEDIUM)
+                .closeOnEsc(true)
+                .cancel()
+                .build();
+        dialog.registerAttachable(form);
+        ModelNode model = new ModelNode();
+        model.get(ALIAS).set(alias);
+        form.getFormItem(ALIAS).setEnabled(false);
+        if (!environment.isStandalone()) {
+            // the capability reference the /profile=* resource and the template attached to the metadata
+            // points to the {selected.host}/{selected.server}, so we need to register the template to the profile
+            String capability = metadata.getDescription()
+                    .get(ATTRIBUTES)
+                    .get(CERTIFICATE_AUTHORITY_ACCOUNT)
+                    .get(CAPABILITY_REFERENCE)
+                    .asString();
+            form.getFormItem(CERTIFICATE_AUTHORITY_ACCOUNT)
+                    .registerSuggestHandler(
+                            new SuggestCapabilitiesAutoComplete(dispatcher, statementContext, capability,
+                                    ELYTRON_PROFILE_TEMPLATE));
+        }
+        dialog.show();
+        form.edit(model);
     }
 
+    void verifyRenewCertificate(Metadata metadata, String name, String alias) {
+        metadata = metadata.forOperation(SHOULD_RENEW_CERTIFICATE);
+        String id = Ids.build(KEY_STORE, SHOULD_RENEW_CERTIFICATE, FORM);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata)
+                .build();
+        form.setSaveCallback((form1, changedValues) -> {
+            ResourceAddress address = KEY_STORE_TEMPLATE.resolve(statementContext, name);
+            Operation operation = new Operation.Builder(address, SHOULD_RENEW_CERTIFICATE)
+                    .payload(form.getModel())
+                    .build();
+            dispatcher.execute(operation, result -> {
+                        int days = result.get(""days-to-expiry"").asInt();
+                        Date dueDate = new Date();
+                        CalendarUtil.addDaysToDate(dueDate, days);
+
+                        HTMLElement content;
+                        if (days < 1) {
+                            Alert warning = new Alert(Icons.WARNING, resources.messages().certificateExpired(alias));
+                            content = div().add(warning).asElement();
+                        } else {
+                            SafeHtml description = resources.messages()
+                                    .certificateShouldRenew(days, alias, Format.mediumDateTime(dueDate));
+                                content = p().innerHtml(description).asElement();
+                        }
+
+                        new Dialog.Builder(resources.constants().verifyRenewCertificate())
+                                .primary(resources.constants().ok(), null)
+                                .size(Dialog.Size.MEDIUM)
+                                .add(content)
+                                .build()
+                                .show();
+
+
+                    },
+                    (operation1, failure) -> MessageEvent.fire(getEventBus(),
+                            Message.error(resources.messages().verifyRenewError(alias, name, failure))),
+                    (operation1, ex) -> MessageEvent.fire(getEventBus(),
+                            Message.error(resources.messages().verifyRenewError(alias, name, ex.getMessage()))));
+        });
+        Dialog dialog = new Dialog.Builder(resources.constants().verifyRenewCertificate())
+                .add(p().textContent(metadata.getDescription().getDescription()).asElement())
+                .add(form.asElement())
+                .primary(resources.constants().verifyRenew(), form::save)
+                .size(Dialog.Size.MEDIUM)
+                .closeOnEsc(true)
+                .cancel()
+                .build();
+        dialog.registerAttachable(form);
+        dialog.show();
+        ModelNode model = new ModelNode();
+        model.get(ALIAS).set(alias);
+        form.getFormItem(ALIAS).setEnabled(false);
+        form.edit(model);
+    }
 
     // ----------------- common methods
 
@@ -466,31 +733,59 @@ void removeAlias(Metadata metadata, String name, String alias, Consumer<List<Mod
         SafeHtml question = resources.messages().removeAliasQuestion(alias, resource);
         DialogFactory.showConfirmation(resources.constants().removeAlias(), question, () -> {
             ResourceAddress address = template.resolve(statementContext, name);
-            Composite composite = new Composite();
-            Operation addOp = new Operation.Builder(address, REMOVE_ALIAS)
-                    .param(ALIAS, alias)
-                    .build();
 
-            composite.add(addOp);
-            Operation operation = new Operation.Builder(address, READ_ALIASES_OPERATION)
-                    .build();
-            composite.add(operation);
-
-            dispatcher.execute(composite, (CompositeResult result) -> {
-                        MessageEvent.fire(getEventBus(),
-                                Message.success(resources.messages().addSuccess(ALIAS, alias, resource)));
-                        ModelNode aliases = result.step(1).get(RESULT);
-                        if (aliases.isDefined()) {
-                            callback.accept(aliases.asList());
-                        } else {
-                            callback.accept(Collections.emptyList());
+            List<Task<FlowContext>> tasks = new ArrayList<>();
+            tasks.add(flowContext -> {
+                Operation operation = new Operation.Builder(address, REMOVE_ALIAS)
+                        .param(ALIAS, alias)
+                        .build();
+
+                return dispatcher.execute(operation)
+                        .doOnError(ex -> MessageEvent.fire(getEventBus(),
+                                Message.error(resources.messages().removeAliasError(alias, resource, ex.getMessage()))))
+                        .toCompletable();
+            });
+            tasks.add(flowContext -> {
+                Operation operation = new Operation.Builder(KEY_STORE_TEMPLATE.resolve(statementContext, name), STORE)
+                        .build();
+
+                return dispatcher.execute(operation)
+                        .doOnError(ex -> MessageEvent.fire(getEventBus(),
+                                Message.error(resources.messages().storeError(resource, ex.getMessage()))))
+                        .toCompletable();
+            });
+            tasks.add(flowContext -> {
+                Operation operation = new Operation.Builder(address, READ_ALIASES_OPERATION)
+                        .build();
+
+                return dispatcher.execute(operation)
+                        .doOnSuccess(flowContext::push)
+                        .doOnError(ex -> MessageEvent.fire(getEventBus(),
+                                Message.error(resources.messages().readAliasesError(resource, ex.getMessage()))))
+                        .toCompletable();
+            });
+
+            series(new FlowContext(progress.get()), tasks)
+                    .subscribe(new SuccessfulOutcome<FlowContext>(getEventBus(), resources) {
+                        @Override
+                        public void onSuccess(FlowContext flowContext) {
+                            MessageEvent.fire(getEventBus(),
+                                    Message.success(resources.messages().removeAliasSuccess(alias, resource)));
+                            ModelNode aliases = flowContext.pop();
+                            if (aliases.isDefined()) {
+                                callback.accept(aliases.asList());
+                            } else {
+                                callback.accept(Collections.emptyList());
+                            }
                         }
-                    },
-                    (op, failure) -> MessageEvent.fire(getEventBus(),
-                            Message.error(resources.messages().addError(ALIAS, alias, resource, failure))),
-                    (op, ex) -> MessageEvent.fire(getEventBus(),
-                            Message.error(resources.messages().addError(ALIAS, alias, resource, ex.getMessage()))));
 
+                        @Override
+                        public void onError(FlowContext context, Throwable ex) {
+                            MessageEvent.fire(getEventBus(),
+                                    Message.error(
+                                            resources.messages().removeAliasError(alias, resource, ex.getMessage())));
+                        }
+                    });
         });
     }
 ",2018-08-14T22:43:29Z,272
"@@ -217,9 +217,12 @@ public void add(String name, ResourceAddress address, @Nullable ModelNode payloa
             builder.payload(payload);
         }
         dispatcher.execute(builder.build(), result -> {
-            MessageEvent.fire(eventBus, Message.success(successMessage));
-            callback.execute(name, address);
-        });
+                    MessageEvent.fire(eventBus, Message.success(successMessage));
+                    callback.execute(name, address);
+                }, (operation, failure) -> MessageEvent.fire(eventBus,
+                Message.error(resources.messages().addResourceError(name, failure))),
+                (operation, exception) -> MessageEvent.fire(eventBus,
+                        Message.error(resources.messages().addResourceError(name, exception.getMessage()))));
     }
 
 
@@ -372,9 +375,12 @@ public void addSingleton(String type, ResourceAddress address, @Nullable ModelNo
     @JsIgnore
     public void addSingleton(String type, Operation operation, AddSingletonCallback callback) {
         dispatcher.execute(operation, result -> {
-            MessageEvent.fire(eventBus, Message.success(resources.messages().addSingleResourceSuccess(type)));
-            callback.execute(operation.getAddress());
-        });
+                    MessageEvent.fire(eventBus, Message.success(resources.messages().addSingleResourceSuccess(type)));
+                    callback.execute(operation.getAddress());
+                }, (operation1, failure) -> MessageEvent.fire(eventBus,
+                Message.error(resources.messages().addSingleResourceError(type, failure))),
+                (operation1, exception) -> MessageEvent.fire(eventBus,
+                        Message.error(resources.messages().addSingleResourceError(type, exception.getMessage()))));
     }
 
 ",2018-08-14T22:43:29Z,273
"@@ -549,6 +549,7 @@ public interface ModelDescriptionConstants {
     String NUMBER_OF_TRANSACTIONS = ""number-of-transactions"";
     String OBJECT = ""object"";
     String OFF_HEAP = ""off-heap"";
+    String OBTAIN_CERTIFICATE = ""obtain-certificate"";
     String OOB = ""oob"";
     String OP = ""operation"";
     String OPERATION = ""operation"";
@@ -726,6 +727,7 @@ public interface ModelDescriptionConstants {
     String RESULT = ""result"";
     String RESUME = ""resume"";
     String RESUME_SERVERS = ""resume-servers"";
+    String REVOKE_CERTIFICATE = ""revoke-certificate"";
     String ROLE = ""role"";
     String ROLE_MAP = ""role-map"";
     String ROLE_MAPPING = ""role-mapping"";
@@ -789,6 +791,7 @@ public interface ModelDescriptionConstants {
     String SHARED_STORE_COLOCATED = ""shared-store-colocated"";
     String SHARED_STORE_MASTER = ""shared-store-master"";
     String SHARED_STORE_SLAVE = ""shared-store-slave"";
+    String SHOULD_RENEW_CERTIFICATE = ""should-renew-certificate"";
     String SHOW_HISTORY_OPERATION = ""show-history"";
     String SHUTDOWN = ""shutdown"";
     String SIMPLE_PERMISSION_MAPPER = ""simple-permission-mapper"";",2018-08-14T22:43:29Z,109
"@@ -175,6 +175,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String expiredSessions();
     String explode();
     String exploded();
+    String export();
     String exportCertificate();
     String expression();
     String expressionResolver();
@@ -198,6 +199,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String fromDeployment();
 
     String getMetadata();
+    String generate();
     String generateCSR();
     String generateKeyPair();
     String globalSettings();
@@ -293,6 +295,8 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String httpManagementInterface();
 
     String identity();
+    // contains two t as the import is a reserved word
+    String importt();
     String importCertificate();
     String inactive();
     String includeRole();
@@ -396,6 +400,8 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String notEnabled();
     String nothingSelected();
 
+    String obtain();
+    String obtainCertificate();
     String of();
     String ok();
     String opened();
@@ -483,6 +489,8 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String results();
     String resume();
     String review();
+    String revoke();
+    String revokeCertificate();
     String role();
     String roles();
     String rollback();
@@ -593,6 +601,8 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String users();
 
     String validation();
+    String verifyRenew();
+    String verifyRenewCertificate();
     String view();
     String viewDetailsAlias();
     String viewInEditor();",2018-08-14T22:43:29Z,100
"@@ -33,6 +33,7 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml addressLabel(String address);
     SafeHtml addServerHostHelp();
     String addServerTitle();
+    SafeHtml addSingleResourceError(String type, String error);
     SafeHtml addSingleResourceSuccess(String type);
     SafeHtml allContentAlreadyDeployedToServerGroup(String serverGroup);
     SafeHtml allMailServersExist();
@@ -56,6 +57,9 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml cannotDownloadExploded();
 
     SafeHtml capabilityReference(String capability);
+    SafeHtml certificateExpired(String alias);
+    SafeHtml certificateShouldRenew(int days, String alias, String dueDate);
+    // String certificateShouldNotRenew(int days, String dueDate);
     SafeHtml changeAccountKeyError(String name, String error);
     String changeAccountKeyQuestion(String name);
     SafeHtml changeAccountKeySuccess(String name);
@@ -364,6 +368,8 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml normalLogFile(String size);
     String notifications(@PluralCount int count);
 
+    SafeHtml obtainCertificateError(String alias, String resource, String error);
+    SafeHtml obtainCertificateSuccess(String alias, String resource);
     SafeHtml operationLabel(String name);
     String operations(int size);
 
@@ -423,7 +429,9 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml reloadServerSuccess(String name);
     SafeHtml reloadSettings();
 
+    SafeHtml removeAliasError(String alias, String resource, String error);
     SafeHtml removeAliasQuestion(String alias, String resource);
+    SafeHtml removeAliasSuccess(String alias, String resource);
     String removeConfirmationTitle(String name);
     SafeHtml removeConfirmationQuestion(String name);
     SafeHtml removeConfigurationChangesQuestion(String type, String name);
@@ -495,6 +503,8 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml resumeServerGroupSuccess(String name);
     SafeHtml resumeServerError(String name);
     SafeHtml resumeServerSuccess(String name);
+    SafeHtml revokeCertificateError(String alias, String resource, String error);
+    SafeHtml revokeCertificateSuccess(String alias, String resource);
     String roleColumnFilterDescription();
     SafeHtml rollbackError(String failure);
     SafeHtml rollbackInProgress(String patchid);
@@ -616,6 +626,8 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     String uptime(String uptime);
     String used(double value);
 
+    SafeHtml verifyRenewError(String alias, String resource, String error);
+    SafeHtml verifyRenewSuccess(String alias, String resource);
     String view(String type);
 
     SafeHtml writeBehaviour(String current, String switchTo);",2018-08-14T22:43:29Z,94
"@@ -148,6 +148,7 @@ expire=Expire
 expiredSessions=Expired Sessions
 explode=Explode
 exploded=exploded
+export=Export
 exportCertificate=Export certificate
 expression=Expression
 expressionResolver=Expression Resolver
@@ -169,6 +170,7 @@ formErrors=The following errors occurred\:
 formResetDesc=Resets all non required fields to their initial or default values.
 fromDeployment=part of a deployment
 getMetadata=Get Metadata
+generate=Generate
 generateCSR=Generate CSR
 generateKeyPair=Generate Key Pair
 globalSettings=Global Settings
@@ -261,6 +263,7 @@ hostsUsingThisHandler=Hosts using this handler
 hour=hour
 hours=hours
 httpManagementInterface=HTTP Management Interface
+importt=Import
 importCertificate=Import Certificate
 identity=identity
 inactive=inactive
@@ -356,6 +359,9 @@ noWrite=No Write Behaviour
 notANumber=Not a number
 notEnabled=Not Enabled
 nothingSelected=Nothing selected
+obtain=Obtain
+obtainCertificate=Obtain Certificate
+obtainCertificateError=
 of=of
 ok=Ok
 openInExternalWindow=Open in external window
@@ -440,6 +446,8 @@ restricted=The permissions for your role don't allow to access this data.
 results=Results
 resume=Resume
 review=Review
+revoke=Revoke
+revokeCertificate=Revoke Certificate
 role=Role
 roles=Roles
 rollback=Rollback
@@ -544,6 +552,8 @@ used=Used
 user=User
 users=Users
 validation=Validation
+verifyRenew=Verify Renew
+verifyRenewCertificate=Verify Renew of Certificate
 view=View
 viewDetailsAlias=View the alias details
 viewInEditor=View in Editor",2018-08-14T22:43:29Z,100
"@@ -87,13 +87,15 @@ error=Erro
 excludeRole=Excluir Fun\u00E7\u00E3o
 expiredSessions=Sess\u00f5es Expiradas
 explode=Expandir
+export=Exportar
 exportCertificate=Exportar certificado
 expression=Express\u00E3o
 failed=Falhou
 filter=Flitro
 finish=Concluir
 finished=Conclu\u00EDdo
 getMetadata=Ler Metadata
+generate=Gerar
 generateCSR=Gerar CSR
 generateKeyPair=Gerar Par de Chaves
 group=Grupo
@@ -176,6 +178,7 @@ hour=hora
 hours=horas
 httpManagementInterface=Interface de Gerenciamento HTTP
 identity=identidade
+importt=Importar
 importCertificate=Importar Certificado
 includes=Inclui
 initialize=Inicializar
@@ -213,6 +216,8 @@ next=Pr\u00F3ximo
 no=N\u00E3o
 noAttributes=N\u00E3o h\u00E1 atributos
 nothingSelected=Nada selecionado
+obtain=Obter
+obtainCertificate=Obter Certificado
 of=de
 ok=Ok
 opened=Aberto
@@ -267,6 +272,8 @@ restart=Reiniciar
 results=Resultados
 resume=Retomar
 review=Revis\u00E3o
+revoke=Revogar
+revokeCertificate=Revogar Certificado
 role=Fun\u00E7\u00E3o
 roles=Pap\u00E9is
 rollback=Reverter
@@ -328,6 +335,8 @@ used=Usado
 user=Usu\u00E1rio
 users=Usu\u00E1rios
 validation=Valida\u00E7\u00E3o
+verifyRenew=Verificar Renova\u00e7\u00e3o
+verifyRenewCertificate=Verificar Renova\u00e7\u00e3o de Certificado
 view=Visualizar
 viewDetailsAlias=Ver os detalhes de um alias
 xaProperties=Propriedades XA",2018-08-14T22:43:29Z,100
"@@ -11,6 +11,7 @@ addResourceTitle=Add {0}
 addressLabel=<p>Address: <strong>{0}</strong></p>
 addServerHostHelp=The name of the host contoller that is responsible for managing this server.
 addServerTitle=Add Server
+addSingleResourceError=Failed to add singleton resource {0}, cause: {1}
 addSingleResourceSuccess=<strong>{0}</strong> successfully added.
 allContentAlreadyDeployedToServerGroup=All content already deployed to server group <strong>{0}</strong>.
 allMailServersExist=All mails servers already exist.
@@ -30,8 +31,10 @@ cancelledOperation=The management operation <strong>{0}</strong> was cancelled.
 cannotBrowseUnmanaged=The reading of contents of unmanaged deployments is not supported.
 cannotDownloadExploded=Cannot download an exploded deployment.
 capabilityReference=References the capability <code>{0}</code>
+certificateExpired=The certificate identified by alias {0} should be renewed.
+certificateShouldRenew=<p>In {0} days the certificate identified by alias {1} should be renewed.</p><p>The certificate will expire in {2}.</p>
 changeAccountKeyError=There was an error to change the account key for <strong>{0}</strong>. Cause: {1}
-changeAccountKeyQuestion=Do you really want to change the key for account <strong>{0}</strong> ?
+changeAccountKeyQuestion=Do you really want to change the key for account {0} ?
 changeAccountKeySuccess=The account key for <strong>{0}</strong> was successfully changed.
 changePrioritySuccess=The priority has been successfully changed to <strong>{0, number}</strong>.
 changeAliasError=Failed to change alias <strong>{0}</strong> to <strong>{1}</strong> for <strong>{2}</strong>. Cause: {3}.
@@ -71,7 +74,7 @@ contentUndeployed=Content <strong>{0}</strong> successfully undeployed from sele
 contentUndeployedFromServerGroup=Content <strong>{0}</strong> successfully undeployed from server group <strong>{1}</strong>.
 copyServerTitle=Copy server
 createAccountError=There was an error to create the account for <strong>{0}</strong>. Cause: {1}
-createAccountQuestion=Do you really want to create account for <strong>{0}</strong> ?
+createAccountQuestion=Do you really want to create account for {0} ?
 createAccountSuccess=The account for <strong>{0}</strong> was successfully created.
 credentialReferenceAddConfirmation=The resource contains a value for <strong>&#39;{0}&#39;</strong> which is mutual exclusive to &#39;Credential Reference&#39;.<br/>Do you want remove the value for &#39;{0}&#39; and add &#39;Credential Reference&#39;?
 credentialReferenceAddressError=Unable to access credential reference: No address available.
@@ -89,7 +92,7 @@ datasourceRuntimeFilterDescription=Filter by: name, xa, normal, enabled/disabled
 dataSourceStatisticsDisabled=Statistics are not enabled for data source {0}. You can enable them by clicking the button below. This will modify the data source <strong>configuration</strong> and you will need to reload the server.
 dataSourceStatisticsFromDeployment=Statistics are not available for data sources contained in a deployment. Please add the data source in the configuration section, to get statistics.
 deactivateAccountError=There was an error to deactivate the account for <strong>{0}</strong>. Cause: {1}
-deactivateAccountQuestion=Do you really want to deactivate account for <strong>{0}</strong> ?
+deactivateAccountQuestion=Do you really want to deactivate account for {0} ?
 deactivateAccountSuccess=The account for <strong>{0}</strong> was successfully deactivated.
 deployedTo=The content <strong>{0}</strong> is deployed to the following server groups:
 deploymentActive=The deployment <strong>{0}</strong> is enabled and active.
@@ -317,6 +320,8 @@ normalLogFile=The log file has a size of <strong>{0}</strong>.
 notifications={0, number} Notifications
 notifications[\=0]=No Notifications
 notifications[\=1]=One Notification
+obtainCertificateError=There was an error to obtain the certificate for alias <strong>{0}</strong> of Key Store <strong>{1}</strong>. Cause: {2}
+obtainCertificateSuccess=The certificate identified by alias <strong>{0}</strong> of Key Store <strong>{1}</strong> was retrieved with success.
 operationLabel=<p>Operation: <strong>{0}</strong></p>
 operations={0, number} operations
 pageNotFound=Page <strong>{0}</strong> not found.
@@ -374,7 +379,9 @@ reloadServerGroupSuccess=Server group <strong>{0}</strong> successfully reloaded
 reloadServerQuestion=Are you sure you want to reload the server <strong>{0}</strong>?
 reloadServerSuccess=Server <strong>{0}</strong> successfully reloaded.
 reloadSettings=The settings will not take effect until the console is reloaded. Do you want to reload now?
+removeAliasError=There was and error trying to remove the alias <strong>{0}</strong> from Key Store <strong>{1}</strong>. Cause: {2}
 removeAliasQuestion=Do you really want to remove the alias <strong>{0}</strong> from <strong>{1}</strong> ?
+removeAliasSuccess=The alias <strong>{0}</strong> was successfully removed from Key Store <strong>{1}</strong>.
 removeConfirmationQuestion=Do you really want to remove <strong>{0}</strong>?
 removeConfigurationChangesQuestion=Do you really want to disable the configuration changes for {0} <strong>{1}</strong>.
 removeContentQuestion=Do you really want to remove <strong>{1}</strong> from <strong>{0}</strong>?
@@ -444,6 +451,8 @@ resumeServerError=Failed to resume server <strong>{0}</strong>.
 resumeServerGroupError=Failed to resume server group <strong>{0}</strong>.
 resumeServerGroupSuccess=Server group <strong>{0}</strong> successfully resumed.
 resumeServerSuccess=Server <strong>{0}</strong> successfully resumed.
+revokeCertificateError=There was an error to revoke the certificate for alias <strong>{0}</strong> of Key Store <strong>{1}</strong>. Cause: {2}
+revokeCertificateSuccess=The certificate identified by alias <strong>{0}</strong> of Key Store <strong>{1}</strong> was revoked with success.
 roleColumnFilterDescription=Filter by: role name, role type or scope
 runningTimeLabel=<p>Running Time: <strong>{0}</strong></p>
 saveIdentityError=There was and error trying to save an identity <strong>{0}</strong> to <strong>{1}</strong>. Cause: {2}
@@ -549,5 +558,7 @@ uploadInProgress=<strong>{0}</strong> is being uploaded. Please wait until the u
 uploadSuccessful=<strong>{0}</strong> has been successfully uploaded to the content repository.
 uptime=Uptime: {0}
 used={0}% used
+verifyRenewError=There was an error to verify if the certificate should be renewed for alias <strong>{0}</strong> of Key Store <strong>{1}</strong>. Cause: {2}
+verifyRenewSuccess=The renewal check of certificate identified by alias <strong>{0}</strong> of Key Store <strong>{1}</strong> was verified with success.
 view=View {0}
 writeBehaviour=This store currently uses a <strong>{0}</strong> behaviour. Use the button below to switch to <strong>{1}</strong>.",2018-08-14T22:43:29Z,94
"@@ -4,12 +4,15 @@ addKeyStoreError=Falha ao adicionar o key-store {0}.
 addResourceError=Falha ao adicionar recurso {0}, motivo: {1}
 addServerHostHelp=O nome do servidor de controle respons\u00e1vel por gerenciar este servidor.
 addServerTitle=Adicionar servidor
+addSingleResourceError=Falha ao adicionar recurso singleton {0}, motivo: {1}
 addSuccess=A {0} <strong>{1}</strong> foi adicionada com sucesso no <strong>{2}</strong>.
 allSingletonsExist=Todos os recursos singleton j\u00E1 foram adicionados.
 cannotBrowseUnmanaged=A leitura de conte\u00fado de deployments n\u00e3o gerenciados (unmanaged) n\u00e3o \u00e9 suportado.
 cannotDownloadExploded=N\u00e3o \u00e9 poss\u00edvel realizar o download de um deployment aberto (exploded).
+certificateExpired=O certificado identificado pelo alias {0} deve ser renovado.
+certificateShouldRenew=<p>Em {0} dias o certificado identificado pelo alias {1} dever\u00e1 ser renovado.</p><p> O certificado ir\u00e1 expirar em {2}.</p>
 changeAccountKeyError=Houve um erro ao atualizar a chave da conta de <strong>{0}</strong>. Causa: {1}
-changeAccountKeyQuestion=Voc\u00ea deseja atualizar a chave de conta de <strong>{0}</strong> ?
+changeAccountKeyQuestion=Voc\u00ea deseja atualizar a chave de conta de {0} ?
 changeAccountKeySuccess=A chave da conta de <strong>{0}</strong> foi atualizada com sucesso.
 changeAliasError=Falha ao modificar o alias <strong>{0}</strong> para <strong>{1}</strong> em <strong>{2}</strong>. Causa: {3}.
 changeAliasSuccess=O alias <strong>{0}</strong> foi modificado com sucesso para <strong>{1}</strong> em <strong>{2}</strong>.
@@ -24,12 +27,12 @@ configurePatchTitle=Configurar corre\u00e7\u00e3o
 contentFilterDescription=Filtrar por: nome, managed, exploded, archived, server group
 copyServerTitle=Copiar servidor
 createAccountError=Houve um erro ao criar a conta de <strong>{0}</strong>. Causa: {1}
-createAccountKeyQuestion=Voc\u00ea deseja criar a conta para <strong>{0}</strong> ?
+createAccountKeyQuestion=Voc\u00ea deseja criar a conta para {0} ?
 createAccountSuccess=A conta de <strong>{0}</strong> foi criada com sucesso.
 datasourceFilterDescription=Filtrar por: nome, xa, normal, enabled/disabled, deployment
 datasourceRuntimeFilterDescription=Filtrar por: nome, xa, normal, enabled/disabled
 deactivateAccountError=Houve um erro ao desativar a conta de <strong>{0}</strong>. Causa: {1}
-deactivateAccountKeyQuestion=Voc\u00ea deseja desativar a conta de <strong>{0}</strong> ?
+deactivateAccountQuestion=Voc\u00ea deseja desativar a conta de {0} ?
 deactivateAccountSuccess=A conta de <strong>{0}</strong> foi desativada com sucesso.
 deploymentStandaloneColumnFilterDescription=Filtrar por: nome ou status da instala\u00e7\u00e3o
 destinationFilterDescription=Filtrar por: nome, tipo ou deployment
@@ -97,6 +100,8 @@ notifications[\=0]=Nenhuma notifica\u00E7\u00E3o
 notifications[\=1]=Uma notifica\u00E7\u00E3o
 noPatchesForHost=N\u00e3o h\u00e1 corre\u00e7\u00f5es instaladas para este servidor de controle.
 noSelectedPatch=Nenhum arquivo de corre\u00e7\u00e3o selecionado. Por favor selecione um arquivo de corre\u00e7\u00e3o para enviar.
+obtainCertificateError=Houve um erro ao obter o certificado de alias <strong>{0}</strong> do Key Store <strong>{1}</strong>. Causa: {2}
+obtainCertificateSuccess=O certificado identificado pelo alias <strong>{0}</strong> do Key Store <strong>{1}</strong> foi obtido com sucesso.
 patchAddError=Ocorreu um erro na instala\u00e7\u00e3o da corre\u00e7\u00e3o {0}. Motivo: {1}
 patchHostNeedsRestart=O servidor de controle <strong>{0}</strong> precisa ser reiniciado. Uma corre\u00e7\u00e3o n\u00e3o pode ser adicionada ou removida antes do servidor de controle ser reiniciado.
 patchInProgress=<strong>{0}</strong> est\u00e1 sendo instalado. Por favor, aguarde a instala\u00e7\u00e3o terminar.
@@ -118,7 +123,9 @@ reloadConsoleRedirect=Por raz\u00f5es de seguran\u00e7a (redirecionamento entre
 reloadConsoleTimeout=O {0} n\u00e3o responde. Se a Interface HTTP de Gerenciamento foi configurada com SSL, \u00e9 poss\u00edvel que o navegador n\u00e3o confia no certificado SSL e deve ser carregado manualmente <strong><a href=""#"" class=""alert-link"">{1}</a></strong>. Se este n\u00e3o for o caso, veja os logs do navegador e do servidor Widfly.
 reloadError=Falha ao recarregar <strong>{0}</strong>. Causa: {1}.
 reloadSuccess=<strong>{0}</strong> foi recarregado com sucesso.
+removeAliasError=Houve um erro ao tentar remover o alias <strong>{0}</strong> do Key Store <strong>{1}</strong>. Causa: {2}
 removeAliasQuestion=Você deseja realmente remover o alias <strong>{0}</strong> de <strong>{1}</strong> ?
+removeAliasSuccess=O alias <strong>{0}</strong> foi removido com sucesso do Key Store <strong>{1}</strong>.
 removeConfigurationChangesQuestion=Voc\u00ea tem certeza de que quer desativar o log de configura\u00e7\u00f5es para o {0} <strong>{1}</strong>.
 removeConfirmationTitle=Remover {0}
 removeIdentityError=Houve um erro ao tentar remover a identidade <strong>{0}</strong> do <strong>{1}</strong>. Causa: {2}
@@ -129,6 +136,8 @@ resetStatisticsSuccess=As estat\u00edsticas do conector <strong>{0}</strong> for
 resetStatisticsTitle=Limpar estat\u00edsticas
 resourceAdapterColumnFilterDescription=Filtrar por: nome, tipo do adaptador ou se tem suporte a transa\u00e7\u00e3o
 restColumnFilterDescription=Filtrar por: Nome Rest, m\u00e9todo ou tipo de m\u00eddia
+revokeCertificateError=Houve um erro ao revogar o certificado de alias <strong>{0}</strong> do Key Store <strong>{1}</strong>. Causa: {2}
+revokeCertificateSuccess=O certificado identificado pelo alias <strong>{0}</strong> do Key Store <strong>{1}</strong> foi revogado com sucesso.
 roleColumnFilterDescription=Filtrar por: nome da fun\u00e7\u00e3o, tipo da fun\u00e7\u00e3o ou escopo
 rollbackError=Erro ao remover a corre\u00e7\u00e3o, motivo: {0}
 rollbackInProgress=Rollback de <strong>{0}</strong> est\u00e1 em andamento. Por favor, aguarde o rollback terminar.
@@ -147,6 +156,8 @@ testConnectionErrorDomain=O teste de conex\u00e3o requer um servidor em funciona
 unauthorized=Voc\u00EA n\u00E3o tem as permiss\u00F5es para acessar este recurso\!
 undertowListenerProcessingDisabled=A estat\u00edsticas n\u00e3o est\u00e1 habilitada para coletar o tempo de processamento para o conector undertow <strong>{0}</strong> do servidor <strong>{1}</strong>. Voc\u00ea pode habilit\u00e1-lo clicando no bot\u00e3o abaixo. Esta a\u00e7\u00e3o ir\u00e1 alterar o atributo <code>record-request-start-time</code> para <code>true</code> do conector <strong>{0}</strong> do servidor <strong>{1}</strong>.
 unknownError=Erro interno
-updateAccountError=Houve um erro ao atualizar a conta de <strong>{0}</strong>. Causa: {1}
+updateAccountError=Houve um erro ao atualizar a conta de {0}. Causa: {1}
 updateAccountKeyQuestion=Voc\u00ea deseja atualizar a conta de <strong>{0}</strong> ?
 updateAccountSuccess=A conta de <strong>{0}</strong> foi atualizada com sucesso.
+verifyRenewError=Houve um erro ao verificar a renova\u00e7\u00e3o do certificado de alias <strong>{0}</strong> do Key Store <strong>{1}</strong>. Causa: {2}
+verifyRenewSuccess=A checagem de renova\u00e7\u00e3o do certificado identificado pelo alias <strong>{0}</strong> do Key Store <strong>{1}</strong> foi verificado com sucesso.
\ No newline at end of file",2018-08-14T22:43:29Z,94
"@@ -96,7 +96,9 @@
 import org.jboss.hal.client.configuration.subsystem.messaging.Mbui_ConnectionView;
 import org.jboss.hal.client.configuration.subsystem.messaging.Mbui_DestinationView;
 import org.jboss.hal.client.configuration.subsystem.messaging.Mbui_MessagingSubsystemView;
+import org.jboss.hal.client.configuration.subsystem.messaging.Mbui_RemoteActiveMQView;
 import org.jboss.hal.client.configuration.subsystem.messaging.MessagingSubsystemPresenter;
+import org.jboss.hal.client.configuration.subsystem.messaging.RemoteActiveMQPresenter;
 import org.jboss.hal.client.configuration.subsystem.microprofile.Mbui_MicroProfileConfigView;
 import org.jboss.hal.client.configuration.subsystem.microprofile.MicroProfileConfigPresenter;
 import org.jboss.hal.client.configuration.subsystem.modcluster.Mbui_ModclusterView;
@@ -518,6 +520,11 @@ protected void configure() {
                 MailSessionView.class,
                 MailSessionPresenter.MyProxy.class);
 
+        bindPresenter(RemoteActiveMQPresenter.class,
+                RemoteActiveMQPresenter.MyView.class,
+                Mbui_RemoteActiveMQView.class,
+                RemoteActiveMQPresenter.MyProxy.class);
+
         bindPresenter(MessagingSubsystemPresenter.class,
                 MessagingSubsystemPresenter.MyView.class,
                 Mbui_MessagingSubsystemView.class,",2018-10-18T15:29:42Z,44
"@@ -23,6 +23,26 @@ interface AddressTemplates {
 
     String MESSAGING_SUBSYSTEM_ADDRESS = ""/{selected.profile}/subsystem=messaging-activemq"";
     AddressTemplate MESSAGING_SUBSYSTEM_TEMPLATE = AddressTemplate.of(MESSAGING_SUBSYSTEM_ADDRESS);
+    AddressTemplate SOCKET_BINDING_TEMPLATE = AddressTemplate.of(""/socket-binding-group=*/socket-binding=*"");
+
+    String CONNECTOR_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/connector=*"";
+    String IN_VM_CONNECTOR_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/in-vm-connector=*"";
+    String HTTP_CONNECTOR_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/http-connector=*"";
+    String REMOTE_CONNECTOR_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/remote-connector=*"";
+    String DISCOVERY_GROUP_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/discovery-group=*"";
+    String CONNECTION_FACTORY_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/connection-factory=*"";
+    String POOLED_CONNECTION_FACTORY_REMOTE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/pooled-connection-factory=*"";
+    String EXTERNAL_JMS_QUEUE_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/external-jms-queue=*"";
+    String EXTERNAL_JMS_TOPIC_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/external-jms-topic=*"";
+    AddressTemplate CONNECTOR_REMOTE_TEMPLATE = AddressTemplate.of(CONNECTOR_REMOTE_ADDRESS);
+    AddressTemplate IN_VM_CONNECTOR_REMOTE_TEMPLATE = AddressTemplate.of(IN_VM_CONNECTOR_REMOTE_ADDRESS);
+    AddressTemplate HTTP_CONNECTOR_REMOTE_TEMPLATE = AddressTemplate.of(HTTP_CONNECTOR_REMOTE_ADDRESS);
+    AddressTemplate REMOTE_CONNECTOR_REMOTE_TEMPLATE = AddressTemplate.of(REMOTE_CONNECTOR_REMOTE_ADDRESS);
+    AddressTemplate DISCOVERY_GROUP_REMOTE_TEMPLATE = AddressTemplate.of(DISCOVERY_GROUP_REMOTE_ADDRESS);
+    AddressTemplate CONNECTION_FACTORY_REMOTE_TEMPLATE = AddressTemplate.of(CONNECTION_FACTORY_REMOTE_ADDRESS);
+    AddressTemplate POOLED_CONNECTION_FACTORY_REMOTE_TEMPLATE = AddressTemplate.of(POOLED_CONNECTION_FACTORY_REMOTE_ADDRESS);
+    AddressTemplate EXTERNAL_JMS_QUEUE_TEMPLATE = AddressTemplate.of(EXTERNAL_JMS_QUEUE_ADDRESS);
+    AddressTemplate EXTERNAL_JMS_TOPIC_TEMPLATE = AddressTemplate.of(EXTERNAL_JMS_TOPIC_ADDRESS);
 
     String SERVER_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/server=*"";
     String SELECTED_SERVER_ADDRESS = MESSAGING_SUBSYSTEM_ADDRESS + ""/server="" + SELECTION_EXPRESSION;",2018-10-18T15:29:42Z,127
"@@ -49,6 +49,12 @@ public MessagingCategoryColumn(Finder finder,
                         .action(itemActionFactory.view(places.selectedProfile(NameTokens.MESSAGING).build()))
                         .onPreview(new MessagingSubsystemPreview(crud, resources))
                         .build(),
+                new StaticItem.Builder(resources.constants().remoteActiveMQServer())
+                        .id(Ids.MESSAGING_REMOTE_ACTIVEMQ)
+                        .action(itemActionFactory.view(places.selectedProfile(NameTokens.MESSAGING_REMOTE_ACTIVEMQ).build()))
+                        .onPreview(new PreviewContent<>(Names.MESSAGING_REMOTE_ACTIVEMQ,
+                                resources.previews().configurationMessagingRemoteActiveMQ()))
+                        .build(),
                 new StaticItem.Builder(Names.SERVER)
                         .nextColumn(Ids.MESSAGING_SERVER_CONFIGURATION)
                         .onPreview(new PreviewContent<>(Names.SERVER,",2018-10-18T15:29:42Z,128
"@@ -0,0 +1,229 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.messaging;
+
+import java.util.List;
+import java.util.Map;
+
+import javax.inject.Inject;
+
+import com.google.web.bindery.event.shared.EventBus;
+import com.gwtplatform.mvp.client.annotations.NameToken;
+import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
+import com.gwtplatform.mvp.client.proxy.ProxyPlace;
+import org.jboss.hal.ballroom.autocomplete.ReadChildrenAutoComplete;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.core.CrudOperations;
+import org.jboss.hal.core.finder.Finder;
+import org.jboss.hal.core.finder.FinderPath;
+import org.jboss.hal.core.finder.FinderPathFactory;
+import org.jboss.hal.core.mbui.MbuiPresenter;
+import org.jboss.hal.core.mbui.MbuiView;
+import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
+import org.jboss.hal.core.mbui.dialog.NameItem;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.core.mvp.SupportsExpertMode;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.MetadataRegistry;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.meta.token.NameTokens;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Requires;
+
+import static java.util.Arrays.asList;
+import static org.jboss.hal.client.configuration.subsystem.messaging.AddressTemplates.*;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
+
+public class RemoteActiveMQPresenter
+        extends MbuiPresenter<RemoteActiveMQPresenter.MyView, RemoteActiveMQPresenter.MyProxy>
+        implements SupportsExpertMode {
+
+    private MetadataRegistry metadataRegistry;
+    private final Dispatcher dispatcher;
+    private CrudOperations crud;
+    private FinderPathFactory finderPathFactory;
+    protected final StatementContext statementContext;
+    private Resources resources;
+
+    @Inject
+    public RemoteActiveMQPresenter(
+            EventBus eventBus,
+            RemoteActiveMQPresenter.MyView view,
+            RemoteActiveMQPresenter.MyProxy myProxy,
+            Finder finder,
+            MetadataRegistry metadataRegistry,
+            Dispatcher dispatcher,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext,
+            Resources resources) {
+        super(eventBus, view, myProxy, finder);
+        this.metadataRegistry = metadataRegistry;
+        this.dispatcher = dispatcher;
+        this.crud = crud;
+        this.finderPathFactory = finderPathFactory;
+        this.statementContext = statementContext;
+        this.resources = resources;
+    }
+
+    @Override
+    protected void onBind() {
+        super.onBind();
+        getView().setPresenter(this);
+    }
+
+    @Override
+    public ResourceAddress resourceAddress() {
+        return MESSAGING_SUBSYSTEM_TEMPLATE.resolve(statementContext);
+    }
+
+    @Override
+    public FinderPath finderPath() {
+        return finderPathFactory.configurationSubsystemPath(MESSAGING_ACTIVEMQ)
+                .append(Ids.MESSAGING_CATEGORY, Ids.MESSAGING_REMOTE_ACTIVEMQ,
+                        resources.constants().category(), Names.CONNECTIONS);
+    }
+
+    @Override
+    protected void reload() {
+        ResourceAddress address = MESSAGING_SUBSYSTEM_TEMPLATE.resolve(statementContext);
+        crud.readChildren(address, asList(CONNECTOR, IN_VM_CONNECTOR, HTTP_CONNECTOR, REMOTE_CONNECTOR, DISCOVERY_GROUP,
+                CONNECTION_FACTORY, POOLED_CONNECTION_FACTORY, EXTERNAL_JMS_QUEUE, EXTERNAL_JMS_TOPIC),
+                result -> {
+                    int i = 0;
+                    getView().updateConnector(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateInVmConnector(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateHttpConnector(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateRemoteConnector(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateDiscoveryGroup(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateConnectionFactory(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updatePooledConnectionFactory(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateExternalQueue(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateExternalTopic(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                });
+    }
+
+    void addHttpConnector() {
+        Metadata metadata = metadataRegistry.lookup(HTTP_CONNECTOR_REMOTE_TEMPLATE);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(HTTP_CONNECTOR, Ids.ADD), metadata)
+                .unboundFormItem(new NameItem(), 0)
+                .fromRequestProperties()
+                .requiredOnly()
+                .build();
+        form.getFormItem(SOCKET_BINDING).registerSuggestHandler(
+                new ReadChildrenAutoComplete(dispatcher, statementContext,
+                        AddressTemplate.of(""/socket-binding-group=*/socket-binding=*"")));
+
+        new AddResourceDialog(Names.HTTP_CONNECTOR, form, (name, model) -> {
+            crud.add(Names.HTTP_CONNECTOR, name, HTTP_CONNECTOR_REMOTE_TEMPLATE, model, (n, a) -> reload());
+        }).show();
+    }
+
+    void addRemoteConnector() {
+        Metadata metadata = metadataRegistry.lookup(REMOTE_CONNECTOR_REMOTE_TEMPLATE);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(REMOTE_CONNECTOR, Ids.ADD), metadata)
+                .unboundFormItem(new NameItem(), 0)
+                .fromRequestProperties()
+                .requiredOnly()
+                .build();
+        form.getFormItem(SOCKET_BINDING).registerSuggestHandler(
+                new ReadChildrenAutoComplete(dispatcher, statementContext,
+                        AddressTemplate.of(""/socket-binding-group=*/socket-binding=*"")));
+
+        new AddResourceDialog(Names.REMOTE_CONNECTOR, form, (name, model) -> {
+            crud.add(Names.REMOTE_CONNECTOR, name, REMOTE_CONNECTOR_REMOTE_TEMPLATE, model, (n, a) -> reload());
+        }).show();
+    }
+
+    void addConnectionFactory(RemoteActiveMQSubResource ssr) {
+        Metadata metadata = metadataRegistry.lookup(ssr.template);
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.build(ssr.baseId, Ids.ADD), metadata)
+                .unboundFormItem(new NameItem(), 0)
+                .fromRequestProperties()
+                .include(ENTRIES, DISCOVERY_GROUP, CONNECTORS)
+                .unsorted()
+                .build();
+
+        List<AddressTemplate> connectors = asList(CONNECTOR_REMOTE_TEMPLATE, IN_VM_CONNECTOR_REMOTE_TEMPLATE,
+                HTTP_CONNECTOR_REMOTE_TEMPLATE, REMOTE_CONNECTOR_REMOTE_TEMPLATE);
+
+        form.getFormItem(CONNECTORS).registerSuggestHandler(
+                new ReadChildrenAutoComplete(dispatcher, statementContext, connectors));
+        form.getFormItem(DISCOVERY_GROUP).registerSuggestHandler(
+                new ReadChildrenAutoComplete(dispatcher, statementContext, DISCOVERY_GROUP_REMOTE_TEMPLATE));
+
+        new AddResourceDialog(resources.messages().addResourceTitle(ssr.type), form, (name, model) -> {
+            ResourceAddress address = ssr.template.resolve(statementContext, name);
+            crud.add(ssr.type, name, address, model, (n, a) -> reload());
+        }).show();
+    }
+
+    ResourceAddress pooledConnectionFactoryAddress(String resource) {
+        return resource != null ? POOLED_CONNECTION_FACTORY_REMOTE_TEMPLATE.resolve(statementContext, resource) : null;
+    }
+
+
+    void add(RemoteActiveMQSubResource ssr) {
+        ssr.add(metadataRegistry, statementContext, crud, resources, (n, a) -> reload());
+    }
+
+    void save(RemoteActiveMQSubResource ssr, Form<NamedNode> form, Map<String, Object> changedValues) {
+        ssr.save(form, changedValues, metadataRegistry, statementContext, crud, this::reload);
+    }
+
+    void reset(RemoteActiveMQSubResource ssr, Form<NamedNode> form) {
+        ssr.reset(form, metadataRegistry, statementContext, crud, new Form.FinishReset<NamedNode>(form) {
+            @Override
+            public void afterReset(final Form<NamedNode> form) {
+                reload();
+            }
+        });
+    }
+
+    void remove(RemoteActiveMQSubResource ssr, NamedNode item) {
+        ssr.remove(item, statementContext, crud, this::reload);
+    }
+    // @formatter:off
+    @ProxyCodeSplit
+    @Requires({CONNECTOR_REMOTE_ADDRESS, IN_VM_CONNECTOR_REMOTE_ADDRESS, HTTP_CONNECTOR_REMOTE_ADDRESS,
+            REMOTE_CONNECTOR_REMOTE_ADDRESS, DISCOVERY_GROUP_REMOTE_ADDRESS, CONNECTION_FACTORY_REMOTE_ADDRESS,
+            POOLED_CONNECTION_FACTORY_REMOTE_ADDRESS, EXTERNAL_JMS_QUEUE_ADDRESS, EXTERNAL_JMS_TOPIC_ADDRESS
+    })
+    @NameToken(NameTokens.MESSAGING_REMOTE_ACTIVEMQ)
+    public interface MyProxy extends ProxyPlace<RemoteActiveMQPresenter> {
+    }
+
+    public interface MyView extends MbuiView<RemoteActiveMQPresenter> {
+        void updateConnector(List<NamedNode> connectors);
+        void updateInVmConnector(List<NamedNode> inVmConnectors);
+        void updateHttpConnector(List<NamedNode> httpConnectors);
+        void updateRemoteConnector(List<NamedNode> remoteConnectors);
+        void updateDiscoveryGroup(List<NamedNode> connectorServices);
+        void updateConnectionFactory(List<NamedNode> connectionFactories);
+        void updatePooledConnectionFactory(List<NamedNode> pooledConnectionFactories);
+        void updateExternalQueue(List<NamedNode> nodes);
+        void updateExternalTopic(List<NamedNode> nodes);
+    }
+    // @formatter:on
+}",2018-10-18T15:29:42Z,129
"@@ -0,0 +1,111 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.messaging;
+
+import java.util.Map;
+
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.core.CrudOperations;
+import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
+import org.jboss.hal.dmr.ModelDescriptionConstants;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.MetadataRegistry;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Callback;
+
+import static org.jboss.hal.dmr.ModelDescriptionConstants.EXTERNAL_JMS_QUEUE;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.EXTERNAL_JMS_TOPIC;
+
+enum RemoteActiveMQSubResource {
+
+    CONNECTION_FACTORY(Ids.MESSAGING_CONNECTION_FACTORY, Names.CONNECTION_FACTORY,
+            ModelDescriptionConstants.CONNECTION_FACTORY, AddressTemplates.CONNECTION_FACTORY_REMOTE_TEMPLATE),
+
+    CONNECTOR(Ids.MESSAGING_CONNECTOR, Names.GENERIC_CONNECTOR,
+            ModelDescriptionConstants.CONNECTOR, AddressTemplates.CONNECTOR_REMOTE_TEMPLATE),
+
+    DISCOVERY_GROUP(Ids.MESSAGING_DISCOVERY_GROUP, Names.DISCOVERY_GROUP,
+            ModelDescriptionConstants.DISCOVERY_GROUP, AddressTemplates.DISCOVERY_GROUP_REMOTE_TEMPLATE),
+
+    EXTERNAL_QUEUE(EXTERNAL_JMS_QUEUE, Names.EXTERNAL_JMS_QUEUE,
+            EXTERNAL_JMS_QUEUE, AddressTemplates.EXTERNAL_JMS_QUEUE_TEMPLATE),
+
+    EXTERNAL_TOPIC(EXTERNAL_JMS_TOPIC, Names.EXTERNAL_JMS_TOPIC,
+            EXTERNAL_JMS_TOPIC, AddressTemplates.EXTERNAL_JMS_TOPIC_TEMPLATE),
+
+    HTTP_CONNECTOR(Ids.MESSAGING_HTTP_CONNECTOR, Names.HTTP_CONNECTOR,
+            ModelDescriptionConstants.HTTP_CONNECTOR, AddressTemplates.HTTP_CONNECTOR_REMOTE_TEMPLATE),
+
+    IN_VM_CONNECTOR(Ids.MESSAGING_IN_VM_CONNECTOR, Names.IN_VM_CONNECTOR,
+            ModelDescriptionConstants.IN_VM_CONNECTOR, AddressTemplates.IN_VM_CONNECTOR_REMOTE_TEMPLATE),
+
+    POOLED_CONNECTION_FACTORY(Ids.MESSAGING_POOLED_CONNECTION_FACTORY, Names.POOLED_CONNECTION_FACTORY,
+            ModelDescriptionConstants.POOLED_CONNECTION_FACTORY, AddressTemplates.POOLED_CONNECTION_FACTORY_REMOTE_TEMPLATE),
+
+    REMOTE_CONNECTOR(Ids.MESSAGING_REMOTE_CONNECTOR, Names.REMOTE_CONNECTOR,
+            ModelDescriptionConstants.REMOTE_CONNECTOR, AddressTemplates.REMOTE_CONNECTOR_REMOTE_TEMPLATE);
+
+
+    final String baseId;
+    final String type;
+    final String resource;
+    final AddressTemplate template;
+
+    RemoteActiveMQSubResource(final String baseId, final String type, final String resource, final AddressTemplate template) {
+        this.baseId = baseId;
+        this.type = type;
+        this.resource = resource;
+        this.template = template;
+    }
+
+    void add(MetadataRegistry metadataRegistry, StatementContext statementContext,
+            CrudOperations crud, Resources resources, CrudOperations.AddCallback callback) {
+        Metadata metadata = metadataRegistry.lookup(template);
+        new AddResourceDialog(Ids.build(baseId, Ids.ADD), resources.messages().addResourceTitle(type), metadata,
+                (name, model) -> {
+                    ResourceAddress address = template.resolve(statementContext, name);
+                    crud.add(type, name, address, model, callback);
+                }).show();
+    }
+
+    void save(Form<NamedNode> form, Map<String, Object> changedValues, MetadataRegistry metadataRegistry,
+            StatementContext statementContext, CrudOperations crud, Callback callback) {
+        String name = form.getModel().getName();
+        ResourceAddress address = template.resolve(statementContext, name);
+        Metadata metadata = metadataRegistry.lookup(template);
+        crud.save(type, name, address, changedValues, metadata, callback);
+    }
+
+    void reset(Form<NamedNode> form, MetadataRegistry metadataRegistry, StatementContext statementContext,
+            CrudOperations crud, Callback callback) {
+        String name = form.getModel().getName();
+        ResourceAddress address = template.resolve(statementContext, name);
+        Metadata metadata = metadataRegistry.lookup(template);
+        crud.reset(type, name, address, form, metadata, callback);
+    }
+
+    void remove(NamedNode item, StatementContext statementContext, CrudOperations crud, Callback callback) {
+        String name = item.getName();
+        ResourceAddress address = template.resolve(statementContext, name);
+        crud.remove(type, name, address, callback);
+    }
+}",2018-10-18T15:29:42Z,130
"@@ -0,0 +1,250 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.messaging;
+
+import java.util.List;
+
+import javax.annotation.PostConstruct;
+
+import elemental2.dom.HTMLElement;
+import org.jboss.hal.ballroom.Tabs;
+import org.jboss.hal.ballroom.VerticalNavigation;
+import org.jboss.hal.ballroom.autocomplete.ReadChildrenAutoComplete;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.table.Scope;
+import org.jboss.hal.ballroom.table.Table;
+import org.jboss.hal.core.elytron.CredentialReference;
+import org.jboss.hal.core.mbui.MbuiContext;
+import org.jboss.hal.core.mbui.MbuiViewImpl;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.core.mbui.form.RequireAtLeastOneAttributeValidation;
+import org.jboss.hal.core.mbui.table.ModelNodeTable;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.security.Constraint;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.spi.MbuiElement;
+import org.jboss.hal.spi.MbuiView;
+
+import static java.util.Arrays.asList;
+import static org.jboss.gwt.elemento.core.Elements.h;
+import static org.jboss.gwt.elemento.core.Elements.p;
+import static org.jboss.gwt.elemento.core.Elements.section;
+import static org.jboss.hal.client.configuration.subsystem.messaging.AddressTemplates.*;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafeGet;
+import static org.jboss.hal.resources.CSS.pfIcon;
+import static org.jboss.hal.resources.Ids.MESSAGING_REMOTE_ACTIVEMQ;
+
+@MbuiView
+public abstract class RemoteActiveMQView extends MbuiViewImpl<RemoteActiveMQPresenter>
+        implements RemoteActiveMQPresenter.MyView {
+
+    public static RemoteActiveMQView create(MbuiContext mbuiContext) {
+        return new Mbui_RemoteActiveMQView(mbuiContext);
+    }
+
+    @MbuiElement(""msg-remote-connection-vertical-navigation"") VerticalNavigation navigation;
+    @MbuiElement(""msg-remote-connector-table"") Table<NamedNode> connectorTable;
+    @MbuiElement(""msg-remote-connector-form"") Form<NamedNode> connectorForm;
+    @MbuiElement(""msg-remote-in-vm-connector-table"") Table<NamedNode> inVmConnectorTable;
+    @MbuiElement(""msg-remote-in-vm-connector-form"") Form<NamedNode> inVmConnectorForm;
+    @MbuiElement(""msg-remote-http-connector-table"") Table<NamedNode> httpConnectorTable;
+    @MbuiElement(""msg-remote-http-connector-form"") Form<NamedNode> httpConnectorForm;
+    @MbuiElement(""msg-remote-remote-connector-table"") Table<NamedNode> remoteConnectorTable;
+    @MbuiElement(""msg-remote-remote-connector-form"") Form<NamedNode> remoteConnectorForm;
+    @MbuiElement(""msg-remote-discovery-group-table"") Table<NamedNode> discoveryGroupTable;
+    @MbuiElement(""msg-remote-discovery-group-form"") Form<NamedNode> discoveryGroupForm;
+    @MbuiElement(""msg-remote-connection-factory-table"") Table<NamedNode> connectionFactoryTable;
+    @MbuiElement(""msg-remote-connection-factory-form"") Form<NamedNode> connectionFactoryForm;
+    @MbuiElement(""msg-remote-external-queue-table"") Table<NamedNode> externalQueueTable;
+    @MbuiElement(""msg-remote-external-queue-form"") Form<NamedNode> externalQueueForm;
+    @MbuiElement(""msg-remote-external-topic-table"") Table<NamedNode> externalTopicTable;
+    @MbuiElement(""msg-remote-external-topic-form"") Form<NamedNode> externalTopicForm;
+    private Table<NamedNode> pooledConnectionFactoryTable;
+    private Form<NamedNode> pooledConnectionFactoryForm;
+    private CredentialReference cr;
+    private Form<ModelNode> crForm;
+
+    RemoteActiveMQView(MbuiContext mbuiContext) {
+        super(mbuiContext);
+        cr = new CredentialReference(mbuiContext.eventBus(), mbuiContext.dispatcher(), mbuiContext.ca(),
+                mbuiContext.resources());
+    }
+
+    @PostConstruct
+    void init() {
+        Metadata metadata = mbuiContext.metadataRegistry().lookup(POOLED_CONNECTION_FACTORY_REMOTE_TEMPLATE);
+        crForm = cr.form(Ids.MESSAGING_REMOTE_ACTIVEMQ, metadata, CREDENTIAL_REFERENCE, PASSWORD,
+                () -> pooledConnectionFactoryForm.<String>getFormItem(PASSWORD).getValue(),
+                () -> presenter.pooledConnectionFactoryAddress(
+                        pooledConnectionFactoryTable.hasSelection() ? pooledConnectionFactoryTable.selectedRow()
+                                .getName() : null),
+                () -> presenter.reload());
+        crForm.addFormValidation(
+                new RequireAtLeastOneAttributeValidation<>(asList(STORE, CLEAR_TEXT), mbuiContext.resources()));
+
+        pooledConnectionFactoryTable = new ModelNodeTable.Builder<NamedNode>(
+                Ids.build(MESSAGING_REMOTE_ACTIVEMQ, POOLED_CONNECTION_FACTORY, Ids.TABLE), metadata)
+                .button(mbuiContext.resources().constants().add(),
+                        table -> presenter.addConnectionFactory(RemoteActiveMQSubResource.POOLED_CONNECTION_FACTORY),
+                        Constraint.executable(POOLED_CONNECTION_FACTORY_TEMPLATE, ADD))
+                .button(mbuiContext.resources().constants().remove(),
+                        table -> presenter.remove(RemoteActiveMQSubResource.POOLED_CONNECTION_FACTORY, table.selectedRow()),
+                        Scope.SELECTED,
+                        Constraint.executable(POOLED_CONNECTION_FACTORY_TEMPLATE, REMOVE))
+                .column(NAME, (cell, type, row, meta) -> row.getName())
+                .build();
+
+        pooledConnectionFactoryForm = new ModelNodeForm.Builder<NamedNode>(
+                Ids.build(Ids.MESSAGING_POOLED_CONNECTION_FACTORY, Ids.FORM), metadata)
+                .onSave((form, changedValues) -> presenter
+                        .save(RemoteActiveMQSubResource.POOLED_CONNECTION_FACTORY, form, changedValues))
+                .prepareReset(form -> presenter.reset(RemoteActiveMQSubResource.POOLED_CONNECTION_FACTORY, form))
+                .build();
+        pooledConnectionFactoryForm.addFormValidation(
+                new CredentialReference.AlternativeValidation<>(PASSWORD, () -> crForm.getModel(),
+                        mbuiContext.resources()));
+
+        Tabs tabs = new Tabs(Ids.build(Ids.MESSAGING_REMOTE_ACTIVEMQ, POOLED_CONNECTION_FACTORY, Ids.TAB_CONTAINER));
+        tabs.add(Ids.build(Ids.MESSAGING_REMOTE_ACTIVEMQ, POOLED_CONNECTION_FACTORY, ATTRIBUTES, Ids.TAB),
+                mbuiContext.resources().constants().attributes(), pooledConnectionFactoryForm.asElement());
+        tabs.add(Ids.build(Ids.MESSAGING_REMOTE_ACTIVEMQ, POOLED_CONNECTION_FACTORY, CREDENTIAL_REFERENCE, Ids.TAB),
+                Names.CREDENTIAL_REFERENCE, crForm.asElement());
+
+        HTMLElement htmlSection = section()
+                .add(h(1).textContent(Names.POOLED_CONNECTION_FACTORY))
+                .add(p().textContent(metadata.getDescription().getDescription()))
+                .add(pooledConnectionFactoryTable)
+                .add(tabs)
+                .asElement();
+
+        registerAttachable(pooledConnectionFactoryTable, pooledConnectionFactoryForm, crForm);
+
+        String primId = Ids.build(MESSAGING_REMOTE_ACTIVEMQ, POOLED_CONNECTION_FACTORY, Ids.ITEM);
+        navigation.insertPrimary(primId, null, Names.POOLED_CONNECTION_FACTORY, pfIcon(""replicator""), htmlSection);
+
+    }
+
+    @Override
+    public void attach() {
+        super.attach();
+
+        pooledConnectionFactoryTable.bindForm(pooledConnectionFactoryForm);
+        pooledConnectionFactoryTable.onSelectionChange(t -> {
+            if (t.hasSelection()) {
+                crForm.view(failSafeGet(t.selectedRow(), CREDENTIAL_REFERENCE));
+            }
+        });
+    }
+
+    @Override
+    public void setPresenter(RemoteActiveMQPresenter presenter) {
+        super.setPresenter(presenter);
+
+        // register the suggestion handlers here rather than in a @PostConstruct method
+        // they need a valid presenter reference!
+        List<AddressTemplate> connectors = asList(CONNECTOR_REMOTE_TEMPLATE, IN_VM_CONNECTOR_REMOTE_TEMPLATE,
+                HTTP_CONNECTOR_REMOTE_TEMPLATE, REMOTE_CONNECTOR_REMOTE_TEMPLATE);
+
+        connectionFactoryForm.getFormItem(CONNECTORS).registerSuggestHandler(
+                new ReadChildrenAutoComplete(mbuiContext.dispatcher(), presenter.statementContext, connectors));
+        connectionFactoryForm.getFormItem(DISCOVERY_GROUP).registerSuggestHandler(
+                new ReadChildrenAutoComplete(mbuiContext.dispatcher(), presenter.statementContext,
+                        DISCOVERY_GROUP_REMOTE_TEMPLATE));
+
+        pooledConnectionFactoryForm.getFormItem(CONNECTORS).registerSuggestHandler(
+                new ReadChildrenAutoComplete(mbuiContext.dispatcher(), presenter.statementContext, connectors));
+        pooledConnectionFactoryForm.getFormItem(DISCOVERY_GROUP).registerSuggestHandler(
+                new ReadChildrenAutoComplete(mbuiContext.dispatcher(), presenter.statementContext,
+                        DISCOVERY_GROUP_REMOTE_TEMPLATE));
+
+
+        connectorForm.getFormItem(SOCKET_BINDING).registerSuggestHandler(new ReadChildrenAutoComplete(
+                mbuiContext.dispatcher(), statementContext(), SOCKET_BINDING_TEMPLATE));
+
+        discoveryGroupForm.getFormItem(SOCKET_BINDING).registerSuggestHandler(new ReadChildrenAutoComplete(
+                mbuiContext.dispatcher(), statementContext(), SOCKET_BINDING_TEMPLATE));
+
+        remoteConnectorForm.getFormItem(SOCKET_BINDING).registerSuggestHandler(new ReadChildrenAutoComplete(
+                mbuiContext.dispatcher(), statementContext(), SOCKET_BINDING_TEMPLATE));
+
+        httpConnectorForm.getFormItem(SOCKET_BINDING).registerSuggestHandler(new ReadChildrenAutoComplete(
+                mbuiContext.dispatcher(), statementContext(), SOCKET_BINDING_TEMPLATE));
+    }
+
+    @Override
+    public void updateConnector(List<NamedNode> connectors) {
+        connectorForm.clear();
+        connectorTable.update(connectors);
+        navigation.updateBadge(""msg-remote-connector-item"", connectors.size());
+    }
+
+    @Override
+    public void updateInVmConnector(List<NamedNode> inVmConnectors) {
+        inVmConnectorForm.clear();
+        inVmConnectorTable.update(inVmConnectors);
+        navigation.updateBadge(""msg-remote-in-vm-connector-item"", inVmConnectors.size());
+    }
+
+    @Override
+    public void updateHttpConnector(List<NamedNode> httpConnectors) {
+        httpConnectorForm.clear();
+        httpConnectorTable.update(httpConnectors);
+        navigation.updateBadge(""msg-remote-http-connector-item"", httpConnectors.size());
+    }
+
+    @Override
+    public void updateRemoteConnector(List<NamedNode> remoteConnectors) {
+        remoteConnectorForm.clear();
+        remoteConnectorTable.update(remoteConnectors);
+        navigation.updateBadge(""msg-remote-remote-connector-item"", remoteConnectors.size());
+    }
+
+    @Override
+    public void updateDiscoveryGroup(List<NamedNode> nodes) {
+        discoveryGroupForm.clear();
+        discoveryGroupTable.update(nodes);
+    }
+
+    @Override
+    public void updateConnectionFactory(List<NamedNode> connectionFactories) {
+        connectionFactoryForm.clear();
+        connectionFactoryTable.update(connectionFactories);
+    }
+
+    @Override
+    public void updatePooledConnectionFactory(List<NamedNode> pooledConnectionFactories) {
+        crForm.clear();
+        pooledConnectionFactoryForm.clear();
+        pooledConnectionFactoryTable.update(pooledConnectionFactories);
+    }
+
+    @Override
+    public void updateExternalQueue(List<NamedNode> nodes) {
+        externalQueueForm.clear();
+        externalQueueTable.update(nodes);
+    }
+
+    @Override
+    public void updateExternalTopic(List<NamedNode> nodes) {
+        externalTopicForm.clear();
+        externalTopicTable.update(nodes);
+    }
+}",2018-10-18T15:29:42Z,131
"@@ -0,0 +1,207 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<?xml-model href=""https://raw.githubusercontent.com/hal/hal.next/develop/spi/src/main/resources/org/jboss/hal/spi/MbuiView.rng"" schematypens=""http://relaxng.org/ns/structure/1.0""?>
+<!--
+  ~ Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<view>
+    <vertical-navigation id=""msg-remote-connection-vertical-navigation"">
+
+        <item id=""msg-remote-connector-group-item"" title=""Connector"" icon=""fa fa-link"">
+            <sub-item id=""msg-remote-connector-item"" title=""Generic"">
+                <metadata address=""/{selected.profile}/subsystem=messaging-activemq/connector=*"">
+                    <h1>Generic Connector</h1>
+                    <p>${metadata.getDescription().getDescription()}</p>
+                    <table id=""msg-remote-connector-table"" title=""Generic Connector"" form-ref=""msg-remote-connector-form"">
+                        <actions>
+                            <action title=""${mbuiContext.resources().constants().add()}""
+                                    handler=""${presenter.add(RemoteActiveMQSubResource.CONNECTOR)}"" constraint=""add""/>
+                            <action title=""${mbuiContext.resources().constants().remove()}""
+                                    handler=""${presenter.remove(RemoteActiveMQSubResource.CONNECTOR, table.selectedRow())}""
+                                    scope=""selected"" constraint=""remove""/>
+                        </actions>
+                        <columns>
+                            <column name=""name"" value=""${row.getName()}""/>
+                        </columns>
+                    </table>
+                    <form id=""msg-remote-connector-form"" title=""Generic Connector""
+                          on-save=""${presenter.save(RemoteActiveMQSubResource.CONNECTOR, form, changedValues)}""
+                          prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.CONNECTOR, form)}""/>
+
+                </metadata>
+            </sub-item>
+            <sub-item id=""msg-remote-in-vm-connector-item"" title=""In VM"">
+                <metadata address=""/{selected.profile}/subsystem=messaging-activemq/in-vm-connector=*"">
+                    <h1>In VM Connector</h1>
+                    <p>${metadata.getDescription().getDescription()}</p>
+                    <table id=""msg-remote-in-vm-connector-table"" title=""In VM Connector""
+                           form-ref=""msg-remote-in-vm-connector-form"">
+                        <actions>
+                            <action title=""${mbuiContext.resources().constants().add()}""
+                                    handler=""${presenter.add(RemoteActiveMQSubResource.IN_VM_CONNECTOR)}"" constraint=""add""/>
+                            <action title=""${mbuiContext.resources().constants().remove()}""
+                                    handler=""${presenter.remove(RemoteActiveMQSubResource.IN_VM_CONNECTOR, table.selectedRow())}""
+                                    scope=""selected"" constraint=""remove""/>
+                        </actions>
+                        <columns>
+                            <column name=""name"" value=""${row.getName()}""/>
+                            <column name=""server-id""/>
+                        </columns>
+                    </table>
+                    <form id=""msg-remote-in-vm-connector-form"" title=""In VM Connector""
+                          on-save=""${presenter.save(RemoteActiveMQSubResource.IN_VM_CONNECTOR, form, changedValues)}""
+                          prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.IN_VM_CONNECTOR, form)}""/>
+                </metadata>
+            </sub-item>
+            <sub-item id=""msg-remote-http-connector-item"" title=""HTTP"">
+                <metadata address=""/{selected.profile}/subsystem=messaging-activemq/http-connector=*"">
+                    <h1>HTTP Connector</h1>
+                    <p>${metadata.getDescription().getDescription()}</p>
+                    <table id=""msg-remote-http-connector-table"" title=""HTTP Connector""
+                           form-ref=""msg-remote-http-connector-form"">
+                        <actions>
+                            <action title=""${mbuiContext.resources().constants().add()}""
+                                    handler=""${presenter.addHttpConnector()}"" constraint=""add""/>
+                            <action title=""${mbuiContext.resources().constants().remove()}""
+                                    handler=""${presenter.remove(RemoteActiveMQSubResource.HTTP_CONNECTOR, table.selectedRow())}""
+                                    scope=""selected"" constraint=""remove""/>
+                        </actions>
+                        <columns>
+                            <column name=""name"" value=""${row.getName()}""/>
+                        </columns>
+                    </table>
+                    <form id=""msg-remote-http-connector-form"" title=""HTTP Connector""
+                          on-save=""${presenter.save(RemoteActiveMQSubResource.HTTP_CONNECTOR, form, changedValues)}""
+                          prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.HTTP_CONNECTOR, form)}""/>
+                </metadata>
+            </sub-item>
+            <sub-item id=""msg-remote-remote-connector-item"" title=""Remote"">
+                <metadata address=""/{selected.profile}/subsystem=messaging-activemq/remote-connector=*"">
+                    <h1>Remote Connector</h1>
+                    <p>${metadata.getDescription().getDescription()}</p>
+                    <table id=""msg-remote-remote-connector-table"" title=""Remote Connector""
+                           form-ref=""msg-remote-remote-connector-form"">
+                        <actions>
+                            <action title=""${mbuiContext.resources().constants().add()}""
+                                    handler=""${presenter.addRemoteConnector()}""
+                                    constraint=""add""/>
+                            <action title=""${mbuiContext.resources().constants().remove()}""
+                                    handler=""${presenter.remove(RemoteActiveMQSubResource.REMOTE_CONNECTOR, table.selectedRow())}""
+                                    scope=""selected"" constraint=""remove""/>
+                        </actions>
+                        <columns>
+                            <column name=""name"" value=""${row.getName()}""/>
+                        </columns>
+                    </table>
+                    <form id=""msg-remote-remote-connector-form"" title=""Remote Connector""
+                          on-save=""${presenter.save(RemoteActiveMQSubResource.REMOTE_CONNECTOR, form, changedValues)}""
+                          prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.REMOTE_CONNECTOR, form)}"" />
+                </metadata>
+            </sub-item>
+        </item>
+
+        <item id=""msg-remote-discovery-group-item"" title=""Discovery Group"" icon=""pficon pficon-service"">
+            <metadata address=""/{selected.profile}/subsystem=messaging-activemq/discovery-group=*"">
+                <h1>Discovery Group</h1>
+                <p>${metadata.getDescription().getDescription()}</p>
+                <table id=""msg-remote-discovery-group-table"" title=""Discovery Group""
+                       form-ref=""msg-remote-discovery-group-form"">
+                    <actions>
+                        <action title=""${mbuiContext.resources().constants().add()}""
+                                handler=""${presenter.add(RemoteActiveMQSubResource.DISCOVERY_GROUP)}"" constraint=""add""/>
+                        <action title=""${mbuiContext.resources().constants().remove()}""
+                                handler=""${presenter.remove(RemoteActiveMQSubResource.DISCOVERY_GROUP, table.selectedRow())}""
+                                scope=""selected"" constraint=""remove""/>
+                    </actions>
+                    <columns>
+                        <column name=""name"" value=""${row.getName()}""/>
+                    </columns>
+                </table>
+                <form id=""msg-remote-discovery-group-form"" title=""Discovery Group""
+                      on-save=""${presenter.save(RemoteActiveMQSubResource.DISCOVERY_GROUP, form, changedValues)}""
+                      prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.DISCOVERY_GROUP, form)}"" />
+            </metadata>
+        </item>
+
+        <item id=""msg-remote-connection-factory-item"" title=""Connection Factory"" icon=""fa fa-cubes"">
+            <metadata address=""/{selected.profile}/subsystem=messaging-activemq/connection-factory=*"">
+                <h1>Connection Factory</h1>
+                <p>${metadata.getDescription().getDescription()}</p>
+                <table id=""msg-remote-connection-factory-table"" title=""Connection Factory""
+                       form-ref=""msg-remote-connection-factory-form"">
+                    <actions>
+                        <action title=""${mbuiContext.resources().constants().add()}""
+                                handler=""${presenter.addConnectionFactory(RemoteActiveMQSubResource.CONNECTION_FACTORY)}"" constraint=""add""/>
+                        <action title=""${mbuiContext.resources().constants().remove()}""
+                                handler=""${presenter.remove(RemoteActiveMQSubResource.CONNECTION_FACTORY, table.selectedRow())}""
+                                scope=""selected"" constraint=""remove""/>
+                    </actions>
+                    <columns>
+                        <column name=""name"" value=""${row.getName()}""/>
+                    </columns>
+                </table>
+                <form id=""msg-remote-connection-factory-form"" title=""Connection Factory""
+                      on-save=""${presenter.save(RemoteActiveMQSubResource.CONNECTION_FACTORY, form, changedValues)}""
+                      prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.CONNECTION_FACTORY, form)}""/>
+            </metadata>
+        </item>
+
+        <item id=""msg-remote-external-queue-item"" title=""External JMS Queue"" icon=""fa fa-long-arrow-right"">
+            <metadata address=""/{selected.profile}/subsystem=messaging-activemq/external-jms-queue=*"">
+                <h1>External JMS Queue</h1>
+                <p>${metadata.getDescription().getDescription()}</p>
+                <table id=""msg-remote-external-queue-table"" title=""External JMS Queue""
+                       form-ref=""msg-remote-external-queue-form"">
+                    <actions>
+                        <action title=""${mbuiContext.resources().constants().add()}""
+                                handler=""${presenter.add(RemoteActiveMQSubResource.EXTERNAL_QUEUE)}"" constraint=""add""/>
+                        <action title=""${mbuiContext.resources().constants().remove()}""
+                                handler=""${presenter.remove(RemoteActiveMQSubResource.EXTERNAL_QUEUE, table.selectedRow())}""
+                                scope=""selected"" constraint=""remove""/>
+                    </actions>
+                    <columns>
+                        <column name=""name"" value=""${row.getName()}""/>
+                    </columns>
+                </table>
+                <form id=""msg-remote-external-queue-form"" title=""External JMS Queue""
+                      on-save=""${presenter.save(RemoteActiveMQSubResource.EXTERNAL_QUEUE, form, changedValues)}""
+                      prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.EXTERNAL_QUEUE, form)}""/>
+            </metadata>
+        </item>
+
+        <item id=""msg-remote-external-topic-item"" title=""External JMS Topic"" icon=""fa fa-arrows"">
+            <metadata address=""/{selected.profile}/subsystem=messaging-activemq/external-jms-topic=*"">
+                <h1>External JMS Topic</h1>
+                <p>${metadata.getDescription().getDescription()}</p>
+                <table id=""msg-remote-external-topic-table"" title=""External JMS Topic""
+                       form-ref=""msg-remote-external-topic-form"">
+                    <actions>
+                        <action title=""${mbuiContext.resources().constants().add()}""
+                                handler=""${presenter.add(RemoteActiveMQSubResource.EXTERNAL_TOPIC)}"" constraint=""add""/>
+                        <action title=""${mbuiContext.resources().constants().remove()}""
+                                handler=""${presenter.remove(RemoteActiveMQSubResource.EXTERNAL_TOPIC, table.selectedRow())}""
+                                scope=""selected"" constraint=""remove""/>
+                    </actions>
+                    <columns>
+                        <column name=""name"" value=""${row.getName()}""/>
+                    </columns>
+                </table>
+                <form id=""msg-remote-external-topic-form"" title=""External JMS Topic""
+                      on-save=""${presenter.save(RemoteActiveMQSubResource.EXTERNAL_TOPIC, form, changedValues)}""
+                      prepare-reset=""${presenter.reset(RemoteActiveMQSubResource.EXTERNAL_TOPIC, form)}""/>
+            </metadata>
+        </item>
+
+    </vertical-navigation>
+</view>
\ No newline at end of file",2018-10-18T15:29:42Z,132
"@@ -80,7 +80,7 @@ public void attach() {
             } else {
                 if (!Strings.isNullOrEmpty(stringValue)) {
                     try {
-                        Long value = Long.parseLong(stringValue);
+                        Long value = Long.parseLong(stringValue.trim());
                         modifyValue(value);
                         logger.debug(""modified value to {}"", value);
                     } catch (NumberFormatException ignored) {
@@ -177,10 +177,12 @@ class NumberValidation implements FormItemValidation<Long> {
 
         @Override
         public ValidationResult validate(Long value) {
-            if (!isExpressionValue() && !isEmpty()) {
+            // use the inputElement.value instead of isEmpty because the isEmpty evaluates the getValue() method
+            // the attach method already bind numbers only values, so this validation would always returns numbers only
+            if (!isExpressionValue() && inputElement.value != null) {
                 try {
                     //noinspection ResultOfMethodCallIgnored
-                    Long.parseLong(inputElement.value);
+                    Long.parseLong(inputElement.value.trim());
                     return ValidationResult.OK;
                 } catch (NumberFormatException e) {
                     return ValidationResult.invalid(CONSTANTS.notANumber());",2018-10-18T15:29:42Z,133
"@@ -294,6 +294,8 @@ public interface ModelDescriptionConstants {
     String EXPRESSION = ""expression"";
     String EXPRESSIONS_ALLOWED = ""expressions-allowed"";
     String EXTENSION_POINT = ""extension-point"";
+    String EXTERNAL_JMS_QUEUE = ""external-jms-queue"";
+    String EXTERNAL_JMS_TOPIC = ""external-jms-topic"";
     String FAILED = ""failed"";
     String FAILED_OPERATION = ""failed-operation"";
     String FAILED_SERVICES = ""failed-services"";",2018-10-18T15:29:42Z,109
"@@ -79,6 +79,7 @@ public interface NameTokens {
     String MANAGEMENT_INTERFACE = ""management-interface"";
     String MANAGEMENT_OPERATIONS = ""management-operations"";
     String MESSAGING = ""messaging"";
+    String MESSAGING_REMOTE_ACTIVEMQ = ""msg-remote-activemq"";
     String MESSAGING_SERVER = ""messaging-server"";
     String MESSAGING_SERVER_CONNECTION = ""messaging-server-connection"";
     String MESSAGING_SERVER_CLUSTERING = ""messaging-server-clustering"";",2018-10-18T15:29:42Z,46
"@@ -462,6 +462,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String reloadCRL();
     String reloadRequired();
     String reloadStandaloneTooltip();
+    String remoteActiveMQServer();
     String remoteAddress();
     String remove();
     String removeAlias();",2018-10-18T15:29:42Z,100
"@@ -493,6 +493,7 @@ public interface Ids {
     String MESSAGING_CORE_QUEUE = ""messaging-core-queue"";
     String MESSAGING_DISCOVERY_GROUP = ""messaging-discovery-group"";
     String MESSAGING_DIVERT = ""messaging-divert"";
+    String MESSAGING_REMOTE_ACTIVEMQ = ""msg-remote-activemq"";
     String MESSAGING_GLOBAL_SETTINGS = ""messaging-global-settings"";
     String MESSAGING_GROUPING_HANDLER = ""messaging-grouping-handler"";
     String MESSAGING_HA_CHOOSE_STRATEGY = ""messaging-ha-choose-strategy"";",2018-10-18T15:29:42Z,111
"@@ -116,6 +116,8 @@ public interface Names {
     String EXPIRATION = ""Expiration"";
     String EXTENSION = ""Extension"";
     String EXTENSIONS = ""Extensions"";
+    String EXTERNAL_JMS_QUEUE = ""External JMS Queue"";
+    String EXTERNAL_JMS_TOPIC = ""External JMS Topic"";
 
     String FACTORIES_TRANSFORMERS = ""Factories / Transformers"";
     String FILE = ""File"";
@@ -225,6 +227,7 @@ public interface Names {
     String MEMORY = ""Memory"";
     String MESSAGE_DRIVEN_BEAN = ""Message Driven Bean"";
     String MESSAGING = ""Messaging"";
+    String MESSAGING_REMOTE_ACTIVEMQ = ""Remote ActiveMQ"";
     String MIME_MAPPING = ""Mime Mapping"";
     String MINIMUM_PERMISSIONS = ""Minimum Permissions"";
     String MISSING_DEPENDENCIES = ""Missing Dependencies"";",2018-10-18T15:29:42Z,112
"@@ -154,6 +154,9 @@ public interface Previews extends ClientBundleWithLookup {
     @Source(""previews/configuration/messaging-destinations.html"")
     ExternalTextResource configurationMessagingDestinations();
 
+    @Source(""previews/configuration/messaging-remote-activemq.html"")
+    ExternalTextResource configurationMessagingRemoteActiveMQ();
+
     @Source(""previews/configuration/messaging-ha-policy.html"")
     ExternalTextResource configurationMessagingHaPolicy();
 ",2018-10-18T15:29:42Z,134
"@@ -420,6 +420,7 @@ reloadCRL=Reload CRL
 reloadRequired=Reload Required
 reloadStandaloneTooltip=The server configuration has changed. Click here to reload the server.
 remoteAddress=Remote Address
+remoteActiveMQServer=Remote ActiveMQ Server
 remove=Remove
 removeAlias=Remove Alias
 removeIdentity=Remove identity",2018-10-18T15:29:42Z,100
"@@ -418,6 +418,7 @@ reloadCRL=Recarregar CRL
 reloadRequired=Recarregamento necess\u00E1rio
 reloadStandaloneTooltip=A configura\u00E7\u00E3o do servidor foi alterada. Clique aqui para recarregar o servidor.
 remoteAddress=Endere\u00E7o remoto
+remoteActiveMQServer=Servidor ActiveMQ Remoto
 remove=Remover
 removeAlias=Remover alias
 removeContent=Remover Conte\u00FAdo",2018-10-18T15:29:42Z,100
"@@ -0,0 +1,26 @@
+<p>Contains the configuration for discover groups, connector, connection factory, queues and topics to a remote ActiveMQ Artemis server:</p>
+
+<h2>Connectors</h2>
+<p>A connector defines how to connect to a remote ActiveMQ Artemis server.</p>
+
+<p>For more information about connectors, see the
+    <a target=""_blank"" href=""https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.1/html/configuring_messaging/acceptors_and_connectors"">Connectors documentation</a>.
+</p>
+
+<h2>Discovery Groups</h2>
+<p>A discovery group defines how connector information is received from a broadcast endpoint, for example, a UDP multicast address or JGroup channel.</p>
+<p>A discovery group maintains a list of connectors, one for each broadcast by a different server. As it receives broadcasts on the broadcast endpoint from a particular server, it updates its entry in the list for that server. If it has not received a broadcast from a particular server for a length of time it will remove that server’s entry from its list.</p>
+
+
+<h2>Connection Factories</h2>
+<p>By default, the ${build.shortName} messaging subsystem provides the <code>InVmConnectionFactory</code> and
+    <code>RemoteConnectionFactory</code> connection factories, as well as the
+    <code>activemq-ra</code> pooled connection factory.
+</p>
+
+<p>Pooled connection factories allow you to configure the inbound and outbound connectors of the remote ActiveMQ Artemis resource adapter. For more information on configuring a pooled-connection-factory to connect to a remote ActiveMQ Artemis server, see
+    <a target=""_blank"" href=""https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.1/html/configuring_messaging/resource_adapters#use_provided_amq_adapter"">Using the Integrated Resource Adapter for Remote Connections</a>.
+</p>
+
+<h2>External Queue / Topic</h2>
+<p>The queues and topics that exists in the remote ActiveMQ Artemis server.</p>",2018-10-18T15:29:42Z,135
"@@ -23,20 +23,16 @@
 import com.google.gwt.safehtml.shared.SafeHtml;
 import com.google.web.bindery.event.shared.EventBus;
 import org.jboss.gwt.flow.Progress;
-import org.jboss.hal.ballroom.dialog.BlockingDialog;
-import org.jboss.hal.ballroom.dialog.Dialog;
 import org.jboss.hal.ballroom.dialog.DialogFactory;
-import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.client.patching.wizard.ApplyPatchWizard;
+import org.jboss.hal.client.patching.wizard.RollbackWizard;
 import org.jboss.hal.config.Environment;
 import org.jboss.hal.core.finder.ColumnAction;
 import org.jboss.hal.core.finder.ColumnActionFactory;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderColumn;
 import org.jboss.hal.core.finder.ItemAction;
 import org.jboss.hal.core.finder.ItemDisplay;
-import org.jboss.hal.core.finder.ItemMonitor;
-import org.jboss.hal.core.mbui.form.ModelNodeForm;
 import org.jboss.hal.core.runtime.host.Host;
 import org.jboss.hal.core.runtime.host.HostActions;
 import org.jboss.hal.core.runtime.server.Server;
@@ -82,8 +78,6 @@ public class PatchesColumn extends FinderColumn<ModelNode> {
     private ServerActions serverActions;
     private Provider<Progress> progress;
     private Resources resources;
-    // flag set in the restart servers dialog
-    private BlockingDialog restartServersDialog;
 
     @Inject
     public PatchesColumn(final Finder finder,
@@ -171,67 +165,12 @@ private void rollback(final String patchId) {
 
                             @Override
                             public void onMetadata(final Metadata metadata) {
-                                ModelNode model = new ModelNode();
-                                model.get(PATCH_ID).set(patchId);
-                                ResourceAddress address = PATCHING_TEMPLATE.resolve(statementContext);
-                                Metadata operationMetadata = metadata.forOperation(ROLLBACK_OPERATION);
-                                String id = Ids.build(Ids.HOST, statementContext.selectedHost(), CORE_SERVICE,
-                                        PATCHING, patchId, ROLLBACK_OPERATION);
-                                Form<ModelNode> form = new ModelNodeForm.Builder<>(id, operationMetadata)
-                                        .unsorted()
-                                        .build();
-                                form.getFormItem(PATCH_ID).setEnabled(false);
-                                Dialog dialog = new Dialog.Builder(resources.constants().rollback())
-                                        .add(form.asElement())
-                                        .closeIcon(true)
-                                        .closeOnEsc(true)
-                                        .primary(resources.constants().rollback(), () -> {
-                                            if (form.save()) {
-                                                ModelNode payload = form.getModel();
-                                                // reset-configuration is a required attribute, if the user doesn't set it, meaning it should be false
-                                                // it will not be added into the payload, but we must forcibly set as false to satisfy the required=true metadata
-                                                if (!payload.hasDefined(RESET_CONFIGURATION)) {
-                                                    payload.get(RESET_CONFIGURATION).set(false);
-                                                }
-                                                String idProgress = Ids.build(Ids.HOST,
-                                                        statementContext.selectedHost(), CORE_SERVICE, PATCHING,
-                                                        patchId, ""rollback-progress"");
-                                                ItemMonitor.startProgress(idProgress);
-                                                Operation operation = new Operation.Builder(address,
-                                                        ROLLBACK_OPERATION)
-                                                        .payload(payload)
-                                                        .build();
-                                                dispatcher.execute(operation, result2 -> {
-                                                    ItemMonitor.stopProgress(idProgress);
-                                                    MessageEvent.fire(eventBus,
-                                                            Message.success(resources.messages()
-                                                                    .patchSucessfullyRemoved(patchId)));
-                                                    refresh(RESTORE_SELECTION);
-                                                }, (operation1, failure) -> {
-                                                    ItemMonitor.stopProgress(idProgress);
-                                                    MessageEvent.fire(eventBus,
-                                                            Message.error(resources.messages()
-                                                                    .patchRemovedError(failure)));
-                                                    refresh(RESTORE_SELECTION);
-                                                }, (operation1, exception) -> {
-                                                    ItemMonitor.stopProgress(idProgress);
-                                                    MessageEvent.fire(eventBus,
-                                                            Message.error(resources.messages()
-                                                                    .patchRemovedError(exception.getMessage())));
-                                                    refresh(RESTORE_SELECTION);
-                                                });
-                                                return true;
-                                            }
-                                            return false;
-                                        })
-                                        .cancel()
-                                        .build();
-                                dialog.registerAttachable(form);
-                                dialog.show();
-                                form.edit(model);
+                                Metadata metadataRollback = metadata.forOperation(ROLLBACK_OPERATION);
+                                new RollbackWizard(resources, environment, patchId, metadataRollback, statementContext,
+                                        dispatcher, progress, serverActions, () -> refresh(RESTORE_SELECTION))
+                                        .show();
                             }
-                        })
-        );
+                        }));
     }
 
     private void ageoutHistory() {
@@ -268,7 +207,7 @@ private void applyPatch() {
                             @Override
                             public void onMetadata(final Metadata metadata) {
                                 Metadata metadataOp = metadata.forOperation(PATCH);
-                                new ApplyPatchWizard(resources, environment, metadataOp, eventBus, statementContext,
+                                new ApplyPatchWizard(resources, environment, metadataOp, statementContext,
                                         dispatcher, progress, serverActions, () -> refresh(RESTORE_SELECTION))
                                         .show();
                             }",2017-08-17T17:54:48Z,274
"@@ -15,12 +15,10 @@
  */
 package org.jboss.hal.client.patching.wizard;
 
-import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import javax.inject.Provider;
 
-import com.google.web.bindery.event.shared.EventBus;
 import org.jboss.gwt.flow.Async;
 import org.jboss.gwt.flow.Control;
 import org.jboss.gwt.flow.Function;
@@ -53,18 +51,15 @@ public class ApplyPatchWizard {
     static class UploadPatch implements Function<FunctionContext> {
 
         private final Dispatcher dispatcher;
-        private EventBus eventBus;
         private StatementContext statementContext;
-        private Resources resources;
         private ServerActions serverActions;
         private PatchContext patchContext;
 
-        UploadPatch(final EventBus eventBus, final StatementContext statementContext, final Dispatcher dispatcher,
-                final Resources resources, final ServerActions serverActions, final PatchContext patchContext) {
-            this.eventBus = eventBus;
+        UploadPatch(final StatementContext statementContext, final Dispatcher dispatcher,
+                final ServerActions serverActions, final PatchContext patchContext) {
+
             this.statementContext = statementContext;
             this.dispatcher = dispatcher;
-            this.resources = resources;
             this.serverActions = serverActions;
             this.patchContext = patchContext;
         }
@@ -79,7 +74,6 @@ public void execute(final Control<FunctionContext> control) {
                 }
             }
 
-
             ResourceAddress address = PATCHING_TEMPLATE.resolve(statementContext);
             Operation.Builder opBuilder = new Operation.Builder(address, PATCH)
                     .param(OVERRIDE_ALL, patchContext.overrideAll)
@@ -111,25 +105,22 @@ public void execute(final Control<FunctionContext> control) {
     }
 
 
-    private Wizard<PatchContext, PatchState> wizard;
     private Resources resources;
     private Environment environment;
     private Metadata metadataOp;
-    private EventBus eventBus;
     private StatementContext statementContext;
     private Dispatcher dispatcher;
     private Provider<Progress> progress;
     private ServerActions serverActions;
     private Callback callback;
 
     public ApplyPatchWizard(final Resources resources, final Environment environment, final Metadata metadata,
-            final EventBus eventBus, final StatementContext statementContext, final Dispatcher dispatcher,
-            final Provider<Progress> progress, final ServerActions serverActions, Callback callback) {
+            final StatementContext statementContext, final Dispatcher dispatcher, final Provider<Progress> progress,
+            final ServerActions serverActions, Callback callback) {
 
         this.resources = resources;
         this.environment = environment;
         this.metadataOp = metadata;
-        this.eventBus = eventBus;
         this.statementContext = statementContext;
         this.dispatcher = dispatcher;
         this.progress = progress;
@@ -144,11 +135,11 @@ public void show() {
 
         checkServersState(servers -> {
             if (servers != null) {
-                wb.addStep(CHECK_SERVERS, new CheckRunningServersStep(resources, serverActions, servers,
+                wb.addStep(CHECK_SERVERS, new CheckRunningServersStep(resources, servers,
                         statementContext.selectedHost()));
             }
             wb.addStep(UPLOAD, new UploadPatchStep(resources.constants().uploadPatch(), messages.noSelectedPatch()))
-            .addStep(CONFIGURE, new ConfigurationStep(environment, metadataOp, resources))
+            .addStep(CONFIGURE, new ConfigurationStep(metadataOp, resources))
 
             .onBack((context, currentState) -> {
                 PatchState previous = null;
@@ -182,10 +173,10 @@ public void show() {
             .stayOpenAfterFinish()
             .onFinish((wzd, context) -> {
                 String name = context.file.name;
-                wzd.showProgress(resources.constants().uploadInProgress(), messages.uploadInProgress(name));
+                wzd.showProgress(resources.constants().patchInProgress(), messages.patchInProgress(name));
 
                 Function[] functions = {
-                        new UploadPatch(eventBus, statementContext, dispatcher, resources, serverActions,
+                        new UploadPatch(statementContext, dispatcher, serverActions,
                                 context)
                 };
                 new Async<FunctionContext>(progress.get()).waterfall(
@@ -202,14 +193,14 @@ public void onFailure(final FunctionContext functionContext) {
                             public void onSuccess(final FunctionContext functionContext) {
                                 callback.execute();
                                 wzd.showSuccess(
-                                        resources.constants().uploadSuccessful(),
-                                        messages.uploadSuccessful(name),
-                                        messages.view(Names.CONTENT),
+                                        resources.constants().patchSuccessful(),
+                                        messages.patchSucessfullyApplied(name),
+                                        messages.view(Names.PATCH),
                                         cxt -> { /* nothing to do, content is already selected */ });
                             }
                         }, functions);
             });
-            wizard = wb.build();
+            Wizard<PatchContext, PatchState> wizard = wb.build();
             wizard.show();
         });
     }
@@ -234,20 +225,17 @@ private void checkServersState(Dispatcher.SuccessCallback<List<Property>> callba
 
             dispatcher.execute(operation, result -> {
                 List<Property> servers = result.asPropertyList();
-                List<String> serversString = new ArrayList<>();
                 boolean anyServerStarted = false;
                 for (Iterator<Property> iter = servers.iterator(); iter.hasNext(); ) {
                     Property serverProp = iter.next();
                     Server server = new Server(host, serverProp);
                     if (!server.isStopped()) {
-                        serversString.add(serverProp.getName());
                         anyServerStarted = true;
                     } else {
                         iter.remove();
                     }
                 }
                 if (anyServerStarted) {
-                    //String serversList = Joiner.on("", "").join(serversString);
                     callback.onSuccess(servers);
                 } else {
                     callback.onSuccess(null);",2017-08-17T17:54:48Z,275
"@@ -23,7 +23,6 @@
 import elemental2.dom.HTMLElement;
 import org.jboss.gwt.elemento.core.InputType;
 import org.jboss.hal.ballroom.wizard.WizardStep;
-import org.jboss.hal.core.runtime.server.ServerActions;
 import org.jboss.hal.dmr.Property;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Resources;
@@ -40,30 +39,18 @@ public class CheckRunningServersStep extends WizardStep<PatchContext, PatchState
 
     private final HTMLElement root;
     private Boolean restartServers;
-    private ServerActions serverActions;
     private List<Property> servers;
-    private String host;
 
-    public CheckRunningServersStep(final Resources resources, final ServerActions serverActions, List<Property> servers, String host) {
+    public CheckRunningServersStep(final Resources resources, List<Property> servers, String host) {
         super(resources.messages().patchStopAllServersTitle());
-        this.serverActions = serverActions;
         this.servers = servers;
-        this.host = host;
 
         List<String> serversList = new ArrayList<>();
         servers.forEach(p -> serversList.add(p.getName()));
 
         String serverStr = Joiner.on("", "").join(serversList);
         SafeHtml description = resources.messages().patchStopAllServersQuestion(serverStr, host);
 
-        /*
-        root = div()
-                .add(div().innerHtml(description))
-                .add(div().css(blankSlatePf)
-                        .add(button(""Yes, stop all servers"").css(btn, btnLg, btnPrimary)
-                                .on(click, event -> restartServers())))
-                .asElement();
-*/
         String radioName = Ids.build(HOST, PATCHING, ""choose-restart"");
         root = div().css(formHorizontal)
                 .add(p().innerHtml(description))",2017-08-17T17:54:48Z,276
"@@ -21,7 +21,6 @@
 import elemental2.dom.HTMLElement;
 import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.ballroom.wizard.WizardStep;
-import org.jboss.hal.config.Environment;
 import org.jboss.hal.core.mbui.form.ModelNodeForm;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.meta.Metadata;
@@ -36,11 +35,9 @@
 public class ConfigurationStep extends WizardStep<PatchContext, PatchState> {
 
     private final Form<ModelNode> form;
-    private final Environment environment;
 
-    public ConfigurationStep(final Environment environment, final Metadata metadata, final Resources resources) {
+    public ConfigurationStep(final Metadata metadata, final Resources resources) {
         super(resources.messages().configurePatchTitle());
-        this.environment = environment;
 
         form = new ModelNodeForm.Builder<>(Ids.PATCH_UPLOAD_NAMES_FORM, metadata)
                 .exclude(""input-stream-index"")",2017-08-17T17:54:48Z,40
"@@ -22,11 +22,21 @@
 
 public class PatchContext {
 
+    // used only on apply patch wizard
     public File file;
+
+    // used only on rollback wizard
+    public String patchId;
+    public boolean rollbackTo;
+    public boolean resetConfiguration;
+
+    // shared properties used on apply patch and rollback
     public boolean overrideAll;
     public boolean overrideModules;
     public List<String> override;
     public List<String> preserve;
+
+    // properties used by check running servers step
     public boolean restartServers;
     public List<Property> servers;
 }",2017-08-17T17:54:48Z,277
"@@ -16,5 +16,13 @@
 package org.jboss.hal.client.patching.wizard;
 
 public enum PatchState {
-    CHECK_SERVERS, UPLOAD, CONFIGURE
+
+    // used on apply patch and rollback
+    CHECK_SERVERS,
+
+    // used only on apply patch wizard
+    UPLOAD, CONFIGURE,
+
+    // used only on rollback wizard
+    ROLLBACK
 }",2017-08-17T17:54:48Z,278
"@@ -0,0 +1,105 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.patching.wizard;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import elemental2.dom.HTMLElement;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.wizard.WizardStep;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Resources;
+
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+
+public class RollbackStep extends WizardStep<PatchContext, PatchState> {
+
+    private final Form<ModelNode> form;
+    private ModelNode model;
+
+    public RollbackStep(final Metadata metadata, final Resources resources, final String host,
+            final String patchId) {
+        super(resources.constants().rollback());
+
+        model = new ModelNode();
+        model.get(PATCH_ID).set(patchId);
+        String id = Ids.build(Ids.HOST, host, CORE_SERVICE, PATCHING, patchId, ROLLBACK_OPERATION);
+        form = new ModelNodeForm.Builder<>(id, metadata)
+                .unsorted()
+                .build();
+        form.getFormItem(PATCH_ID).setEnabled(false);
+        //form.edit(model);
+
+        registerAttachable(form);
+    }
+
+    @Override
+    public HTMLElement asElement() {
+        return form.asElement();
+    }
+
+    @Override
+    public void reset(final PatchContext context) {
+        context.rollbackTo = false;
+        context.resetConfiguration = false;
+        context.overrideAll = false;
+        context.overrideModules = false;
+        context.override = new ArrayList<>();
+        context.preserve = new ArrayList<>();
+        context.patchId = model.get(PATCH_ID).asString();
+    }
+
+    @Override
+    protected void onShow(final PatchContext context) {
+        form.edit(model);
+    }
+
+    @Override
+    protected boolean onNext(final PatchContext context) {
+        boolean valid = form.save();
+        if (valid) {
+            context.rollbackTo = form.getFormItem(ROLLBACK_TO).isUndefined() ? false
+                    : form.<Boolean>getFormItem(ROLLBACK_TO).getValue();
+            context.resetConfiguration = form.getFormItem(RESET_CONFIGURATION).isUndefined() ? false
+                    : form.<Boolean>getFormItem(RESET_CONFIGURATION).getValue();
+            context.overrideAll = form.getFormItem(OVERRIDE_ALL).isUndefined() ? false
+                    : form.<Boolean>getFormItem(OVERRIDE_ALL).getValue();
+            context.overrideModules = form.getFormItem(OVERRIDE_MODULE).isUndefined() ? false
+                    : form.<Boolean>getFormItem(OVERRIDE_MODULE).getValue();
+            context.override = form.getFormItem(OVERRIDE).isUndefined() ? null
+                    : form.<List<String>>getFormItem(OVERRIDE).getValue();
+            context.preserve = form.getFormItem(PRESERVE).isUndefined() ? null
+                    : form.<List<String>>getFormItem(PRESERVE).getValue();
+        }
+        return valid;
+    }
+
+    @Override
+    protected boolean onBack(PatchContext context) {
+        form.cancel();
+        return true;
+    }
+
+    @Override
+    protected boolean onCancel(PatchContext context) {
+        form.cancel();
+        return true;
+    }
+}",2017-08-17T17:54:48Z,279
"@@ -0,0 +1,243 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.patching.wizard;
+
+import java.util.Iterator;
+import java.util.List;
+import javax.inject.Provider;
+
+import org.jboss.gwt.flow.Async;
+import org.jboss.gwt.flow.Control;
+import org.jboss.gwt.flow.Function;
+import org.jboss.gwt.flow.FunctionContext;
+import org.jboss.gwt.flow.Outcome;
+import org.jboss.gwt.flow.Progress;
+import org.jboss.hal.ballroom.wizard.Wizard;
+import org.jboss.hal.config.Environment;
+import org.jboss.hal.core.runtime.server.Server;
+import org.jboss.hal.core.runtime.server.ServerActions;
+import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.Property;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.resources.Messages;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Callback;
+
+import static org.jboss.hal.client.patching.PatchesColumn.PATCHING_TEMPLATE;
+import static org.jboss.hal.client.patching.wizard.PatchState.CHECK_SERVERS;
+import static org.jboss.hal.client.patching.wizard.PatchState.ROLLBACK;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+
+public class RollbackWizard {
+
+    static class RollbackFunction implements Function<FunctionContext> {
+
+        private final Dispatcher dispatcher;
+        private StatementContext statementContext;
+        private ServerActions serverActions;
+        private PatchContext patchContext;
+
+        RollbackFunction(final StatementContext statementContext, final Dispatcher dispatcher,
+                final ServerActions serverActions, final PatchContext patchContext) {
+
+            this.statementContext = statementContext;
+            this.dispatcher = dispatcher;
+            this.serverActions = serverActions;
+            this.patchContext = patchContext;
+        }
+
+        @Override
+        public void execute(final Control<FunctionContext> control) {
+
+            if (patchContext.restartServers) {
+                for (Property serverProp : patchContext.servers) {
+                    Server server = new Server(statementContext.selectedHost(), serverProp);
+                    serverActions.stopNow(server);
+                }
+            }
+
+            ResourceAddress address = PATCHING_TEMPLATE.resolve(statementContext);
+            Operation.Builder opBuilder = new Operation.Builder(address, ROLLBACK_OPERATION)
+                    .param(PATCH_ID, patchContext.patchId)
+                    .param(ROLLBACK_TO, patchContext.rollbackTo)
+                    .param(RESET_CONFIGURATION, patchContext.resetConfiguration)
+                    .param(OVERRIDE_ALL, patchContext.overrideAll)
+                    .param(OVERRIDE_MODULE, patchContext.overrideModules);
+
+            if (patchContext.override != null) {
+                opBuilder.param(OVERRIDE, patchContext.override.toArray(new String[patchContext.override.size()]));
+            }
+            if (patchContext.preserve != null) {
+                opBuilder.param(PRESERVE, patchContext.preserve.toArray(new String[patchContext.preserve.size()]));
+            }
+            Operation operation = opBuilder.build();
+
+            dispatcher.execute(operation,
+                    result -> {
+                        control.proceed();
+                    },
+
+                    (op, failure) -> {
+                        control.getContext().failed(failure);
+                        control.abort();
+                    },
+
+                    (op, exception) -> {
+                        control.getContext().failed(exception);
+                        control.abort();
+                    });
+        }
+    }
+
+
+    private Resources resources;
+    private Environment environment;
+    private String patchId;
+    private Metadata metadata;
+    private StatementContext statementContext;
+    private Dispatcher dispatcher;
+    private Provider<Progress> progress;
+    private ServerActions serverActions;
+    private Callback callback;
+
+    public RollbackWizard(final Resources resources, final Environment environment, final String patchId,
+            final Metadata metadata,
+            final StatementContext statementContext, final Dispatcher dispatcher, final Provider<Progress> progress,
+            final ServerActions serverActions, Callback callback) {
+
+        this.resources = resources;
+        this.environment = environment;
+        this.patchId = patchId;
+        this.metadata = metadata;
+        this.statementContext = statementContext;
+        this.dispatcher = dispatcher;
+        this.progress = progress;
+        this.serverActions = serverActions;
+        this.callback = callback;
+    }
+
+    public void show() {
+        Messages messages = resources.messages();
+        Wizard.Builder<PatchContext, PatchState> wb = new Wizard.Builder<>(resources.constants().rollback(), new PatchContext());
+
+        checkServersState(servers -> {
+            if (servers != null) {
+                wb.addStep(CHECK_SERVERS, new CheckRunningServersStep(resources, servers,
+                        statementContext.selectedHost()));
+            }
+            wb.addStep(ROLLBACK, new RollbackStep(metadata, resources, statementContext.selectedHost(), patchId))
+
+            .onBack((context, currentState) -> {
+                PatchState previous = null;
+                switch (currentState) {
+                    case CHECK_SERVERS:
+                        break;
+                    case ROLLBACK:
+                        previous = CHECK_SERVERS;
+                        break;
+                }
+                return previous;
+            })
+            .onNext((context, currentState) -> {
+                PatchState next = null;
+                switch (currentState) {
+                    case CHECK_SERVERS:
+                        next = ROLLBACK;
+                        break;
+                    case ROLLBACK:
+                        break;
+                }
+                return next;
+            })
+
+            .stayOpenAfterFinish()
+            .onFinish((wzd, context) -> {
+                String name = context.patchId;
+                wzd.showProgress(resources.constants().rollbackInProgress(), messages.rollbackInProgress(name));
+
+                Function[] functions = {
+                        new RollbackFunction(statementContext, dispatcher, serverActions, context)
+                };
+                new Async<FunctionContext>(progress.get()).waterfall(
+                        new FunctionContext(),
+                        new Outcome<FunctionContext>() {
+                            @Override
+                            public void onFailure(final FunctionContext functionContext) {
+                                wzd.showError(resources.constants().rollbackError(),
+                                        messages.rollbackError(functionContext.getError()),
+                                        functionContext.getError());
+                            }
+
+                            @Override
+                            public void onSuccess(final FunctionContext functionContext) {
+                                callback.execute();
+                                wzd.showSuccess(
+                                        resources.constants().rollbackSuccessful(),
+                                        messages.rollbackSucessful(name),
+                                        messages.view(Names.PATCH),
+                                        cxt -> { /* nothing to do, content is already selected */ });
+                            }
+                        }, functions);
+            });
+            Wizard<PatchContext, PatchState> wizard = wb.build();
+            wizard.show();
+        });
+    }
+
+    /**
+     * Checks if each servers of a host is stopped, if the server is started, asks the user to stop them.
+     * It is a good practice to apply/rollback a patch to a stopped server to prevent application and internal services
+     * from failing.
+     */
+    private void checkServersState(Dispatcher.SuccessCallback<List<Property>> callback) {
+
+        if (environment.isStandalone()) {
+            callback.onSuccess(null);
+        } else {
+
+            String host = statementContext.selectedHost();
+            ResourceAddress address = new ResourceAddress().add(HOST, host);
+            Operation operation = new Operation.Builder(address, READ_CHILDREN_RESOURCES_OPERATION)
+                    .param(INCLUDE_RUNTIME, true)
+                    .param(CHILD_TYPE, SERVER_CONFIG)
+                    .build();
+
+            dispatcher.execute(operation, result -> {
+                List<Property> servers = result.asPropertyList();
+                boolean anyServerStarted = false;
+                for (Iterator<Property> iter = servers.iterator(); iter.hasNext(); ) {
+                    Property serverProp = iter.next();
+                    Server server = new Server(host, serverProp);
+                    if (!server.isStopped()) {
+                        anyServerStarted = true;
+                    } else {
+                        iter.remove();
+                    }
+                }
+                if (anyServerStarted) {
+                    callback.onSuccess(servers);
+                } else {
+                    callback.onSuccess(null);
+                }
+            });
+        }
+    }
+
+}",2017-08-17T17:54:48Z,280
"@@ -348,6 +348,8 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String output();
 
     String patchError();
+    String patchInProgress();
+    String patchSuccessful();
     String pattern();
     String pause();
     String pending();
@@ -400,6 +402,9 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String role();
     String roles();
     String rollback();
+    String rollbackError();
+    String rollbackInProgress();
+    String rollbackSuccessful();
     String runAs();
     String runAsRoleTitle();
     String running();",2017-08-17T17:54:48Z,100
"@@ -246,6 +246,7 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml pageNotFound(String invalidHistoryToken);
     String patchLatestInstalledLabel();
     SafeHtml patchHostNeedsRestart(String hostname);
+    SafeHtml patchInProgress(String patch);
     SafeHtml patchRestartDomainControllerQuestion(String hostname);
     SafeHtml patchRestartHostControllerQuestion(String hostname);
     SafeHtml patchRestartStandaloneQuestion();
@@ -255,9 +256,10 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml patchStopServersDialogMessage1();
     SafeHtml patchStopServersDialogMessage2();
     SafeHtml patchAddError(String patchId, String error);
-    SafeHtml patchSucessfullyRemoved(String patchId);
+    SafeHtml rollbackSucessful(String patchId);
     SafeHtml pauseQueueSuccess(String name);
-    SafeHtml patchRemovedError(String failure);
+    SafeHtml rollbackError(String failure);
+    SafeHtml rollbackInProgress(String patchid);
     String profileIncludes(String includes);
     SafeHtml profileNotUsedInServerGroups();
     SafeHtml profileUsedInServerGroups(SafeHtml serverGroupLinks);",2017-08-17T17:54:48Z,94
"@@ -293,6 +293,8 @@ operations=Operations
 or=or
 orDragItHere=or drag it here
 output=Output
+patchInProgress=Patch in progress
+patchSuccessful=Patch successful
 patchError=Patch failed
 pattern=Pattern
 pause=Pause
@@ -344,6 +346,9 @@ review=Review
 role=Role
 roles=Roles
 rollback=Rollback
+rollbackError=Rollback error
+rollbackInProgress=Rollback in progress
+rollbackSuccessful=Rollback successful
 runAs=Run as
 runAsRoleTitle=Run as Role
 running=Running",2017-08-17T17:54:48Z,100
"@@ -1,2 +1,8 @@
 patchError=Falha na aplica\u00e7\u00e3o da corre\u00e7\u00e3o
-uploadPatch=Enviar corre\u00e7\u00e3o
\ No newline at end of file
+patchInProgress=Corre\u00e7\u00e3o em andamento
+patchSuccessful=Corre\u00e7\u00e3o instalada com sucesso
+uploadPatch=Enviar corre\u00e7\u00e3o
+rollback=Rollback
+rollbackError=Rollback com erro
+rollbackInProgress=Rollback em andamento
+rollbackSuccessful=Rollback efetuado com sucesso
\ No newline at end of file",2017-08-17T17:54:48Z,100
"@@ -194,8 +194,10 @@ patchLatestInstalledLabel=Latest applied patch
 patchHostNeedsRestart=The host <strong>{0}</strong> needs to be restarted. A patch cannot be added or rolled back before the host is restarted.
 patchSucessfullyApplied=Patch {0} successfully installed.
 patchAddError=There is an error installing patch {0}. Reason: {1}
-patchSucessfullyRemoved=Patch <strong>{0}</strong> successfully removed.
-patchRemovedError=Rollback error, cause: {0}
+patchInProgress=<strong>{0}</strong> is being applied. Please wait until the patch has installed.
+rollbackSucessful=Patch <strong>{0}</strong> successfully removed.
+rollbackInProgress=Rollback of <strong>{0}</strong> is in progress. Please wait until the rollback has finished.
+rollbackError=Rollback error, cause: {0}
 patchRestartHostControllerQuestion=<p>The host <strong>{0}</strong> needs to be restarted. A patch cannot be added or rolled back before the host is restarted.</p><p>Are you sure you want to restart the host controller <strong>{0}</strong> ?</p>
 patchRestartStandaloneQuestion=<p>The server needs to be restarted. A patch cannot be added or rolled back before the server is restarted.</p><p>Are you sure you want to restart the server ?</p>
 patchRestartDomainControllerQuestion=<p>The host <strong>{0}</strong> needs to be restarted. A patch cannot be added or rolled back before the host is restarted.</p><p>Are you sure you want to restart the domain controller <strong>{0}</strong>? The console won&#39;t be available until the domain controller has been successfully restarted.</p>",2017-08-17T17:54:48Z,94
"@@ -13,8 +13,10 @@ patchLatestInstalledLabel=\u00daltima corre\u00e7\u00e3o instalada
 patchHostNeedsRestart=O servidor de controle <strong>{0}</strong> precisa ser reiniciado. Uma corre\u00e7\u00e3o n\u00e3o pode ser adicionada ou removida antes do servidor de controle ser reiniciado.
 patchSucessfullyApplied=Corre\u00e7\u00e3o {0} instalada com sucesso.
 patchAddError=Ocorreu um erro na instala\u00e7\u00e3o da corre\u00e7\u00e3o {0}. Motivo: {1}
-patchSucessfullyRemoved=Corre\u00e7\u00e3o <strong>{0}</strong> removida com sucesso.
-patchRemovedError=Erro ao remover a corre\u00e7\u00e3o, motivo: {0}
+patchInProgress=<strong>{0}</strong> est\u00e1 sendo instalado. Por favor, aguarde a instala\u00e7\u00e3o terminar.
+rollbackInProgress=Rollback de <strong>{0}</strong> est\u00e1 em andamento. Por favor, aguarde o rollback terminar.
+rollbackSucessful=Corre\u00e7\u00e3o <strong>{0}</strong> removida com sucesso.
+rollbackError=Erro ao remover a corre\u00e7\u00e3o, motivo: {0}
 patchRestartHostControllerQuestion=<p>O servidor de controle <strong>{0}</strong> precisa ser reiniciado. Uma corre\u00e7\u00e3o n\u00e3o pode ser adicionada ou removida antes do servidor de controle ser reiniciado.</p><p>Voc\u00ea tem certeza de que quer reiniciar o servi\u00e7o de controle <strong>{0}</strong> ?</p>
 patchRestartDomainControllerQuestion=<p>O servidor de controle de dom\u00ednio <strong>{0}</strong> precisa ser reiniciado. Uma corre\u00e7\u00e3o n\u00e3o pode ser adicionada ou removida antes do servidor de controle ser reiniciado.</p><p>Voc\u00ea tem certeza de que quer reiniciar o servi\u00e7o de controle <strong>{0}</strong></p> ? <p>O console de gerenciamento web ficar\u00e1 indispon\u00edvel at\u00e9 que o servidor de controle de dom\u00ednio (Domain Controller) seja iniciado corretamente.</p>
 patchRestartStandaloneQuestion=<p>O servidor precisa ser reiniciado. Uma corre\u00e7\u00e3o n\u00e3o pode ser adicionada ou removida antes do servidor reiniciado.</p><p>Voc\u00ea tem certeza de que quer reiniciar o servidor ?</p><p>O console de gerenciamento web ficar\u00e1 indispon\u00edvel at\u00e9 que o servidor seja iniciado corretamente.</p>",2017-08-17T17:54:48Z,94
"@@ -20,6 +20,7 @@
 import com.google.web.bindery.event.shared.EventBus;
 import elemental2.dom.CSSProperties;
 import elemental2.dom.HTMLElement;
+import org.jboss.gwt.elemento.core.Elements;
 import org.jboss.hal.ballroom.Tabs;
 import org.jboss.hal.config.Environment;
 import org.jboss.hal.core.deployment.Deployment;
@@ -106,8 +107,14 @@ public void reset() {
     @Override
     public void update(Deployment deployment, int tab) {
         if (supportsReadContent) {
-            browseContent.setContent(deployment);
-            tabs.showTab(tab);
+            HTMLElement contentElement = tabs.tabElement(Ids.CONTENT_TAB);
+            if (deployment.isManaged()) {
+                browseContent.setContent(deployment);
+                tabs.showTab(tab);
+            } else {
+                tabs.showTab(1);
+            }
+            Elements.setVisible(contentElement, deployment.isManaged());
         }
         deploymentModel.update(deployment, () -> presenter.enable(deployment.getName()));
     }",2018-05-03T15:30:55Z,281
"@@ -146,6 +146,14 @@ public void onShow(String id, JsCallback callback) {
         }
     }
 
+    public HTMLElement tabElement(String id) {
+        HTMLElement selectedTab = null;
+        if (id != null) {
+            selectedTab = (HTMLElement) tabs.querySelector(""li > a[href='#"" + id + ""']""); //NON-NLS
+        }
+        return selectedTab;
+    }
+
 
     @JsType(isNative = true)
     static class Api {",2018-05-03T15:30:55Z,51
"@@ -221,6 +221,7 @@ public FormItem<?> createFrom(Property property) {
                 }
                 if (readOnly) {
                     formItem.setEnabled(false);
+                    formItem.setExpressionAllowed(false);
                 }
             }
         }",2018-05-03T15:30:55Z,101
"@@ -54,6 +54,8 @@
 import org.jboss.hal.client.configuration.subsystem.mail.MailSessionView;
 import org.jboss.hal.client.configuration.subsystem.transactions.Mbui_TransactionView_Provider;
 import org.jboss.hal.client.configuration.subsystem.transactions.TransactionPresenter;
+import org.jboss.hal.client.deployment.DeploymentDetailPresenter;
+import org.jboss.hal.client.deployment.DeploymentDetailView;
 import org.jboss.hal.client.deployment.DeploymentPresenter;
 import org.jboss.hal.client.deployment.DeploymentView;
 import org.jboss.hal.client.homepage.HomepagePresenter;
@@ -170,6 +172,11 @@ protected void configure() {
                 DeploymentView.class,
                 DeploymentPresenter.MyProxy.class);
 
+        bindPresenter(DeploymentDetailPresenter.class,
+                DeploymentDetailPresenter.MyView.class,
+                DeploymentDetailView.class,
+                DeploymentDetailPresenter.MyProxy.class);
+
         bindTemplatedPresenter(DeploymentScannerPresenter.class,
                 DeploymentScannerPresenter.MyView.class,
                 Mbui_DeploymentScannerView_Provider.class,",2016-09-20T13:05:53Z,44
"@@ -25,11 +25,7 @@
 import org.jboss.hal.dmr.ModelNodeHelper;
 import org.jboss.hal.dmr.Property;
 
-import static org.jboss.hal.dmr.ModelDescriptionConstants.DISABLED;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.ENABLED;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.STATUS;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.SUBDEPLOYMENT;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.SUBSYSTEM;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 
 /**
  * A deployment on a specific server.
@@ -126,6 +122,10 @@ public boolean isEnabled() {
         return enabled.isDefined() ? enabled.asBoolean() : false;
     }
 
+    boolean isExploded() {
+        return get(EXPLODED).asBoolean(false);
+    }
+
     public Status getStatus() {
         return ModelNodeHelper.asEnumValue(this, STATUS, Status::valueOf, Status.UNDEFINED);
     }",2016-09-20T13:05:53Z,65
"@@ -22,13 +22,14 @@
 
 import com.google.gwt.safehtml.shared.SafeHtml;
 import com.google.web.bindery.event.shared.EventBus;
+import elemental.client.Browser;
 import elemental.dom.Element;
+import elemental.html.SpanElement;
 import org.jboss.gwt.flow.Async;
 import org.jboss.gwt.flow.Function;
 import org.jboss.gwt.flow.FunctionContext;
 import org.jboss.gwt.flow.Outcome;
 import org.jboss.gwt.flow.Progress;
-import org.jboss.hal.ballroom.dialog.DialogFactory;
 import org.jboss.hal.ballroom.js.JsHelper;
 import org.jboss.hal.ballroom.wizard.Wizard;
 import org.jboss.hal.client.deployment.Deployment.Status;
@@ -46,6 +47,7 @@
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderColumn;
 import org.jboss.hal.core.finder.ItemAction;
+import org.jboss.hal.core.finder.ItemActionFactory;
 import org.jboss.hal.core.finder.ItemDisplay;
 import org.jboss.hal.core.finder.ItemMonitor;
 import org.jboss.hal.core.runtime.server.Server;
@@ -55,7 +57,7 @@
 import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.MetadataRegistry;
-import org.jboss.hal.resources.Icons;
+import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
@@ -69,9 +71,9 @@
 import static org.jboss.hal.client.deployment.DeploymentColumn.DEPLOYMENT_ADDRESS;
 import static org.jboss.hal.client.deployment.wizard.UploadState.NAMES;
 import static org.jboss.hal.client.deployment.wizard.UploadState.UPLOAD;
-import static org.jboss.hal.core.finder.FinderColumn.RefreshMode.CLEAR_SELECTION;
 import static org.jboss.hal.core.finder.FinderColumn.RefreshMode.RESTORE_SELECTION;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.resources.CSS.fontAwesome;
 import static org.jboss.hal.resources.CSS.pfIcon;
 
 /**
@@ -96,6 +98,7 @@ public class DeploymentColumn extends FinderColumn<Deployment> {
     @Inject
     public DeploymentColumn(final Finder finder,
             final ColumnActionFactory columnActionFactory,
+            final ItemActionFactory itemActionFactory,
             final Environment environment,
             final Dispatcher dispatcher,
             final EventBus eventBus,
@@ -120,8 +123,9 @@ public DeploymentColumn(final Finder finder,
                 })
 
                 .useFirstActionAsBreadcrumbHandler()
-                .withFilter()
-        );
+                .pinnable()
+                .showCount()
+                .withFilter());
 
         this.environment = environment;
         this.dispatcher = dispatcher;
@@ -153,18 +157,21 @@ public String getTitle() {
             public String getTooltip() {
                 if (item.getStatus() == Status.FAILED) {
                     return resources.constants().failed();
-                } else {
-                    return item.isEnabled() ? resources.constants().enabled() : resources.constants().disabled();
-                }
+                } else if (item.getStatus() == Status.STOPPED) {
+                    return resources.constants().stopped();
+                } else if (item.getStatus() == Status.OK) {
+                    return resources.constants().activeLower();
+                } else
+                    return item.isEnabled() ? resources.constants().enabled() : resources.constants()
+                            .disabled();
             }
 
             @Override
             public Element getIcon() {
-                if (item.getStatus() == Status.FAILED) {
-                    return Icons.error();
-                } else {
-                    return item.isEnabled() ? Icons.ok() : Icons.disabled();
-                }
+                String icon = item.isExploded() ? fontAwesome(""folder-open"") : fontAwesome(""archive"");
+                SpanElement spanElement = Browser.getDocument().createSpanElement();
+                spanElement.setClassName(icon);
+                return spanElement;
             }
 
             @Override
@@ -175,20 +182,15 @@ public String getFilterData() {
             @Override
             public List<ItemAction<Deployment>> actions() {
                 List<ItemAction<Deployment>> actions = new ArrayList<>();
+                actions.add(itemActionFactory.view(NameTokens.DEPLOYMENT_DETAIL,
+                        Ids.DEPLOYMENT, item.getName()));
                 if (item.isEnabled()) {
                     actions.add(new ItemAction<>(resources.constants().disable(), deployment -> disable(deployment)));
                 } else {
                     actions.add(new ItemAction<>(resources.constants().enable(), deployment -> enable(deployment)));
                 }
-                actions.add(new ItemAction<>(resources.constants().remove(),
-                        deployment -> DialogFactory.showConfirmation(
-                                resources.messages().removeResourceConfirmationTitle(item.getName()),
-                                resources.messages().removeResourceConfirmationQuestion(item.getName()),
-                                () -> {
-                                    ResourceAddress address = new ResourceAddress().add(DEPLOYMENT, item.getName());
-                                    Operation operation = new Operation.Builder(REMOVE, address).build();
-                                    dispatcher.execute(operation, result -> refresh(CLEAR_SELECTION));
-                                })));
+                actions.add(itemActionFactory.remove(Names.DEPLOYMENT, item.getName(), DEPLOYMENT_TEMPLATE,
+                        DeploymentColumn.this));
                 return actions;
             }
         });",2016-09-20T13:05:53Z,65
"@@ -0,0 +1,92 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.deployment;
+
+import javax.inject.Inject;
+
+import com.google.web.bindery.event.shared.EventBus;
+import com.gwtplatform.mvp.client.annotations.NameToken;
+import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
+import com.gwtplatform.mvp.client.proxy.ProxyPlace;
+import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
+import org.jboss.hal.config.Environment;
+import org.jboss.hal.core.finder.Finder;
+import org.jboss.hal.core.finder.FinderPath;
+import org.jboss.hal.core.finder.FinderPathFactory;
+import org.jboss.hal.core.mvp.ApplicationPresenter;
+import org.jboss.hal.core.mvp.PatternFlyView;
+import org.jboss.hal.dmr.model.ResourceAddress;
+import org.jboss.hal.meta.token.NameTokens;
+
+import static org.jboss.hal.dmr.ModelDescriptionConstants.DEPLOYMENT;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.SERVER_GROUP;
+
+/**
+ * @author Harald Pehl
+ */
+public class DeploymentDetailPresenter extends ApplicationPresenter<DeploymentDetailPresenter.MyView, DeploymentDetailPresenter.MyProxy> {
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @NameToken(NameTokens.DEPLOYMENT_DETAIL)
+    public interface MyProxy extends ProxyPlace<DeploymentDetailPresenter> {}
+
+    public interface MyView extends PatternFlyView {
+        void setRoot(ResourceAddress root);
+    }
+    // @formatter:on
+
+    private final Environment environment;
+    private final FinderPathFactory finderPathFactory;
+    private ResourceAddress address;
+
+    @Inject
+    public DeploymentDetailPresenter(final EventBus eventBus,
+            final MyView view,
+            final MyProxy proxy,
+            final Environment environment,
+            final Finder finder,
+            final FinderPathFactory finderPathFactory) {
+        super(eventBus, view, proxy, finder);
+        this.environment = environment;
+        this.finderPathFactory = finderPathFactory;
+        this.address = ResourceAddress.ROOT;
+    }
+
+    @Override
+    public void prepareFromRequest(final PlaceRequest request) {
+        super.prepareFromRequest(request);
+        if (!environment.isStandalone()) {
+            String serverGroup = request.getParameter(SERVER_GROUP, null);
+            String deployment = request.getParameter(DEPLOYMENT, null);
+            address = new ResourceAddress().add(SERVER_GROUP, serverGroup).add(DEPLOYMENT, deployment);
+        } else {
+            String deployment = request.getParameter(DEPLOYMENT, null);
+            address = new ResourceAddress().add(DEPLOYMENT, deployment);
+        }
+    }
+
+    @Override
+    protected void onReset() {
+        super.onReset();
+        getView().setRoot(address);
+    }
+
+    @Override
+    protected FinderPath finderPath() {
+        return finderPathFactory.deployment(address.lastValue());
+    }
+}",2016-09-20T13:05:53Z,65
"@@ -0,0 +1,41 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.deployment;
+
+import javax.inject.Inject;
+
+import org.jboss.hal.core.modelbrowser.ModelBrowser;
+import org.jboss.hal.core.mvp.PatternFlyViewImpl;
+import org.jboss.hal.dmr.model.ResourceAddress;
+
+/**
+ * @author Harald Pehl
+ */
+public class DeploymentDetailView extends PatternFlyViewImpl implements DeploymentDetailPresenter.MyView {
+
+    private final ModelBrowser modelBrowser;
+
+    @Inject
+    public DeploymentDetailView(ModelBrowser modelBrowser) {
+        this.modelBrowser = modelBrowser;
+        initElements(modelBrowser);
+    }
+
+    @Override
+    public void setRoot(final ResourceAddress root) {
+        modelBrowser.setRoot(root, false);
+    }
+}",2016-09-20T13:05:53Z,65
"@@ -16,38 +16,56 @@
 package org.jboss.hal.client.deployment;
 
 import org.jboss.hal.ballroom.Alert;
+import org.jboss.hal.ballroom.LabelBuilder;
+import org.jboss.hal.client.deployment.Deployment.Status;
 import org.jboss.hal.core.finder.PreviewAttributes;
+import org.jboss.hal.core.finder.PreviewAttributes.PreviewAttribute;
 import org.jboss.hal.core.finder.PreviewContent;
 import org.jboss.hal.resources.Icons;
 import org.jboss.hal.resources.Resources;
 
 import static java.util.Arrays.asList;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.RUNTIME_NAME;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.STATUS;
-import static org.jboss.hal.resources.Names.DEPLOYMENT;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 
 /**
  * @author Harald Pehl
  */
 class DeploymentPreview extends PreviewContent<Deployment> {
 
+    static final String LAST_ENABLED_AT = ""Last enabled at"";
+    static final String LAST_DISABLED_AT = ""Last disabled at"";
+
     DeploymentPreview(final DeploymentColumn column, final Deployment deployment, final Resources resources) {
         super(deployment.getName());
 
-        if (deployment.isEnabled()) {
-            previewBuilder()
-                    .add(new Alert(Icons.OK, resources.messages().resourceEnabled(DEPLOYMENT, deployment.getName()),
-                            resources.constants().disable(), event -> column.disable(deployment)));
-
+        if (deployment.getStatus() == Status.FAILED) {
+            previewBuilder().add(new Alert(Icons.ERROR, resources.messages().deploymentFailed(deployment.getName())));
+        } else if (deployment.getStatus() == Status.STOPPED) {
+            previewBuilder().add(new Alert(Icons.STOPPED, resources.messages().deploymentStopped(deployment.getName()),
+                    resources.constants().enable(), event -> column.enable(deployment)));
+        } else if (deployment.getStatus() == Status.OK) {
+            previewBuilder().add(new Alert(Icons.OK, resources.messages().deploymentActive(deployment.getName()),
+                    resources.constants().disable(), event -> column.disable(deployment)));
         } else {
-            previewBuilder()
-                    .add(new Alert(Icons.DISABLED,
-                            resources.messages().resourceDisabled(DEPLOYMENT, deployment.getName()),
-                            resources.constants().enable(), event -> column.enable(deployment)));
+            if (deployment.isEnabled()) {
+                previewBuilder().add(new Alert(Icons.OK, resources.messages().deploymentEnabled(deployment.getName()),
+                        resources.constants().disable(), event -> column.disable(deployment)));
+            } else {
+                previewBuilder()
+                        .add(new Alert(Icons.DISABLED, resources.messages().deploymentDisabled(deployment.getName()),
+                                resources.constants().enable(), event -> column.enable(deployment)));
+            }
         }
 
-        PreviewAttributes<Deployment> attributes = new PreviewAttributes<>(deployment,
-                asList(RUNTIME_NAME, ""disabled-timestamp"", ""enabled-timestamp"", STATUS)).end();
+        PreviewAttributes<Deployment> attributes = new PreviewAttributes<>(deployment, asList(NAME, RUNTIME_NAME));
+        attributes.append(MANAGED);
+        attributes.append(EXPLODED);
+        attributes.append(ENABLED);
+        attributes.append(model -> new PreviewAttribute(new LabelBuilder().label(STATUS),
+                deployment.getStatus().name()));
+        attributes.append(model -> new PreviewAttribute(LAST_ENABLED_AT, deployment.getEnabledTime()));
+        attributes.append(model -> new PreviewAttribute(LAST_DISABLED_AT, deployment.getDisabledTime()));
+        attributes.end();
         previewBuilder().addAll(attributes);
     }
 }",2016-09-20T13:05:53Z,65
"@@ -20,10 +20,13 @@
 
 import com.google.common.base.Joiner;
 import com.google.web.bindery.event.shared.EventBus;
+import com.gwtplatform.mvp.client.proxy.PlaceManager;
+import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
 import elemental.dom.Element;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderColumn;
 import org.jboss.hal.core.finder.ItemDisplay;
+import org.jboss.hal.core.mvp.Places;
 import org.jboss.hal.core.runtime.group.ServerGroup;
 import org.jboss.hal.core.runtime.group.ServerGroupSelectionEvent;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
@@ -52,13 +55,23 @@ public class ServerGroupColumn extends FinderColumn<ServerGroup> {
     public ServerGroupColumn(final Finder finder,
             final Dispatcher dispatcher,
             final EventBus eventBus,
+            final PlaceManager placeManager,
+            final Places places,
             final Resources resources) {
 
         super(new FinderColumn.Builder<ServerGroup>(finder, Ids.DEPLOYMENT_SERVER_GROUP, Names.SERVER_GROUP)
+
                 // TODO Change the security context (server group scoped roles!)
                 .onItemSelect(serverGroup -> eventBus.fireEvent(new ServerGroupSelectionEvent(serverGroup.getName())))
+
+                .onBreadcrumbItem((item, context) -> {
+                    // switch server group in place request parameter of specific presenter
+                    PlaceRequest current = placeManager.getCurrentPlaceRequest();
+                    PlaceRequest update = places.replaceParameter(current, SERVER_GROUP, item.getName()).build();
+                    placeManager.revealPlace(update);
+                })
+
                 .pinnable()
-                .showCount()
                 .withFilter());
 
         setItemRenderer(item -> new ItemDisplay<ServerGroup>() {",2016-09-20T13:05:53Z,282
"@@ -23,6 +23,7 @@
 import com.google.common.collect.Lists;
 import com.google.gwt.safehtml.shared.SafeHtml;
 import com.google.web.bindery.event.shared.EventBus;
+import com.gwtplatform.mvp.client.proxy.PlaceManager;
 import elemental.dom.Element;
 import org.jboss.gwt.flow.Async;
 import org.jboss.gwt.flow.Function;
@@ -115,13 +116,15 @@ public ServerGroupDeploymentColumn(final Finder finder,
             final Environment environment,
             final EventBus eventBus,
             final Dispatcher dispatcher,
+            final PlaceManager placeManager,
             final Places places,
             final StatementContext statementContext,
             final MetadataRegistry metadataRegistry,
             final @Footer Provider<Progress> progress,
             final Resources resources) {
 
         super(new FinderColumn.Builder<ServerGroupDeployment>(finder, Ids.SERVER_GROUP_DEPLOYMENT, Names.DEPLOYMENT)
+                .useFirstActionAsBreadcrumbHandler()
                 .pinnable()
                 .showCount()
                 .withFilter());",2016-09-20T13:05:53Z,81
"@@ -31,16 +31,15 @@
 import org.jboss.hal.resources.Resources;
 
 import static java.util.Arrays.asList;
+import static org.jboss.hal.client.deployment.DeploymentPreview.LAST_DISABLED_AT;
+import static org.jboss.hal.client.deployment.DeploymentPreview.LAST_ENABLED_AT;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 
 /**
  * @author Harald Pehl
  */
 class ServerGroupDeploymentPreview extends PreviewContent<ServerGroupDeployment> {
 
-    private static final String LAST_ENABLED_AT = ""Last enabled at"";
-    private static final String LAST_DISABLED_AT = ""Last disabled at"";
-
     ServerGroupDeploymentPreview(final ServerGroupDeploymentColumn column, final ServerGroupDeployment sgd,
             final Places places, final Resources resources) {
         super(sgd.getName());
@@ -50,7 +49,8 @@ class ServerGroupDeploymentPreview extends PreviewContent<ServerGroupDeployment>
             if (deployment.getStatus() == Status.FAILED) {
                 previewBuilder().add(new Alert(Icons.ERROR, resources.messages().deploymentFailed(sgd.getName())));
             } else if (deployment.getStatus() == Status.STOPPED) {
-                previewBuilder().add(new Alert(Icons.STOPPED, resources.messages().deploymentStopped(sgd.getName())));
+                previewBuilder().add(new Alert(Icons.STOPPED, resources.messages().deploymentStopped(sgd.getName()),
+                        resources.constants().enable(), event -> column.enable(sgd)));
             } else if (deployment.getStatus() == Status.OK) {
                 previewBuilder().add(new Alert(Icons.OK, resources.messages().deploymentActive(sgd.getName()),
                         resources.constants().disable(), event -> column.disable(sgd)));",2016-09-20T13:05:53Z,33
"@@ -52,6 +52,7 @@ public NamesStep(final Environment environment, final Metadata metadata, final R
             builder.include(ENABLED);
         }
         form = builder.build();
+        registerAttachable(form);
     }
 
     @Override",2016-09-20T13:05:53Z,283
"@@ -81,11 +81,19 @@ public FinderPath subsystemPath(String subsystem) {
     // ------------------------------------------------------ deployment
 
     public FinderPath deployment(String deployment) {
-        return environment.isStandalone()
-                ? new FinderPath().append(Ids.DEPLOYMENT, Ids.asId(deployment))
-                : new FinderPath().append(Ids.DEPLOYMENT_BROWSE_BY, Ids.asId(Names.SERVER_GROUPS))
-                .append(Ids.DEPLOYMENT_SERVER_GROUP, Ids.serverGroup(statementContext.selectedServerGroup()))
-                .append(Ids.DEPLOYMENT, Ids.asId(deployment));
+        if (environment.isStandalone()) {
+            return new FinderPath().append(Ids.DEPLOYMENT, Ids.deployment(deployment),
+                    Names.DEPLOYMENT, deployment);
+        } else {
+            String serverGroup = statementContext.selectedServerGroup();
+            return new FinderPath()
+                    .append(Ids.DEPLOYMENT_BROWSE_BY, Ids.asId(Names.SERVER_GROUPS),
+                            resources.constants().browseBy(), Names.SERVER_GROUPS)
+                    .append(Ids.DEPLOYMENT_SERVER_GROUP, Ids.serverGroup(serverGroup),
+                            Names.SERVER_GROUP, serverGroup)
+                    .append(Ids.SERVER_GROUP_DEPLOYMENT, Ids.serverGroupDeployment(serverGroup, deployment),
+                            Names.DEPLOYMENT, deployment);
+        }
     }
 
 ",2016-09-20T13:05:53Z,284
"@@ -107,7 +107,7 @@ public interface Ids {
     String DATA_SOURCE_RUNTIME_POOL_TAB = build(DATA_SOURCE_RUNTIME, ""pool"", TAB_SUFFIX);
     String DEPLOYMENT = ""deployment"";
     String DEPLOYMENT_ADD_ACTIONS = build(DEPLOYMENT, ""add-actions"");
-    String DEPLOYMENT_BROWSE_BY = build(DEPLOYMENT, ""browse-by"");
+    String DEPLOYMENT_BROWSE_BY = ""deployment-browse-by""; // must be a constant expression!
     String DEPLOYMENT_UNMANAGED_ADD = build(DEPLOYMENT, ""unmanaged"", ADD_SUFFIX);
     String DEPLOYMENT_REFRESH = build(DEPLOYMENT, REFRESH_SUFFIX);
     String DEPLOYMENT_SERVER_GROUP = ""deployment-sg"";",2016-09-20T13:05:53Z,111
"@@ -258,9 +258,9 @@ public JcaView(Dispatcher dispatcher,
         Metadata dwmMetadata = metadataRegistry.lookup(DISTRIBUTED_WORKMANAGER_TEMPLATE);
 
         Form<ModelNode> dwmAddForm = new ModelNodeForm.Builder<>(Ids.JCA_DISTRIBUTED_WORKMANAGER_ADD, dwmMetadata)
-                .fromRequestProperties()
                 .include(NAME, ELYTRON_ENABLED)
                 .unsorted()
+                .addOnly()
                 .build();
         AddResourceDialog dwmAddDialog = new AddResourceDialog(resources.messages().addResourceTitle(dwmType),
                 dwmAddForm, (name, model) -> presenter.add(dwmType, name, DISTRIBUTED_WORKMANAGER_TEMPLATE, model));",2017-11-24T08:21:35Z,285
"@@ -372,5 +372,28 @@
                 </plugins>
             </build>
         </profile>
+        <profile>
+            <id>i18n</id>
+            <build>
+                <plugins>
+                    <plugin>
+                        <groupId>net.ltgt.gwt.maven</groupId>
+                        <artifactId>gwt-maven-plugin</artifactId>
+                        <executions>
+                            <execution>
+                                <id>generate-i18n-module</id>
+                                <phase>generate-resources</phase>
+                                <goals>
+                                    <goal>generate-module</goal>
+                                </goals>
+                                <configuration>
+                                    <moduleTemplate>${project.basedir}/src/main/module-i18n.gwt.xml</moduleTemplate>
+                                </configuration>
+                            </execution>
+                        </executions>
+                    </plugin>
+                </plugins>
+            </build>
+        </profile>
     </profiles>
 </project>",2018-08-09T12:05:40Z,160
"@@ -0,0 +1,57 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<module>
+    <inherits name=""com.google.common.cache.Cache""/>
+    <inherits name=""com.google.common.collect.Collect""/>
+    <inherits name=""com.gwtplatform.mvp.MvpWithEntryPoint""/>
+    <inherits name=""elemental2.core.Core""/>
+    <inherits name=""elemental2.dom.Dom""/>
+    <inherits name=""elemental2.webstorage.WebStorage""/>
+    <inherits name=""com.intendia.rxgwt.RxElemento""/>
+    <inherits name=""org.jboss.gwt.elemento.Core""/>
+    <inherits name=""org.jboss.gwt.elemento.Template""/>
+    <inherits name=""ru.finam.slf4jgwt.logging.gwt.Logging""/>
+
+    <set-configuration-property name=""gwtp.prebootstrapper""
+                                value=""org.jboss.hal.client.bootstrap.HalPreBootstrapper""/>
+    <set-configuration-property name=""gwtp.bootstrapper""
+                                value=""org.jboss.hal.client.bootstrap.HalBootstrapper""/>
+    <extend-configuration-property name=""gin.ginjector.modules""
+                                   value=""org.jboss.hal.client.gin.CompositeModule""/>
+
+    <define-configuration-property name=""hal.version"" is-multi-valued=""false""/>
+    <set-configuration-property name=""hal.version"" value=""3.0.3-SNAPSHOT""/>
+
+    <set-configuration-property name=""CssResource.enableGss"" value=""true""/>
+
+    <extend-property name=""locale"" values=""en,de,es,fr,pt_BR,zh_Hans,ja""/>
+    <set-property-fallback name=""locale"" value=""en""/>
+    <set-property name=""locale"" value=""en,de,es,fr,pt_BR,zh_Hans,ja""/>
+
+    <!-- We do our own log setup -->
+    <replace-with class=""com.google.gwt.logging.client.LogConfiguration.LogConfigurationImplNull"">
+        <when-type-is class=""com.google.gwt.logging.client.LogConfiguration.LogConfigurationImplNull""/>
+    </replace-with>
+    <replace-with class=""org.jboss.hal.client.logging.LogHandler"">
+        <when-type-is class=""com.google.gwt.logging.client.ConsoleLogHandler""/>
+    </replace-with>
+    <set-property name=""gwt.logging.enabled"" value=""TRUE""/>
+    <set-property name=""gwt.logging.logLevel"" value=""FINE""/>
+    <set-property name=""user.agent"" value=""gecko1_8,safari""/>
+
+    <collapse-all-properties/>
+</module>",2018-08-09T12:05:40Z,286
"@@ -38,15 +38,15 @@ public TestableStatementContext() {
 
 
     @Override
-    public String resolve(final String placeholder) {
+    public String resolve(String placeholder, AddressTemplate template) {
         if (SELECTION_KEY.equals(placeholder)) {
             return ""selection"";
         }
         return null;
     }
 
     @Override
-    public String[] resolveTuple(final String placeholder) {
+    public String[] resolveTuple(String placeholder, AddressTemplate template) {
         Tuple t = Tuple.from(placeholder);
         if (t != null && context.containsKey(t)) {
             String value = context.get(t);",2018-08-09T12:05:40Z,287
"@@ -60,7 +60,10 @@ public ServerColumn(final Finder finder,
         super(new FinderColumn.Builder<NamedNode>(finder, Ids.MESSAGING_SERVER, Names.SERVER)
 
                 .columnAction(columnActionFactory.add(Ids.MESSAGING_SERVER_ADD, Names.SERVER, SERVER_TEMPLATE,
-                        Ids::messagingServer))
+                        name -> {
+                            //noinspection Convert2MethodRef
+                            return Ids.messagingServer(name);
+                        }))
                 .columnAction(columnActionFactory.refresh(Ids.MESSAGING_SERVER_REFRESH))
 
                 .itemsProvider((context, callback) -> crud.readChildren(MESSAGING_SUBSYSTEM_TEMPLATE, SERVER,",2017-07-12T15:31:07Z,288
"@@ -165,7 +165,7 @@ public BrowseContentView(final Dispatcher dispatcher, final Resources resources)
                             .end()
                         .end()
                     .end()
-                    .div().css(marginTopLarge, marginBottomLarge)
+                    .div().css(marginTopSmall, marginBottomLarge)
                         .add(editor.asElement())
                     .end()
                 .end()
@@ -216,7 +216,7 @@ private void adjustHeight() {
         int height = Skeleton.applicationHeight();
         int searchHeight = treeSearch.asElement().getOffsetHeight();
         int treeHeight = height - 2 * MARGIN_BIG - searchHeight - 2 * MARGIN_SMALL;
-        int editorHeight = height - 3 * MARGIN_BIG - editorControls.getOffsetHeight();
+        int editorHeight = height - 2 * MARGIN_BIG - MARGIN_SMALL - editorControls.getOffsetHeight();
         editorHeight = max(editorHeight, MIN_HEIGHT);
 
         treeContainer.getStyle().setHeight(treeHeight, PX);
@@ -240,9 +240,12 @@ public void setContent(final JsArrayOf<Node<ContentEntry>> nodes) {
             if (!""ready"".equals(selectionContext.action)) { //NON-NLS
                 boolean hasSelection = !selectionContext.selected.isEmpty();
                 if (hasSelection) {
-                    if (selectionContext.node.id == Ids.CONTENT_TREE_ROOT) {
+                    if (selectionContext.node.id.equals(Ids.CONTENT_TREE_ROOT)) {
                         // root node
-                        editorStatus.setTextContent(resources.constants().nothingSelected());
+                        ResourceAddress address = new ResourceAddress().add(DEPLOYMENT, presenter.getContent());
+                        Operation operation = new Operation.Builder(READ_CONTENT, address).build();
+                        downloadLink.setAttribute(""href"", dispatcher.downloadUrl(operation)); //NON-NLS
+                        editorStatus.setTextContent(presenter.getContent());
                         editor.getEditor().getSession().setValue("""");
                     } else {
                         ContentEntry contentEntry = selectionContext.node.data;",2016-09-23T12:37:14Z,289
"@@ -22,6 +22,7 @@
 
 import com.google.gwt.safehtml.shared.SafeHtml;
 import com.google.web.bindery.event.shared.EventBus;
+import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
 import elemental.client.Browser;
 import elemental.dom.Element;
 import elemental.html.SpanElement;
@@ -184,6 +185,9 @@ public List<ItemAction<Deployment>> actions() {
                 List<ItemAction<Deployment>> actions = new ArrayList<>();
                 actions.add(itemActionFactory.view(NameTokens.DEPLOYMENT_DETAIL,
                         Ids.DEPLOYMENT, item.getName()));
+                actions.add(itemActionFactory.placeRequest(resources.constants().browse(),
+                        new PlaceRequest.Builder().nameToken(NameTokens.BROWSE_CONTENT)
+                                .with(CONTENT, item.getName()).build()));
                 if (item.isEnabled()) {
                     actions.add(new ItemAction<>(resources.constants().disable(), deployment -> disable(deployment)));
                 } else {",2016-09-23T12:37:14Z,65
"@@ -138,9 +138,11 @@ public ServerGroupDeploymentColumn(final Finder finder,
         this.resources = resources;
 
         List<ColumnAction<ServerGroupDeployment>> addActions = new ArrayList<>();
-        addActions.add(new ColumnAction<>(Ids.SERVER_GROUP_DEPLOYMENT_UPLOAD, resources.constants().uploadDeployment(),
+        addActions.add(new ColumnAction<>(Ids.SERVER_GROUP_DEPLOYMENT_UPLOAD,
+                resources.constants().uploadNewDeployment(),
                 column -> uploadAndDeploy()));
-        addActions.add(new ColumnAction<>(Ids.SERVER_GROUP_DEPLOYMENT_ADD, resources.constants().deployContent(),
+        addActions.add(new ColumnAction<>(Ids.SERVER_GROUP_DEPLOYMENT_ADD,
+                resources.constants().deployExistingContent(),
                 column -> addDeploymentFromContentRepository()));
         addActions.add(new ColumnAction<>(Ids.SERVER_GROUP_DEPLOYMENT_UNMANAGED_ADD,
                 resources.messages().addResourceTitle(Names.UNMANAGED_DEPLOYMENT),",2016-09-23T12:37:14Z,81
"@@ -64,7 +64,7 @@ public Element asElement() {
     public void reset(final UploadContext context) {
         context.name = """";
         context.runtimeName = """";
-        context.enabled = true;
+        context.enabled = false;
     }
 
     @Override
@@ -86,6 +86,9 @@ protected boolean onNext(final UploadContext context) {
         if (valid) {
             context.name = nameItem.getValue();
             context.runtimeName = form.<String>getFormItem(RUNTIME_NAME).getValue();
+            if (environment.isStandalone()) {
+                context.enabled = form.<Boolean>getFormItem(ENABLED).getValue();
+            }
         }
         return valid;
     }",2016-09-23T12:37:14Z,283
"@@ -51,6 +51,10 @@ h2.underline {
   margin-top: @margin-large;
 }
 
+.margin-top-small {
+  margin-top: @margin-small;
+}
+
 .with-progress {
   animation: progress-animation 1s linear infinite;
   background-size: 40px 40px;",2016-09-23T12:37:14Z,290
"@@ -175,6 +175,7 @@ public interface CSS {
     String marginRightSmall = ""margin-right-small"";
     String marginLeft5 = ""margin-left-5"";
     String marginTopLarge = ""margin-top-large"";
+    String marginTopSmall = ""margin-top-small"";
     String messageDetails = ""message-details"";
     String messageDetailsPre = ""message-details-pre"";
     String modal = ""modal"";",2016-09-23T12:37:14Z,159
"@@ -86,6 +86,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String defaultValue();
     String deploy();
     String deployContent();
+    String deployExistingContent();
     String deploymentAttributes();
     String deploymentError();
     String deploymentInProgress();
@@ -367,6 +368,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String uploadDeployment();
     String uploadError();
     String uploadInProgress();
+    String uploadNewDeployment();
     String uploadSuccessful();
     String used();
     String user();",2016-09-23T12:37:14Z,100
"@@ -44,6 +44,7 @@ days=days
 defaultValue=Default value
 deploy=Deploy
 deployContent=Deploy Content
+deployExistingContent=Deploy existing content
 deploymentAttributes=Deployment attributes
 deploymentError=Deployment failed
 deploymentInProgress=Deployment in progress
@@ -309,6 +310,7 @@ uploadContent=Upload Content
 uploadDeployment=Upload Deployment
 uploadError=Upload failed
 uploadInProgress=Upload in progress
+uploadNewDeployment=Upload new deployment
 uploadSuccessful=Upload successful
 used=Used
 user=User",2016-09-23T12:37:14Z,100
"@@ -21,7 +21,6 @@
 
 import javax.inject.Inject;
 
-import com.google.web.bindery.event.shared.EventBus;
 import elemental2.dom.HTMLElement;
 import org.jboss.hal.core.CrudOperations;
 import org.jboss.hal.core.finder.ColumnAction;
@@ -33,10 +32,11 @@
 import org.jboss.hal.core.finder.ItemAction;
 import org.jboss.hal.core.finder.ItemActionFactory;
 import org.jboss.hal.core.finder.ItemDisplay;
+import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
 import org.jboss.hal.core.mvp.Places;
 import org.jboss.hal.dmr.Property;
 import org.jboss.hal.dmr.ResourceAddress;
-import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.security.Constraint;
@@ -47,7 +47,6 @@
 import org.jboss.hal.spi.AsyncColumn;
 import org.jboss.hal.spi.Requires;
 
-import static elemental2.dom.DomGlobal.alert;
 import static java.util.Arrays.stream;
 import static java.util.Collections.emptyList;
 import static java.util.stream.Collectors.toList;
@@ -72,14 +71,17 @@ private static String findCacheContainer(FinderPath path) {
         return null;
     }
 
+    private final CrudOperations crud;
+    private final MetadataRegistry metadataRegistry;
+    private final StatementContext statementContext;
+    private final Resources resources;
+
     @Inject
     public CacheColumn(Finder finder,
             ColumnActionFactory columnActionFactory,
             ItemActionFactory itemActionFactory,
-            Dispatcher dispatcher,
             CrudOperations crud,
             Places places,
-            EventBus eventBus,
             MetadataRegistry metadataRegistry,
             StatementContext statementContext,
             Resources resources) {
@@ -112,6 +114,10 @@ public CacheColumn(Finder finder,
                 .useFirstActionAsBreadcrumbHandler()
                 .withFilter()
         );
+        this.crud = crud;
+        this.metadataRegistry = metadataRegistry;
+        this.statementContext = statementContext;
+        this.resources = resources;
 
         List<ColumnAction<Cache>> addActions = new ArrayList<>();
         for (CacheType cacheType : CacheType.values()) {
@@ -181,6 +187,15 @@ public List<ItemAction<Cache>> actions() {
     }
 
     private void addCache(CacheType cacheType) {
-        alert(""Add "" + cacheType.type + "": "" + Names.NYI);
+        Metadata metadata = metadataRegistry.lookup(cacheType.template);
+        AddResourceDialog dialog = new AddResourceDialog(Ids.build(cacheType.baseId, Ids.ADD),
+                resources.messages().addResourceTitle(cacheType.type), metadata,
+                (name, model) -> {
+                    String cacheContainer = findCacheContainer(getFinder().getContext().getPath());
+                    ResourceAddress address = cacheType.template.resolve(statementContext, cacheContainer, name);
+                    crud.add(cacheType.type, name, address, model,
+                            (n, a) -> this.refresh(Ids.build(cacheType.baseId, name)));
+                });
+        dialog.show();
     }
 }",2018-07-02T09:03:24Z,291
"@@ -15,6 +15,8 @@
  */
 package org.jboss.hal.client.configuration.subsystem.infinispan;
 
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Map;
 
 import com.google.web.bindery.event.shared.EventBus;
@@ -31,19 +33,26 @@
 import org.jboss.hal.core.mbui.form.ModelNodeForm;
 import org.jboss.hal.core.mvp.ApplicationFinderPresenter;
 import org.jboss.hal.core.mvp.SupportsExpertMode;
+import org.jboss.hal.dmr.Composite;
+import org.jboss.hal.dmr.CompositeResult;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.NamedNode;
 import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.Property;
 import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Message;
+import org.jboss.hal.spi.MessageEvent;
 
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafePropertyList;
 
 abstract class CachePresenter<V extends CacheView, Proxy_ extends ProxyPlace<?>>
         extends ApplicationFinderPresenter<V, Proxy_>
@@ -54,12 +63,14 @@ abstract class CachePresenter<V extends CacheView, Proxy_ extends ProxyPlace<?>>
 
     private final FinderPathFactory finderPathFactory;
     private final CrudOperations crud;
+    private final Dispatcher dispatcher;
     private final MetadataRegistry metadataRegistry;
     private final StatementContext statementContext;
     private final Resources resources;
     private final CacheType cacheType;
     private String cacheContainer;
     private String cache;
+    private Memory memory;
     private Store store;
 
     CachePresenter(EventBus eventBus,
@@ -68,13 +79,15 @@ abstract class CachePresenter<V extends CacheView, Proxy_ extends ProxyPlace<?>>
             Finder finder,
             FinderPathFactory finderPathFactory,
             CrudOperations crud,
+            Dispatcher dispatcher,
             MetadataRegistry metadataRegistry,
             StatementContext statementContext,
             Resources resources,
             CacheType cacheType) {
         super(eventBus, view, proxy_, finder);
         this.finderPathFactory = finderPathFactory;
         this.crud = crud;
+        this.dispatcher = dispatcher;
         this.metadataRegistry = metadataRegistry;
         this.statementContext = statementContext;
         this.resources = resources;
@@ -103,7 +116,23 @@ public FinderPath finderPath() {
     @Override
     protected void reload() {
         crud.readRecursive(resourceAddress(),
-                result -> getView().update(new Cache(cache, cacheType, result)));
+                result -> {
+                    List<Property> properties = failSafePropertyList(result, MEMORY);
+                    for (Property property : properties) {
+                        if (property.getValue().isDefined()) {
+                            memory = Memory.fromResource(property.getName());
+                            break;
+                        }
+                    }
+                    properties = failSafePropertyList(result, STORE);
+                    for (Property property : properties) {
+                        if (property.getValue().isDefined()) {
+                            store = Store.fromResource(property.getName());
+                            break;
+                        }
+                    }
+                    getView().update(new Cache(cache, cacheType, result));
+                });
     }
 
 
@@ -188,8 +217,22 @@ public void afterReset(Form<ModelNode> f) {
                 });
     }
 
-    void switchMemory(Memory memory) {
-
+    void switchMemory(Memory newMemory) {
+        if (newMemory != null && newMemory != this.memory) {
+            List<Operation> operations = new ArrayList<>();
+            if (this.memory != null) {
+                operations.add(new Operation.Builder(memoryAddress(this.memory), REMOVE).build());
+            }
+            operations.add(new Operation.Builder(memoryAddress(newMemory), ADD).build());
+            Composite composite = new Composite(operations)
+                    .addHeader(ALLOW_RESOURCE_SERVICE_RESTART, true);
+            dispatcher.execute(composite, (CompositeResult result) -> {
+                MessageEvent.fire(getEventBus(),
+                        Message.success(resources.messages().addSingleResourceSuccess(newMemory.type)));
+                this.memory = newMemory;
+                reload();
+            });
+        }
     }
 
     private AddressTemplate memoryTemplate(Memory memory) {
@@ -245,7 +288,48 @@ public void afterReset(Form<ModelNode> f) {
     }
 
     void switchStore(Store newStore) {
-        store = newStore;
+        if (newStore != null && newStore != this.store) {
+            List<Operation> operations = new ArrayList<>();
+            if (this.store != null) {
+                operations.add(new Operation.Builder(storeAddress(this.store), REMOVE).build());
+            }
+
+            if (newStore.addWithDialog) {
+                Metadata metadata = metadataRegistry.lookup(
+                        cacheType.template.append(STORE + EQUALS + newStore.resource));
+                String id = Ids.build(cacheType.baseId, newStore.baseId, Ids.ADD);
+                Form<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata) // custom form w/o unbound name item
+                        .fromRequestProperties()
+                        .requiredOnly()
+                        .build();
+                AddResourceDialog dialog = new AddResourceDialog(resources.messages().addResourceTitle(newStore.type),
+                        form, (name, model) -> {
+                    operations.add(new Operation.Builder(storeAddress(newStore), ADD)
+                            .payload(model)
+                            .build());
+                    Composite composite = new Composite(operations)
+                            .addHeader(ALLOW_RESOURCE_SERVICE_RESTART, true);
+                    dispatcher.execute(composite, (CompositeResult result) -> {
+                        MessageEvent.fire(getEventBus(),
+                                Message.success(resources.messages().addSingleResourceSuccess(newStore.type)));
+                        this.store = newStore;
+                        reload();
+                    });
+                });
+                dialog.show();
+
+            } else {
+                operations.add(new Operation.Builder(storeAddress(newStore), ADD).build());
+                Composite composite = new Composite(operations)
+                        .addHeader(ALLOW_RESOURCE_SERVICE_RESTART, true);
+                dispatcher.execute(composite, (CompositeResult result) -> {
+                    MessageEvent.fire(getEventBus(),
+                            Message.success(resources.messages().addSingleResourceSuccess(newStore.type)));
+                    this.store = newStore;
+                    reload();
+                });
+            }
+        }
     }
 
     private AddressTemplate storeTemplate(Store store) {
@@ -306,6 +390,14 @@ public void afterReset(Form<ModelNode> f) {
     }
 
     void switchWrite(Write currentWrite, Write newWrite) {
+        List<Operation> operations = new ArrayList<>();
+        operations.add(new Operation.Builder(writeAddress(currentWrite), REMOVE).build());
+        operations.add(new Operation.Builder(writeAddress(newWrite), ADD).build());
+        dispatcher.execute(new Composite(operations), (CompositeResult result) -> {
+            MessageEvent.fire(getEventBus(),
+                    Message.success(resources.messages().addSingleResourceSuccess(newWrite.type)));
+            reload();
+        });
     }
 
     private AddressTemplate writeTemplate(Write write) {",2018-07-02T09:03:24Z,292
"@@ -21,15 +21,14 @@
 import org.jboss.hal.core.finder.PreviewAttributes;
 import org.jboss.hal.core.finder.PreviewAttributes.PreviewAttribute;
 import org.jboss.hal.core.finder.PreviewContent;
-import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Property;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Strings;
 
 import static java.util.Arrays.asList;
 import static java.util.Collections.sort;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
-import static org.jboss.hal.dmr.ModelNodeHelper.failSafeGet;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafePropertyList;
 
 class CachePreview extends PreviewContent<Cache> {
 
@@ -77,13 +76,10 @@ class CachePreview extends PreviewContent<Cache> {
     }
 
     private String definedSingleton(Cache cache, String name) {
-        ModelNode modelNode = failSafeGet(cache, name);
-        if (modelNode.isDefined()) {
-            List<Property> properties = modelNode.asPropertyList();
-            for (Property property : properties) {
-                if (property.getValue().isDefined()) {
-                    return property.getName();
-                }
+        List<Property> properties = failSafePropertyList(cache, name);
+        for (Property property : properties) {
+            if (property.getValue().isDefined()) {
+                return property.getName();
             }
         }
         return """";",2018-07-02T09:03:24Z,293
"@@ -25,6 +25,7 @@
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderPathFactory;
 import org.jboss.hal.core.mvp.SupportsExpertMode;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.token.NameTokens;
@@ -44,11 +45,12 @@ public DistributedCachePresenter(EventBus eventBus,
             MyProxy myProxy,
             Finder finder,
             FinderPathFactory finderPathFactory,
-            CrudOperations crudOperations,
+            CrudOperations crud,
+            Dispatcher dispatcher,
             MetadataRegistry metadataRegistry,
             StatementContext statementContext,
             Resources resources) {
-        super(eventBus, view, myProxy, finder, finderPathFactory, crudOperations, metadataRegistry, statementContext,
+        super(eventBus, view, myProxy, finder, finderPathFactory, crud, dispatcher, metadataRegistry, statementContext,
                 resources, DISTRIBUTED);
     }
 ",2018-07-02T09:03:24Z,294
"@@ -25,6 +25,7 @@
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderPathFactory;
 import org.jboss.hal.core.mvp.SupportsExpertMode;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.token.NameTokens;
@@ -44,11 +45,12 @@ public InvalidationCachePresenter(EventBus eventBus,
             MyProxy myProxy,
             Finder finder,
             FinderPathFactory finderPathFactory,
-            CrudOperations crudOperations,
+            CrudOperations crud,
+            Dispatcher dispatcher,
             MetadataRegistry metadataRegistry,
             StatementContext statementContext,
             Resources resources) {
-        super(eventBus, view, myProxy, finder, finderPathFactory, crudOperations, metadataRegistry, statementContext,
+        super(eventBus, view, myProxy, finder, finderPathFactory, crud, dispatcher, metadataRegistry, statementContext,
                 resources, INVALIDATION);
     }
 ",2018-07-02T09:03:24Z,295
"@@ -25,6 +25,7 @@
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderPathFactory;
 import org.jboss.hal.core.mvp.SupportsExpertMode;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.token.NameTokens;
@@ -44,11 +45,12 @@ public LocalCachePresenter(EventBus eventBus,
             MyProxy myProxy,
             Finder finder,
             FinderPathFactory finderPathFactory,
-            CrudOperations crudOperations,
+            CrudOperations crud,
+            Dispatcher dispatcher,
             MetadataRegistry metadataRegistry,
             StatementContext statementContext,
             Resources resources) {
-        super(eventBus, view, myProxy, finder, finderPathFactory, crudOperations, metadataRegistry, statementContext,
+        super(eventBus, view, myProxy, finder, finderPathFactory, crud, dispatcher, metadataRegistry, statementContext,
                 resources, LOCAL);
     }
 ",2018-07-02T09:03:24Z,296
"@@ -81,7 +81,7 @@ class MemoryElement implements IsElement<HTMLElement>, Attachable, HasPresenter<
                                 .textContent(resources.constants().switchMemory()))
                         .add(selectMemory)
                         .asElement())
-                .add(h(1).textContent(Names.MEMORY + "": "")
+                .add(h(1).textContent(Names.MEMORY)
                         .add(currentMemory = span().asElement()))
                 .add(p().textContent(resources.constants().cacheMemory()))
                 .addAll(memoryForms.values().stream().map(Form::asElement).collect(toList()))
@@ -146,7 +146,7 @@ public void setPresenter(CachePresenter presenter) {
     void update(List<Property> memories) {
         Memory memory = Memory.fromResource(memories.get(0).getName());
         if (memory != null) {
-            currentMemory.textContent = memory.type;
+            currentMemory.textContent = "": "" + memory.type;
             SelectBoxBridge.Single.element(selectMemory).setValue(memory.resource);
 
             ModelNode memoryNode = memories.get(0).getValue();",2018-07-02T09:03:24Z,297
"@@ -25,6 +25,7 @@
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderPathFactory;
 import org.jboss.hal.core.mvp.SupportsExpertMode;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.token.NameTokens;
@@ -44,11 +45,12 @@ public ReplicatedCachePresenter(EventBus eventBus,
             MyProxy myProxy,
             Finder finder,
             FinderPathFactory finderPathFactory,
-            CrudOperations crudOperations,
+            CrudOperations crud,
+            Dispatcher dispatcher,
             MetadataRegistry metadataRegistry,
             StatementContext statementContext,
             Resources resources) {
-        super(eventBus, view, myProxy, finder, finderPathFactory, crudOperations, metadataRegistry, statementContext,
+        super(eventBus, view, myProxy, finder, finderPathFactory, crud, dispatcher, metadataRegistry, statementContext,
                 resources, REPLICATED);
     }
 ",2018-07-02T09:03:24Z,298
"@@ -25,6 +25,7 @@
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderPathFactory;
 import org.jboss.hal.core.mvp.SupportsExpertMode;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.token.NameTokens;
@@ -44,11 +45,12 @@ public ScatteredCachePresenter(EventBus eventBus,
             MyProxy myProxy,
             Finder finder,
             FinderPathFactory finderPathFactory,
-            CrudOperations crudOperations,
+            CrudOperations crud,
+            Dispatcher dispatcher,
             MetadataRegistry metadataRegistry,
             StatementContext statementContext,
             Resources resources) {
-        super(eventBus, view, myProxy, finder, finderPathFactory, crudOperations, metadataRegistry, statementContext,
+        super(eventBus, view, myProxy, finder, finderPathFactory, crud, dispatcher, metadataRegistry, statementContext,
                 resources, SCATTERED);
     }
 ",2018-07-02T09:03:24Z,299
"@@ -123,7 +123,7 @@ class StoreElement implements IsElement<HTMLElement>, Attachable, HasPresenter<C
                                 .textContent(resources.constants().switchStore()))
                         .add(selectStore)
                         .asElement())
-                .add(h(1).textContent(Names.STORE + "": "")
+                .add(h(1).textContent(Names.STORE)
                         .add(currentStore = span().asElement()))
                 .add(p().textContent(resources.constants().cacheStore()))
                 .add(emptyState)
@@ -223,7 +223,7 @@ void update(List<Property> stores) {
         } else {
             Store store = Store.fromResource(stores.get(0).getName());
             if (store != null) {
-                currentStore.textContent = store.type;
+                currentStore.textContent = "": "" + store.type;
                 SelectBoxBridge.Single.element(selectStore).setValue(store.resource);
 
                 ModelNode storeNode = stores.get(0).getValue();",2018-07-02T09:03:24Z,300
"@@ -108,18 +108,20 @@ public Composite fromChangeSet(ResourceAddress address, Map<String, Object> chan
             if (intersection.isEmpty()) {
 
                 // the easy part: no conflicts
-                if (!alternatives.isEmpty()) {
-                    logger.debug(""Add undefine operations for alternatives [{}]"", String.join("", "", alternatives));
-                    alternatives.forEach(alternative -> {
+                alternatives.forEach(alternative -> {
+                    if (resourceDescription.isDeprecated(ATTRIBUTES, alternative)) {
+                        logger.debug(""Skip undefine operations for deprecated alternative {}"", alternative);
+                    } else {
+                        logger.debug(""Add undefine operations for alternative {}"", alternative);
                         operations.putIfAbsent(alternative, undefineAttribute(address, alternative));
                         List<String> requires = resourceDescription.findRequires(ATTRIBUTES, alternative);
                         if (!requires.isEmpty()) {
                             logger.debug(""Add undefine operations for attributes which require {}: [{}]"", alternative,
                                     String.join("", "", requires));
                             requires.forEach(r -> operations.putIfAbsent(r, undefineAttribute(address, r)));
                         }
-                    });
-                }
+                    }
+                });
 
             } else {
                 // possible conflicts: one or more alternatives are also in the change-set
@@ -202,7 +204,7 @@ Composite resetResource(ResourceAddress address, Set<String> attributes,
 
         // collect all attributes from the 'requires' list of this attribute
         // HashMultimap<String, String> requires = HashMultimap.create();
-        final TreeSet<String> requires = new TreeSet<>();
+        TreeSet<String> requires = new TreeSet<>();
         ModelNode attributesDescription = description.get(ATTRIBUTES);
         attributes.forEach(attribute -> {
             ModelNode attributeDescription = attributesDescription.get(attribute);",2018-05-11T14:54:05Z,21
"@@ -40,9 +40,7 @@ public ResourceDescription(ModelNode payload) {
         set(payload);
     }
 
-    /**
-     * @return the resource description
-     */
+    /** @return the resource description */
     @JsProperty
     public String getDescription() {
         return get(DESCRIPTION).asString();
@@ -167,32 +165,36 @@ public boolean isDefaultValue(String path, String name, Object value) {
         return false;
     }
 
+    @JsIgnore
+    public boolean isDeprecated(String path, String name) {
+        Property property = findAttribute(path, name);
+        if (property != null) {
+            ModelNode attribute = property.getValue();
+            return ModelNodeHelper.failSafeBoolean(attribute, DEPRECATED);
+        }
+        return false;
+    }
+
 
     // ------------------------------------------------------ JS methods
 
-    /**
-     * @return the attribute descriptions
-     */
+    /** @return the attribute descriptions */
     @JsMethod(name = ""getAttributes"")
     @EsReturn(""Property[]"")
     public Property[] jsGetAttributes() {
         List<Property> attributes = getAttributes(ATTRIBUTES);
         return attributes.toArray(new Property[attributes.size()]);
     }
 
-    /**
-     * @return the request properties of the add operation
-     */
+    /** @return the request properties of the add operation */
     @JsMethod(name = ""getRequestProperties"")
     @EsReturn(""Property[]"")
     public Property[] jsGetRequestProperties() {
         List<Property> attributes = getAttributes(OPERATIONS + ""/"" + ADD + ""/"" + REQUEST_PROPERTIES);
         return attributes.toArray(new Property[attributes.size()]);
     }
 
-    /**
-     * @return the operation descriptions
-     */
+    /** @return the operation descriptions */
     @JsProperty(name = ""operations"")
     @EsReturn(""Property[]"")
     public Property[] jsOperations() {",2018-05-11T14:54:05Z,24
"@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-self.importScripts(""polyfill.min.js"", ""pouchdb.min.js"");
+self.importScripts(""polyfill.js"", ""pouchdb.min.js"");
 
 self.addEventListener(""message"", function (e) {
     var db = new PouchDB(e.data.database);",2018-08-09T11:15:44Z,204
"@@ -105,7 +105,7 @@ public JGroupsPresenter(EventBus eventBus,
                 new FilteringStatementContext.Filter() {
                     @Override
                     @SuppressWarnings(""HardCodedStringLiteral"")
-                    public String filter(String filterKey) {
+                    public String filter(String filterKey, AddressTemplate template) {
                         switch (filterKey) {
                             case ""selected.channel"":
                                 return currentChannel;
@@ -120,7 +120,7 @@ public String filter(String filterKey) {
                     }
 
                     @Override
-                    public String[] filterTuple(String placeholder) {
+                    public String[] filterTuple(String placeholder, AddressTemplate template) {
                         return null;
                     }
                 });",2018-08-09T11:15:44Z,301
"@@ -42,6 +42,7 @@
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Operation;
 import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.FilteringStatementContext;
 import org.jboss.hal.meta.FilteringStatementContext.Filter;
 import org.jboss.hal.meta.Metadata;
@@ -94,15 +95,15 @@ public ApplicationSecurityDomainPresenter(
         this.statementContext = new FilteringStatementContext(statementContext,
                 new Filter() {
                     @Override
-                    public String filter(String placeholder) {
+                    public String filter(String placeholder, AddressTemplate template) {
                         if (SELECTION_KEY.equals(placeholder)) {
                             return appSecurityDomain;
                         }
                         return null;
                     }
 
                     @Override
-                    public String[] filterTuple(String placeholder) {
+                    public String[] filterTuple(String placeholder, AddressTemplate template) {
                         return null;
                     }
                 });",2018-08-09T11:15:44Z,302
"@@ -132,7 +132,7 @@ public ServerPresenter(
         this.statementContext = new FilteringStatementContext(statementContext,
                 new Filter() {
                     @Override
-                    public String filter(String placeholder) {
+                    public String filter(String placeholder, AddressTemplate template) {
                         if (SELECTION_KEY.equals(placeholder)) {
                             return serverName;
                         } else if (HOST.equals(placeholder)) {
@@ -142,7 +142,7 @@ public String filter(String placeholder) {
                     }
 
                     @Override
-                    public String[] filterTuple(String placeholder) {
+                    public String[] filterTuple(String placeholder, AddressTemplate template) {
                         return null;
                     }
                 });",2018-08-09T11:15:44Z,47
"@@ -40,6 +40,7 @@
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.NamedNode;
 import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.FilteringStatementContext;
 import org.jboss.hal.meta.FilteringStatementContext.Filter;
 import org.jboss.hal.meta.Metadata;
@@ -91,7 +92,7 @@ public WebservicePresenter(EventBus eventBus,
         this.metadataRegistry = metadataRegistry;
         this.statementContext = new FilteringStatementContext(statementContext, new Filter() {
             @Override
-            public String filter(String resource) {
+            public String filter(String resource, AddressTemplate template) {
                 switch (resource) {
                     case CONFIG_TYPE:
                         return configType.resource;
@@ -108,7 +109,7 @@ public String filter(String resource) {
             }
 
             @Override
-            public String[] filterTuple(String placeholder) {
+            public String[] filterTuple(String placeholder, AddressTemplate template) {
                 return null;
             }
         });",2018-08-09T11:15:44Z,303
"@@ -30,6 +30,7 @@
 import org.jboss.hal.core.runtime.host.HostSelectionEvent.HostSelectionHandler;
 import org.jboss.hal.core.runtime.server.ServerSelectionEvent;
 import org.jboss.hal.core.runtime.server.ServerSelectionEvent.ServerSelectionHandler;
+import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.StatementContext;
 import org.jetbrains.annotations.NonNls;
 import org.slf4j.Logger;
@@ -63,13 +64,13 @@ public CoreStatementContext(Environment environment, EventBus eventBus) {
         eventBus.addHandler(ServerSelectionEvent.getType(), this);
     }
 
-    public String resolve(String resource) {
+    public String resolve(String resource, AddressTemplate template) {
         // not supported
         return null;
     }
 
     @Override
-    public String[] resolveTuple(String placeholder) {
+    public String[] resolveTuple(String placeholder, AddressTemplate template) {
         if (!environment.isStandalone()) {
             Tuple validTuple = Tuple.from(placeholder);
             if (validTuple != null) {",2018-08-09T11:15:44Z,12
"@@ -317,8 +317,7 @@ public AddressTemplate append(AddressTemplate template) {
      */
     @JsIgnore
     public AddressTemplate subTemplate(int fromIndex, int toIndex) {
-        LinkedList<Token> subTokens = new LinkedList<>();
-        subTokens.addAll(this.tokens.subList(fromIndex, toIndex));
+        LinkedList<Token> subTokens = new LinkedList<>(this.tokens.subList(fromIndex, toIndex));
         return AddressTemplate.of(join(this.optional, subTokens));
     }
 
@@ -453,9 +452,9 @@ public ResourceAddress resolve(StatementContext context, @EsParam(""...string"") S
                 if (tokenRef.startsWith(""{"")) {
                     tokenRef = tokenRef.substring(1, tokenRef.length() - 1);
                     if (!tupleMemory.contains(tokenRef)) {
-                        if (context.resolveTuple(tokenRef) != null) {
+                        if (context.resolveTuple(tokenRef, this) != null) {
                             tupleMemory.memorize(tokenRef,
-                                    Lists.<String[]>newArrayList(context.resolveTuple(tokenRef)));
+                                    Lists.<String[]>newArrayList(context.resolveTuple(tokenRef, this)));
                         }
                     }
                     resolvedValue = tupleMemory.next(tokenRef);
@@ -501,8 +500,8 @@ private String resolveSome(StatementContext context, Memory<String> memory, Stri
         if (input.startsWith(""{"")) {
             input = input.substring(1, input.length() - 1);
             if (!memory.contains(input)) {
-                if (context.resolve(input) != null) {
-                    memory.memorize(input, Lists.newArrayList(context.resolve(input)));
+                if (context.resolve(input, this) != null) {
+                    memory.memorize(input, Lists.newArrayList(context.resolve(input, this)));
                 }
             }
             resolved = memory.next(input);",2018-08-09T11:15:44Z,43
"@@ -27,15 +27,15 @@ public FilteringStatementContext(StatementContext delegate, Filter filter) {
     }
 
     @Override
-    public String resolve(String placeholder) {
-        String filtered = filter.filter(placeholder);
-        return filtered != null ? filtered : delegate.resolve(placeholder);
+    public String resolve(String placeholder, AddressTemplate template) {
+        String filtered = filter.filter(placeholder, template);
+        return filtered != null ? filtered : delegate.resolve(placeholder, template);
     }
 
     @Override
-    public String[] resolveTuple(String placeholder) {
-        String[] filtered = filter.filterTuple(placeholder);
-        return filtered != null ? filtered : delegate.resolveTuple(placeholder);
+    public String[] resolveTuple(String placeholder, AddressTemplate template) {
+        String[] filtered = filter.filterTuple(placeholder, template);
+        return filtered != null ? filtered : delegate.resolveTuple(placeholder, template);
     }
 
     @Override
@@ -75,8 +75,8 @@ public String selectedServer() {
      */
     public interface Filter {
 
-        String filter(String resource);
+        String filter(String placeholder, AddressTemplate template);
 
-        String[] filterTuple(String placeholder);
+        String[] filterTuple(String placeholder, AddressTemplate template);
     }
 }",2018-08-09T11:15:44Z,10
"@@ -23,18 +23,18 @@ public class SelectionAwareStatementContext extends FilteringStatementContext im
     public static final String SELECTION_KEY = ""selection"";
     public static final String SELECTION_EXPRESSION = ""{"" + SELECTION_KEY + ""}"";
 
-    public SelectionAwareStatementContext(final StatementContext delegate, final Supplier<String> selection) {
+    public SelectionAwareStatementContext(StatementContext delegate, Supplier<String> selection) {
         super(delegate, new Filter() {
             @Override
-            public String filter(final String placeholder) {
+            public String filter(String placeholder, AddressTemplate template) {
                 if (SELECTION_KEY.equals(placeholder)) {
                     return selection.get();
                 }
                 return null;
             }
 
             @Override
-            public String[] filterTuple(final String placeholder) {
+            public String[] filterTuple(String placeholder, AddressTemplate template) {
                 return null;
             }
         });",2018-08-09T11:15:44Z,304
"@@ -48,7 +48,7 @@ enum Tuple {
         private final String name;
         private final String resource;
 
-        Tuple(final String name, final String resource) {
+        Tuple(String name, String resource) {
             this.name = name;
             this.resource = resource;
         }
@@ -76,12 +76,12 @@ public static Tuple from(String name) {
     StatementContext NOOP = new StatementContext() {
 
         @Override
-        public String resolve(String placeholder) {
+        public String resolve(String placeholder, AddressTemplate template) {
             return placeholder;
         }
 
         @Override
-        public String[] resolveTuple(String placeholder) {
+        public String[] resolveTuple(String placeholder, AddressTemplate template) {
             return new String[]{placeholder, placeholder};
         }
 
@@ -117,51 +117,35 @@ public String selectedServer() {
     };
 
 
-    /**
-     * Resolves a single value.
-     */
+    /** Resolves a single value. */
     @JsIgnore
-    String resolve(String placeholder);
+    String resolve(String placeholder, AddressTemplate template);
 
-    /**
-     * Resolves a tuple.
-     */
+    /** Resolves a tuple. */
     @JsIgnore
-    String[] resolveTuple(String placeholder);
+    String[] resolveTuple(String placeholder, AddressTemplate template);
 
-    /**
-     * @return the domain controller
-     */
+    /** @return the domain controller */
     @JsProperty(name = ""domainController"")
     String domainController();
 
-    /**
-     * @return the selected profile
-     */
+    /** @return the selected profile */
     @JsProperty(name = ""selectedProfile"")
     String selectedProfile();
 
-    /**
-     * @return the selected server group
-     */
+    /** @return the selected server group */
     @JsProperty(name = ""selectedServerGroup"")
     String selectedServerGroup();
 
-    /**
-     * @return the selected host
-     */
+    /** @return the selected host */
     @JsProperty(name = ""selectedHost"")
     String selectedHost();
 
-    /**
-     * @return the selected server config
-     */
+    /** @return the selected server config */
     @JsProperty(name = ""selectedServerConfig"")
     String selectedServerConfig();
 
-    /**
-     * @return the selected server
-     */
+    /** @return the selected server */
     @JsProperty(name = ""selectedServer"")
     String selectedServer();
 }",2018-08-09T11:15:44Z,78
"@@ -19,6 +19,9 @@
 import java.util.function.Function;
 
 import org.jboss.hal.dmr.ResourceAddress;
+import org.jetbrains.annotations.NonNls;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import static java.util.stream.Collectors.toList;
 
@@ -29,7 +32,7 @@
  * <p>
  * The following parts of a resource address are modified by this function:
  * <ul>
- * <li>{@code host}</li>
+ * <li>{@code host} (only if segments &gt; 1)</li>
  * <li>{@code server-group}</li>
  * <li>{@code server} (if it's the 2nd segment of the address)</li>
  * <li>{@code server-config} (if it's the 2nd segment of the address)</li>
@@ -45,6 +48,8 @@
  */
 public class ResourceDescriptionAddressProcessor implements Function<ResourceAddress, ResourceAddress> {
 
+    @NonNls private static final Logger logger = LoggerFactory.getLogger(ResourceDescriptionAddressProcessor.class);
+
     @Override
     public ResourceAddress apply(ResourceAddress address) {
         ResourceAddress modified = new ResourceAddress();
@@ -56,6 +61,7 @@ public ResourceAddress apply(ResourceAddress address) {
             SegmentProcessor.process(segments, segment -> modified.add(segment[0], segment[1]));
         }
 
+        logger.debug(""{} -> {}"", address, modified);
         return modified;
     }
 }",2018-08-09T11:15:44Z,24
"@@ -16,6 +16,7 @@
 package org.jboss.hal.meta.description;
 
 import org.jboss.hal.config.Environment;
+import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.FilteringStatementContext;
 import org.jboss.hal.meta.StatementContext;
 
@@ -26,22 +27,25 @@ public class ResourceDescriptionStatementContext extends FilteringStatementConte
     public ResourceDescriptionStatementContext(StatementContext delegate, Environment environment) {
         super(delegate, new Filter() {
             @Override
-            public String filter(String placeholder) {
+            public String filter(String placeholder, AddressTemplate template) {
                 if (SELECTION_KEY.equals(placeholder)) {
                     return ""*"";
                 }
-                return delegate.resolve(placeholder);
+                return delegate.resolve(placeholder, template);
             }
 
             @Override
-            public String[] filterTuple(String placeholder) {
+            public String[] filterTuple(String placeholder, AddressTemplate template) {
                 if (!environment.isStandalone()) {
                     Tuple t = Tuple.from(placeholder);
                     if (t != null) {
+                        if (t == Tuple.SELECTED_HOST && template.size() == 1) {
+                            return delegate.resolveTuple(placeholder, template);
+                        }
                         return new String[]{t.resource(), ""*""};
                     }
                 }
-                return delegate.resolveTuple(placeholder);
+                return delegate.resolveTuple(placeholder, template);
             }
         });
     }",2018-08-09T11:15:44Z,24
"@@ -20,6 +20,9 @@
 
 import com.google.common.base.Splitter;
 import org.jboss.hal.meta.AddressTemplate;
+import org.jetbrains.annotations.NonNls;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.StreamSupport.stream;
@@ -46,8 +49,12 @@
  */
 class ResourceDescriptionTemplateProcessor implements Function<AddressTemplate, AddressTemplate> {
 
+    @NonNls private static final Logger logger = LoggerFactory.getLogger(ResourceDescriptionTemplateProcessor.class);
+
     @Override
     public AddressTemplate apply(AddressTemplate template) {
+        AddressTemplate modified = AddressTemplate.ROOT;
+
         if (template != null && !AddressTemplate.ROOT.equals(template)) {
             List<String[]> segments = stream(template.spliterator(), false)
                     .map(segment -> {
@@ -70,8 +77,10 @@ public AddressTemplate apply(AddressTemplate template) {
                     builder.append(""="").append(segment[1]);
                 }
             });
-            return AddressTemplate.of(builder.toString());
+            modified = AddressTemplate.of(builder.toString());
         }
-        return AddressTemplate.ROOT;
+
+        logger.debug(""{} -> {}"", template, modified);
+        return modified;
     }
 }",2018-08-09T11:15:44Z,24
"@@ -25,12 +25,18 @@ final class SegmentProcessor {
     static void process(List<String[]> segments, Consumer<String[]> consumer) {
         if (segments != null) {
             int index = 0;
+            int length = segments.size();
             for (String[] segment : segments) {
                 String key = segment[0];
                 String value = segment[1];
                 if (key != null && value != null) {
                     switch (key) {
                         case HOST:
+                            if (length > 1 && index == 0) {
+                                value = ""*"";
+                            }
+                            break;
+
                         case PROFILE:
                         case SERVER_GROUP:
                             if (index == 0) {",2018-08-09T11:15:44Z,305
"@@ -58,7 +58,7 @@ public RrdResult parse(CompositeResult compositeResult) throws ParserException {
                     if (result.isDefined()) {
                         ResourceAddress operationAddress = operationAddress(index);
                         ResourceAddress resultAddress = new ResourceAddress(modelNode.get(ADDRESS));
-                        ResourceAddress resolvedAddress = adjustAddress(operationAddress, resultAddress);
+                        ResourceAddress resolvedAddress = makeFqAddress(operationAddress, resultAddress);
 
                         new SingleRrdParser(rrdResult).parse(resolvedAddress, result);
                     }
@@ -85,7 +85,7 @@ private ResourceAddress operationAddress(int index) {
     }
 
     @SuppressWarnings(""DuplicateStringLiteralInspection"")
-    private ResourceAddress adjustAddress(ResourceAddress operationAddress, ResourceAddress resultAddress) {
+    private ResourceAddress makeFqAddress(ResourceAddress operationAddress, ResourceAddress resultAddress) {
         ResourceAddress resolved = resultAddress;
         List<Property> operationSegments = operationAddress.asPropertyList();
         List<Property> resultSegments = resultAddress.asPropertyList();",2018-08-09T11:15:44Z,306
"@@ -16,6 +16,7 @@
 package org.jboss.hal.meta.security;
 
 import org.jboss.hal.config.Environment;
+import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.FilteringStatementContext;
 import org.jboss.hal.meta.StatementContext;
 
@@ -26,15 +27,15 @@ public class SecurityContextStatementContext extends FilteringStatementContext {
     public SecurityContextStatementContext(StatementContext delegate, Environment environment) {
         super(delegate, new Filter() {
             @Override
-            public String filter(String placeholder) {
+            public String filter(String placeholder, AddressTemplate template) {
                 if (SELECTION_KEY.equals(placeholder)) {
                     return ""*"";
                 }
-                return delegate.resolve(placeholder);
+                return delegate.resolve(placeholder, template);
             }
 
             @Override
-            public String[] filterTuple(String placeholder) {
+            public String[] filterTuple(String placeholder, AddressTemplate template) {
                 if (!environment.isStandalone()) {
                     Tuple t = Tuple.from(placeholder);
                     if (t != null) {
@@ -43,7 +44,7 @@ public String[] filterTuple(String placeholder) {
                             case SELECTED_HOST:
                             case SELECTED_GROUP:
                             case SELECTED_SERVER:
-                                return delegate.resolveTuple(placeholder);
+                                return delegate.resolveTuple(placeholder, template);
 
                             case SELECTED_PROFILE:
                             case SELECTED_SERVER_CONFIG:
@@ -53,7 +54,7 @@ public String[] filterTuple(String placeholder) {
                         }
                     }
                 }
-                return delegate.resolveTuple(placeholder);
+                return delegate.resolveTuple(placeholder, template);
             }
         });
     }",2018-08-09T11:15:44Z,42
"@@ -0,0 +1,34 @@
+/*
+ * Copyright 2015-2018 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.modcluster;
+
+import org.jboss.hal.meta.AddressTemplate;
+
+public interface AddressTemplates {
+
+    String MODCLUSTER_ADDRESS = ""/{selected.profile}/subsystem=modcluster"";
+    String PROXY_ADDRESS = ""/{selected.profile}/subsystem=modcluster/proxy=*"";
+    String DYNAMIC_LOAD_PROVIDER_ADDRESS = ""/{selected.profile}/subsystem=modcluster/proxy=*/dynamic-load-provider=configuration"";
+    String CUSTOM_LOAD_METRIC_ADDRESS = ""/{selected.profile}/subsystem=modcluster/proxy=*/dynamic-load-provider=configuration/custom-load-metric=*"";
+    String LOAD_METRIC_ADDRESS = ""/{selected.profile}/subsystem=modcluster/proxy=*/dynamic-load-provider=configuration/load-metric=*"";
+
+    AddressTemplate MODCLUSTER_TEMPLATE = AddressTemplate.of(MODCLUSTER_ADDRESS);
+    AddressTemplate PROXY_TEMPLATE = AddressTemplate.of(PROXY_ADDRESS);
+    AddressTemplate DYNAMIC_LOAD_PROVIDER_TEMPLATE = AddressTemplate.of(DYNAMIC_LOAD_PROVIDER_ADDRESS);
+    AddressTemplate CUSTOM_LOAD_METRIC_TEMPLATE = AddressTemplate.of(CUSTOM_LOAD_METRIC_ADDRESS);
+    AddressTemplate LOAD_METRIC_TEMPLATE = AddressTemplate.of(LOAD_METRIC_ADDRESS);
+
+}",2018-08-01T20:53:55Z,307
"@@ -15,12 +15,19 @@
  */
 package org.jboss.hal.client.configuration.subsystem.modcluster;
 
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+
 import javax.inject.Inject;
 
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.client.annotations.NameToken;
 import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
 import com.gwtplatform.mvp.client.proxy.ProxyPlace;
+import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.table.Table;
 import org.jboss.hal.core.CrudOperations;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderPath;
@@ -30,33 +37,50 @@
 import org.jboss.hal.core.mvp.SupportsExpertMode;
 import org.jboss.hal.dmr.ModelDescriptionConstants;
 import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.Operation;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.token.NameTokens;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
 import org.jboss.hal.spi.Requires;
 
+import static org.jboss.hal.client.configuration.subsystem.modcluster.AddressTemplates.*;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.NAME;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.READ_RESOURCE_OPERATION;
+import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafeGet;
+import static org.jboss.hal.resources.Ids.ADD;
+import static org.jboss.hal.resources.Ids.CUSTOM_LOAD_METRIC;
+import static org.jboss.hal.resources.Ids.FORM;
+import static org.jboss.hal.resources.Ids.LOAD_METRIC;
+
 public class ModclusterPresenter
         extends MbuiPresenter<ModclusterPresenter.MyView, ModclusterPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    static final String ROOT_ADDRESS = ""/{selected.profile}/subsystem=modcluster/mod-cluster-config=configuration"";
-    private static final AddressTemplate ROOT_TEMPLATE = AddressTemplate.of(ROOT_ADDRESS);
-
     private final CrudOperations crud;
+    private MetadataRegistry metadataRegistry;
     private final FinderPathFactory finderPathFactory;
     private final StatementContext statementContext;
+    private String proxyName;
 
     @Inject
     public ModclusterPresenter(EventBus eventBus,
             MyView view,
             MyProxy myProxy,
             Finder finder,
             CrudOperations crud,
+            MetadataRegistry metadataRegistry,
             FinderPathFactory finderPathFactory,
             StatementContext statementContext) {
         super(eventBus, view, myProxy, finder);
         this.crud = crud;
+        this.metadataRegistry = metadataRegistry;
         this.finderPathFactory = finderPathFactory;
         this.statementContext = statementContext;
     }
@@ -67,31 +91,133 @@ protected void onBind() {
         getView().setPresenter(this);
     }
 
+    @Override
+    public void prepareFromRequest(PlaceRequest request) {
+        super.prepareFromRequest(request);
+        proxyName = request.getParameter(NAME, null);
+    }
+
     @Override
     public ResourceAddress resourceAddress() {
-        return ROOT_TEMPLATE.resolve(statementContext);
+        return PROXY_TEMPLATE.resolve(statementContext, proxyName);
     }
 
     @Override
     public FinderPath finderPath() {
-        return finderPathFactory.configurationSubsystemPath(ModelDescriptionConstants.MODCLUSTER);
+        return finderPathFactory.configurationSubsystemPath(ModelDescriptionConstants.MODCLUSTER)
+                .append(Ids.MODCLUSTER_PROXY, Ids.modclusterProxy(proxyName), Names.PROXY, proxyName);
     }
 
     @Override
     protected void reload() {
-        crud.read(ROOT_TEMPLATE, 2, result -> getView().updateConfiguration(result));
+        crud.read(PROXY_TEMPLATE.replaceWildcards(proxyName), 2, result -> {
+            getView().updateConfiguration(result);
+            ModelNode dynLoadProvModel = failSafeGet(result, ""dynamic-load-provider/configuration"");
+            if (dynLoadProvModel.isDefined()) {
+                getView().updateDynamicLoadProvider(dynLoadProvModel);
+
+                // update custom load metric
+                ModelNode customLoadMetricModel = failSafeGet(result, ""dynamic-load-provider/configuration/custom-load-metric"");
+                List<NamedNode> customLoadMetricNamedNodes = Collections.emptyList();
+                if (customLoadMetricModel.isDefined()) {
+                    customLoadMetricNamedNodes = asNamedNodes(customLoadMetricModel.asPropertyList());
+                }
+                getView().updateCustomLoadMetrics(customLoadMetricNamedNodes);
+
+                // update load metric
+                ModelNode loadMetricModel = failSafeGet(result, ""dynamic-load-provider/configuration/load-metric"");
+                List<NamedNode> loadMetricNamedNodes = Collections.emptyList();
+                if (loadMetricModel.isDefined()) {
+                    loadMetricNamedNodes = asNamedNodes(loadMetricModel.asPropertyList());
+                }
+                getView().updateLoadMetrics(loadMetricNamedNodes);
+            } else {
+                getView().updateDynamicLoadProvider(dynLoadProvModel);
+                getView().updateCustomLoadMetrics(Collections.emptyList());
+                getView().updateLoadMetrics(Collections.emptyList());
+            }
+        });
+    }
+
+    public String getProxyName() {
+        return proxyName;
+    }
+
+    public Operation dynamicLoadProviderOperation() {
+        AddressTemplate template = DYNAMIC_LOAD_PROVIDER_TEMPLATE.replaceWildcards(proxyName);
+        return new Operation.Builder(template.resolve(statementContext), READ_RESOURCE_OPERATION).build();
+    }
+
+    public void addDynamicLoadProvider() {
+        String id = Ids.build(""dynamic-load-provider"", FORM, ADD);
+        AddressTemplate template = DYNAMIC_LOAD_PROVIDER_TEMPLATE.replaceWildcards(proxyName);
+        crud.addSingleton(id, Names.DYNAMIC_LOAD_PROVIDER, template, address -> reload());
+    }
+
+    public void removeDynamicLoadProvider() {
+        AddressTemplate template = DYNAMIC_LOAD_PROVIDER_TEMPLATE.replaceWildcards(proxyName);
+        crud.removeSingleton(Names.DYNAMIC_LOAD_PROVIDER, template, this::reload);
     }
 
+    // =================== custom load metric
+    public void addCustomLoadMetric() {
+        String id = Ids.build(CUSTOM_LOAD_METRIC, FORM, ADD);
+        AddressTemplate template = CUSTOM_LOAD_METRIC_TEMPLATE.replaceWildcards(proxyName);
+        crud.add(id, Names.CUSTOM_LOAD_METRIC, template, (name, address) -> reload());
+    }
+
+    public void removeCustomLoadMetric(Table<NamedNode> table) {
+        AddressTemplate template = CUSTOM_LOAD_METRIC_TEMPLATE.replaceWildcards(proxyName);
+        crud.remove(Names.CUSTOM_LOAD_METRIC, table.selectedRow().getName(), template, this::reload);
+    }
+
+    public void saveCustomLoadMetric(Form<NamedNode> form, Map<String, Object> changedValues) {
+        AddressTemplate template = CUSTOM_LOAD_METRIC_TEMPLATE.replaceWildcards(proxyName);
+        crud.save(Names.CUSTOM_LOAD_METRIC, form.getModel().getName(), template, changedValues, this::reload);
+    }
+
+    public void prepareResetCustomLoadMetric(Form<NamedNode> form) {
+        AddressTemplate template = CUSTOM_LOAD_METRIC_TEMPLATE.replaceWildcards(proxyName);
+        Metadata metadata = metadataRegistry.lookup(CUSTOM_LOAD_METRIC_TEMPLATE);
+        crud.reset(Names.CUSTOM_LOAD_METRIC, form.getModel().getName(), template, form, metadata, this::reload);
+    }
+
+
+    // =================== load metric
+    public void addLoadMetric() {
+        String id = Ids.build(LOAD_METRIC, FORM, ADD);
+        AddressTemplate template = LOAD_METRIC_TEMPLATE.replaceWildcards(proxyName);
+        crud.add(id, Names.LOAD_METRIC, template, (name, address) -> reload());
+    }
+
+    public void removeLoadMetric(Table<NamedNode> table) {
+        AddressTemplate template = LOAD_METRIC_TEMPLATE.replaceWildcards(proxyName);
+        crud.remove(Names.LOAD_METRIC, table.selectedRow().getName(), template, this::reload);
+    }
+
+    public void saveLoadMetric(Form<NamedNode> form, Map<String, Object> changedValues) {
+        AddressTemplate template = LOAD_METRIC_TEMPLATE.replaceWildcards(proxyName);
+        crud.save(Names.LOAD_METRIC, form.getModel().getName(), template, changedValues, this::reload);
+    }
+
+    public void prepareResetLoadMetric(Form<NamedNode> form) {
+        AddressTemplate template = LOAD_METRIC_TEMPLATE.replaceWildcards(proxyName);
+        Metadata metadata = metadataRegistry.lookup(LOAD_METRIC_TEMPLATE);
+        crud.reset(Names.LOAD_METRIC, form.getModel().getName(), template, form, metadata, this::reload);
+    }
 
     // @formatter:off
     @ProxyCodeSplit
-    @Requires(ROOT_ADDRESS)
+    @Requires(PROXY_ADDRESS)
     @NameToken(NameTokens.MODCLUSTER)
     public interface MyProxy extends ProxyPlace<ModclusterPresenter> {
     }
 
     public interface MyView extends MbuiView<ModclusterPresenter> {
         void updateConfiguration(ModelNode payload);
+        void updateDynamicLoadProvider(ModelNode payload);
+        void updateCustomLoadMetrics(List<NamedNode> nodes);
+        void updateLoadMetrics(List<NamedNode> nodes);
     }
     // @formatter:on
 }",2018-08-01T20:53:55Z,308
"@@ -15,15 +15,35 @@
  */
 package org.jboss.hal.client.configuration.subsystem.modcluster;
 
+import java.util.List;
+
+import javax.annotation.PostConstruct;
+
+import elemental2.dom.Element;
+import elemental2.dom.HTMLElement;
+import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.hal.ballroom.Alert;
 import org.jboss.hal.ballroom.VerticalNavigation;
 import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.table.Table;
 import org.jboss.hal.core.mbui.MbuiContext;
 import org.jboss.hal.core.mbui.MbuiViewImpl;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
 import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.resources.Icons;
+import org.jboss.hal.resources.Names;
 import org.jboss.hal.spi.MbuiElement;
 import org.jboss.hal.spi.MbuiView;
 
-import static org.jboss.hal.dmr.ModelNodeHelper.failSafeGet;
+import static org.jboss.gwt.elemento.core.Elements.div;
+import static org.jboss.gwt.elemento.core.Elements.h;
+import static org.jboss.gwt.elemento.core.Elements.p;
+import static org.jboss.gwt.elemento.core.Elements.section;
+import static org.jboss.hal.client.configuration.subsystem.modcluster.AddressTemplates.DYNAMIC_LOAD_PROVIDER_TEMPLATE;
+import static org.jboss.hal.resources.Names.DYNAMIC_LOAD_PROVIDER;
 
 @MbuiView
 @SuppressWarnings(""DuplicateStringLiteralInspection"")
@@ -33,17 +53,91 @@ public static ModclusterView create(final MbuiContext mbuiContext) {
         return new Mbui_ModclusterView(mbuiContext);
     }
 
-    @MbuiElement(""modcluster-vertical-navigation"") VerticalNavigation navigation;
-    @MbuiElement(""modcluster-configuration"") Form<ModelNode> configurationForm;
-    @MbuiElement(""modcluster-ssl-form"") Form<ModelNode> sslForm;
+    @MbuiElement(""proxy-vertical-navigation"") VerticalNavigation navigation;
+    @MbuiElement(""proxy-conf-form"") Form<ModelNode> configurationForm;
+    @MbuiElement(""load-metrics-table"") Table<NamedNode> loadMetricTable;
+    @MbuiElement(""load-metrics-form"") Form<NamedNode> loadMetricForm;
+    @MbuiElement(""custom-load-metrics-table"") Table<NamedNode> customLoadMetricTable;
+    @MbuiElement(""custom-load-metrics-form"") Form<NamedNode> customLoadMetricForm;
+    private Form<ModelNode> dynamicLoadProviderForm;
+    private Alert alertDynamicLoadProvider = new Alert(Icons.WARNING,
+            mbuiContext.resources().messages().dynamicLoadProviderWarning());
+    private Alert alertDynamicLoadProvider2 = new Alert(Icons.WARNING,
+            mbuiContext.resources().messages().dynamicLoadProviderWarning());
 
     ModclusterView(final MbuiContext mbuiContext) {
         super(mbuiContext);
     }
 
+    @PostConstruct
+    void init() {
+        Metadata metadata = mbuiContext.metadataRegistry().lookup(DYNAMIC_LOAD_PROVIDER_TEMPLATE);
+        dynamicLoadProviderForm = new ModelNodeForm.Builder<>(""dynamic-load-provider-form"", metadata)
+                .singleton(
+                        () -> presenter.dynamicLoadProviderOperation(),
+                        () -> presenter.addDynamicLoadProvider())
+                .prepareRemove(form -> presenter.removeDynamicLoadProvider())
+                .onSave((form, changedValues) -> {
+                    String name = presenter.getProxyName();
+                    AddressTemplate template = DYNAMIC_LOAD_PROVIDER_TEMPLATE.replaceWildcards(
+                            presenter.getProxyName());
+                    saveForm(Names.DYNAMIC_LOAD_PROVIDER, name, template.resolve(mbuiContext.statementContext(), name),
+                            changedValues, metadata);
+                })
+                .prepareReset(form -> {
+                    String name = presenter.getProxyName();
+                    AddressTemplate template = DYNAMIC_LOAD_PROVIDER_TEMPLATE.replaceWildcards(
+                            presenter.getProxyName());
+                    resetForm(Names.DYNAMIC_LOAD_PROVIDER, name, template.resolve(mbuiContext.statementContext(), name),
+                            form, metadata);
+                })
+                .build();
+        HTMLElement dynamicLoadProviderElement = section()
+                .add(div()
+                        .add(h(1).textContent(Names.DYNAMIC_LOAD_PROVIDER))
+                        .add(p().textContent(metadata.getDescription().getDescription()))
+                        .asElement())
+                .add(dynamicLoadProviderForm)
+                .asElement();
+        navigation.insertPrimary(""dynamic-load-provider-item"", ""custom-load-metrics-item"", DYNAMIC_LOAD_PROVIDER,
+                ""fa fa-shield"", dynamicLoadProviderElement);
+        registerAttachable(dynamicLoadProviderForm);
+    }
+
+    @Override
+    public void attach() {
+        super.attach();
+        Element customLoadMetricElement = asElement().querySelector(""section[data-vn-item-for=custom-load-metrics-item] > div"");
+        Element loadMetricElement = asElement().querySelector(""section[data-vn-item-for=load-metrics-item] > div"");
+        loadMetricElement.appendChild(alertDynamicLoadProvider.asElement());
+        customLoadMetricElement.appendChild(alertDynamicLoadProvider2.asElement());
+    }
+
     @Override
     public void updateConfiguration(final ModelNode payload) {
         configurationForm.view(payload);
-        sslForm.view(failSafeGet(payload, ""ssl/configuration"")); //NON-NLS
+    }
+
+    @Override
+    public void updateDynamicLoadProvider(ModelNode payload) {
+        dynamicLoadProviderForm.view(payload);
+        // the dynamic-load-provider=configuration resource is a parent resource of the load-metrics tables
+        // disable the ""add"" buttons if there is no dynamic-load-provider=configuration
+        customLoadMetricTable.enableButton(0, payload.isDefined());
+        loadMetricTable.enableButton(0, payload.isDefined());
+        Elements.setVisible(alertDynamicLoadProvider.asElement(), !payload.isDefined());
+        Elements.setVisible(alertDynamicLoadProvider2.asElement(), !payload.isDefined());
+    }
+
+    @Override
+    public void updateCustomLoadMetrics(List<NamedNode> nodes) {
+        customLoadMetricForm.clear();
+        customLoadMetricTable.update(nodes);
+    }
+
+    @Override
+    public void updateLoadMetrics(List<NamedNode> nodes) {
+        loadMetricForm.clear();
+        loadMetricTable.update(nodes);
     }
 }",2018-08-01T20:53:55Z,309
"@@ -0,0 +1,154 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.modcluster;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.inject.Inject;
+
+import com.google.web.bindery.event.shared.EventBus;
+import elemental2.dom.HTMLElement;
+import org.jboss.hal.core.finder.ColumnActionFactory;
+import org.jboss.hal.core.finder.Finder;
+import org.jboss.hal.core.finder.FinderColumn;
+import org.jboss.hal.core.finder.ItemAction;
+import org.jboss.hal.core.finder.ItemActionFactory;
+import org.jboss.hal.core.finder.ItemDisplay;
+import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
+import org.jboss.hal.core.mvp.Places;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.MetadataRegistry;
+import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.meta.token.NameTokens;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.AsyncColumn;
+import org.jboss.hal.spi.Message;
+import org.jboss.hal.spi.MessageEvent;
+import org.jboss.hal.spi.Requires;
+
+import static java.util.stream.Collectors.toList;
+import static org.jboss.hal.client.configuration.subsystem.modcluster.AddressTemplates.MODCLUSTER_TEMPLATE;
+import static org.jboss.hal.client.configuration.subsystem.modcluster.AddressTemplates.PROXY_ADDRESS;
+import static org.jboss.hal.client.configuration.subsystem.modcluster.AddressTemplates.PROXY_TEMPLATE;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.resources.Ids.FORM;
+import static org.jboss.hal.resources.Ids.build;
+
+@AsyncColumn(Ids.MODCLUSTER_PROXY)
+@Requires(PROXY_ADDRESS)
+public class ProxyColumn extends FinderColumn<NamedNode> {
+
+    @Inject
+    protected ProxyColumn(Finder finder,
+            ColumnActionFactory columnActionFactory,
+            ItemActionFactory itemActionFactory,
+            EventBus eventBus,
+            Dispatcher dispatcher,
+            StatementContext statementContext,
+            MetadataRegistry metadataRegistry,
+            Places places,
+            Resources resources) {
+
+        super(new Builder<NamedNode>(finder, Ids.MODCLUSTER_PROXY, Names.PROXY)
+                .withFilter()
+                .filterDescription(resources.messages().proxyColumnFilterDescription())
+                .useFirstActionAsBreadcrumbHandler());
+
+        setItemsProvider((context, callback) -> {
+            ResourceAddress address = MODCLUSTER_TEMPLATE.resolve(statementContext);
+            Operation op = new Operation.Builder(address, READ_RESOURCE_OPERATION)
+                    .param(RECURSIVE, true).build();
+
+            dispatcher.execute(op, result -> {
+                List<NamedNode> proxies = result.get(PROXY).asPropertyList().stream()
+                        .map(NamedNode::new)
+                        .collect(toList());
+                callback.onSuccess(proxies);
+            });
+        });
+
+        addColumnAction(columnActionFactory.add(Ids.MODCLUSTER_PROXY_ADD, Names.PROXY, PROXY_TEMPLATE,
+                column -> {
+                    String id = build(Ids.MODCLUSTER_PROXY, ADD, FORM);
+                    Metadata metadata = metadataRegistry.lookup(PROXY_TEMPLATE);
+                    AddResourceDialog dialog = new AddResourceDialog(id,
+                            resources.messages().addResourceTitle(Names.PROXY), metadata,
+                            (name, modelNode) -> {
+                                if (modelNode != null) {
+                                    ResourceAddress address = AddressTemplates.PROXY_TEMPLATE
+                                            .resolve(statementContext, name);
+                                    Operation operation = new Operation.Builder(address, ADD)
+                                            .param(PROXY, name)
+                                            .payload(modelNode)
+                                            .build();
+                                    dispatcher.execute(operation, result -> {
+                                        MessageEvent.fire(eventBus,
+                                                Message.success(resources.messages()
+                                                        .addResourceSuccess(Names.PROXY, name)));
+                                        column.refresh(Ids.modclusterProxy(name));
+                                    });
+                                }
+                            });
+                    dialog.show();
+                }));
+        addColumnAction(columnActionFactory.refresh(Ids.MODCLUSTER_PROXY_REFRESH));
+
+        setItemRenderer(proxyNode -> new ItemDisplay<NamedNode>() {
+            @Override
+            public String getId() {
+                return Ids.modclusterProxy(proxyNode.getName());
+            }
+
+            @Override
+            public String getTitle() {
+                return proxyNode.getName();
+            }
+
+            @Override
+            public HTMLElement asElement() {
+                return ItemDisplay
+                        .withSubtitle(proxyNode.getName(), proxyNode.get(CONNECTOR).asString());
+            }
+
+            @Override
+            public String getFilterData() {
+                List<String> data = new ArrayList<>();
+                data.add(proxyNode.getName());
+                data.add(proxyNode.get(CONNECTOR).asString());
+                return String.join("" "", data);
+            }
+
+            @Override
+            public List<ItemAction<NamedNode>> actions() {
+                List<ItemAction<NamedNode>> actions = new ArrayList<>();
+                actions.add(itemActionFactory.view(places.selectedProfile(NameTokens.MODCLUSTER)
+                        .with(NAME, proxyNode.getName()).build()));
+                actions.add(itemActionFactory.remove(Names.PROXY, proxyNode.getName(),
+                        AddressTemplates.PROXY_TEMPLATE, ProxyColumn.this));
+                return actions;
+            }
+        });
+
+        setPreviewCallback(proxy -> new ProxyPreview(proxy));
+    }
+}",2018-08-01T20:53:55Z,310
"@@ -0,0 +1,39 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.modcluster;
+
+import org.jboss.hal.core.finder.PreviewAttributes;
+import org.jboss.hal.core.finder.PreviewContent;
+import org.jboss.hal.dmr.NamedNode;
+
+class ProxyPreview extends PreviewContent<NamedNode> {
+
+    ProxyPreview(final NamedNode proxyNode) {
+        super(proxyNode.getName());
+
+        PreviewAttributes<NamedNode> attributes = new PreviewAttributes<>(proxyNode);
+        attributes.append(""advertise"");
+        attributes.append(""advertise-socket"");
+        attributes.append(""balancer"");
+        attributes.append(""connector"");
+        attributes.append(""node-timeout"");
+        attributes.append(""proxies"");
+        attributes.append(""proxy-list"");
+        attributes.append(""sticky-session"");
+        attributes.append(""worker-timeout"");
+        previewBuilder().addAll(attributes);
+    }
+}",2018-08-01T20:53:55Z,311
"@@ -23,7 +23,7 @@
                 <h1>Configuration Changes</h1>
                 <p>${metadata.getDescription().getDescription()}</p>
                 <singleton-form id=""core-mgmt-conf-change-form"" title=""Configuration Changes""  auto-save=""true""
-                    add-handler=""${presenter.addConfigurationChanges())}"" reset=""true"" />
+                    add-handler=""${presenter.addConfigurationChanges()}"" reset=""true"" />
             </metadata>
         </item>
 ",2018-08-01T20:53:55Z,312
"@@ -16,20 +16,22 @@
   ~ limitations under the License.
   -->
 <view>
-    <vertical-navigation id=""modcluster-vertical-navigation"">
-        <item id=""modcluster-configuration-item"" title=""Configuration"" icon=""pficon pficon-settings"">
-            <metadata address=""/{selected.profile}/subsystem=modcluster/mod-cluster-config=configuration"">
+    <vertical-navigation id=""proxy-vertical-navigation"">
+        <item id=""proxy-item"" title=""Configuration"" icon=""pficon pficon-settings"">
+            <metadata address=""/{selected.profile}/subsystem=modcluster/proxy=*"">
                 <h1>Configuration</h1>
                 <p>${metadata.getDescription().getDescription()}</p>
-                <form id=""modcluster-configuration"" title=""Configuration"" auto-save=""true"" reset=""true"">
+                <form id=""proxy-conf-form"" title=""Configuration"" auto-save=""true"" reset=""true""
+                      name-resolver=""${presenter.getProxyName()}"">
                     <attributes>
                         <group id=""advertising"" title=""Advertising"">
+                            <attribute name=""advertise""/>
+                            <attribute name=""advertise-security-key""/>
+                            <attribute name=""advertise-socket""/>
+                            <attribute name=""balancer""/>
                             <attribute name=""connector""/>
                             <attribute name=""load-balancing-group""/>
-                            <attribute name=""balancer""/>
-                            <attribute name=""advertise-socket""/>
-                            <attribute name=""advertise-security-key""/>
-                            <attribute name=""advertise""/>
+                            <attribute name=""simple-load-provider""/>
                         </group>
                         <group id=""sessions"" title=""Sessions"">
                             <attribute name=""sticky-session""/>
@@ -39,43 +41,70 @@
                         <group id=""web-contexts"" title=""Web Contexts"">
                             <attribute name=""auto-enable-context""/>
                             <attribute name=""excluded-contexts""/>
+                            <attribute name=""session-draining-strategy""/>
                         </group>
                         <group id=""proxies"" title=""Proxies"">
-                            <attribute name=""proxy-url""/>
                             <attribute name=""proxies""/>
+                            <attribute name=""proxy-url""/>
+                            <attribute name=""ssl-context""/>
                         </group>
                         <group id=""networking"" title=""Networking"">
-                            <attribute name=""node-timeout""/>
-                            <attribute name=""socket-timeout""/>
-                            <attribute name=""stop-context-timeout""/>
-                            <attribute name=""max-attempts""/>
                             <attribute name=""flush-packets""/>
                             <attribute name=""flush-wait""/>
+                            <attribute name=""max-attempts""/>
+                            <attribute name=""node-timeout""/>
                             <attribute name=""ping""/>
+                            <attribute name=""smax""/>
+                            <attribute name=""socket-timeout""/>
+                            <attribute name=""status-interval""/>
+                            <attribute name=""stop-context-timeout""/>
                             <attribute name=""ttl""/>
                             <attribute name=""worker-timeout""/>
                         </group>
                     </attributes>
                 </form>
             </metadata>
         </item>
-
-        <item id=""modcluster-ssl-item"" title=""SSL"" icon=""fa fa-lock"">
-            <metadata
-                    address=""/{selected.profile}/subsystem=modcluster/mod-cluster-config=configuration/ssl=configuration"">
-                <h1>SSL</h1>
-                <p>${metadata.getDescription().getDescription()}</p>
-                <singleton-form id=""modcluster-ssl-form"" title=""SSL"" auto-save=""true"" reset=""true"">
-                    <attributes>
-                        <attribute name=""key-alias""/>
-                        <attribute name=""password""/>
-                        <attribute name=""ca-certificate-file""/>
-                        <attribute name=""certificate-key-file""/>
-                        <attribute name=""cipher-suite""/>
-                        <attribute name=""ca-revocation-url""/>
-                        <attribute name=""protocol""/>
-                    </attributes>
-                </singleton-form>
+        <item id=""custom-load-metrics-item"" title=""Custom Load Metrics"" icon=""pficon pficon-service"">
+            <metadata address=""/{selected.profile}/subsystem=modcluster/proxy=*/dynamic-load-provider=configuration/custom-load-metric=*"">
+            <h1>Custom Load Metrics</h1>
+            <p>${metadata.getDescription().getDescription()}</p>
+            <table id=""custom-load-metrics-table"" title=""Custom Load Metrics""
+                   form-ref=""custom-load-metrics-form"">
+                <actions>
+                    <action title=""${mbuiContext.resources().constants().add()}""
+                            handler=""${presenter.addCustomLoadMetric()}"" constraint=""add""/>
+                    <action title=""${mbuiContext.resources().constants().remove()}""
+                            handler=""${presenter.removeCustomLoadMetric(table)}"" scope=""selected"" constraint=""remove""/>
+                </actions>
+                <columns>
+                    <column name=""name"" value=""${row.getName()}""/>
+                </columns>
+            </table>
+            <form id=""custom-load-metrics-form"" title=""Custom Load Metric""
+                  on-save=""${presenter.saveCustomLoadMetric(form, changedValues)}""
+                  prepare-reset=""${presenter.prepareResetCustomLoadMetric(form)}"" />
+            </metadata>
+        </item>
+        <item id=""load-metrics-item"" title=""Load Metrics"" icon=""fa fa-map"">
+            <metadata address=""/{selected.profile}/subsystem=modcluster/proxy=*/dynamic-load-provider=configuration/load-metric=*"">
+            <h1>Load Metrics</h1>
+            <p>${metadata.getDescription().getDescription()}</p>
+            <table id=""load-metrics-table"" title=""Load Metrics""
+                   form-ref=""load-metrics-form"">
+                <actions>
+                    <action title=""${mbuiContext.resources().constants().add()}""
+                            handler=""${presenter.addLoadMetric()}"" constraint=""add""/>
+                    <action title=""${mbuiContext.resources().constants().remove()}""
+                            handler=""${presenter.removeLoadMetric(table)}"" scope=""selected"" constraint=""remove""/>
+                </actions>
+                <columns>
+                    <column name=""name"" value=""${row.getName()}""/>
+                </columns>
+            </table>
+            <form id=""load-metrics-form"" title=""Load Metric""
+                  on-save=""${presenter.saveLoadMetric(form, changedValues)}""
+                  prepare-reset=""${presenter.prepareResetLoadMetric(form)}"" />
             </metadata>
         </item>
     </vertical-navigation>",2018-08-01T20:53:55Z,313
"@@ -139,7 +139,7 @@ public Subsystems(Resources resources) {
                 .preview(resources.previews().configurationMicroprofileConfig())
                 .build());
         addConfiguration(new SubsystemMetadata.Builder(MODCLUSTER, Names.MODCLUSTER)
-                .token(NameTokens.MODCLUSTER)
+                .nextColumn(Ids.MODCLUSTER_PROXY)
                 .preview(resources.previews().configurationModcluster())
                 .build());
         addConfiguration(new SubsystemMetadata.Builder(NAMING, ""Naming"")",2018-08-01T20:53:55Z,37
"@@ -619,6 +619,7 @@ public interface ModelDescriptionConstants {
     String PROVIDER_MODULE = ""provider-module"";
     String PROVIDER_SASL_SERVER_FACTORY = ""provider-sasl-server-factory"";
     String PROXIES = ""proxies"";
+    String PROXY = ""proxy"";
     String PRUNE_EXPIRED = ""prune-expired"";
     String PRUNE_DISCONNECTED = ""prune-disconnected"";
     String QUERY = ""query"";",2018-08-01T20:53:55Z,109
"@@ -108,7 +108,7 @@ public final class ${context.subclass} extends ${context.base} {
                 () -> new Operation.Builder(${form.metadata.name}Template.resolve(mbuiContext.statementContext()), READ_RESOURCE_OPERATION).build(),
                 <#if form.metadata.singleton>
                     <#if form.addHandler??>
-                () -> ${form.addHandler}
+                () -> ${form.addHandler})
                     <#else>
                 () -> addSingleton(""${form.selector}"", ${form.title}, ${form.metadata.name}Template))
                     </#if>",2018-08-01T20:53:55Z,314
"@@ -121,6 +121,7 @@ public interface Ids {
     String CONTENT_TREE_SEARCH = ""content-tree-search"";
     String CONTENT_UNMANAGED_ADD = ""content-unmanaged-add"";
     String COOKIE = ""hal-cookie"";
+    String CUSTOM_LOAD_METRIC = ""custom-load-metric"";
     String DATA_SOURCE_ADD = ""ds-configuration-add"";
     String DATA_SOURCE_ADD_ACTIONS = ""ds-configuration-add-actions"";
     String DATA_SOURCE_CONFIGURATION = ""ds-configuration"";
@@ -439,6 +440,7 @@ public interface Ids {
     String JPA_RUNTIME_QUERY_CACHE_ITEM = ""jpa-runtime-query-cache-item"";
     String JPA_RUNTIME_STATISTICS_DISABLED = ""jpa-runtime-statistics-disabled"";
     String JPA_RUNTIME_TAB_CONTAINER = ""jpa-runtime-tab-container"";
+    String LOAD_METRIC = ""load-metric"";
     String LOCAL_CACHE = ""local-cache"";
     String LOG_FILE = ""lf"";
     String LOG_FILE_EDITOR = ""lf-editor"";
@@ -534,6 +536,9 @@ public interface Ids {
     String MESSAGING_SERVER_RUNTIME = ""msg-server-r"";
     String MESSAGING_SERVER_RUNTIME_REFRESH = ""msg-server-r-refresh"";
     String MESSAGING_SERVER_SETTINGS = ""msg-server-settings"";
+    String MODCLUSTER_PROXY = ""modcluster-proxy"";
+    String MODCLUSTER_PROXY_ADD = ""modcluster-proxy-add"";
+    String MODCLUSTER_PROXY_REFRESH = ""modcluster-proxy-refresh"";
     String MODEL_BROWSER = ""model-browser"";
     String MODEL_BROWSER_CREATE_SINGLETON_FORM = ""model-browser-create-singleton-form"";
     String MODEL_BROWSER_ROOT = ""model-browser-root"";
@@ -852,6 +857,10 @@ static String mailSession(String name) {
         return build(""ms"", name);
     }
 
+    static String modclusterProxy(String name) {
+        return build(""mcp"", name);
+    }
+
     static String messagingServer(String name) {
         return build(""msgs"", name);
     }",2018-08-01T20:53:55Z,111
"@@ -162,6 +162,7 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml duplicateAuthenticationModule();
     String duplicateAuthenticationModuleReason();
     String duplicateResource(String type);
+    SafeHtml dynamicLoadProviderWarning();
 
     String ejbFilterDescription();
     SafeHtml emptyModelNodeForm();
@@ -374,6 +375,7 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     String profileIncludes(String includes);
     SafeHtml profileNotUsedInServerGroups();
     SafeHtml profileUsedInServerGroups(SafeHtml serverGroupLinks);
+    String proxyColumnFilterDescription();
     SafeHtml propertiesHint();
     SafeHtml pruneDisconnectedQuestion();
     SafeHtml pruneExpiredQuestion();",2018-08-01T20:53:55Z,94
"@@ -86,6 +86,7 @@ public interface Names {
     String CUSTOM = ""Custom"";
     String CUSTOM_ACTION_HANDLER = ""Custom ActionHandler"";
     String CUSTOM_FORMATTER = ""Custom Formatter"";
+    String CUSTOM_LOAD_METRIC = ""Custom Load Metric"";
     String CUSTOM_MODIFIABLE_REALM = ""Custom Modifiable Realm"";
     String CUSTOM_POLICY = ""Custom Policy"";
 
@@ -102,6 +103,7 @@ public interface Names {
     String DISTRIBUTED_CACHE = ""Distributed Cache"";
     String DIVERT = ""Divert"";
     String DOMAIN_CONTROLLER = ""Domain Controller"";
+    String DYNAMIC_LOAD_PROVIDER = ""Dynamic Load Provider"";
 
     String EE = ""EE"";
     String EJB3 = ""EJB"";
@@ -192,6 +194,7 @@ public interface Names {
     String LDAP_REALM = ""LDAP Realm"";
     String LISTENER = ""Listener"";
     String LIVE_ONLY = ""Live Only"";
+    String LOAD_METRIC = ""Load Metric"";
     String LOCAL_CACHE = ""Local Cache"";
     String LOCAL_OUTBOUND_CONNECTION = ""Local Outbound Connection"";
     String LOCATION = ""Location"";
@@ -270,6 +273,7 @@ public interface Names {
     String PROFILES = ""Profiles"";
     String PROPERTIES_REALM = ""Properties Realm"";
     String PROTOCOL = ""Protocol"";
+    String PROXY = ""Proxy"";
 
     String QUERY = ""Query"";
     String QUERY_CACHE = ""Query Cache"";",2018-08-01T20:53:55Z,112
"@@ -133,6 +133,7 @@ dropSubscriptionsSuccess=All subscriptions successfully dropped form topic <stro
 duplicateAuthenticationModule=Unable to create authentication module.
 duplicateAuthenticationModuleReason=The security domain already has a JASPI authentication module. To add a classic authentication module, switch to the expert mode and remove the JSAP configuration first.
 duplicateResource=A {0} with this name already exists.
+dynamicLoadProviderWarning=To use the Load Metric feature, it is required to have a Dynamic Load Provider, but it doesn''t exist. Use the menu on the left to navigate to the Dynamic Load Provider and add it.
 ejbFilterDescription=Filter by: name, type, deployment
 emptyModelNodeForm=<strong>No attributes.</strong> This resource doesn&#39;t contain attributes or only complex attributes which are currently not supported.
 enableSSLConfirmationDescription=Confirm the values below. When you choose to continue, all resources will be created and configured.
@@ -328,6 +329,7 @@ pauseQueueSuccess=Queue <strong>{0}</strong> successfully paused.
 profileIncludes=The profile includes the following profiles: {0}.
 profileNotUsedInServerGroups=The profile is not used in any server group.
 profileUsedInServerGroups=The profile is used in the following server groups: {0}.
+proxyColumnFilterDescription=Filter by: Proxy name or connector.
 propertiesHint=Add new properties as <em>key=value</em> pairs. Press <abbr class=""key"" title=""RETURN"">&crarr;</abbr> to add and <abbr class=""key"" title=""BACKSPACE"">&#x232B</abbr> to remove them.
 pruneDisconnectedQuestion=Are you sure you want to prune all disconnected hosts? This will prune information about all disconnected hosts.
 pruneExpiredQuestion=Are you sure you want to prune expired hosts? This will prune information about disconnected hosts whose last activity was more than a week ago.",2018-08-01T20:53:55Z,94
"@@ -29,6 +29,7 @@ disableSSLManagementError=Houve um erro ao tentar remover o suporte a SSL do Con
 disableSSLUndertowQuestion=Voc\u00ea quer desativar o SSL do servi\u00e7o HTTPS do Undertow <strong>{0}</strong> ? Voc\u00ea dever\u00e1 escolher um Security Realm da lista abaixo, pois ele \u00e9 um atributo requerido quando se remove o SSL Context.
 disableSSLUndertowSuccess=O SSL foi desativado com sucesso do servi\u00e7o HTTPS do Undertow <strong>{0}</strong>.
 disableSSLUndertowError=Houve um erro ao tentar remover o suporte a SSL do servi\u00e7o HTTPS do Undertow <strong>{0}</strong>. Causa: {0}
+dynamicLoadProviderWarning=Para usar a funcionalidade de Load Metrics, é necessário ter um Dynamic Load Provider, mas ele não existe. Use o menu da esquerda para navegar para o item Dynamic Load Provider e adicione ele.
 ejbFilterDescription=Filtrar por: nome, tipo ou deployment
 enableSSLConfirmationDescription=Confirme os valores abaixo. Quando continuar, todos os recursos ser\u00e3o criados e configurados.
 enableManagementSSLDescription=Esta tarefa ir\u00e1 proteger a interface de gerenciamento web ao usar um certificado para criptografar a comunica\u00e7\u00e3o entre o browser e o Wildfly apenas. As configura\u00e7\u00f5es da interface nativa n\u00e3o ser\u00e1 modificada. Depois desta opera\u00e7\u00e3o for finalizada, voc\u00ea poder\u00e1 desabilitar o SSL da interface de gerenciamento, mas os recursos do subsistema elytron n\u00e3o ser\u00e3o removidos. Se voc\u00ea desejar alterar qualquer configura\u00e7\u00e3o aqui realizada, poder\u00e1 usar o model browser ou jboss-cli.sh.
@@ -96,6 +97,7 @@ patchRestartHostControllerQuestion=<p>O servidor de controle <strong>{0}</strong
 patchRestartDomainControllerQuestion=<p>O servidor de controle de dom\u00ednio <strong>{0}</strong> precisa ser reiniciado. Uma corre\u00e7\u00e3o n\u00e3o pode ser adicionada ou removida antes do servidor de controle ser reiniciado.</p><p>Voc\u00ea tem certeza de que quer reiniciar o servi\u00e7o de controle <strong>{0}</strong></p> ? <p>O console de gerenciamento web ficar\u00e1 indispon\u00edvel at\u00e9 que o servidor de controle de dom\u00ednio (Domain Controller) seja iniciado corretamente.</p>
 patchRestartStandaloneQuestion=<p>O servidor precisa ser reiniciado. Uma corre\u00e7\u00e3o n\u00e3o pode ser adicionada ou removida antes do servidor reiniciado.</p><p>Voc\u00ea tem certeza de que quer reiniciar o servidor ?</p><p>O console de gerenciamento web ficar\u00e1 indispon\u00edvel at\u00e9 que o servidor seja iniciado corretamente.</p>
 patchStopAllServersQuestion=<p>A aplica\u00e7\u00e3o da corre\u00e7\u00e3o ir\u00e1 substituir arquivos da instala\u00e7\u00e3o, para evitar conflitos e problemas para as aplica\u00e7\u00f5es instaladas e em funcionamento nos servidores \u00e9 altamente recomend\u00e1vel que pare todos os servidores em funcionamento sob o controlador <strong>{1}</strong>.</p><p>Voc\u00ea quer parar os seguintes servidores <strong>{0}</strong> do servi\u00e7o de controle (Host Controller) <strong>{1}</strong> ?</p><p>Cada servidor ser\u00e1 parado imediatamente.</p>
+proxyColumnFilterDescription=Filtrar por: Nome do Proxy ou conector.
 reloadError=Falha ao recarregar <strong>{0}</strong>. Causa: {1}.
 reloadCRLError=Falha ao recarregar a lista de revoga\u00e7\u00e3o de certificados do Trust Manager <strong>{0}</strong>. Causa: {1}.
 reloadCRLSuccess=A lista de revoga\u00e7\u00e3o de certificados do Trust Manager <strong>{0}</strong> foi recarregada com sucesso.",2018-08-01T20:53:55Z,94
"@@ -38,7 +38,7 @@ enum ServletContainerSetting {
     final String resource;
     final String icon;
 
-    ServletContainerSetting(final String baseId, final String type, final String resource, final String icon) {
+    ServletContainerSetting(String baseId, String type, String resource, String icon) {
         this.baseId = baseId;
         this.type = type;
         this.resource = resource;",2018-06-26T18:10:17Z,104
"@@ -72,23 +72,23 @@ class JpaPreview extends PreviewContent<JpaStatistic> {
                 .primaryAction(resources.constants().gotoDeployment(), () -> placeManager.revealPlace(placeRequest))
                 .build();
 
-        openedSessions = new Utilization(resources.constants().opened(), resources.constants().sessions(),
+        openedSessions = new Utilization(resources.constants().opened(), Names.SESSIONS,
                 environment.isStandalone(), false);
-        closedSessions = new Utilization(resources.constants().closed(), resources.constants().sessions(),
+        closedSessions = new Utilization(resources.constants().closed(), Names.SESSIONS,
                 environment.isStandalone(), false);
 
         getHeaderContainer().appendChild(refresh = refreshLink(() -> update(jpaStatistic)));
         previewBuilder()
                 .add(noStatistics)
-                .add(header = h(2).textContent(resources.constants().sessions()).asElement())
+                .add(header = h(2).textContent(Names.SESSIONS).asElement())
                 .add(openedSessions)
                 .add(closedSessions);
 
         Elements.setVisible(noStatistics.asElement(), false);
     }
 
     @Override
-    public void update(final JpaStatistic jpaStatistics) {
+    public void update(JpaStatistic jpaStatistics) {
         Operation operation = new Operation.Builder(jpaStatistics.getAddress(), READ_RESOURCE_OPERATION)
                 .param(INCLUDE_RUNTIME, true)
                 .param(RECURSIVE, true)
@@ -97,7 +97,7 @@ public void update(final JpaStatistic jpaStatistics) {
     }
 
     @SuppressWarnings(""HardCodedStringLiteral"")
-    private void internalUpdate(final JpaStatistic statistic) {
+    private void internalUpdate(JpaStatistic statistic) {
         boolean statisticsEnabled = statistic.isStatisticsEnabled();
 
         Elements.setVisible(noStatistics.asElement(), !statisticsEnabled);",2018-06-26T18:10:17Z,105
"@@ -24,22 +24,23 @@
 
 class LogFile extends ModelNode {
 
+    // TODO Move to ModelDescriptionConstants
     private static final String FILE_NAME = ""file-name"";
     private static final String FILE_SIZE = ""file-size"";
     private static final String LAST_MODIFIED_DATE = ""last-modified-date"";
     private static final String LAST_MODIFIED_TIMESTAMP = ""last-modified-timestamp"";
 
-    LogFile(final ModelNode node) {
+    LogFile(ModelNode node) {
         set(node);
     }
 
-    LogFile(final String name, final ModelNode node) {
+    LogFile(String name, ModelNode node) {
         set(node);
         get(FILE_NAME).set(name);
     }
 
     public String getFilename() {
-        return get(FILE_NAME).asString(); //NON-NLS
+        return get(FILE_NAME).asString();
     }
 
     public Date getLastModifiedDate() {",2018-06-26T18:10:17Z,74
"@@ -19,13 +19,7 @@
 import java.util.List;
 
 import javax.inject.Inject;
-import javax.inject.Provider;
 
-import com.google.gwt.safehtml.shared.SafeHtml;
-import com.google.web.bindery.event.shared.EventBus;
-import elemental2.dom.HTMLElement;
-import org.jboss.hal.ballroom.dialog.Dialog;
-import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.config.Environment;
 import org.jboss.hal.core.deployment.DeploymentResource;
 import org.jboss.hal.core.finder.ColumnActionFactory;
@@ -35,33 +29,21 @@
 import org.jboss.hal.core.finder.ItemAction;
 import org.jboss.hal.core.finder.ItemActionFactory;
 import org.jboss.hal.core.finder.ItemDisplay;
-import org.jboss.hal.core.mbui.form.OperationFormBuilder;
 import org.jboss.hal.core.mvp.Places;
 import org.jboss.hal.core.runtime.server.ServerActions;
 import org.jboss.hal.dmr.Composite;
 import org.jboss.hal.dmr.CompositeResult;
-import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Operation;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
-import org.jboss.hal.flow.Progress;
-import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.StatementContext;
-import org.jboss.hal.meta.processing.MetadataProcessor;
-import org.jboss.hal.meta.security.Constraint;
 import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
 import org.jboss.hal.spi.AsyncColumn;
-import org.jboss.hal.spi.Footer;
-import org.jboss.hal.spi.Message;
-import org.jboss.hal.spi.MessageEvent;
 import org.jboss.hal.spi.Requires;
 
-import static org.jboss.gwt.elemento.core.Elements.div;
-import static org.jboss.gwt.elemento.core.Elements.p;
-import static org.jboss.hal.ballroom.dialog.Dialog.Size.MEDIUM;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_DEPLOYMENT_ADDRESS;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_DEPLOYMENT_TEMPLATE;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_SUBDEPLOYMENT_TEMPLATE;
@@ -71,51 +53,16 @@
 @Requires(WEB_DEPLOYMENT_ADDRESS)
 public class DeploymentColumn extends FinderColumn<DeploymentResource> {
 
-    /**
-     * The regular Dialogs in DialogFactory uses button with a simple Callback that closes the dialog, even when
-     * the form contains errors as ""required fields"" not set. This custom dialog uses a
-     * <code>Dialog.ResultCallback</code>
-     * that returns a boolean, thus the dialog is closed only if there are no form errors.
-     */
-    private static Dialog buildConfirmation(Resources resources, String title, SafeHtml question, HTMLElement element,
-            Dialog.ResultCallback confirm) {
-        HTMLElement content;
-        if (element != null) {
-            content = div()
-                    .add(p().innerHtml(question))
-                    .add(element)
-                    .asElement();
-        } else {
-            content = p().innerHtml(question).asElement();
-        }
-
-        return new Dialog.Builder(title)
-                .primary(resources.constants().invalidate(), confirm)
-                .secondary(resources.constants().cancel(), null)
-                .size(MEDIUM)
-                .add(content)
-                .build();
-    }
-
-    private Dispatcher dispatcher;
-    private EventBus eventBus;
-    private Resources resources;
-    private Provider<Progress> progress;
-    private MetadataProcessor metadataProcessor;
-
     @Inject
     public DeploymentColumn(Finder finder,
             FinderPathFactory finderPathFactory,
             ColumnActionFactory columnActionFactory,
             ItemActionFactory itemActionFactory,
             Dispatcher dispatcher,
-            EventBus eventBus,
             Places places,
-            MetadataProcessor metadataProcessor,
             StatementContext statementContext,
             Environment environment,
             ServerActions serverActions,
-            @Footer Provider<Progress> progress,
             Resources resources) {
 
         super(new Builder<DeploymentResource>(finder, Ids.UNDERTOW_RUNTIME_DEPLOYMENT, Names.DEPLOYMENT)
@@ -142,91 +89,33 @@ public DeploymentColumn(Finder finder,
                         callback.onSuccess(deployments);
                     });
                 })
-                .onPreview(item -> new DeploymentPreview(item, finderPathFactory, places, resources, environment,
-                        dispatcher, statementContext, serverActions))
-                .useFirstActionAsBreadcrumbHandler()
-                .withFilter()
-                .showCount()
-        );
-
-        this.dispatcher = dispatcher;
-        this.eventBus = eventBus;
-        this.resources = resources;
-        this.progress = progress;
-        this.metadataProcessor = metadataProcessor;
-
-        setItemRenderer(item -> new ItemDisplay<DeploymentResource>() {
-            @Override
-            public String getId() {
-                return Ids.asId(item.getPath());
-            }
-
-            @Override
-            public String getTitle() {
-                return item.getPath();
-            }
-
-            @Override
-            public List<ItemAction<DeploymentResource>> actions() {
-                List<ItemAction<DeploymentResource>> actions = new ArrayList<>();
-                actions.add(itemActionFactory.view(places.selectedProfile(NameTokens.UNDERTOW_RUNTIME_DEPLOYMENT_VIEW)
-                        .with(DEPLOYMENT, item.getDeployment())
-                        .with(SUBDEPLOYMENT, item.getSubdeployment())
-                        .build()));
-                actions.add(new ItemAction.Builder<DeploymentResource>()
-                        .title(resources.constants().invalidateSession())
-                        .constraint(Constraint.executable(WEB_DEPLOYMENT_TEMPLATE, INVALIDATE_SESSION_OPERATION))
-                        .handler(itm -> invalidateSession(itm))
-                        .build());
-                return actions;
-            }
-        });
-    }
-
-    private void invalidateSession(DeploymentResource item) {
-        metadataProcessor.lookup(WEB_DEPLOYMENT_TEMPLATE, progress.get(),
-                new MetadataProcessor.MetadataCallback() {
+                .itemRenderer(item -> new ItemDisplay<DeploymentResource>() {
                     @Override
-                    public void onMetadata(Metadata metadata) {
-                        String id = Ids.build(INVALIDATE_SESSION_OPERATION, Ids.FORM);
-                        Form<ModelNode> form = new OperationFormBuilder<>(id, metadata, INVALIDATE_SESSION_OPERATION)
-                                .build();
+                    public String getId() {
+                        return Ids.asId(item.getPath());
+                    }
 
-                        // uses a custom dialog that only closes a dialog if there are no form errors
-                        Dialog dialog = buildConfirmation(resources,
-                                resources.messages().invalidateSessionTitle(),
-                                resources.messages().invalidateSessionQuestion(),
-                                form.asElement(), () -> {
-                                    boolean formOk = form.save();
-                                    if (formOk) {
-                                        String sessionId = form.<String>getFormItem(SESSION_ID).getValue();
-                                        Operation operation = new Operation.Builder(item.getAddress(),
-                                                INVALIDATE_SESSION_OPERATION)
-                                                .param(SESSION_ID, sessionId)
-                                                .build();
-                                        dispatcher.execute(operation, result -> {
-                                            if (result.asBoolean()) {
-                                                MessageEvent.fire(eventBus, Message.success(
-                                                        resources.messages().invalidateSessionSuccess(sessionId)));
-                                            } else {
-                                                MessageEvent.fire(eventBus, Message.warning(
-                                                        resources.messages().invalidateSessionNotExist(sessionId)));
-                                            }
-                                        }, (operation1, failure) -> MessageEvent.fire(eventBus, Message.error(
-                                                resources.messages().invalidateSessionError(sessionId, failure))));
-                                    }
-                                    return formOk;
-                                });
-                        dialog.show();
-                        form.edit(new ModelNode());
+                    @Override
+                    public String getTitle() {
+                        return item.getPath();
                     }
 
                     @Override
-                    public void onError(Throwable error) {
-                        MessageEvent
-                                .fire(eventBus,
-                                        Message.error(resources.messages().metadataError(), error.getMessage()));
+                    public List<ItemAction<DeploymentResource>> actions() {
+                        List<ItemAction<DeploymentResource>> actions = new ArrayList<>();
+                        actions.add(itemActionFactory.view(
+                                places.selectedProfile(NameTokens.UNDERTOW_RUNTIME_DEPLOYMENT_VIEW)
+                                        .with(DEPLOYMENT, item.getDeployment())
+                                        .with(SUBDEPLOYMENT, item.getSubdeployment())
+                                        .build()));
+                        return actions;
                     }
-                });
+                })
+                .onPreview(item -> new DeploymentPreview(item, finderPathFactory, places, resources, environment,
+                        dispatcher, statementContext, serverActions))
+                .useFirstActionAsBreadcrumbHandler()
+                .withFilter()
+                .showCount()
+        );
     }
 }",2018-06-26T18:10:17Z,72
"@@ -15,49 +15,74 @@
  */
 package org.jboss.hal.client.runtime.subsystem.undertow;
 
+import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 import javax.inject.Inject;
+import javax.inject.Provider;
 
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.client.annotations.NameToken;
 import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
 import com.gwtplatform.mvp.client.proxy.ProxyPlace;
 import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
+import org.jboss.hal.ballroom.dialog.DialogFactory;
+import org.jboss.hal.core.SuccessfulOutcome;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderPath;
 import org.jboss.hal.core.finder.FinderPathFactory;
 import org.jboss.hal.core.mvp.ApplicationFinderPresenter;
 import org.jboss.hal.core.mvp.HalView;
 import org.jboss.hal.core.mvp.HasPresenter;
 import org.jboss.hal.core.mvp.SupportsExpertMode;
+import org.jboss.hal.dmr.Composite;
+import org.jboss.hal.dmr.CompositeResult;
+import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.NamedNode;
 import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.Property;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.flow.FlowContext;
+import org.jboss.hal.flow.Progress;
+import org.jboss.hal.flow.Task;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Footer;
+import org.jboss.hal.spi.Message;
+import org.jboss.hal.spi.MessageEvent;
 import org.jboss.hal.spi.Requires;
+import org.jetbrains.annotations.NotNull;
+import rx.Completable;
 
+import static java.util.stream.Collectors.toList;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_DEPLOYMENT_ADDRESS;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_DEPLOYMENT_TEMPLATE;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_SUBDEPLOYMENT_ADDRESS;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_SUBDEPLOYMENT_TEMPLATE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
 import static org.jboss.hal.dmr.ModelNodeHelper.failSafePropertyList;
+import static org.jboss.hal.flow.Flow.series;
 
 public class DeploymentPresenter
         extends ApplicationFinderPresenter<DeploymentPresenter.MyView, DeploymentPresenter.MyProxy>
         implements SupportsExpertMode {
 
+    private static final String SERVLETS = ""servlets"";
+    private static final String WEBSOCKETS = ""websockets"";
+    private static final String SESSION_IDS = ""session-ids"";
+    private static final String SESSIONS = ""sessions"";
+
     private final Dispatcher dispatcher;
     private final FinderPathFactory finderPathFactory;
     private final StatementContext statementContext;
     private final Resources resources;
+    private final Provider<Progress> progress;
     private String deploymentName;
     private String subdeploymentName;
 
@@ -70,12 +95,14 @@ public DeploymentPresenter(
             Dispatcher dispatcher,
             FinderPathFactory finderPathFactory,
             StatementContext statementContext,
-            Resources resources) {
+            Resources resources,
+            @Footer Provider<Progress> progress) {
         super(eventBus, view, myProxy, finder);
         this.dispatcher = dispatcher;
         this.finderPathFactory = finderPathFactory;
         this.statementContext = statementContext;
         this.resources = resources;
+        this.progress = progress;
     }
 
     @Override
@@ -107,26 +134,123 @@ public FinderPath finderPath() {
 
     @Override
     protected void reload() {
-        ResourceAddress address;
-        if (subdeploymentName == null) {
-            address = WEB_DEPLOYMENT_TEMPLATE.resolve(statementContext, deploymentName);
-        } else {
-            address = WEB_SUBDEPLOYMENT_TEMPLATE.resolve(statementContext, deploymentName, subdeploymentName);
-        }
-        Operation operation = new Operation.Builder(address, READ_RESOURCE_OPERATION)
+        ResourceAddress address = deploymentAddress();
+
+        // task 1: read sessions ids, servlets and websockets
+        Operation readResourceOp = new Operation.Builder(address, READ_RESOURCE_OPERATION)
                 .param(INCLUDE_RUNTIME, true)
                 .param(RECURSIVE, true)
                 .build();
-        dispatcher.execute(operation, result -> {
-            getView().updateServlets(asNamedNodes(failSafePropertyList(result, SERVLET)));
-            getView().updateWebsockets(asNamedNodes(failSafePropertyList(result, WEBSOCKET)));
-        });
+        Operation listSessionsOp = new Operation.Builder(address, LIST_SESSIONS).build();
+        Task<FlowContext> task1 = context -> dispatcher.execute(new Composite(readResourceOp, listSessionsOp))
+                .doOnSuccess((CompositeResult result) -> {
+                    ModelNode readResourceResult = result.step(0).get(RESULT);
+                    List<NamedNode> servlets = asNamedNodes(failSafePropertyList(readResourceResult, SERVLET));
+                    List<NamedNode> websockets = asNamedNodes(failSafePropertyList(readResourceResult, WEBSOCKET));
+
+                    // sorted session ids (important for step 2!)
+                    ModelNode listSessionsResult = result.step(1).get(RESULT);
+                    List<String> sessionIds = listSessionsResult.isDefined()
+                            ? listSessionsResult.asList().stream().map(ModelNode::asString).sorted().collect(toList())
+                            : Collections.emptyList();
+
+                    context.set(SERVLETS, servlets);
+                    context.set(WEBSOCKETS, websockets);
+                    context.set(SESSION_IDS, sessionIds);
+                })
+                .toCompletable();
+
+        // task 2: read session creation and last access times
+        Task<FlowContext> task2 = context -> {
+            List<String> sessionIds = context.get(SESSION_IDS);
+            if (sessionIds.isEmpty()) {
+                context.set(SESSIONS, Collections.emptyList());
+                return Completable.complete();
+            } else {
+                List<Operation> operations = new ArrayList<>();
+                for (String id : sessionIds) {
+                    operations.add(new Operation.Builder(address, GET_SESSION_CREATION_TIME)
+                            .param(SESSION_ID, id)
+                            .build());
+                    operations.add(new Operation.Builder(address, GET_SESSION_LAST_ACCESSED_TIME)
+                            .param(SESSION_ID, id)
+                            .build());
+                }
+                return dispatcher.execute(new Composite(operations))
+                        .doOnSuccess((CompositeResult result) -> {
+                            int i = 0;
+                            List<Session> sessions = new ArrayList<>();
+                            for (String sessionId : sessionIds) {
+                                ModelNode modelNode = new ModelNode();
+                                if (result.step(i).isDefined() && result.step(i).get(RESULT).isDefined()) {
+                                    modelNode.get(CREATION_TIME).set(result.step(i).get(RESULT));
+                                }
+                                if (result.step(i + 1).isDefined() && result.step(i + 1).get(RESULT).isDefined()) {
+                                    modelNode.get(LAST_ACCESSED_TIME).set(result.step(i + 1).get(RESULT));
+                                }
+                                sessions.add(new Session(sessionId, modelNode));
+                                i++;
+                            }
+                            context.set(SESSIONS, sessions);
+                        })
+                        .toCompletable();
+            }
+        };
+
+        series(new FlowContext(progress.get()), task1, task2)
+                .subscribe(new SuccessfulOutcome<FlowContext>(getEventBus(), resources) {
+                    @Override
+                    public void onSuccess(FlowContext context) {
+                        List<Session> sessions = context.get(SESSIONS);
+                        List<NamedNode> servlets = context.get(SERVLETS);
+                        List<NamedNode> websockets = context.get(WEBSOCKETS);
+
+                        getView().updateSessions(sessions);
+                        getView().updateServlets(servlets);
+                        getView().updateWebsockets(websockets);
+                    }
+                });
     }
 
     StatementContext getStatementContext() {
         return statementContext;
     }
 
+    void invalidateSession(Session session) {
+        DialogFactory.showConfirmation(resources.constants().invalidateSession(),
+                resources.messages().invalidateSessionQuestion(), () -> {
+                    Operation operation = new Operation.Builder(deploymentAddress(), INVALIDATE_SESSION)
+                            .param(SESSION_ID, session.getSessionId())
+                            .build();
+                    dispatcher.execute(operation,
+                            result -> {
+                                MessageEvent.fire(getEventBus(), Message.success(
+                                        resources.messages().invalidateSessionSuccess()));
+                                reload();
+                            },
+                            (op, failure) -> MessageEvent.fire(getEventBus(),
+                                    Message.error(resources.messages().invalidateSessionError(failure))));
+                });
+    }
+
+    void listSessionAttributes(Session session) {
+        Operation operation = new Operation.Builder(deploymentAddress(), LIST_SESSION_ATTRIBUTES)
+                .param(SESSION_ID, session.getSessionId())
+                .build();
+        dispatcher.execute(operation, result -> getView().updateSessionAttributes(result.asPropertyList()));
+    }
+
+    @NotNull
+    private ResourceAddress deploymentAddress() {
+        ResourceAddress address;
+        if (subdeploymentName == null) {
+            address = WEB_DEPLOYMENT_TEMPLATE.resolve(statementContext, deploymentName);
+        } else {
+            address = WEB_SUBDEPLOYMENT_TEMPLATE.resolve(statementContext, deploymentName, subdeploymentName);
+        }
+        return address;
+    }
+
 
     // @formatter:off
     @ProxyCodeSplit
@@ -136,6 +260,8 @@ public interface MyProxy extends ProxyPlace<DeploymentPresenter> {
     }
 
     public interface MyView extends HalView, HasPresenter<DeploymentPresenter> {
+        void updateSessions(List<Session> sessions);
+        void updateSessionAttributes(List<Property> attributes);
         void updateServlets(List<NamedNode> model);
         void updateWebsockets(List<NamedNode> model);
     }",2018-06-26T18:10:17Z,79
"@@ -132,7 +132,7 @@ class DeploymentPreview extends PreviewContent<DeploymentResource> {
                 .build();
         registerAttachable(sessions);
         sessionsElement = section()
-                .add(h(2, resources.constants().sessions()))
+                .add(h(2, Names.SESSIONS))
                 .add(sessions)
                 .asElement();
 ",2018-06-26T18:10:17Z,25
"@@ -20,35 +20,43 @@
 import javax.inject.Inject;
 
 import elemental2.dom.HTMLElement;
+import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.hal.ballroom.Format;
 import org.jboss.hal.ballroom.VerticalNavigation;
 import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.table.Scope;
 import org.jboss.hal.ballroom.table.Table;
 import org.jboss.hal.core.mbui.form.ModelNodeForm;
 import org.jboss.hal.core.mbui.table.ModelNodeTable;
 import org.jboss.hal.core.mvp.HalViewImpl;
 import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.Property;
 import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.security.Constraint;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
 
-import static org.jboss.gwt.elemento.core.Elements.h;
-import static org.jboss.gwt.elemento.core.Elements.p;
-import static org.jboss.gwt.elemento.core.Elements.section;
+import static org.jboss.gwt.elemento.core.Elements.*;
+import static org.jboss.gwt.elemento.core.Elements.table;
 import static org.jboss.hal.ballroom.LayoutBuilder.column;
 import static org.jboss.hal.ballroom.LayoutBuilder.row;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_DEPLOYMENT_SERVLET_TEMPLATE;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_DEPLOYMENT_TEMPLATE;
 import static org.jboss.hal.client.runtime.subsystem.undertow.AddressTemplates.WEB_DEPLOYMENT_WEBSOCKETS_TEMPLATE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
-import static org.jboss.hal.resources.CSS.pfIcon;
+import static org.jboss.hal.resources.CSS.*;
+import static org.jboss.hal.resources.CSS.table;
 import static org.jboss.hal.resources.Ids.FORM;
+import static org.jboss.hal.resources.Ids.SESSION;
 import static org.jboss.hal.resources.Ids.UNDERTOW_RUNTIME;
 
 public class DeploymentView extends HalViewImpl implements DeploymentPresenter.MyView {
 
+    private final Table<Session> sessionTable;
+    private final HTMLElement attributesElement;
+    private final HTMLElement attributesTableBody;
     private final Table<NamedNode> servletsTable;
     private final Form<NamedNode> servletsForm;
     private final Table<NamedNode> websocketsTable;
@@ -57,8 +65,40 @@ public class DeploymentView extends HalViewImpl implements DeploymentPresenter.M
     private DeploymentPresenter presenter;
 
     @Inject
-    @SuppressWarnings({""ConstantConditions"", ""HardCodedStringLiteral""})
-    public DeploymentView(final MetadataRegistry metadataRegistry, final Resources resources) {
+    public DeploymentView(MetadataRegistry metadataRegistry, Resources resources) {
+
+        // ------------------------------------------------------ sessions
+
+        String id = Ids.build(UNDERTOW, DEPLOYMENT, SESSION);
+        sessionTable = new ModelNodeTable.Builder<Session>(id, Metadata.empty())
+                .button(resources.constants().reload(), table -> presenter.reload(),
+                        Constraint.executable(WEB_DEPLOYMENT_TEMPLATE, LIST_SESSIONS))
+                .button(resources.constants().invalidateSession(),
+                        table -> presenter.invalidateSession(table.selectedRow()), Scope.SELECTED,
+                        Constraint.executable(WEB_DEPLOYMENT_TEMPLATE, INVALIDATE_SESSION))
+                .column(SESSION_ID, Names.SESSION_ID, (cell, type, row, meta) -> row.getName())
+                .column(CREATION_TIME, resources.constants().creationTime(),
+                        (cell, type, row, meta) -> Format.shortDateTime(row.getCreationTime()))
+                .column(LAST_ACCESSED_TIME, resources.constants().lastAccessedTime(),
+                        (cell, type, row, meta) -> Format.shortDateTime(row.getLastAccessTime()))
+                .build();
+
+        attributesElement = div().css(marginTopLarge)
+                .add(h(2, resources.constants().attributes()))
+                .add(table().css(table, tableStriped, attributes)
+                        .add(thead()
+                                .add(tr()
+                                        .add(th().textContent(Names.NAME))
+                                        .add(th().textContent(Names.VALUE))))
+                        .add(attributesTableBody = tbody().asElement()))
+                .asElement();
+        Elements.setVisible(attributesElement, false);
+
+        HTMLElement sessionSection = section()
+                .add(h(1).textContent(Names.SESSIONS))
+                .add(sessionTable)
+                .add(attributesElement)
+                .asElement();
 
         // ------------------------------------------------------ servlets
 
@@ -108,14 +148,17 @@ public DeploymentView(final MetadataRegistry metadataRegistry, final Resources r
                 .add(websocketsForm)
                 .asElement();
 
+        // ------------------------------------------------------ navigation & root
+
         navigation = new VerticalNavigation();
-        navigation.addPrimary(Ids.build(UNDERTOW, DEPLOYMENT, SERVLET, Ids.ITEM), Names.SERVLET, pfIcon(""enterprise""),
-                servletSection);
+        navigation.addPrimary(Ids.build(UNDERTOW, DEPLOYMENT, SESSION, Ids.ITEM), Names.SESSIONS,
+                pfIcon(""users""), sessionSection);
+        navigation.addPrimary(Ids.build(UNDERTOW, DEPLOYMENT, SERVLET, Ids.ITEM), Names.SERVLET,
+                fontAwesome(""code""), servletSection);
         navigation.addPrimary(Ids.build(UNDERTOW, DEPLOYMENT, WEBSOCKET, Ids.ITEM), Names.WEBSOCKETS,
-                pfIcon(""replicator""),
-                websocketSection);
+                fontAwesome(""exchange""), websocketSection);
 
-        registerAttachable(navigation, servletsTable, servletsForm, websocketsTable, websocketsForm);
+        registerAttachable(navigation, sessionTable, servletsTable, servletsForm, websocketsTable, websocketsForm);
 
         initElement(row()
                 .add(column()
@@ -126,23 +169,48 @@ public DeploymentView(final MetadataRegistry metadataRegistry, final Resources r
     @SuppressWarnings(""ConstantConditions"")
     public void attach() {
         super.attach();
+        sessionTable.onSelectionChange(table -> {
+            if (table.hasSelection()) {
+                presenter.listSessionAttributes(table.selectedRow());
+            } else {
+                Elements.setVisible(attributesElement, false);
+            }
+        });
         servletsTable.bindForm(servletsForm);
         websocketsTable.bindForm(websocketsForm);
     }
 
     @Override
-    public void setPresenter(final DeploymentPresenter presenter) {
+    public void setPresenter(DeploymentPresenter presenter) {
         this.presenter = presenter;
     }
 
     @Override
-    public void updateServlets(final List<NamedNode> model) {
+    public void updateSessions(List<Session> sessions) {
+        sessionTable.update(sessions);
+        Elements.setVisible(attributesElement, sessionTable.hasSelection());
+    }
+
+    @Override
+    public void updateSessionAttributes(List<Property> attributes) {
+        Elements.removeChildrenFrom(attributesTableBody);
+        for (Property attribute : attributes) {
+            attributesTableBody.appendChild(tr()
+                    .add(td().textContent(attribute.getName()))
+                    .add(td().textContent(attribute.getValue().asString()))
+                    .asElement());
+        }
+        Elements.setVisible(attributesElement, !attributes.isEmpty());
+    }
+
+    @Override
+    public void updateServlets(List<NamedNode> model) {
         servletsForm.clear();
         servletsTable.update(model);
     }
 
     @Override
-    public void updateWebsockets(final List<NamedNode> model) {
+    public void updateWebsockets(List<NamedNode> model) {
         websocketsForm.clear();
         websocketsTable.update(model);
     }",2018-06-26T18:10:17Z,62
"@@ -0,0 +1,44 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.runtime.subsystem.undertow;
+
+import java.util.Date;
+
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.NamedNode;
+
+import static org.jboss.hal.dmr.ModelDescriptionConstants.CREATION_TIME;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.LAST_ACCESSED_TIME;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafeDate;
+
+class Session extends NamedNode {
+
+    Session(String sessionId, ModelNode modelNode) {
+        super(sessionId, modelNode);
+    }
+
+    String getSessionId() {
+        return getName();
+    }
+
+    Date getCreationTime() {
+        return failSafeDate(this, CREATION_TIME);
+    }
+
+    Date getLastAccessTime() {
+        return failSafeDate(this, LAST_ACCESSED_TIME);
+    }
+}",2018-06-26T18:10:17Z,106
"@@ -23,6 +23,7 @@
 import com.google.gwt.i18n.shared.DateTimeFormat;
 import com.google.gwt.i18n.shared.DateTimeFormat.PredefinedFormat;
 import org.jboss.hal.resources.Constants;
+import org.jboss.hal.resources.Names;
 
 public final class Format {
 
@@ -36,19 +37,19 @@ public final class Format {
 
 
     public static String timestamp(Date date) {
-        return TIMESTAMP.format(date);
+        return date != null ? TIMESTAMP.format(date) : Names.NOT_AVAILABLE;
     }
 
     public static String time(Date date) {
-        return TIME_MEDIUM.format(date);
+        return date != null ? TIME_MEDIUM.format(date) : Names.NOT_AVAILABLE;
     }
 
     public static String shortDateTime(Date date) {
-        return DATE_TIME_SHORT.format(date);
+        return date != null ? DATE_TIME_SHORT.format(date) : Names.NOT_AVAILABLE;
     }
 
     public static String mediumDateTime(Date date) {
-        return DATE_TIME_MEDIUM.format(date);
+        return date != null ? DATE_TIME_MEDIUM.format(date) : Names.NOT_AVAILABLE;
     }
 
     public static String humanReadableFileSize(long size) {",2018-06-26T18:10:17Z,107
"@@ -85,9 +85,7 @@ public void attach() {
         applySecurity();
     }
 
-    /**
-     * Shortcut for {@code super.select(data, NamedNode::getName)}
-     */
+    /** Shortcut for {@code super.select(data, NamedNode::getName)} */
     public void select(T data) {
         if (!identifierChecked) {
             checkIdentifier(data);
@@ -96,24 +94,21 @@ public void select(T data) {
     }
 
     @Override
-    public void select(final T data, final Function<T, String> identifier) {
+    public void select(T data, Function<T, String> identifier) {
         super.select(data, identifier);
         applySecurity();
     }
 
-    /**
-     * Shortcut for {@code super.update(data, NamedNode::getName)}
-     */
-    public void update(final Iterable<T> data) {
+    /** Shortcut for {@code super.update(data, NamedNode::getName)} */
+    public void update(Iterable<T> data) {
         if (!identifierChecked) {
             checkIdentifier(Iterables.isEmpty(data) ? null : data.iterator().next());
         }
         update(data, RESET, identifier);
     }
 
     @Override
-    public void update(final Iterable<T> data, final RefreshMode mode, final Function<T, String> identifier) {
-
+    public void update(Iterable<T> data, RefreshMode mode, Function<T, String> identifier) {
         super.update(data, mode, identifier);
         applySecurity();
     }
@@ -171,7 +166,7 @@ public static class Builder<T extends ModelNode> extends GenericOptionsBuilder<B
         private final ColumnFactory columnFactory;
 
         @JsIgnore
-        public Builder(@NonNls final String id, final Metadata metadata) {
+        public Builder(@NonNls String id, Metadata metadata) {
             this.id = id;
             this.metadata = metadata;
             this.columnFactory = new ColumnFactory();
@@ -213,18 +208,7 @@ protected Builder<T> that() {
             return this;
         }
 
-        @Override
-        protected void validate() {
-            super.validate();
-            if (!metadata.getDescription().hasDefined(ATTRIBUTES)) {
-                throw new IllegalStateException(
-                        ""No attributes found in resource description\n"" + metadata.getDescription());
-            }
-        }
-
-        /**
-         * Creates and returns the table.
-         */
+        /** Creates and returns the table. */
         @EsReturn(""Table"")
         public ModelNodeTable<T> build() {
             return new ModelNodeTable<>(this);
@@ -246,7 +230,7 @@ public ModelNodeTable<T> build() {
          */
         @JsMethod(name = ""add"")
         @EsReturn(""TableBuilder"")
-        public Builder<T> jsAdd(final String type,
+        public Builder<T> jsAdd(String type,
                 @EsParam(""AddressTemplate|string"") Object template,
                 @EsParam(""string[]"") String[] attributes,
                 @EsParam(""function(name: string, address: ResourceAddress)"") AddCallback callback) {",2018-06-26T18:10:17Z,108
"@@ -179,6 +179,7 @@ public interface ModelDescriptionConstants {
     String CRAWLER_SESSION_MANAGEMENT = ""crawler-session-management"";
     String CREATE = ""create"";
     String CREATE_TIME = ""create-time"";
+    String CREATION_TIME = ""creation-time"";
     String CREDENTIAL_REFERENCE = ""credential-reference"";
     String CREDENTIAL_STORE = ""credential-store"";
     String CURRENT_THREAD_COUNT = ""current-thread-count"";
@@ -310,6 +311,8 @@ public interface ModelDescriptionConstants {
     String FULL_REPLACE_DEPLOYMENT = ""full-replace-deployment"";
     String GENERATE_CERTIFICATE_SIGNING_REQUEST = ""generate-certificate-signing-request"";
     String GENERATE_KEY_PAIR = ""generate-key-pair"";
+    String GET_SESSION_CREATION_TIME = ""get-session-creation-time"";
+    String GET_SESSION_LAST_ACCESSED_TIME = ""get-session-last-accessed-time"";
     String GLOBAL_MODULES = ""global-modules"";
     String GROUP = ""group"";
     String GROUPS_ATTRIBUTE = ""groups-attribute"";
@@ -368,7 +371,7 @@ public interface ModelDescriptionConstants {
     String INSTANCE_ID = ""instance-id"";
     String INTERFACE = ""interface"";
     String INTERNAL = ""internal"";
-    String INVALIDATE_SESSION_OPERATION = ""invalidate-session"";
+    String INVALIDATE_SESSION = ""invalidate-session"";
     String INVALIDATION = ""invalidation"";
     String INVOCATIONS = ""invocations"";
     String IO = ""io"";
@@ -414,6 +417,7 @@ public interface ModelDescriptionConstants {
     String KILL = ""kill"";
     String KILL_SERVERS = ""kill-servers"";
     String LARGEST_THREAD_COUNT = ""largest-thread-count"";
+    String LAST_ACCESSED_TIME = ""last-accessed-time"";
     String LAST_CONNECTED = ""last-connected"";
     String LAST_UPDATED_TIME = ""last-updated-time"";
     String LAUNCH_TYPE = ""launch-type"";
@@ -428,6 +432,8 @@ public interface ModelDescriptionConstants {
     String LIST_CHANGES_OPERATION = ""list-changes"";
     String LIST_MESSAGES = ""list-messages"";
     String LIST_REMOVE_OPERATION = ""list-remove"";
+    String LIST_SESSION_ATTRIBUTES = ""list-session-attributes"";
+    String LIST_SESSIONS = ""list-sessions"";
     String LISTENER = ""listener"";
     String LIVE_ONLY = ""live-only"";
     String LOAD = ""load"";",2018-06-26T18:10:17Z,109
"@@ -110,7 +110,15 @@ public static Date failSafeDate(ModelNode modelNode, String path) {
         ModelNode attribute = failSafeGet(modelNode, path);
         if (attribute.isDefined()) {
             try {
-                return ISO_8601.parse(attribute.asString());
+                String date = attribute.asString();
+                if (date.indexOf('[') != -1 && date.endsWith(""]"")) {
+                    // Strip zone ID which comes from using
+                    // java.time.format.DateTimeFormatter.ISO_ZONED_DATE_TIME instead of
+                    // java.time.format.DateTimeFormatter.ISO_DATE_TIME
+                    // see https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_ZONED_DATE_TIME
+                    date = date.substring(0, date.indexOf('['));
+                }
+                return ISO_8601.parse(date);
             } catch (IllegalArgumentException ignore) { }
         }
         return null;",2018-06-26T18:10:17Z,110
"@@ -101,6 +101,8 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String copyToClipboard();
     String count();
     String counter();
+
+    String creationTime();
     String currentPage();
     String custom();
 
@@ -309,8 +311,11 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String kill();
 
     String largest();
-    String lastPage();
+
+    String lastAccessedTime();
     String lastModified();
+
+    String lastPage();
     String load();
     String loading();
     String loadingPleaseWait();
@@ -493,8 +498,6 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String serverUrlCustom();
     String serverUrlManagementModel();
     String sessionTime();
-    String sessions();
-    String sessionsCreated();
     String sessionsAvgAliveTime();
     String sessionsMaxAliveTime();
     String setIdentityPasswordTitle();",2018-06-26T18:10:17Z,100
"@@ -635,6 +635,7 @@ public interface Ids {
     String SERVER_STATUS_SYSTEM_PROPERTIES_ITEM = ""server-runtime-system-properties-item"";
     String SERVER_URL_FORM = ""server-url-form"";
     String SERVER_URL_STORAGE = ""hal-local-storage-server-url"";
+    String SESSION = ""session"";
     String SETTINGS_FORM = ""settings-form"";
     String SOCKET_BINDING_GROUP = ""socket-binding-group"";
     String SOCKET_BINDING_GROUP_ADD = ""socket-binding-group-add"";",2018-06-26T18:10:17Z,111
"@@ -253,11 +253,9 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     String invalidJNDIName();
     String invalidLength();
     String invalidRange(long value, long min, long max);
-    String invalidateSessionTitle();
     SafeHtml invalidateSessionQuestion();
-    SafeHtml invalidateSessionSuccess(String sessionId);
-    SafeHtml invalidateSessionError(String sessionId, String cause);
-    SafeHtml invalidateSessionNotExist(String sessionId);
+    SafeHtml invalidateSessionSuccess();
+    SafeHtml invalidateSessionError(String cause);
 
     String jdbcDriverColumnFilterDescription();
     SafeHtml jdbcDriverDeploymentHint();
@@ -318,6 +316,7 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
 
     SafeHtml nearCacheUndefined();
     SafeHtml newContentSuccess(String deployment, String file);
+
     String noBootErrors();
     SafeHtml noChanges();
     SafeHtml noContent();",2018-06-26T18:10:17Z,94
"@@ -308,6 +308,7 @@ public interface Names {
     String SERVER_GROUPS = ""Server Groups"";
     String SERVLET = ""Servlet"";
     String SERVLET_CONTAINER = ""Servlet Container"";
+    String SESSION_ID = ""Session ID"";
     String SESSIONS = ""Sessions"";
     String SHARED_STORE_COLOCATED = ""Shared Store Colocated"";
     String SHARED_STORE_MASTER = ""Shared Store Master"";",2018-06-26T18:10:17Z,112
"@@ -78,6 +78,7 @@ copy=Copy
 copyToClipboard=Copy to clipboard
 count=Count
 counter=Counter
+creationTime=Creation Time
 currentPage=Current Page
 custom=Custom
 data=Data
@@ -276,8 +277,9 @@ jndiNames=JNDI Names
 jndiTree=JNDI Tree
 kill=Kill
 largest=Largest
-lastPage=Last Page
+lastAccessedTime=Last Accessed Time
 lastModified=Last Modified
+lastPage=Last Page
 load=Load
 loading=Loading
 loadingPleaseWait=Loading, please wait...
@@ -451,10 +453,8 @@ serverGroupScopedRole=Server Group Scoped Role
 serverName=Server Name
 serverUrlCustom=Custom URL specified by the user. Use the server drop down to change or reset the URL.
 serverUrlManagementModel=URL read from the management model. If this does not reflect the public URL, you can specify a custom URL using the server drop down.
-sessions=Sessions
 sessionsAvgAliveTime=Session Average Alive Time
 sessionsMaxAliveTime=Session Maximum Alive Time
-sessionsCreated=Sessions Created
 sessionTime=Session Time
 setIdentityPasswordTitle=Set password for an identity
 setSecret=Set secret",2018-06-26T18:10:17Z,100
"@@ -214,11 +214,9 @@ includeAllHelpText=Configure if all authenticated users should be automatically
 initError=Failed to initialize Key Manager <strong>{0}</strong>. Cause: {1}.
 initSuccess=The Key Manager <strong>{0}</strong> was successfully initialized.
 invalidLength=Invalid length, it must be exactly 16 characters.
-invalidateSessionTitle=Invalidate session
-invalidateSessionQuestion=Invalidates a session related to a web application.
-invalidateSessionSuccess=Session <strong>{0}</strong> successfully invalidated.
-invalidateSessionError=Session <strong>{0}</strong> was not invalidated. Cause: {1}
-invalidateSessionNotExist=Session <strong>{0}</strong> doesn''t exist.
+invalidateSessionQuestion=Do you really want to invalidate the selected session?
+invalidateSessionSuccess=Session successfully invalidated.
+invalidateSessionError=Session was not invalidated. Cause: {0}
 invalidExtensionJson=The URL could not be parsed as JSON. Please make sure the extension metadata contains valid JSON.
 invalidExtensionMetadata=The extension metadata is missing required attributes. See <a target=""_blank"" href=""{0}"">{0}</a> for more details.
 invalidFormat=Invalid format",2018-06-26T18:10:17Z,94
"@@ -63,11 +63,9 @@ identityPasswordScramDigest=Uma senha do tipo scram digest.
 identityPasswordSimpleDigest=Uma senha do tipo simple digest.
 initError=Falha ao inicializar o Key Manager <strong>{0}</strong>. Causa: {1}.
 initSuccess=O Key Manager <strong>{0}</strong> foi inicializado com sucesso.
-invalidateSessionTitle=Invalidar sess\u00e3o
 invalidateSessionQuestion=Invalida uma sess\u00e3o relacionada a uma aplica\u00e7\u00e3o web.
-invalidateSessionSuccess=Sess\u00e3o <strong>{0}</strong> invalidada com sucesso.
-invalidateSessionError=Sess\u00e3o <strong>{0}</strong> n\u00e3o foi invalidaa. Causa: {1}
-invalidateSessionNotExist=Sess\u00e3o <strong>{0}</strong> n\u00e3o existe.
+invalidateSessionSuccess=Sess\u00e3o invalidada com sucesso.
+invalidateSessionError=Sess\u00e3o n\u00e3o foi invalidaa. Causa: {0}
 importCertificateError=Falha ao importar o certificado com alias <strong>{0}</strong> do caminho <strong>{1}</strong> em <strong>{2}</strong>. Causa: {3}.
 importCertificateSuccess=O certificado com alias <strong>{0}</strong> foi importado com sucesso do caminho <strong>{1}</strong> em <strong>{2}</strong>.
 jdbcDriverColumnFilterDescription=Filtrar por: Nome do driver ou tipo de instala\u00e7\u00e3o",2018-06-26T18:10:17Z,94
"@@ -10,7 +10,7 @@
     ""graceful-fs"": ""^4.1.4"",
     ""gulp"": ""^3.9.1"",
     ""gulp-copy"": ""0.0.2"",
-    ""gulp-less"": ""^3.0.5"",
+    ""gulp-less"": ""^3.1.0"",
     ""gulp-cssnano"": ""^2.1.1"",
     ""gulp-rename"": ""^1.2.2"",
     ""gulp-watch"": ""^4.3.6"",",2016-09-13T23:15:50Z,214
"@@ -48,41 +48,6 @@
   }
 }
 
-.wizard-header {
-  h1 {
-    font-size: 18px;
-    font-weight: 300;
-    margin-top: 0;
-  }
-
-  .wizard-progress {
-    background-color: #d1d1d1;
-    height: 2px;
-    margin-bottom: 10px;
-    position: relative;
-
-    .indicator {
-      background-color: #39a5dc;
-      display: block;
-      height: 100%;
-      overflow: hidden;
-      position: relative;
-      width: 0;
-    }
-  }
-}
-
-.wizard-step {
-  height: 350px;
-  max-height: 350px;
-  min-height: 350px;
-  overflow-y: scroll;
-
-  .radio {
-    margin-left: 5px;
-  }
-}
-
 .message-details {
   .timestamp {
     color: #8b8d8f;",2016-09-13T23:15:50Z,315
"@@ -1,4 +1,4 @@
-// Customizing Bootstrap and PatternFly payload according to
+// Customizing Bootstrap and PatternFly payload inspired by
 // http://blog.andresgalante.com/howto/2015/03/06/patternfly-part-2.html
 
 
@@ -7,27 +7,15 @@
  * Fonts
  */
 @import ""../../../bower_components/patternfly/less/fonts"";
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/variables"";
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/mixins"";
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/path"";
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/core"";
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/larger"";
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/fixed-width"";
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/list"";
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/bordered-pulled"";
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/animated"";
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/rotated-flipped"";
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/stacked"";
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/icons"";
+@import ""../../../bower_components/patternfly/less/lib/font-awesome/font-awesome"";
 
 
 
 /*!
- * Bootstrap v3.3.5 (http://getbootstrap.com)
- * Copyright 2011-2015 Twitter, Inc.
+ * Bootstrap v3.3.7 (http://getbootstrap.com)
+ * Copyright 2011-2016 Twitter, Inc.
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
-
 // Core variables and mixins (don't touch)
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/variables"";
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/mixins"";
@@ -53,29 +41,29 @@
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/input-groups"";
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/navs"";
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/navbar"";
-@import ""../../../bower_components/patternfly/less/lib/bootstrap/breadcrumbs"";
+//@import ""../../../bower_components/patternfly/less/lib/bootstrap/breadcrumbs"";
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/pagination"";
 //@import ""../../../bower_components/patternfly/less/lib/bootstrap/pager"";
-//@import ""../../../bower_components/patternfly/less/lib/bootstrap/labels"";
+@import ""../../../bower_components/patternfly/less/lib/bootstrap/labels"";
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/badges"";
 //@import ""../../../bower_components/patternfly/less/lib/bootstrap/jumbotron"";
 //@import ""../../../bower_components/patternfly/less/lib/bootstrap/thumbnails"";
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/alerts"";
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/progress-bars"";
-//@import ""../../../bower_components/patternfly/less/lib/bootstrap/media"";
+@import ""../../../bower_components/patternfly/less/lib/bootstrap/media"";
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/list-group"";
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/panels"";
-//@import ""../../../bower_components/patternfly/less/lib/bootstrap/responsive-embed"";
+@import ""../../../bower_components/patternfly/less/lib/bootstrap/responsive-embed"";
 //@import ""../../../bower_components/patternfly/less/lib/bootstrap/wells"";
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/close"";
 
-// Components w/ JavaScript
+// Components w/ JavaScript (disable components we don't use)
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/modals"";
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/tooltip"";
-//@import ""../../../bower_components/patternfly/less/lib/bootstrap/popovers"";
+@import ""../../../bower_components/patternfly/less/lib/bootstrap/popovers"";
 //@import ""../../../bower_components/patternfly/less/lib/bootstrap/carousel"";
 
-// Utility classes
+// Utility classes (don't touch)
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/utilities"";
 @import ""../../../bower_components/patternfly/less/lib/bootstrap/responsive-utilities"";
 
@@ -89,76 +77,84 @@
 
 
 /*
- * PatternFly
- */
-// Bootstrap variables and mixins
-@import ""../../../bower_components/patternfly/less/lib/bootstrap/variables.less"";
-@import ""../../../bower_components/patternfly/less/lib/bootstrap/mixins.less"";
-// Font Awesome variables
-@import ""../../../bower_components/patternfly/less/lib/font-awesome/variables.less"";
-
+ * PatternFly additions to Bootstrap
+*/
 // Bootstrap-Combobox
-@import ""../../../bower_components/patternfly/less/lib/bootstrap-combobox/combobox.less"";
+@import ""../../../bower_components/patternfly/less/lib/bootstrap-combobox/combobox"";
 // Bootstrap-Datepicker
-//@import ""../../../bower_components/patternfly/less/lib/bootstrap-datepicker/datepicker3.less"";
+@import ""../../../bower_components/patternfly/less/lib/bootstrap-datepicker/datepicker3"";
 // Bootstrap-Select
-@import ""../../../bower_components/patternfly/less/lib/bootstrap-select/bootstrap-select.less"";
+@import ""../../../bower_components/patternfly/less/lib/bootstrap-select/bootstrap-select"";
 // Bootstrap Switch
-@import ""../../../bower_components/patternfly/less/lib/bootstrap-switch/bootstrap-switch.less"";
+@import ""../../../bower_components/patternfly/less/lib/bootstrap-switch/bootstrap-switch"";
 // Bootstrap Touchspin
-//@import (less) ""../../../bower_components/patternfly/less/lib/bootstrap-touchspin/jquery.bootstrap-touchspin.css"";
+@import (less) ""../../../bower_components/patternfly/less/lib/bootstrap-touchspin/jquery.bootstrap-touchspin.css"";
 // C3 charts
 @import (less) ""../../../bower_components/patternfly/less/lib/c3/c3.css"";
+// Bootstrap-DateTimePicker
+@import ""../../../bower_components/patternfly/less/lib/eonasdan-bootstrap-datetimepicker/bootstrap-datetimepicker-build"";
+
 
-@import ""../../../bower_components/patternfly/less/alerts.less"";
-@import ""../../../bower_components/patternfly/less/badges.less"";
-@import ""../../../bower_components/patternfly/less/breadcrumbs.less"";
-@import ""../../../bower_components/patternfly/less/buttons.less"";
-@import ""../../../bower_components/patternfly/less/dropdowns.less"";
-@import ""../../../bower_components/patternfly/less/forms.less"";
-@import ""../../../bower_components/patternfly/less/labels.less"";
-@import ""../../../bower_components/patternfly/less/list-group.less"";
-@import ""../../../bower_components/patternfly/less/modals.less"";
-@import ""../../../bower_components/patternfly/less/pager.less"";
-@import ""../../../bower_components/patternfly/less/pagination.less"";
-@import ""../../../bower_components/patternfly/less/panels.less"";
-@import ""../../../bower_components/patternfly/less/popovers.less"";
-@import ""../../../bower_components/patternfly/less/progress-bars.less"";
-@import ""../../../bower_components/patternfly/less/tables.less"";
-@import ""../../../bower_components/patternfly/less/tabs.less"";
-@import ""../../../bower_components/patternfly/less/tooltip.less"";
-@import ""../../../bower_components/patternfly/less/type.less"";
-
-@import ""../../../bower_components/patternfly/less/variables.less"";
-@import ""../../../bower_components/patternfly/less/mixins.less"";
-@import ""../../../bower_components/patternfly/less/blank-slate.less"";
-@import ""../../../bower_components/patternfly/less/bootstrap-combobox.less"";
-//@import ""../../../bower_components/patternfly/less/bootstrap-datepicker.less"";
-@import ""../../../bower_components/patternfly/less/bootstrap-select.less"";
-@import ""../../../bower_components/patternfly/less/bootstrap-switch.less"";
-//@import ""../../../bower_components/patternfly/less/bootstrap-touchspin.less"";
-//@import ""../../../bower_components/patternfly/less/bootstrap-treeview.less"";
-@import ""../../../bower_components/patternfly/less/cards.less"";
-@import ""../../../bower_components/patternfly/less/charts.less"";
-@import ""../../../bower_components/patternfly/less/close.less"";
-@import ""../../../bower_components/patternfly/less/datatables.less"";
-@import ""../../../bower_components/patternfly/less/footer.less"";
-@import ""../../../bower_components/patternfly/less/icons.less"";
-@import ""../../../bower_components/patternfly/less/infotip.less"";
-@import ""../../../bower_components/patternfly/less/layouts.less"";
-@import ""../../../bower_components/patternfly/less/list-view.less"";
-//@import ""../../../bower_components/patternfly/less/login.less"";
-@import ""../../../bower_components/patternfly/less/navbar.less"";
-@import ""../../../bower_components/patternfly/less/navbar-alt.less"";
-@import ""../../../bower_components/patternfly/less/navbar-vertical.less"";
-@import ""../../../bower_components/patternfly/less/nav-vertical-alt.less"";
-@import ""../../../bower_components/patternfly/less/search.less"";
-@import ""../../../bower_components/patternfly/less/sidebar.less"";
-@import ""../../../bower_components/patternfly/less/spinner.less"";
-@import ""../../../bower_components/patternfly/less/syntax-highlighting.less"";
-@import ""../../../bower_components/patternfly/less/toast.less"";
-@import ""../../../bower_components/patternfly/less/toolbar.less"";
-@import ""../../../bower_components/patternfly/less/vertical-nav.less"";
+
+/*
+ * PatternFly
+ */
+@import ""../../../bower_components/patternfly/less/variables"";
+@import ""../../../bower_components/patternfly/less/mixins"";
+
+@import ""../../../bower_components/patternfly/less/alerts"";
+@import ""../../../bower_components/patternfly/less/badges"";
+@import ""../../../bower_components/patternfly/less/breadcrumbs"";
+@import ""../../../bower_components/patternfly/less/buttons"";
+@import ""../../../bower_components/patternfly/less/dropdowns"";
+@import ""../../../bower_components/patternfly/less/forms"";
+@import ""../../../bower_components/patternfly/less/labels"";
+@import ""../../../bower_components/patternfly/less/list-group"";
+@import ""../../../bower_components/patternfly/less/modals"";
+@import ""../../../bower_components/patternfly/less/pager"";
+@import ""../../../bower_components/patternfly/less/pagination"";
+@import ""../../../bower_components/patternfly/less/panels"";
+@import ""../../../bower_components/patternfly/less/popovers"";
+@import ""../../../bower_components/patternfly/less/progress-bars"";
+@import ""../../../bower_components/patternfly/less/tables"";
+@import ""../../../bower_components/patternfly/less/tabs"";
+@import ""../../../bower_components/patternfly/less/tooltip"";
+@import ""../../../bower_components/patternfly/less/type"";
+
+@import ""../../../bower_components/patternfly/less/about-modal"";
+@import ""../../../bower_components/patternfly/less/blank-slate"";
+@import ""../../../bower_components/patternfly/less/bootstrap-combobox"";
+@import ""../../../bower_components/patternfly/less/bootstrap-datepicker"";
+@import ""../../../bower_components/patternfly/less/bootstrap-select"";
+@import ""../../../bower_components/patternfly/less/bootstrap-switch"";
+@import ""../../../bower_components/patternfly/less/bootstrap-touchspin"";
+//@import ""../../../bower_components/patternfly/less/bootstrap-treeview"";
+@import ""../../../bower_components/patternfly/less/cards"";
+@import ""../../../bower_components/patternfly/less/card-view"";
+@import ""../../../bower_components/patternfly/less/charts"";
+@import ""../../../bower_components/patternfly/less/close"";
+@import ""../../../bower_components/patternfly/less/datatables"";
+@import ""../../../bower_components/patternfly/less/footer"";
+@import ""../../../bower_components/patternfly/less/icons"";
+@import ""../../../bower_components/patternfly/less/infotip"";
+@import ""../../../bower_components/patternfly/less/layouts"";
+@import ""../../../bower_components/patternfly/less/links"";
+@import ""../../../bower_components/patternfly/less/list-view"";
+//@import ""../../../bower_components/patternfly/less/login"";
+@import ""../../../bower_components/patternfly/less/navbar"";
+@import ""../../../bower_components/patternfly/less/navbar-alt"";
+@import ""../../../bower_components/patternfly/less/navbar-vertical"";
+@import ""../../../bower_components/patternfly/less/nav-vertical-alt"";
+@import ""../../../bower_components/patternfly/less/notifications-drawer"";
+@import ""../../../bower_components/patternfly/less/search"";
+@import ""../../../bower_components/patternfly/less/sidebar"";
+@import ""../../../bower_components/patternfly/less/spinner"";
+@import ""../../../bower_components/patternfly/less/syntax-highlighting"";
+@import ""../../../bower_components/patternfly/less/time-picker"";
+@import ""../../../bower_components/patternfly/less/toast"";
+@import ""../../../bower_components/patternfly/less/toolbar"";
+@import ""../../../bower_components/patternfly/less/vertical-nav"";
+@import ""../../../bower_components/patternfly/less/wizard"";
 
 
 ",2016-09-13T23:15:50Z,139
"@@ -36,6 +36,7 @@
 import org.jboss.hal.ballroom.dialog.Modal.ModalOptions;
 import org.jboss.hal.resources.Constants;
 import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.UIConstants;
 
 import static org.jboss.gwt.elemento.core.EventType.click;
 import static org.jboss.hal.ballroom.dialog.Modal.$;
@@ -266,9 +267,8 @@ public Dialog build() {
     private static final String CLOSE_ICON_ELEMENT = ""closeIcon"";
     private static final String DIALOG_ELEMENT = ""dialog"";
     private static final String FOOTER_ELEMENT = ""footer"";
-    private static final String ID = ""hal-modal"";
     private static final String LABEL = ""label"";
-    private static final String SELECTOR_ID = ""#"" + ID;
+    private static final String SELECTOR_ID = ""#"" + Ids.HAL_MODAL;
     private static final String TITLE_ELEMENT = ""title"";
 
     private static final Element root;
@@ -282,20 +282,19 @@ public Dialog build() {
 
 
     static {
-        String labelId = Ids.build(ID, LABEL);
         // @formatter:off
         Elements.Builder rootBuilder = new Elements.Builder()
-            .div().id(ID).css(modal)
+            .div().id(Ids.HAL_MODAL).css(modal)
                     .attr(ROLE, DIALOG_ELEMENT)
                     .attr(TABINDEX, ""-1"")
-                    .aria(""labeledby"", labelId)
+                    .aria(""labeledby"", Ids.HAL_MODAL_TITLE)
                 .div().css(modalDialog).attr(""role"", ""document"").rememberAs(DIALOG_ELEMENT) //NON-NLS
                     .div().css(modalContent)
                         .div().css(modalHeader)
                             .button().css(close).aria(LABEL, CONSTANTS.close()).rememberAs(CLOSE_ICON_ELEMENT)
                                 .span().css(pfIcon(""close"")).aria(HIDDEN, String.valueOf(true)).end()
                             .end()
-                            .h(4).css(modalTitle).id(labelId).rememberAs(TITLE_ELEMENT).end()
+                            .h(4).css(modalTitle).id(Ids.HAL_MODAL_TITLE).rememberAs(TITLE_ELEMENT).end()
                         .end()
                         .div().css(modalBody).rememberAs(BODY_ELEMENT).end()
                         .div().css(modalFooter).rememberAs(FOOTER_ELEMENT).end()
@@ -315,8 +314,8 @@ public Dialog build() {
     }
 
     private static void initEventHandler() {
-        $(SELECTOR_ID).on(""shown.bs.modal"", () -> Dialog.open = true);
-        $(SELECTOR_ID).on(""hidden.bs.modal"", () -> Dialog.open = false);
+        $(SELECTOR_ID).on(UIConstants.SHOWN_MODAL, () -> Dialog.open = true);
+        $(SELECTOR_ID).on(UIConstants.HIDDEN_MODAL, () -> Dialog.open = false);
     }
 
     private static void reset() {",2016-09-13T23:15:50Z,187
"@@ -25,18 +25,18 @@
 import static org.jboss.hal.resources.UIConstants.OBJECT;
 
 @JsType(isNative = true)
-abstract class Modal {
+public abstract class Modal {
 
     @JsFunction
     @FunctionalInterface
-    interface ModalHandler {
+    public interface ModalHandler {
 
         void handle();
     }
 
 
     @JsType(isNative = true, namespace = GLOBAL, name = OBJECT)
-    static class ModalOptions {
+    public static class ModalOptions {
 
         public String backdrop;
         public boolean keyboard;
@@ -52,11 +52,11 @@ public static ModalOptions create(final boolean closeOnEsc) {
 
 
     @JsMethod(namespace = GLOBAL)
-    native static Modal $(@NonNls String selector);
+    public native static Modal $(@NonNls String selector);
 
-    native void modal(ModalOptions modalOptions);
+    public native void modal(ModalOptions modalOptions);
 
-    native void modal(@NonNls String action);
+    public native void modal(@NonNls String action);
 
-    native void on(@NonNls String event, ModalHandler handler);
+    public native void on(@NonNls String event, ModalHandler handler);
 }",2016-09-13T23:15:50Z,316
"@@ -15,25 +15,28 @@
  */
 package org.jboss.hal.ballroom.wizard;
 
+import java.util.EnumSet;
+import java.util.HashMap;
+import java.util.LinkedHashMap;
+import java.util.Map;
+
 import com.google.common.collect.Iterables;
 import com.google.gwt.core.client.GWT;
+import elemental.client.Browser;
 import elemental.dom.Element;
 import elemental.html.ButtonElement;
 import org.jboss.gwt.elemento.core.Elements;
 import org.jboss.hal.ballroom.Attachable;
-import org.jboss.hal.ballroom.dialog.Dialog;
-import org.jboss.hal.ballroom.dialog.Dialog.Size;
-import org.jboss.hal.resources.CSS;
+import org.jboss.hal.ballroom.dialog.Modal.ModalOptions;
 import org.jboss.hal.resources.Constants;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.UIConstants;
 
-import java.util.EnumSet;
-import java.util.LinkedHashMap;
-import java.util.Map;
-
-import static elemental.css.CSSStyleDeclaration.Unit.PCT;
-import static java.lang.Math.min;
-import static java.lang.Math.round;
+import static org.jboss.hal.ballroom.dialog.Modal.$;
 import static org.jboss.hal.resources.CSS.*;
+import static org.jboss.hal.resources.UIConstants.HIDDEN;
+import static org.jboss.hal.resources.UIConstants.ROLE;
+import static org.jboss.hal.resources.UIConstants.TABINDEX;
 
 /**
  * General purpose wizard relying on a context for the common data and an enum representing the states of the different
@@ -67,17 +70,101 @@ public interface CancelCallback<C> {
     }
 
 
+    // ------------------------------------------------------ wizard singleton
+
     private static final Constants CONSTANTS = GWT.create(Constants.class);
-    private static final String INDICATOR_ELEMENT = ""indicatorElement"";
-    private static final String HEADER_ELEMENT = ""headerElement"";
-    private static final String STEPS_CONTAINER = ""stepsContainer"";
+    private static final String BACK_ELEMENT = ""prev"";
+    private static final String CANCEL_ELEMENT = ""cancel"";
+    private static final String CLOSE_ICON_ELEMENT = ""closeIcon"";
+    private static final String LABEL = ""label"";
+    private static final String MAIN_CONTAINER = ""mainContainer"";
+    private static final String NEXT_ELEMENT = ""next"";
+    private static final String SELECTOR_ID = ""#"" + Ids.HAL_WIZARD;
+    private static final String STEPS_LIST = ""steps"";
+    private static final String TITLE_ELEMENT = ""title"";
+
+    private static final Element root;
+    private static final Element closeIcon;
+    private static final Element title;
+    private static final Element stepsList;
+    private static final Element main;
+    private static final ButtonElement cancel;
+    private static final ButtonElement back;
+    private static final ButtonElement next;
+
+    private static boolean open;
+
+
+    static {
+        // @formatter:off
+        Elements.Builder rootBuilder = new Elements.Builder()
+            .div().id(Ids.HAL_WIZARD).css(modal)
+                    .attr(ROLE, ""wizard"") //NON-NLS
+                    .attr(TABINDEX, ""-1"")
+                    .aria(""labeledby"", Ids.HAL_WIZARD_TITLE)
+                .div().css(modalDialog, modalLarge, wizardPf)
+                    .div().css(modalContent)
+                        .div().css(modalHeader)
+                            .button().css(close).aria(LABEL, CONSTANTS.close()).rememberAs(CLOSE_ICON_ELEMENT)
+                                .span().css(pfIcon(""close"")).aria(HIDDEN, String.valueOf(true)).end()
+                            .end()
+                            .h(4).css(modalTitle).id(Ids.HAL_WIZARD_TITLE).rememberAs(TITLE_ELEMENT).end()
+                        .end()
+                        .div().css(modalBody, wizardPfBody, clearfix)
+                            .div().css(wizardPfSteps)
+                                .ul().css(wizardPfStepsIndicator).rememberAs(STEPS_LIST)
+                                .end()
+                            .end()
+                            .div().css(wizardPfMain).rememberAs(MAIN_CONTAINER)
+                            .end()
+                        .end()
+                        .div().css(modalFooter, wizardPfFooter)
+                            .button().css(btn, btnDefault, btnCancel).rememberAs(CANCEL_ELEMENT)
+                                .textContent(CONSTANTS.cancel())
+                                .end()
+                            .button().css(btn, btnDefault).rememberAs(BACK_ELEMENT)
+                                .span().css(fontAwesome(""angle-left"")).end()
+                                .span().textContent(CONSTANTS.back()).end()
+                            .end()
+                            .button().css(btn, btnPrimary).rememberAs(NEXT_ELEMENT)
+                                .span().textContent(CONSTANTS.next()).end()
+                                .span().css(fontAwesome(""angle-right"")).end()
+                            .end()
+                        .end()
+                    .end()
+                .end()
+            .end();
+        // @formatter:on
+
+        root = rootBuilder.build();
+        closeIcon = rootBuilder.referenceFor(CLOSE_ICON_ELEMENT);
+        title = rootBuilder.referenceFor(TITLE_ELEMENT);
+        stepsList = rootBuilder.referenceFor(STEPS_LIST);
+        main = rootBuilder.referenceFor(MAIN_CONTAINER);
+        cancel = rootBuilder.referenceFor(CANCEL_ELEMENT);
+        back = rootBuilder.referenceFor(BACK_ELEMENT);
+        next = rootBuilder.referenceFor(NEXT_ELEMENT);
+
+        Browser.getDocument().getBody().appendChild(root);
+        initEventHandler();
+    }
+
+    private static void initEventHandler() {
+        $(SELECTOR_ID).on(UIConstants.SHOWN_MODAL, () -> Wizard.open = true);
+        $(SELECTOR_ID).on(UIConstants.HIDDEN_MODAL, () -> Wizard.open = false);
+    }
+
+    private static void reset() {
+        Elements.removeChildrenFrom(stepsList);
+        Elements.removeChildrenFrom(main);
+    }
+
+
+    // ------------------------------------------------------ wizard instance
 
     private final String id;
     private final LinkedHashMap<S, WizardStep<C, S>> steps;
-    private final Element header;
-    private final Element indicator;
-    private final Element stepsContainer;
-    private final Dialog dialog;
+    private final Map<S, Element> stepIndicators;
     private final C context;
     private final FinishCallback<C> finishCallback;
     private final CancelCallback<C> cancelCallback;
@@ -99,37 +186,40 @@ protected Wizard(final String id, final String title, final C context,
         this.finishCallback = finishCallback;
         this.cancelCallback = cancelCallback;
         this.steps = new LinkedHashMap<>();
-
-        // @formatter:off
-        Elements.Builder body = new Elements.Builder()
-            .header().css(wizardHeader)
-                .h(1).css(wizardHeader).rememberAs(HEADER_ELEMENT).end()
-                .div().css(wizardProgress)
-                    .span().css(CSS.indicator).rememberAs(INDICATOR_ELEMENT).end()
-                .end()
-            .end()
-            .section().css(wizardStep).rememberAs(STEPS_CONTAINER).end();
-        // @formatter:on
-
-        this.header = body.referenceFor(HEADER_ELEMENT);
-        this.indicator = body.referenceFor(INDICATOR_ELEMENT);
-        this.stepsContainer = body.referenceFor(STEPS_CONTAINER);
-        this.dialog = new Dialog.Builder(title)
-                .closeOnEsc(true)
-                .size(Size.MEDIUM)
-                .add(body.elements())
-                .secondary(-100, CONSTANTS.cancel(), this::onCancel)
-                .secondary(CONSTANTS.back(), this::onBack)
-                .primary(CONSTANTS.next(), this::onNext)
-                .build();
+        this.stepIndicators = new HashMap<>();
+
+        reset();
+        Wizard.title.setTextContent(title);
+        closeIcon.setOnclick(event -> onCancel());
+        cancel.setOnclick(event -> onCancel());
+        back.setOnclick(event -> onBack());
+        next.setOnclick(event -> onNext());
     }
 
     private void initSteps() {
+        int index = 1;
         for (Map.Entry<S, WizardStep<C, S>> entry : steps.entrySet()) {
             WizardStep<C, S> step = entry.getValue();
-            Element element = step.asElement();
-            Elements.setVisible(element, false);
-            stepsContainer.appendChild(element);
+
+            // @formatter:off
+            Element li = new Elements.Builder()
+                .li()
+                    .a()
+                        .span().css(wizardPfStepNumber).textContent(String.valueOf(index)).end()
+                        .span().css(wizardPfStepTitle).textContent(step.title).end()
+                    .end()
+                .end()
+            .build();
+            // @formatter:on
+
+            stepIndicators.put(entry.getKey(), li);
+            stepsList.appendChild(li);
+
+            Element stepElement = step.asElement();
+            main.appendChild(stepElement);
+            Elements.setVisible(stepElement, false);
+
+            index++;
         }
     }
 
@@ -146,7 +236,7 @@ protected void addStep(final S state, final WizardStep<C, S> step) {
      */
     public void show() {
         assertSteps();
-        if (stepsContainer.getChildElementCount() == 0) {
+        if (stepsList.getChildElementCount() == 0) {
             initSteps();
         }
 
@@ -156,47 +246,50 @@ public void show() {
         }
         state = initialState();
 
-        dialog.show();
+        if (Wizard.open) {
+            throw new IllegalStateException(
+                    ""Another wizard is still open. Only one wizard can be open at a time. Please close the other wizard!"");
+        }
+        $(SELECTOR_ID).modal(ModalOptions.create(true));
+        $(SELECTOR_ID).modal(""show"");
         pushState(state);
     }
 
     public C getContext() {
         return context;
     }
 
+    private void close() {
+        $(SELECTOR_ID).modal(""hide"");
+    }
+
 
     // ------------------------------------------------------ workflow
 
-    private boolean onCancel() {
+    private void onCancel() {
         if (currentStep().onCancel(context)) {
             cancel();
-            return true;
+            close();
         }
-        return false;
     }
 
-    private boolean onBack() {
+    private void onBack() {
         if (currentStep().onBack(context)) {
             final S previousState = back(state);
             if (previousState != null) {
                 pushState(previousState);
             }
         }
-        return false;
     }
 
-    private boolean onNext() {
+    private void onNext() {
         if (currentStep().onNext(context)) {
             final S nextState = next(state);
             if (nextState != null) {
                 pushState(nextState);
-                return false;
             } else {
                 finish();
-                return true;
             }
-        } else {
-            return false;
         }
     }
 
@@ -208,6 +301,7 @@ private void finish() {
         if (finishCallback != null) {
             finishCallback.onFinish(context);
         }
+        close();
     }
 
     /**
@@ -217,6 +311,7 @@ private void cancel() {
         if (cancelCallback != null) {
             cancelCallback.onCancel(context);
         }
+        close();
     }
 
     /**
@@ -227,33 +322,23 @@ private void cancel() {
     private void pushState(final S state) {
         this.state = state;
 
-        int index = 0;
-        int current = 0;
-        for (Map.Entry<S, WizardStep<C, S>> entry : steps.entrySet()) {
-            if (entry.getKey() == state) {
-                current = index;
+        stepIndicators.forEach((s, element) -> {
+            if (s == state) {
+                element.getClassList().add(active);
+            } else {
+                element.getClassList().remove(active);
             }
-            Elements.setVisible(entry.getValue().asElement(), entry.getKey() == state);
-            index++;
-        }
-        current++;
-        double width = min(round(((double) current / (double) steps.size()) * 100.0), 100.0);
-        setTitle(currentStep().title);
-        indicator.getStyle().setWidth(width, PCT);
+        });
+        steps.forEach((s, step) -> Elements.setVisible(step.asElement(), s == state));
         currentStep().onShow(context);
         for (Attachable attachable : currentStep().attachables) {
             attachable.attach();
         }
-        ButtonElement back = dialog.getButton(Dialog.SECONDARY_POSITION);
+
         back.setDisabled(state == initialState());
-        ButtonElement next = dialog.getButton(Dialog.PRIMARY_POSITION);
         next.setInnerHTML(lastStates().contains(state) ? CONSTANTS.finish() : CONSTANTS.next());
     }
 
-    void setTitle(String title) {
-        header.setInnerText(title);
-    }
-
     /**
      * @return the initial state which is the state of the first added step by default.
      */",2016-09-13T23:15:50Z,226
"@@ -15,14 +15,14 @@
  */
 package org.jboss.hal.ballroom.wizard;
 
-import com.google.common.base.CharMatcher;
-import org.jboss.gwt.elemento.core.IsElement;
-import org.jboss.hal.ballroom.Attachable;
-
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
+import com.google.common.base.CharMatcher;
+import org.jboss.gwt.elemento.core.IsElement;
+import org.jboss.hal.ballroom.Attachable;
+
 /**
  * A step in a wizard. The UI for the step should <string>not</string> contain a header. The header is part of the
  * wizard and will show this step's title.
@@ -100,8 +100,4 @@ protected void registerAttachable(Attachable first, Attachable... rest) {
             Collections.addAll(attachables, rest);
         }
     }
-
-    protected void setTitle(String title) {
-        wizard.setTitle(title);
-    }
 }",2016-09-13T23:15:50Z,317
"@@ -140,7 +140,7 @@ public Element asElement() {
         @Override
         protected void onShow(final SingletonContext context) {
             Elements.removeChildrenFrom(root);
-            setTitle(wizard.getContext().parent.text + ""="" + wizard.getContext().singleton);
+            // setTitle(wizard.getContext().parent.text + ""="" + wizard.getContext().singleton);
             ResourceAddress singletonAddress = wizard.getContext().parent.data.getAddress().getParent()
                     .add(wizard.getContext().parent.text, wizard.getContext().singleton);
             AddressTemplate template = ModelBrowser.asGenericTemplate(wizard.getContext().parent, singletonAddress);",2016-09-13T23:15:50Z,318
"@@ -68,6 +68,16 @@ public static boolean supportsListLogFiles(Version version) {
         return ensureVersion(version, V_2_0_0);
     }
 
+    /**
+     * Check support for {@code :read-content} operation for deployments.
+     *
+     * @return {@code true} if the provided version isn't {@linkplain Version#UNDEFINED undefined} and greater than or
+     * equal {@code 5.0.0}
+     */
+    public static boolean supportsReadContentFromDeployment(Version version) {
+        return ensureVersion(version, V_5_0_0);
+    }
+
     /**
      * Check support for suspend operation and related attributes.
      *",2016-09-13T23:15:50Z,189
"@@ -19,7 +19,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.stream.Collectors;
 import javax.inject.Inject;
 
 import com.google.gwt.user.client.rpc.AsyncCallback;
@@ -35,6 +34,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import static java.util.stream.Collectors.toList;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.NAME;
 
 /**
@@ -100,7 +100,7 @@ public void lookup(final String name, final CapabilitiesCallback callback) {
                         List<AddressTemplate> templates = result.asList().stream()
                                 .map(ModelNode::asString)
                                 .map(AddressTemplate::of)
-                                .collect(Collectors.toList());
+                                .collect(toList());
                         register(name, templates);
                         callback.onSuccess(lookup(name));
                     },",2016-09-13T23:15:50Z,319
"@@ -50,6 +50,7 @@ public interface CSS {
     String blue = ""blue"";
     String bootstrapSwitch = ""bootstrap-switch"";
     String btn = ""btn"";
+    String btnCancel = ""btn-cancel"";
     String btnDefault = ""btn-default"";
     String btnFinder = ""btn-finder"";
     String btnGroup = ""btn-group"";
@@ -289,9 +290,14 @@ public interface CSS {
     String warning = ""warning"";
     String warningTriangleO = ""warning-triangle-o"";
     String withProgress = ""with-progress"";
-    String wizardHeader = ""wizard-header"";
-    String wizardProgress = ""wizard-progress"";
-    String wizardStep = ""wizard-step"";
+    String wizardPf = ""wizard-pf"";
+    String wizardPfBody = ""wizard-pf-body"";
+    String wizardPfFooter = ""wizard-pf-footer"";
+    String wizardPfMain = ""wizard-pf-main"";
+    String wizardPfStepNumber = ""wizard-pf-step-number"";
+    String wizardPfStepTitle = ""wizard-pf-step-title"";
+    String wizardPfSteps = ""wizard-pf-steps"";
+    String wizardPfStepsIndicator = ""wizard-pf-steps-indicator"";
 
     static String column(int columns, String... sizes) {
         if (sizes != null && sizes.length != 0) {",2016-09-13T23:15:50Z,159
"@@ -129,6 +129,11 @@ public interface Ids {
 
     String GROUP = ""group"";
 
+    String HAL_MODAL = ""hal-modal"";
+    String HAL_MODAL_TITLE = build(HAL_MODAL, ""title"");
+    String HAL_WIZARD = ""hal-wizard"";
+    String HAL_WIZARD_TITLE = build(HAL_WIZARD, ""title"");
+
     String HEADER = ""header"";
     String HEADER_CONNECTED_TO = build(HEADER, ""connected-to"");
     String HEADER_MESSAGES = build(HEADER, ""messages"");",2016-09-13T23:15:50Z,111
"@@ -48,6 +48,7 @@ public interface UIConstants {
     String EXPANDED = ""expanded"";
     String GROUP = ""group"";
     String HAS_POPUP = ""haspopup"";
+    String HIDDEN_MODAL = ""hidden.bs.modal"";
     String HREF = ""href"";
     String HIDDEN = ""hidden"";
     String LABELLED_BY = ""labelledby"";
@@ -60,6 +61,7 @@ public interface UIConstants {
     String PRESENTATION = ""presentation"";
     String PROGRESSBAR = ""progressbar"";
     String ROLE = ""role"";
+    String SHOWN_MODAL = ""shown.bs.modal"";
     String TABINDEX = ""tabindex"";
     String TABLIST = ""tablist"";
     String TARGET = ""target"";",2016-09-13T23:15:50Z,320
"@@ -56,6 +56,7 @@ enum Mode {SELECT, ADD}
                 .button(CONSTANTS.remove(), Scope.SELECTED, (event, api) -> {
                     storage.remove(api.selectedRow());
                     api.clear().add(storage.list()).refresh(HOLD);
+                    dialog.setPrimaryButtonDisabled(!table.api().hasSelection());
                 })
                 .column(NAME_KEY)
                 .column(""url"", ""URL"", (cell, type, row, meta) -> row.getUrl()) //NON-NLS
@@ -73,17 +74,9 @@ enum Mode {SELECT, ADD}
                 .include(NAME_KEY, SCHEME, HOST, PORT)
                 .unsorted()
                 .hideButtons()
-                .onCancel(() -> switchTo(SELECT))
-                .onSave((changedValues) -> {
-                    // form is valid here
-                    ModelNode node = new ModelNode();
-                    node.get(NAME_KEY).set(String.valueOf(changedValues.get(NAME_KEY)));
-                    node.get(SCHEME).set(String.valueOf(changedValues.get(SCHEME)));
-                    node.get(HOST).set(String.valueOf(changedValues.get(HOST)));
-                    if (changedValues.containsKey(PORT)) {
-                        node.get(PORT).set((Integer) changedValues.get(PORT));
-                    }
-                    storage.add(new Endpoint(node));
+                .onCancel((form) -> switchTo(SELECT))
+                .onSave((form, changedValues) -> {
+                    storage.add(form.getModel());
                     switchTo(SELECT);
                 })
                 .build();
@@ -106,7 +99,7 @@ enum Mode {SELECT, ADD}
     private void switchTo(final Mode mode) {
         if (mode == SELECT) {
             dialog.setTitle(CONSTANTS.endpointSelectTitle());
-//            table.api().add(storage.list()).refresh(HOLD);
+            table.api().clear().add(storage.list()).refresh(HOLD);
             dialog.setPrimaryButtonLabel(CONSTANTS.endpointConnect());
             dialog.setPrimaryButtonDisabled(!table.api().hasSelection());
             Elements.setVisible(addPage, false);
@@ -117,6 +110,7 @@ private void switchTo(final Mode mode) {
             form.clearValues();
             form.edit(new Endpoint(new ModelNode()));
             dialog.setPrimaryButtonLabel(CONSTANTS.add());
+            dialog.setPrimaryButtonDisabled(false);
             Elements.setVisible(selectPage, false);
             Elements.setVisible(addPage, true);
         }
@@ -125,11 +119,10 @@ private void switchTo(final Mode mode) {
 
     private boolean onPrimary() {
         if (mode == SELECT) {
-            //            manager.onConnect(table.selectedElement());
+            manager.onConnect(table.api().selectedRow());
             return true;
         } else if (mode == ADD) {
             form.save();
-            switchTo(SELECT);
             return false;
         }
         return false;",2016-01-04T11:27:03Z,321
"@@ -66,6 +66,7 @@ public void add(Endpoint endpoint) {
 
     public void remove(Endpoint endpoint) {
         endpoints.remove(endpoint);
+        save();
     }
 
     public void saveSelection(Endpoint selected) {",2016-01-04T11:27:03Z,322
"@@ -239,7 +239,6 @@ public void setText(final String text) {
     public void identifyAs(String id, String... additionalIds) {
         String fq = IdBuilder.build(id, additionalIds);
         setId(fq);
-        setName(fq);
         asElement(EDITING).getDataset().setAt(""formItemGroup"", fq); //NON-NLS
         labelElement.getDataset().setAt(""formItemLabel"", fq); //NON-NLS
         inputElement.asElement().getDataset().setAt(""formItemControl"", fq); //NON-NLS
@@ -395,7 +394,7 @@ public void setFocus(final boolean focus) {
 
     @Override
     public void resetMetaData() {
-        setExpressionValue(null);
+        setExpressionValue(null); // TODO Why?
         setModified(false);
         setUndefined(true);
         clearError();",2016-01-04T11:27:03Z,64
"@@ -61,8 +61,11 @@
  */
 public class DefaultForm<T> extends LazyElement implements Form<T>, SecurityContextAware {
 
-    private final static Constants CONSTANTS = GWT.create(Constants.class);
-    private final static String NOT_INITIALIZED = ""Form element not initialized. Please add this form to the DOM before calling any of the form operations like view(), edit(), save(), cancel() or reset()"";
+    private static final Constants CONSTANTS = GWT.create(Constants.class);
+    private static final String ERROR_MESSAGE = ""errorMessage"";
+    private static final String ERROR_MESSAGES = ""errorMessages"";
+    private static final String MODEL_MUST_NOT_BE_NULL = ""Model must not be null in "";
+    private static final String NOT_INITIALIZED = ""Form element not initialized. Please add this form to the DOM before calling any of the form operations like view(), edit(), save(), cancel() or reset()"";
 
     private final String id;
     private final StateMachine stateMachine;
@@ -82,9 +85,9 @@ public class DefaultForm<T> extends LazyElement implements Form<T>, SecurityCont
     private EventListener exitEditWithEsc;
 
     // accessible in subclasses
-    protected SaveCallback saveCallback;
-    protected ResetCallback resetCallback;
-    protected CancelCallback cancelCallback;
+    protected SaveCallback<T> saveCallback;
+    protected ResetCallback<T> resetCallback;
+    protected CancelCallback<T> cancelCallback;
 
 
     // ------------------------------------------------------ initialization
@@ -170,12 +173,12 @@ private Element editPanel() {
         Elements.Builder errorPanelBuilder = new Elements.Builder()
             .div().css(alert, alertDanger).rememberAs(""errorPanel"")
                 .span().css(pfIcon(""error-circle-o"")).end()
-                .span().rememberAs(""errorMessage"").end()
-                .ul().rememberAs(""errorMessages"").end()
+                .span().rememberAs(ERROR_MESSAGE).end()
+                .ul().rememberAs(ERROR_MESSAGES).end()
             .end();
         // @formatter:on
-        errorMessage = errorPanelBuilder.referenceFor(""errorMessage"");
-        errorMessages = errorPanelBuilder.referenceFor(""errorMessages"");
+        errorMessage = errorPanelBuilder.referenceFor(ERROR_MESSAGE);
+        errorMessages = errorPanelBuilder.referenceFor(ERROR_MESSAGES);
         errorPanel = errorPanelBuilder.build();
         clearErrors();
 
@@ -219,7 +222,7 @@ protected void hideButtons() {
     @Override
     public final void view(final T model) {
         if (model == null) {
-            throw new NullPointerException(""Model must not be null in "" + formId() + "".view(T)"");
+            throw new NullPointerException(MODEL_MUST_NOT_BE_NULL + formId() + "".view(T)"");
         }
         if (!initialized()) {
             throw new IllegalStateException(NOT_INITIALIZED);
@@ -231,7 +234,7 @@ public final void view(final T model) {
     @Override
     public final void edit(final T model) {
         if (model == null) {
-            throw new NullPointerException(""Model must not be null in "" + formId() + "".edit(T)"");
+            throw new NullPointerException(MODEL_MUST_NOT_BE_NULL + formId() + "".edit(T)"");
         }
         if (!initialized()) {
             throw new IllegalStateException(NOT_INITIALIZED);
@@ -247,15 +250,26 @@ public final void save() {
         }
         boolean valid = validate();
         if (valid) {
+            persistModel();
             if (saveCallback != null) {
-                saveCallback.onSave(getChangedValues());
+                saveCallback.onSave(this, getChangedValues());
+            }
+            for (FormItem formItem : formItems.values()) {
+                formItem.resetMetaData();
             }
             execute(SAVE);
         }
     }
 
+    /**
+     * Called from {@link #save()} if {@code validate() == true}. Empty implementation.
+     */
+    @Override
+    public void persistModel() {
+    }
+
     @Override
-    public void setSaveCallback(final SaveCallback saveCallback) {
+    public void setSaveCallback(final SaveCallback<T> saveCallback) {
         this.saveCallback = saveCallback;
     }
 
@@ -276,13 +290,13 @@ public final void cancel() {
         }
         clearErrors();
         if (cancelCallback != null) {
-            cancelCallback.onCancel();
+            cancelCallback.onCancel(this);
         }
         execute(CANCEL);
     }
 
     @Override
-    public void setCancelCallback(final CancelCallback cancelCallback) {
+    public void setCancelCallback(final CancelCallback<T> cancelCallback) {
         this.cancelCallback = cancelCallback;
     }
 
@@ -292,17 +306,17 @@ public final void reset() {
             throw new IllegalStateException(NOT_INITIALIZED);
         }
         if (resetCallback != null) {
-            resetCallback.onReset();
+            resetCallback.onReset(this);
         }
         execute(RESET);
     }
 
     @Override
-    public void setResetCallback(final ResetCallback resetCallback) {
+    public void setResetCallback(final ResetCallback<T> resetCallback) {
         this.resetCallback = resetCallback;
     }
 
-    private String formId() {
+    protected String formId() {
         return ""form("" + id + "")""; //NON-NLS
     }
 
@@ -461,6 +475,14 @@ private boolean validate() {
         return valid;
     }
 
+    @Override
+    public void clearValues() {
+        for (FormItem formItem : formItems.values()) {
+            formItem.clearValue();
+            formItem.resetMetaData();
+        }
+    }
+
     @Override
     public void clearErrors() {
         for (FormItem formItem : formItems.values()) {
@@ -494,11 +516,4 @@ private void showErrors(List<String> messages) {
             Elements.setVisible(errorPanel, true);
         }
     }
-
-    public void clearValues() {
-        for (FormItem formItem : formItems.values()) {
-            formItem.clearValue();
-            formItem.resetMetaData();
-        }
-    }
 }",2016-01-04T11:27:03Z,64
"@@ -36,29 +36,30 @@ enum State {
         READONLY, EDITING
     }
 
+
     enum Operation {
         VIEW, EDIT, CANCEL, SAVE, RESET
     }
 
 
     @FunctionalInterface
-    interface SaveCallback {
+    interface SaveCallback<T> {
 
-        void onSave(Map<String, Object> changedValues);
+        void onSave(Form<T> form, Map<String, Object> changedValues);
     }
 
 
     @FunctionalInterface
-    interface ResetCallback {
+    interface ResetCallback<T> {
 
-        void onReset();
+        void onReset(Form<T> form);
     }
 
 
     @FunctionalInterface
-    interface CancelCallback {
+    interface CancelCallback<T> {
 
-        void onCancel();
+        void onCancel(Form<T> form);
     }
 
 
@@ -81,21 +82,26 @@ interface CancelCallback {
      */
     void save();
 
-    void setSaveCallback(SaveCallback saveCallback);
+    /**
+     * Make the changes in edit mode persistent.
+     */
+    void persistModel();
+
+    void setSaveCallback(SaveCallback<T> saveCallback);
 
     /**
      * Cancels any modifications to the model.
      */
     void cancel();
 
-    void setCancelCallback(CancelCallback cancelCallback);
+    void setCancelCallback(CancelCallback<T> cancelCallback);
 
     /**
      * Resets the model.
      */
     void reset();
 
-    void setResetCallback(ResetCallback resetCallback);
+    void setResetCallback(ResetCallback<T> resetCallback);
 
     /**
      * @return the current model.
@@ -121,6 +127,8 @@ interface CancelCallback {
      */
     void invalidate(String formItem, String message);
 
+    void clearValues();
+
     /**
      * Clears all error markers.
      */",2016-01-04T11:27:03Z,323
"@@ -41,12 +41,12 @@ public class NumberItem extends AbstractFormItem<Long> {
     /**
      * As defined by https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER
      */
-    private static final long MIN_SAFE_NUMBER = -9007199254740991l;
+    public static final long MIN_SAFE_NUMBER = -9007199254740991l;
 
     /**
      * As defined by https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER
      */
-    private static final long MAX_SAFE_NUMBER = 9007199254740991l;
+    public static final long MAX_SAFE_NUMBER = 9007199254740991l;
 
     private final static Constants CONSTANTS = GWT.create(Constants.class);
     private final static Messages MESSAGES = GWT.create(Messages.class);",2016-01-04T11:27:03Z,133
"@@ -36,19 +36,16 @@
 import static org.jboss.hal.resources.CSS.selectpicker;
 
 /**
+ * TODO isModified() does not work!
  * @author Harald Pehl
  */
 public class SelectBoxItem extends AbstractFormItem<String> {
 
     private SelectBoxElement comboBox;
 
     public SelectBoxItem(final String name, final String label, List<String> values) {
-        this(name, label, values, null);
-    }
-
-    public SelectBoxItem(final String name, final String label, List<String> values, String defaultValue) {
         super(name, label);
-        setValues(values, defaultValue);
+        setValues(values);
     }
 
     @Override
@@ -65,15 +62,22 @@ protected InputElement<String> newInputElement() {
         return comboBox;
     }
 
-    public void setValues(List<String> values, String defaultValue) {
-        comboBox.setValues(values, defaultValue);
+    public void setValues(List<String> values) {
+        comboBox.setValues(values);
     }
 
     @Override
     public boolean supportsExpressions() {
         return false;
     }
 
+    @Override
+    public boolean isUndefined() {
+        // As for now a select box has always a value and is as such never undefined
+        // TODO Check if there's a use case when the user wants to clear / undefine the select box
+        return false;
+    }
+
 
     static class SelectBoxElement extends InputElement<String> {
 
@@ -88,7 +92,9 @@ static class SelectBoxElement extends InputElement<String> {
             indexedValues = HashBiMap.create();
         }
 
-        void setValues(List<String> values, String defaultValue) {
+        void setValues(List<String> values) {
+            String currentValue = getValue();
+
             indexedValues.clear();
             Elements.removeChildrenFrom(element);
 
@@ -98,10 +104,10 @@ void setValues(List<String> values, String defaultValue) {
                 OptionElement option = Browser.getDocument().createOptionElement();
                 option.setText(value);
                 element.appendChild(option);
-                if (defaultValue != null && defaultValue.equals(value)) {
+                indexedValues.put(i, value);
+                if (value.equals(currentValue)) {
                     defaultIndex = i;
                 }
-                indexedValues.put(i, value);
                 i++;
             }
             element.setSelectedIndex(defaultIndex);
@@ -145,7 +151,7 @@ public void setEnabled(final boolean b) {
         public String getValue() {
             int selectedIndex = element.getSelectedIndex();
             if (indexedValues.containsKey(selectedIndex)) {
-                indexedValues.get(selectedIndex);
+                return indexedValues.get(selectedIndex);
             }
             return null;
         }",2016-01-04T11:27:03Z,8
"@@ -25,6 +25,7 @@
 import jsinterop.annotations.JsOverlay;
 import jsinterop.annotations.JsProperty;
 import jsinterop.annotations.JsType;
+import org.jboss.hal.resources.Names;
 
 import java.util.Collections;
 import java.util.List;
@@ -200,10 +201,10 @@ public final boolean hasSelection() {
 
     @JsOverlay
     public final Api<T> onSelect(SelectionHandler<T> handler) {
-        on(""select"", new SelectCallback<T>() { //NON-NLS
+        on(Names.SELECT, new SelectCallback<T>() {
             @Override
             public void onSelect(final Object event, final Api<T> api, final String type) {
-                if (""row"".equals(type)) { //NON-NLS
+                if (Names.ROW.equals(type)) {
                     handler.onSelect(api, api.selectedRow());
                 }
             }
@@ -213,10 +214,10 @@ public void onSelect(final Object event, final Api<T> api, final String type) {
 
     @JsOverlay
     public final Api<T> onDeselect(DeselectionHandler<T> handler) {
-        on(""deselect"", new SelectCallback<T>() { //NON-NLS
+        on(Names.DESELECT, new SelectCallback<T>() {
             @Override
             public void onSelect(final Object event, final Api<T> api, final String type) {
-                if (""row"".equals(type)) { //NON-NLS
+                if (Names.ROW.equals(type)) {
                     handler.onDeselect(api);
                 }
             }
@@ -226,10 +227,18 @@ public void onSelect(final Object event, final Api<T> api, final String type) {
 
     @JsOverlay
     public final Api<T> onSelectionChange(SelectionChangeHandler<T> handler) {
-        on(""select deselect"", new SelectCallback<T>() { //NON-NLS
+        on(Names.SELECT, new SelectCallback<T>() {
             @Override
             public void onSelect(final Object event, final Api<T> api, final String type) {
-                if (""row"".equals(type)) { //NON-NLS
+                if (Names.ROW.equals(type)) {
+                    handler.onSelectionChanged(api);
+                }
+            }
+        });
+        on(Names.DESELECT, new SelectCallback<T>() {
+            @Override
+            public void onSelect(final Object event, final Api<T> api, final String type) {
+                if (Names.ROW.equals(type)) {
                     handler.onSelectionChanged(api);
                 }
             }",2016-01-04T11:27:03Z,324
"@@ -26,7 +26,6 @@
 import com.gwtplatform.mvp.client.Presenter;
 import com.gwtplatform.mvp.client.proxy.Proxy;
 import com.gwtplatform.mvp.client.proxy.RevealContentHandler;
-import org.jboss.hal.ballroom.PatternFly;
 
 /**
  * A presenter which calls {@link PatternFly#initComponents()} when it's {@linkplain #onReveal() revealed}. Extend from",2016-01-04T11:27:03Z,35
"@@ -21,17 +21,25 @@
  */
 package org.jboss.hal.core.mbui.form;
 
+import com.google.common.collect.Lists;
 import org.jboss.hal.ballroom.form.CheckBoxItem;
 import org.jboss.hal.ballroom.form.FormItem;
 import org.jboss.hal.ballroom.form.FormItemProvider;
 import org.jboss.hal.ballroom.form.NumberItem;
+import org.jboss.hal.ballroom.form.SelectBoxItem;
 import org.jboss.hal.ballroom.form.TextBoxItem;
 import org.jboss.hal.core.mbui.LabelBuilder;
 import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.ModelNodeHelper;
 import org.jboss.hal.dmr.ModelType;
 import org.jboss.hal.dmr.Property;
 
-import static org.jboss.hal.dmr.ModelDescriptionConstants.TYPE;
+import java.util.List;
+
+import static java.util.Collections.emptyList;
+import static org.jboss.hal.ballroom.form.NumberItem.MAX_SAFE_NUMBER;
+import static org.jboss.hal.ballroom.form.NumberItem.MIN_SAFE_NUMBER;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 
 /**
  * @author Harald Pehl
@@ -49,6 +57,7 @@ public FormItem<?> createFrom(final Property attributeDescription) {
         String name = attributeDescription.getName();
         String label = labelBuilder.label(attributeDescription);
         ModelNode modelNode = attributeDescription.getValue();
+
         if (modelNode.hasDefined(TYPE)) {
             ModelType type = modelNode.get(TYPE).asType();
             switch (type) {
@@ -57,8 +66,11 @@ public FormItem<?> createFrom(final Property attributeDescription) {
                 case DOUBLE:
                 case INT:
                 case LONG:
-                    formItem = new NumberItem(name, label);
+                    long min = modelNode.get(MIN).asLong(MIN_SAFE_NUMBER);
+                    long max = modelNode.get(MAX).asLong(MAX_SAFE_NUMBER);
+                    formItem = new NumberItem(name, label, min, max);
                     break;
+
                 case BOOLEAN:
                     formItem = new CheckBoxItem(name, label);
                     break;
@@ -73,14 +85,29 @@ public FormItem<?> createFrom(final Property attributeDescription) {
                 case PROPERTY:
                     break;
                 case STRING:
-                    formItem = new TextBoxItem(name, label);
+                    List<ModelNode> allowedNodes = ModelNodeHelper
+                            .getOrDefault(modelNode, () -> modelNode.get(ALLOWED).asList(), emptyList());
+                    List<String> allowedValues = Lists.transform(allowedNodes, ModelNode::asString);
+                    if (allowedValues.isEmpty()) {
+                        formItem = new TextBoxItem(name, label);
+                    } else {
+                        formItem = new SelectBoxItem(name, label, allowedValues);
+                    }
                     break;
                 case TYPE:
                     break;
                 case UNDEFINED:
                     break;
             }
+
+            if (formItem != null) {
+                formItem.setRequired(!modelNode.get(NILLABLE).asBoolean(true));
+                if (formItem.supportsExpressions()) {
+                    formItem.setExpressionAllowed(modelNode.get(EXPRESSION_ALLOWED).asBoolean(false));
+                }
+            }
         }
+
         return formItem;
     }
 }",2016-01-04T11:27:03Z,101
"@@ -34,19 +34,25 @@
 import org.jboss.hal.core.mbui.LabelBuilder;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.ModelNodeHelper;
+import org.jboss.hal.dmr.ModelType;
 import org.jboss.hal.dmr.Property;
 import org.jboss.hal.meta.description.ResourceDescription;
 import org.jboss.hal.meta.security.SecurityContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.math.BigDecimal;
+import java.math.BigInteger;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelType.BIG_DECIMAL;
+import static org.jboss.hal.dmr.ModelType.BIG_INTEGER;
+import static org.jboss.hal.dmr.ModelType.INT;
 
 /**
  * @author Harald Pehl
@@ -68,9 +74,9 @@ public static class Builder<T extends ModelNode> {
         boolean unsorted;
         boolean includeRuntime;
         boolean hideButtons;
-        SaveCallback saveCallback;
-        CancelCallback cancelCallback;
-        ResetCallback resetCallback;
+        SaveCallback<T> saveCallback;
+        CancelCallback<T> cancelCallback;
+        ResetCallback<T> resetCallback;
 
 
         // ------------------------------------------------------ configure required and optional settings
@@ -139,17 +145,17 @@ public Builder<T> customFormItem(final String attribute, final FormItemProvider
             return this;
         }
 
-        public Builder<T> onSave(final SaveCallback saveCallback) {
+        public Builder<T> onSave(final SaveCallback<T> saveCallback) {
             this.saveCallback = saveCallback;
             return this;
         }
 
-        public Builder<T> onCancel(final CancelCallback cancelCallback) {
+        public Builder<T> onCancel(final CancelCallback<T> cancelCallback) {
             this.cancelCallback = cancelCallback;
             return this;
         }
 
-        public Builder<T> onReset(final ResetCallback resetCallback) {
+        public Builder<T> onReset(final ResetCallback<T> resetCallback) {
             this.resetCallback = resetCallback;
             return this;
         }
@@ -212,12 +218,14 @@ private String formId() {
 
     private static final Logger logger = LoggerFactory.getLogger(ModelNodeForm.class);
 
+    private final ResourceDescription resourceDescription;
     private final FormItemProvider defaultFormItemProvider;
     private final Map<String, SaveOperationStep> saveOperations;
 
     private ModelNodeForm(final Builder<T> builder) {
         super(builder.id, builder.stateMachine(), builder.securityContext);
 
+        this.resourceDescription = builder.resourceDescription;
         this.defaultFormItemProvider = new DefaultFormItemProvider();
         this.saveOperations = builder.saveOperations;
         this.saveCallback = builder.saveCallback;
@@ -252,4 +260,73 @@ private ModelNodeForm(final Builder<T> builder) {
             }
         }
     }
+
+    @Override
+    public void persistModel() {
+        T model = getModel();
+
+        for (FormItem formItem : getFormItems()) {
+            String name = formItem.getName();
+            ModelNode attribute = model.get(name);
+
+            if (formItem.isUndefined()) {
+                attribute.set(ModelType.UNDEFINED);
+
+            } else if (formItem.isModified()) {
+                ModelNode attributeDescription = resourceDescription.find(name);
+                if (attributeDescription == null) {
+                    //noinspection HardCodedStringLiteral
+                    logger.error(""{}: Unable to persist '{}': No attribute description found in\n{}"", formId(), name,
+                            resourceDescription);
+                    continue;
+                }
+                ModelType type = attributeDescription.get(TYPE).asType();
+                Object value = formItem.getValue();
+                switch (type) {
+                    case BOOLEAN:
+                        attribute.set((Boolean) value);
+                        break;
+
+                    case BIG_INTEGER:
+                    case INT:
+                    case LONG:
+                        Long longValue = (Long) value;
+                        if (type == BIG_INTEGER) {
+                            attribute.set(BigInteger.valueOf(longValue));
+                        } else if (type == INT) {
+                            attribute.set(longValue.intValue());
+                        } else {
+                            attribute.set(longValue);
+                        }
+                        break;
+
+                    case BIG_DECIMAL:
+                    case DOUBLE:
+                        Double doubleValue = (Double) value;
+                        if (type == BIG_DECIMAL) {
+                            attribute.set(BigDecimal.valueOf(doubleValue));
+                        } else {
+                            attribute.set(doubleValue);
+                        }
+                        break;
+
+                    case STRING:
+                        attribute.set(String.valueOf(value));
+                        break;
+
+                    case BYTES:
+                    case EXPRESSION:
+                    case LIST:
+                    case OBJECT:
+                    case PROPERTY:
+                    case TYPE:
+                    case UNDEFINED:
+                        //noinspection HardCodedStringLiteral
+                        logger.warn(""{}: persisting form field '{}' to type '{}' not yet implemented"", formId(), name,
+                                type);
+                        break;
+                }
+            }
+        }
+    }
 }",2016-01-04T11:27:03Z,60
"@@ -61,6 +61,7 @@ public interface ModelDescriptionConstants {
     String DOMAIN_RESULTS = ""domain-results"";
     String EXCEPTIONS = ""exceptions"";
     String EXECUTE = ""execute"";
+    String EXPRESSION_ALLOWED = ""expression-allowed"";
     String EXTENSION = ""extension"";
     String FAILED = ""failed"";
     String FAILURE_DESCRIPTION = ""failure-description"";",2016-01-04T11:27:03Z,109
"@@ -24,6 +24,7 @@
 import com.google.common.base.Splitter;
 import com.google.common.base.Strings;
 import com.google.common.collect.Iterables;
+import com.google.inject.Provider;
 
 /**
  * Static helper methods for dealing with {@link ModelNode}s.
@@ -63,4 +64,16 @@ public static ModelNode failSafeGet(final ModelNode modelNode, final String path
 
         return undefined;
     }
+
+    public static <T> T getOrDefault(final ModelNode modelNode, Provider<T> provider, T defaultValue) {
+        T result = defaultValue;
+        if (modelNode != null) {
+            try {
+                result = provider.get();
+            } catch (Throwable t) {
+                result = defaultValue;
+            }
+        }
+        return result;
+    }
 }",2016-01-04T11:27:03Z,110
"@@ -61,12 +61,34 @@ public List<Property> getAttributes() {
         return get(ATTRIBUTES).asPropertyList();
     }
 
+    public List<Property> getRequiredAttributes() {
+        if (hasAttributes()) {
+            Iterable<Property> required = Iterables.filter(getAttributes(),
+                    requestProperty -> requestProperty.getValue().hasDefined(NILLABLE) &&
+                            !requestProperty.getValue().get(NILLABLE).asBoolean());
+            return Lists.newArrayList(required);
+
+        } else {
+            return Collections.emptyList();
+        }
+    }
+
+    public List<Property> getRequestProperties() {
+        String path = OPERATIONS + ""."" + ADD + ""."" + REQUEST_PROPERTIES;
+        ModelNode requestProperties = ModelNodeHelper.failSafeGet(this, path);
+        if (requestProperties.isDefined()) {
+            return requestProperties.asPropertyList();
+        } else {
+            return Collections.emptyList();
+        }
+    }
+
     public List<Property> getRequiredRequestProperties() {
         String path = OPERATIONS + ""."" + ADD + ""."" + REQUEST_PROPERTIES;
         ModelNode requestProperties = ModelNodeHelper.failSafeGet(this, path);
 
         if (requestProperties.isDefined()) {
-            Iterable<Property> required = Iterables.filter(requestProperties.asPropertyList(),
+            Iterable<Property> required = Iterables.filter(getRequestProperties(),
                     requestProperty -> requestProperty.getValue().hasDefined(REQUIRED) &&
                             requestProperty.getValue().get(REQUIRED).asBoolean());
             return Lists.newArrayList(required);
@@ -76,15 +98,13 @@ public List<Property> getRequiredRequestProperties() {
         }
     }
 
-    public List<Property> getRequiredAttributes() {
-        if (hasAttributes()) {
-            Iterable<Property> required = Iterables.filter(get(ATTRIBUTES).asPropertyList(),
-                    requestProperty -> requestProperty.getValue().hasDefined(NILLABLE) &&
-                            !requestProperty.getValue().get(NILLABLE).asBoolean());
-            return Lists.newArrayList(required);
-
-        } else {
-            return Collections.emptyList();
+    public ModelNode find(String name) {
+        List<Property> properties = hasAttributes() ? getAttributes() : getRequestProperties();
+        for (Property property : properties) {
+            if (name.equals(property.getName())) {
+                return property.getValue();
+            }
         }
+        return null;
     }
 }",2016-01-04T11:27:03Z,24
"@@ -30,6 +30,7 @@ public interface Names {
 
     String CONFIGURATION = ""Configuration"";
     String DEPLOYMENTS = ""Deployments"";
+    String DESELECT = ""deselect"";
     String FAILURE = ""failure"";
     String GET = ""GET"";
     String HOST = ""host"";
@@ -41,8 +42,10 @@ public interface Names {
     String PORT = ""port"";
     String RESTRICTED = ""restricted"";
     String ROLE = ""role"";
+    String ROW = ""row"";
     String RUNTIME = ""Runtime"";
     String SCHEME = ""scheme"";
+    String SELECT = ""select"";
     String SELECTED = ""selected"";
     String TOGGLE = ""toggle"";
     String TOOLTIP = ""tooltip"";",2016-01-04T11:27:03Z,112
"@@ -267,11 +267,11 @@ private void showWizard(List<DataSource> dataSources, List<JdbcDriver> drivers,
                         case DRIVER:
                             previous = NAMES;
                             break;
-                        case PROPERTIES:
+                        case XA_PROPERTIES:
                             previous = DRIVER;
                             break;
                         case CONNECTION:
-                            previous = context.isXa() ? PROPERTIES : DRIVER;
+                            previous = context.isXa() ? XA_PROPERTIES : DRIVER;
                             break;
                         case REVIEW:
                             previous = CONNECTION;
@@ -289,9 +289,9 @@ private void showWizard(List<DataSource> dataSources, List<JdbcDriver> drivers,
                             next = DRIVER;
                             break;
                         case DRIVER:
-                            next = context.isXa() ? PROPERTIES : CONNECTION;
+                            next = context.isXa() ? XA_PROPERTIES : CONNECTION;
                             break;
-                        case PROPERTIES:
+                        case XA_PROPERTIES:
                             next = CONNECTION;
                             break;
                         case CONNECTION:
@@ -332,7 +332,7 @@ private void showWizard(List<DataSource> dataSources, List<JdbcDriver> drivers,
         builder.addStep(NAMES, new NamesStep(dataSources, dataSourceMetadata, resources));
         builder.addStep(DRIVER, new DriverStep(drivers, driverMetadata, resources));
         if (xa) {
-            builder.addStep(PROPERTIES, new PropertiesStep(resources));
+            builder.addStep(XA_PROPERTIES, new PropertiesStep(resources));
         }
         builder.addStep(CONNECTION, new ConnectionStep(dataSourceMetadata, resources, xa));
         builder.addStep(REVIEW, new ReviewStep(dataSourceMetadata, resources, xa));",2016-12-01T12:41:25Z,80
"@@ -19,5 +19,5 @@
  * @author Harald Pehl
  */
 public enum State {
-    CHOOSE_TEMPLATE, NAMES, DRIVER, PROPERTIES, CONNECTION, REVIEW
+    CHOOSE_TEMPLATE, NAMES, DRIVER, XA_PROPERTIES, CONNECTION, REVIEW
 }",2016-12-01T12:41:25Z,149
"@@ -24,12 +24,11 @@
 import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.ballroom.form.FormItem;
 import org.jboss.hal.ballroom.form.PropertiesItem;
-import org.jboss.hal.ballroom.table.Api.RefreshMode;
-import org.jboss.hal.ballroom.table.DataTable;
 import org.jboss.hal.core.mbui.MbuiContext;
 import org.jboss.hal.core.mbui.MbuiViewImpl;
 import org.jboss.hal.core.mbui.form.FailSafeForm;
 import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.core.mbui.table.NamedNodeTable;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Property;
 import org.jboss.hal.dmr.model.NamedNode;
@@ -67,14 +66,14 @@ public static RemotingView create(final MbuiContext mbuiContext) {
     @MbuiElement(""remoting-vertical-navigation"") VerticalNavigation navigation;
     @MbuiElement(""remoting-endpoint-configuration"") Form<ModelNode> endpointConfigurationForm;
 
-    @MbuiElement(""remoting-connector-table"") DataTable<NamedNode> connectorTable;
-    @MbuiElement(""remoting-http-connector-table"") DataTable<NamedNode> httpConnectorTable;
+    @MbuiElement(""remoting-connector-table"") NamedNodeTable<NamedNode> connectorTable;
+    @MbuiElement(""remoting-http-connector-table"") NamedNodeTable<NamedNode> httpConnectorTable;
 
-    @MbuiElement(""remoting-local-outbound-table"") DataTable<NamedNode> localOutboundTable;
+    @MbuiElement(""remoting-local-outbound-table"") NamedNodeTable<NamedNode> localOutboundTable;
     @MbuiElement(""remoting-local-outbound-form"") Form<NamedNode> localOutboundForm;
-    @MbuiElement(""remoting-outbound-table"") DataTable<NamedNode> outboundTable;
+    @MbuiElement(""remoting-outbound-table"") NamedNodeTable<NamedNode> outboundTable;
     @MbuiElement(""remoting-outbound-form"") Form<NamedNode> outboundForm;
-    @MbuiElement(""remoting-remote-outbound-table"") DataTable<NamedNode> remoteOutboundTable;
+    @MbuiElement(""remoting-remote-outbound-table"") NamedNodeTable<NamedNode> remoteOutboundTable;
     @MbuiElement(""remoting-remote-outbound-form"") Form<NamedNode> remoteOutboundForm;
 
     private Form<NamedNode> connectorForm;
@@ -94,7 +93,7 @@ void init() {
         // remote connector
         Metadata connectorMetadata = mbuiContext.metadataRegistry().lookup(CONNECTOR_TEMPLATE);
         connectorForm = new ModelNodeForm.Builder<NamedNode>(Ids.REMOTING_CONNECTOR_FORM, connectorMetadata)
-                .unboundFormItem(new PropertiesItem(PROPERTY, mbuiContext.resources().constants().properties()), 1)
+                .unboundFormItem(new PropertiesItem(PROPERTY), 1)
                 .onSave((form, changedValues) -> presenter.saveConnector(form, changedValues))
                 .build();
         registerAttachable(connectorForm);
@@ -103,7 +102,7 @@ void init() {
         Metadata connectorSecurityMetadata = mbuiContext.metadataRegistry().lookup(CONNECTOR_SECURITY_TEMPLATE);
         Form<ModelNode> csf = new ModelNodeForm.Builder<>(Ids.REMOTING_CONNECTOR_SECURITY_FORM,
                 connectorSecurityMetadata)
-                .unboundFormItem(new PropertiesItem(PROPERTY, mbuiContext.resources().constants().properties()), 2)
+                .unboundFormItem(new PropertiesItem(PROPERTY), 2)
                 .onSave((form, changedValues) -> presenter.saveConnectorSecurity(form, changedValues))
                 .build();
         connectorSecurityForm = new FailSafeForm<>(mbuiContext.dispatcher(),
@@ -143,7 +142,7 @@ void init() {
         Metadata httpConnectorMetadata = mbuiContext.metadataRegistry().lookup(HTTP_CONNECTOR_TEMPLATE);
         httpConnectorForm = new ModelNodeForm.Builder<NamedNode>(Ids.REMOTING_HTTP_CONNECTOR_FORM,
                 httpConnectorMetadata)
-                .unboundFormItem(new PropertiesItem(PROPERTY, mbuiContext.resources().constants().properties()), 2)
+                .unboundFormItem(new PropertiesItem(PROPERTY), 2)
                 .onSave((form, changedValues) -> presenter.saveHttpConnector(form, changedValues))
                 .build();
         registerAttachable(httpConnectorForm);
@@ -153,7 +152,7 @@ void init() {
                 .lookup(HTTP_CONNECTOR_SECURITY_TEMPLATE);
         Form<ModelNode> hcsf = new ModelNodeForm.Builder<>(Ids.REMOTING_HTTP_CONNECTOR_SECURITY_FORM,
                 httpConnectorSecurityMetadata)
-                .unboundFormItem(new PropertiesItem(PROPERTY, mbuiContext.resources().constants().properties()), 2)
+                .unboundFormItem(new PropertiesItem(PROPERTY), 2)
                 .onSave((form, changedValues) -> presenter.saveHttpConnectorSecurity(form, changedValues))
                 .build();
         httpConnectorSecurityForm = new FailSafeForm<>(mbuiContext.dispatcher(),
@@ -212,46 +211,31 @@ public void attach() {
     public void update(final ModelNode payload) {
         endpointConfigurationForm.view(failSafeGet(payload, ""configuration/endpoint"")); //NON-NLS
 
-        connectorTable.api()
-                .clear()
-                .add(asNamedNodes(failSafePropertyList(payload, CONNECTOR_TEMPLATE.lastKey())))
-                .refresh(RefreshMode.RESET);
         connectorForm.clear();
         connectorForm.getFormItem(PROPERTY).clearValue();
         connectorSecurityForm.clear();
         connectorSecurityForm.getFormItem(PROPERTY).clearValue();
         connectorSecurityPolicyForm.clear();
+        connectorTable.update(asNamedNodes(failSafePropertyList(payload, CONNECTOR_TEMPLATE.lastKey())));
 
-        httpConnectorTable.api()
-                .clear()
-                .add(asNamedNodes(failSafePropertyList(payload, HTTP_CONNECTOR_TEMPLATE.lastKey())))
-                .refresh(RefreshMode.RESET);
         httpConnectorForm.clear();
         httpConnectorForm.getFormItem(PROPERTY).clearValue();
         httpConnectorSecurityForm.clear();
         httpConnectorSecurityForm.getFormItem(PROPERTY).clearValue();
         httpConnectorSecurityPolicyForm.clear();
+        httpConnectorTable.update(asNamedNodes(failSafePropertyList(payload, HTTP_CONNECTOR_TEMPLATE.lastKey())));
 
-        localOutboundTable.api()
-                .clear()
-                .add(asNamedNodes(failSafePropertyList(payload, LOCAL_OUTBOUND_TEMPLATE.lastKey())))
-                .refresh(RefreshMode.RESET);
         localOutboundForm.clear();
         localOutboundForm.getFormItem(PROPERTY).clearValue();
+        localOutboundTable.update(asNamedNodes(failSafePropertyList(payload, LOCAL_OUTBOUND_TEMPLATE.lastKey())));
 
-        outboundTable.api()
-                .clear()
-                .add(asNamedNodes(failSafePropertyList(payload, OUTBOUND_TEMPLATE.lastKey())))
-                .refresh(RefreshMode.RESET);
         outboundForm.clear();
         outboundForm.getFormItem(PROPERTY).clearValue();
+        outboundTable.update(asNamedNodes(failSafePropertyList(payload, OUTBOUND_TEMPLATE.lastKey())));
 
-        remoteOutboundTable.api()
-                .clear()
-                .add(asNamedNodes(failSafePropertyList(payload, REMOTE_OUTBOUND_TEMPLATE.lastKey())))
-                .refresh(RefreshMode.RESET);
         remoteOutboundForm.clear();
         remoteOutboundForm.getFormItem(PROPERTY).clearValue();
+        remoteOutboundTable.update(asNamedNodes(failSafePropertyList(payload, REMOTE_OUTBOUND_TEMPLATE.lastKey())));
     }
 
     @Override",2016-12-01T12:41:25Z,325
"@@ -15,7 +15,6 @@
  */
 package org.jboss.hal.client.configuration.subsystem.resourceadapter;
 
-import org.jboss.hal.ballroom.LabelBuilder;
 import org.jboss.hal.ballroom.form.CreationContext;
 import org.jboss.hal.ballroom.form.PropertiesItem;
 
@@ -25,7 +24,7 @@
 class MappingsItem extends PropertiesItem {
 
     MappingsItem(final String name) {
-        super(name, new LabelBuilder().label(name));
+        super(name);
     }
 
     @Override",2016-12-01T12:41:25Z,326
"@@ -18,6 +18,7 @@
 import java.util.List;
 import java.util.Map;
 
+import com.google.gwt.safehtml.shared.SafeHtmlUtils;
 import elemental.client.Browser;
 import elemental.dom.Element;
 import org.jboss.gwt.elemento.core.Elements;
@@ -32,6 +33,7 @@
 import org.jboss.hal.core.mbui.form.ModelNodeForm;
 import org.jboss.hal.core.mbui.table.ModelNodeTable;
 import org.jboss.hal.core.mbui.table.NamedNodeTable;
+import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Property;
 import org.jboss.hal.dmr.model.NamedNode;
 import org.jboss.hal.dmr.model.ResourceAddress;
@@ -44,6 +46,7 @@
 import static org.jboss.hal.client.configuration.subsystem.webservice.AddressTemplates.CLIENT_CONFIG_TEMPLATE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafeGet;
 import static org.jboss.hal.dmr.ModelNodeHelper.failSafePropertyList;
 import static org.jboss.hal.resources.CSS.columnAction;
 import static org.jboss.hal.resources.Ids.ADD_SUFFIX;
@@ -112,9 +115,10 @@ class ConfigElement implements IsElement, Attachable {
                 .build();
         configTable = new NamedNodeTable<>(Ids.build(baseId, TABLE_SUFFIX), configOptions);
 
-        configProperties = new PropertiesItem(PROPERTY, mbuiContext.resources().constants().properties());
+        ModelNode propertyHelp = failSafeGet(configMetadata.getDescription(), ""children/property/description"");
+        configProperties = new PropertiesItem(PROPERTY);
         configForm = new ModelNodeForm.Builder<NamedNode>(Ids.build(baseId, FORM_SUFFIX), configMetadata)
-                .unboundFormItem(configProperties)
+                .unboundFormItem(configProperties, 0, SafeHtmlUtils.fromString(propertyHelp.asString()))
                 .onSave((form, changedValues) -> mbuiContext.po()
                         .saveWithProperties(Names.CLIENT_CONFIG, form.getModel().getName(), CLIENT_CONFIG_TEMPLATE,
                                 form, changedValues, PROPERTY, presenter::reload))",2016-12-01T12:41:25Z,327
"@@ -120,8 +120,7 @@
                     <form id=""remoting-local-outbound-form"" title=""Local Outbound""
                           on-save=""{{presenter.saveLocalOutbound(form, changedValues)}}"">
                         <attributes>
-                            <attribute
-                                    form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""property"", mbuiContext.resources().constants().properties())}}'/>
+                            <attribute form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""property"")}}'/>
                             <attribute name=""outbound-socket-binding-ref"">
                                 <suggest-handler>
                                     <templates>
@@ -152,8 +151,7 @@
                     <form id=""remoting-outbound-form"" title=""Outbound""
                           on-save=""{{presenter.saveOutbound(form, changedValues)}}"">
                         <attributes>
-                            <attribute
-                                    form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""property"", mbuiContext.resources().constants().properties())}}'/>
+                            <attribute form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""property"")}}'/>
                             <attribute name=""uri""/>
                         </attributes>
                     </form>
@@ -197,8 +195,7 @@
                                     </templates>
                                 </suggest-handler>
                             </attribute>
-                            <attribute
-                                    form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""property"", mbuiContext.resources().constants().properties())}}'/>
+                            <attribute form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""property"")}}'/>
                             <attribute name=""protocol""/>
                             <attribute name=""security-realm""/>
                             <attribute name=""username""/>",2016-12-01T12:41:25Z,328
"@@ -31,7 +31,7 @@
                             <attribute name=""bootstrap-context""/>
                             <attribute name=""module""/>
                             <attribute
-                                    form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""config-properties"", mbuiContext.resources().constants().properties())}}'/>
+                                    form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""config-properties"")}}'/>
                             <attribute name=""statistics-enabled""/>
                             <attribute name=""transaction-support""/>
                         </group>
@@ -79,7 +79,7 @@
                             <attribute name=""connectable""/>
                             <attribute name=""enabled""/>
                             <attribute
-                                    form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""config-properties"", mbuiContext.resources().constants().properties())}}'/>
+                                    form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""config-properties"")}}'/>
                         </group>
                         <group id=""resource-adapter-connection-definition-pool""
                                title=""{{mbuiContext.resources().constants().pool()}}"">
@@ -129,7 +129,7 @@
                         <attribute name=""enabled""/>
                         <attribute name=""jndi-name""/>
                         <attribute
-                                form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""config-properties"", mbuiContext.resources().constants().properties())}}'/>
+                                form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""config-properties"")}}'/>
                         <attribute name=""use-java-context""/>
                     </attributes>
                 </form>",2016-12-01T12:41:25Z,329
"@@ -67,7 +67,7 @@ final class Mbui_UnboundFormItemView extends UnboundFormItemView {
 
         form = new ModelNodeForm.Builder<org.jboss.hal.dmr.ModelNode>(""form"", metadata0)
                 .include(""foo"")
-                .unboundFormItem(new org.jboss.hal.ballroom.form.PropertiesItem(""bar"", new org.jboss.hal.ballroom.LabelBuilder().label(""bar"")), 1)
+                .unboundFormItem(new org.jboss.hal.ballroom.form.PropertiesItem(""bar""), 1)
                 .unsorted()
                 .onSave((form, changedValues) -> saveSingletonForm(""Form"", metadata0Template.resolve(mbuiContext.statementContext()), changedValues))
                 .build();",2016-12-01T12:41:25Z,330
"@@ -21,7 +21,7 @@
         <form id=""form"" title=""Form"" auto-save=""true"">
             <attributes>
                 <attribute name=""foo""/>
-                <attribute form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""bar"", new org.jboss.hal.ballroom.LabelBuilder().label(""bar""))}}'/>
+                <attribute form-item='{{new org.jboss.hal.ballroom.form.PropertiesItem(""bar"")}}'/>
             </attributes>
         </form>
     </metadata>",2016-12-01T12:41:25Z,331
"@@ -28,6 +28,7 @@
 import elemental.client.Browser;
 import elemental.dom.Element;
 import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.hal.ballroom.LabelBuilder;
 import org.jboss.hal.ballroom.form.TagsManager.Bridge;
 import org.jboss.hal.resources.CSS;
 import org.jboss.hal.resources.Ids;
@@ -48,6 +49,10 @@ public class PropertiesItem extends AbstractFormItem<Map<String, String>> {
     private PropertiesElement propertiesElement;
     private Element tagsContainer;
 
+    public PropertiesItem(final String name) {
+        super(name, new LabelBuilder().label(name), null, EMPTY_CONTEXT);
+    }
+
     public PropertiesItem(final String name, final String label) {
         super(name, label, null, EMPTY_CONTEXT);
     }",2016-12-01T12:41:25Z,196
"@@ -297,15 +297,13 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String processors();
     String productName();
     String productVersion();
-    String properties();
     String providedBy();
 
     String refresh();
     String releaseName();
     String releaseVersion();
     String reload();
     String remove();
-    String removeResource();
     String rename();
     String replace();
     String replaceContent();",2016-12-01T12:41:25Z,100
"@@ -243,14 +243,12 @@ preview=Preview
 processors=Processors
 productName=Product Name
 productVersion=Product Version
-properties=Properties
 providedBy=Provided by
 refresh=Refresh
 releaseName=Release Name
 releaseVersion=Release Version
 reload=Reload
 remove=Remove
-removeResource=Remove Resource
 rename=Rename
 replace=Replace
 replaceContent=Replace Content",2016-12-01T12:41:25Z,100
"@@ -348,9 +348,6 @@ static class UploadOrReplace implements Function<FunctionContext> {
             this.enabled = enabled;
         }
 
-        static java.util.logging.Logger _log = java.util.logging.Logger.getLogger(""org.jboss"");
-
-
         @Override
         public void execute(final Control<FunctionContext> control) {
             boolean replace;
@@ -376,7 +373,6 @@ public void execute(final Control<FunctionContext> control) {
             }
             Operation operation = builder.build();
             operation.get(CONTENT).add().get(""input-stream-index"").set(0); //NON-NLS
-            _log.info(""deploy operation: "" + operation);
 
             dispatcher.upload(file, operation,
                     result -> {",2017-08-09T18:57:21Z,65
"@@ -94,8 +94,7 @@ public void execute(final Control<FunctionContext> control) {
                     .param(INCLUDE_RUNTIME, true)
                     .build();
 
-            Operation opPatches = new Operation.Builder(patchingAddress,
-                    READ_RESOURCE_OPERATION)
+            Operation opPatches = new Operation.Builder(patchingAddress, READ_RESOURCE_OPERATION)
                     .param(INCLUDE_RUNTIME, true)
                     .param(RECURSIVE, true)
                     .build();
@@ -254,7 +253,7 @@ public HTMLElement getIcon() {
 
             @Override
             public String nextColumn() {
-                return Ids.PATCHES_HOST;
+                return Ids.PATCHING;
             }
 
             @Override
@@ -283,8 +282,7 @@ private static List<NamedNode> orderedHostWithDomainControllerAsFirstElement(Lis
                 .sorted(comparing(NamedNode::getName))
                 .collect(toList());
         NamedNode domainController = null;
-        for (Iterator<NamedNode> iterator = hosts.iterator();
-                iterator.hasNext() && domainController == null; ) {
+        for (Iterator<NamedNode> iterator = hosts.iterator(); iterator.hasNext() && domainController == null; ) {
             NamedNode host = iterator.next();
             if (host.get(MASTER).asBoolean()) {
                 domainController = host;",2017-08-09T18:57:21Z,205
"@@ -72,11 +72,12 @@ class HostPatchesPreview extends RuntimePreview<NamedNode> {
         attributes = new PreviewAttributes<>(host)
                 .append(model -> {
                     String latest = model.get(CORE_SERVICE_PATCHING).get(""cumulative-patch-id"").asString();
-                    // when there is no patch installed, the above attribute returns as ""base""
+                    // if there is no patch installed, the above attribute returns as ""base""
+                    // so, lets display an informative message as there is no patch installed.
                     if (""base"".equals(latest)) {
-                        latest = ""No patch installed for this host."";
+                        latest = resources.messages().noPatchesForHost();
                     }
-                    return new PreviewAttributes.PreviewAttribute(""Latest applied patch"", latest);
+                    return new PreviewAttributes.PreviewAttribute(resources.messages().patchLatestInstalledLabel(), latest);
                 });
         previewBuilder().addAll(attributes);
         update(host);",2017-08-09T18:57:21Z,206
"@@ -16,11 +16,12 @@
 package org.jboss.hal.client.patching;
 
 import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.List;
-import java.util.logging.Logger;
 import javax.inject.Inject;
 import javax.inject.Provider;
 
+import com.google.common.base.Joiner;
 import com.google.gwt.safehtml.shared.SafeHtml;
 import com.google.gwt.safehtml.shared.SafeHtmlUtils;
 import com.google.web.bindery.event.shared.EventBus;
@@ -48,15 +49,18 @@
 import org.jboss.hal.core.mbui.form.ModelNodeForm;
 import org.jboss.hal.core.runtime.host.Host;
 import org.jboss.hal.core.runtime.host.HostActions;
+import org.jboss.hal.core.runtime.server.Server;
+import org.jboss.hal.core.runtime.server.ServerActions;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Operation;
 import org.jboss.hal.dmr.Property;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.AddressTemplate;
 import org.jboss.hal.meta.Metadata;
-import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.StatementContext;
+import org.jboss.hal.meta.processing.MetadataProcessor;
+import org.jboss.hal.meta.processing.SuccessfulMetadataCallback;
 import org.jboss.hal.meta.security.Constraint;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Messages;
@@ -71,46 +75,103 @@
 import static org.jboss.hal.client.patching.wizard.PatchState.UPLOAD;
 import static org.jboss.hal.core.finder.FinderColumn.RefreshMode.RESTORE_SELECTION;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.meta.StatementContext.Tuple.SELECTED_HOST;
 import static org.jboss.hal.resources.Ids.ADD_SUFFIX;
 import static org.jboss.hal.resources.Ids.PATCHES_AGEOUT;
 
 /**
  * @author Claudio Miranda
  */
-@Column(Ids.PATCHES_HOST)
+@Column(Ids.PATCHING)
 public class PatchesColumn extends FinderColumn<ModelNode> {
 
-    static final String SELECTED_PATCHING_ADDRESS = ""/{selected.host}/core-service=patching"";
-    static final AddressTemplate SELECTED_PATCHING_TEMPLATE = AddressTemplate.of(SELECTED_PATCHING_ADDRESS);
-    static Logger _log = Logger.getLogger(""org.jboss"");
+    static class UploadPatch implements Function<FunctionContext> {
+
+        private final Dispatcher dispatcher;
+        private EventBus eventBus;
+        private StatementContext statementContext;
+        private Resources resources;
+        private PatchContext patchContext;
+
+        UploadPatch(final EventBus eventBus, final StatementContext statementContext, final Dispatcher dispatcher,
+                final Resources resources, final PatchContext patchContext) {
+            this.eventBus = eventBus;
+            this.statementContext = statementContext;
+            this.dispatcher = dispatcher;
+            this.resources = resources;
+            this.patchContext = patchContext;
+        }
+
+        @Override
+        public void execute(final Control<FunctionContext> control) {
+            ResourceAddress address = PATCHING_TEMPLATE.resolve(statementContext);
+            Operation.Builder opBuilder = new Operation.Builder(address, PATCH)
+                    .param(OVERRIDE_ALL, patchContext.overrideAll)
+                    .param(OVERRIDE_MODULE, patchContext.overrideModules);
+            if (patchContext.override != null) {
+                opBuilder.param(OVERRIDE, patchContext.override.toArray(new String[patchContext.override.size()]));
+            }
+            if (patchContext.preserve != null) {
+                opBuilder.param(PRESERVE, patchContext.preserve.toArray(new String[patchContext.preserve.size()]));
+            }
+
+            Operation operation = opBuilder.build();
+
+            operation.get(CONTENT).add().get(""input-stream-index"").set(0); //NON-NLS
+
+            dispatcher.upload(patchContext.file, operation,
+                    result -> {
+                        MessageEvent.fire(eventBus,
+                                Message.success(resources.messages().patchSucessfullyApplied(patchContext.file.name)));
+                        control.proceed();
+                    },
+
+                    (op, failure) -> {
+                        MessageEvent.fire(eventBus,
+                                Message.error(resources.messages().patchAddError(patchContext.file.name, failure)));
+                        control.proceed();
+                    },
+
+                    (op, exception) -> {
+                        MessageEvent.fire(eventBus, Message.error(
+                                resources.messages().patchAddError(patchContext.file.name, exception.getMessage())));
+                        control.proceed();
+                    });
+        }
+    }
+
+
+    static final AddressTemplate PATCHING_TEMPLATE = AddressTemplate.of(SELECTED_HOST, ""core-service=patching"");
 
     private EventBus eventBus;
     private Dispatcher dispatcher;
-    private MetadataRegistry metadataRegistry;
     private StatementContext statementContext;
     private Environment environment;
     private HostActions hostActions;
+    private MetadataProcessor metadataProcessor;
+    private ServerActions serverActions;
     private Provider<Progress> progress;
     private Resources resources;
 
     @Inject
     public PatchesColumn(final Finder finder,
             final EventBus eventBus,
             final Dispatcher dispatcher,
-            final MetadataRegistry metadataRegistry,
             final StatementContext statementContext,
             final Environment environment,
             final HostActions hostActions,
+            final MetadataProcessor metadataProcessor,
+            final ServerActions serverActions,
             @Footer final Provider<Progress> progress,
             final ColumnActionFactory columnActionFactory,
             final Resources resources) {
 
-        super(new Builder<ModelNode>(finder, Ids.PATCHES_HOST, Names.PATCHES)
+        super(new Builder<ModelNode>(finder, Ids.PATCHING, Names.PATCHES)
 
                 .columnAction(columnActionFactory.refresh(Ids.PATCHES_REFRESH))
 
                 .itemsProvider((context, callback) -> {
-                    ResourceAddress address = SELECTED_PATCHING_TEMPLATE.resolve(statementContext);
+                    ResourceAddress address = PATCHING_TEMPLATE.resolve(statementContext);
                     Operation operation = new Operation.Builder(address, SHOW_HISTORY_OPERATION).build();
                     dispatcher.execute(operation, result -> callback.onSuccess(result.asList()));
                 })
@@ -122,10 +183,11 @@ public PatchesColumn(final Finder finder,
         );
         this.eventBus = eventBus;
         this.dispatcher = dispatcher;
-        this.metadataRegistry = metadataRegistry;
         this.statementContext = statementContext;
         this.environment = environment;
         this.hostActions = hostActions;
+        this.metadataProcessor = metadataProcessor;
+        this.serverActions = serverActions;
         this.progress = progress;
         this.resources = resources;
 
@@ -147,7 +209,7 @@ public List<ItemAction<ModelNode>> actions() {
                 actions.add(new ItemAction.Builder<ModelNode>()
                         .title(resources.constants().rollback())
                         .handler(item1 -> rollback(item1.get(PATCH_ID).asString()))
-                        .constraint(Constraint.executable(SELECTED_PATCHING_TEMPLATE, ROLLBACK_OPERATION))
+                        .constraint(Constraint.executable(PATCHING_TEMPLATE, ROLLBACK_OPERATION))
                         .build());
 
                 return actions;
@@ -171,202 +233,236 @@ public List<ItemAction<ModelNode>> actions() {
 
     private void rollback(final String patchId) {
 
-        ModelNode model = new ModelNode();
-        model.get(PATCH_ID).set(patchId);
-        ResourceAddress address = SELECTED_PATCHING_TEMPLATE.resolve(statementContext);
-        Metadata metadata = metadataRegistry.lookup(SELECTED_PATCHING_TEMPLATE);
-        Metadata operationMetadata = metadata.forOperation(ROLLBACK_OPERATION);
-        String id = Ids
-                .build(Ids.HOST, statementContext.selectedHost(), CORE_SERVICE, PATCHING, patchId, ROLLBACK_OPERATION);
-        Form<ModelNode> form = new ModelNodeForm.Builder<>(id, operationMetadata)
-                .unsorted()
-                .build();
-        form.getFormItem(PATCH_ID).setEnabled(false);
-        Dialog dialog = new Dialog.Builder(resources.constants().rollback())
-                .add(form.asElement())
-                .closeIcon(true)
-                .closeOnEsc(true)
-                .primary(resources.constants().rollback(), () -> {
-                    if (form.save()) {
-                        ModelNode payload = form.getModel();
-                        // reset-configuration is a required attribute, if the user doesn't set it, meaning it should be false
-                        // it will not be added into the payload, but we must forcibly set as false to satisfy the required=true metadata
-                        if (!payload.hasDefined(RESET_CONFIGURATION)) {
-                            payload.get(RESET_CONFIGURATION).set(false);
-                        }
-                        Operation operation = new Operation.Builder(address, ROLLBACK_OPERATION)
-                                .payload(payload)
-                                .build();
-                        dispatcher.execute(operation, result -> {
-                            MessageEvent.fire(eventBus,
-                                    Message.success(resources.messages().patchSucessfullyRemoved(patchId)));
-                            refresh(RESTORE_SELECTION);
-                        });
-                        return true;
-                    }
-                    return false;
-                })
-                .cancel()
-                .build();
-        dialog.registerAttachable(form);
-        dialog.show();
-        form.edit(model);
+        // check the host controller for restart-required
+        checkHostState(_result ->
+                // check the servers, advise to stop them before apply/rollback a patch
+                checkServersState(_result1 -> {
+
+                    metadataProcessor.lookup(PATCHING_TEMPLATE, progress.get(),
+                            new SuccessfulMetadataCallback(eventBus, resources) {
+
+                                @Override
+                                public void onMetadata(final Metadata metadata) {
+                                    ModelNode model = new ModelNode();
+                                    model.get(PATCH_ID).set(patchId);
+                                    ResourceAddress address = PATCHING_TEMPLATE.resolve(statementContext);
+                                    Metadata operationMetadata = metadata.forOperation(ROLLBACK_OPERATION);
+                                    String id = Ids.build(Ids.HOST, statementContext.selectedHost(), CORE_SERVICE, PATCHING, patchId, ROLLBACK_OPERATION);
+                                    Form<ModelNode> form = new ModelNodeForm.Builder<>(id, operationMetadata)
+                                            .unsorted()
+                                            .build();
+                                    form.getFormItem(PATCH_ID).setEnabled(false);
+                                    Dialog dialog = new Dialog.Builder(resources.constants().rollback())
+                                            .add(form.asElement())
+                                            .closeIcon(true)
+                                            .closeOnEsc(true)
+                                            .primary(resources.constants().rollback(), () -> {
+                                                if (form.save()) {
+                                                    ModelNode payload = form.getModel();
+                                                    // reset-configuration is a required attribute, if the user doesn't set it, meaning it should be false
+                                                    // it will not be added into the payload, but we must forcibly set as false to satisfy the required=true metadata
+                                                    if (!payload.hasDefined(RESET_CONFIGURATION)) {
+                                                        payload.get(RESET_CONFIGURATION).set(false);
+                                                    }
+                                                    Operation operation = new Operation.Builder(address, ROLLBACK_OPERATION)
+                                                            .payload(payload)
+                                                            .build();
+                                                    dispatcher.execute(operation, result2 -> {
+                                                        MessageEvent.fire(eventBus,
+                                                                Message.success(resources.messages()
+                                                                        .patchSucessfullyRemoved(patchId)));
+                                                        refresh(RESTORE_SELECTION);
+                                                    });
+                                                    return true;
+                                                }
+                                                return false;
+                                            })
+                                            .cancel()
+                                            .build();
+                                    dialog.registerAttachable(form);
+                                    dialog.show();
+                                    form.edit(model);
+                                }
+                            });
+                }));
     }
 
     private void ageoutHistory() {
 
-        ResourceAddress address = SELECTED_PATCHING_TEMPLATE.resolve(statementContext);
-        Metadata metadata = metadataRegistry.lookup(SELECTED_PATCHING_TEMPLATE);
-        Metadata operationMetadata = metadata.forOperation(AGEOUT_HISTORY_OPERATION);
-        Messages messages = resources.messages();
-        // prepend the ageout-history description to let user know the intended action.
-        SafeHtml message = messages.cleanPatchHistoryQuestion(operationMetadata.getDescription().getDescription());
-
-        DialogFactory.showConfirmation(messages.cleanPatchHistory(), message, () -> {
-            Operation operation = new Operation.Builder(address, AGEOUT_HISTORY_OPERATION).build();
-            dispatcher.execute(operation, result -> {
-                MessageEvent
-                        .fire(eventBus, Message.success(SafeHtmlUtils.fromString(messages.cleanPatchHistorySuccess())));
-                refresh(RESTORE_SELECTION);
-            });
 
-        });
+        metadataProcessor
+                .lookup(PATCHING_TEMPLATE, progress.get(), new SuccessfulMetadataCallback(eventBus, resources) {
+                    @Override
+                    public void onMetadata(final Metadata metadata) {
+                        ResourceAddress address = PATCHING_TEMPLATE.resolve(statementContext);
+                        Metadata operationMetadata = metadata.forOperation(AGEOUT_HISTORY_OPERATION);
+                        Messages messages = resources.messages();
+                        // prepend the ageout-history description to let user know the intended action.
+                        SafeHtml message = messages
+                                .cleanPatchHistoryQuestion(operationMetadata.getDescription().getDescription());
+
+                        DialogFactory.showConfirmation(messages.cleanPatchHistory(), message, () -> {
+                            Operation operation = new Operation.Builder(address, AGEOUT_HISTORY_OPERATION).build();
+                            dispatcher.execute(operation, result -> {
+                                MessageEvent
+                                        .fire(eventBus, Message.success(
+                                                SafeHtmlUtils.fromString(messages.cleanPatchHistorySuccess())));
+                                refresh(RESTORE_SELECTION);
+                            });
+                        });
+                    }
+                });
     }
 
     private void applyPatch() {
 
-        checkHostState(result -> {
-
-            Metadata metadata = metadataRegistry.lookup(SELECTED_PATCHING_TEMPLATE);
-            Metadata metadataOp = metadata.forOperation(PATCH);
-            Wizard<PatchContext, PatchState> wizard = new Wizard.Builder<PatchContext, PatchState>(
-                    resources.messages().addResourceTitle(Names.PATCH), new PatchContext())
-
-                    .addStep(UPLOAD, new PatchContentStep(resources))
-                    .addStep(NAMES, new PatchNamesStep(environment, metadataOp, resources))
-
-                    .onBack((context, currentState) -> currentState == NAMES ? UPLOAD : null)
-                    .onNext((context, currentState) -> currentState == UPLOAD ? NAMES : null)
-
-                    .stayOpenAfterFinish()
-                    .onFinish((wzd, context) -> {
-                        String name = context.file.name;
-                        wzd.showProgress(resources.constants().uploadInProgress(),
-                                resources.messages().uploadInProgress(name));
-
-                        Function[] functions = {
-                                new UploadPatch(eventBus, statementContext, environment, dispatcher, resources, context)
-                        };
-                        new Async<FunctionContext>(progress.get()).waterfall(new FunctionContext(),
-                                new Outcome<FunctionContext>() {
-                                    @Override
-                                    public void onFailure(final FunctionContext functionContext) {
-                                        wzd.showError(resources.constants().uploadError(),
-                                                resources.messages().uploadError(name), functionContext.getError());
-                                    }
-
-                                    @Override
-                                    public void onSuccess(final FunctionContext functionContext) {
-                                        refresh(Ids.content(name));
-                                        wzd.showSuccess(resources.constants().uploadSuccessful(),
-                                                resources.messages().uploadSuccessful(name),
-                                                resources.messages().view(Names.CONTENT),
-                                                cxt -> { /* nothing to do, content is already selected */ });
-                                    }
-                                }, functions);
-                    })
-                    .build();
-            wizard.show();
-        });
+        // check the host controller for restart-required
+        checkHostState(result ->
+            // check the servers, advise to stop them before apply/rollback a patch
+            checkServersState(result1 -> {
+
+                metadataProcessor.lookup(PATCHING_TEMPLATE, progress.get(),
+                    new SuccessfulMetadataCallback(eventBus, resources) {
+                        @Override
+                        public void onMetadata(final Metadata metadata) {
+                            Metadata metadataOp = metadata.forOperation(PATCH);
+                            final Messages messages = resources.messages();
+                            Wizard<PatchContext, PatchState> wizard = new Wizard.Builder<PatchContext, PatchState>(messages.addResourceTitle(Names.PATCH), new PatchContext())
+
+                                .addStep(UPLOAD, new PatchContentStep(resources))
+                                .addStep(NAMES, new PatchNamesStep(environment, metadataOp, resources))
+
+                                .onBack((context, currentState) -> currentState == NAMES ? UPLOAD : null)
+                                .onNext((context, currentState) -> currentState == UPLOAD ? NAMES : null)
+
+                                .stayOpenAfterFinish()
+                                .onFinish((wzd, context) -> {
+                                    String name = context.file.name;
+                                    wzd.showProgress(resources.constants().uploadInProgress(), messages.uploadInProgress(name));
+
+                                    Function[] functions = {
+                                            new UploadPatch(eventBus, statementContext, dispatcher, resources, context)
+                                    };
+                                    new Async<FunctionContext>(progress.get()).waterfall(new FunctionContext(),
+                                        new Outcome<FunctionContext>() {
+                                            @Override
+                                            public void onFailure(final FunctionContext functionContext) {
+                                                wzd.showError(resources.constants().uploadError(), messages.uploadError(name),functionContext.getError());
+                                            }
+
+                                            @Override
+                                            public void onSuccess(final FunctionContext functionContext) {
+                                                refresh(Ids.content(name));
+                                                wzd.showSuccess(resources.constants().uploadSuccessful(), messages.uploadSuccessful(name), messages.view(Names.CONTENT),
+                                                        cxt -> { /* nothing to do, content is already selected */ });
+                                            }
+                                        }, functions);
+                                })
+                                .build();
+                            wizard.show();
+                        }
+                    });
+
+            }));
     }
 
     /**
-     * Checks if the host is in restart mode, if yes then asks user to restart host, as it must be restarted before
+     * Checks if the host or server is in restart mode, if yes then asks user to restart host/server, as it must be restarted before
      * a patch can be installed or to call a rollback on a installed patch.
      *
      * @param callback
      */
     private void checkHostState(Dispatcher.SuccessCallback callback) {
 
-        ResourceAddress address = new ResourceAddress().add(HOST, statementContext.selectedHost());
-        Operation operation = new Operation.Builder(address, READ_RESOURCE_OPERATION)
-                .param(INCLUDE_RUNTIME, true)
-                .build();
+        Messages messages = resources.messages();
+        if (environment.isStandalone()) {
+            Operation operation = new Operation.Builder(ResourceAddress.root(), READ_RESOURCE_OPERATION)
+                    .param(INCLUDE_RUNTIME, true)
+                    .param(ATTRIBUTES_ONLY, true)
+                    .build();
 
-        dispatcher.execute(operation, result -> {
+            dispatcher.execute(operation, result -> {
+                Server.STANDALONE.addServerAttributes(result);
+                if (Server.STANDALONE.needsRestart()) {
+                    serverActions.restartStandalone(Server.STANDALONE, messages.patchRestartStandaloneQuestion());
+                } else {
+                    callback.onSuccess(null);
+                }
+            });
+        } else {
+            ResourceAddress address = new ResourceAddress().add(HOST, statementContext.selectedHost());
+            Operation operation = new Operation.Builder(address, READ_RESOURCE_OPERATION)
+                    .param(INCLUDE_RUNTIME, true)
+                    .param(ATTRIBUTES_ONLY, true)
+                    .build();
 
-            Property prop = new Property(statementContext.selectedHost(), result);
-            Host host = new Host(prop);
-            if (host.needsRestart()) {
-                SafeHtml question = host.isDomainController()
-                        ? resources.messages().patchRestartDomainControllerQuestion(host.getName())
-                        : resources.messages().patchRestartHostControllerQuestion(host.getName());
+            dispatcher.execute(operation, result -> {
 
-                hostActions.restart(host, question);
-            } else {
-                callback.onSuccess(null);
-            }
-        });
+                Property prop = new Property(statementContext.selectedHost(), result);
+                Host host = new Host(prop);
+                if (host.needsRestart()) {
+                    SafeHtml question = host.isDomainController()
+                            ? messages.patchRestartDomainControllerQuestion(host.getName())
+                            : messages.patchRestartHostControllerQuestion(host.getName());
+
+                    hostActions.restart(host, question);
+                } else {
+                    callback.onSuccess(null);
+                }
+            });
+        }
 
     }
 
     /**
+     * Checks if each servers of a host is stopped, if the server is started, asks the user to stop them.
+     * It is a good practice to apply/rollback a patch to a stopped server to prevent application and internal services
+     * from failing.
      *
+     * @param callback
      */
-    static class UploadPatch implements Function<FunctionContext> {
-
-        private EventBus eventBus;
-        private StatementContext statementContext;
-        private final Environment environment;
-        private final Dispatcher dispatcher;
-        private Resources resources;
-        private PatchContext patchContext;
-
-        UploadPatch(final EventBus eventBus, final StatementContext statementContext, final Environment environment,
-                final Dispatcher dispatcher, final Resources resources, final PatchContext patchContext) {
-            this.eventBus = eventBus;
-            this.statementContext = statementContext;
-            this.environment = environment;
-            this.dispatcher = dispatcher;
-            this.resources = resources;
-            this.patchContext = patchContext;
-        }
+    private void checkServersState(Dispatcher.SuccessCallback callback) {
 
-        @Override
-        public void execute(final Control<FunctionContext> control) {
-            _log.info(""UploadPatch content: "" + patchContext.file.name);
-            ResourceAddress address = SELECTED_PATCHING_TEMPLATE.resolve(statementContext);
-            Operation.Builder opBuilder = new Operation.Builder(address, PATCH)
-                    .param(OVERRIDE_ALL, patchContext.overrideAll)
-                    .param(OVERRIDE_MODULE, patchContext.overrideModules);
-            if (patchContext.override != null)
-                opBuilder.param(OVERRIDE, patchContext.override.toArray(new String[patchContext.override.size()]));
-            if (patchContext.preserve != null)
-                opBuilder.param(PRESERVE, patchContext.preserve.toArray(new String[patchContext.preserve.size()]));
-
-            Operation operation = opBuilder.build();
+        if (environment.isStandalone()) {
+            callback.onSuccess(null);
+        } else {
 
-            operation.get(CONTENT).add().get(""input-stream-index"").set(0); //NON-NLS
-            _log.info(""upload patch operation: "" + operation);
-
-            dispatcher.upload(patchContext.file, operation,
-                    result -> {
-                        _log.info(""callback patch upload result: "" + result);
-                        MessageEvent.fire(eventBus, Message.success(resources.messages().patchSucessfullyApplied(patchContext.file.name)));
-                        control.proceed();
-                    },
-
-                    (op, failure) -> {
-                        MessageEvent.fire(eventBus, Message.error(resources.messages().patchAddError(patchContext.file.name, failure)));
-                        _log.info(""callback failure patch upload: "" + failure);
-                        control.proceed();
-                    },
+            String host = statementContext.selectedHost();
+            ResourceAddress address = new ResourceAddress().add(HOST, host);
+            Operation operation = new Operation.Builder(address, READ_CHILDREN_RESOURCES_OPERATION)
+                    .param(INCLUDE_RUNTIME, true)
+                    .param(CHILD_TYPE, SERVER_CONFIG)
+                    .build();
 
-                    (op, exception) -> {
-                        MessageEvent.fire(eventBus, Message.error(resources.messages().patchAddError(patchContext.file.name, exception.getMessage())));
-                        _log.info(""callback exception patch upload: "" + exception);
-                        control.proceed();
-                    });
+            dispatcher.execute(operation, result -> {
+                List<Property> servers = result.asPropertyList();
+                List<String> serversString = new ArrayList<>();
+                boolean anyServerStarted = false;
+                for (Iterator<Property> iter = servers.iterator(); iter.hasNext(); ) {
+                    Property serverProp = iter.next();
+                    Server server = new Server(host, serverProp);
+                    if (!server.isStopped()) {
+                        serversString.add(serverProp.getName());
+                        anyServerStarted = true;
+                    } else {
+                        iter.remove();
+                    }
+                }
+
+                if (anyServerStarted) {
+                    String serversList = Joiner.on("", "").join(serversString);
+                    SafeHtml question = resources.messages().patchStopAllServersQuestion(serversList, host);
+                    DialogFactory.showConfirmation(resources.messages().patchStopAllServersTitle(), question,
+                            () -> {
+                                for (Property serverProp : servers) {
+                                    Server server = new Server(host, serverProp);
+                                    serverActions.stopNow(server);
+                                }
+                            });
+                } else {
+                    callback.onSuccess(null);
+                }
+            });
         }
     }
 ",2017-08-09T18:57:21Z,274
"@@ -60,7 +60,7 @@ public PatchingFinderPresenter(
 
     @Override
     protected String initialColumn() {
-        return environment.isStandalone() ? Ids.PATCHING_STANDALONE : Ids.PATCHING_DOMAIN;
+        return environment.isStandalone() ? Ids.PATCHING : Ids.PATCHING_DOMAIN;
     }
 
     @Override",2017-08-09T18:57:21Z,332
"@@ -17,7 +17,6 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.logging.Logger;
 
 import elemental2.dom.HTMLElement;
 import org.jboss.hal.ballroom.form.Form;
@@ -36,12 +35,11 @@
 
 public class PatchNamesStep extends WizardStep<PatchContext, PatchState> {
 
-    static Logger _log = Logger.getLogger(""org.jboss"");
     private final Form<ModelNode> form;
     private final Environment environment;
 
     public PatchNamesStep(final Environment environment, final Metadata metadata, final Resources resources) {
-        super(""Configure patch"");
+        super(resources.messages().configurePatchTitle());
         this.environment = environment;
 
         form = new ModelNodeForm.Builder<>(Ids.PATCH_UPLOAD_NAMES_FORM, metadata)",2017-08-09T18:57:21Z,40
"@@ -201,53 +201,56 @@ public void restart(Server server) {
     }
 
     private void restartStandalone(Server server) {
+        restartStandalone(server, resources.messages().restartStandaloneQuestion(server.getName()));
+    }
+
+    public void restartStandalone(Server server, SafeHtml question) {
         String title = resources.messages().restart(server.getName());
-        DialogFactory.showConfirmation(title,
-                resources.messages().restartStandaloneQuestion(server.getName()), () -> {
-                    // execute the restart with a little delay to ensure the confirmation dialog is closed
-                    // before the next dialog is opened (only one modal can be open at a time!)
-                    setTimeout((o) -> {
-
-                        prepare(server, Action.RESTART);
-                        BlockingDialog pendingDialog = DialogFactory
-                                .buildLongRunning(title,
-                                        resources.messages().restartStandalonePending(server.getName()));
-                        pendingDialog.show();
-                        Operation operation = new Operation.Builder(ResourceAddress.root(), SHUTDOWN)
-                                .param(RESTART, true)
-                                .build();
-                        Operation ping = new Operation.Builder(ResourceAddress.root(), READ_RESOURCE_OPERATION).build();
-                        dispatcher.execute(operation,
-
-                                result -> new TimeoutHandler(dispatcher, SERVER_RESTART_TIMEOUT)
-                                        .execute(ping, new TimeoutHandler.Callback() {
-                                            @Override
-                                            public void onSuccess() {
-                                                // wait a little bit before event handlers try to use the restarted server
-                                                setTimeout((o) -> {
-                                                    pendingDialog.close();
-                                                    finish(Server.STANDALONE, Result.SUCCESS, Message.success(
-                                                            resources.messages()
-                                                                    .restartServerSuccess(server.getName())));
-                                                }, 666);
-                                            }
-
-                                            @Override
-                                            public void onTimeout() {
-                                                pendingDialog.close();
-                                                DialogFactory.buildBlocking(title,
-                                                        resources.messages().restartStandaloneTimeout(server.getName()))
-                                                        .show();
-                                                finish(Server.STANDALONE, Result.TIMEOUT, null);
-                                            }
-                                        }),
-                                (o1, failure) -> finish(Server.STANDALONE, Result.ERROR,
-                                        Message.error(resources.messages().restartServerError(server.getName()))),
-                                (o2, exception) -> finish(Server.STANDALONE, Result.ERROR,
-                                        Message.error(resources.messages().restartServerError(server.getName()))));
-
-                    }, SHORT_TIMEOUT);
-                });
+        DialogFactory.showConfirmation(title, question, () -> {
+            // execute the restart with a little delay to ensure the confirmation dialog is closed
+            // before the next dialog is opened (only one modal can be open at a time!)
+            setTimeout((o) -> {
+
+                prepare(server, Action.RESTART);
+                BlockingDialog pendingDialog = DialogFactory
+                        .buildLongRunning(title,
+                                resources.messages().restartStandalonePending(server.getName()));
+                pendingDialog.show();
+                Operation operation = new Operation.Builder(ResourceAddress.root(), SHUTDOWN)
+                        .param(RESTART, true)
+                        .build();
+                Operation ping = new Operation.Builder(ResourceAddress.root(), READ_RESOURCE_OPERATION).build();
+                dispatcher.execute(operation,
+
+                        result -> new TimeoutHandler(dispatcher, SERVER_RESTART_TIMEOUT)
+                                .execute(ping, new TimeoutHandler.Callback() {
+                                    @Override
+                                    public void onSuccess() {
+                                        // wait a little bit before event handlers try to use the restarted server
+                                        setTimeout((o) -> {
+                                            pendingDialog.close();
+                                            finish(Server.STANDALONE, Result.SUCCESS, Message.success(
+                                                    resources.messages()
+                                                            .restartServerSuccess(server.getName())));
+                                        }, 666);
+                                    }
+
+                                    @Override
+                                    public void onTimeout() {
+                                        pendingDialog.close();
+                                        DialogFactory.buildBlocking(title,
+                                                resources.messages().restartStandaloneTimeout(server.getName()))
+                                                .show();
+                                        finish(Server.STANDALONE, Result.TIMEOUT, null);
+                                    }
+                                }),
+                        (o1, failure) -> finish(Server.STANDALONE, Result.ERROR,
+                                Message.error(resources.messages().restartServerError(server.getName()))),
+                        (o2, exception) -> finish(Server.STANDALONE, Result.ERROR,
+                                Message.error(resources.messages().restartServerError(server.getName()))));
+
+            }, SHORT_TIMEOUT);
+        });
     }
 
     private void reloadRestart(Server server, Operation operation, Action action, int timeout,
@@ -399,6 +402,27 @@ public void onError(final Throwable error) {
                 });
     }
 
+    /**
+     * Call <code>/host={host}/server-config={sever}:stop(blocking=false)</code> the intended action is to immediately
+     * stop the server.
+     *
+     * @param server
+     */
+    public void stopNow(Server server) {
+        prepare(server, Action.STOP);
+        Operation operation = new Operation.Builder(server.getServerConfigAddress(), STOP)
+                .param(BLOCKING, false)
+                .build();
+        dispatcher.execute(operation, result -> new TimeoutHandler(dispatcher, SERVER_STOP_TIMEOUT).execute(
+                readServerConfigStatus(server),
+                checkServerConfigStatus(STOPPED, DISABLED),
+                new ServerTimeoutCallback(server, Action.STOP,
+                        resources.messages().stopServerSuccess(server.getName()))),
+                new ServerFailedCallback(server, resources.messages().stopServerError(server.getName())),
+                new ServerExceptionCallback(server, resources.messages().stopServerError(server.getName())));
+
+    }
+
     public void kill(Server server) {
         DialogFactory.showConfirmation(resources.messages().kill(server.getName()),
                 resources.messages().killServerQuestion(server.getName()),",2017-08-09T18:57:21Z,93
"@@ -525,12 +525,10 @@ public interface Ids {
     String MODEL_BROWSER_ROOT = build(MODEL_BROWSER, ""root"");
     String PATCH_ADD = build(""patch"", ADD_SUFFIX);
     String PATCH_UPLOAD_NAMES_FORM = build(""patch"", ""names"", FORM_SUFFIX);
-    String PATCHES = ""patches"";
-    String PATCHES_AGEOUT = build(PATCHES, ""ageout-history"");
-    String PATCHES_HOST = ""patches-host"";
-    String PATCHES_REFRESH = build(PATCHES, REFRESH_SUFFIX);
+    String PATCHING = ""patching"";
+    String PATCHES_AGEOUT = build(PATCHING, ""ageout-history"");
+    String PATCHES_REFRESH = build(PATCHING, REFRESH_SUFFIX);
     String PATCHING_DOMAIN = ""patching-domain"";
-    String PATCHING_STANDALONE = ""patching-standalone"";
     String PREVIEW_ID = build(FINDER, ""preview"");
     String PROFILE = ""profile"";
     String PROFILE_ADD = build(PROFILE, ADD_SUFFIX);",2017-08-09T18:57:21Z,111
"@@ -71,6 +71,7 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     String cleanPatchHistorySuccess();
     SafeHtml cloneProfileSuccess(String from, String to);
     SafeHtml closeToLogout();
+    String configurePatchTitle();
     SafeHtml configuredMailServer(String servers);
     String connectedTo(String url);
     SafeHtml contentAdded(@PluralCount int size);
@@ -221,6 +222,7 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     SafeHtml noLogFile();
     SafeHtml noMacrosDescription(String startMacro);
     String nonEmptyRequires(String fields);
+    String noPatchesForHost();
     SafeHtml noReferenceServerPreview(String deployment, String attribute1, String attribute2, String serverGroup, String historyToken);
     SafeHtml noReferenceServerEmptyState(String deployment, String serverGroup);
     SafeHtml noReset();
@@ -237,10 +239,14 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     String operations(int size);
 
     SafeHtml pageNotFound(String invalidHistoryToken);
+    String patchLatestInstalledLabel();
     SafeHtml patchHostNeedsRestart(String hostname);
     SafeHtml patchRestartDomainControllerQuestion(String hostname);
     SafeHtml patchRestartHostControllerQuestion(String hostname);
+    SafeHtml patchRestartStandaloneQuestion();
     SafeHtml patchSucessfullyApplied(String patchId);
+    String patchStopAllServersTitle();
+    SafeHtml patchStopAllServersQuestion(String servers, String host);
     SafeHtml patchAddError(String patchId, String error);
     SafeHtml patchSucessfullyRemoved(String patchId);
     SafeHtml pauseQueueSuccess(String name);",2017-08-09T18:57:21Z,94
"@@ -28,6 +28,7 @@ cleanPatchHistoryQuestion={0} This action will prevent rollback of installed pat
 cleanPatchHistorySuccess=Patch history successfully cleaned.
 cloneProfileSuccess=Profile <strong>{0}</strong> successfully cloned to <strong>{1}</strong>.
 closeToLogout=In order to logout, please close the current window / tab and reopen the console.
+configurePatchTitle=Configure patch
 configuredMailServer=Configured mail servers: {0}
 connectedTo=Connected to {0}
 contentAdded=<strong>{0}</strong> content items have been added.
@@ -169,6 +170,7 @@ noMessagesSelected=No messages selected!
 noLogFile=No log file specified.
 noMacrosDescription=No macros have been recorded so far. To record a macro choose <strong>{0}</strong> from the tools menu.
 nonEmptyRequires=Required if {0} is set.
+noPatchesForHost=No patch installed for this host.
 noReferenceServerEmptyState=No runtime information available for deployment <strong>{0}</strong>. The server group {1} does not contain a running server, which contains this deployment. Goto server group {1} and start a server in order to see runtime related information.
 noReferenceServerPreview=Runtime attributes such as &#39;{1}&#39; or &#39;{2}&#39; could not be read for <strong>{0}</strong>. No running server was found, which contains this deployment. Goto server group <a href=""{4}"">{3}</a> and start a server in order to see all details.
 noReset=None of the attributes could be reset.
@@ -183,12 +185,16 @@ noWrite=No write behaviour has been defined for this store. Please choose a beha
 normalLogFile=The log file has a size of <strong>{0}</strong>.
 operations={0, number} operations
 pageNotFound=Page <strong>{0}</strong> not found.
+patchLatestInstalledLabel=Latest applied patch
 patchHostNeedsRestart=The host <strong>{0}</strong> needs to be restarted. A patch cannot be added or rolled back before the host is restarted.
 patchSucessfullyApplied=Patch {0} successfully installed.
 patchAddError=There is an error installing patch {0}. Reason: {1}
 patchSucessfullyRemoved=Patch <strong>{0}</strong> successfully removed.
 patchRestartHostControllerQuestion=<p>The host <strong>{0}</strong> needs to be restarted. A patch cannot be added or rolled back before the host is restarted.</p><p>Are you sure you want to restart the host controller <strong>{0}</strong> ?</p>
+patchRestartStandaloneQuestion=<p>The server needs to be restarted. A patch cannot be added or rolled back before the server is restarted.</p><p>Are you sure you want to restart the server ?</p>
 patchRestartDomainControllerQuestion=<p>The host <strong>{0}</strong> needs to be restarted. A patch cannot be added or rolled back before the host is restarted.</p><p>Are you sure you want to restart the domain controller <strong>{0}</strong>? The console won&#39;t be available until the domain controller has been successfully restarted.</p>
+patchStopAllServersTitle=Stop servers
+patchStopAllServersQuestion=<p>The patching mechanism will replace library files, to avoid conflicts and problems for applications deployed and running on servers, it is highly recommended to shutdown all servers running under host <strong>{1}</strong>.</p><p>Do you want to stop the following servers <strong>{0}</strong> from host <strong>{1}</strong> ?</p><p>Each server will shutdown immediately.</p>
 pauseQueueSuccess=Queue <strong>{0}</strong> successfully paused.
 profileIncludes=The profile includes the following profiles: {0}.
 profileNotUsedInServerGroups=The profile is not used in any server group.",2017-08-09T18:57:21Z,94
"@@ -1,8 +1,15 @@
 cleanPatchHistory=Limpar o hist\u00f3rico de corre\u00e7\u00f5es
 cleanPatchHistoryQuestion={0} Esta a\u00e7\u00e3o ir\u00e1 prevenir o rollback das corre\u00e7\u00f5es j\u00e1 instaladas e n\u00e3o pode ser desfeita. <p>Voc\u00ea realmente quer limpar o hist\u00f3rico de corre\u00e7\u00f5es ?</p>
 cleanPatchHistorySuccess=Limpeza do histórico de correções feita com sucesso.
+configurePatchTitle=Configurar corre\u00e7\u00e3o
 noSelectedPatch=Nenhum arquivo de corre\u00e7\u00e3o selecionado. Por favor selecione um arquivo de corre\u00e7\u00e3o para enviar.
+noPatchesForHost=N\u00e3o h\u00e1 corre\u00e7\u00f5es instaladas para este servidor de controle.
+patchLatestInstalledLabel=\u00daltima corre\u00e7\u00e3o instalada
 patchHostNeedsRestart=O servidor de controle <strong>{0}</strong> precisa ser reiniciado. Uma corre\u00e7\u00e3o n\u00e3o pode ser adicionada ou removida antes do servidor de controle ser reiniciado.
 patchSucessfullyApplied=Corre\u00e7\u00e3o {0} instalada com sucesso.
 patchAddError=Ocorreu um erro na instala\u00e7\u00e3o da corre\u00e7\u00e3o {0}. Motivo: {1}
 patchSucessfullyRemoved=Corre\u00e7\u00e3o <strong>{0}</strong> removida com sucesso.
+patchRestartHostControllerQuestion=<p>O servidor de controle <strong>{0}</strong> precisa ser reiniciado. Uma corre\u00e7\u00e3o n\u00e3o pode ser adicionada ou removida antes do servidor de controle ser reiniciado.</p><p>Voc\u00ea tem certeza de que quer reiniciar o servi\u00e7o de controle <strong>{0}</strong> ?</p>
+patchRestartDomainControllerQuestion=<p>O servidor de controle de dom\u00ednio <strong>{0}</strong> precisa ser reiniciado. Uma corre\u00e7\u00e3o n\u00e3o pode ser adicionada ou removida antes do servidor de controle ser reiniciado.</p><p>Voc\u00ea tem certeza de que quer reiniciar o servi\u00e7o de controle <strong>{0}</strong></p> ? <p>O console de gerenciamento web ficar\u00e1 indispon\u00edvel at\u00e9 que o servidor de controle de dom\u00ednio (Domain Controller) seja iniciado corretamente.</p>
+patchRestartStandaloneQuestion=<p>O servidor precisa ser reiniciado. Uma corre\u00e7\u00e3o n\u00e3o pode ser adicionada ou removida antes do servidor reiniciado.</p><p>Voc\u00ea tem certeza de que quer reiniciar o servidor ?</p><p>O console de gerenciamento web ficar\u00e1 indispon\u00edvel at\u00e9 que o servidor seja iniciado corretamente.</p>
+patchStopAllServersQuestion=<p>A aplica\u00e7\u00e3o da corre\u00e7\u00e3o ir\u00e1 substituir arquivos da instala\u00e7\u00e3o, para evitar conflitos e problemas para as aplica\u00e7\u00f5es instaladas e em funcionamento nos servidores \u00e9 altamente recomend\u00e1vel que pare todos os servidores em funcionamento sob o controlador <strong>{1}</strong>.</p><p>Voc\u00ea quer parar os seguintes servidores <strong>{0}</strong> do servi\u00e7o de controle (Host Controller) <strong>{1}</strong> ?</p><p>Cada servidor ser\u00e1 parado imediatamente.</p>",2017-08-09T18:57:21Z,94
"@@ -18,7 +18,7 @@
     ""js-cookie"": ""~2.1.3"",
     ""javascript-auto-complete"": ""1.0.4"",
     ""jquery"": ""~2.2.4"",
-    ""jstree"": ""~3.3.3"",
+    ""jstree"": ""~3.3.4"",
     ""patternfly"": ""~3.26.1"",
     ""tagmanager"": ""~3.0.2"",
     ""zeroclipboard"": ""^2.2.0""",2017-10-07T20:47:42Z,213
"@@ -15,7 +15,6 @@
  */
 package org.jboss.hal.client.deployment;
 
-import java.util.List;
 import java.util.Set;
 import java.util.function.Consumer;
 
@@ -39,7 +38,7 @@
 import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.ballroom.form.TextBoxItem;
 import org.jboss.hal.ballroom.tree.Node;
-import org.jboss.hal.ballroom.tree.SelectionChangeHandler.SelectionContext;
+import org.jboss.hal.ballroom.tree.SelectionContext;
 import org.jboss.hal.ballroom.tree.Tree;
 import org.jboss.hal.core.Strings;
 import org.jboss.hal.core.deployment.Content;
@@ -56,13 +55,14 @@
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
-import org.jboss.hal.spi.Callback;
+import org.jboss.hal.resources.UIConstants;
 import org.jboss.hal.spi.Message;
 import org.jboss.hal.spi.MessageEvent;
 import rx.Completable;
 
 import static com.google.common.base.Strings.isNullOrEmpty;
 import static com.google.common.base.Strings.nullToEmpty;
+import static elemental2.dom.DomGlobal.alert;
 import static elemental2.dom.DomGlobal.window;
 import static java.lang.Math.max;
 import static java.util.Collections.emptyList;
@@ -75,10 +75,11 @@
 import static org.jboss.hal.ballroom.Skeleton.MARGIN_SMALL;
 import static org.jboss.hal.ballroom.Skeleton.applicationHeight;
 import static org.jboss.hal.ballroom.Skeleton.applicationOffset;
+import static org.jboss.hal.client.deployment.ContentParser.NODE_ID;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.resources.CSS.*;
 
-/** UI element to browse the content of an item from the content repository. */
+/** UI element to browse and modify the content of an item from the content repository. */
 class BrowseContentElement implements IsElement, Attachable {
 
     @SuppressWarnings(""HardCodedStringLiteral"")
@@ -138,28 +139,28 @@ class BrowseContentElement implements IsElement, Attachable {
     private final Dispatcher dispatcher;
     private final EventBus eventBus;
     private final Resources resources;
-    private final Callback refreshCallback;
 
-    private final ContentParser contentParser;
+    private final HTMLElement root;
     private final Search treeSearch;
     private Tree<ContentEntry> tree;
     private final EmptyState pleaseSelect;
     private final EmptyState deploymentPreview;
     private final EmptyState unsupportedFileType;
-    private AceEditor editor;
+    private final AceEditor editor;
 
-    private final HTMLElement addRemoveControls;
-    private final HTMLButtonElement removeButton;
+    private final HTMLButtonElement collapseButton;
+    private final HTMLButtonElement addContentButton;
+    private final HTMLButtonElement uploadContentButton;
+    private final HTMLElement downloadContentLink;
+    private final HTMLButtonElement removeContentButton;
     private final HTMLElement treeContainer;
     private final HTMLElement editorControls;
     private final HTMLElement editorStatus;
-    private final HTMLElement downloadButton;
-    private final HTMLButtonElement saveButton;
+    private final HTMLButtonElement saveContentButton;
     private final HTMLElement previewContainer;
     private final HTMLElement previewHeader;
     private final HTMLElement previewImageContainer;
     private final HTMLImageElement previewImage;
-    private final HTMLElement root;
 
     private Content content;
     private int surroundingHeight;
@@ -168,41 +169,30 @@ class BrowseContentElement implements IsElement, Attachable {
     // ------------------------------------------------------ ui setup
 
     @SuppressWarnings(""ConstantConditions"")
-    BrowseContentElement(Dispatcher dispatcher, EventBus eventBus, Resources resources, Callback refreshCallback) {
+    BrowseContentElement(Dispatcher dispatcher, EventBus eventBus, Resources resources) {
         this.dispatcher = dispatcher;
         this.eventBus = eventBus;
         this.resources = resources;
-        this.refreshCallback = refreshCallback;
-        this.contentParser = new ContentParser();
         this.surroundingHeight = 0;
 
-        treeSearch = new Search.Builder(Ids.CONTENT_TREE_SEARCH,
-                query -> {
-                    if (tree.api() != null) {
-                        tree.api().search(query);
-                    }
-                })
-                .onClear(() -> {
-                    if (tree.api() != null) {
-                        tree.api().clearSearch();
-                    }
-                })
+        treeSearch = new Search.Builder(Ids.CONTENT_TREE_SEARCH, query -> tree.search(query))
+                .onClear(() -> tree.clearSearch())
                 .build();
         treeSearch.asElement().classList.add(marginLeftSmall);
 
-        Search contentSearch = new Search.Builder(Ids.CONTENT_SEARCH,
-                query -> editor.getEditor().find(query))
-                .onPrevious(query -> editor.getEditor().findPrevious())
-                .onNext(query -> editor.getEditor().findNext())
-                .build();
-
         Options editorOptions = new Options();
         editorOptions.readOnly = false;
         editorOptions.showGutter = true;
         editorOptions.showLineNumbers = true;
         editorOptions.showPrintMargin = false;
         editor = new AceEditor(Ids.CONTENT_EDITOR, editorOptions);
 
+        Search contentSearch = new Search.Builder(Ids.CONTENT_SEARCH,
+                query -> editor.getEditor().find(query))
+                .onPrevious(query -> editor.getEditor().findPrevious())
+                .onNext(query -> editor.getEditor().findNext())
+                .build();
+
         pleaseSelect = new EmptyState.Builder(resources.constants().nothingSelected())
                 .icon(Icons.INFO)
                 .description(resources.constants().noContentSelected())
@@ -217,9 +207,9 @@ class BrowseContentElement implements IsElement, Attachable {
                 .icon(Icons.UNKNOWN)
                 .description(resources.constants().unsupportedFileTypeDescription())
                 .primaryAction(resources.constants().download(),
-                        () -> window.location.assign(downloadUrl((tree.api().getSelected().data))))
+                        () -> window.location.assign(downloadUrl((tree.getSelected().data))))
                 .secondaryAction(resources.constants().viewInEditor(),
-                        () -> viewInEditor(tree.api().getSelected().data))
+                        () -> viewInEditor(tree.getSelected().data))
                 .build();
 
         root = row()
@@ -228,29 +218,42 @@ class BrowseContentElement implements IsElement, Attachable {
                                 .add(div().css(btnToolbar)
                                         .add(div().css(btnGroup)
                                                 .add(button().css(btn, btnDefault)
-                                                        .on(click, event -> refreshCallback.execute())
+                                                        .on(click, event -> refresh())
                                                         .title(resources.constants().refresh())
                                                         .add(i().css(fontAwesome(CSS.refresh))))
-                                                .add(button().css(btn, btnDefault)
-                                                        .on(click, event -> collapse(tree.api().getSelected()))
+                                                .add(collapseButton = button().css(btn, btnDefault)
+                                                        .on(click, event -> {
+                                                            Node<ContentEntry> selection = tree.getSelected();
+                                                            if (selection != null) {
+                                                                tree.selectNode(selection.id, true);
+                                                            }
+                                                        })
                                                         .title(resources.constants().collapse())
-                                                        .add(i().css(fontAwesome(""minus"")))))
-                                        .add(addRemoveControls = div().css(btnGroup)
-                                                .add(button().css(btn, btnDefault)
-                                                        .on(click, event -> newContent())
-                                                        .title(resources.constants().newContent())
-                                                        .add(i().css(fontAwesome(""file-o""))))
-                                                .add(button().css(btn, btnDefault)
+                                                        .add(i().css(fontAwesome(""minus"")))
+                                                        .asElement()))
+                                        .add(div().css(btnGroup)
+                                                .add(addContentButton = button().css(btn, btnDefault)
                                                         .on(click, event -> addContent())
+                                                        .title(resources.constants().newContent())
+                                                        .add(i().css(fontAwesome(""file-o"")))
+                                                        .asElement())
+                                                .add(uploadContentButton = button().css(btn, btnDefault)
+                                                        .on(click, event -> uploadContent())
                                                         .title(resources.constants().uploadContent())
                                                         .title(resources.constants().addContent())
-                                                        .add(i().css(fontAwesome(""upload""))))
-                                                .add(removeButton = button().css(btn, btnDefault)
+                                                        .add(i().css(fontAwesome(""upload"")))
+                                                        .asElement())
+                                                .add(downloadContentLink = a().css(btn, btnDefault)
+                                                        .title(resources.constants().download())
+                                                        .attr(UIConstants.TARGET, ""_blank"") //NON-NLS
+                                                        .attr(UIConstants.ROLE, UIConstants.BUTTON)
+                                                        .add(span().css(fontAwesome(""download"")))
+                                                        .asElement())
+                                                .add(removeContentButton = button().css(btn, btnDefault)
                                                         .on(click, event -> removeContent())
                                                         .title(resources.constants().removeContent())
                                                         .add(i().css(pfIcon(""remove"")))
-                                                        .asElement())
-                                                .asElement()))
+                                                        .asElement())))
                                 .add(treeSearch))
                         .add(treeContainer = div().css(CSS.treeContainer).asElement()))
                 .add(column(8)
@@ -271,14 +274,10 @@ class BrowseContentElement implements IsElement, Attachable {
                                                         .textContent(resources.constants().nothingSelected())
                                                         .asElement()))
                                         .add(div().css(editorButtons)
-                                                .add(saveButton = button().css(btn, btnDefault, clickable)
+                                                .add(saveContentButton = button().css(btn, btnDefault, clickable)
                                                         .on(click, event -> saveContent())
                                                         .title(resources.constants().save())
                                                         .add(span().css(fontAwesome(""floppy-o"")))
-                                                        .asElement())
-                                                .add(downloadButton = a().css(btn, btnDefault, clickable)
-                                                        .title(resources.constants().download())
-                                                        .add(span().css(fontAwesome(""download"")))
                                                         .asElement()))
                                         .asElement())
                                 .add(editor)
@@ -287,7 +286,7 @@ class BrowseContentElement implements IsElement, Attachable {
                                 .add(unsupportedFileType)))
                 .asElement();
 
-        saveButton.disabled = true;
+        saveContentButton.disabled = true;
         Elements.setVisible(pleaseSelect.asElement(), true);
         Elements.setVisible(editorControls, false);
         Elements.setVisible(editor.asElement(), false);
@@ -326,16 +325,19 @@ void setSurroundingHeight(int surroundingHeight) {
     }
 
     private void adjustHeight() {
-        int treeOffset = (int) (applicationOffset() + 2 * MARGIN_BIG + treeSearch.asElement().offsetHeight + MARGIN_SMALL + surroundingHeight);
+        int treeOffset = (int) (applicationOffset() +
+                2 * MARGIN_BIG + treeSearch.asElement().offsetHeight + MARGIN_SMALL + surroundingHeight);
         int previewHeaderHeight = (int) previewHeader.offsetHeight;
-        int previewOffset = applicationOffset() + 2 * MARGIN_BIG + MARGIN_SMALL + previewHeaderHeight + surroundingHeight;
+        int previewOffset = applicationOffset() +
+                2 * MARGIN_BIG + MARGIN_SMALL + previewHeaderHeight + surroundingHeight;
 
         treeContainer.style.height = vh(treeOffset);
         previewImageContainer.style.height = vh(previewOffset);
     }
 
     private void adjustEditorHeight() {
-        int editorHeight = (int) (applicationHeight() - 2 * MARGIN_BIG - MARGIN_SMALL - editorControls.offsetHeight - surroundingHeight);
+        int editorHeight = (int) (applicationHeight() -
+                2 * MARGIN_BIG - MARGIN_SMALL - editorControls.offsetHeight - surroundingHeight);
 
         if (Elements.isVisible(editor.asElement())) {
             editor.asElement().style.height = height(px(max(editorHeight, MIN_HEIGHT)));
@@ -344,113 +346,18 @@ private void adjustEditorHeight() {
     }
 
 
-    // ------------------------------------------------------ ui visibility / states
+    // ------------------------------------------------------ CRUD content methods
 
-    void setContent(Content content, ModelNode browseContentResult) {
+    void setContent(Content content) {
         this.content = content;
-        Elements.setVisible(addRemoveControls, content.isExploded());
-
-        Array<Node<ContentEntry>> nodes = new Array<>();
-        Node<ContentEntry> root = new Node.Builder<>(Ids.CONTENT_TREE_ROOT, content.getName(), new ContentEntry())
-                .root()
-                .folder()
-                .open()
-                .build();
-        List<ModelNode> modelNodes = browseContentResult.isDefined() ? browseContentResult.asList() : emptyList();
-        contentParser.parse(nodes, root, modelNodes);
-
-        tree = new Tree<>(Ids.CONTENT_TREE, nodes);
-        Elements.removeChildrenFrom(treeContainer);
-        treeContainer.appendChild(tree.asElement());
-        tree.attach();
-        tree.onSelectionChange((event, selectionContext) -> {
-            if (!""ready"".equals(selectionContext.action)) { //NON-NLS
-                selectNode(selectionContext);
-            }
-        });
-        noSelection();
-    }
-
-    private void noSelection() {
-        removeButton.disabled = true;
-        Elements.setVisible(pleaseSelect.asElement(), true);
-        Elements.setVisible(editorControls, false);
-        Elements.setVisible(editor.asElement(), false);
-        Elements.setVisible(deploymentPreview.asElement(), false);
-        Elements.setVisible(unsupportedFileType.asElement(), false);
-        Elements.setVisible(previewContainer, false);
-    }
-
-    private void deploymentPreview() {
-        removeButton.disabled = true;
-        Elements.setVisible(pleaseSelect.asElement(), false);
-        Elements.setVisible(editorControls, false);
-        Elements.setVisible(editor.asElement(), false);
-        Elements.setVisible(deploymentPreview.asElement(), !content.isExploded());
-        Elements.setVisible(unsupportedFileType.asElement(), false);
-        Elements.setVisible(previewContainer, false);
-
-        deploymentPreview.setHeader(content.getName());
-        deploymentPreview.setPrimaryAction(resources.constants().download(),
-                () -> window.location.assign(downloadUrl(null)));
-    }
-
-    private void directory() {
-        removeButton.disabled = true;
-        Elements.setVisible(pleaseSelect.asElement(), false);
-        Elements.setVisible(editorControls, false);
-        Elements.setVisible(editor.asElement(), false);
-        Elements.setVisible(deploymentPreview.asElement(), false);
-        Elements.setVisible(unsupportedFileType.asElement(), false);
-        Elements.setVisible(previewContainer, false);
-    }
-
-    private void viewInEditor(ContentEntry contentEntry) {
-        removeButton.disabled = false;
-        Elements.setVisible(pleaseSelect.asElement(), false);
-        Elements.setVisible(editorControls, true);
-        Elements.setVisible(editor.asElement(), true);
-        Elements.setVisible(deploymentPreview.asElement(), false);
-        Elements.setVisible(unsupportedFileType.asElement(), false);
-        Elements.setVisible(previewContainer, false);
-        adjustEditorHeight();
-
-        editorStatus.textContent = contentEntry.name + "" - "" + Format.humanReadableFileSize(contentEntry.fileSize);
-        downloadButton.setAttribute(""href"", downloadUrl(contentEntry)); //NON-NLS
-        loadContent(contentEntry, result -> {
-            saveButton.disabled = true;
-            editor.setModeFromPath(contentEntry.name);
-            editor.getEditor().getSession().setValue(result);
-            editor.getEditor().getSession().on(""change"", delta -> saveButton.disabled = false); //NON-NLS
-        });
-    }
-
-    private void viewInPreview(ContentEntry contentEntry) {
-        removeButton.disabled = false;
-        Elements.setVisible(pleaseSelect.asElement(), false);
-        Elements.setVisible(editorControls, false);
-        Elements.setVisible(editor.asElement(), false);
-        Elements.setVisible(deploymentPreview.asElement(), false);
-        Elements.setVisible(unsupportedFileType.asElement(), false);
-        Elements.setVisible(previewContainer, true);
+        Elements.setVisible(addContentButton, content.isExploded());
+        Elements.setVisible(uploadContentButton, content.isExploded());
+        Elements.setVisible(removeContentButton, content.isExploded());
 
-        previewImage.src = downloadUrl(contentEntry);
+        browseContent().subscribe(this::noSelection);
     }
 
-    private void unsupportedFileType() {
-        removeButton.disabled = false;
-        Elements.setVisible(pleaseSelect.asElement(), false);
-        Elements.setVisible(editorControls, false);
-        Elements.setVisible(editor.asElement(), false);
-        Elements.setVisible(deploymentPreview.asElement(), false);
-        Elements.setVisible(unsupportedFileType.asElement(), true);
-        Elements.setVisible(previewContainer, false);
-    }
-
-
-    // ------------------------------------------------------ event handler
-
-    private void newContent() {
+    private void addContent() {
         NameItem nameItem = new NameItem();
         TextBoxItem pathItem = new TextBoxItem(TARGET_PATH);
         Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.CONTENT_NEW, Metadata.empty())
@@ -467,24 +374,91 @@ private void newContent() {
             Operation operation = new Operation.Builder(address, ADD_CONTENT)
                     .param(CONTENT, new ModelNode().add(contentNode))
                     .build();
-            dispatcher.upload(file(nameItem.getValue(), """"), operation, result -> {
-                refreshCallback.execute();
-                MessageEvent.fire(eventBus,
-                        Message.success(resources.messages().newContentSuccess(content.getName(), path)));
-            });
+            dispatcher.upload(file(nameItem.getValue(), """"), operation)
+                    .toCompletable()
+                    .andThen(browseContent())
+                    .andThen(awaitTreeReady())
+                    .subscribe(() -> {
+                        MessageEvent.fire(eventBus,
+                                Message.success(resources.messages().newContentSuccess(content.getName(), path)));
+                        tree.selectNode(NODE_ID.apply(path));
+                    });
         });
         pathItem.setValue(selectedPath());
         dialog.show();
     }
 
-    private void addContent() {
+    private void uploadContent() {
+        alert(Names.NYI);
+    }
 
+    private Completable browseContent() {
+        ResourceAddress address = new ResourceAddress().add(DEPLOYMENT, content.getName());
+        Operation operation = new Operation.Builder(address, BROWSE_CONTENT).build();
+        return dispatcher.execute(operation)
+                .doOnSuccess(result -> {
+                    Node<ContentEntry> root = new Node.Builder<>(Ids.CONTENT_TREE_ROOT, content.getName(),
+                            new ContentEntry())
+                            .root()
+                            .folder()
+                            .open()
+                            .build();
+                    Array<Node<ContentEntry>> nodes = new Array<>();
+                    new ContentParser().parse(root, nodes, result.isDefined() ? result.asList() : emptyList());
+
+                    if (tree != null) {
+                        tree.destroy();
+                        tree = null;
+                    }
+                    tree = new Tree<>(Ids.CONTENT_TREE, nodes);
+                    Elements.removeChildrenFrom(treeContainer);
+                    treeContainer.appendChild(tree.asElement());
+                    tree.attach();
+                    tree.onSelectionChange((event, selectionContext) -> {
+                        if (!""ready"".equals(selectionContext.action)) { //NON-NLS
+                            onNodeSelected(selectionContext);
+                        }
+                    });
+                })
+                .toCompletable();
+    }
+
+    private void loadContent(ContentEntry contentEntry, Consumer<String> successCallback) {
+        if (!contentEntry.directory) {
+            ResourceAddress address = new ResourceAddress().add(DEPLOYMENT, content.getName());
+            Operation operation = new Operation.Builder(address, READ_CONTENT)
+                    .param(PATH, contentEntry.path)
+                    .build();
+            dispatcher.download(operation, successCallback);
+        }
+    }
+
+    private String downloadUrl(ContentEntry contentEntry) {
+        ResourceAddress address = new ResourceAddress().add(DEPLOYMENT, content.getName());
+        Operation.Builder builder = new Operation.Builder(address, READ_CONTENT);
+        if (contentEntry != null) {
+            builder.param(PATH, contentEntry.path);
+        }
+        return dispatcher.downloadUrl(builder.build());
+    }
+
+    private void refresh() {
+        String selectedId = selectedId();
+        browseContent()
+                .andThen(awaitTreeReady())
+                .subscribe(() -> {
+                    if (selectedId != null) {
+                        tree.selectNode(selectedId);
+                    }
+                });
     }
 
     private void saveContent() {
-        Node<ContentEntry> selection = tree.api().getSelected();
+        Node<ContentEntry> selection = tree.getSelected();
         if (selection != null) {
-            String filename = Strings.substringAfterLast(selection.data.path, ""/"");
+            String filename = selection.data.path.contains(""/"")
+                    ? Strings.substringAfterLast(selection.data.path, ""/"")
+                    : selection.data.path;
             String editorContent = editor.getEditor().getSession().getValue();
             ResourceAddress address = new ResourceAddress().add(DEPLOYMENT, content.getName());
             ModelNode contentNode = new ModelNode();
@@ -493,19 +467,21 @@ private void saveContent() {
             Operation operation = new Operation.Builder(address, ADD_CONTENT)
                     .param(CONTENT, new ModelNode().add(contentNode))
                     .build();
-            dispatcher.upload(file(filename, editorContent), operation, result -> {
-                saveButton.disabled = true;
-                MessageEvent.fire(eventBus,
-                        Message.success(resources.messages().saveContentSuccess(content.getName(), filename)));
-                Completable refresh = Completable.fromAction(refreshCallback::execute);
-                Completable select = Completable.fromAction(() -> tree.select(selection.id, false));
-                refresh.andThen(select).subscribe();
-            });
+            dispatcher.upload(file(filename, editorContent), operation)
+                    .doOnSuccess(result -> saveContentButton.disabled = true)
+                    .toCompletable()
+                    .andThen(browseContent())
+                    .andThen(awaitTreeReady())
+                    .subscribe(() -> {
+                        MessageEvent.fire(eventBus,
+                                Message.success(resources.messages().saveContentSuccess(content.getName(), filename)));
+                        tree.selectNode(selection.id);
+                    });
         }
     }
 
     private void removeContent() {
-        Node<ContentEntry> selection = tree.api().getSelected();
+        Node<ContentEntry> selection = tree.getSelected();
         if (selection != null) {
             String path = selection.data.path;
             DialogFactory.showConfirmation(resources.constants().removeContent(),
@@ -514,22 +490,24 @@ private void removeContent() {
                         Operation operation = new Operation.Builder(address, REMOVE_CONTENT)
                                 .param(PATHS, new ModelNode().add(path))
                                 .build();
-                        dispatcher.execute(operation, result -> {
-                            refreshCallback.execute();
-                            MessageEvent.fire(eventBus, Message.success(
-                                    resources.messages().removeContentSuccess(content.getName(), path)));
-                        });
+                        dispatcher.execute(operation)
+                                .toCompletable()
+                                .andThen(browseContent())
+                                .andThen(awaitTreeReady())
+                                .subscribe(() -> {
+                                    MessageEvent.fire(eventBus, Message.success(
+                                            resources.messages().removeContentSuccess(content.getName(), path)));
+                                    noSelection();
+                                });
                     });
         }
     }
 
-    private void collapse(Node<ContentEntry> node) {
-        if (node != null) {
-            tree.select(node.id, true);
-        }
-    }
 
-    private void selectNode(SelectionContext<ContentEntry> selection) {
+    // ------------------------------------------------------ UI state
+
+    private void onNodeSelected(SelectionContext<ContentEntry> selection) {
+        collapseButton.disabled = selection.selected.length == 0;
         if (selection.selected.length != 0) {
             if (selection.node.id.equals(Ids.CONTENT_TREE_ROOT)) {
                 deploymentPreview();
@@ -551,7 +529,7 @@ private void selectNode(SelectionContext<ContentEntry> selection) {
                         viewInPreview(contentEntry);
 
                     } else {
-                        unsupportedFileType();
+                        unsupportedFileType(contentEntry);
                     }
                 }
             }
@@ -561,12 +539,119 @@ private void selectNode(SelectionContext<ContentEntry> selection) {
         }
     }
 
+    private void noSelection() {
+        collapseButton.disabled = true;
+        downloadContentLink.classList.add(disabled);
+        removeContentButton.disabled = true;
+
+        Elements.setVisible(pleaseSelect.asElement(), true);
+        Elements.setVisible(editorControls, false);
+        Elements.setVisible(editor.asElement(), false);
+        Elements.setVisible(deploymentPreview.asElement(), false);
+        Elements.setVisible(unsupportedFileType.asElement(), false);
+        Elements.setVisible(previewContainer, false);
+    }
+
+    private void deploymentPreview() {
+        downloadContentLink.setAttribute(UIConstants.HREF, downloadUrl(null));
+        downloadContentLink.setAttribute(UIConstants.DOWNLOAD, content.getName());
+        downloadContentLink.classList.remove(disabled);
+        removeContentButton.disabled = true;
+
+        Elements.setVisible(pleaseSelect.asElement(), false);
+        Elements.setVisible(editorControls, false);
+        Elements.setVisible(editor.asElement(), false);
+        Elements.setVisible(deploymentPreview.asElement(), !content.isExploded());
+        Elements.setVisible(unsupportedFileType.asElement(), false);
+        Elements.setVisible(previewContainer, false);
+
+        deploymentPreview.setHeader(content.getName());
+        deploymentPreview.setPrimaryAction(resources.constants().download(),
+                () -> window.location.assign(downloadUrl(null)));
+    }
+
+    private void directory() {
+        downloadContentLink.removeAttribute(UIConstants.HREF);
+        downloadContentLink.removeAttribute(UIConstants.DOWNLOAD);
+        downloadContentLink.classList.add(disabled);
+        removeContentButton.disabled = true;
+
+        Elements.setVisible(pleaseSelect.asElement(), false);
+        Elements.setVisible(editorControls, false);
+        Elements.setVisible(editor.asElement(), false);
+        Elements.setVisible(deploymentPreview.asElement(), false);
+        Elements.setVisible(unsupportedFileType.asElement(), false);
+        Elements.setVisible(previewContainer, false);
+    }
+
+    private void viewInEditor(ContentEntry contentEntry) {
+        downloadContentLink.setAttribute(UIConstants.HREF, downloadUrl(contentEntry));
+        downloadContentLink.setAttribute(UIConstants.DOWNLOAD, contentEntry.name);
+        downloadContentLink.classList.remove(disabled);
+        removeContentButton.disabled = false;
+
+        Elements.setVisible(pleaseSelect.asElement(), false);
+        Elements.setVisible(editorControls, true);
+        Elements.setVisible(editor.asElement(), true);
+        Elements.setVisible(deploymentPreview.asElement(), false);
+        Elements.setVisible(unsupportedFileType.asElement(), false);
+        Elements.setVisible(previewContainer, false);
+        adjustEditorHeight();
+
+        editorStatus.textContent = contentEntry.name + "" - "" + Format.humanReadableFileSize(contentEntry.fileSize);
+        loadContent(contentEntry, result -> {
+            saveContentButton.disabled = true;
+            editor.setModeFromPath(contentEntry.name);
+            editor.getEditor().getSession().setValue(result);
+            editor.getEditor().getSession().on(""change"", delta -> saveContentButton.disabled = false); //NON-NLS
+        });
+    }
+
+    private void viewInPreview(ContentEntry contentEntry) {
+        downloadContentLink.setAttribute(UIConstants.HREF, downloadUrl(contentEntry));
+        downloadContentLink.setAttribute(UIConstants.DOWNLOAD, contentEntry.name);
+        downloadContentLink.classList.remove(disabled);
+        removeContentButton.disabled = false;
+        previewImage.src = downloadUrl(contentEntry);
+
+        Elements.setVisible(pleaseSelect.asElement(), false);
+        Elements.setVisible(editorControls, false);
+        Elements.setVisible(editor.asElement(), false);
+        Elements.setVisible(deploymentPreview.asElement(), false);
+        Elements.setVisible(unsupportedFileType.asElement(), false);
+        Elements.setVisible(previewContainer, true);
+    }
+
+    private void unsupportedFileType(ContentEntry contentEntry) {
+        downloadContentLink.setAttribute(UIConstants.HREF, downloadUrl(contentEntry));
+        downloadContentLink.setAttribute(UIConstants.DOWNLOAD, contentEntry.name);
+        downloadContentLink.classList.remove(disabled);
+        removeContentButton.disabled = false;
+
+        Elements.setVisible(pleaseSelect.asElement(), false);
+        Elements.setVisible(editorControls, false);
+        Elements.setVisible(editor.asElement(), false);
+        Elements.setVisible(deploymentPreview.asElement(), false);
+        Elements.setVisible(unsupportedFileType.asElement(), true);
+        Elements.setVisible(previewContainer, false);
+    }
+
 
     // ------------------------------------------------------ helper methods
 
+    private String selectedId() {
+        if (tree != null) {
+            Node<ContentEntry> selection = tree.getSelected();
+            if (selection != null) {
+                return selection.id;
+            }
+        }
+        return null;
+    }
+
     private String selectedPath() {
         String path = null;
-        Node<ContentEntry> selection = tree.api().getSelected();
+        Node<ContentEntry> selection = tree.getSelected();
         if (selection != null && !selection.id.equals(Ids.CONTENT_TREE_ROOT)) {
             path = Strings.strip(selection.data.path, ""/"");
             if (!selection.data.directory) {
@@ -589,22 +674,7 @@ private File file(String name, String content) {
         return new File(new ConstructorContentsArrayUnionType[]{contents}, name);
     }
 
-    private void loadContent(ContentEntry contentEntry, Consumer<String> successCallback) {
-        if (!contentEntry.directory) {
-            ResourceAddress address = new ResourceAddress().add(DEPLOYMENT, content.getName());
-            Operation operation = new Operation.Builder(address, READ_CONTENT)
-                    .param(PATH, contentEntry.path)
-                    .build();
-            dispatcher.download(operation, successCallback);
-        }
-    }
-
-    private String downloadUrl(ContentEntry contentEntry) {
-        ResourceAddress address = new ResourceAddress().add(DEPLOYMENT, content.getName());
-        Operation.Builder builder = new Operation.Builder(address, READ_CONTENT);
-        if (contentEntry != null) {
-            builder.param(PATH, contentEntry.path);
-        }
-        return dispatcher.downloadUrl(builder.build());
+    private Completable awaitTreeReady() {
+        return Completable.fromEmitter(emitter -> tree.onReady((event, any) -> emitter.onCompleted()));
     }
 }",2017-10-07T20:47:42Z,156
"@@ -29,17 +29,16 @@
 import org.jboss.hal.core.finder.FinderPathFactory;
 import org.jboss.hal.core.mvp.ApplicationFinderPresenter;
 import org.jboss.hal.core.mvp.HalView;
-import org.jboss.hal.core.mvp.HasPresenter;
-import org.jboss.hal.dmr.Composite;
-import org.jboss.hal.dmr.CompositeResult;
-import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Operation;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.ManagementModel;
 import org.jboss.hal.meta.token.NameTokens;
 
-import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.CONTENT;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.DEPLOYMENT;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.INCLUDE_RUNTIME;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.READ_RESOURCE_OPERATION;
 
 public class BrowseContentPresenter
         extends ApplicationFinderPresenter<BrowseContentPresenter.MyView, BrowseContentPresenter.MyProxy> {
@@ -49,8 +48,8 @@ public class BrowseContentPresenter
     @NameToken(NameTokens.BROWSE_CONTENT)
     public interface MyProxy extends ProxyPlace<BrowseContentPresenter> {}
 
-    public interface MyView extends HalView, HasPresenter<BrowseContentPresenter> {
-        void setContent(Content content, ModelNode browseContentResult);
+    public interface MyView extends HalView {
+        void setContent(Content content);
     }
     // @formatter:on
 
@@ -73,12 +72,6 @@ public BrowseContentPresenter(EventBus eventBus,
         this.environment = environment;
     }
 
-    @Override
-    protected void onBind() {
-        super.onBind();
-        getView().setPresenter(this);
-    }
-
     @Override
     public void prepareFromRequest(PlaceRequest request) {
         super.prepareFromRequest(request);
@@ -94,16 +87,12 @@ public FinderPath finderPath() {
     protected void reload() {
         if (ManagementModel.supportsReadContentFromDeployment(environment.getManagementVersion())) {
             ResourceAddress address = new ResourceAddress().add(DEPLOYMENT, content);
-            Operation readContent = new Operation.Builder(address, READ_RESOURCE_OPERATION)
+            Operation operation = new Operation.Builder(address, READ_RESOURCE_OPERATION)
                     .param(INCLUDE_RUNTIME, true)
                     .build();
-            Operation browseContent = new Operation.Builder(address, BROWSE_CONTENT).build();
-            dispatcher.execute(new Composite(readContent, browseContent), (CompositeResult result) -> {
-                Content content = new Content(result.step(0).get(RESULT));
-                ModelNode browseContentResult = result.step(1).get(RESULT);
-                getView().setContent(content, browseContentResult);
-            });
+            dispatcher.execute(operation, result -> getView().setContent(new Content(result)));
+        } else {
+            // TODO Fallback when browse-content is not supported
         }
-        // TODO Fallback when browse-content is not supported
     }
 }",2017-10-07T20:47:42Z,333
"@@ -20,34 +20,22 @@
 import com.google.web.bindery.event.shared.EventBus;
 import org.jboss.hal.core.deployment.Content;
 import org.jboss.hal.core.mvp.HalViewImpl;
-import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.resources.Resources;
 
 public class BrowseContentView extends HalViewImpl implements BrowseContentPresenter.MyView {
 
     private final BrowseContentElement browseContent;
-    private BrowseContentPresenter presenter;
 
     @Inject
     public BrowseContentView(Dispatcher dispatcher, EventBus eventBus, Resources resources) {
-        this.browseContent = new BrowseContentElement(dispatcher, eventBus, resources, () -> presenter.reload());
+        browseContent = new BrowseContentElement(dispatcher, eventBus, resources);
+        registerAttachable(browseContent);
         initElement(browseContent);
     }
 
     @Override
-    public void attach() {
-        super.attach();
-        browseContent.attach();
-    }
-
-    @Override
-    public void setPresenter(BrowseContentPresenter presenter) {
-        this.presenter = presenter;
-    }
-
-    @Override
-    public void setContent(Content content, ModelNode browseContentResult) {
-        browseContent.setContent(content, browseContentResult);
+    public void setContent(Content content) {
+        browseContent.setContent(content);
     }
 }",2017-10-07T20:47:42Z,289
"@@ -19,6 +19,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.function.Function;
 
 import com.google.common.base.Splitter;
 import com.google.common.collect.Iterables;
@@ -38,8 +39,10 @@ class ContentParser {
     private static final String DIRECTORY = ""directory"";
     private static final String FILE_SIZE = ""file-size"";
 
+    static final Function<String, String> NODE_ID = path -> Ids.build(""bct"", path, ""node"");
+
     @SuppressWarnings(""unchecked"")
-    void parse(Array<Node<ContentEntry>> nodes, Node<ContentEntry> root, List<ModelNode> content) {
+    void parse(Node<ContentEntry> root, Array<Node<ContentEntry>> nodes, List<ModelNode> content) {
         nodes.push(root);
 
         Map<String, Node<ContentEntry>> nodesByPath = new HashMap<>();
@@ -86,8 +89,7 @@ private ContentEntry contentEntry(ModelNode node) {
     @SuppressWarnings(""unchecked"")
     private Node<ContentEntry> pushFolder(Array<Node<ContentEntry>> nodes, Node<ContentEntry> parent,
             ContentEntry contentEntry) {
-        Node<ContentEntry> node = new Node.Builder<>(Ids.build(parent.id, Ids.uniqueId()), contentEntry.name,
-                contentEntry)
+        Node<ContentEntry> node = new Node.Builder<>(NODE_ID.apply(contentEntry.path), contentEntry.name, contentEntry)
                 .parent(parent.id)
                 .folder()
                 .build();
@@ -98,8 +100,7 @@ private Node<ContentEntry> pushFolder(Array<Node<ContentEntry>> nodes, Node<Cont
     @SuppressWarnings(""unchecked"")
     private Node<ContentEntry> pushEntry(Array<Node<ContentEntry>> nodes, Node<ContentEntry> parent,
             ContentEntry contentEntry) {
-        Node<ContentEntry> node = new Node.Builder<>(Ids.build(parent.id, Ids.uniqueId()), contentEntry.name,
-                contentEntry)
+        Node<ContentEntry> node = new Node.Builder<>(NODE_ID.apply(contentEntry.path), contentEntry.name, contentEntry)
                 .parent(parent.id)
                 .icon(fontAwesome(""file-text-o""))
                 .build();",2017-10-07T20:47:42Z,48
"@@ -23,7 +23,6 @@
 import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
 import com.gwtplatform.mvp.client.proxy.ProxyPlace;
 import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
-import org.jboss.hal.config.Environment;
 import org.jboss.hal.core.deployment.Deployment;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderPath;
@@ -32,14 +31,10 @@
 import org.jboss.hal.core.mvp.HalView;
 import org.jboss.hal.core.mvp.HasPresenter;
 import org.jboss.hal.core.runtime.server.Server;
-import org.jboss.hal.dmr.Composite;
-import org.jboss.hal.dmr.CompositeResult;
-import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Operation;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.flow.Progress;
-import org.jboss.hal.meta.ManagementModel;
 import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.resources.Resources;
 import org.jboss.hal.spi.Footer;
@@ -48,7 +43,10 @@
 import org.jboss.hal.spi.Requires;
 
 import static org.jboss.hal.client.deployment.StandaloneDeploymentColumn.DEPLOYMENT_ADDRESS;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.DEPLOY;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.DEPLOYMENT;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.INCLUDE_RUNTIME;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.READ_RESOURCE_OPERATION;
 
 public class StandaloneDeploymentPresenter extends
         ApplicationFinderPresenter<StandaloneDeploymentPresenter.MyView, StandaloneDeploymentPresenter.MyProxy> {
@@ -61,14 +59,13 @@ public interface MyProxy extends ProxyPlace<StandaloneDeploymentPresenter> {}
 
     public interface MyView extends HalView, HasPresenter<StandaloneDeploymentPresenter> {
         void reset();
-        void update(Deployment deployment, ModelNode browseContentResult, int tab);
+        void update(Deployment deployment, int tab);
     }
     // @formatter:on
 
     private final FinderPathFactory finderPathFactory;
     private final Dispatcher dispatcher;
     private final Provider<Progress> progress;
-    private final Environment environment;
     private final Resources resources;
     private String deployment;
 
@@ -80,13 +77,11 @@ public StandaloneDeploymentPresenter(EventBus eventBus,
             FinderPathFactory finderPathFactory,
             Dispatcher dispatcher,
             @Footer Provider<Progress> progress,
-            Environment environment,
             Resources resources) {
         super(eventBus, view, proxy, finder);
         this.finderPathFactory = finderPathFactory;
         this.dispatcher = dispatcher;
         this.progress = progress;
-        this.environment = environment;
         this.resources = resources;
     }
 
@@ -112,35 +107,26 @@ protected void reload() {
     }
 
     private void reload(int tab) {
-        boolean supportsBrowseContent = ManagementModel.supportsReadContentFromDeployment(
-                environment.getManagementVersion());
         ResourceAddress address = new ResourceAddress().add(DEPLOYMENT, deployment);
-        Operation readDeployment = new Operation.Builder(address, READ_RESOURCE_OPERATION)
+        Operation operation = new Operation.Builder(address, READ_RESOURCE_OPERATION)
                 .param(INCLUDE_RUNTIME, true)
                 .build();
-        Operation browseContent = new Operation.Builder(address, BROWSE_CONTENT).build();
-        Composite composite = new Composite(readDeployment);
-        if (supportsBrowseContent) {
-            composite.add(browseContent);
-        }
-        dispatcher.execute(composite, (CompositeResult result) -> {
-            Deployment deployment = new Deployment(Server.STANDALONE, result.step(0).get(RESULT));
-            ModelNode browseContentResult = supportsBrowseContent ? result.step(1).get(RESULT) : new ModelNode();
+        dispatcher.execute(operation, result -> {
             getView().reset();
-            getView().update(deployment, browseContentResult, tab);
+            getView().update(new Deployment(Server.STANDALONE, result), tab);
         });
     }
 
     void enable(String deployment) {
-        ResourceAddress address = new ResourceAddress().add(DEPLOYMENT, deployment);
         progress.get().reset();
         progress.get().tick();
+        ResourceAddress address = new ResourceAddress().add(DEPLOYMENT, deployment);
         Operation operation = new Operation.Builder(address, DEPLOY).build();
         dispatcher.execute(operation, result -> {
             progress.get().finish();
-            reload(1); // stay on model browser tab
-            MessageEvent
-                    .fire(getEventBus(), Message.success(resources.messages().deploymentEnabledSuccess(deployment)));
+            MessageEvent.fire(getEventBus(),
+                    Message.success(resources.messages().deploymentEnabledSuccess(deployment)));
+            reload(1);
         });
     }
 }",2017-10-07T20:47:42Z,334
"@@ -25,7 +25,6 @@
 import org.jboss.hal.core.deployment.Deployment;
 import org.jboss.hal.core.modelbrowser.ModelBrowser;
 import org.jboss.hal.core.mvp.HalViewImpl;
-import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.ManagementModel;
 import org.jboss.hal.resources.Ids;
@@ -48,7 +47,7 @@ public class StandaloneDeploymentView extends HalViewImpl implements StandaloneD
     public StandaloneDeploymentView(Dispatcher dispatcher, ModelBrowser modelBrowser,
             Environment environment, EventBus eventBus, Resources resources) {
         supportsReadContent = ManagementModel.supportsReadContentFromDeployment(environment.getManagementVersion());
-        browseContent = new BrowseContentElement(dispatcher, eventBus, resources, () -> presenter.reload());
+        browseContent = new BrowseContentElement(dispatcher, eventBus, resources);
         deploymentModel = new DeploymentModelElement(modelBrowser, resources);
 
         if (supportsReadContent) {
@@ -102,9 +101,9 @@ public void reset() {
     }
 
     @Override
-    public void update(Deployment deployment, ModelNode browseContentResult, int tab) {
+    public void update(Deployment deployment, int tab) {
         if (supportsReadContent) {
-            browseContent.setContent(deployment, browseContentResult);
+            browseContent.setContent(deployment);
             tabs.showTab(tab);
         }
         deploymentModel.update(deployment, () -> presenter.enable(deployment.getName()));",2017-10-07T20:47:42Z,281
"@@ -59,17 +59,8 @@ public class JndiView extends HalViewImpl implements JndiPresenter.MyView {
     @Inject
     public JndiView(JndiResources jndiResources, Resources resources) {
 
-        search = new Search.Builder(Ids.JNDI_SEARCH,
-                query -> {
-                    if (tree.api() != null) {
-                        tree.api().search(query);
-                    }
-                })
-                .onClear(() -> {
-                    if (tree.api() != null) {
-                        tree.api().clearSearch();
-                    }
-                })
+        search = new Search.Builder(Ids.JNDI_SEARCH, query -> tree.search(query))
+                .onClear(() -> tree.clearSearch())
                 .build();
 
         Metadata metadata = Metadata.staticDescription(jndiResources.jndi());
@@ -89,7 +80,12 @@ public JndiView(JndiResources jndiResources, Resources resources) {
                                                 .on(click, event -> presenter.reload())
                                                 .add(i().css(fontAwesome(CSS.refresh))))
                                         .add(button().css(btn, btnDefault)
-                                                .on(click, event -> collapse(tree.api().getSelected()))
+                                                .on(click, event -> {
+                                                    Node<JndiContext> selection = tree.getSelected();
+                                                    if (selection != null) {
+                                                        tree.selectNode(selection.id, true);
+                                                    }
+                                                })
                                                 .add(i().css(fontAwesome(""minus"")))))
                                 .add(search))
                         .add(treeContainer = div().css(CSS.treeContainer).asElement()))
@@ -119,12 +115,6 @@ private void adjustHeight() {
         treeContainer.style.height = vh(offset);
     }
 
-    private void collapse(final Node<JndiContext> node) {
-        if (node != null) {
-            tree.select(node.id, true);
-        }
-    }
-
     @Override
     @SuppressWarnings(""HardCodedStringLiteral"")
     public void update(final ModelNode jndi) {",2017-10-07T20:47:42Z,335
"@@ -16,49 +16,39 @@
 package org.jboss.hal.ballroom.tree;
 
 import jsinterop.annotations.JsMethod;
-import jsinterop.annotations.JsOverlay;
 import jsinterop.annotations.JsType;
 import org.jboss.hal.ballroom.JsCallback;
 
 @JsType(isNative = true)
-public class Api<T> {
+class Api<T> {
 
-    @JsMethod(name = ""close_node"")
-    public native void closeNode(String id);
-
-    @JsMethod(name = ""open_node"")
-    public native void openNode(String id);
-
-    @JsMethod(name = ""open_node"")
-    public native void openNode(String id, JsCallback callback);
+    @JsMethod
+    native void close_node(String id);
 
-    @JsMethod(name = ""refresh_node"")
-    public native void refreshNode(String id);
+    @JsMethod
+    native void deselect_all(boolean suppressEvent);
 
-    @JsMethod(name = ""get_node"")
-    public native Node<T> getNode(String id);
+    @JsMethod
+    native Node<T>[] get_selected(boolean full);
 
     @JsMethod
-    public native Node<T>[] get_selected(boolean full);
+    native void select_node(String id, boolean suppressEvent, boolean preventOpen);
 
-    @JsOverlay
-    public final Node<T> getSelected() {
-        Node<T>[] selected = get_selected(true);
-        return selected.length == 0 ? null : selected[0];
-    }
+    @JsMethod
+    native Node<T> get_node(String id);
 
-    @JsMethod(name = ""select_node"")
-    public native void selectNode(String id, boolean suppressEvent, boolean preventOpen);
+    @JsMethod
+    native void open_node(String id, JsCallback callback);
 
-    @JsMethod(name = ""deselect_all"")
-    public native void deselectAll(boolean suppressEvent);
+    @JsMethod
+    native void refresh_node(String id);
 
     @JsMethod
-    public native void search(String query);
+    native void search(String query);
 
-    @JsMethod(name = ""clear_search"")
-    public native void clearSearch();
+    @JsMethod
+    native void clear_search();
 
     @JsMethod
-    public native void destroy(boolean keepHtml);
+    native void destroy(boolean keepHtml);
 }",2017-10-07T20:47:42Z,336
"@@ -0,0 +1,36 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.ballroom.tree;
+
+import jsinterop.annotations.JsMethod;
+import jsinterop.annotations.JsType;
+import org.jetbrains.annotations.NonNls;
+
+import static jsinterop.annotations.JsPackage.GLOBAL;
+
+@JsType(isNative = true)
+class Bridge<T> {
+
+    @JsMethod(namespace = GLOBAL, name = ""$"")
+    native static <T> Bridge<T> select(String selector);
+
+    native void jstree(Options options);
+
+    @SuppressWarnings(""SameParameterValue"")
+    native Api<T> jstree(boolean _true);
+
+    native <E> void on(@NonNls String event, EventHandler<E> handler);
+}",2017-10-07T20:47:42Z,67
"@@ -0,0 +1,26 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.ballroom.tree;
+
+import elemental2.dom.Event;
+import jsinterop.annotations.JsFunction;
+
+@JsFunction
+@FunctionalInterface
+public interface EventHandler<E> {
+
+    void onEvent(Event event, E payload);
+}",2017-10-07T20:47:42Z,337
"@@ -15,28 +15,16 @@
  */
 package org.jboss.hal.ballroom.tree;
 
-import elemental2.dom.Event;
-import jsinterop.annotations.JsFunction;
 import jsinterop.annotations.JsType;
 
 import static jsinterop.annotations.JsPackage.GLOBAL;
 import static org.jboss.hal.resources.UIConstants.OBJECT;
 
-/** ActionHandler when the selection changes. */
-@JsFunction
-@FunctionalInterface
-public interface SelectionChangeHandler<T> {
+@JsType(isNative = true, namespace = GLOBAL, name = OBJECT)
+public class SelectionContext<T> {
 
-    @JsType(isNative = true, namespace = GLOBAL, name = OBJECT)
-    class SelectionContext<T> {
-        public String action;
-        public Api<T> api;
-        public Node<T> node;
-        public String[] selected;
-    }
-
-    /**
-     * Called when a selection changed. That is when an item is selected <em>or</em> deselected.
-     */
-    void onSelectionChanged(Event event, SelectionContext<T> context);
+    public String action;
+    public Api<T> api;
+    public Node<T> node;
+    public String[] selected;
 }",2017-10-07T20:47:42Z,68
"@@ -16,45 +16,25 @@
 package org.jboss.hal.ballroom.tree;
 
 import elemental2.core.Array;
+import elemental2.dom.Element;
 import elemental2.dom.HTMLElement;
-import jsinterop.annotations.JsMethod;
-import jsinterop.annotations.JsType;
 import org.jboss.gwt.elemento.core.IsElement;
 import org.jboss.hal.ballroom.Attachable;
+import org.jboss.hal.ballroom.JsCallback;
 
 import static elemental2.dom.DomGlobal.document;
-import static jsinterop.annotations.JsPackage.GLOBAL;
 import static org.jboss.gwt.elemento.core.Elements.div;
 
 public class Tree<T> implements IsElement, Attachable {
 
-    @JsType(isNative = true)
-    public static class Bridge<T> {
-
-        @JsMethod(namespace = GLOBAL, name = ""$"")
-        public native static <T> Bridge<T> select(String selector);
-
-        public native void jstree(Options options);
-
-        /**
-         * Adds a selection change callback.
-         */
-        public native void on(String event, SelectionChangeHandler<T> handler);
-
-        public native Api<T> jstree(boolean _true);
-    }
-
-
     private static final String ROOT_NODE = ""#"";
-    private static final String CHANGED_EVENT = ""changed.jstree"";
 
     private final String id;
     private final HTMLElement div;
     private final Options options;
     private Bridge<T> bridge;
     private Api<T> api;
 
-
     /**
      * Creates a tree with the specified root node. All other nodes are loaded on demand using the provided callback.
      */
@@ -115,45 +95,90 @@ public HTMLElement asElement() {
      */
     @Override
     public void attach() {
-        if (api == null) {
+        if (bridge == null || api == null) {
             // TODO check security context and adjust options if necessary
             bridge = Bridge.select(""#"" + id);
             bridge.jstree(options);
             api = bridge.jstree(true);
         }
     }
 
+    private Bridge<T> bridge() {
+        if (bridge == null || api == null) {
+            throw unattached();
+        }
+        return bridge;
+    }
 
-    // ------------------------------------------------------ API access
 
-    /**
-     * Getter for the {@link org.jboss.hal.ballroom.tree.Api} instance.
-     *
-     * @throws IllegalStateException if the API wasn't initialized using {@link #attach()}
-     */
-    public Api<T> api() {
-        if (api == null) {
-            throw new IllegalStateException(
-                    ""Tree('"" + id + ""') is not attached. Call Tree.attach() before using any of the API methods!"");
+    private Api<T> api() {
+        if (bridge == null || api == null) {
+            throw unattached();
         }
         return api;
     }
 
-    public final void onSelectionChange(SelectionChangeHandler<T> handler) {
-        if (bridge == null) {
-            throw new IllegalStateException(
-                    ""Tree('"" + id + ""') is not attached. Call Tree.attach() before you register callbacks!"");
-        }
-        bridge.on(CHANGED_EVENT, handler);
+    private IllegalStateException unattached() {
+        return new IllegalStateException(
+                ""Tree('"" + id + ""') is not attached. Call Tree.attach() before using any of the API methods!"");
+    }
+
+
+    // ------------------------------------------------------ methods
+
+    public void destroy() {
+        api().destroy(false);
+    }
+
+    public Node<T> getNode(String id) {
+        return api().get_node(id);
     }
 
-    public void select(final String id, final boolean closeSelected) {
-        api().deselectAll(true);
-        api().selectNode(id, false, false);
+    public Node<T> getSelected() {
+        Node<T>[] selected = api().get_selected(true);
+        return selected.length == 0 ? null : selected[0];
+    }
+
+    public void openNode(String id, JsCallback callback) {
+        api().open_node(id, callback);
+    }
+
+    public void refreshNode(String id) {
+        api().refresh_node(id);
+    }
+
+    public void selectNode(String id) {
+        selectNode(id, false);
+    }
+
+    public void selectNode(String id, boolean closeSelected) {
+        api().deselect_all(true);
+        api().select_node(id, false, false);
         if (closeSelected) {
-            api().closeNode(id);
+            api().close_node(id);
         }
-        asElement().focus();
-        document.getElementById(id).scrollIntoView(false);
+        Element element = document.getElementById(id);
+        if (element != null) {
+            element.scrollIntoView(false);
+        }
+    }
+
+    public void search(String query) {
+        api().search(query);
+    }
+
+    public void clearSearch() {
+        api().clear_search();
+    }
+
+
+    // ------------------------------------------------------ events
+
+    public void onReady(EventHandler<Void> handler) {
+        bridge().on(""ready.jstree"", handler);
+    }
+
+    public void onSelectionChange(EventHandler<SelectionContext<T>> handler) {
+        bridge().on(""changed.jstree"", handler);
     }
 }",2017-10-07T20:47:42Z,338
"@@ -63,7 +63,7 @@ class ChildrenPanel implements HasElements, Attachable {
         //noinspection HardCodedStringLiteral
         Options<String> options = new OptionsBuilder<String>()
                 .column(""resource"", Names.RESOURCE, (cell, type, row, meta) -> row)
-                .column(resources.constants().view(), row -> modelBrowser.tree.api().openNode(parent.id,
+                .column(resources.constants().view(), row -> modelBrowser.tree.openNode(parent.id,
                         () -> modelBrowser.select(uniqueId(parent, row), false)))
                 .button(resources.constants().add(), table -> modelBrowser.add(parent, table.getRows()))
 ",2017-10-07T20:47:42Z,113
"@@ -32,7 +32,7 @@
 import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.ballroom.form.Form.FinishReset;
 import org.jboss.hal.ballroom.tree.Node;
-import org.jboss.hal.ballroom.tree.SelectionChangeHandler.SelectionContext;
+import org.jboss.hal.ballroom.tree.SelectionContext;
 import org.jboss.hal.ballroom.tree.Tree;
 import org.jboss.hal.ballroom.wizard.Wizard;
 import org.jboss.hal.core.CrudOperations;
@@ -121,8 +121,8 @@ private class OpenNodeTask implements Task<FlowContext> {
         @Override
         public Completable call(FlowContext context) {
             return Completable.fromEmitter(emitter -> {
-                if (tree.api().getNode(id) != null) {
-                    tree.api().openNode(id, emitter::onCompleted);
+                if (tree.getNode(id) != null) {
+                    tree.openNode(id, emitter::onCompleted);
                 } else {
                     emitter.onCompleted();
                 }
@@ -179,17 +179,17 @@ public ModelBrowser(CrudOperations crud,
 
         buttonGroup = div().css(btnGroup, modelBrowserButtons)
                 .add(filter = button().css(btn, btnDefault)
-                        .on(click, event -> filter(tree.api().getSelected()))
+                        .on(click, event -> filter(tree.getSelected()))
                         .title(resources.constants().filter())
                         .add(i().css(fontAwesome(CSS.filter)))
                         .asElement())
                 .add(refresh = button().css(btn, btnDefault)
-                        .on(click, event -> refresh(tree.api().getSelected()))
+                        .on(click, event -> refresh(tree.getSelected()))
                         .title(resources.constants().refresh())
                         .add(i().css(fontAwesome(CSS.refresh)))
                         .asElement())
                 .add(collapse = button().css(btn, btnDefault)
-                        .on(click, event -> collapse(tree.api().getSelected()))
+                        .on(click, event -> collapse(tree.getSelected()))
                         .title(resources.constants().collapse())
                         .add(i().css(fontAwesome(""minus"")))
                         .asElement())
@@ -261,11 +261,11 @@ private void emptyTree() {
 
     private void filter(Node<Context> node) {
         if (node != null && node.parent != null) {
-            Node<Context> parent = tree.api().getNode(node.parent);
+            Node<Context> parent = tree.getNode(node.parent);
             FilterInfo filterInfo = new FilterInfo(parent, node);
             filterStack.add(filterInfo);
             filter(filterInfo);
-            tree.api().openNode(MODEL_BROWSER_ROOT, () -> tree.select(MODEL_BROWSER_ROOT, false));
+            tree.openNode(MODEL_BROWSER_ROOT, () -> tree.selectNode(MODEL_BROWSER_ROOT));
         }
     }
 
@@ -289,7 +289,7 @@ private void filter(FilterInfo filter) {
         }
 
         // reset tree
-        tree.api().destroy(false);
+        tree.destroy();
         initTree(filter.address, filter.text);
     }
 
@@ -314,7 +314,7 @@ public void onError(FlowContext context, Throwable error) {
 
                         @Override
                         public void onSuccess(FlowContext context) {
-                            tree.select(previousFilter.node.id, false);
+                            tree.selectNode(previousFilter.node.id);
                         }
                     });
         }
@@ -323,13 +323,13 @@ public void onSuccess(FlowContext context) {
     private void refresh(final Node<Context> node) {
         if (node != null) {
             updateNode(node);
-            tree.api().refreshNode(node.id);
+            tree.refreshNode(node.id);
         }
     }
 
     private void collapse(Node<Context> node) {
         if (node != null) {
-            tree.select(node.id, true);
+            tree.selectNode(node.id, true);
         }
     }
 
@@ -375,7 +375,7 @@ private void updateBreadcrumb(Node<Context> node) {
     }
 
     private void showResourceView(Node<Context> node, ResourceAddress address) {
-        Node<Context> parent = tree.api().getNode(node.parent);
+        Node<Context> parent = tree.getNode(node.parent);
         AddressTemplate template = asGenericTemplate(parent, address);
         metadataProcessor.lookup(template, progress.get(), new SuccessfulMetadataCallback(eventBus, resources) {
             @Override
@@ -473,20 +473,20 @@ private ResourceAddress fqAddress(Node<Context> parent, String child) {
     }
 
     void remove(ResourceAddress address) {
-        crud.remove(address.lastName(), address.lastValue(), address, () -> refresh(tree.api().getSelected()));
+        crud.remove(address.lastName(), address.lastValue(), address, () -> refresh(tree.getSelected()));
     }
 
     void save(ResourceAddress address, Map<String, Object> changedValues, Metadata metadata) {
         crud.save(address.lastName(), address.lastValue(), address, changedValues, metadata,
-                () -> refresh(tree.api().getSelected()));
+                () -> refresh(tree.getSelected()));
     }
 
     void reset(ResourceAddress address, Form<ModelNode> form, Metadata metadata) {
         crud.reset(address.lastName(), address.lastValue(), address, form, metadata,
                 new FinishReset<ModelNode>(form) {
                     @Override
                     public void afterReset(final Form<ModelNode> form) {
-                        refresh(tree.api().getSelected());
+                        refresh(tree.getSelected());
                     }
                 });
     }
@@ -527,8 +527,8 @@ public void setRoot(ResourceAddress root, boolean updateBreadcrumb) {
         dispatcher.execute(ping,
                 result -> {
                     initTree(root, resource);
-                    tree.api().openNode(MODEL_BROWSER_ROOT, () -> resourcePanel.tabs.showTab(0));
-                    tree.select(MODEL_BROWSER_ROOT, false);
+                    tree.openNode(MODEL_BROWSER_ROOT, () -> resourcePanel.tabs.showTab(0));
+                    tree.selectNode(MODEL_BROWSER_ROOT);
 
                     adjustHeight();
                 },
@@ -551,7 +551,7 @@ public void setRoot(ResourceAddress root, boolean updateBreadcrumb) {
     }
 
     public void select(final String id, final boolean closeSelected) {
-        tree.select(id, closeSelected);
+        tree.selectNode(id, closeSelected);
     }
 
     @Override",2017-10-07T20:47:42Z,114
"@@ -50,7 +50,7 @@ public static class Segment {
         List<Node<Context>> nodes = new ArrayList<>();
         while (current != null && !Ids.MODEL_BROWSER_ROOT.equals(current.id)) {
             nodes.add(current);
-            current = modelBrowser.tree.api().getNode(current.parent);
+            current = modelBrowser.tree.getNode(current.parent);
         }
         Collections.reverse(nodes);
 ",2017-10-07T20:47:42Z,339
"@@ -27,9 +27,7 @@ public interface UIConstants {
     /** The default polling interval used for {@code setInterval()} */
     double POLLING_INTERVAL = 3333;
 
-    /**
-     * The timeout until a non-sticky message is hidden
-     */
+    /** The timeout until a non-sticky message is hidden */
     double MESSAGE_TIMEOUT = 6000; // ms
 
     long RELOAD_MESSAGE_ID = 5102007;
@@ -42,7 +40,6 @@ public interface UIConstants {
     String BODY = ""body"";
     String BUTTON = ""button"";
     String CHECKED = ""checked"";
-    String COMBOBOX = ""combobox"";
     String COLLAPSE = ""collapse"";
     String CONSTRAINT = ""constraint"";
     String CONTAINER = ""container"";
@@ -68,7 +65,6 @@ public interface UIConstants {
     String NAME = ""name"";
     String NBSP = ""&nbsp;"";
     String OBJECT = ""Object"";
-    String OPTION = ""option"";
     String PLACEHOLDER = ""placeholder"";
     String PLACEMENT = ""placement"";
     String PRESENTATION = ""presentation"";
@@ -90,7 +86,6 @@ public interface UIConstants {
     String VALUE = ""value"";
     String WIDTH = ""width"";
 
-
     static String data(String name) {
         return ""data-"" + name; //NON-NLS
     }",2017-10-07T20:47:42Z,320
"@@ -0,0 +1,228 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.client.configuration.subsystem.elytron;
+
+import java.util.List;
+
+import elemental2.dom.HTMLElement;
+import org.jboss.gwt.elemento.core.IsElement;
+import org.jboss.hal.ballroom.Attachable;
+import org.jboss.hal.ballroom.Pages;
+import org.jboss.hal.ballroom.Tabs;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.table.Table;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.core.mbui.table.ModelNodeTable;
+import org.jboss.hal.core.mbui.table.TableButtonFactory;
+import org.jboss.hal.core.mvp.HasPresenter;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.resources.Ids;
+import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
+
+import static org.jboss.gwt.elemento.core.Elements.h;
+import static org.jboss.gwt.elemento.core.Elements.p;
+import static org.jboss.gwt.elemento.core.Elements.section;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
+import static org.jboss.hal.dmr.ModelNodeHelper.failSafeList;
+import static org.jboss.hal.dmr.ModelNodeHelper.storeIndex;
+
+/**
+ * @author Claudio Miranda <claudio@redhat.com>
+ */
+public class LdapRealmElement implements IsElement<HTMLElement>, Attachable, HasPresenter<RealmsPresenter> {
+
+    private final Table<NamedNode> ldapRealmTable;
+    private final Form<NamedNode> ldapRealmForm;
+    private final Form<NamedNode> identityMappingForm;
+    private final Form<NamedNode> userPasswordMapperForm;
+    private final Form<NamedNode> otpCredentialMapperForm;
+    private final Form<NamedNode> x509CredentialMapperForm;
+    private final Table<ModelNode> iamTable; // iam = identity mapping -> attribute-mapping
+    private final Form<ModelNode> iamForm;
+    private final Pages pages;
+    private RealmsPresenter presenter;
+    private String selectedLdapRealm;
+    private NewItemAttributesItem newIdentityAttributes;
+    private String selectedIam;
+    private int iamIndex;
+
+    LdapRealmElement(final Metadata metadata, final TableButtonFactory tableButtonFactory, final Resources resources) {
+
+        // LDAP Realm
+        ldapRealmTable = new ModelNodeTable.Builder<NamedNode>(Ids.ELYTRON_LDAP_REALM_TABLE, metadata)
+                .button(tableButtonFactory.add(metadata.getTemplate(), table -> presenter.addLdapRealm()))
+                .button(tableButtonFactory.remove(Names.LDAP_REALM, metadata.getTemplate(),
+                        (table) -> table.selectedRow().getName(), () -> presenter.reloadLdapRealms()))
+                .column(NAME, (cell, type, row, meta) -> row.getName())
+                .column(Names.IDENTITY_ATTRIBUTE_MAPPING, this::showIdentityAttributeMapping, ""15em"") //NON-NLS
+                .build();
+
+        ldapRealmForm = new ModelNodeForm.Builder<NamedNode>(Ids.ELYTRON_LDAP_REALM_FORM, metadata)
+                .onSave((form, changedValues) -> presenter.saveLdapRealm(form, changedValues))
+                .build();
+
+        Metadata identMetadata = metadata.forComplexAttribute(IDENTITY_MAPPING);
+        newIdentityAttributes = new NewItemAttributesItem(""new-identity-attributes"");
+        identityMappingForm = new ModelNodeForm.Builder<NamedNode>(Ids.ELYTRON_LDAP_REALM_FORM, identMetadata)
+                .unboundFormItem(newIdentityAttributes)
+                .onSave((form, changedValues) -> presenter.saveComplexForm(Names.IDENTITY_MAPPING,
+                        ldapRealmTable.selectedRow().getName(), IDENTITY_MAPPING, changedValues, identMetadata))
+                .build();
+
+        Metadata userPwdMetadata = metadata
+                .forComplexAttribute(IDENTITY_MAPPING)
+                .forComplexAttribute(USER_PASSWORD_MAPPER);
+        userPasswordMapperForm = new ModelNodeForm.Builder<NamedNode>(Ids.ELYTRON_LDAP_REALM_FORM, userPwdMetadata)
+                .onSave((form, changedValues) -> presenter.saveComplexForm(Names.USER_PASSWORD_MAPPER,
+                        ldapRealmTable.selectedRow().getName(), IDENTITY_MAPPING + ""."" + USER_PASSWORD_MAPPER,
+                        changedValues, userPwdMetadata))
+                .build();
+
+        Metadata otpMetadata = metadata.forComplexAttribute(IDENTITY_MAPPING)
+                .forComplexAttribute(OTP_CREDENTIAL_MAPPER);
+        otpCredentialMapperForm = new ModelNodeForm.Builder<NamedNode>(Ids.ELYTRON_LDAP_REALM_FORM, otpMetadata)
+                .onSave((form, changedValues) -> presenter.saveComplexForm(Names.OTP_CREDENTIAL_MAPPER,
+                        ldapRealmTable.selectedRow().getName(), IDENTITY_MAPPING + ""."" + OTP_CREDENTIAL_MAPPER,
+                        changedValues, otpMetadata))
+                .build();
+
+        Metadata x509Metadata = metadata.repackageComplexAttribute(IDENTITY_MAPPING + ""."" + X509_CREDENTIAL_MAPPER, false, false, false);
+        x509CredentialMapperForm = new ModelNodeForm.Builder<NamedNode>(Ids.ELYTRON_LDAP_REALM_FORM, x509Metadata)
+                .onSave((form, changedValues) -> presenter.saveComplexForm(Names.X509_CREDENTIAL_MAPPER,
+                        ldapRealmTable.selectedRow().getName(), IDENTITY_MAPPING + ""."" + X509_CREDENTIAL_MAPPER,
+                        changedValues, x509Metadata))
+                .build();
+
+        Tabs tabs = new Tabs();
+        tabs.add(Ids.ELYTRON_LDAP_REALM_TAB, resources.constants().attributes(), ldapRealmForm.asElement());
+        tabs.add(Ids.ELYTRON_IDENTITY_ATTRIBUTE_MAPPING_TAB, Names.IDENTITY_MAPPING, identityMappingForm.asElement());
+        tabs.add(Ids.ELYTRON_USER_PASSWORD_MAPPER_TAB, Names.USER_PASSWORD_MAPPER, userPasswordMapperForm.asElement());
+        tabs.add(Ids.ELYTRON_OTP_CREDENTIAL_MAPPER_TAB, Names.OTP_CREDENTIAL_MAPPER,
+                otpCredentialMapperForm.asElement());
+        tabs.add(Ids.ELYTRON_X509_CREDENTIAL_MAPPER_TAB, Names.X509_CREDENTIAL_MAPPER,
+                x509CredentialMapperForm.asElement());
+
+        HTMLElement ldapRealmSection = section()
+                .add(h(1).textContent(Names.LDAP_REALM))
+                .add(p().textContent(metadata.getDescription().getDescription()))
+                .add(ldapRealmTable)
+                .add(tabs)
+                .asElement();
+
+        // identity mapping - attribute mapping
+        Metadata iamMetadata = metadata
+                .forComplexAttribute(IDENTITY_MAPPING)
+                .forComplexAttribute(ATTRIBUTE_MAPPING);
+        iamTable = new ModelNodeTable.Builder<>(Ids.ELYTRON_IDENTITY_ATTRIBUTE_MAPPING_TABLE, iamMetadata)
+                .button(tableButtonFactory.add(iamMetadata.getTemplate(),
+                        table -> presenter.addIdentityAttributeMapping(selectedLdapRealm)))
+                .button(tableButtonFactory.remove(iamMetadata.getTemplate(),
+                        table -> presenter.removeIdentityAttributeMapping(selectedLdapRealm, iamIndex)))
+                .column(""from"")
+                //.column(""to"")
+                //.column(""reference"")
+                .build();
+        iamForm = new ModelNodeForm.Builder<>(Ids.ELYTRON_IDENTITY_ATTRIBUTE_MAPPING_FORM, iamMetadata)
+                .onSave(((form, changedValues) -> presenter.saveIdentityAttributeMapping(selectedLdapRealm,
+                        form.getModel().get(HAL_INDEX).asInt(), changedValues)))
+                .unsorted()
+                .build();
+        HTMLElement iamSection = section()
+                .add(h(1).textContent(Names.IDENTITY_ATTRIBUTE_MAPPING))
+                .add(p().textContent(iamMetadata.getDescription().getDescription()))
+                .addAll(iamTable, iamForm)
+                .asElement();
+
+        pages = new Pages(Ids.ELYTRON_LDAP_REALM_PAGE, ldapRealmSection);
+        pages.addPage(Ids.ELYTRON_LDAP_REALM_PAGE, Ids.ELYTRON_IDENTITY_ATTRIBUTE_MAPPING_PAGE,
+                () -> Names.LDAP_REALM + "": "" + selectedLdapRealm,
+                () -> Names.IDENTITY_ATTRIBUTE_MAPPING,
+                iamSection);
+    }
+
+    @Override
+    public HTMLElement asElement() {
+        return pages.asElement();
+    }
+
+    @Override
+    public void attach() {
+        ldapRealmTable.attach();
+        ldapRealmForm.attach();
+        identityMappingForm.attach();
+        userPasswordMapperForm.attach();
+        otpCredentialMapperForm.attach();
+        x509CredentialMapperForm.attach();
+        newIdentityAttributes.attach();
+
+        ldapRealmTable.bindForm(ldapRealmForm);
+
+        // special binding because of the nested complex attributes
+        ldapRealmTable.onSelectionChange(table -> {
+            if (table.hasSelection()) {
+                NamedNode row = table.selectedRow();
+                if (row.get(IDENTITY_MAPPING).hasDefined(NEW_IDENTITY_ATTRIBUTES)) {
+                    newIdentityAttributes.setValue(row.get(IDENTITY_MAPPING).get(NEW_IDENTITY_ATTRIBUTES));
+                }
+                identityMappingForm.view(new NamedNode(row.get(IDENTITY_MAPPING)));
+                userPasswordMapperForm.view(new NamedNode(row.get(IDENTITY_MAPPING).get(USER_PASSWORD_MAPPER)));
+                otpCredentialMapperForm.view(new NamedNode(row.get(IDENTITY_MAPPING).get(OTP_CREDENTIAL_MAPPER)));
+                x509CredentialMapperForm.view(new NamedNode(row.get(IDENTITY_MAPPING).get(X509_CREDENTIAL_MAPPER)));
+            } else {
+                newIdentityAttributes.clearValue();
+                userPasswordMapperForm.clear();
+                otpCredentialMapperForm.clear();
+                x509CredentialMapperForm.clear();
+            }
+        });
+
+        iamTable.attach();
+        iamForm.attach();
+        iamTable.bindForm(iamForm);
+
+    }
+
+    @Override
+    public void setPresenter(final RealmsPresenter presenter) {
+        this.presenter = presenter;
+    }
+
+    void update(List<NamedNode> nodes) {
+        ldapRealmForm.clear();
+        ldapRealmTable.update(nodes);
+
+        if (Ids.ELYTRON_IDENTITY_ATTRIBUTE_MAPPING_PAGE.equals(pages.getCurrentId())) {
+            nodes.stream()
+                    .filter(resource -> selectedLdapRealm.equals(resource.getName()))
+                    .findFirst()
+                    .ifPresent(this::showIdentityAttributeMapping);
+        }
+    }
+
+    private void showIdentityAttributeMapping(final NamedNode resourceName) {
+        selectedLdapRealm = resourceName.getName();
+        List<ModelNode> iamNodes = failSafeList(resourceName, IDENTITY_MAPPING + ""/"" + ATTRIBUTE_MAPPING);
+        storeIndex(iamNodes);
+        iamForm.clear();
+        iamTable.update(iamNodes, modelNode -> modelNode.get(""from"").asString());
+        pages.showPage(Ids.ELYTRON_IDENTITY_ATTRIBUTE_MAPPING_PAGE);
+    }
+
+
+}",2017-07-06T06:57:16Z,340
"@@ -108,6 +108,11 @@ public String asString(final ModelNode value) {
                 EnumSet.of(DEFAULT, DEPRECATED, ENABLED, INVALID, REQUIRED, RESTRICTED), new MapMapping());
     }
 
+    NewItemAttributesItem(String attribute) {
+        super(attribute, new LabelBuilder().label(attribute), MESSAGES.newItemAttributesHint(),
+                EnumSet.of(DEFAULT, DEPRECATED, ENABLED, INVALID, REQUIRED, RESTRICTED), new MapMapping());
+    }
+
     @Override
     public void attach() {
         super.attach();",2017-07-06T06:57:16Z,15
"@@ -19,7 +19,9 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.function.Consumer;
 import java.util.function.Function;
+import java.util.logging.Logger;
 import javax.inject.Inject;
 
 import com.google.gwt.safehtml.shared.SafeHtml;
@@ -66,7 +68,6 @@
 
 import static java.util.Arrays.asList;
 import static org.jboss.hal.client.configuration.subsystem.elytron.AddressTemplates.*;
-import static org.jboss.hal.client.configuration.subsystem.elytron.AddressTemplates.JDBC_REALM_ADDRESS;
 import static org.jboss.hal.client.configuration.subsystem.elytron.ResourceView.HAL_INDEX;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
@@ -90,21 +91,9 @@ public class RealmsPresenter extends MbuiPresenter<RealmsPresenter.MyView, Realm
     public interface MyProxy extends ProxyPlace<RealmsPresenter> {}
 
     public interface MyView extends MbuiView<RealmsPresenter> {
-        void updateAggregateRealm(List<NamedNode> model);
-        void updateCachingRealm(List<NamedNode> model);
-        void updateCustomModifiableRealm(List<NamedNode> model);
-        void updateCustomRealm(List<NamedNode> model);
-        void updateFilesystemRealm(List<NamedNode> model);
-        void updateIdentityRealm(List<NamedNode> model);
-        void updateJdbcRealm(List<NamedNode> model);
-        void updateKeyStoreRealm(List<NamedNode> model);
-        void updateLdapRealm(List<NamedNode> model);
-        void updatePropertiesRealm(List<NamedNode> model);
-        void updateTokenRealm(List<NamedNode> model);
-        void updateConstantRealmMapper(List<NamedNode> model);
-        void updateCustomRealmMapper(List<NamedNode> model);
-        void updateMappedRegexRealmMapper(List<NamedNode> model);
-        void updateSimpleRegexRealmMapper(List<NamedNode> model);
+        void updateResourceElement(String resource, List<NamedNode> nodes);
+        void updateJdbcRealm(List<NamedNode> nodes);
+        void updateLdapRealm(List<NamedNode> nodes);
 
     }
     // @formatter:on
@@ -117,14 +106,14 @@ public interface MyView extends MbuiView<RealmsPresenter> {
             ""scram-mapper""
     };
 
-    private EventBus eventBus;
-    private Dispatcher dispatcher;
     private final CrudOperations crud;
     private final ComplexAttributeOperations ca;
     private final FinderPathFactory finderPathFactory;
     private final StatementContext statementContext;
-    private MetadataRegistry metadataRegistry;
     private final Resources resources;
+    private EventBus eventBus;
+    private Dispatcher dispatcher;
+    private MetadataRegistry metadataRegistry;
 
     @Inject
     public RealmsPresenter(final EventBus eventBus,
@@ -167,152 +156,58 @@ public FinderPath finderPath() {
                         resources.constants().settings(), Names.SECURITY_REALMS);
     }
 
-    public void addLDAPRealm() {
-
-        Metadata metadata = metadataRegistry.lookup(LDAP_REALM_TEMPLATE);
-
-        // repackage ""identity-mapping"" as it is a required attribute to be displayed in the form of the ADD dialog.
-        String complexAttributeName = ""identity-mapping"";
-        // the repackaged attribute must be prefixed so, the user knowns where it comes from.
-        Metadata nestedMetadata = metadata.repackageComplexAttribute(complexAttributeName, true, true, true);
-
-        new AddResourceDialog(Ids.build(Ids.ELYTRON_LDAP_REALM, Ids.ADD_SUFFIX),
-                resources.messages().addResourceTitle(Names.ELYTRON_LDAP_REALM), nestedMetadata,
-                (name, model) -> {
-                    // once the model is posted, it must be correctly assembled as the attributes are not correct,
-                    // related to the r-r-d
-                    reassembleComplexAttribute(complexAttributeName, model, true);
-                    ResourceAddress address = LDAP_REALM_TEMPLATE.resolve(statementContext, name);
-                    crud.add(Names.ELYTRON_LDAP_REALM, name, address, model, (name1, address1) -> reload());
-                }).show();
-
-    }
-
-    public void addPropertiesRealm() {
-
-        Metadata metadata = metadataRegistry.lookup(PROPERTIES_REALM_TEMPLATE);
-
-        // repackage ""users-properties"" as it is a required attribute to be displayed in the form of the ADD dialog.
-        String complexAttributeName = ""users-properties"";
-        // the repackaged attribute must be prefixed so, the user knowns where it comes from.
-        Metadata nestedMetadata = metadata.repackageComplexAttribute(complexAttributeName, true, true, true);
-
-        new AddResourceDialog(Ids.build(Ids.ELYTRON_PROPERTIES_REALM, Ids.ADD_SUFFIX),
-                resources.messages().addResourceTitle(Names.ELYTRON_PROPERTIES_REALM), nestedMetadata,
-                (name, model) -> {
-                    reassembleComplexAttribute(complexAttributeName, model, true);
-                    ResourceAddress address = PROPERTIES_REALM_TEMPLATE.resolve(statementContext, name);
-                    crud.add(Names.ELYTRON_PROPERTIES_REALM, name, address, model, (name1, address1) -> reload());
-                }).show();
-
-    }
-
-    /**
-     * Given a model as
-     * <pre>
-     * {
-     *   other-attr: ""value1""
-     *   complexAttr-name1: ""some value 1"",
-     *   complexAttr-name2: ""some value 2""
-     * }
-     * </pre>
-     * This method extracts the complex attribute name and adds the nested attributes into the complex attribute.
-     * If createComplexAttribute=true, the resulting model node is:
-     *
-     * <pre>
-     * {
-     *   other-attr: ""value1""
-     *   complexAttr: {
-     *     name1: ""some value 1"",
-     *     name2: ""some value 2""
-     *     }
-     * }
-     * </pre>
-     *
-     * If createComplexAttribute=false, the resulting model node is:
-     *
-     * <pre>
-     * {
-     *   other-attr: ""value1""
-     *   name1: ""some value 1"",
-     *   name2: ""some value 2""
-     * }
-     * </pre>
-     *
-     * @param complexAttributeName The complex attribute name
-     * @param model The model
-     * @param createComplexAttribute Control if the resulting model should add the complex attribute name, see above example.
-     *
-     */
-    private static void reassembleComplexAttribute(String complexAttributeName, ModelNode model,
-            boolean createComplexAttribute) {
-        if (model.isDefined()) {
-            for (Property property : model.asPropertyList()) {
-                String pName = property.getName();
-
-                String nestedAttrName;
-
-                boolean propertyRepackagedName = pName.length() > complexAttributeName.length()
-                        && complexAttributeName.equals(pName.substring(0, complexAttributeName.length()));
-
-                if (propertyRepackagedName) {
-                    nestedAttrName = pName.substring(complexAttributeName.length() + 1);
-                } else {
-                    continue;
-                }
+    static Logger _log = Logger.getLogger(""org.jboss"");
 
-                if (createComplexAttribute) {
-                    model.get(complexAttributeName).get(nestedAttrName).set(property.getValue());
-                    model.remove(pName);
-                } else {
-                    model.get(nestedAttrName).set(property.getValue());
-                }
-            }
-        }
-    }
 
     @Override
     public void reload() {
 
         ResourceAddress address = ELYTRON_SUBSYSTEM_TEMPLATE.resolve(statementContext);
         crud.readChildren(address, asList(
-                ""aggregate-realm"",
-                ""caching-realm"",
-                ""custom-modifiable-realm"",
-                ""custom-realm"",
-                ""filesystem-realm"",
-                ""identity-realm"",
-                ""jdbc-realm"",
-                ""key-store-realm"",
-                ""ldap-realm"",
-                ""properties-realm"",
-                ""token-realm"",
-                ""constant-realm-mapper"",
-                ""custom-realm-mapper"",
-                ""mapped-regex-realm-mapper"",
-                ""simple-regex-realm-mapper""
+                ElytronResource.AGGREGATE_REALM.resource,
+                ElytronResource.CACHING_REALM.resource,
+                ElytronResource.CUSTOM_MODIFIABLE_REALM.resource,
+                ElytronResource.CUSTOM_REALM.resource,
+                ElytronResource.FILESYSTEM_REALM.resource,
+                ElytronResource.IDENTITY_REALM.resource,
+                ElytronResource.JDBC_REALM.resource,
+                ElytronResource.KEY_STORE_REALM.resource,
+                ElytronResource.LDAP_REALM.resource,
+                ElytronResource.PROPERTIES_REALM.resource,
+                ElytronResource.TOKEN_REALM.resource,
+                ElytronResource.CONSTANT_REALM_MAPPER.resource,
+                ElytronResource.CUSTOM_REALM_MAPPER.resource,
+                ElytronResource.MAPPED_REGEX_REALM_MAPPER.resource,
+                ElytronResource.SIMPLE_REGEX_REALM_MAPPER.resource
                 ),
                 result -> {
                     // @formatter:off
-                    getView().updateAggregateRealm(asNamedNodes(result.step(0).get(RESULT).asPropertyList()));
-                    getView().updateCachingRealm(asNamedNodes(result.step(1).get(RESULT).asPropertyList()));
-                    getView().updateCustomModifiableRealm(asNamedNodes(result.step(2).get(RESULT).asPropertyList()));
-                    getView().updateCustomRealm(asNamedNodes(result.step(3).get(RESULT).asPropertyList()));
-                    getView().updateFilesystemRealm(asNamedNodes(result.step(4).get(RESULT).asPropertyList()));
-                    getView().updateIdentityRealm(asNamedNodes(result.step(5).get(RESULT).asPropertyList()));
-                    getView().updateJdbcRealm(asNamedNodes(result.step(6).get(RESULT).asPropertyList()));
-                    getView().updateKeyStoreRealm(asNamedNodes(result.step(7).get(RESULT).asPropertyList()));
-                    getView().updateLdapRealm(asNamedNodes(result.step(8).get(RESULT).asPropertyList()));
-                    getView().updatePropertiesRealm(asNamedNodes(result.step(9).get(RESULT).asPropertyList()));
-                    getView().updateTokenRealm(asNamedNodes(result.step(10).get(RESULT).asPropertyList()));
-                    getView().updateConstantRealmMapper(asNamedNodes(result.step(11).get(RESULT).asPropertyList()));
-                    getView().updateCustomRealmMapper(asNamedNodes(result.step(12).get(RESULT).asPropertyList()));
-                    getView().updateMappedRegexRealmMapper(asNamedNodes(result.step(13).get(RESULT).asPropertyList()));
-                    getView().updateSimpleRegexRealmMapper(asNamedNodes(result.step(14).get(RESULT).asPropertyList()));
+                    int i = 0;
+                    getView().updateResourceElement(ElytronResource.AGGREGATE_REALM.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateResourceElement(ElytronResource.CACHING_REALM.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateResourceElement(ElytronResource.CUSTOM_MODIFIABLE_REALM.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateResourceElement(ElytronResource.CUSTOM_REALM.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateResourceElement(ElytronResource.FILESYSTEM_REALM.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateResourceElement(ElytronResource.IDENTITY_REALM.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateJdbcRealm(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateResourceElement(ElytronResource.KEY_STORE_REALM.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateLdapRealm(asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateResourceElement(ElytronResource.PROPERTIES_REALM.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateResourceElement(ElytronResource.TOKEN_REALM.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateResourceElement(ElytronResource.CONSTANT_REALM_MAPPER.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateResourceElement(ElytronResource.CUSTOM_REALM_MAPPER.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateResourceElement(ElytronResource.MAPPED_REGEX_REALM_MAPPER.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
+                    getView().updateResourceElement(ElytronResource.SIMPLE_REGEX_REALM_MAPPER.resource,asNamedNodes(result.step(i++).get(RESULT).asPropertyList()));
                     // @formatter:on
                 });
     }
 
+    void reload(String resource, Consumer<List<NamedNode>> callback) {
+        crud.readChildren(AddressTemplates.ELYTRON_SUBSYSTEM_TEMPLATE, resource,
+                children -> callback.accept(asNamedNodes(children)));
+    }
+
+
     @Override
     public void saveForm(final String title, final String name, final Map<String, Object> changedValues,
             final Metadata metadata) {
@@ -327,8 +222,6 @@ public void saveComplexForm(final String title, final String name, String comple
         String type = new LabelBuilder().label(metadata.getTemplate().lastName());
         ca.save(name, complexAttributeName, type, metadata.getTemplate(), changedValues, this::reload);
 
-        // ResourceAddress address = metadata.getTemplate().resolve(statementContext, name);
-        // crud.save(type, name, complexAttributeName, address, changedValues, metadata, () -> reload());
     }
 
     @Override
@@ -378,34 +271,6 @@ public void resetComplexAttribute(final String type, final String name, final St
         }
     }
 
-    public void launchOnAddJDBCRealm() {
-
-        String complexAttributeName = ""principal-query"";
-        String id = Ids.build(Ids.ELYTRON_JDBC_REALM, Ids.FORM_SUFFIX, Ids.ADD_SUFFIX);
-        Metadata metadata = metadataRegistry.lookup(JDBC_REALM_TEMPLATE);
-        metadata = metadata.repackageComplexAttribute(complexAttributeName, true, true, true);
-        AddResourceDialog dialog = new AddResourceDialog(id, resources.messages().addResourceTitle(""JDBC Realm""),
-                metadata, (name, payload) -> {
-
-            ModelNode nestedAttrs = new ModelNode();
-            // as the ""principal-query"" attribute description is repackaged in the root node
-            // it needs to be re-assembled as a nested attribute of ""principal-query""
-            payload.asPropertyList().forEach(property -> {
-                String _name = property.getName();
-                if (complexAttributeName.equals(_name.substring(0, complexAttributeName.length()))) {
-                    _name = _name.substring(complexAttributeName.length() + 1);
-                    nestedAttrs.get(_name).set(property.getValue());
-                    payload.remove(property.getName());
-                }
-            });
-            payload.get(complexAttributeName).add(nestedAttrs);
-
-            crud.add(""JDBC Realm"", name, JDBC_REALM_TEMPLATE, payload, (name1, address) -> reload());
-        });
-        dialog.show();
-
-    }
-
     @Override
     public void launchAddDialog(Function<String, String> resourceNameFunction, String complexAttributeName,
             Metadata metadata, String title) {
@@ -576,4 +441,182 @@ private String keyMapperAttribute(int pqIndex, String keyMapper) {
     private String attributeMappingAttribute(int pqIndex) {
         return PRINCIPAL_QUERY + ""["" + pqIndex + ""]."" + ATTRIBUTE_MAPPING;
     }
+
+    // ============ LDAP Realm
+
+    public void reloadLdapRealms() {
+        crud.readChildren(AddressTemplates.ELYTRON_SUBSYSTEM_TEMPLATE, ModelDescriptionConstants.LDAP_REALM,
+                children -> getView().updateLdapRealm(asNamedNodes(children)));
+    }
+
+    public void addLdapRealm() {
+
+        Metadata metadata = metadataRegistry.lookup(LDAP_REALM_TEMPLATE);
+
+        // repackage ""identity-mapping"" as it is a required attribute to be displayed in the form of the ADD dialog.
+        // the repackaged attribute must be prefixed so, the user knowns where it comes from.
+        Metadata nestedMetadata = metadata.repackageComplexAttribute(IDENTITY_MAPPING, true, true, true);
+
+        new AddResourceDialog(Ids.ELYTRON_LDAP_REALM_ADD,
+                resources.messages().addResourceTitle(Names.LDAP_REALM), nestedMetadata,
+                (name, model) -> {
+                    // once the model is posted, it must be correctly assembled as the attributes are not correct,
+                    // related to the r-r-d
+                    reassembleComplexAttribute(IDENTITY_MAPPING, model, true);
+                    ResourceAddress address = LDAP_REALM_TEMPLATE.resolve(statementContext, name);
+                    crud.add(Names.LDAP_REALM, name, address, model, (name1, address1) -> reload());
+                }).show();
+
+    }
+
+    public void addLdapRealm2() {
+        Metadata metadata = metadataRegistry.lookup(AddressTemplates.LDAP_REALM_TEMPLATE)
+                .repackageComplexAttribute(IDENTITY_MAPPING, true, true, true);
+        NameItem nameItem = new NameItem();
+        Form<ModelNode> form = new ModelNodeForm.Builder<>(Ids.ELYTRON_LDAP_REALM_ADD, metadata)
+                .addOnly()
+                .fromRequestProperties()
+                .requiredOnly()
+                .unboundFormItem(nameItem, 0)
+                .build();
+        AddResourceDialog dialog = new AddResourceDialog(resources.messages().addResourceTitle(Names.LDAP_REALM), form,
+                (n1, model) -> {
+                    ModelNode payload = new ModelNode();
+                    payload.get(IDENTITY_MAPPING).add(model);
+                    _log.info("" add ldap payload: "" + payload);
+                    crud.add(Names.LDAP_REALM, nameItem.getValue(), AddressTemplates.LDAP_REALM_TEMPLATE, payload,
+                            (n2, address) -> reloadLdapRealms());
+                });
+        dialog.show();
+    }
+
+
+    // @formatter:off
+    /**
+     * Given a model as
+     * <pre>
+     * {
+     *   other-attr: ""value1""
+     *   complexAttr-name1: ""some value 1"",
+     *   complexAttr-name2: ""some value 2""
+     * }
+     * </pre>
+     * This method extracts the complex attribute name and adds the nested attributes into the complex attribute.
+     * If createComplexAttribute=true, the resulting model node is:
+     * <p>
+     * <pre>
+     * {
+     *   other-attr: ""value1""
+     *   complexAttr: {
+     *     name1: ""some value 1"",
+     *     name2: ""some value 2""
+     *     }
+     * }
+     * </pre>
+     * <p>
+     * If createComplexAttribute=false, the resulting model node is:
+     * <p>
+     * <pre>
+     * {
+     *   other-attr: ""value1""
+     *   name1: ""some value 1"",
+     *   name2: ""some value 2""
+     * }
+     * </pre>
+     *
+     * @param complexAttributeName   The complex attribute name
+     * @param model                  The model
+     * @param createComplexAttribute Control if the resulting model should add the complex attribute name, see above
+     *                               example.
+     */
+    // @formatter:on
+    private void reassembleComplexAttribute(String complexAttributeName, ModelNode model,
+            boolean createComplexAttribute) {
+        if (model.isDefined()) {
+            for (Property property : model.asPropertyList()) {
+                String pName = property.getName();
+
+                String nestedAttrName;
+
+                boolean propertyRepackagedName = pName.length() > complexAttributeName.length()
+                        && complexAttributeName.equals(pName.substring(0, complexAttributeName.length()));
+
+                if (propertyRepackagedName) {
+                    nestedAttrName = pName.substring(complexAttributeName.length() + 1);
+                } else {
+                    continue;
+                }
+
+                if (createComplexAttribute) {
+                    model.get(complexAttributeName).get(nestedAttrName).set(property.getValue());
+                    model.remove(pName);
+                } else {
+                    model.get(nestedAttrName).set(property.getValue());
+                }
+            }
+        }
+    }
+
+
+    public void saveLdapRealm(final Form<NamedNode> form, final Map<String, Object> changedValues) {
+        crud.save(Names.LDAP_REALM, form.getModel().getName(),
+                AddressTemplates.LDAP_REALM_TEMPLATE, changedValues,
+                this::reloadLdapRealms);
+    }
+
+    public void addIdentityAttributeMapping(final String selectedLdapRealm) {
+
+        Metadata caMetadata = metadataRegistry.lookup(LDAP_REALM_TEMPLATE)
+                .forComplexAttribute(IDENTITY_MAPPING)
+                .forComplexAttribute(ATTRIBUTE_MAPPING);
+        ModelNodeForm.Builder<ModelNode> builder = new ModelNodeForm.Builder<>(
+                Ids.ELYTRON_IDENTITY_ATTRIBUTE_MAPPING_ADD, caMetadata)
+                .addOnly();
+
+        AddResourceDialog dialog = new AddResourceDialog(resources.messages().addResourceTitle(Names.ATTRIBUTE_MAPPING),
+                builder.build(), (name, model) ->
+                ca.listAdd(selectedLdapRealm, IDENTITY_MAPPING + ""."" + ATTRIBUTE_MAPPING,
+                        Names.IDENTITY_ATTRIBUTE_MAPPING, LDAP_REALM_TEMPLATE, model, () -> reloadLdapRealms()));
+        dialog.show();
+
+
+    }
+
+    public void removeIdentityAttributeMapping(final String selectedLdapRealm, final int iamIndex) {
+        ca.remove(selectedLdapRealm, IDENTITY_MAPPING + ""."" + ATTRIBUTE_MAPPING, Names.IDENTITY_ATTRIBUTE_MAPPING,
+                iamIndex, AddressTemplates.LDAP_REALM_TEMPLATE, this::reloadLdapRealms);
+    }
+
+    public void saveIdentityAttributeMapping(final String selectedLdapRealm, final int iamIndex,
+            final Map<String, Object> changedValues) {
+
+        ca.save(selectedLdapRealm, IDENTITY_MAPPING + ""."" + ATTRIBUTE_MAPPING, Names.IDENTITY_ATTRIBUTE_MAPPING,
+                iamIndex, AddressTemplates.LDAP_REALM_TEMPLATE, changedValues,
+                this::reloadLdapRealms);
+
+
+    }
+
+    // ==== properties realm
+
+    public void addPropertiesRealm() {
+
+        Metadata metadata = metadataRegistry.lookup(PROPERTIES_REALM_TEMPLATE);
+
+        // repackage ""users-properties"" as it is a required attribute to be displayed in the form of the ADD dialog.
+        String complexAttributeName = ""users-properties"";
+        // the repackaged attribute must be prefixed so, the user knowns where it comes from.
+        Metadata nestedMetadata = metadata.repackageComplexAttribute(complexAttributeName, true, true, true);
+
+        new AddResourceDialog(Ids.build(Ids.ELYTRON_PROPERTIES_REALM, Ids.ADD_SUFFIX),
+                resources.messages().addResourceTitle(Names.ELYTRON_PROPERTIES_REALM), nestedMetadata,
+                (name, model) -> {
+                    reassembleComplexAttribute(complexAttributeName, model, true);
+                    ResourceAddress address = PROPERTIES_REALM_TEMPLATE.resolve(statementContext, name);
+                    crud.add(Names.ELYTRON_PROPERTIES_REALM, name, address, model, (name1, address1) -> reload());
+                }).show();
+
+    }
+
+
 }",2017-07-06T06:57:16Z,341
"@@ -15,351 +15,236 @@
  */
 package org.jboss.hal.client.configuration.subsystem.elytron;
 
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import javax.inject.Inject;
 
-import org.jboss.hal.ballroom.Attachable;
 import org.jboss.hal.ballroom.VerticalNavigation;
-import org.jboss.hal.core.mbui.table.TableButtonFactory;
+import org.jboss.hal.core.mbui.MbuiContext;
+import org.jboss.hal.core.mbui.ResourceElement;
 import org.jboss.hal.core.mvp.HalViewImpl;
 import org.jboss.hal.dmr.NamedNode;
+import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.meta.Metadata;
-import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
-import org.jboss.hal.resources.Resources;
+import org.jetbrains.annotations.NonNls;
 
 import static org.jboss.hal.ballroom.LayoutBuilder.column;
 import static org.jboss.hal.ballroom.LayoutBuilder.row;
-import static org.jboss.hal.client.configuration.subsystem.elytron.AddressTemplates.*;
+import static org.jboss.hal.client.configuration.subsystem.elytron.ElytronResource.*;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.NAME;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.READ_ATTRIBUTE_OPERATION;
 
 /**
  * @author Claudio Miranda <claudio@redhat.com>
  */
-public class RealmsView extends HalViewImpl implements RealmsPresenter.MyView, ElytronView {
-
-    private ResourceView aggregateRealmView;
-    private ResourceView cachingRealmView;
-    private ResourceView customModifiableRealmView;
-    private ResourceView customRealmView;
-    private ResourceView filesystemRealmView;
-    private ResourceView identityRealmView;
-    // private ResourceView jdbcRealmView;
-    private JdbcRealmElement jdbcRealmElement;
-    private ResourceView keystoreRealmView;
-    private ResourceView ldapRealmView;
-    private ResourceView propertiesRealmView;
-    private ResourceView tokenRealmView;
-    private ResourceView constantRealmMapperView;
-    private ResourceView customRealmMapperView;
-    private ResourceView mappedRegexRealmView;
-    private ResourceView simpleRegexRealmView;
+public class RealmsView extends HalViewImpl implements RealmsPresenter.MyView {
+
 
+    private final Map<String, ResourceElement> elements;
+    private JdbcRealmElement jdbcRealmElement;
+    private LdapRealmElement ldapRealmElement;
     private RealmsPresenter presenter;
+    private VerticalNavigation navigation;
 
     @Inject
-    public RealmsView(final MetadataRegistry metadataRegistry,
-            final TableButtonFactory tableButtonFactory,
-            final Resources resources) {
+    public RealmsView(final MbuiContext mbuiContext) {
 
-        VerticalNavigation navigation = new VerticalNavigation();
+        elements = new HashMap<>();
+        navigation = new VerticalNavigation();
         registerAttachable(navigation);
 
         String primaryIdSecurityRealm = ""security-realm-item"";
         String primaryIdRealmMapper = ""realm-mapper-item"";
         navigation.addPrimary(primaryIdSecurityRealm, ""Security Realm"", ""fa fa-file-o"");
         navigation.addPrimary(primaryIdRealmMapper, ""Realm Mappers"", ""fa fa-desktop"");
 
-
-        aggregateRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdSecurityRealm,
-                Ids.ELYTRON_AGGREGATE_REALM, ""Aggregate Realm"", AGGREGATE_REALM_TEMPLATE, this, () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .create();
-
-        cachingRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdSecurityRealm,
-                Ids.ELYTRON_CACHING_REALM, ""Caching Realm"", CACHING_REALM_TEMPLATE, this, () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .create();
-
-        customModifiableRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdSecurityRealm,
-                Ids.ELYTRON_CUSTOM_MODIFIABLE_REALM, ""Custom Modifiable Realm"", CUSTOM_MODIFIABLE_REALM_TEMPLATE, this,
-                () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .create();
-
-        customRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdSecurityRealm,
-                Ids.ELYTRON_CUSTOM_REALM, ""Custom Realm"", CUSTOM_REALM_TEMPLATE, this, () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .create();
-
-        filesystemRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdSecurityRealm,
-                Ids.ELYTRON_FILESYSTEM_REALM, ""Filesystem Realm"", FILESYSTEM_REALM_TEMPLATE, this,
-                () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .create();
-
-        identityRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdSecurityRealm,
-                Ids.ELYTRON_IDENTITY_REALM, ""Identity Realm"", IDENTITY_REALM_TEMPLATE, this, () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .create();
-
-        // jdbcRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdSecurityRealm,
-        //         Ids.ELYTRON_JDBC_REALM, ""JDBC Realm"", JDBC_REALM_ADDRESS, this, () -> presenter.reload())
-        //         .setNavigation(navigation)
-        //         .setMetadataRegistry(metadataRegistry)
-        //         .setTableAddButtonHandler(table -> presenter.launchOnAddJDBCRealm())
-        //         .build()
-        //         .addComplexAttributeAsPage(""principal-query"")
-        //         .create();
-
-        Metadata metadata = metadataRegistry.lookup(AddressTemplates.JDBC_REALM_TEMPLATE);
-        jdbcRealmElement = new JdbcRealmElement(metadata, tableButtonFactory, resources);
+        // ========= security realm
+
+        addResourceElement(AGGREGATE_REALM,
+                AGGREGATE_REALM.resourceElement(mbuiContext,
+                        () -> presenter.reload(AGGREGATE_REALM.resource,
+                                nodes -> updateResourceElement(AGGREGATE_REALM.resource, nodes))),
+                primaryIdSecurityRealm,
+                Ids.build(AGGREGATE_REALM.baseId, Ids.ENTRY_SUFFIX),
+                ""Aggregate Realm"");
+
+        addResourceElement(CACHING_REALM,
+                CACHING_REALM.resourceElement(mbuiContext,
+                        () -> presenter.reload(CACHING_REALM.resource,
+                                nodes -> updateResourceElement(CACHING_REALM.resource, nodes))),
+                primaryIdSecurityRealm,
+                Ids.build(CACHING_REALM.baseId, Ids.ENTRY_SUFFIX),
+                ""Caching Realm"");
+
+        addResourceElement(CUSTOM_MODIFIABLE_REALM,
+                CUSTOM_MODIFIABLE_REALM.resourceElement(mbuiContext,
+                        () -> presenter.reload(CUSTOM_MODIFIABLE_REALM.resource,
+                                nodes -> updateResourceElement(CUSTOM_MODIFIABLE_REALM.resource, nodes))),
+                primaryIdSecurityRealm,
+                Ids.build(CUSTOM_MODIFIABLE_REALM.baseId, Ids.ENTRY_SUFFIX),
+                ""Custom Modifiable Realm"");
+
+        addResourceElement(CUSTOM_REALM,
+                CUSTOM_REALM.resourceElement(mbuiContext,
+                        () -> presenter.reload(CUSTOM_REALM.resource,
+                                nodes -> updateResourceElement(CUSTOM_REALM.resource, nodes))),
+                primaryIdSecurityRealm,
+                Ids.build(CUSTOM_REALM.baseId, Ids.ENTRY_SUFFIX),
+                ""Custom Realm"");
+
+        addResourceElement(FILESYSTEM_REALM,
+                FILESYSTEM_REALM.resourceElement(mbuiContext,
+                        () -> presenter.reload(FILESYSTEM_REALM.resource,
+                                nodes -> updateResourceElement(FILESYSTEM_REALM.resource, nodes))),
+                primaryIdSecurityRealm,
+                Ids.build(FILESYSTEM_REALM.baseId, Ids.ENTRY_SUFFIX),
+                ""Filesystem Realm"");
+
+        addResourceElement(IDENTITY_REALM,
+                IDENTITY_REALM.resourceElement(mbuiContext,
+                        () -> presenter.reload(IDENTITY_REALM.resource,
+                                nodes -> updateResourceElement(IDENTITY_REALM.resource, nodes))),
+                primaryIdSecurityRealm,
+                Ids.build(IDENTITY_REALM.baseId, Ids.ENTRY_SUFFIX),
+                ""Identity Realm"");
+
+        Metadata metadata = mbuiContext.metadataRegistry().lookup(AddressTemplates.JDBC_REALM_TEMPLATE);
+        jdbcRealmElement = new JdbcRealmElement(metadata, mbuiContext.tableButtonFactory(), mbuiContext.resources());
+        registerAttachable(jdbcRealmElement);
         navigation.addSecondary(primaryIdSecurityRealm, Ids.ELYTRON_JDBC_REALM + ""2"", Names.JDBC_REALM,
                 jdbcRealmElement.asElement());
 
-        keystoreRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdSecurityRealm,
-                Ids.ELYTRON_KEY_STORE_REALM, ""Keystore Realm"", KEY_STORE_REALM_TEMPLATE, this, () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .create();
-
-        ldapRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdSecurityRealm,
-                Ids.ELYTRON_LDAP_REALM, ""LDAP Realm"", LDAP_REALM_TEMPLATE, this, () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddButtonHandler(table -> presenter.addLDAPRealm())
-                .build()
-                .addComplexAttributeAsTab(""identity-mapping"")
-                .addComplexAttributeAsTab(""identity-mapping.user-password-mapper"")
-                .addComplexAttributeAsTab(""identity-mapping.otp-credential-mapper"")
-                .addComplexAttributeAsTab(""identity-mapping.x509-credential-mapper"")
-                .create();
-
-        propertiesRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdSecurityRealm,
-                Ids.ELYTRON_PROPERTIES_REALM, ""Properties Realm"", PROPERTIES_REALM_TEMPLATE, this,
-                () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddButtonHandler(table -> presenter.addPropertiesRealm())
-                .build()
-                .addComplexAttributeAsTab(""users-properties"")
-                .addComplexAttributeAsTab(""groups-properties"")
-                .create();
-
-        tokenRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdSecurityRealm,
-                Ids.ELYTRON_TOKEN_REALM, ""Token Realm"", TOKEN_REALM_TEMPLATE, this, () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .addComplexAttributeAsTab(""jwt"")
-                .addComplexAttributeAsTab(""oauth2-introspection"")
-                .create();
-
-        constantRealmMapperView = new ResourceView.Builder(tableButtonFactory, primaryIdRealmMapper,
-                Ids.ELYTRON_CONSTANT_REALM_MAPPER, ""Constant Realm Mapper"", CONSTANT_REALM_MAPPER_TEMPLATE, this,
-                () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .create();
-
-        customRealmMapperView = new ResourceView.Builder(tableButtonFactory, primaryIdRealmMapper,
-                Ids.ELYTRON_CUSTOM_REALM_MAPPER, ""Custom Realm Mapper"", CUSTOM_REALM_MAPPER_TEMPLATE, this,
-                () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .create();
-
-        mappedRegexRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdRealmMapper,
-                Ids.ELYTRON_MAPPED_REGEX_REALM_MAPPER, ""Mapped Regex Realm Mapper"", MAPPED_REGEX_REALM_MAPPER_TEMPLATE,
-                this,
-                () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .create();
-
-        simpleRegexRealmView = new ResourceView.Builder(tableButtonFactory, primaryIdRealmMapper,
-                Ids.ELYTRON_SIMPLE_REGEX_REALM_MAPPER, ""Simple Regex Realm Mapper"", SIMPLE_REGEX_REALM_MAPPER_TEMPLATE,
-                this,
-                () -> presenter.reload())
-                .setNavigation(navigation)
-                .setMetadataRegistry(metadataRegistry)
-                .setTableAddCallback((name, address) -> presenter.reload())
-                .build()
-                .create();
+        addResourceElement(KEY_STORE_REALM,
+                KEY_STORE_REALM.resourceElement(mbuiContext,
+                        () -> presenter.reload(KEY_STORE_REALM.resource,
+                                nodes -> updateResourceElement(KEY_STORE_REALM.resource, nodes))),
+                primaryIdSecurityRealm,
+                Ids.build(KEY_STORE_REALM.baseId, Ids.ENTRY_SUFFIX),
+                ""Key Store Realm"");
+
+        Metadata mtLdapRealm = mbuiContext.metadataRegistry().lookup(AddressTemplates.LDAP_REALM_TEMPLATE);
+        ldapRealmElement = new LdapRealmElement(mtLdapRealm, mbuiContext.tableButtonFactory(), mbuiContext.resources());
+        registerAttachable(ldapRealmElement);
+        navigation.addSecondary(primaryIdSecurityRealm, Ids.ELYTRON_LDAP_REALM + ""3"", Names.LDAP_REALM,
+                ldapRealmElement.asElement());
+
+
+        addResourceElement(PROPERTIES_REALM,
+                PROPERTIES_REALM.resourceElementBuilder(mbuiContext,
+                        () -> presenter.reload(PROPERTIES_REALM.resource,
+                                nodes -> updateResourceElement(PROPERTIES_REALM.resource, nodes)))
+                .addComplexObjectAttribute(""groups-properties"", () -> {
+                    ResourceAddress address = AddressTemplates.PROPERTIES_REALM_TEMPLATE.resolve(mbuiContext.statementContext(), ""test"");
+                    return new Operation.Builder(address, READ_ATTRIBUTE_OPERATION)
+                            .param(NAME, ""groups-properties"")
+                            .build();
+                })
+                .addComplexObjectAttribute(""users-properties"", () -> {
+                    ResourceAddress address = AddressTemplates.PROPERTIES_REALM_TEMPLATE.resolve(mbuiContext.statementContext(), ""test"");
+                    return new Operation.Builder(address, READ_ATTRIBUTE_OPERATION)
+                            .param(NAME, ""users-properties"")
+                            .build();
+                })
+                .build(),
+                primaryIdSecurityRealm,
+                Ids.build(PROPERTIES_REALM.baseId, Ids.ENTRY_SUFFIX),
+                ""Properties Realm"");
+
+        addResourceElement(TOKEN_REALM,
+                TOKEN_REALM.resourceElementBuilder(mbuiContext,
+                        () -> presenter.reload(TOKEN_REALM.resource,
+                                nodes -> updateResourceElement(TOKEN_REALM.resource, nodes)))
+                .addComplexObjectAttribute(""jwt"", () -> {
+                    ResourceAddress address = AddressTemplates.PROPERTIES_REALM_TEMPLATE.resolve(mbuiContext.statementContext(), ""test"");
+                    return new Operation.Builder(address, READ_ATTRIBUTE_OPERATION)
+                            .param(NAME, ""jwt"")
+                            .build();
+                })
+                .addComplexObjectAttribute(""oauth2-introspection"", () -> {
+                    ResourceAddress address = AddressTemplates.PROPERTIES_REALM_TEMPLATE.resolve(mbuiContext.statementContext(), ""test"");
+                    return new Operation.Builder(address, READ_ATTRIBUTE_OPERATION)
+                            .param(NAME, ""oauth2-introspection"")
+                            .build();
+                })
+                .build(),
+                primaryIdSecurityRealm,
+                Ids.build(TOKEN_REALM.baseId, Ids.ENTRY_SUFFIX),
+                ""Token Realm"");
+
+        // =========== realm mapper
+
+        addResourceElement(CONSTANT_REALM_MAPPER,
+                CONSTANT_REALM_MAPPER.resourceElement(mbuiContext,
+                        () -> presenter.reload(CONSTANT_REALM_MAPPER.resource,
+                                nodes -> updateResourceElement(CONSTANT_REALM_MAPPER.resource, nodes))),
+                primaryIdRealmMapper,
+                Ids.build(CONSTANT_REALM_MAPPER.baseId, Ids.ENTRY_SUFFIX),
+                ""Constant Realm Mapper"");
+
+        addResourceElement(CUSTOM_REALM_MAPPER,
+                CUSTOM_REALM_MAPPER.resourceElement(mbuiContext,
+                        () -> presenter.reload(CUSTOM_REALM_MAPPER.resource,
+                                nodes -> updateResourceElement(CUSTOM_REALM_MAPPER.resource, nodes))),
+                primaryIdRealmMapper,
+                Ids.build(CUSTOM_REALM_MAPPER.baseId, Ids.ENTRY_SUFFIX),
+                ""Custom Realm Mapper"");
+
+        addResourceElement(MAPPED_REGEX_REALM_MAPPER,
+                MAPPED_REGEX_REALM_MAPPER.resourceElement(mbuiContext,
+                        () -> presenter.reload(MAPPED_REGEX_REALM_MAPPER.resource,
+                                nodes -> updateResourceElement(MAPPED_REGEX_REALM_MAPPER.resource, nodes))),
+                primaryIdRealmMapper,
+                Ids.build(MAPPED_REGEX_REALM_MAPPER.baseId, Ids.ENTRY_SUFFIX),
+                ""Mapped Regex Realm Mapper"");
+
+        addResourceElement(SIMPLE_REGEX_REALM_MAPPER,
+                SIMPLE_REGEX_REALM_MAPPER.resourceElement(mbuiContext,
+                        () -> presenter.reload(SIMPLE_REGEX_REALM_MAPPER.resource,
+                                nodes -> updateResourceElement(SIMPLE_REGEX_REALM_MAPPER.resource, nodes))),
+                primaryIdRealmMapper,
+                Ids.build(SIMPLE_REGEX_REALM_MAPPER.baseId, Ids.ENTRY_SUFFIX),
+                ""Simple Regex Realm Mapper"");
 
         initElement(row()
                 .add(column()
                         .addAll(navigation.panes())));
 
     }
 
-    private void showJDBCRealmsPage(final String s, final String name) {
-    }
-
-    @Override
-    public void registerComponents(final Attachable first, final Attachable... rest) {
-        registerAttachable(first, rest);
-    }
-
-    @Override
-    public void attach() {
-        super.attach();
-
-        aggregateRealmView.bindTableToForm();
-        cachingRealmView.bindTableToForm();
-        customModifiableRealmView.bindTableToForm();
-        customRealmView.bindTableToForm();
-        filesystemRealmView.bindTableToForm();
-        identityRealmView.bindTableToForm();
-        // jdbcRealmView.bindTableToForm();
-        jdbcRealmElement.attach();
-        keystoreRealmView.bindTableToForm();
-        ldapRealmView.bindTableToForm();
-        propertiesRealmView.bindTableToForm();
-        tokenRealmView.bindTableToForm();
-        constantRealmMapperView.bindTableToForm();
-        customRealmMapperView.bindTableToForm();
-        mappedRegexRealmView.bindTableToForm();
-        simpleRegexRealmView.bindTableToForm();
-    }
-
-
-    @Override
-    public void updateAggregateRealm(final List<NamedNode> model) {
-        aggregateRealmView.getForm().clear();
-        aggregateRealmView.getTable().update(model);
-    }
-
-    @Override
-    public void updateCachingRealm(final List<NamedNode> model) {
-        cachingRealmView.getForm().clear();
-        cachingRealmView.getTable().update(model);
-    }
-
-    @Override
-    public void updateCustomModifiableRealm(final List<NamedNode> model) {
-        customModifiableRealmView.getForm().clear();
-        customModifiableRealmView.getTable().update(model);
-    }
-
-    @Override
-    public void updateCustomRealm(final List<NamedNode> model) {
-        customRealmView.getForm().clear();
-        customRealmView.getTable().update(model);
-    }
-
-    @Override
-    public void updateFilesystemRealm(final List<NamedNode> model) {
-        filesystemRealmView.getForm().clear();
-        filesystemRealmView.getTable().update(model);
-    }
-
-    @Override
-    public void updateIdentityRealm(final List<NamedNode> model) {
-        identityRealmView.getForm().clear();
-        identityRealmView.getTable().update(model);
-    }
-
-    @Override
-    public void updateJdbcRealm(final List<NamedNode> model) {
-        // jdbcRealmView.getForm().clear();
-        // jdbcRealmView.getTable().update(model);
-        jdbcRealmElement.update(model);
-    }
-
-    @Override
-    public void updateKeyStoreRealm(final List<NamedNode> model) {
-        keystoreRealmView.getForm().clear();
-        keystoreRealmView.getTable().update(model);
+    private void addResourceElement(ElytronResource resource, ResourceElement element,
+            String primaryId, String secondaryId, @NonNls String text) {
+        elements.put(resource.resource, element);
+        registerAttachable(element);
+        navigation.addSecondary(primaryId, secondaryId, text, element.asElement());
     }
 
-    @Override
-    public void updateLdapRealm(final List<NamedNode> model) {
-        ldapRealmView.getForm().clear();
-        ldapRealmView.getTable().update(model);
-    }
-
-    @Override
-    public void updatePropertiesRealm(final List<NamedNode> model) {
-        propertiesRealmView.getForm().clear();
-        propertiesRealmView.getTable().update(model);
-    }
-
-    @Override
-    public void updateTokenRealm(final List<NamedNode> model) {
-        tokenRealmView.getForm().clear();
-        tokenRealmView.getTable().update(model);
-    }
-
-    @Override
-    public void updateConstantRealmMapper(final List<NamedNode> model) {
-        constantRealmMapperView.getForm().clear();
-        constantRealmMapperView.getTable().update(model);
-    }
 
     @Override
-    public void updateCustomRealmMapper(final List<NamedNode> model) {
-        customRealmMapperView.getForm().clear();
-        customRealmMapperView.getTable().update(model);
+    public void updateResourceElement(String resource, List<NamedNode> nodes) {
+        ResourceElement resourceElement = elements.get(resource);
+        if (resourceElement != null) {
+            resourceElement.update(nodes);
+        }
     }
 
     @Override
-    public void updateMappedRegexRealmMapper(final List<NamedNode> model) {
-        mappedRegexRealmView.getForm().clear();
-        mappedRegexRealmView.getTable().update(model);
+    public void updateJdbcRealm(final List<NamedNode> nodes) {
+        jdbcRealmElement.update(nodes);
     }
 
     @Override
-    public void updateSimpleRegexRealmMapper(final List<NamedNode> model) {
-        simpleRegexRealmView.getForm().clear();
-        simpleRegexRealmView.getTable().update(model);
+    public void updateLdapRealm(final List<NamedNode> nodes) {
+        ldapRealmElement.update(nodes);
     }
 
     @Override
     public void setPresenter(final RealmsPresenter presenter) {
         this.presenter = presenter;
-        aggregateRealmView.setPresenter(presenter);
-        cachingRealmView.setPresenter(presenter);
-        customModifiableRealmView.setPresenter(presenter);
-        customRealmView.setPresenter(presenter);
-        filesystemRealmView.setPresenter(presenter);
-        identityRealmView.setPresenter(presenter);
-        // jdbcRealmView.setPresenter(presenter);
         jdbcRealmElement.setPresenter(presenter);
-        keystoreRealmView.setPresenter(presenter);
-        ldapRealmView.setPresenter(presenter);
-        propertiesRealmView.setPresenter(presenter);
-        tokenRealmView.setPresenter(presenter);
-        constantRealmMapperView.setPresenter(presenter);
-        customRealmMapperView.setPresenter(presenter);
-        mappedRegexRealmView.setPresenter(presenter);
-        simpleRegexRealmView.setPresenter(presenter);
+        ldapRealmElement.setPresenter(presenter);
     }
 }
\ No newline at end of file",2017-07-06T06:57:16Z,342
"@@ -243,6 +243,7 @@ public interface ModelDescriptionConstants {
     String HTTPS_LISTENER = ""https-listener"";
     String ID_COLUMN = ""id-column"";
     String IDENTITY_REALM = ""identity-realm"";
+    String IDENTITY_MAPPING = ""identity-mapping"";
     String IIOP_OPENJDK = ""iiop-openjdk"";
     String IMAP = ""imap"";
     String IN_VM_ACCEPTOR = ""in-vm-acceptor"";
@@ -330,6 +331,7 @@ public interface ModelDescriptionConstants {
     String MULTICAST_ADDRESS = ""multicast-address"";
     String MULTICAST_PORT = ""multicast-port"";
     String NAME = ""name"";
+    String NEW_IDENTITY_ATTRIBUTES = ""new-identity-attributes"";
     String NEW_ITEM_ATTRIBUTES = ""new-item-attributes"";
     String NEW_ITEM_PATH = ""new-item-path"";
     String NEW_ITEM_RDN = ""new-item-rdn"";
@@ -343,6 +345,8 @@ public interface ModelDescriptionConstants {
     String OPERATIONS = ""operations"";
     String OUTBOUND_SOCKET_BINDING_REF = ""outbound-socket-binding-ref"";
     String OUTCOME = ""outcome"";
+    String OTP_CREDENTIAL_MAPPER = ""otp-credential-mapper"";
+
     String PARTITION_HANDLING = ""partition-handling"";
     String PASSWORD = ""password"";
     String PATH = ""path"";
@@ -543,6 +547,7 @@ public interface ModelDescriptionConstants {
     String UNIT = ""unit"";
     String URL = ""url"";
     String USER_NAME = ""user-name"";
+    String USER_PASSWORD_MAPPER = ""user-password-mapper"";
     String USERNAME = ""username"";
     String VALUE = ""value"";
     String VALUE_TYPE = ""value-type"";
@@ -561,5 +566,6 @@ public interface ModelDescriptionConstants {
     String WRITE_ATTRIBUTE_OPERATION = ""write-attribute"";
     String X500_ATTRIBUTE_PRINCIPAL_DECODER = ""x500-attribute-principal-decoder"";
     String XA_DATA_SOURCE = ""xa-data-source"";
+    String X509_CREDENTIAL_MAPPER = ""x509-credential-mapper"";
 }
 ",2017-07-06T06:57:16Z,109
"@@ -213,7 +213,6 @@ public interface Ids {
     String ELYTRON_CUSTOM_ROLE_DECODER = build(ELYTRON, ""custom-role-decoder"");
     String ELYTRON_CUSTOM_ROLE_MAPPER = build(ELYTRON, ""custom-role-mapper"");
     String ELYTRON_DIR_CONTEXT = build(ELYTRON, ""dir-context"");
-    String ELYTRON_FILE_AUDIT_LOG = build(ELYTRON, ""file-audit-log"");
     String ELYTRON_FILESYSTEM_REALM = build(ELYTRON, ""filesystem-realm"");
     String ELYTRON_FILTERING_KEY_STORE = build(ELYTRON, ""filtering-key-store"");
     String ELYTRON_HTTP_AUTHENTICATION_FACTORY = build(ELYTRON, ""http-authentication-factory"");
@@ -222,6 +221,12 @@ public interface Ids {
     String ELYTRON_HTTP_AUTHENTICATION_FACTORY_PAGE = build(ELYTRON, ""http-authentication-factory"", PAGE_SUFFIX);
     String ELYTRON_HTTP_AUTHENTICATION_FACTORY_TABLE = build(ELYTRON, ""http-authentication-factory"", TABLE_SUFFIX);
     String ELYTRON_IDENTITY_REALM = build(ELYTRON, ""identity-realm"");
+    String ELYTRON_IDENTITY_ATTRIBUTE_MAPPING = build(ELYTRON, ""identity-attribute-mapping"");
+    String ELYTRON_IDENTITY_ATTRIBUTE_MAPPING_ADD = build(ELYTRON, ""identity-attribute-mapping"", ADD_SUFFIX);
+    String ELYTRON_IDENTITY_ATTRIBUTE_MAPPING_FORM = build(ELYTRON, ""identity-attribute-mapping"", FORM_SUFFIX);
+    String ELYTRON_IDENTITY_ATTRIBUTE_MAPPING_PAGE = build(ELYTRON, ""identity-attribute-mapping"", PAGE_SUFFIX);
+    String ELYTRON_IDENTITY_ATTRIBUTE_MAPPING_TAB = build(ELYTRON, ""identity-attribute-mapping"", TAB_SUFFIX);
+    String ELYTRON_IDENTITY_ATTRIBUTE_MAPPING_TABLE = build(ELYTRON, ""identity-attribute-mapping"", TABLE_SUFFIX);
     String ELYTRON_JDBC_REALM = build(ELYTRON, ""jdbc-realm"");
     String ELYTRON_JDBC_REALM_ADD = build(ELYTRON_JDBC_REALM, ADD_SUFFIX);
     String ELYTRON_JDBC_REALM_ATTRIBUTE_MAPPING = build(ELYTRON_JDBC_REALM, ""attribute-mapping"");
@@ -246,6 +251,11 @@ public interface Ids {
     String ELYTRON_LDAP_REALM = build(ELYTRON, ""ldap-realm"");
     String ELYTRON_LOGICAL_PERMISSION_MAPPER = build(ELYTRON, ""logical-permission-mapper"");
     String ELYTRON_LOGICAL_ROLE_MAPPER = build(ELYTRON, ""logical-role-mapper"");
+    String ELYTRON_LDAP_REALM_ADD = build(ELYTRON, ""ldap-realm"", ADD_SUFFIX);
+    String ELYTRON_LDAP_REALM_FORM = build(ELYTRON, ""ldap-realm"", FORM_SUFFIX);
+    String ELYTRON_LDAP_REALM_PAGE = build(ELYTRON, ""ldap-realm"", PAGE_SUFFIX);
+    String ELYTRON_LDAP_REALM_TAB = build(ELYTRON, ""ldap-realm"", TAB_SUFFIX);
+    String ELYTRON_LDAP_REALM_TABLE = build(ELYTRON, ""ldap-realm"", TABLE_SUFFIX);
     String ELYTRON_MAPPED_REGEX_REALM_MAPPER = build(ELYTRON, ""mapped-regex-realm-mapper"");
     String ELYTRON_MECHANISM_CONFIGURATIONS = build(ELYTRON, ""mechanism-configurations"");
     String ELYTRON_MECHANISM_CONFIGURATIONS_ADD = build(ELYTRON_MECHANISM_CONFIGURATIONS, ADD_SUFFIX);
@@ -279,6 +289,11 @@ public interface Ids {
     String ELYTRON_SIMPLE_PERMISSION_MAPPER = build(ELYTRON, ""simple-permission-mapper"");
     String ELYTRON_SIMPLE_REGEX_REALM_MAPPER = build(ELYTRON, ""single-regex-realm-mapper"");
     String ELYTRON_SIMPLE_ROLE_DECODER = build(ELYTRON, ""simple-role-decoder"");
+    String ELYTRON_USER_PASSWORD_MAPPER_TAB = build(ELYTRON, ELYTRON_LDAP_REALM, ""user-password-mapper"", TAB_SUFFIX);
+    String ELYTRON_OTP_CREDENTIAL_MAPPER_TAB = build(ELYTRON, ELYTRON_LDAP_REALM, ""otp-credential-mapper"", TAB_SUFFIX);
+    String ELYTRON_X509_CREDENTIAL_MAPPER_TAB = build(ELYTRON, ELYTRON_LDAP_REALM, ""x509-credential-mapper"", TAB_SUFFIX);
+
+    String ELYTRON_FILE_AUDIT_LOG = build(ELYTRON, ""file-audit-log"");
     String ELYTRON_SIZE_AUDIT_LOG = build(ELYTRON, ""size-rotating-file-audit-log"");
     String ELYTRON_SIZE_ROTATING_FILE_AUDIT_LOG = build(ELYTRON, ""size-rotating-file-audit-log"");
     String ELYTRON_SYSLOG_AUDIT_LOG = build(ELYTRON, ""syslog-audit-log"");",2017-07-06T06:57:16Z,111
"@@ -88,7 +88,6 @@ public interface Names {
 
     String EE = ""EE"";
     String ELYTRON = ""Elytron"";
-    String ELYTRON_LDAP_REALM = ""LDAP Realm"";
     String ELYTRON_PROPERTIES_REALM = ""Properties Realm"";
     String ENDPOINT_CONFIGURATION = ""Endpoint Configuration"";
     String ENTITY = ""Entity"";
@@ -129,6 +128,8 @@ public interface Names {
     String HTTPS = ""HTTPS"";
     String HTTPS_LISTENER = ""HTTPS Listener"";
 
+    String IDENTITY_ATTRIBUTE_MAPPING = ""Identity Attribute Mapping"";
+    String IDENTITY_MAPPING = ""Identity Mapping"";
     String IN_VM_ACCEPTOR = ""In VM Acceptor"";
     String IN_VM_CONNECTOR = ""In VM Connector"";
     String INBOUND = ""Inbound"";
@@ -150,6 +151,7 @@ public interface Names {
     String JSP = ""JSP"";
 
     String LDAP_KEY_STORE = ""LDAP Key Store"";
+    String LDAP_REALM = ""LDAP Realm"";
     String LISTENER = ""Listener"";
     String LIVE_ONLY = ""Live Only"";
     String LOCAL_CACHE = ""Local Cache"";
@@ -190,6 +192,7 @@ public interface Names {
     String OTHER_SETTINGS = ""Other Settings"";
     String OUTBOUND_LOCAL = ""Outbound Local"";
     String OUTBOUND_REMOTE = ""Outbound Remote"";
+    String OTP_CREDENTIAL_MAPPER = ""OTP Credential Mapper"";
 
     String PARTITION_HANDLING = ""Partition Handling"";
     String PATCHING = ""Patching"";
@@ -271,6 +274,7 @@ public interface Names {
     String UNKNOWN = ""unknown"";
     String UNMANAGED_DEPLOYMENT = ""Unmanaged Deployment"";
     String URL = ""URL"";
+    String USER_PASSWORD_MAPPER = ""User Password Mapper"";
 
     String VALUE = ""Value"";
 
@@ -282,4 +286,5 @@ public interface Names {
     String WRITE_THROUGH = ""Write Through"";
 
     String XA_DATASOURCE = ""XA Datasource"";
+    String X509_CREDENTIAL_MAPPER = ""X509 Credential Mapper"";
 }",2017-07-06T06:57:16Z,112
"@@ -48,30 +48,18 @@ public class DeploymentScannerPresenter
         extends MbuiPresenter<DeploymentScannerPresenter.MyView, DeploymentScannerPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    // @formatter:off
-    @ProxyCodeSplit
-    @NameToken(NameTokens.DEPLOYMENT_SCANNERS)
-    @Requires({DEPLOYMENTSCANNER_SUBSYSTEM_ADDRESS, DEPLOYMENTSCANNER_ADDRESS})
-    public interface MyProxy extends ProxyPlace<DeploymentScannerPresenter> {}
-
-    public interface MyView extends MbuiView<DeploymentScannerPresenter> {
-        void updateScanners(List<NamedNode> items);
-    }
-    // @formatter:on
-
-
     private final CrudOperations crud;
     private final FinderPathFactory finderPathFactory;
     private final StatementContext statementContext;
 
     @Inject
-    public DeploymentScannerPresenter(final EventBus eventBus,
-            final MyView view,
-            final MyProxy proxy,
-            final Finder finder,
-            final CrudOperations crud,
-            final FinderPathFactory finderPathFactory,
-            final StatementContext statementContext) {
+    public DeploymentScannerPresenter(EventBus eventBus,
+            MyView view,
+            MyProxy proxy,
+            Finder finder,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext) {
         super(eventBus, view, proxy, finder);
         this.crud = crud;
         this.finderPathFactory = finderPathFactory;
@@ -100,4 +88,17 @@ protected void reload() {
                 getView().updateScanners(
                         asNamedNodes(failSafePropertyList(result, DEPLOYMENTSCANNER_TEMPLATE.lastName()))));
     }
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @NameToken(NameTokens.DEPLOYMENT_SCANNERS)
+    @Requires({DEPLOYMENTSCANNER_SUBSYSTEM_ADDRESS, DEPLOYMENTSCANNER_ADDRESS})
+    public interface MyProxy extends ProxyPlace<DeploymentScannerPresenter> {
+    }
+
+    public interface MyView extends MbuiView<DeploymentScannerPresenter> {
+        void updateScanners(List<NamedNode> items);
+    }
+    // @formatter:on
 }",2017-10-16T13:25:42Z,343
"@@ -67,21 +67,8 @@ public class CacheContainerPresenter
         extends ApplicationFinderPresenter<CacheContainerPresenter.MyView, CacheContainerPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    // @formatter:off
-    @ProxyCodeSplit
-    @Requires({CACHE_CONTAINER_ADDRESS, DISTRIBUTED_CACHE_ADDRESS, INVALIDATION_CACHE_ADDRESS, LOCAL_CACHE_ADDRESS,
-            REPLICATED_CACHE_ADDRESS, THREAD_POOL_ADDRESS, TRANSPORT_JGROUPS_ADDRESS})
-    @NameToken(NameTokens.CACHE_CONTAINER)
-    public interface MyProxy extends ProxyPlace<CacheContainerPresenter> {}
-
-    public interface MyView extends HalView, HasPresenter<CacheContainerPresenter> {
-        void update(CacheContainer cacheContainer, boolean jgroups);
-        void updateCacheBackups(Cache cache, List<NamedNode> backups);
-        void updateCacheStore(Cache cache, List<Property> stores);
-    }
-    // @formatter:on
-
-
+    public static final String EQUALS = ""="";
+    public static final String EQ_WILDCARD = ""=*"";
     private final MetadataRegistry metadataRegistry;
     private final Dispatcher dispatcher;
     private final CrudOperations crud;
@@ -94,16 +81,16 @@ public interface MyView extends HalView, HasPresenter<CacheContainerPresenter> {
     private Store store;
 
     @Inject
-    public CacheContainerPresenter(final EventBus eventBus,
-            final CacheContainerPresenter.MyView view,
-            final CacheContainerPresenter.MyProxy myProxy,
-            final Finder finder,
-            final MetadataRegistry metadataRegistry,
-            final Dispatcher dispatcher,
-            final CrudOperations crud,
-            final FinderPathFactory finderPathFactory,
-            final StatementContext statementContext,
-            final Resources resources) {
+    public CacheContainerPresenter(EventBus eventBus,
+            CacheContainerPresenter.MyView view,
+            CacheContainerPresenter.MyProxy myProxy,
+            Finder finder,
+            MetadataRegistry metadataRegistry,
+            Dispatcher dispatcher,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext,
+            Resources resources) {
         super(eventBus, view, myProxy, finder);
         this.metadataRegistry = metadataRegistry;
         this.dispatcher = dispatcher;
@@ -120,7 +107,7 @@ protected void onBind() {
     }
 
     @Override
-    public void prepareFromRequest(final PlaceRequest request) {
+    public void prepareFromRequest(PlaceRequest request) {
         super.prepareFromRequest(request);
         cacheContainer = request.getParameter(NAME, null);
     }
@@ -177,7 +164,7 @@ void resetCacheContainer(Form<ModelNode> form) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE);
         crud.reset(Names.CACHE_CONTAINER, cacheContainer, address, form, metadata, new FinishReset<ModelNode>(form) {
             @Override
-            public void afterReset(final Form<ModelNode> form) {
+            public void afterReset(Form<ModelNode> form) {
                 reload();
             }
         });
@@ -186,34 +173,34 @@ public void afterReset(final Form<ModelNode> form) {
 
     // ------------------------------------------------------ cache
 
-    void addCache(final Cache cache) {
+    void addCache(Cache cache) {
         Metadata metadata = metadataRegistry.lookup(cache.template);
         AddResourceDialog dialog = new AddResourceDialog(Ids.build(cache.baseId, Ids.ADD),
                 resources.messages().addResourceTitle(cache.type), metadata,
                 (name, model) -> crud.add(cache.type, name, cacheAddress(cache, name), model, (n, a) -> reload()));
         dialog.show();
     }
 
-    void saveCache(final Cache cache, final String name, final Map<String, Object> changedValues) {
+    void saveCache(Cache cache, String name, Map<String, Object> changedValues) {
         Metadata metadata = metadataRegistry.lookup(cache.template);
         crud.save(cache.type, name, cacheAddress(cache, name), changedValues, metadata, this::reload);
     }
 
-    void resetCache(final Cache cache, final String name, final Form<NamedNode> form) {
+    void resetCache(Cache cache, String name, Form<NamedNode> form) {
         Metadata metadata = metadataRegistry.lookup(cache.template);
         crud.reset(cache.type, name, cacheAddress(cache, name), form, metadata, new FinishReset<NamedNode>(form) {
             @Override
-            public void afterReset(final Form<NamedNode> form) {
+            public void afterReset(Form<NamedNode> form) {
                 reload();
             }
         });
     }
 
-    void removeCache(final Cache cache, final String name) {
+    void removeCache(Cache cache, String name) {
         crud.remove(cache.type, name, cacheAddress(cache, name), this::reload);
     }
 
-    void selectCache(final Cache cacheType, final String cacheName) {
+    void selectCache(Cache cacheType, String cacheName) {
         this.cacheType = cacheType;
         this.cacheName = cacheName;
     }
@@ -222,59 +209,59 @@ String cacheSegment() {
         return cacheType.type + "": "" + cacheName;
     }
 
-    private ResourceAddress cacheAddress(final Cache cache, final String name) {
+    private ResourceAddress cacheAddress(Cache cache, String name) {
         // cannot use this.cacheType and this.cacheName here, since they might be null
-        return SELECTED_CACHE_CONTAINER_TEMPLATE.append(cache.resource() + ""="" + name).resolve(statementContext);
+        return SELECTED_CACHE_CONTAINER_TEMPLATE.append(cache.resource() + EQUALS + name).resolve(statementContext);
     }
 
 
     // ------------------------------------------------------ cache component
 
-    void addCacheComponent(final Component component) {
+    void addCacheComponent(Component component) {
         crud.addSingleton(component.type, cacheComponentAddress(component), null, address -> reload());
     }
 
-    Operation readCacheComponent(final Component component) {
+    Operation readCacheComponent(Component component) {
         if (cacheType != null && cacheName != null) {
             return new Operation.Builder(cacheComponentAddress(component), READ_RESOURCE_OPERATION).build();
         } else {
             return null;
         }
     }
 
-    void saveCacheComponent(final Component component, final Map<String, Object> changedValues) {
+    void saveCacheComponent(Component component, Map<String, Object> changedValues) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(COMPONENT + ""="" + component.resource));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(COMPONENT + EQUALS + component.resource));
         crud.saveSingleton(component.type, cacheComponentAddress(component), changedValues, metadata, this::reload);
     }
 
-    void resetCacheComponent(final Component component, final Form<ModelNode> form) {
+    void resetCacheComponent(Component component, Form<ModelNode> form) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(COMPONENT + ""="" + component.resource));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(COMPONENT + EQUALS + component.resource));
         crud.resetSingleton(component.type, cacheComponentAddress(component), form, metadata,
                 new FinishReset<ModelNode>(form) {
                     @Override
-                    public void afterReset(final Form<ModelNode> form) {
+                    public void afterReset(Form<ModelNode> form) {
                         reload();
                     }
                 });
     }
 
-    void removeCacheComponent(final Component component, final Form<ModelNode> form) {
+    void removeCacheComponent(Component component, Form<ModelNode> form) {
         crud.removeSingleton(component.type, cacheComponentAddress(component), new FinishRemove<ModelNode>(form) {
             @Override
-            public void afterRemove(final Form<ModelNode> form) {
+            public void afterRemove(Form<ModelNode> form) {
                 reload();
             }
         });
     }
 
-    private ResourceAddress cacheComponentAddress(final Component component) {
+    private ResourceAddress cacheComponentAddress(Component component) {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
-                .append(COMPONENT + ""="" + component.resource)
+                .append(cacheType.resource() + EQUALS + cacheName)
+                .append(COMPONENT + EQUALS + component.resource)
                 .resolve(statementContext);
     }
 
@@ -283,8 +270,8 @@ private ResourceAddress cacheComponentAddress(final Component component) {
 
     void addCacheBackup() {
         Metadata metadata = metadataRegistry.lookup(cacheType.template
-                .append(COMPONENT + ""="" + BACKUPS)
-                .append(BACKUP + ""=*""));
+                .append(COMPONENT + EQUALS + BACKUPS)
+                .append(BACKUP + EQ_WILDCARD));
         AddResourceDialog dialog = new AddResourceDialog(Ids.build(cacheType.baseId, BACKUPS, Ids.ADD),
                 resources.messages().addResourceTitle(Names.BACKUP), metadata,
                 (name, model) -> {
@@ -296,52 +283,52 @@ void addCacheBackup() {
 
     void showCacheBackup() {
         ResourceAddress address = SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
-                .append(COMPONENT + ""="" + BACKUPS)
+                .append(cacheType.resource() + EQUALS + cacheName)
+                .append(COMPONENT + EQUALS + BACKUPS)
                 .resolve(statementContext);
         crud.readChildren(address, BACKUP,
                 children -> getView().updateCacheBackups(cacheType, asNamedNodes(children)));
     }
 
-    void saveCacheBackup(final String name, final Map<String, Object> changedValues) {
+    void saveCacheBackup(String name, Map<String, Object> changedValues) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(COMPONENT + ""="" + BACKUPS)
-                .append(BACKUP + ""=*""));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(COMPONENT + EQUALS + BACKUPS)
+                .append(BACKUP + EQ_WILDCARD));
         crud.save(Names.BACKUP, name, cacheBackupAddress(name), changedValues, metadata, this::showCacheBackup);
     }
 
-    void resetCacheBackup(final String name, final Form<NamedNode> form) {
+    void resetCacheBackup(String name, Form<NamedNode> form) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(COMPONENT + ""="" + BACKUPS)
-                .append(BACKUP + ""=*""));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(COMPONENT + EQUALS + BACKUPS)
+                .append(BACKUP + EQ_WILDCARD));
         crud.reset(Names.BACKUP, name, cacheBackupAddress(name), form, metadata, new FinishReset<NamedNode>(form) {
             @Override
-            public void afterReset(final Form<NamedNode> form) {
+            public void afterReset(Form<NamedNode> form) {
                 showCacheBackup();
             }
         });
     }
 
-    void removeCacheBackup(final String name) {
+    void removeCacheBackup(String name) {
         crud.remove(Names.BACKUP, name, cacheBackupAddress(name), this::showCacheBackup);
     }
 
-    private ResourceAddress cacheBackupAddress(final String name) {
+    private ResourceAddress cacheBackupAddress(String name) {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
-                .append(COMPONENT + ""="" + BACKUPS)
-                .append(BACKUP + ""="" + name)
+                .append(cacheType.resource() + EQUALS + cacheName)
+                .append(COMPONENT + EQUALS + BACKUPS)
+                .append(BACKUP + EQUALS + name)
                 .resolve(statementContext);
     }
 
 
     // ------------------------------------------------------ cache store
 
-    void addCacheStore(final Store store) {
+    void addCacheStore(Store store) {
         if (store.addWithDialog) {
-            Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + ""="" + store.resource));
+            Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + EQUALS + store.resource));
             String id = Ids.build(cacheType.baseId, store.baseId, Ids.ADD);
             Form<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata) // custom form w/o unbound name item
                     .fromRequestProperties()
@@ -367,7 +354,7 @@ void addCacheStore(final Store store) {
 
     void showCacheStore() {
         ResourceAddress address = SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
+                .append(cacheType.resource() + EQUALS + cacheName)
                 .resolve(statementContext);
         crud.readChildren(address, STORE, 2, children -> {
             if (children.isEmpty()) {
@@ -383,30 +370,30 @@ void showCacheStore() {
         });
     }
 
-    void saveCacheStore(final Store store, final Map<String, Object> changedValues) {
-        Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + ""="" + store.resource));
+    void saveCacheStore(Store store, Map<String, Object> changedValues) {
+        Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + EQUALS + store.resource));
         crud.saveSingleton(store.type, cacheStoreAddress(store), changedValues, metadata, this::showCacheStore);
     }
 
-    void resetCacheStore(final Store store, final Form<ModelNode> form) {
-        Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + ""="" + store.resource));
+    void resetCacheStore(Store store, Form<ModelNode> form) {
+        Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + EQUALS + store.resource));
         crud.resetSingleton(store.type, cacheStoreAddress(store), form, metadata, new FinishReset<ModelNode>(form) {
             @Override
-            public void afterReset(final Form<ModelNode> form) {
+            public void afterReset(Form<ModelNode> form) {
                 showCacheStore();
             }
         });
     }
 
-    void switchStore(final Store newStore) {
+    void switchStore(Store newStore) {
         if (newStore != null && newStore != this.store) {
             List<Operation> operations = new ArrayList<>();
             if (this.store != null) {
                 operations.add(new Operation.Builder(cacheStoreAddress(this.store), REMOVE).build());
             }
 
             if (newStore.addWithDialog) {
-                Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + ""="" + newStore.resource));
+                Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + EQUALS + newStore.resource));
                 String id = Ids.build(cacheType.baseId, newStore.baseId, Ids.ADD);
                 Form<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata) // custom form w/o unbound name item
                         .fromRequestProperties()
@@ -448,42 +435,42 @@ String storeSegment() {
         return builder.toString();
     }
 
-    private ResourceAddress cacheStoreAddress(final Store store) {
+    private ResourceAddress cacheStoreAddress(Store store) {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
-                .append(STORE + ""="" + store.resource)
+                .append(cacheType.resource() + EQUALS + cacheName)
+                .append(STORE + EQUALS + store.resource)
                 .resolve(statementContext);
     }
 
 
     // ------------------------------------------------------ write through / behind
 
-    void addWrite(final Write write) {
+    void addWrite(Write write) {
         crud.addSingleton(write.type, writeAddress(write), null, address -> showCacheStore());
     }
 
-    void saveWrite(final Write write, final Map<String, Object> changedValues) {
+    void saveWrite(Write write, Map<String, Object> changedValues) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(STORE + ""="" + store.resource)
-                .append(WRITE + ""="" + write.resource));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(STORE + EQUALS + store.resource)
+                .append(WRITE + EQUALS + write.resource));
         crud.saveSingleton(Names.WRITE_BEHIND, writeAddress(write), changedValues, metadata, this::showCacheStore);
     }
 
-    void resetWrite(final Write write, final Form<ModelNode> form) {
+    void resetWrite(Write write, Form<ModelNode> form) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(STORE + ""="" + store.resource)
-                .append(WRITE + ""="" + write.resource));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(STORE + EQUALS + store.resource)
+                .append(WRITE + EQUALS + write.resource));
         crud.resetSingleton(Names.WRITE_BEHIND, writeAddress(write), form, metadata, new FinishReset<ModelNode>(form) {
             @Override
-            public void afterReset(final Form<ModelNode> form) {
+            public void afterReset(Form<ModelNode> form) {
                 showCacheStore();
             }
         });
     }
 
-    void switchWrite(final Write currentWrite, final Write newWrite) {
+    void switchWrite(Write currentWrite, Write newWrite) {
         List<Operation> operations = new ArrayList<>();
         operations.add(new Operation.Builder(writeAddress(currentWrite), REMOVE).build());
         operations.add(new Operation.Builder(writeAddress(newWrite), ADD).build());
@@ -494,88 +481,88 @@ void switchWrite(final Write currentWrite, final Write newWrite) {
         });
     }
 
-    private ResourceAddress writeAddress(final Write write) {
+    private ResourceAddress writeAddress(Write write) {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
-                .append(STORE + ""="" + store.resource)
-                .append(WRITE + ""="" + write.resource)
+                .append(cacheType.resource() + EQUALS + cacheName)
+                .append(STORE + EQUALS + store.resource)
+                .append(WRITE + EQUALS + write.resource)
                 .resolve(statementContext);
     }
 
 
     // ------------------------------------------------------ tables of jdbc stores
 
-    void saveStoreTable(final Table table, final Map<String, Object> changedValues) {
+    void saveStoreTable(Table table, Map<String, Object> changedValues) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(STORE + ""="" + store.resource)
-                .append(TABLE + ""="" + table.resource));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(STORE + EQUALS + store.resource)
+                .append(TABLE + EQUALS + table.resource));
         crud.saveSingleton(table.type, storeTableAddress(store, table), changedValues, metadata, this::showCacheStore);
     }
 
-    void resetStoreTable(final Table table, final Form<ModelNode> form) {
+    void resetStoreTable(Table table, Form<ModelNode> form) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(STORE + ""="" + store.resource)
-                .append(TABLE + ""="" + table.resource));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(STORE + EQUALS + store.resource)
+                .append(TABLE + EQUALS + table.resource));
         crud.resetSingleton(table.type, storeTableAddress(store, table), form, metadata,
                 new FinishReset<ModelNode>(form) {
                     @Override
-                    public void afterReset(final Form<ModelNode> form) {
+                    public void afterReset(Form<ModelNode> form) {
                         showCacheStore();
                     }
                 });
     }
 
-    private ResourceAddress storeTableAddress(final Store store, final Table table) {
+    private ResourceAddress storeTableAddress(Store store, Table table) {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
-                .append(STORE + ""="" + store.resource)
-                .append(TABLE + ""="" + table.resource)
+                .append(cacheType.resource() + EQUALS + cacheName)
+                .append(STORE + EQUALS + store.resource)
+                .append(TABLE + EQUALS + table.resource)
                 .resolve(statementContext);
     }
 
 
     // ------------------------------------------------------ thread pool
 
-    void addThreadPool(final ThreadPool threadPool) {
+    void addThreadPool(ThreadPool threadPool) {
         crud.addSingleton(threadPool.type, threadPoolAddress(threadPool), null, address -> reload());
     }
 
-    Operation readThreadPool(final ThreadPool threadPool) {
+    Operation readThreadPool(ThreadPool threadPool) {
         return new Operation.Builder(threadPoolAddress(threadPool), READ_RESOURCE_OPERATION).build();
     }
 
-    void saveThreadPool(final ThreadPool threadPool, final Map<String, Object> changedValues) {
+    void saveThreadPool(ThreadPool threadPool, Map<String, Object> changedValues) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(THREAD_POOL + ""="" + threadPool.resource));
+                .append(THREAD_POOL + EQUALS + threadPool.resource));
         crud.saveSingleton(threadPool.type, threadPoolAddress(threadPool), changedValues, metadata, this::reload);
     }
 
-    void resetThreadPool(final ThreadPool threadPool, final Form<ModelNode> form) {
+    void resetThreadPool(ThreadPool threadPool, Form<ModelNode> form) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(THREAD_POOL + ""="" + threadPool.resource));
+                .append(THREAD_POOL + EQUALS + threadPool.resource));
         crud.resetSingleton(threadPool.type, threadPoolAddress(threadPool), form, metadata,
                 new FinishReset<ModelNode>(form) {
                     @Override
-                    public void afterReset(final Form<ModelNode> form) {
+                    public void afterReset(Form<ModelNode> form) {
                         reload();
                     }
                 });
     }
 
-    void removeThreadPool(final ThreadPool threadPool, final Form<ModelNode> form) {
+    void removeThreadPool(ThreadPool threadPool, Form<ModelNode> form) {
         crud.removeSingleton(threadPool.type, threadPoolAddress(threadPool), new FinishRemove<ModelNode>(form) {
             @Override
-            public void afterRemove(final Form<ModelNode> form) {
+            public void afterRemove(Form<ModelNode> form) {
                 reload();
             }
         });
     }
 
-    private ResourceAddress threadPoolAddress(final ThreadPool threadPool) {
+    private ResourceAddress threadPoolAddress(ThreadPool threadPool) {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(THREAD_POOL + ""="" + threadPool.resource)
+                .append(THREAD_POOL + EQUALS + threadPool.resource)
                 .resolve(statementContext);
     }
 
@@ -586,24 +573,43 @@ void addJgroups() {
         crud.addSingleton(Names.JGROUPS, jgroupsAddress(), null, address -> reload());
     }
 
-    void saveJgroups(final Map<String, Object> changedValues) {
-        Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE.append(TRANSPORT + ""="" + JGROUPS));
+    void saveJgroups(Map<String, Object> changedValues) {
+        Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE.append(TRANSPORT + EQUALS + JGROUPS));
         crud.saveSingleton(Names.JGROUPS, jgroupsAddress(), changedValues, metadata, this::reload);
     }
 
-    void resetJgroups(final Form<ModelNode> form) {
-        Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE.append(TRANSPORT + ""="" + JGROUPS));
+    void resetJgroups(Form<ModelNode> form) {
+        Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE.append(TRANSPORT + EQUALS + JGROUPS));
         crud.resetSingleton(Names.JGROUPS, jgroupsAddress(), form, metadata, new FinishReset<ModelNode>(form) {
             @Override
-            public void afterReset(final Form<ModelNode> form) {
+            public void afterReset(Form<ModelNode> form) {
                 reload();
             }
         });
     }
 
     private ResourceAddress jgroupsAddress() {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(TRANSPORT + ""="" + JGROUPS)
+                .append(TRANSPORT + EQUALS + JGROUPS)
                 .resolve(statementContext);
     }
+
+
+    // ------------------------------------------------------ inner classes
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @Requires({CACHE_CONTAINER_ADDRESS, DISTRIBUTED_CACHE_ADDRESS, INVALIDATION_CACHE_ADDRESS, LOCAL_CACHE_ADDRESS,
+            REPLICATED_CACHE_ADDRESS, THREAD_POOL_ADDRESS, TRANSPORT_JGROUPS_ADDRESS})
+    @NameToken(NameTokens.CACHE_CONTAINER)
+    public interface MyProxy extends ProxyPlace<CacheContainerPresenter> {
+    }
+
+    public interface MyView extends HalView, HasPresenter<CacheContainerPresenter> {
+        void update(CacheContainer cacheContainer, boolean jgroups);
+        void updateCacheBackups(Cache cache, List<NamedNode> backups);
+        void updateCacheStore(Cache cache, List<Property> stores);
+    }
+    // @formatter:on
 }",2017-10-16T13:25:42Z,344
"@@ -56,37 +56,6 @@
  */
 class StoreElement implements IsElement<HTMLElement>, Attachable, HasPresenter<CacheContainerPresenter> {
 
-    private static final class StoreTable {
-
-        final Store store;
-        final Table table;
-
-        private StoreTable(final Store store, final Table table) {
-            this.store = store;
-            this.table = table;
-        }
-
-        @Override
-        public boolean equals(final Object o) {
-            if (this == o) { return true; }
-            if (!(o instanceof StoreTable)) { return false; }
-
-            StoreTable that = (StoreTable) o;
-
-            //noinspection SimplifiableIfStatement
-            if (store != that.store) { return false; }
-            return table == that.table;
-        }
-
-        @Override
-        public int hashCode() {
-            int result = store.hashCode();
-            result = 31 * result + table.hashCode();
-            return result;
-        }
-    }
-
-
     private final EmptyState emptyState;
     private final HTMLElement headerForm;
     private final String selectStoreId;
@@ -286,4 +255,40 @@ private void formMode(Store store) {
         Elements.setVisible(headerForm, true);
         tabs.forEach((s, t) -> Elements.setVisible(t.asElement(), s == store));
     }
+
+
+    private static final class StoreTable {
+
+        final Store store;
+        final Table table;
+
+        private StoreTable(final Store store, final Table table) {
+            this.store = store;
+            this.table = table;
+        }
+
+        @Override
+        public boolean equals(final Object o) {
+            if (this == o) {
+                return true;
+            }
+            if (!(o instanceof StoreTable)) {
+                return false;
+            }
+
+            StoreTable that = (StoreTable) o;
+            //noinspection SimplifiableIfStatement
+            if (store != that.store) {
+                return false;
+            }
+            return table == that.table;
+        }
+
+        @Override
+        public int hashCode() {
+            int result = store.hashCode();
+            result = 31 * result + table.hashCode();
+            return result;
+        }
+    }
 }",2017-10-16T13:25:42Z,300
"@@ -126,6 +126,8 @@ public static HaPolicy fromResourceName(String resourceName) {
             case ModelDescriptionConstants.SHARED_STORE_SLAVE:
                 result = SHARED_STORE_SLAVE;
                 break;
+            default:
+                break;
         }
         return result;
     }",2017-10-16T13:25:42Z,345
"@@ -40,18 +40,6 @@ public class ModclusterPresenter
         extends MbuiPresenter<ModclusterPresenter.MyView, ModclusterPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    // @formatter:off
-    @ProxyCodeSplit
-    @Requires(ROOT_ADDRESS)
-    @NameToken(NameTokens.MODCLUSTER)
-    public interface MyProxy extends ProxyPlace<ModclusterPresenter> {}
-
-    public interface MyView extends MbuiView<ModclusterPresenter> {
-        void updateConfiguration(ModelNode payload);
-    }
-    // @formatter:on
-
-
     static final String ROOT_ADDRESS = ""/{selected.profile}/subsystem=modcluster/mod-cluster-config=configuration"";
     private static final AddressTemplate ROOT_TEMPLATE = AddressTemplate.of(ROOT_ADDRESS);
 
@@ -60,13 +48,13 @@ public interface MyView extends MbuiView<ModclusterPresenter> {
     private final StatementContext statementContext;
 
     @Inject
-    public ModclusterPresenter(final EventBus eventBus,
-            final MyView view,
-            final MyProxy myProxy,
-            final Finder finder,
-            final CrudOperations crud,
-            final FinderPathFactory finderPathFactory,
-            final StatementContext statementContext) {
+    public ModclusterPresenter(EventBus eventBus,
+            MyView view,
+            MyProxy myProxy,
+            Finder finder,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext) {
         super(eventBus, view, myProxy, finder);
         this.crud = crud;
         this.finderPathFactory = finderPathFactory;
@@ -93,4 +81,17 @@ public FinderPath finderPath() {
     protected void reload() {
         crud.read(ROOT_TEMPLATE, 2, result -> getView().updateConfiguration(result));
     }
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @Requires(ROOT_ADDRESS)
+    @NameToken(NameTokens.MODCLUSTER)
+    public interface MyProxy extends ProxyPlace<ModclusterPresenter> {
+    }
+
+    public interface MyView extends MbuiView<ModclusterPresenter> {
+        void updateConfiguration(ModelNode payload);
+    }
+    // @formatter:on
 }",2017-10-16T13:25:42Z,308
"@@ -41,17 +41,6 @@ public class RequestControllerPresenter
         extends MbuiPresenter<RequestControllerPresenter.MyView, RequestControllerPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    // @formatter:off
-    @ProxyCodeSplit
-    @Requires(ROOT_ADDRESS)
-    @NameToken(NameTokens.REQUEST_CONTROLLER)
-    public interface MyProxy extends ProxyPlace<RequestControllerPresenter> {}
-
-    public interface MyView extends MbuiView<RequestControllerPresenter> {
-        void update(ModelNode payload);
-    }
-    // @formatter:on
-
     private static final String ROOT_ADDRESS = ""/{selected.profile}/subsystem=request-controller"";
     private static final AddressTemplate ROOT_TEMPLATE = AddressTemplate.of(ROOT_ADDRESS);
 
@@ -60,13 +49,13 @@ public interface MyView extends MbuiView<RequestControllerPresenter> {
     private final StatementContext statementContext;
 
     @Inject
-    public RequestControllerPresenter(final EventBus eventBus,
-            final RequestControllerPresenter.MyView view,
-            final RequestControllerPresenter.MyProxy proxy,
-            final Finder finder,
-            final CrudOperations crud,
-            final FinderPathFactory finderPathFactory,
-            final StatementContext statementContext) {
+    public RequestControllerPresenter(EventBus eventBus,
+            RequestControllerPresenter.MyView view,
+            RequestControllerPresenter.MyProxy proxy,
+            Finder finder,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext) {
         super(eventBus, view, proxy, finder);
         this.crud = crud;
         this.finderPathFactory = finderPathFactory;
@@ -93,4 +82,17 @@ public FinderPath finderPath() {
     protected void reload() {
         crud.readRecursive(ROOT_TEMPLATE, result -> getView().update(result));
     }
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @Requires(ROOT_ADDRESS)
+    @NameToken(NameTokens.REQUEST_CONTROLLER)
+    public interface MyProxy extends ProxyPlace<RequestControllerPresenter> {
+    }
+
+    public interface MyView extends MbuiView<RequestControllerPresenter> {
+        void update(ModelNode payload);
+    }
+    // @formatter:on
 }",2017-10-16T13:25:42Z,346
"@@ -26,18 +26,6 @@
 
 class ResourceAdapter extends NamedNode {
 
-    enum AdapterType {
-        ARCHIVE(Names.ARCHIVE.toLowerCase()), MODULE(Names.MODULE.toLowerCase()), UNKNOWN(Names.NOT_AVAILABLE);
-
-        private final String text;
-
-        AdapterType(final String text) {this.text = text;}
-
-        public String text() {
-            return text;
-        }
-    }
-
     ResourceAdapter(final Property property) {
         super(property);
     }
@@ -66,5 +54,20 @@ String getArchive() {
     String getModule() {
         return hasDefined(MODULE) ? get(MODULE).asString() : null;
     }
+
+
+    enum AdapterType {
+        ARCHIVE(Names.ARCHIVE.toLowerCase()), MODULE(Names.MODULE.toLowerCase()), UNKNOWN(Names.NOT_AVAILABLE);
+
+        private final String text;
+
+        AdapterType(final String text) {
+            this.text = text;
+        }
+
+        public String text() {
+            return text;
+        }
+    }
 }
 ",2017-10-16T13:25:42Z,347
"@@ -45,31 +45,19 @@ public class ResourceAdapterPresenter
         extends MbuiPresenter<ResourceAdapterPresenter.MyView, ResourceAdapterPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    // @formatter:off
-    @ProxyCodeSplit
-    @NameToken(NameTokens.RESOURCE_ADAPTER)
-    @Requires(AddressTemplates.RESOURCE_ADAPTER_ADDRESS)
-    public interface MyProxy extends ProxyPlace<ResourceAdapterPresenter> {}
-
-    public interface MyView extends MbuiView<ResourceAdapterPresenter> {
-        void update(ResourceAdapter resourceAdapter);
-    }
-    // @formatter:on
-
-
     private final CrudOperations crud;
     private final FinderPathFactory finderPathFactory;
     private final StatementContext statementContext;
     private String resourceAdapter;
 
     @Inject
-    public ResourceAdapterPresenter(final EventBus eventBus,
-            final MyView view,
-            final MyProxy myProxy,
-            final Finder finder,
-            final CrudOperations crud,
-            final FinderPathFactory finderPathFactory,
-            final StatementContext statementContext) {
+    public ResourceAdapterPresenter(EventBus eventBus,
+            MyView view,
+            MyProxy myProxy,
+            Finder finder,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext) {
         super(eventBus, view, myProxy, finder);
         this.crud = crud;
         this.finderPathFactory = finderPathFactory;
@@ -83,7 +71,7 @@ protected void onBind() {
     }
 
     @Override
-    public void prepareFromRequest(final PlaceRequest request) {
+    public void prepareFromRequest(PlaceRequest request) {
         super.prepareFromRequest(request);
         resourceAdapter = request.getParameter(NAME, null);
     }
@@ -109,4 +97,17 @@ protected void reload() {
         ResourceAddress address = SELECTED_RESOURCE_ADAPTER_TEMPLATE.resolve(statementContext);
         crud.readRecursive(address, result -> getView().update(new ResourceAdapter(resourceAdapter, result)));
     }
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @NameToken(NameTokens.RESOURCE_ADAPTER)
+    @Requires(AddressTemplates.RESOURCE_ADAPTER_ADDRESS)
+    public interface MyProxy extends ProxyPlace<ResourceAdapterPresenter> {
+    }
+
+    public interface MyView extends MbuiView<ResourceAdapterPresenter> {
+        void update(ResourceAdapter resourceAdapter);
+    }
+    // @formatter:on
 }",2017-10-16T13:25:42Z,348
"@@ -64,21 +64,10 @@ public class TransactionPresenter
         extends MbuiPresenter<TransactionPresenter.MyView, TransactionPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    // @formatter:off
-    @ProxyCodeSplit
-    @NameToken(NameTokens.TRANSACTIONS)
-    @Requires(TRANSACTIONS_SUBSYSTEM_ADDRESS)
-    public interface MyProxy extends ProxyPlace<TransactionPresenter> {}
-
-    public interface MyView extends MbuiView<TransactionPresenter> {
-        void updateConfiguration(ModelNode conf);
-    }
-    // @formatter:on
-
     private static final String PROCESS_ID_UUID = ""process-id-uuid"";
     private static final String PROCESS_ID_SOCKET_BINDING = ""process-id-socket-binding"";
     private static final String PROCESS_ID_SOCKET_MAX_PORTS = ""process-id-socket-max-ports"";
-    private final static ValidationResult invalid = ValidationResult
+    private static final ValidationResult invalid = ValidationResult
             .invalid(""Validation error, see error messages below."");
 
     private final CrudOperations crud;
@@ -89,16 +78,16 @@ public interface MyView extends MbuiView<TransactionPresenter> {
     private final Resources resources;
 
     @Inject
-    public TransactionPresenter(final EventBus eventBus,
-            final MyView view,
-            final MyProxy proxy,
-            final Finder finder,
-            final CrudOperations crud,
-            final FinderPathFactory finderPathFactory,
-            final StatementContext statementContext,
-            final Dispatcher dispatcher,
-            final MetadataRegistry metadataRegistry,
-            final Resources resources) {
+    public TransactionPresenter(EventBus eventBus,
+            MyView view,
+            MyProxy proxy,
+            Finder finder,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext,
+            Dispatcher dispatcher,
+            MetadataRegistry metadataRegistry,
+            Resources resources) {
         super(eventBus, view, proxy, finder);
         this.crud = crud;
         this.finderPathFactory = finderPathFactory;
@@ -177,7 +166,7 @@ void resetProcessForm(Form<ModelNode> form) {
         ResourceAddress address = TRANSACTIONS_SUBSYSTEM_TEMPLATE.resolve(statementContext);
         crud.resetSingleton(""Process"", address, form, metadata, new FinishReset<ModelNode>(form) {
             @Override
-            public void afterReset(final Form<ModelNode> form) {
+            public void afterReset(Form<ModelNode> form) {
                 reload();
             }
         });
@@ -321,4 +310,17 @@ FormValidation<ModelNode> getProcessFormValidation() {
     FormValidation<ModelNode> getJdbcFormValidation() {
         return jdbcFormValidation;
     }
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @NameToken(NameTokens.TRANSACTIONS)
+    @Requires(TRANSACTIONS_SUBSYSTEM_ADDRESS)
+    public interface MyProxy extends ProxyPlace<TransactionPresenter> {
+    }
+
+    public interface MyView extends MbuiView<TransactionPresenter> {
+        void updateConfiguration(ModelNode conf);
+    }
+    // @formatter:on
 }",2017-10-16T13:25:42Z,3
"@@ -101,6 +101,8 @@ public String filter(String resource) {
                         return handlerChainType.resource;
                     case HANDLER_CHAIN_NAME:
                         return handlerChain != null ? handlerChain.getName() : null;
+                    default:
+                        break;
                 }
                 return null;
             }
@@ -346,7 +348,8 @@ private void updateHandlers(ModelNode modelNode) {
     @ProxyCodeSplit
     @NameToken(NameTokens.WEBSERVICES)
     @Requires(AddressTemplates.WEBSERVICES_ADDRESS)
-    public interface MyProxy extends ProxyPlace<WebservicePresenter> {}
+    public interface MyProxy extends ProxyPlace<WebservicePresenter> {
+    }
 
     public interface MyView extends HalView, HasPresenter<WebservicePresenter> {
         void update(ModelNode payload);",2017-10-16T13:25:42Z,303
"@@ -283,7 +283,9 @@
                                     scope=""selected""/>
                         </actions>
                         <columns>
-                            <column name=""name"" title=""{{resources.constants().name()}}""/>
+                            <!-- log formatter resources do not a name attribute,
+                            so we need to provide a value which calls NamedNode.getName() -->
+                            <column name=""name"" title=""{{resources.constants().name()}}"" value=""{{row.getName()}}""/>
                             <column name=""pattern""/>
                         </columns>
                     </table>
@@ -319,7 +321,9 @@
                                     scope=""selected""/>
                         </actions>
                         <columns>
-                            <column name=""name"" title=""{{resources.constants().name()}}""/>
+                            <!-- log formatter resources do not a name attribute,
+                            so we need to provide a value which calls NamedNode.getName() -->
+                            <column name=""name"" title=""{{resources.constants().name()}}"" value=""{{row.getName()}}""/>
                         </columns>
                     </table>
                     <form id=""logging-formatter-custom-form"">",2016-05-12T08:34:58Z,349
"@@ -32,17 +32,17 @@ class ColumnFactory {
         labelBuilder = new LabelBuilder();
     }
 
-    <T extends ModelNode> Column<T> createColumn(final Property attributeDescription) {
+    <T extends ModelNode> Column<T> createColumn(final Property attributeDescription, final String title) {
         String name = attributeDescription.getName();
-        String title = labelBuilder.label(attributeDescription);
+        String resolvedTitle = title != null ? title : labelBuilder.label(attributeDescription);
 
-        // TODO Think about other columns type depending on ModelType
+        // TODO Think about other column types depending on ModelType
         Column.RenderCallback<T, Object> render = (cell, type, row, meta) -> {
             if (row.hasDefined(name)) {
                 return row.get(name).asString();
             }
             return null;
         };
-        return new ColumnBuilder<>(name, title, render).build();
+        return new ColumnBuilder<>(name, resolvedTitle, render).build();
     }
 }",2016-05-12T08:34:58Z,350
"@@ -55,9 +55,13 @@ public Builder<T> columns(@NonNls String first, @NonNls String... rest) {
         }
 
         public Builder<T> column(@NonNls String attribute) {
+            return column(attribute, null);
+        }
+
+        public Builder<T> column(@NonNls String attribute, String title) {
             Property attributeDescription = metadata.getDescription().findAttribute(ATTRIBUTES, attribute);
             if (attributeDescription != null) {
-                Column<T> column = columnFactory.createColumn(attributeDescription);
+                Column<T> column = columnFactory.createColumn(attributeDescription, title);
                 return column(column);
             } else {
                 logger.error(""No attribute description for column '{}' found in resource description\n{}"", //NON-NLS",2016-05-12T08:34:58Z,108
"@@ -15,19 +15,62 @@
  */
 package org.jboss.hal.processor.mbui;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /**
  * @author Harald Pehl
  */
 public class DataTableInfo extends MbuiElementInfo {
 
+    public static class Column {
+
+        private final String name;
+        private final String title;
+        private final String value;
+
+        public Column(final String name, final String title, final String value) {
+            this.name = name;
+            this.title = Handlebars.templateSafeValue(title); // title can be a simple value or an expression
+            this.value = Handlebars.stripHandlebar(value); // value has to be an expression
+        }
+
+        public String getName() {
+            return name;
+        }
+
+        public String getTitle() {
+            return title;
+        }
+
+        public String getValue() {
+            return value;
+        }
+
+        public boolean isSimple() {
+            return title == null && value == null;
+        }
+
+        public boolean isSimpleWithTitle() {
+            return title != null && value == null;
+        }
+
+        public boolean isHasValue() {
+            return value != null;
+        }
+    }
+
+
     private final String typeParameter;
     private final MetadataInfo metadata;
     private FormInfo formRef;
+    private final List<Column> columns;
 
     public DataTableInfo(final String name, final String selector, String typeParameter, MetadataInfo metadata) {
         super(name, selector);
         this.typeParameter = typeParameter;
         this.metadata = metadata;
+        this.columns = new ArrayList<>();
     }
 
     public String getTypeParameter() {
@@ -42,7 +85,24 @@ public FormInfo getFormRef() {
         return formRef;
     }
 
-    public void setFormRef(final FormInfo formRef) {
+    void setFormRef(final FormInfo formRef) {
         this.formRef = formRef;
     }
+
+    public List<Column> getColumns() {
+        return columns;
+    }
+
+    public boolean isOnlySimpleColumns() {
+        for (Column column : columns) {
+            if (!column.isSimple()) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    void addColumn(Column column) {
+        columns.add(column);
+    }
 }",2016-05-12T08:34:58Z,351
"@@ -0,0 +1,44 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.processor.mbui;
+
+/**
+ * @author Harald Pehl
+ */
+final class Handlebars {
+
+    private Handlebars() {}
+
+    static boolean isExpression(String value) {
+        return value != null && value.startsWith(""{{"") && value.endsWith(""}}"");
+    }
+
+    static String stripHandlebar(String pattern) {
+        if (isExpression(pattern)) {
+            int start = ""{{"".length();
+            int end = pattern.length() - ""}}"".length();
+            return pattern.substring(start, end);
+        }
+        return pattern;
+    }
+
+    static String templateSafeValue(final String value) {
+        if (value != null) {
+            return isExpression(value) ? stripHandlebar(value) : ""\"""" + value + ""\"""";
+        }
+        return null;
+    }
+}",2016-05-12T08:34:58Z,91
"@@ -18,6 +18,7 @@
 import java.beans.Introspector;
 import java.io.File;
 import java.io.IOException;
+import java.io.StringWriter;
 import java.lang.annotation.Annotation;
 import java.util.EnumSet;
 import java.util.List;
@@ -61,6 +62,8 @@
 import org.jdom2.JDOMException;
 import org.jdom2.filter.Filters;
 import org.jdom2.input.SAXBuilder;
+import org.jdom2.output.Format;
+import org.jdom2.output.XMLOutputter;
 import org.jdom2.xpath.XPathExpression;
 import org.jdom2.xpath.XPathFactory;
 
@@ -162,7 +165,7 @@ protected void processType(final TypeElement type, final MbuiView mbuiView) {
         MbuiViewContext context = new MbuiViewContext(TypeSimplifier.packageNameOf(type),
                 TypeSimplifier.classNameOf(type), subclass, createMethod);
 
-        // parse and validate the mbui xml
+        // parse and validate the MBUI XML
         xpath = XPathFactory.instance();
         Document document = parseXml(type, mbuiView);
         validateDocument(type, document);
@@ -226,10 +229,10 @@ private Document parseXml(final TypeElement type, final MbuiView mbuiView) {
             return new SAXBuilder().build(file.openReader(true));
 
         } catch (IOException e) {
-            error(type, ""Cannot find MBUI xml \""%s\"". "" +
+            error(type, ""Cannot find MBUI XML \""%s\"". "" +
                     ""Please make sure the file exists and resides in the source path."", fq);
         } catch (JDOMException e) {
-            error(type, ""Cannot parse MBUI xml \""%s\"". Please verify that the file contains valid XML."", fq);
+            error(type, ""Cannot parse MBUI XML \""%s\"". Please verify that the file contains valid XML."", fq);
         }
         return null;
     }
@@ -238,20 +241,20 @@ private void validateDocument(final TypeElement type, final Document document) {
         // verify root element
         org.jdom2.Element root = document.getRootElement();
         if (!root.getName().equals(XmlTags.VIEW)) {
-            error(type, ""Invalid root element in MBUI xml. Allowed: \""%s\"", found: \""%s\""."", XmlTags.VIEW,
+            error(type, ""Invalid root element in MBUI XML. Allowed: \""%s\"", found: \""%s\""."", XmlTags.VIEW,
                     root.getName());
         }
 
         // verify first child
         List<org.jdom2.Element> children = root.getChildren();
         if (children.isEmpty()) {
-            error(type, ""No children found in MBUI xml."");
+            error(type, ""No children found in MBUI XML."");
         } else if (children.size() > 1) {
-            error(type, ""Only one child allowed in MBUI xml."");
+            error(type, ""Only one child allowed in MBUI XML."");
         }
         org.jdom2.Element child = children.get(0);
         if (!(child.getName().equals(XmlTags.VERTICAL_NAVIGATION) || child.getName().equals(XmlTags.METADATA))) {
-            error(type, ""Invalid child of root element in MBUI xml. Allowed: \""%s\"" or \""%s\"", found: \""%s\""."",
+            error(type, ""Invalid child of root element in MBUI XML. Allowed: \""%s\"" or \""%s\"", found: \""%s\""."",
                     XmlTags.VERTICAL_NAVIGATION, XmlTags.METADATA, child.getName());
         }
     }
@@ -262,7 +265,7 @@ private void processMetadata(final TypeElement type, final Document document, fi
         for (org.jdom2.Element element : elements) {
             String template = element.getAttributeValue(""address"");
             if (template == null) {
-                error(type, ""Missing address attribute in metadata element"");
+                error(type, ""Missing address attribute in metadata element \""%s\"""", xmlAsString(element));
             } else {
                 context.addMetadata(template);
             }
@@ -300,28 +303,16 @@ private void processMbuiElements(final TypeElement type, final Document document
                                 processVerticalNavigation(field, document, element, selector, context);
                                 break;
                             case DataTable:
-                                processDataTable(field, document, element, selector, context);
+                                processDataTables(field, document, element, selector, context);
                                 break;
                             case Form:
-                                processForm(field, document, element, selector, context);
+                                processForms(field, document, element, selector, context);
                                 break;
                         }
                     }
                 });
     }
 
-    private ElementType getMbuiElementType(TypeMirror dataElementType) {
-        if (isAssignable(dataElementType, VerticalNavigation.class)) {
-            return VerticalNavigation;
-        } else if (isAssignable(dataElementType, Form.class)) {
-            return Form;
-        } else if (isAssignable(dataElementType, DataTable.class)) {
-            return DataTable;
-        } else {
-            return null;
-        }
-    }
-
     private String getSelector(Element element) {
         String selector = null;
 
@@ -343,30 +334,70 @@ private org.jdom2.Element verifySelector(String selector, Element element, Docum
         List<org.jdom2.Element> elements = expression.evaluate(document);
         if (elements.isEmpty()) {
             error(element,
-                    ""Cannot find a matching element in the MBUI xml with id \""%s\""."", selector);
+                    ""Cannot find a matching element in the MBUI XML with id \""%s\""."", selector);
         } else if (elements.size() > 1) {
             error(element,
-                    ""Found %d matching elements in the MBUI xml with id \""%s\"". Id must be unique."",
+                    ""Found %d matching elements in the MBUI XML with id \""%s\"". Id must be unique."",
                     elements.size(), selector);
         }
         return elements.get(0);
     }
 
+    private ElementType getMbuiElementType(TypeMirror dataElementType) {
+        if (isAssignable(dataElementType, VerticalNavigation.class)) {
+            return VerticalNavigation;
+        } else if (isAssignable(dataElementType, Form.class)) {
+            return Form;
+        } else if (isAssignable(dataElementType, DataTable.class)) {
+            return DataTable;
+        } else {
+            return null;
+        }
+    }
+
     private void processVerticalNavigation(final VariableElement field, final Document document,
             final org.jdom2.Element element, final String selector, final MbuiViewContext context) {
         VerticalNavigationInfo navigationInfo = new VerticalNavigationInfo(field.getSimpleName().toString(), selector);
         context.setVerticalNavigation(navigationInfo);
     }
 
-    private void processDataTable(final VariableElement field, final Document document, final org.jdom2.Element element,
-            final String selector, final MbuiViewContext context) {
+    private void processDataTables(final VariableElement field, final Document document,
+            final org.jdom2.Element element, final String selector, final MbuiViewContext context) {
         MetadataInfo metadata = findMetadata(field, element, context);
         DataTableInfo tableInfo = new DataTableInfo(field.getSimpleName().toString(), selector, getTypeParameter(field),
                 metadata);
         context.addDataTableInfo(tableInfo);
+
+        org.jdom2.Element columnsContainer = element.getChild(""columns"");
+        if (columnsContainer != null) {
+            for (org.jdom2.Element columnElement : columnsContainer.getChildren(""column"")) {
+                String name = columnElement.getAttributeValue(""name"");
+                String title = columnElement.getAttributeValue(""title"");
+                String value = columnElement.getAttributeValue(""value"");
+
+                if (name == null) {
+                    error(field, ""Name is missing for column \""%s\"" in data-table#%s"",
+                            xmlAsString(columnElement), selector);
+                }
+                if (value != null) {
+                    if (!Handlebars.isExpression(value)) {
+                        error(field,
+                                ""Invalid column \""%s\"" in data-table#%s: Value has to be an expression."",
+                                xmlAsString(columnElement), selector);
+                    }
+                    if (title == null) {
+                        error(field,
+                                ""Invalid column \""%s\"" in data-table#%s: If value is given, title is mandatory."",
+                                xmlAsString(columnElement), selector);
+                    }
+                }
+                DataTableInfo.Column column = new DataTableInfo.Column(name, title, value);
+                tableInfo.addColumn(column);
+            }
+        }
     }
 
-    private void processForm(final VariableElement field, final Document document, final org.jdom2.Element element,
+    private void processForms(final VariableElement field, final Document document, final org.jdom2.Element element,
             final String selector, final MbuiViewContext context) {
         MetadataInfo metadata = findMetadata(field, element, context);
         FormInfo formInfo = new FormInfo(field.getSimpleName().toString(), selector, getTypeParameter(field), metadata);
@@ -376,6 +407,11 @@ private void processForm(final VariableElement field, final Document document, f
         if (attributesContainer != null) {
             for (org.jdom2.Element attributeElement : attributesContainer.getChildren(""attribute"")) {
                 String name = attributeElement.getAttributeValue(""name"");
+                if (name == null) {
+                    error(field, ""Name is missing for attribute \""%s\"" in form#%s"", xmlAsString(attributeElement),
+                            selector);
+                }
+
                 FormInfo.Attribute attribute = new FormInfo.Attribute(name);
                 org.jdom2.Element suggestHandler = attributeElement.getChild(""suggest-handler"");
                 if (suggestHandler != null) {
@@ -398,15 +434,13 @@ private MetadataInfo findMetadata(final VariableElement field, final org.jdom2.E
         XPathExpression<org.jdom2.Element> expression = xpath.compile(""ancestor::metadata"", Filters.element());
         org.jdom2.Element metadataElement = expression.evaluateFirst(element);
         if (metadataElement == null) {
-            error(field,
-                    ""Missing metadata ancestor. Please make sure the mapped XML element has a \""<%s/>\"" ancestor element."",
-                    XmlTags.METADATA);
+            error(field, ""Missing metadata ancestor for %s#%s. Please make sure the there's a <%s/> ancestor element."",
+                    element.getName(), element.getAttributeValue(""id""), XmlTags.METADATA);
         } else {
             metadataInfo = context.getMetadataInfo(metadataElement.getAttributeValue(""address""));
             if (metadataInfo == null) {
-                error(field,
-                        ""No metadata found. Please make sure the mapped XML element has a \""<%s/>\"" ancestor element."",
-                        XmlTags.METADATA);
+                error(field, ""No metadata found for %s#%s. Please make sure there's a <%s/> ancestor element."",
+                        element.getName(), element.getAttributeValue(""id""), XmlTags.METADATA);
             }
         }
         return metadataInfo;
@@ -523,4 +557,19 @@ private void processPostConstruct(TypeElement type, final MbuiViewContext contex
                     context.getPostConstructs().size(), PostConstruct.class.getSimpleName());
         }
     }
+
+
+    // ------------------------------------------------------ helper methods
+
+    private String xmlAsString(org.jdom2.Element element) {
+        String asString;
+        StringWriter writer = new StringWriter();
+        try {
+            new XMLOutputter(Format.getCompactFormat()).output(element, writer);
+            asString = writer.toString();
+        } catch (IOException e) {
+            asString = ""<"" + element + ""/>"";
+        }
+        return asString;
+    }
 }",2016-05-12T08:34:58Z,352
"@@ -67,6 +67,19 @@ final class ${context.subclass} extends ${context.base} {
 
         <#list context.dataTables as table>
         Options<${table.typeParameter}> ${table.name}Options = new ModelNodeTable.Builder<${table.typeParameter}>(${table.metadata.name})
+            <#if table.onlySimpleColumns>
+            .columns(<#list table.columns as column>""${column.name}""<#if column_has_next>, </#if></#list>)
+            <#else>
+                <#list table.columns as column>
+                    <#if column.simple>
+            .column(""${column.name}"")
+                    <#elseif column.simpleWithTitle>
+            .column(""${column.name}"", ${column.title})
+                    <#elseif column.hasValue>
+            .column(""${column.name}"", ${column.title}, (cell, type, row, meta) -> ${column.value})
+                    </#if>
+                </#list>
+            </#if>
             .build();
         ${table.name} = new ModelNodeTable<>(""${table.selector}"", ${table.name}Options);
         </#list>",2016-05-12T08:34:58Z,314
"@@ -283,7 +283,9 @@
                                     scope=""selected""/>
                         </actions>
                         <columns>
-                            <column name=""name"" title=""{{resources.constants().name()}}""/>
+                            <!-- log formatter resources do not a name attribute,
+                            so we need to provide a value which calls NamedNode.getName() -->
+                            <column name=""name"" title=""{{resources.constants().name()}}"" value=""{{row.getName()}}""/>
                             <column name=""pattern""/>
                         </columns>
                     </table>
@@ -319,7 +321,9 @@
                                     scope=""selected""/>
                         </actions>
                         <columns>
-                            <column name=""name"" title=""{{resources.constants().name()}}""/>
+                            <!-- log formatter resources do not a name attribute,
+                            so we need to provide a value which calls NamedNode.getName() -->
+                            <column name=""name"" title=""{{resources.constants().name()}}"" value=""{{row.getName()}}""/>
                         </columns>
                     </table>
                     <form id=""logging-formatter-custom-form"">",2016-05-12T08:34:58Z,349
"@@ -32,17 +32,17 @@ class ColumnFactory {
         labelBuilder = new LabelBuilder();
     }
 
-    <T extends ModelNode> Column<T> createColumn(final Property attributeDescription) {
+    <T extends ModelNode> Column<T> createColumn(final Property attributeDescription, final String title) {
         String name = attributeDescription.getName();
-        String title = labelBuilder.label(attributeDescription);
+        String resolvedTitle = title != null ? title : labelBuilder.label(attributeDescription);
 
-        // TODO Think about other columns type depending on ModelType
+        // TODO Think about other column types depending on ModelType
         Column.RenderCallback<T, Object> render = (cell, type, row, meta) -> {
             if (row.hasDefined(name)) {
                 return row.get(name).asString();
             }
             return null;
         };
-        return new ColumnBuilder<>(name, title, render).build();
+        return new ColumnBuilder<>(name, resolvedTitle, render).build();
     }
 }",2016-05-12T08:34:58Z,350
"@@ -55,9 +55,13 @@ public Builder<T> columns(@NonNls String first, @NonNls String... rest) {
         }
 
         public Builder<T> column(@NonNls String attribute) {
+            return column(attribute, null);
+        }
+
+        public Builder<T> column(@NonNls String attribute, String title) {
             Property attributeDescription = metadata.getDescription().findAttribute(ATTRIBUTES, attribute);
             if (attributeDescription != null) {
-                Column<T> column = columnFactory.createColumn(attributeDescription);
+                Column<T> column = columnFactory.createColumn(attributeDescription, title);
                 return column(column);
             } else {
                 logger.error(""No attribute description for column '{}' found in resource description\n{}"", //NON-NLS",2016-05-12T08:34:58Z,108
"@@ -15,19 +15,62 @@
  */
 package org.jboss.hal.processor.mbui;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /**
  * @author Harald Pehl
  */
 public class DataTableInfo extends MbuiElementInfo {
 
+    public static class Column {
+
+        private final String name;
+        private final String title;
+        private final String value;
+
+        public Column(final String name, final String title, final String value) {
+            this.name = name;
+            this.title = Handlebars.templateSafeValue(title); // title can be a simple value or an expression
+            this.value = Handlebars.stripHandlebar(value); // value has to be an expression
+        }
+
+        public String getName() {
+            return name;
+        }
+
+        public String getTitle() {
+            return title;
+        }
+
+        public String getValue() {
+            return value;
+        }
+
+        public boolean isSimple() {
+            return title == null && value == null;
+        }
+
+        public boolean isSimpleWithTitle() {
+            return title != null && value == null;
+        }
+
+        public boolean isHasValue() {
+            return value != null;
+        }
+    }
+
+
     private final String typeParameter;
     private final MetadataInfo metadata;
     private FormInfo formRef;
+    private final List<Column> columns;
 
     public DataTableInfo(final String name, final String selector, String typeParameter, MetadataInfo metadata) {
         super(name, selector);
         this.typeParameter = typeParameter;
         this.metadata = metadata;
+        this.columns = new ArrayList<>();
     }
 
     public String getTypeParameter() {
@@ -42,7 +85,24 @@ public FormInfo getFormRef() {
         return formRef;
     }
 
-    public void setFormRef(final FormInfo formRef) {
+    void setFormRef(final FormInfo formRef) {
         this.formRef = formRef;
     }
+
+    public List<Column> getColumns() {
+        return columns;
+    }
+
+    public boolean isOnlySimpleColumns() {
+        for (Column column : columns) {
+            if (!column.isSimple()) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    void addColumn(Column column) {
+        columns.add(column);
+    }
 }",2016-05-12T08:34:58Z,351
"@@ -0,0 +1,44 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.processor.mbui;
+
+/**
+ * @author Harald Pehl
+ */
+final class Handlebars {
+
+    private Handlebars() {}
+
+    static boolean isExpression(String value) {
+        return value != null && value.startsWith(""{{"") && value.endsWith(""}}"");
+    }
+
+    static String stripHandlebar(String pattern) {
+        if (isExpression(pattern)) {
+            int start = ""{{"".length();
+            int end = pattern.length() - ""}}"".length();
+            return pattern.substring(start, end);
+        }
+        return pattern;
+    }
+
+    static String templateSafeValue(final String value) {
+        if (value != null) {
+            return isExpression(value) ? stripHandlebar(value) : ""\"""" + value + ""\"""";
+        }
+        return null;
+    }
+}",2016-05-12T08:34:58Z,91
"@@ -18,6 +18,7 @@
 import java.beans.Introspector;
 import java.io.File;
 import java.io.IOException;
+import java.io.StringWriter;
 import java.lang.annotation.Annotation;
 import java.util.EnumSet;
 import java.util.List;
@@ -61,6 +62,8 @@
 import org.jdom2.JDOMException;
 import org.jdom2.filter.Filters;
 import org.jdom2.input.SAXBuilder;
+import org.jdom2.output.Format;
+import org.jdom2.output.XMLOutputter;
 import org.jdom2.xpath.XPathExpression;
 import org.jdom2.xpath.XPathFactory;
 
@@ -162,7 +165,7 @@ protected void processType(final TypeElement type, final MbuiView mbuiView) {
         MbuiViewContext context = new MbuiViewContext(TypeSimplifier.packageNameOf(type),
                 TypeSimplifier.classNameOf(type), subclass, createMethod);
 
-        // parse and validate the mbui xml
+        // parse and validate the MBUI XML
         xpath = XPathFactory.instance();
         Document document = parseXml(type, mbuiView);
         validateDocument(type, document);
@@ -226,10 +229,10 @@ private Document parseXml(final TypeElement type, final MbuiView mbuiView) {
             return new SAXBuilder().build(file.openReader(true));
 
         } catch (IOException e) {
-            error(type, ""Cannot find MBUI xml \""%s\"". "" +
+            error(type, ""Cannot find MBUI XML \""%s\"". "" +
                     ""Please make sure the file exists and resides in the source path."", fq);
         } catch (JDOMException e) {
-            error(type, ""Cannot parse MBUI xml \""%s\"". Please verify that the file contains valid XML."", fq);
+            error(type, ""Cannot parse MBUI XML \""%s\"". Please verify that the file contains valid XML."", fq);
         }
         return null;
     }
@@ -238,20 +241,20 @@ private void validateDocument(final TypeElement type, final Document document) {
         // verify root element
         org.jdom2.Element root = document.getRootElement();
         if (!root.getName().equals(XmlTags.VIEW)) {
-            error(type, ""Invalid root element in MBUI xml. Allowed: \""%s\"", found: \""%s\""."", XmlTags.VIEW,
+            error(type, ""Invalid root element in MBUI XML. Allowed: \""%s\"", found: \""%s\""."", XmlTags.VIEW,
                     root.getName());
         }
 
         // verify first child
         List<org.jdom2.Element> children = root.getChildren();
         if (children.isEmpty()) {
-            error(type, ""No children found in MBUI xml."");
+            error(type, ""No children found in MBUI XML."");
         } else if (children.size() > 1) {
-            error(type, ""Only one child allowed in MBUI xml."");
+            error(type, ""Only one child allowed in MBUI XML."");
         }
         org.jdom2.Element child = children.get(0);
         if (!(child.getName().equals(XmlTags.VERTICAL_NAVIGATION) || child.getName().equals(XmlTags.METADATA))) {
-            error(type, ""Invalid child of root element in MBUI xml. Allowed: \""%s\"" or \""%s\"", found: \""%s\""."",
+            error(type, ""Invalid child of root element in MBUI XML. Allowed: \""%s\"" or \""%s\"", found: \""%s\""."",
                     XmlTags.VERTICAL_NAVIGATION, XmlTags.METADATA, child.getName());
         }
     }
@@ -262,7 +265,7 @@ private void processMetadata(final TypeElement type, final Document document, fi
         for (org.jdom2.Element element : elements) {
             String template = element.getAttributeValue(""address"");
             if (template == null) {
-                error(type, ""Missing address attribute in metadata element"");
+                error(type, ""Missing address attribute in metadata element \""%s\"""", xmlAsString(element));
             } else {
                 context.addMetadata(template);
             }
@@ -300,28 +303,16 @@ private void processMbuiElements(final TypeElement type, final Document document
                                 processVerticalNavigation(field, document, element, selector, context);
                                 break;
                             case DataTable:
-                                processDataTable(field, document, element, selector, context);
+                                processDataTables(field, document, element, selector, context);
                                 break;
                             case Form:
-                                processForm(field, document, element, selector, context);
+                                processForms(field, document, element, selector, context);
                                 break;
                         }
                     }
                 });
     }
 
-    private ElementType getMbuiElementType(TypeMirror dataElementType) {
-        if (isAssignable(dataElementType, VerticalNavigation.class)) {
-            return VerticalNavigation;
-        } else if (isAssignable(dataElementType, Form.class)) {
-            return Form;
-        } else if (isAssignable(dataElementType, DataTable.class)) {
-            return DataTable;
-        } else {
-            return null;
-        }
-    }
-
     private String getSelector(Element element) {
         String selector = null;
 
@@ -343,30 +334,70 @@ private org.jdom2.Element verifySelector(String selector, Element element, Docum
         List<org.jdom2.Element> elements = expression.evaluate(document);
         if (elements.isEmpty()) {
             error(element,
-                    ""Cannot find a matching element in the MBUI xml with id \""%s\""."", selector);
+                    ""Cannot find a matching element in the MBUI XML with id \""%s\""."", selector);
         } else if (elements.size() > 1) {
             error(element,
-                    ""Found %d matching elements in the MBUI xml with id \""%s\"". Id must be unique."",
+                    ""Found %d matching elements in the MBUI XML with id \""%s\"". Id must be unique."",
                     elements.size(), selector);
         }
         return elements.get(0);
     }
 
+    private ElementType getMbuiElementType(TypeMirror dataElementType) {
+        if (isAssignable(dataElementType, VerticalNavigation.class)) {
+            return VerticalNavigation;
+        } else if (isAssignable(dataElementType, Form.class)) {
+            return Form;
+        } else if (isAssignable(dataElementType, DataTable.class)) {
+            return DataTable;
+        } else {
+            return null;
+        }
+    }
+
     private void processVerticalNavigation(final VariableElement field, final Document document,
             final org.jdom2.Element element, final String selector, final MbuiViewContext context) {
         VerticalNavigationInfo navigationInfo = new VerticalNavigationInfo(field.getSimpleName().toString(), selector);
         context.setVerticalNavigation(navigationInfo);
     }
 
-    private void processDataTable(final VariableElement field, final Document document, final org.jdom2.Element element,
-            final String selector, final MbuiViewContext context) {
+    private void processDataTables(final VariableElement field, final Document document,
+            final org.jdom2.Element element, final String selector, final MbuiViewContext context) {
         MetadataInfo metadata = findMetadata(field, element, context);
         DataTableInfo tableInfo = new DataTableInfo(field.getSimpleName().toString(), selector, getTypeParameter(field),
                 metadata);
         context.addDataTableInfo(tableInfo);
+
+        org.jdom2.Element columnsContainer = element.getChild(""columns"");
+        if (columnsContainer != null) {
+            for (org.jdom2.Element columnElement : columnsContainer.getChildren(""column"")) {
+                String name = columnElement.getAttributeValue(""name"");
+                String title = columnElement.getAttributeValue(""title"");
+                String value = columnElement.getAttributeValue(""value"");
+
+                if (name == null) {
+                    error(field, ""Name is missing for column \""%s\"" in data-table#%s"",
+                            xmlAsString(columnElement), selector);
+                }
+                if (value != null) {
+                    if (!Handlebars.isExpression(value)) {
+                        error(field,
+                                ""Invalid column \""%s\"" in data-table#%s: Value has to be an expression."",
+                                xmlAsString(columnElement), selector);
+                    }
+                    if (title == null) {
+                        error(field,
+                                ""Invalid column \""%s\"" in data-table#%s: If value is given, title is mandatory."",
+                                xmlAsString(columnElement), selector);
+                    }
+                }
+                DataTableInfo.Column column = new DataTableInfo.Column(name, title, value);
+                tableInfo.addColumn(column);
+            }
+        }
     }
 
-    private void processForm(final VariableElement field, final Document document, final org.jdom2.Element element,
+    private void processForms(final VariableElement field, final Document document, final org.jdom2.Element element,
             final String selector, final MbuiViewContext context) {
         MetadataInfo metadata = findMetadata(field, element, context);
         FormInfo formInfo = new FormInfo(field.getSimpleName().toString(), selector, getTypeParameter(field), metadata);
@@ -376,6 +407,11 @@ private void processForm(final VariableElement field, final Document document, f
         if (attributesContainer != null) {
             for (org.jdom2.Element attributeElement : attributesContainer.getChildren(""attribute"")) {
                 String name = attributeElement.getAttributeValue(""name"");
+                if (name == null) {
+                    error(field, ""Name is missing for attribute \""%s\"" in form#%s"", xmlAsString(attributeElement),
+                            selector);
+                }
+
                 FormInfo.Attribute attribute = new FormInfo.Attribute(name);
                 org.jdom2.Element suggestHandler = attributeElement.getChild(""suggest-handler"");
                 if (suggestHandler != null) {
@@ -398,15 +434,13 @@ private MetadataInfo findMetadata(final VariableElement field, final org.jdom2.E
         XPathExpression<org.jdom2.Element> expression = xpath.compile(""ancestor::metadata"", Filters.element());
         org.jdom2.Element metadataElement = expression.evaluateFirst(element);
         if (metadataElement == null) {
-            error(field,
-                    ""Missing metadata ancestor. Please make sure the mapped XML element has a \""<%s/>\"" ancestor element."",
-                    XmlTags.METADATA);
+            error(field, ""Missing metadata ancestor for %s#%s. Please make sure the there's a <%s/> ancestor element."",
+                    element.getName(), element.getAttributeValue(""id""), XmlTags.METADATA);
         } else {
             metadataInfo = context.getMetadataInfo(metadataElement.getAttributeValue(""address""));
             if (metadataInfo == null) {
-                error(field,
-                        ""No metadata found. Please make sure the mapped XML element has a \""<%s/>\"" ancestor element."",
-                        XmlTags.METADATA);
+                error(field, ""No metadata found for %s#%s. Please make sure there's a <%s/> ancestor element."",
+                        element.getName(), element.getAttributeValue(""id""), XmlTags.METADATA);
             }
         }
         return metadataInfo;
@@ -523,4 +557,19 @@ private void processPostConstruct(TypeElement type, final MbuiViewContext contex
                     context.getPostConstructs().size(), PostConstruct.class.getSimpleName());
         }
     }
+
+
+    // ------------------------------------------------------ helper methods
+
+    private String xmlAsString(org.jdom2.Element element) {
+        String asString;
+        StringWriter writer = new StringWriter();
+        try {
+            new XMLOutputter(Format.getCompactFormat()).output(element, writer);
+            asString = writer.toString();
+        } catch (IOException e) {
+            asString = ""<"" + element + ""/>"";
+        }
+        return asString;
+    }
 }",2016-05-12T08:34:58Z,352
"@@ -67,6 +67,19 @@ final class ${context.subclass} extends ${context.base} {
 
         <#list context.dataTables as table>
         Options<${table.typeParameter}> ${table.name}Options = new ModelNodeTable.Builder<${table.typeParameter}>(${table.metadata.name})
+            <#if table.onlySimpleColumns>
+            .columns(<#list table.columns as column>""${column.name}""<#if column_has_next>, </#if></#list>)
+            <#else>
+                <#list table.columns as column>
+                    <#if column.simple>
+            .column(""${column.name}"")
+                    <#elseif column.simpleWithTitle>
+            .column(""${column.name}"", ${column.title})
+                    <#elseif column.hasValue>
+            .column(""${column.name}"", ${column.title}, (cell, type, row, meta) -> ${column.value})
+                    </#if>
+                </#list>
+            </#if>
             .build();
         ${table.name} = new ModelNodeTable<>(""${table.selector}"", ${table.name}Options);
         </#list>",2016-05-12T08:34:58Z,314
"@@ -283,7 +283,9 @@
                                     scope=""selected""/>
                         </actions>
                         <columns>
-                            <column name=""name"" title=""{{resources.constants().name()}}""/>
+                            <!-- log formatter resources do not a name attribute,
+                            so we need to provide a value which calls NamedNode.getName() -->
+                            <column name=""name"" title=""{{resources.constants().name()}}"" value=""{{row.getName()}}""/>
                             <column name=""pattern""/>
                         </columns>
                     </table>
@@ -319,7 +321,9 @@
                                     scope=""selected""/>
                         </actions>
                         <columns>
-                            <column name=""name"" title=""{{resources.constants().name()}}""/>
+                            <!-- log formatter resources do not a name attribute,
+                            so we need to provide a value which calls NamedNode.getName() -->
+                            <column name=""name"" title=""{{resources.constants().name()}}"" value=""{{row.getName()}}""/>
                         </columns>
                     </table>
                     <form id=""logging-formatter-custom-form"">",2016-05-12T08:34:58Z,349
"@@ -32,17 +32,17 @@ class ColumnFactory {
         labelBuilder = new LabelBuilder();
     }
 
-    <T extends ModelNode> Column<T> createColumn(final Property attributeDescription) {
+    <T extends ModelNode> Column<T> createColumn(final Property attributeDescription, final String title) {
         String name = attributeDescription.getName();
-        String title = labelBuilder.label(attributeDescription);
+        String resolvedTitle = title != null ? title : labelBuilder.label(attributeDescription);
 
-        // TODO Think about other columns type depending on ModelType
+        // TODO Think about other column types depending on ModelType
         Column.RenderCallback<T, Object> render = (cell, type, row, meta) -> {
             if (row.hasDefined(name)) {
                 return row.get(name).asString();
             }
             return null;
         };
-        return new ColumnBuilder<>(name, title, render).build();
+        return new ColumnBuilder<>(name, resolvedTitle, render).build();
     }
 }",2016-05-12T08:34:58Z,350
"@@ -55,9 +55,13 @@ public Builder<T> columns(@NonNls String first, @NonNls String... rest) {
         }
 
         public Builder<T> column(@NonNls String attribute) {
+            return column(attribute, null);
+        }
+
+        public Builder<T> column(@NonNls String attribute, String title) {
             Property attributeDescription = metadata.getDescription().findAttribute(ATTRIBUTES, attribute);
             if (attributeDescription != null) {
-                Column<T> column = columnFactory.createColumn(attributeDescription);
+                Column<T> column = columnFactory.createColumn(attributeDescription, title);
                 return column(column);
             } else {
                 logger.error(""No attribute description for column '{}' found in resource description\n{}"", //NON-NLS",2016-05-12T08:34:58Z,108
"@@ -15,19 +15,62 @@
  */
 package org.jboss.hal.processor.mbui;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /**
  * @author Harald Pehl
  */
 public class DataTableInfo extends MbuiElementInfo {
 
+    public static class Column {
+
+        private final String name;
+        private final String title;
+        private final String value;
+
+        public Column(final String name, final String title, final String value) {
+            this.name = name;
+            this.title = Handlebars.templateSafeValue(title); // title can be a simple value or an expression
+            this.value = Handlebars.stripHandlebar(value); // value has to be an expression
+        }
+
+        public String getName() {
+            return name;
+        }
+
+        public String getTitle() {
+            return title;
+        }
+
+        public String getValue() {
+            return value;
+        }
+
+        public boolean isSimple() {
+            return title == null && value == null;
+        }
+
+        public boolean isSimpleWithTitle() {
+            return title != null && value == null;
+        }
+
+        public boolean isHasValue() {
+            return value != null;
+        }
+    }
+
+
     private final String typeParameter;
     private final MetadataInfo metadata;
     private FormInfo formRef;
+    private final List<Column> columns;
 
     public DataTableInfo(final String name, final String selector, String typeParameter, MetadataInfo metadata) {
         super(name, selector);
         this.typeParameter = typeParameter;
         this.metadata = metadata;
+        this.columns = new ArrayList<>();
     }
 
     public String getTypeParameter() {
@@ -42,7 +85,24 @@ public FormInfo getFormRef() {
         return formRef;
     }
 
-    public void setFormRef(final FormInfo formRef) {
+    void setFormRef(final FormInfo formRef) {
         this.formRef = formRef;
     }
+
+    public List<Column> getColumns() {
+        return columns;
+    }
+
+    public boolean isOnlySimpleColumns() {
+        for (Column column : columns) {
+            if (!column.isSimple()) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    void addColumn(Column column) {
+        columns.add(column);
+    }
 }",2016-05-12T08:34:58Z,351
"@@ -0,0 +1,44 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.processor.mbui;
+
+/**
+ * @author Harald Pehl
+ */
+final class Handlebars {
+
+    private Handlebars() {}
+
+    static boolean isExpression(String value) {
+        return value != null && value.startsWith(""{{"") && value.endsWith(""}}"");
+    }
+
+    static String stripHandlebar(String pattern) {
+        if (isExpression(pattern)) {
+            int start = ""{{"".length();
+            int end = pattern.length() - ""}}"".length();
+            return pattern.substring(start, end);
+        }
+        return pattern;
+    }
+
+    static String templateSafeValue(final String value) {
+        if (value != null) {
+            return isExpression(value) ? stripHandlebar(value) : ""\"""" + value + ""\"""";
+        }
+        return null;
+    }
+}",2016-05-12T08:34:58Z,91
"@@ -18,6 +18,7 @@
 import java.beans.Introspector;
 import java.io.File;
 import java.io.IOException;
+import java.io.StringWriter;
 import java.lang.annotation.Annotation;
 import java.util.EnumSet;
 import java.util.List;
@@ -61,6 +62,8 @@
 import org.jdom2.JDOMException;
 import org.jdom2.filter.Filters;
 import org.jdom2.input.SAXBuilder;
+import org.jdom2.output.Format;
+import org.jdom2.output.XMLOutputter;
 import org.jdom2.xpath.XPathExpression;
 import org.jdom2.xpath.XPathFactory;
 
@@ -162,7 +165,7 @@ protected void processType(final TypeElement type, final MbuiView mbuiView) {
         MbuiViewContext context = new MbuiViewContext(TypeSimplifier.packageNameOf(type),
                 TypeSimplifier.classNameOf(type), subclass, createMethod);
 
-        // parse and validate the mbui xml
+        // parse and validate the MBUI XML
         xpath = XPathFactory.instance();
         Document document = parseXml(type, mbuiView);
         validateDocument(type, document);
@@ -226,10 +229,10 @@ private Document parseXml(final TypeElement type, final MbuiView mbuiView) {
             return new SAXBuilder().build(file.openReader(true));
 
         } catch (IOException e) {
-            error(type, ""Cannot find MBUI xml \""%s\"". "" +
+            error(type, ""Cannot find MBUI XML \""%s\"". "" +
                     ""Please make sure the file exists and resides in the source path."", fq);
         } catch (JDOMException e) {
-            error(type, ""Cannot parse MBUI xml \""%s\"". Please verify that the file contains valid XML."", fq);
+            error(type, ""Cannot parse MBUI XML \""%s\"". Please verify that the file contains valid XML."", fq);
         }
         return null;
     }
@@ -238,20 +241,20 @@ private void validateDocument(final TypeElement type, final Document document) {
         // verify root element
         org.jdom2.Element root = document.getRootElement();
         if (!root.getName().equals(XmlTags.VIEW)) {
-            error(type, ""Invalid root element in MBUI xml. Allowed: \""%s\"", found: \""%s\""."", XmlTags.VIEW,
+            error(type, ""Invalid root element in MBUI XML. Allowed: \""%s\"", found: \""%s\""."", XmlTags.VIEW,
                     root.getName());
         }
 
         // verify first child
         List<org.jdom2.Element> children = root.getChildren();
         if (children.isEmpty()) {
-            error(type, ""No children found in MBUI xml."");
+            error(type, ""No children found in MBUI XML."");
         } else if (children.size() > 1) {
-            error(type, ""Only one child allowed in MBUI xml."");
+            error(type, ""Only one child allowed in MBUI XML."");
         }
         org.jdom2.Element child = children.get(0);
         if (!(child.getName().equals(XmlTags.VERTICAL_NAVIGATION) || child.getName().equals(XmlTags.METADATA))) {
-            error(type, ""Invalid child of root element in MBUI xml. Allowed: \""%s\"" or \""%s\"", found: \""%s\""."",
+            error(type, ""Invalid child of root element in MBUI XML. Allowed: \""%s\"" or \""%s\"", found: \""%s\""."",
                     XmlTags.VERTICAL_NAVIGATION, XmlTags.METADATA, child.getName());
         }
     }
@@ -262,7 +265,7 @@ private void processMetadata(final TypeElement type, final Document document, fi
         for (org.jdom2.Element element : elements) {
             String template = element.getAttributeValue(""address"");
             if (template == null) {
-                error(type, ""Missing address attribute in metadata element"");
+                error(type, ""Missing address attribute in metadata element \""%s\"""", xmlAsString(element));
             } else {
                 context.addMetadata(template);
             }
@@ -300,28 +303,16 @@ private void processMbuiElements(final TypeElement type, final Document document
                                 processVerticalNavigation(field, document, element, selector, context);
                                 break;
                             case DataTable:
-                                processDataTable(field, document, element, selector, context);
+                                processDataTables(field, document, element, selector, context);
                                 break;
                             case Form:
-                                processForm(field, document, element, selector, context);
+                                processForms(field, document, element, selector, context);
                                 break;
                         }
                     }
                 });
     }
 
-    private ElementType getMbuiElementType(TypeMirror dataElementType) {
-        if (isAssignable(dataElementType, VerticalNavigation.class)) {
-            return VerticalNavigation;
-        } else if (isAssignable(dataElementType, Form.class)) {
-            return Form;
-        } else if (isAssignable(dataElementType, DataTable.class)) {
-            return DataTable;
-        } else {
-            return null;
-        }
-    }
-
     private String getSelector(Element element) {
         String selector = null;
 
@@ -343,30 +334,70 @@ private org.jdom2.Element verifySelector(String selector, Element element, Docum
         List<org.jdom2.Element> elements = expression.evaluate(document);
         if (elements.isEmpty()) {
             error(element,
-                    ""Cannot find a matching element in the MBUI xml with id \""%s\""."", selector);
+                    ""Cannot find a matching element in the MBUI XML with id \""%s\""."", selector);
         } else if (elements.size() > 1) {
             error(element,
-                    ""Found %d matching elements in the MBUI xml with id \""%s\"". Id must be unique."",
+                    ""Found %d matching elements in the MBUI XML with id \""%s\"". Id must be unique."",
                     elements.size(), selector);
         }
         return elements.get(0);
     }
 
+    private ElementType getMbuiElementType(TypeMirror dataElementType) {
+        if (isAssignable(dataElementType, VerticalNavigation.class)) {
+            return VerticalNavigation;
+        } else if (isAssignable(dataElementType, Form.class)) {
+            return Form;
+        } else if (isAssignable(dataElementType, DataTable.class)) {
+            return DataTable;
+        } else {
+            return null;
+        }
+    }
+
     private void processVerticalNavigation(final VariableElement field, final Document document,
             final org.jdom2.Element element, final String selector, final MbuiViewContext context) {
         VerticalNavigationInfo navigationInfo = new VerticalNavigationInfo(field.getSimpleName().toString(), selector);
         context.setVerticalNavigation(navigationInfo);
     }
 
-    private void processDataTable(final VariableElement field, final Document document, final org.jdom2.Element element,
-            final String selector, final MbuiViewContext context) {
+    private void processDataTables(final VariableElement field, final Document document,
+            final org.jdom2.Element element, final String selector, final MbuiViewContext context) {
         MetadataInfo metadata = findMetadata(field, element, context);
         DataTableInfo tableInfo = new DataTableInfo(field.getSimpleName().toString(), selector, getTypeParameter(field),
                 metadata);
         context.addDataTableInfo(tableInfo);
+
+        org.jdom2.Element columnsContainer = element.getChild(""columns"");
+        if (columnsContainer != null) {
+            for (org.jdom2.Element columnElement : columnsContainer.getChildren(""column"")) {
+                String name = columnElement.getAttributeValue(""name"");
+                String title = columnElement.getAttributeValue(""title"");
+                String value = columnElement.getAttributeValue(""value"");
+
+                if (name == null) {
+                    error(field, ""Name is missing for column \""%s\"" in data-table#%s"",
+                            xmlAsString(columnElement), selector);
+                }
+                if (value != null) {
+                    if (!Handlebars.isExpression(value)) {
+                        error(field,
+                                ""Invalid column \""%s\"" in data-table#%s: Value has to be an expression."",
+                                xmlAsString(columnElement), selector);
+                    }
+                    if (title == null) {
+                        error(field,
+                                ""Invalid column \""%s\"" in data-table#%s: If value is given, title is mandatory."",
+                                xmlAsString(columnElement), selector);
+                    }
+                }
+                DataTableInfo.Column column = new DataTableInfo.Column(name, title, value);
+                tableInfo.addColumn(column);
+            }
+        }
     }
 
-    private void processForm(final VariableElement field, final Document document, final org.jdom2.Element element,
+    private void processForms(final VariableElement field, final Document document, final org.jdom2.Element element,
             final String selector, final MbuiViewContext context) {
         MetadataInfo metadata = findMetadata(field, element, context);
         FormInfo formInfo = new FormInfo(field.getSimpleName().toString(), selector, getTypeParameter(field), metadata);
@@ -376,6 +407,11 @@ private void processForm(final VariableElement field, final Document document, f
         if (attributesContainer != null) {
             for (org.jdom2.Element attributeElement : attributesContainer.getChildren(""attribute"")) {
                 String name = attributeElement.getAttributeValue(""name"");
+                if (name == null) {
+                    error(field, ""Name is missing for attribute \""%s\"" in form#%s"", xmlAsString(attributeElement),
+                            selector);
+                }
+
                 FormInfo.Attribute attribute = new FormInfo.Attribute(name);
                 org.jdom2.Element suggestHandler = attributeElement.getChild(""suggest-handler"");
                 if (suggestHandler != null) {
@@ -398,15 +434,13 @@ private MetadataInfo findMetadata(final VariableElement field, final org.jdom2.E
         XPathExpression<org.jdom2.Element> expression = xpath.compile(""ancestor::metadata"", Filters.element());
         org.jdom2.Element metadataElement = expression.evaluateFirst(element);
         if (metadataElement == null) {
-            error(field,
-                    ""Missing metadata ancestor. Please make sure the mapped XML element has a \""<%s/>\"" ancestor element."",
-                    XmlTags.METADATA);
+            error(field, ""Missing metadata ancestor for %s#%s. Please make sure the there's a <%s/> ancestor element."",
+                    element.getName(), element.getAttributeValue(""id""), XmlTags.METADATA);
         } else {
             metadataInfo = context.getMetadataInfo(metadataElement.getAttributeValue(""address""));
             if (metadataInfo == null) {
-                error(field,
-                        ""No metadata found. Please make sure the mapped XML element has a \""<%s/>\"" ancestor element."",
-                        XmlTags.METADATA);
+                error(field, ""No metadata found for %s#%s. Please make sure there's a <%s/> ancestor element."",
+                        element.getName(), element.getAttributeValue(""id""), XmlTags.METADATA);
             }
         }
         return metadataInfo;
@@ -523,4 +557,19 @@ private void processPostConstruct(TypeElement type, final MbuiViewContext contex
                     context.getPostConstructs().size(), PostConstruct.class.getSimpleName());
         }
     }
+
+
+    // ------------------------------------------------------ helper methods
+
+    private String xmlAsString(org.jdom2.Element element) {
+        String asString;
+        StringWriter writer = new StringWriter();
+        try {
+            new XMLOutputter(Format.getCompactFormat()).output(element, writer);
+            asString = writer.toString();
+        } catch (IOException e) {
+            asString = ""<"" + element + ""/>"";
+        }
+        return asString;
+    }
 }",2016-05-12T08:34:58Z,352
"@@ -67,6 +67,19 @@ final class ${context.subclass} extends ${context.base} {
 
         <#list context.dataTables as table>
         Options<${table.typeParameter}> ${table.name}Options = new ModelNodeTable.Builder<${table.typeParameter}>(${table.metadata.name})
+            <#if table.onlySimpleColumns>
+            .columns(<#list table.columns as column>""${column.name}""<#if column_has_next>, </#if></#list>)
+            <#else>
+                <#list table.columns as column>
+                    <#if column.simple>
+            .column(""${column.name}"")
+                    <#elseif column.simpleWithTitle>
+            .column(""${column.name}"", ${column.title})
+                    <#elseif column.hasValue>
+            .column(""${column.name}"", ${column.title}, (cell, type, row, meta) -> ${column.value})
+                    </#if>
+                </#list>
+            </#if>
             .build();
         ${table.name} = new ModelNodeTable<>(""${table.selector}"", ${table.name}Options);
         </#list>",2016-05-12T08:34:58Z,314
"@@ -23,9 +23,7 @@
 
 import org.jboss.hal.core.modelbrowser.ModelBrowser;
 import org.jboss.hal.core.mvp.PatternFlyViewImpl;
-import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.dmr.model.ResourceAddress;
-import org.jboss.hal.meta.security.SecurityContext;
 
 import javax.inject.Inject;
 
@@ -34,10 +32,18 @@
  */
 public class PatchingView extends PatternFlyViewImpl implements PatchingPresenter.MyView {
 
+    private final ModelBrowser modelBrowser;
+
     @Inject
-    public PatchingView(Dispatcher dispatcher) {
-        ModelBrowser modelBrowser = new ModelBrowser(dispatcher, SecurityContext.RWX, ResourceAddress.ROOT);
-        registerAttachable(modelBrowser);
+    public PatchingView(ModelBrowser modelBrowser) {
+        this.modelBrowser = modelBrowser;
         initElements(modelBrowser);
     }
+
+
+    @Override
+    public void attach() {
+        super.attach();
+        modelBrowser.setRoot(ResourceAddress.ROOT);
+    }
 }",2016-02-18T15:50:57Z,353
"@@ -16,13 +16,6 @@
     padding-right: 5px;
   }
 
-  .lead {
-    font-size: 14px;
-    font-weight: 500;
-    margin-top: 10px;
-    margin-bottom: 0;
-  }
-
   li {
     font-size: 16px;
 
@@ -47,4 +40,9 @@
 
 .model-browser-content {
   overflow-y: scroll;
+
+  .lead {
+    font-size: 14px;
+  }
+
 }",2016-02-18T15:50:57Z,354
"@@ -28,5 +28,4 @@
  */
 @JsType(isNative = true)
 public class Api<T> {
-
 }",2016-02-18T15:50:57Z,336
"@@ -0,0 +1,51 @@
+/*
+ * JBoss, Home of Professional Open Source.
+ * Copyright 2010, Red Hat, Inc., and individual contributors
+ * as indicated by the @author tags. See the copyright.txt file in the
+ * distribution for a full listing of individual contributors.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.jboss.hal.ballroom.tree;
+
+import elemental.js.events.JsEvent;
+import elemental.js.util.JsArrayOf;
+import jsinterop.annotations.JsFunction;
+import jsinterop.annotations.JsType;
+
+import static jsinterop.annotations.JsPackage.GLOBAL;
+import static org.jboss.hal.resources.UIConstants.OBJECT;
+
+/**
+ * Handler when the selection changes.
+ */
+@JsFunction
+@FunctionalInterface
+public interface SelectionChangeHandler<T> {
+
+    @JsType(isNative = true, namespace = GLOBAL, name = OBJECT)
+    class SelectionContext<T> {
+        public String action;
+        public Api<T> api;
+        public Node<T> node;
+        public JsArrayOf<String> selected;
+    }
+
+    /**
+     * Called when a selection changed. That is when an item is selected <em>or</em> deselected.
+     */
+    void onSelectionChanged(JsEvent event, SelectionContext<T> context);
+}",2016-02-18T15:50:57Z,355
"@@ -28,7 +28,6 @@
 import jsinterop.annotations.JsType;
 import org.jboss.gwt.elemento.core.IsElement;
 import org.jboss.hal.ballroom.Attachable;
-import org.jboss.hal.meta.security.SecurityContext;
 
 import static jsinterop.annotations.JsPackage.GLOBAL;
 
@@ -38,30 +37,34 @@
 public class Tree<T> implements IsElement, Attachable {
 
     @JsType(isNative = true)
-    public static class Bridge {
+    public static class Bridge<T> {
 
         @JsMethod(namespace = GLOBAL, name = ""$"")
-        public native static Bridge select(String selector);
+        public native static <T> Bridge<T> select(String selector);
 
         public native void jstree(Options options);
 
-        public native <T> Api<T> jstree(boolean _true);
+        /**
+         * Adds a selection change callback.
+         */
+        public native void on(String event, SelectionChangeHandler<T> handler);
+
+        public native Api<T> jstree(boolean _true);
     }
 
 
-    public static final String ROOT_NODE = ""#"";
+    private static final String ROOT_NODE = ""#"";
+    private static final String CHANGED_EVENT = ""changed.jstree"";
 
     private final String id;
-    private final SecurityContext securityContext;
     private final Options options;
     private final Element div;
+    private Bridge<T> bridge;
     private Api<T> api;
 
 
-    public Tree(final String id, final SecurityContext securityContext,
-            final Node<T> root, final DataFunction<T> data) {
+    public Tree(final String id, final Node<T> root, final DataFunction<T> data) {
         this.id = id;
-        this.securityContext = securityContext;
         this.options = initOptions(root, data);
         this.div = Browser.getDocument().createDivElement();
         this.div.setId(id);
@@ -108,7 +111,7 @@ public Element asElement() {
     public void attach() {
         if (api == null) {
             // TODO check security context and adjust options if necessary
-            Bridge bridge = Bridge.select(""#"" + id);
+            bridge = Bridge.select(""#"" + id);
             bridge.jstree(options);
             api = bridge.jstree(true);
         }
@@ -121,11 +124,19 @@ public void attach() {
      * Getter for the {@link org.jboss.hal.ballroom.tree.Api} instance.
      * @throws IllegalStateException if the API wasn't initialized using {@link #attach()}
      */
-    public Api api() {
+    public Api<T> api() {
         if (api == null) {
             throw new IllegalStateException(
                     ""Tree('"" + id + ""') is not attached. Call Tree.attach() before using any of the API methods!"");
         }
         return api;
     }
+
+    public final void onSelectionChange(SelectionChangeHandler<T> handler) {
+        if (bridge == null) {
+            throw new IllegalStateException(
+                    ""Tree('"" + id + ""') is not attached. Call Tree.attach() before you register callbacks!"");
+        }
+        bridge.on(CHANGED_EVENT, handler);
+    }
 }",2016-02-18T15:50:57Z,338
"@@ -28,6 +28,7 @@
 import org.jboss.hal.core.finder.ColumnRegistry;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.ItemActionFactory;
+import org.jboss.hal.core.modelbrowser.ModelBrowser;
 import org.jboss.hal.core.ui.UIRegistry;
 import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.spi.Footer;
@@ -40,6 +41,7 @@ public class CoreModule extends AbstractGinModule {
     protected void configure() {
         bind(ColumnRegistry.class).in(Singleton.class);
         bind(Finder.class).in(Singleton.class);
+        bind(ModelBrowser.class);
         bind(ItemActionFactory.class).in(Singleton.class);
         bind(StatementContext.class).to(CoreStatementContext.class).asEagerSingleton(); // to register the event
         bind(UIRegistry.class).in(Singleton.class);",2016-02-18T15:50:57Z,177
"@@ -64,6 +64,7 @@ public FormItem<?> createFrom(final Property attributeDescription) {
         ModelNode modelNode = attributeDescription.getValue();
         boolean required = !modelNode.get(NILLABLE).asBoolean(true);
         boolean expressionAllowed = modelNode.get(EXPRESSION_ALLOWED).asBoolean(false);
+        boolean runtime = modelNode.hasDefined(STORAGE) && RUNTIME.equals(modelNode.get(STORAGE).asString());
         String unit = modelNode.hasDefined(UNIT) ? modelNode.get(UNIT).asString() : null;
 
         if (modelNode.hasDefined(TYPE)) {
@@ -130,8 +131,8 @@ public FormItem<?> createFrom(final Property attributeDescription) {
                 case OBJECT: {
                     if (valueType != null && ModelType.STRING == valueType) {
                         PropertiesItem propertiesItem = new PropertiesItem(name, label);
-                        List<Property> properties = ModelNodeHelper
-                                .getOrDefault(modelNode, () -> modelNode.get(DEFAULT).asPropertyList(), emptyList());
+                        List<Property> properties = ModelNodeHelper.getOrDefault(modelNode, DEFAULT,
+                                () -> modelNode.get(DEFAULT).asPropertyList(), emptyList());
                         if (!properties.isEmpty()) {
                             Map<String, String> defaultValues = new HashMap<>();
                             for (Property property : properties) {
@@ -179,6 +180,9 @@ public FormItem<?> createFrom(final Property attributeDescription) {
                 if (formItem.supportsExpressions()) {
                     formItem.setExpressionAllowed(expressionAllowed);
                 }
+                if (runtime) {
+                    formItem.setEnabled(false);
+                }
             }
         }
 
@@ -187,8 +191,11 @@ public FormItem<?> createFrom(final Property attributeDescription) {
 
 
     private List<String> stringValues(ModelNode modelNode, String property) {
-        List<ModelNode> nodes = ModelNodeHelper
-                .getOrDefault(modelNode, () -> modelNode.get(property).asList(), emptyList());
-        return Lists.transform(nodes, ModelNode::asString);
+        if (modelNode.hasDefined(property)) {
+            List<ModelNode> nodes = ModelNodeHelper.getOrDefault(modelNode, property,
+                    () -> modelNode.get(property).asList(), emptyList());
+            return Lists.transform(nodes, ModelNode::asString);
+        }
+        return emptyList();
     }
 }",2016-02-18T15:50:57Z,101
"@@ -234,6 +234,7 @@ private ModelNodeForm(final Builder<T> builder) {
         String path = builder.createResource ? Joiner.on('.').join(OPERATIONS, ADD, REQUEST_PROPERTIES) : ATTRIBUTES;
         Iterable<Property> allProperties = ModelNodeHelper.failSafeGet(builder.resourceDescription, path)
                 .asPropertyList();
+        //noinspection Guava
         FluentIterable<Property> fi = FluentIterable.from(allProperties).filter(new PropertyFilter(builder));
         Iterable<Property> filtered = builder.unsorted ? fi.toList() :
                 fi.toSortedList((p1, p2) -> p1.getName().compareTo(p2.getName()));",2016-02-18T15:50:57Z,60
"@@ -25,8 +25,7 @@
 import com.google.common.base.Predicates;
 import org.jboss.hal.dmr.Property;
 
-import static org.jboss.hal.dmr.ModelDescriptionConstants.REQUIRED;
-import static org.jboss.hal.dmr.ModelDescriptionConstants.STORAGE;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 
 /**
  * @author Harald Pehl
@@ -40,6 +39,7 @@ class PropertyFilter implements Predicate<Property> {
     }
 
     @Override
+    @SuppressWarnings(""Guava"")
     public boolean apply(final Property property) {
         Predicate<Property> filter;
 
@@ -58,8 +58,8 @@ public boolean apply(final Property property) {
             } else {
                 filter = p -> builder.includes.contains(p.getName());
             }
-            if (builder.includeRuntime) {
-                filter = Predicates.and(filter, p -> ""runtime"".equals(p.getValue().get(STORAGE).asString())); //NON-NLS
+            if (!builder.includeRuntime) {
+                filter = Predicates.and(filter, p -> !RUNTIME.equals(p.getValue().get(STORAGE).asString()));
             }
         }
 ",2016-02-18T15:50:57Z,26
"@@ -21,27 +21,43 @@
  */
 package org.jboss.hal.core.modelbrowser;
 
+import com.google.gwt.user.client.rpc.AsyncCallback;
 import elemental.client.Browser;
 import elemental.dom.Element;
 import org.jboss.gwt.elemento.core.Elements;
 import org.jboss.gwt.elemento.core.HasElements;
+import org.jboss.gwt.flow.Progress;
 import org.jboss.hal.ballroom.Attachable;
 import org.jboss.hal.ballroom.IdBuilder;
 import org.jboss.hal.ballroom.layout.LayoutBuilder;
 import org.jboss.hal.ballroom.tree.Node;
 import org.jboss.hal.ballroom.tree.Tree;
 import org.jboss.hal.core.ui.Skeleton;
+import org.jboss.hal.dmr.Property;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.dmr.model.ResourceAddress;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.description.ResourceDescription;
+import org.jboss.hal.meta.description.ResourceDescriptions;
+import org.jboss.hal.meta.processing.MetadataProcessor;
 import org.jboss.hal.meta.security.SecurityContext;
 import org.jboss.hal.meta.security.SecurityContextAware;
 import org.jboss.hal.resources.CSS;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
+import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Footer;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
+import javax.inject.Inject;
+import javax.inject.Provider;
 import java.util.Collections;
+import java.util.Iterator;
 
 import static elemental.css.CSSStyleDeclaration.Unit.PX;
+import static java.util.Collections.singleton;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.PROFILE;
 import static org.jboss.hal.resources.CSS.*;
 
 /**
@@ -53,54 +69,57 @@ public class ModelBrowser implements HasElements, Attachable, SecurityContextAwa
     private static final int MARGIN_SMALL = 10; // margins in modelbrowser.less
     private static final String BREADCRUMB_ELEMENT = ""breadcrumbElement"";
 
+    private static final Logger logger = LoggerFactory.getLogger(ModelBrowser.class);
+
+    private final MetadataProcessor metadataProcessor;
+    private final ResourceDescriptions resourceDescriptions;
+    private final Dispatcher dispatcher;
+    private final Provider<Progress> progress;
+    private final Resources resources;
+
     private final Iterable<Element> rows;
     private final Element header;
     private final Element breadcrumb;
     private final Element buttonGroup;
-    private final Element treeHolder;
-    private final Tree<Context> tree;
+    private final Element treeContainer;
     private final Element content;
+    private final ResourceView resourceView;
+    private Tree<Context> tree;
+    private ResourceAddress root;
 
-    public ModelBrowser(final Dispatcher dispatcher, final SecurityContext securityContext,
-            final ResourceAddress root) {
-        String resource = root == ResourceAddress.ROOT ? Names.MANAGEMENT_MODEL : root.lastValue();
-        if (""*"".equals(resource)) {
-            throw new IllegalArgumentException(""Invalid root address: "" + root +
-                    "". ModelBrowser must be created with a concrete address."");
-        }
+
+    @Inject
+    public ModelBrowser(final MetadataProcessor metadataProcessor,
+            final ResourceDescriptions resourceDescriptions,
+            final Dispatcher dispatcher,
+            @Footer final Provider<Progress> progress,
+            final Resources resources) {
+
+        this.metadataProcessor = metadataProcessor;
+        this.resourceDescriptions = resourceDescriptions;
+        this.dispatcher = dispatcher;
+        this.progress = progress;
+        this.resources = resources;
 
         // @formatter:off
         Elements.Builder builder = new Elements.Builder()
             .header().css(modelBrowserHeader)
-                .ul().css(CSS.breadcrumb).rememberAs(BREADCRUMB_ELEMENT)
-                    .li().span().css(key).innerText(""profiles"").end().span().css(value).innerText(""full"").end().end()
-                    .li().span().css(key).innerText(""subsystem"").end().span().css(value).innerText(""datasources"").end().end()
-                    .li().span().css(key).innerText(""data-source"").end().span().css(value).innerText(""some-data-source"").end().end()
-                    .li().span().css(key).innerText(""fqn"").end().span().css(value).innerText(""org.jboss.hal.core.modelbrowser"").end().end()
-                    .li().span().css(key).innerText(""another-key"").end().span().css(value).innerText(""another-value"").end().end()
-                    .li().span().css(key).innerText(""lore-ipsum"").end().span().css(value).innerText(""dolor-sit-amet"").end().end()
-                .end()
-                .p().css(lead).innerText(""Ein benannter Dateisystempfad, ohne dass ein Spezifizieren des eigentlichen Pfads nötig ist. Falls kein eigentlicher Pfad spezifiziert ist, fungiert dies als Platzhalter im Modell (z.B. auf Domain-Ebene), bis eine voll spezifizierte Pfaddefinition auf niedrigerer Ebene (z.B. auf Host-Ebene, wo verfügbare Adressen bekannt sind) angewendet wird."").end()
+                .ul().css(CSS.breadcrumb).rememberAs(BREADCRUMB_ELEMENT).end()
             .end();
+        // @formatter:on
+
         header = builder.build();
         breadcrumb = builder.referenceFor(BREADCRUMB_ELEMENT);
-        // @formatter:on
 
         buttonGroup = new Elements.Builder()
                 .div().css(btnGroup, modelBrowserButtons)
                 .button().css(btn, btnDefault).add(""i"").css(fontAwesome(""filter"")).end()
                 .button().css(btn, btnDefault).add(""i"").css(fontAwesome(""refresh"")).end()
                 .end()
                 .build();
-
-        Context context = new Context(root, Collections.emptySet());
-        Node<Context> rootNode = new Node.Builder<>(IdBuilder.uniqueId(), resource, context)
-                .folder()
-                .build();
-        tree = new Tree<>(Ids.MODEL_BROWSER, securityContext, rootNode, new ReadChildren(dispatcher));
-        treeHolder = new Elements.Builder().div().css(modelBrowserTree).add(tree.asElement()).end().build();
-
+        treeContainer = new Elements.Builder().div().css(modelBrowserTree).end().build();
         content = new Elements.Builder().div().css(modelBrowserContent).end().build();
+        resourceView = new ResourceView(dispatcher);
 
         // @formatter:off
         rows =  new LayoutBuilder()
@@ -112,7 +131,7 @@ public ModelBrowser(final Dispatcher dispatcher, final SecurityContext securityC
             .row()
                 .column(0, 4)
                     .add(buttonGroup)
-                    .add(treeHolder)
+                    .add(treeContainer)
                 .end()
                 .column(0, 8)
                     .add(content)
@@ -133,7 +152,7 @@ private void adjustHeight() {
         if (navigation > 0 && footer > 0) {
             int height = window - navigation - footer;
             // keep this in sync with the margins in modelbrowser.less
-            treeHolder.getStyle().setHeight(height - 2 * MARGIN_BIG - header - buttonGroup - 2 * MARGIN_SMALL, PX);
+            treeContainer.getStyle().setHeight(height - 2 * MARGIN_BIG - header - buttonGroup - 2 * MARGIN_SMALL, PX);
             content.getStyle().setHeight(height - 2 * MARGIN_BIG - header - 2 * MARGIN_SMALL, PX);
         }
     }
@@ -145,10 +164,115 @@ public Iterable<Element> asElements() {
 
     @Override
     public void attach() {
-        tree.attach();
+        if (tree != null) {
+            tree.attach();
+            tree.onSelectionChange((event, context) -> update(context.node));
+        }
+        updateBreadcrumb(root);
         adjustHeight();
     }
 
+    private void update(Node<Context> node) {
+        Elements.removeChildrenFrom(content);
+
+        if (node == null) {
+            updateBreadcrumb(null);
+        } else {
+            ResourceAddress address = node.data.getAddress();
+            updateBreadcrumb(address);
+
+            if (node.data.isFullyQualified()) {
+                updateDescription(node, asGenericTemplate(address));
+            } else {
+                // TODO Show children
+            }
+        }
+    }
+
+    private void updateBreadcrumb(ResourceAddress address) {
+        Elements.removeChildrenFrom(breadcrumb);
+        if (address == null) {
+            // deselection
+            breadcrumb.appendChild(
+                    new Elements.Builder().li().innerText(resources.constants().nothingSelected()).build());
+
+        } else {
+            if (address == ResourceAddress.ROOT) {
+                Element li = new Elements.Builder().li().innerText(Names.MANAGEMENT_MODEL).build();
+                breadcrumb.appendChild(li);
+
+            } else {
+                for (Property property : address.asPropertyList()) {
+                    Element li = new Elements.Builder().li()
+                            .span().css(key).innerText(property.getName()).end()
+                            .span().css(value).innerText(property.getValue().asString()).end()
+                            .end().build();
+                    breadcrumb.appendChild(li);
+                }
+            }
+        }
+    }
+
+    private void updateDescription(Node<Context> node, AddressTemplate template) {
+        metadataProcessor.process(Ids.MODEL_BROWSER, singleton(template), progress,
+                new AsyncCallback<Void>() {
+                    @Override
+                    public void onFailure(final Throwable throwable) {
+                        logger.error(""Unable to process metadata for {} on node {}({}): {}"", //NON-NLS
+                                template, node.id, node.text, throwable.getMessage());
+                    }
+
+                    @Override
+                    public void onSuccess(final Void aVoid) {
+                        ResourceDescription description = resourceDescriptions.lookup(template);
+                        if (description != null) {
+                            resourceView.update(node.data.getAddress(), description);
+                            content.appendChild(resourceView.asElement());
+                        }
+                    }
+                });
+    }
+
+    private AddressTemplate asGenericTemplate(ResourceAddress address) {
+        StringBuilder builder = new StringBuilder();
+        for (Iterator<Property> iterator = address.asPropertyList().iterator(); iterator.hasNext(); ) {
+            Property property = iterator.next();
+            String name = property.getName();
+
+            if (PROFILE.equals(name)) {
+                builder.append(""{any.profile}""); //NON-NLS
+
+            } else {
+                builder.append(name).append(""="");
+                builder.append(property.getValue().asString());
+            }
+            if (iterator.hasNext()) {
+                builder.append(""/"");
+            }
+        }
+        return AddressTemplate.of(builder.toString());
+    }
+
+
+    // ------------------------------------------------------ public API
+
+    public void setRoot(ResourceAddress root) {
+        this.root = root;
+        String resource = root == ResourceAddress.ROOT ? Names.MANAGEMENT_MODEL : root.lastValue();
+        if (""*"".equals(resource)) {
+            throw new IllegalArgumentException(""Invalid root address: "" + root +
+                    "". ModelBrowser must be created with a concrete address."");
+        }
+        Context context = new Context(root, Collections.emptySet());
+        Node<Context> rootNode = new Node.Builder<>(IdBuilder.uniqueId(), resource, context)
+                .folder()
+                .build();
+        tree = new Tree<>(Ids.MODEL_BROWSER, rootNode, new ReadChildren(dispatcher));
+        Elements.removeChildrenFrom(treeContainer);
+        treeContainer.appendChild(tree.asElement());
+        attach();
+    }
+
     @Override
     public void onSecurityContextChange(final SecurityContext securityContext) {}
 }",2016-02-18T15:50:57Z,114
"@@ -0,0 +1,100 @@
+/*
+ * JBoss, Home of Professional Open Source.
+ * Copyright 2010, Red Hat, Inc., and individual contributors
+ * as indicated by the @author tags. See the copyright.txt file in the
+ * distribution for a full listing of individual contributors.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.jboss.hal.core.modelbrowser;
+
+import com.google.gwt.safehtml.shared.SafeHtml;
+import com.google.gwt.safehtml.shared.SafeHtmlUtils;
+import elemental.dom.Element;
+import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.gwt.elemento.core.IsElement;
+import org.jboss.hal.ballroom.IdBuilder;
+import org.jboss.hal.ballroom.PatternFly;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.dmr.model.Operation;
+import org.jboss.hal.dmr.model.ResourceAddress;
+import org.jboss.hal.meta.description.ResourceDescription;
+import org.jboss.hal.meta.security.SecurityContext;
+import org.jboss.hal.resources.Ids;
+
+import static org.jboss.hal.dmr.ModelDescriptionConstants.INCLUDE_RUNTIME;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.READ_RESOURCE_OPERATION;
+import static org.jboss.hal.resources.CSS.lead;
+
+/**
+ * @author Harald Pehl
+ */
+class ResourceView implements IsElement {
+
+    private static final String DESCRIPTION_ELEMENT = ""descriptionElement"";
+    private static final String FORM_ELEMENT = ""formElement"";
+
+    private final Dispatcher dispatcher;
+    private final Element description;
+    private final Element formContainer;
+    private final Element root;
+
+    ResourceView(final Dispatcher dispatcher) {
+        this.dispatcher = dispatcher;
+
+        // @formatter:off
+        Elements.Builder builder = new Elements.Builder()
+            .div()
+                .p().css(lead).rememberAs(DESCRIPTION_ELEMENT).end()
+                .div().rememberAs(FORM_ELEMENT).end()
+            .end();
+        // @formatter:on
+
+        description = builder.referenceFor(DESCRIPTION_ELEMENT);
+        formContainer = builder.referenceFor(FORM_ELEMENT);
+        root = builder.build();
+    }
+
+    @Override
+    public Element asElement() {
+        return root;
+    }
+
+    void update(ResourceAddress address, ResourceDescription description) {
+        SafeHtml safeHtml = SafeHtmlUtils.fromSafeConstant(description.getDescription());
+        this.description.setInnerHTML(safeHtml.asString());
+
+        Elements.removeChildrenFrom(formContainer);
+        if (description.hasAttributes()) {
+            Operation operation = new Operation.Builder(READ_RESOURCE_OPERATION, address)
+                    .param(INCLUDE_RUNTIME, true)
+                    .build();
+            dispatcher.execute(operation, result -> {
+                ModelNodeForm<ModelNode> form = new ModelNodeForm.Builder<>(
+                        IdBuilder.build(Ids.MODEL_BROWSER, address.lastValue()),
+                        SecurityContext.RWX, description)
+                        .includeRuntime()
+                        .build();
+                formContainer.appendChild(form.asElement());
+                PatternFly.initComponents();
+                form.attach();
+                form.view(result);
+            });
+        }
+    }
+}",2016-02-18T15:50:57Z,356
"@@ -119,6 +119,7 @@ public interface ModelDescriptionConstants {
     String RESPONSE = ""response"";
     String RESULT = ""result"";
     String ROLES = ""HEADER_ROLES"";
+    String RUNTIME = ""runtime"";
     String RUNTIME_NAME = ""runtime-name"";
     String SCHEME = ""scheme"";
     String SERVER = ""server"";",2016-02-18T15:50:57Z,109
"@@ -69,9 +69,10 @@ public static ModelNode failSafeGet(final ModelNode modelNode, final String path
         return undefined;
     }
 
-    public static <T> T getOrDefault(final ModelNode modelNode, Provider<T> provider, T defaultValue) {
+    public static <T> T getOrDefault(final ModelNode modelNode, String attribute,
+            Provider<T> provider, T defaultValue) {
         T result = defaultValue;
-        if (modelNode != null) {
+        if (modelNode != null && modelNode.hasDefined(attribute)) {
             try {
                 result = provider.get();
             } catch (Throwable t) {",2016-02-18T15:50:57Z,110
"@@ -39,8 +39,6 @@
  */
 public class ResourceDescription extends ModelNode {
 
-    public final static ResourceDescription EMPTY = new ResourceDescription();
-
     public ResourceDescription() {
         super();
     }
@@ -54,7 +52,7 @@ public String getDescription() {
     }
 
     public boolean hasAttributes() {
-        return hasDefined(ATTRIBUTES);
+        return hasDefined(ATTRIBUTES) && !get(ATTRIBUTES).asList().isEmpty();
     }
 
     public List<Property> getAttributes() {",2016-02-18T15:50:57Z,24
"@@ -78,60 +78,66 @@ public MetadataProcessor(final Dispatcher dispatcher,
         this.rrdOps = new CreateRrdOperations(statementContext);
     }
 
-    @SuppressWarnings(""HardCodedStringLiteral"")
     public void process(final String token, final Provider<Progress> progress, final AsyncCallback<Void> callback) {
         Set<String> resources = requiredResources.getResources(token);
-        logger.debug(""Token {}: Process required resources on {}"", token, resources);
+        logger.debug(""Token {}: Process required resources on {}"", token, resources); //NON-NLS
         if (resources.isEmpty()) {
-            logger.debug(""Token {}: No required resources found -> callback.onSuccess(null)"", token);
+            logger.debug(""Token {}: No required resources found -> callback.onSuccess(null)"", token); //NON-NLS
             callback.onSuccess(null);
 
         } else {
             // The following lambda makes problems in SuperDevMode!?
             // Set<AddressTemplate> templates = FluentIterable.from(resources).transform(AddressTemplate::of).toSet();
-            //noinspection Convert2Lambda,Anonymous2MethodRef
+            //noinspection Convert2Lambda,Anonymous2MethodRef,Guava
             Set<AddressTemplate> templates = FluentIterable.from(resources).transform(
                     new Function<String, AddressTemplate>() {
                         @Override
                         public AddressTemplate apply(final String template) {
                             return AddressTemplate.of(template);
                         }
                     }).toSet();
+            process(token, templates, progress, callback);
+        }
+    }
 
-            LookupResult lookupResult = lookup.check(token, templates, requiredResources.isRecursive(token));
-            if (lookupResult.allPresent()) {
-                logger.debug(""Token {}: All required resources have been already processed -> callback.onSuccess(null)"", token);
-                callback.onSuccess(null);
-            } else {
-                logger.debug(""Token {}: {}"", token, lookupResult);
-                List<Operation> operations = rrdOps.create(lookupResult);
-                List<List<Operation>> piles = Lists.partition(operations, BATCH_SIZE);
-                List<Composite> composites = Lists.transform(piles, Composite::new);
+    @SuppressWarnings(""HardCodedStringLiteral"")
+    public void process(final String token, final Set<AddressTemplate> templates,
+            final Provider<Progress> progress, final AsyncCallback<Void> callback) {
+        LookupResult lookupResult = lookup.check(token, templates, requiredResources.isRecursive(token));
+        if (lookupResult.allPresent()) {
+            logger.debug(""Token {}: All required resources have been already processed -> callback.onSuccess(null)"",
+                    token);
+            callback.onSuccess(null);
+        } else {
+            logger.debug(""Token {}: {}"", token, lookupResult);
+            List<Operation> operations = rrdOps.create(lookupResult);
+            List<List<Operation>> piles = Lists.partition(operations, BATCH_SIZE);
+            List<Composite> composites = Lists.transform(piles, Composite::new);
 
-                logger.debug(""Token {}: About to execute {} composite operations"", token, composites.size());
-                List<RrdFunction> functions = Lists.transform(composites,
-                        composite -> new RrdFunction(resourceDescriptions, securityFramework, dispatcher, composite));
-                //noinspection Duplicates
-                Outcome<FunctionContext> outcome = new Outcome<FunctionContext>() {
-                    @Override
-                    public void onFailure(final FunctionContext context) {
-                        logger.debug(""Token {}: Failed to process required resources: {}"", token,
-                                context.getErrorMessage());
-                        callback.onFailure(context.getError());
-                    }
+            logger.debug(""Token {}: About to execute {} composite operations"", token, composites.size());
+            List<RrdFunction> functions = Lists.transform(composites,
+                    composite -> new RrdFunction(resourceDescriptions, securityFramework, dispatcher, composite));
+            //noinspection Duplicates
+            Outcome<FunctionContext> outcome = new Outcome<FunctionContext>() {
+                @Override
+                public void onFailure(final FunctionContext context) {
+                    logger.debug(""Token {}: Failed to process required resources: {}"", token,
+                            context.getErrorMessage());
+                    callback.onFailure(context.getError());
+                }
 
-                    @Override
-                    public void onSuccess(final FunctionContext context) {
-                        logger.debug(""Token {}: Successfully processed required resources"", token);
-                        callback.onSuccess(null);
-                    }
-                };
-                if (functions.size() == 1) {
-                    new Async<FunctionContext>(progress.get()).single(new FunctionContext(), outcome, functions.get(0));
-                } else {
-                    new Async<FunctionContext>(progress.get()).waterfall(new FunctionContext(), outcome,
-                            functions.toArray(new RrdFunction[functions.size()]));
+                @Override
+                public void onSuccess(final FunctionContext context) {
+                    logger.debug(""Token {}: Successfully processed required resources"", token);
+                    callback.onSuccess(null);
                 }
+            };
+            if (functions.size() == 1) {
+                new Async<FunctionContext>(progress.get()).single(new FunctionContext(), outcome, functions.get(0));
+            } else {
+                //noinspection SuspiciousToArrayCall
+                new Async<FunctionContext>(progress.get()).waterfall(new FunctionContext(), outcome,
+                        (org.jboss.gwt.flow.Function[]) functions.toArray(new RrdFunction[functions.size()]));
             }
         }
     }",2016-02-18T15:50:57Z,85
"@@ -10,7 +10,7 @@ listHint=Press <abbr class=""key"" title=""RETURN"">&crarr;</abbr> to add new items
 messages=Messages ({0, number})
 messages[\=0]=No messages
 patternMismatch=Value does not match the pattern {0}
-propertiesHint=Add new properties as <em>key=value</em>. Press <abbr class=""key"" title=""RETURN"">&crarr;</abbr> to add and <abbr class=""key"" title=""BACKSPACE"">&#x232B</abbr> to remove them.
+propertiesHint=Add new properties as <em>key=value</em> pairs. Press <abbr class=""key"" title=""RETURN"">&crarr;</abbr> to add and <abbr class=""key"" title=""BACKSPACE"">&#x232B</abbr> to remove them.
 removeConfirmationTitle=Remove {0}
 removeConfirmationQuestion=Do you really want to remove <b>{0}</b>?
 requiredHelp=Required fields are marked with <abbr class=""req"" title=""required""><i class=""fa fa-asterisk""></i></abbr>",2016-02-18T15:50:57Z,94
"@@ -27,7 +27,10 @@ interface AddressTemplates {
     String SELECTED_REMOTE_SITE_ADDRESS = JGROUPS_ADDRESS + ""/stack={selected.stack}/relay=relay.RELAY2/remote-site=*"";
     String PROTOCOL_ADDRESS = JGROUPS_ADDRESS + ""/stack=*/protocol=*"";
     String SELECTED_PROTOCOL_ADDRESS = JGROUPS_ADDRESS + ""/stack={selected.stack}/protocol=*"";
-    String TRANSPORT_THREAD_POOL_ADDRESS = JGROUPS_ADDRESS + ""/stack=*/transport=*/thread-pool=default"";
+    String TRANSPORT_THREAD_POOL_DEFAULT_ADDRESS = JGROUPS_ADDRESS + ""/stack=*/transport=*/thread-pool=default"";
+    String TRANSPORT_THREAD_POOL_INTERNAL_ADDRESS = JGROUPS_ADDRESS + ""/stack=*/transport=*/thread-pool=internal"";
+    String TRANSPORT_THREAD_POOL_OOB_ADDRESS = JGROUPS_ADDRESS + ""/stack=*/transport=*/thread-pool=oob"";
+    String TRANSPORT_THREAD_POOL_TIMER_ADDRESS = JGROUPS_ADDRESS + ""/stack=*/transport=*/thread-pool=timer"";
     String SELECTED_TRANSPORT_THREAD_POOL_ADDRESS = JGROUPS_ADDRESS + ""/stack={selected.stack}/transport=*/thread-pool=*"";
     String TRANSPORT_ADDRESS = JGROUPS_ADDRESS + ""/stack=*/transport=*"";
     String SELECTED_TRANSPORT_ADDRESS = JGROUPS_ADDRESS + ""/stack={selected.stack}/transport=*"";
@@ -47,7 +50,11 @@ interface AddressTemplates {
     AddressTemplate SELECTED_TRANSPORT_TEMPLATE = AddressTemplate.of(SELECTED_TRANSPORT_ADDRESS);
     AddressTemplate SELECTED_TRANSPORT_THREAD_POOL_TEMPLATE = AddressTemplate.of(
             SELECTED_TRANSPORT_THREAD_POOL_ADDRESS);
-    AddressTemplate TRANSPORT_THREAD_POOL_TEMPLATE = AddressTemplate.of(TRANSPORT_THREAD_POOL_ADDRESS);
+    AddressTemplate TRANSPORT_THREAD_POOL_DEFAULT_TEMPLATE = AddressTemplate.of(TRANSPORT_THREAD_POOL_DEFAULT_ADDRESS);
+    AddressTemplate TRANSPORT_THREAD_POOL_INTERNAL_TEMPLATE = AddressTemplate.of(
+            TRANSPORT_THREAD_POOL_INTERNAL_ADDRESS);
+    AddressTemplate TRANSPORT_THREAD_POOL_OOB_TEMPLATE = AddressTemplate.of(TRANSPORT_THREAD_POOL_OOB_ADDRESS);
+    AddressTemplate TRANSPORT_THREAD_POOL_TIMER_TEMPLATE = AddressTemplate.of(TRANSPORT_THREAD_POOL_TIMER_ADDRESS);
     AddressTemplate REMOTE_SITE_TEMPLATE = AddressTemplate.of(REMOTE_SITE_ADDRESS);
     AddressTemplate SELECTED_REMOTE_SITE_TEMPLATE = AddressTemplate.of(SELECTED_REMOTE_SITE_ADDRESS);
     AddressTemplate CHANNEL_TEMPLATE = AddressTemplate.of(CHANNEL_ADDRESS);",2017-11-28T18:12:28Z,357
"@@ -65,7 +65,7 @@ public class ForkElement implements IsElement<HTMLElement>, Attachable, HasPrese
                         table -> presenter.removeResource(SELECTED_CHANNEL_FORK_TEMPLATE,
                                 table.selectedRow().getName(), Names.FORK)))
                 .column(NAME, (cell, t, row, meta) -> row.getName())
-                .column(""Protocols"", row -> {
+                .column(Names.PROTOCOL, row -> {
                     presenter.showChannelProtocol(row);
                     presenter.showChannelInnerPage(PROTOCOL_ID);
                 })
@@ -101,5 +101,7 @@ public void setPresenter(final JGroupsPresenter presenter) {
 
     void update(List<NamedNode> models) {
         table.update(models);
+        // disable ""remove"" button if the table is empty
+        table.enableButton(1, !models.isEmpty());
     }
 }",2017-11-28T18:12:28Z,358
"@@ -15,6 +15,8 @@
  */
 package org.jboss.hal.client.configuration.subsystem.jgroups;
 
+import java.util.List;
+
 import elemental2.dom.HTMLElement;
 import org.jboss.hal.ballroom.Tabs;
 import org.jboss.hal.ballroom.form.Form;
@@ -29,8 +31,7 @@
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
 
-import static org.jboss.hal.client.configuration.subsystem.jgroups.AddressTemplates.SELECTED_TRANSPORT_THREAD_POOL_TEMPLATE;
-import static org.jboss.hal.client.configuration.subsystem.jgroups.AddressTemplates.TRANSPORT_THREAD_POOL_TEMPLATE;
+import static org.jboss.hal.client.configuration.subsystem.jgroups.AddressTemplates.*;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 
 class TransportElement extends GenericElement {
@@ -46,62 +47,67 @@ class TransportElement extends GenericElement {
             String name, String resourceId) {
         super(formMetadata, tableButtonFactory, resources, template, name, resourceId);
 
-        Metadata threadPoolMetadata = metadataRegistry.lookup(TRANSPORT_THREAD_POOL_TEMPLATE);
+        // thread-pool are singletons resources, but each one has different ""default"" values
+        // then, we need specific metadata for each one, for the reset operation to work properly
+        Metadata threadPoolDefaultMetadata = metadataRegistry.lookup(TRANSPORT_THREAD_POOL_DEFAULT_TEMPLATE);
+        Metadata threadPoolInternalMetadata = metadataRegistry.lookup(TRANSPORT_THREAD_POOL_INTERNAL_TEMPLATE);
+        Metadata threadPoolOobMetadata = metadataRegistry.lookup(TRANSPORT_THREAD_POOL_OOB_TEMPLATE);
+        Metadata threadPoolTimerMetadata = metadataRegistry.lookup(TRANSPORT_THREAD_POOL_TIMER_TEMPLATE);
 
         threadPoolDefaultForm = new ModelNodeForm.Builder<>(Ids.JGROUPS_TRANSPORT_THREADPOOL_DEFAULT_FORM,
-                threadPoolMetadata)
+                threadPoolDefaultMetadata)
                 .onSave((form, changedValues) -> {
                     AddressTemplate template1 = SELECTED_TRANSPORT_THREAD_POOL_TEMPLATE
                             .replaceWildcards(table.selectedRow().getName(), DEFAULT);
-                    presenter.saveSingleton(template1, threadPoolMetadata, changedValues,
+                    presenter.saveSingleton(template1, threadPoolDefaultMetadata, changedValues,
                             resources.messages().modifySingleResourceSuccess(Names.THREAD_POOL + "" Default""));
                 })
                 .prepareReset(form -> {
                     AddressTemplate template1 = SELECTED_TRANSPORT_THREAD_POOL_TEMPLATE
                             .replaceWildcards(table.selectedRow().getName(), DEFAULT);
-                    presenter.resetSingleton(template1, Names.THREAD_POOL + "" Default"", form, threadPoolMetadata);
+                    presenter.resetSingleton(template1, Names.THREAD_POOL + "" Default"", form, threadPoolDefaultMetadata);
                 })
                 .build();
         threadPoolTimerForm = new ModelNodeForm.Builder<>(Ids.JGROUPS_TRANSPORT_THREADPOOL_TIMER_FORM,
-                threadPoolMetadata)
+                threadPoolTimerMetadata)
                 .onSave((form, changedValues) -> {
                     AddressTemplate template1 = SELECTED_TRANSPORT_THREAD_POOL_TEMPLATE
                             .replaceWildcards(table.selectedRow().getName(), TIMER);
-                    presenter.saveSingleton(template1, threadPoolMetadata, changedValues,
+                    presenter.saveSingleton(template1, threadPoolTimerMetadata, changedValues,
                             resources.messages().modifySingleResourceSuccess(Names.THREAD_POOL + "" Timer""));
                 })
                 .prepareReset(form -> {
                     AddressTemplate template1 = SELECTED_TRANSPORT_THREAD_POOL_TEMPLATE
                             .replaceWildcards(table.selectedRow().getName(), TIMER);
-                    presenter.resetSingleton(template1, Names.THREAD_POOL + "" Timer"", form, threadPoolMetadata);
+                    presenter.resetSingleton(template1, Names.THREAD_POOL + "" Timer"", form, threadPoolTimerMetadata);
                 })
                 .build();
         threadPoolInternalForm = new ModelNodeForm.Builder<>(Ids.JGROUPS_TRANSPORT_THREADPOOL_INTERNAL_FORM,
-                threadPoolMetadata)
+                threadPoolInternalMetadata)
                 .onSave((form, changedValues) -> {
                     AddressTemplate template1 = SELECTED_TRANSPORT_THREAD_POOL_TEMPLATE
                             .replaceWildcards(table.selectedRow().getName(), INTERNAL);
-                    presenter.saveSingleton(template1, threadPoolMetadata, changedValues,
+                    presenter.saveSingleton(template1, threadPoolInternalMetadata, changedValues,
                             resources.messages().modifySingleResourceSuccess(Names.THREAD_POOL + "" Internal""));
                 })
                 .prepareReset(form -> {
                     AddressTemplate template1 = SELECTED_TRANSPORT_THREAD_POOL_TEMPLATE
                             .replaceWildcards(table.selectedRow().getName(), INTERNAL);
-                    presenter.resetSingleton(template1, Names.THREAD_POOL + "" Internal"", form, threadPoolMetadata);
+                    presenter.resetSingleton(template1, Names.THREAD_POOL + "" Internal"", form, threadPoolInternalMetadata);
                 })
                 .build();
         threadPoolOobForm = new ModelNodeForm.Builder<>(Ids.JGROUPS_TRANSPORT_THREADPOOL_OOB_FORM,
-                threadPoolMetadata)
+                threadPoolOobMetadata)
                 .onSave((form, changedValues) -> {
                     AddressTemplate template1 = SELECTED_TRANSPORT_THREAD_POOL_TEMPLATE
                             .replaceWildcards(table.selectedRow().getName(), OOB);
-                    presenter.saveSingleton(template1, threadPoolMetadata, changedValues,
+                    presenter.saveSingleton(template1, threadPoolOobMetadata, changedValues,
                             resources.messages().modifySingleResourceSuccess(Names.THREAD_POOL + "" OOB""));
                 })
                 .prepareReset(form -> {
                     AddressTemplate template1 = SELECTED_TRANSPORT_THREAD_POOL_TEMPLATE
                             .replaceWildcards(table.selectedRow().getName(), OOB);
-                    presenter.resetSingleton(template1, Names.THREAD_POOL + "" OOB"", form, threadPoolMetadata);
+                    presenter.resetSingleton(template1, Names.THREAD_POOL + "" OOB"", form, threadPoolOobMetadata);
                 })
                 .build();
 
@@ -148,11 +154,6 @@ public void attach() {
                 threadPoolTimerForm.clear();
             }
         });
-
-        // disable the ADD and REMOVE buttons, as the transport is a required singleton resource, but the r-r-d
-        // doesn't says so
-        table.enableButton(0, false);
-        table.enableButton(1, false);
     }
 
     @Override
@@ -163,4 +164,14 @@ public void detach() {
         threadPoolOobForm.detach();
         threadPoolTimerForm.detach();
     }
+
+    @Override
+    void update(List<NamedNode> models) {
+        super.update(models);
+        // disable the ADD and REMOVE buttons, as the transport is a required singleton resource, but the r-r-d
+        // doesn't says so
+        // super.update enables the ""remove"" button if the model is not empty
+        table.enableButton(0, false);
+        table.enableButton(1, false);
+    }
 }",2017-11-28T18:12:28Z,359
"@@ -82,7 +82,10 @@ public void onError(FlowContext context, Throwable error) {
                         @Override
                         public void onSuccess(FlowContext context) {
                             List<Server> servers = context.get(TopologyTasks.RUNNING_SERVERS);
-                            if (!servers.isEmpty() && servers.get(0).isStarted()) {
+                            boolean readPathsFromServer = !servers.isEmpty() && (servers.get(0)
+                                    .isStarted() || servers.get(0).needsReload() || servers.get(0)
+                                    .needsRestart());
+                            if (readPathsFromServer) {
                                 operation = new Operation.Builder(servers.get(0).getServerAddress(),
                                         READ_CHILDREN_NAMES_OPERATION
                                 ).param(CHILD_TYPE, ""path"").build();",2017-10-20T14:22:33Z,45
"@@ -21,6 +21,8 @@
 
 import javax.inject.Inject;
 
+import com.google.gwt.safehtml.shared.SafeHtml;
+import com.google.gwt.safehtml.shared.SafeHtmlUtils;
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.client.annotations.NameToken;
 import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
@@ -29,6 +31,8 @@
 import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.ballroom.form.Form.FinishRemove;
 import org.jboss.hal.ballroom.form.Form.FinishReset;
+import org.jboss.hal.ballroom.form.TextBoxItem;
+import org.jboss.hal.client.configuration.PathsAutoComplete;
 import org.jboss.hal.core.ComplexAttributeOperations;
 import org.jboss.hal.core.CrudOperations;
 import org.jboss.hal.core.finder.Finder;
@@ -39,6 +43,7 @@
 import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
 import org.jboss.hal.core.mbui.dialog.NameItem;
 import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.core.mbui.form.RequireAtLeastOneAttributeValidation;
 import org.jboss.hal.core.mvp.SupportsExpertMode;
 import org.jboss.hal.dmr.ModelDescriptionConstants;
 import org.jboss.hal.dmr.ModelNode;
@@ -58,6 +63,7 @@
 import static org.jboss.hal.client.configuration.subsystem.elytron.AddressTemplates.*;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
+import static org.jboss.hal.dmr.ModelNodeHelper.move;
 
 public class OtherSettingsPresenter extends MbuiPresenter<OtherSettingsPresenter.MyView, OtherSettingsPresenter.MyProxy>
         implements SupportsExpertMode {
@@ -182,6 +188,119 @@ void reload(String resource, Consumer<List<NamedNode>> callback) {
                 children -> callback.accept(asNamedNodes(children)));
     }
 
+    // -------------------------------------------- Credential Store
+
+    void addCredentialStore() {
+        Metadata metadata = metadataRegistry.lookup(CREDENTIAL_STORE_TEMPLATE);
+        Metadata crMetadata = metadata.forComplexAttribute(CREDENTIAL_REFERENCE, true);
+        crMetadata.copyComplexAttributeAttributes(asList(STORE, ALIAS, TYPE, CLEAR_TEXT), metadata);
+
+        String id = Ids.build(Ids.ELYTRON_CREDENTIAL_STORE, Ids.ADD);
+        NameItem nameItem = new NameItem();
+        ModelNodeForm<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata)
+                .addOnly()
+                .unboundFormItem(nameItem, 0)
+                .include(CREATE, RELATIVE_TO, STORE, ALIAS, TYPE, CLEAR_TEXT)
+                .unsorted()
+                .build();
+        form.getFormItem(RELATIVE_TO).registerSuggestHandler(new PathsAutoComplete());
+        form.addFormValidation(new RequireAtLeastOneAttributeValidation(asList(STORE, CLEAR_TEXT), form, resources));
+
+        new AddResourceDialog(resources.messages().addResourceTitle(Names.CREDENTIAL_STORE), form, (name, model) -> {
+            if (model != null) {
+                move(model, STORE, CREDENTIAL_REFERENCE + ""/"" + STORE);
+                move(model, ALIAS, CREDENTIAL_REFERENCE + ""/"" + ALIAS);
+                move(model, TYPE, CREDENTIAL_REFERENCE + ""/"" + TYPE);
+                move(model, CLEAR_TEXT, CREDENTIAL_REFERENCE + ""/"" + CLEAR_TEXT);
+            }
+            ResourceAddress address = CREDENTIAL_STORE_TEMPLATE.resolve(statementContext, nameItem.getValue());
+            crud.add(Names.CREDENTIAL_STORE, name, address, model, (n, a) ->
+                    reload(CREDENTIAL_STORE, nodes ->
+                            getView().updateResourceElement(CREDENTIAL_STORE, nodes)));
+        }).show();
+    }
+
+    // ------------------------------------------------------ key store
+
+    void addKeyStore() {
+        Metadata metadata = metadataRegistry.lookup(KEY_STORE_TEMPLATE);
+        Metadata crMetadata = metadata.forComplexAttribute(CREDENTIAL_REFERENCE, true);
+        crMetadata.copyComplexAttributeAttributes(asList(STORE, ALIAS, CLEAR_TEXT), metadata);
+
+        String id = Ids.build(Ids.ELYTRON_KEY_STORE, Ids.ADD);
+        NameItem nameItem = new NameItem();
+
+        // there is a special handling for ""type"" attribute, as this attribute name exists in key-store and
+        // credential-reference complex attribute. We must create an unbound form item for credential-reference-type
+        String crType = ""credential-reference-type"";
+        String crTypeLabel = new LabelBuilder().label(crType);
+        TextBoxItem crTypeItem = new TextBoxItem(crType, crTypeLabel);
+        SafeHtml crTypeItemHelp = SafeHtmlUtils.fromString(metadata.getDescription()
+                .get(ATTRIBUTES)
+                .get(CREDENTIAL_REFERENCE)
+                .get(VALUE_TYPE)
+                .get(TYPE)
+                .get(DESCRIPTION)
+                .asString());
+
+        ModelNodeForm<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata)
+                .addOnly()
+                .unboundFormItem(nameItem, 0)
+                .include(TYPE, PATH, RELATIVE_TO, STORE, ALIAS, CLEAR_TEXT)
+                .unboundFormItem(crTypeItem, 7, crTypeItemHelp)
+                .unsorted()
+                .build();
+        form.getFormItem(RELATIVE_TO).registerSuggestHandler(new PathsAutoComplete());
+        form.addFormValidation(new RequireAtLeastOneAttributeValidation(asList(STORE, CLEAR_TEXT), form, resources));
+
+        new AddResourceDialog(resources.messages().addResourceTitle(Names.KEY_STORE), form, (name, model) -> {
+            if (model != null) {
+                move(model, STORE, CREDENTIAL_REFERENCE + ""/"" + STORE);
+                move(model, ALIAS, CREDENTIAL_REFERENCE + ""/"" + ALIAS);
+                move(model, CLEAR_TEXT, CREDENTIAL_REFERENCE + ""/"" + CLEAR_TEXT);
+                if (!crTypeItem.isEmpty()) {
+                    model.get(CREDENTIAL_REFERENCE).get(TYPE).set(crTypeItem.getValue());
+                }
+            }
+            ResourceAddress address = KEY_STORE_TEMPLATE.resolve(statementContext, nameItem.getValue());
+            crud.add(Names.KEY_STORE, name, address, model, (n, a) ->
+                    reload(KEY_STORE, nodes ->
+                            getView().updateResourceElement(KEY_STORE, nodes)));
+        }).show();
+    }
+
+
+    // ------------------------------------------------------ key manager
+
+    void addKeyManager() {
+        Metadata metadata = metadataRegistry.lookup(KEY_MANAGER_TEMPLATE);
+        Metadata crMetadata = metadata.forComplexAttribute(CREDENTIAL_REFERENCE, true);
+        crMetadata.copyComplexAttributeAttributes(asList(STORE, ALIAS, TYPE, CLEAR_TEXT), metadata);
+
+        String id = Ids.build(Ids.ELYTRON_KEY_MANAGER, Ids.ADD);
+        NameItem nameItem = new NameItem();
+        ModelNodeForm<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata)
+                .addOnly()
+                .unboundFormItem(nameItem, 0)
+                .include(STORE, ALIAS, TYPE, CLEAR_TEXT)
+                .unsorted()
+                .build();
+        form.addFormValidation(new RequireAtLeastOneAttributeValidation(asList(STORE, CLEAR_TEXT), form, resources));
+
+        new AddResourceDialog(resources.messages().addResourceTitle(Names.KEY_MANAGER), form, (name, model) -> {
+            if (model != null) {
+                move(model, STORE, CREDENTIAL_REFERENCE + ""/"" + STORE);
+                move(model, ALIAS, CREDENTIAL_REFERENCE + ""/"" + ALIAS);
+                move(model, TYPE, CREDENTIAL_REFERENCE + ""/"" + TYPE);
+                move(model, CLEAR_TEXT, CREDENTIAL_REFERENCE + ""/"" + CLEAR_TEXT);
+            }
+            ResourceAddress address = KEY_MANAGER_TEMPLATE.resolve(statementContext, nameItem.getValue());
+            crud.add(Names.KEY_MANAGER, name, address, model, (n, a) ->
+                    reload(KEY_MANAGER, nodes ->
+                            getView().updateResourceElement(KEY_MANAGER, nodes)));
+        }).show();
+    }
+
     // ------------------------------------------------------ LDAP key store
 
     void reloadLdapKeyStores() {",2017-10-20T14:22:33Z,116
"@@ -23,6 +23,7 @@
 
 import org.jboss.hal.ballroom.LabelBuilder;
 import org.jboss.hal.ballroom.VerticalNavigation;
+import org.jboss.hal.client.configuration.PathsAutoComplete;
 import org.jboss.hal.core.mbui.MbuiContext;
 import org.jboss.hal.core.mbui.ResourceElement;
 import org.jboss.hal.core.mvp.HalViewImpl;
@@ -38,6 +39,7 @@
 import static org.jboss.hal.ballroom.LayoutBuilder.row;
 import static org.jboss.hal.client.configuration.subsystem.elytron.ElytronResource.*;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.CREDENTIAL_REFERENCE;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.RELATIVE_TO;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.SSL_CONTEXT;
 
 public class OtherSettingsView extends HalViewImpl implements OtherSettingsPresenter.MyView {
@@ -70,13 +72,14 @@ public class OtherSettingsView extends HalViewImpl implements OtherSettingsPrese
 
         // ===== store
 
-        addResourceElement(CREDENTIAL_STORE,
-                CREDENTIAL_STORE.resourceElementBuilder(mbuiContext,
-                        () -> presenter.reload(CREDENTIAL_STORE.resource,
-                                nodes -> updateResourceElement(CREDENTIAL_STORE.resource, nodes)))
-                        .addComplexObjectAttribute(CREDENTIAL_REFERENCE)
-                        .build(),
-                primaryIdStores,
+        ResourceElement credentialStoreElement = CREDENTIAL_STORE.resourceElementBuilder(mbuiContext,
+                () -> presenter.reload(CREDENTIAL_STORE.resource,
+                        nodes -> updateResourceElement(CREDENTIAL_STORE.resource, nodes)))
+                .onAdd(() -> presenter.addCredentialStore())
+                .addComplexObjectAttribute(CREDENTIAL_REFERENCE)
+                .build();
+        credentialStoreElement.getForm().getFormItem(RELATIVE_TO).registerSuggestHandler(new PathsAutoComplete());
+        addResourceElement(CREDENTIAL_STORE, credentialStoreElement, primaryIdStores,
                 Ids.build(CREDENTIAL_STORE.baseId, Ids.ENTRY),
                 labelBuilder.label(CREDENTIAL_STORE.resource));
 
@@ -88,12 +91,15 @@ public class OtherSettingsView extends HalViewImpl implements OtherSettingsPrese
                 Ids.build(FILTERING_KEY_STORE.baseId, Ids.ENTRY),
                 labelBuilder.label(FILTERING_KEY_STORE.resource));
 
+        ResourceElement keyStoreElement = KEY_STORE.resourceElementBuilder(mbuiContext,
+                () -> presenter.reload(KEY_STORE.resource,
+                        nodes -> updateResourceElement(KEY_STORE.resource, nodes)))
+                .onAdd(() -> presenter.addKeyStore())
+                .addComplexObjectAttribute(CREDENTIAL_REFERENCE)
+                .build();
+        keyStoreElement.getForm().getFormItem(RELATIVE_TO).registerSuggestHandler(new PathsAutoComplete());
         addResourceElement(KEY_STORE,
-                KEY_STORE.resourceElementBuilder(mbuiContext,
-                        () -> presenter.reload(KEY_STORE.resource,
-                                nodes -> updateResourceElement(KEY_STORE.resource, nodes)))
-                        .addComplexObjectAttribute(CREDENTIAL_REFERENCE)
-                        .build(),
+                keyStoreElement,
                 primaryIdStores,
                 Ids.build(KEY_STORE.baseId, Ids.ENTRY),
                 labelBuilder.label(KEY_STORE.resource));
@@ -127,6 +133,7 @@ public class OtherSettingsView extends HalViewImpl implements OtherSettingsPrese
                 KEY_MANAGER.resourceElementBuilder(mbuiContext,
                         () -> presenter.reload(KEY_MANAGER.resource,
                                 nodes -> updateResourceElement(KEY_MANAGER.resource, nodes)))
+                        .onAdd(() -> presenter.addKeyManager())
                         .addComplexObjectAttribute(CREDENTIAL_REFERENCE)
                         .build(),
                 primaryIdSsl,",2017-10-20T14:22:33Z,175
"@@ -47,6 +47,7 @@
 import org.jboss.hal.spi.AsyncColumn;
 import org.jboss.hal.spi.Requires;
 
+import static java.util.Arrays.asList;
 import static java.util.stream.Collectors.toList;
 import static org.jboss.gwt.elemento.core.Elements.span;
 import static org.jboss.hal.client.configuration.subsystem.resourceadapter.AddressTemplates.RESOURCE_ADAPTER_ADDRESS;
@@ -104,7 +105,7 @@ public ResourceAdapterColumn(final Finder finder,
                         if (Strings.isNullOrEmpty(archive) && Strings.isNullOrEmpty(module)) {
                             LabelBuilder labelBuilder = new LabelBuilder();
                             return ValidationResult.invalid(resources.messages()
-                                    .atLeastOneIsRequired(labelBuilder.label(ARCHIVE), labelBuilder.label(MODULE)));
+                                    .atLeastOneIsRequired(labelBuilder.enumeration(asList(ARCHIVE, MODULE), resources.constants().or())));
                         }
                         return ValidationResult.OK;
                     });",2017-10-20T14:22:33Z,360
"@@ -34,6 +34,7 @@
 import org.jboss.hal.core.finder.FinderPathFactory;
 import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
 import org.jboss.hal.core.mbui.form.ModelNodeForm;
+import org.jboss.hal.core.mbui.form.RequireAtLeastOneAttributeValidation;
 import org.jboss.hal.core.mvp.ApplicationFinderPresenter;
 import org.jboss.hal.core.mvp.HalView;
 import org.jboss.hal.core.mvp.HasPresenter;
@@ -182,6 +183,7 @@ void addSingleSignOn() {
                 .include(KEY_ALIAS, KEY_STORE, STORE, ALIAS, TYPE, CLEAR_TEXT)
                 .unsorted()
                 .build();
+        form.addFormValidation(new RequireAtLeastOneAttributeValidation<>(asList(STORE, CLEAR_TEXT), form, resources));
 
         AddResourceDialog dialog = new AddResourceDialog(resources.messages().addResourceTitle(Names.SINGLE_SIGN_ON),
                 form, (name, model) -> {",2017-10-20T14:22:33Z,302
"@@ -329,6 +329,9 @@ private String complexListPageId() {
         return Ids.build(builder.baseId, builder.clAttribute, Ids.PAGE);
     }
 
+    public Form<NamedNode> getForm() {
+        return form;
+    }
 
     public static class Builder {
 ",2017-10-20T14:22:33Z,14
"@@ -0,0 +1,80 @@
+/*
+ * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jboss.hal.core.mbui.form;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.jboss.hal.ballroom.LabelBuilder;
+import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.ballroom.form.FormItem;
+import org.jboss.hal.ballroom.form.FormValidation;
+import org.jboss.hal.ballroom.form.ValidationResult;
+import org.jboss.hal.dmr.ModelNode;
+import org.jboss.hal.resources.Resources;
+
+import static java.util.stream.Collectors.toList;
+
+public class RequireAtLeastOneAttributeValidation<T extends ModelNode> implements FormValidation<T> {
+
+    private final ModelNodeForm<T> form;
+    private List<String> requiresAtLeast;
+    private Resources resources;
+
+
+    public RequireAtLeastOneAttributeValidation(final List<String> requiresAtLeast, final ModelNodeForm<T> form,
+            final Resources resources) {
+        this.requiresAtLeast = requiresAtLeast;
+        this.resources = resources;
+        this.form = form;
+    }
+
+    @Override
+    public ValidationResult validate(final Form<T> form) {
+        LabelBuilder labelBuilder = new LabelBuilder();
+        List<String> nonEmptyItems = requiresAtLeast.stream()
+                .map(form::getFormItem)
+                .filter(formItem -> formItem != null && !this.form.isEmptyOrDefault(formItem))
+                .map(FormItem::getName)
+                .collect(toList());
+
+        if (nonEmptyItems.isEmpty()) {
+
+            // retrieve the label item, instead the attribute name, for the cases when a complex attribute is in use
+            List<String> attributesLabels = new ArrayList<>();
+            requiresAtLeast.forEach(requiredAttribute -> {
+                FormItem<Object> formItem = form.getFormItem(requiredAttribute);
+                attributesLabels.add(formItem.getLabel());
+            });
+
+            // show an error on each related form item
+            requiresAtLeast.forEach(requiredAttribute -> {
+                FormItem<Object> formItem = form.getFormItem(requiredAttribute);
+                if (this.form.isEmptyOrDefault(formItem)) {
+                    formItem.showError(resources.messages().exactlyOneAlternativeError(
+                            labelBuilder.enumeration(attributesLabels, resources.constants().or())));
+                }
+            });
+            // return overall result
+            return ValidationResult.invalid(
+                    resources.messages()
+                            .atLeastOneIsRequired(
+                                    labelBuilder.enumeration(attributesLabels, resources.constants().or())));
+        } else {
+            return ValidationResult.OK;
+        }
+    }
+}",2017-10-20T14:22:33Z,361
"@@ -179,6 +179,7 @@ public interface ModelDescriptionConstants {
     String CORE_SERVICE_PATCHING = ""core-service-patching"";
     String COUNT_MESSAGES = ""count-messages"";
     String CRAWLER_SESSION_MANAGEMENT = ""crawler-session-management"";
+    String CREATE = ""create"";
     String CREATE_TIME = ""create-time"";
     String CREDENTIAL_REFERENCE = ""credential-reference"";
     String CREDENTIAL_STORE = ""credential-store"";",2017-10-20T14:22:33Z,109
"@@ -54,7 +54,7 @@ public interface Messages extends com.google.gwt.i18n.client.Messages {
     String alternativesHelp(String alternatives);
     SafeHtml assignmentExcludeSuccess(String type, String name);
     SafeHtml assignmentIncludeSuccess(String type, String name);
-    String atLeastOneIsRequired(String attribute1, String attribute2);
+    String atLeastOneIsRequired(String attributes);
     String available(double value);
 
     String bootErrors();",2017-10-20T14:22:33Z,94
"@@ -77,6 +77,7 @@ public interface Names {
     String CORE_QUEUE = ""Core Queue"";
     String CRAWLER = ""Crawler"";
     String CREDENTIAL_REFERENCE = ""Credential Reference"";
+    String CREDENTIAL_STORE = ""Credential Store"";
     String CUSTOM = ""Custom"";
     String CUSTOM_ACTION_HANDLER = ""Custom ActionHandler"";
     String CUSTOM_FORMATTER = ""Custom Formatter"";
@@ -171,6 +172,9 @@ public interface Names {
     String JSP = ""JSP"";
     String JVM_ATTRIBUTES = ""JVM Attributes"";
 
+    String KEY_MANAGER = ""Key Manager"";
+    String KEY_STORE = ""Key Store"";
+
     String LARGE_MESSAGES_DIRECTORY = ""Large Messages Directory"";
     String LDAP_KEY_STORE = ""LDAP Key Store"";
     String LDAP_REALM = ""LDAP Realm"";",2017-10-20T14:22:33Z,112
"@@ -13,7 +13,7 @@ allThreadPoolsExist=Both long and short running thread pools are already assigne
 alternativesHelp=Mutually exclusive to {0}
 assignmentExcludeSuccess={0} {1} successfully excluded.
 assignmentIncludeSuccess={0} {1} successfully included.
-atLeastOneIsRequired=At least one of {0} or {1} is required.
+atLeastOneIsRequired=At least one of {0} is required.
 available={0}% available
 blacklist=Value must not be one of {0}.
 bootErrors=Errors occurred during boot.",2017-10-20T14:22:33Z,94
"@@ -50,7 +50,7 @@ public FinishBootstrap(EventBus eventBus,
     public void execute(final Control<FunctionContext> control) {
         // reset the uncaught exception handler setup in HalPreBootstrapper
         GWT.setUncaughtExceptionHandler(e -> {
-            logger.error(""{}: Uncaught exception: {}"", name(), e.getMessage()); //NON-NLS
+            logger.error(""Uncaught exception: {}"", e.getMessage()); //NON-NLS
             eventBus.fireEvent(new MessageEvent(Message.error(resources.constants().unknownError(), e.getMessage())));
         });
         control.proceed();",2016-01-08T22:04:36Z,362
"@@ -44,7 +44,7 @@
 
 import static org.jboss.hal.dmr.ModelDescriptionConstants.CHILD_TYPE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.READ_CHILDREN_RESOURCES_OPERATION;
-import static org.jboss.hal.dmr.ModelNodeHelper.withNames;
+import static org.jboss.hal.dmr.ModelNodeHelper.asNodesWithNames;
 import static org.jboss.hal.resources.Names.PROFILE;
 
 /**
@@ -110,7 +110,7 @@ private void loadDataSources() {
                 template.resolve(statementContext))
                 .param(CHILD_TYPE, ""data-source"")
                 .build();
-        dispatcher.execute(operation, result -> getView().update(withNames(result.asPropertyList())));
+        dispatcher.execute(operation, result -> getView().update(asNodesWithNames(result.asPropertyList())));
     }
 }
 ",2016-01-08T22:04:36Z,4
"@@ -24,8 +24,12 @@
 import com.gwtplatform.mvp.client.ViewImpl;
 import elemental.dom.Element;
 import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.ballroom.layout.LayoutBuilder;
+import org.jboss.hal.ballroom.tab.Tabs;
+import org.jboss.hal.ballroom.table.DataTable;
 import org.jboss.hal.ballroom.table.Options;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
 import org.jboss.hal.core.mbui.table.ModelNodeTable;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.meta.description.ResourceDescription;
@@ -34,19 +38,20 @@
 import org.jboss.hal.meta.security.SecurityFramework;
 
 import javax.inject.Inject;
+import java.util.ArrayList;
 import java.util.List;
 
 import static org.jboss.hal.ballroom.table.Api.RefreshMode.RESET;
-import static org.jboss.hal.resources.Names.ENABLED;
-import static org.jboss.hal.resources.Names.JNDI_NAME;
+import static org.jboss.hal.resources.Ids.*;
+import static org.jboss.hal.resources.Names.*;
 
 /**
  * @author Harald Pehl
  */
-@SuppressWarnings(""HardCodedStringLiteral"")
 public class DataSourceView extends ViewImpl implements DataSourcePresenter.MyView {
 
-    private final ModelNodeTable<ModelNode> dataSourcesTable;
+    private final DataTable<ModelNode> table;
+    private final List<Form<ModelNode>> forms;
     private DataSourcePresenter presenter;
 
     @Inject
@@ -56,18 +61,35 @@ public DataSourceView(ResourceDescriptions descriptions,
         ResourceDescription description = descriptions.lookup(DataSourcePresenter.ROOT_TEMPLATE);
         SecurityContext securityContext = securityFramework.lookup(DataSourcePresenter.ROOT_TEMPLATE);
 
+        Element info = new Elements.Builder().p().innerText(description.getDescription()).end().build();
         Options<ModelNode> options = new ModelNodeTable.Builder<>(description)
+                .column(NAME_KEY, NAME_LABEL, (cell, type, row, meta) -> row.get(NAME_KEY).asString())
                 .columns(JNDI_NAME, ENABLED)
                 .build();
-        dataSourcesTable = new ModelNodeTable<>(""data-sources-table"", securityContext, options);
+        table = new ModelNodeTable<>(DATA_SOURCE_TABLE, securityContext, options);
+
+        forms = new ArrayList<>();
+        Tabs tabs = new Tabs();
+        ModelNodeForm<ModelNode> currentForm;
+
+        currentForm = new ModelNodeForm.Builder<>(DATA_SOURCE_ATTRIBUTES_FORM, securityContext, description)
+                .include(JNDI_NAME, ENABLED, ""statistics-enabled"", ""driver-name"")
+                .build();
+        forms.add(currentForm);
+        tabs.add(DATA_SOURCE_ATTRIBUTES_TAB, ATTRIBUTES, currentForm.asElement());
+
+        currentForm = new ModelNodeForm.Builder<>(DATA_SOURCE_CONNECTION_FORM, securityContext, description)
+                .include(""connection-url"", ""new-connection-sql"", ""transaction-isolation"", ""jta"", ""use-ccm"")
+                .build();
+        forms.add(currentForm);
+        tabs.add(DATA_SOURCE_CONNECTION_TAB, ""Connection"", currentForm.asElement());
 
-        Element info = new Elements.Builder().p().innerText(description.getDescription()).end().build();
         // @formatter:off
         Element element = new LayoutBuilder()
             .startRow()
                 .header(""DataSources"")
                 .add(info)
-                .add(dataSourcesTable.asElement())
+                .add(table.asElement(), tabs.asElement())
             .endRow()
         .build();
         // @formatter:on
@@ -77,7 +99,8 @@ public DataSourceView(ResourceDescriptions descriptions,
 
     @Override
     public void attach() {
-        dataSourcesTable.attach();
+        table.attach();
+        table.api().bindForms(forms);
     }
 
     @Override
@@ -87,6 +110,6 @@ public void setPresenter(final DataSourcePresenter presenter) {
 
     @Override
     public void update(final List<ModelNode> datasources) {
-        dataSourcesTable.api().clear().add(datasources).refresh(RESET);
+        table.api().clear().add(datasources).refresh(RESET);
     }
 }",2016-01-08T22:04:36Z,29
"@@ -1,3 +1,7 @@
+.form-section {
+  margin-top: 20px;
+}
+
 .form {
 
   &.readonly {",2016-01-08T22:04:36Z,363
"@@ -50,11 +50,11 @@ public void execute(final Form.Operation operation) {
                 transitionTo(EDITING);
                 break;
 
-            case CANCEL:
+            case SAVE:
                 assertState(EDITING);
                 break;
 
-            case SAVE:
+            case CANCEL:
                 assertState(EDITING);
                 break;
 ",2016-01-08T22:04:36Z,89
"@@ -30,9 +30,11 @@ public interface DataMapping<T> {
 
     void newModel(T model, Form<T> form);
 
-    void resetModel(T model, Form<T> form);
-
     void populateFormItems(T model, Form<T> form);
 
+    void clearFormItems(Form<T> form);
+
+    void resetModel(T model, Form<T> form);
+
     void persistModel(T model, Form<T> form);
 }",2016-01-08T22:04:36Z,364
"@@ -79,8 +79,7 @@ public class DefaultForm<T> extends LazyElement implements Form<T>, SecurityCont
     private T model;
     private SecurityContext securityContext;
 
-    private Element buttons;
-    private FormLinks formLinks;
+    private FormLinks<T> formLinks;
     private DivElement errorPanel;
     private SpanElement errorMessage;
     private UListElement errorMessages;
@@ -136,8 +135,9 @@ protected Element createElement() {
 
         Element section = Browser.getDocument().createElement(""section""); //NON-NLS
         section.setId(id);
+        section.getClassList().add(formSection);
 
-        formLinks = new FormLinks(id, stateMachine, helpTexts,
+        formLinks = new FormLinks<>(id, stateMachine, helpTexts,
                 event -> edit(getModel()),
                 event -> reset());
         section.appendChild(formLinks.asElement());
@@ -228,7 +228,7 @@ private Element editPanel() {
         }
 
         // @formatter:off
-        buttons = new Elements.Builder()
+        Element buttons = new Elements.Builder()
             .div().css(formGroup, formButtons)
                 .div().css(offset(labelColumns), column(inputColumns))
                     .div().css(pullRight)
@@ -251,6 +251,25 @@ private Element editPanel() {
 
     // ------------------------------------------------------ form operations
 
+    /**
+     * Executes the {@link org.jboss.hal.ballroom.form.Form.Operation#ADD} operation and calls {@link
+     * DataMapping#newModel(Object, Form)}.
+     *
+     * @param model the transient model
+     */
+    @Override
+    public final void add(final T model) {
+        if (model == null) {
+            throw new NullPointerException(MODEL_MUST_NOT_BE_NULL + formId() + "".add(T)"");
+        }
+        if (!initialized()) {
+            throw new IllegalStateException(NOT_INITIALIZED);
+        }
+        this.model = model;
+        stateExec(ADD); // switch state before data mapping!
+        dataMapping.newModel(model, this);
+    }
+
     /**
      * Executes the {@link org.jboss.hal.ballroom.form.Form.Operation#VIEW} operation and calls {@link
      * DataMapping#populateFormItems(Object, Form)}.
@@ -271,22 +290,36 @@ public final void view(final T model) {
     }
 
     /**
-     * Executes the {@link org.jboss.hal.ballroom.form.Form.Operation#ADD} operation and calls {@link
-     * DataMapping#newModel(Object, Form)}.
-     *
-     * @param model the transient model
+     * Removes the model reference, executes the {@link org.jboss.hal.ballroom.form.Form.Operation#CLEAR} operation and
+     * calls {@link DataMapping#clearFormItems(Form)}.
      */
     @Override
-    public final void add(final T model) {
-        if (model == null) {
-            throw new NullPointerException(MODEL_MUST_NOT_BE_NULL + formId() + "".add(T)"");
-        }
+    public void clear() {
+        this.model = null;
+        stateExec(CLEAR);
+        dataMapping.clearFormItems(this);
+    }
+
+    /**
+     * Executes the {@link org.jboss.hal.ballroom.form.Form.Operation#RESET} operation, calls {@link
+     * DataMapping#resetModel(Object, Form)} and finally calls the registered {@linkplain
+     * org.jboss.hal.ballroom.form.Form.ResetCallback reset callback} (if any).
+     */
+    @Override
+    public final void reset() {
         if (!initialized()) {
             throw new IllegalStateException(NOT_INITIALIZED);
         }
-        this.model = model;
-        stateExec(ADD); // switch state before data mapping!
-        dataMapping.newModel(model, this);
+        stateExec(RESET); // switch state before data mapping!
+        dataMapping.resetModel(model, this);
+        if (resetCallback != null) {
+            resetCallback.onReset(this);
+        }
+    }
+
+    @Override
+    public void setResetCallback(final ResetCallback<T> resetCallback) {
+        this.resetCallback = resetCallback;
     }
 
     /**
@@ -363,28 +396,6 @@ public void setCancelCallback(final CancelCallback<T> cancelCallback) {
         this.cancelCallback = cancelCallback;
     }
 
-    /**
-     * Executes the {@link org.jboss.hal.ballroom.form.Form.Operation#RESET} operation, calls {@link
-     * DataMapping#resetModel(Object, Form)} and finally calls the registered {@linkplain
-     * org.jboss.hal.ballroom.form.Form.ResetCallback reset callback} (if any).
-     */
-    @Override
-    public final void reset() {
-        if (!initialized()) {
-            throw new IllegalStateException(NOT_INITIALIZED);
-        }
-        stateExec(RESET); // switch state before data mapping!
-        dataMapping.resetModel(model, this);
-        if (resetCallback != null) {
-            resetCallback.onReset(this);
-        }
-    }
-
-    @Override
-    public void setResetCallback(final ResetCallback<T> resetCallback) {
-        this.resetCallback = resetCallback;
-    }
-
     protected String formId() {
         return ""form("" + id + "")""; //NON-NLS
     }
@@ -438,7 +449,7 @@ private void flip(State state) {
                 break;
         }
 
-        formLinks.switchTo(state, securityContext);
+        formLinks.switchTo(state, model, securityContext);
         for (Element panel : panels.values()) {
             Elements.setVisible(panel, false);
         }
@@ -458,7 +469,7 @@ private void applySecurity() {
         if (stateMachine.current() == EDITING && !securityContext.isWritable()) {
             stateExec(CANCEL);
         }
-        formLinks.switchTo(stateMachine.current(), securityContext);
+        formLinks.switchTo(stateMachine.current(), model, securityContext);
         for (Map.Entry<String, FormItem> entry : formItems.entrySet()) {
             entry.getValue().setRestricted(!securityContext.isWritable(entry.getKey()));
         }",2016-01-08T22:04:36Z,64
"@@ -37,12 +37,19 @@ public void newModel(final T model, final Form<T> form) {
     }
 
     @Override
-    public void resetModel(final T model, Form<T> form) {
+    public void populateFormItems(final T model, final Form<T> form) {
         // empty
     }
 
     @Override
-    public void populateFormItems(final T model, final Form<T> form) {
+    public void clearFormItems(final Form<T> form) {
+        for (FormItem formItem : form.getFormItems()) {
+            formItem.clearValue();
+        }
+    }
+
+    @Override
+    public void resetModel(final T model, Form<T> form) {
         // empty
     }
 ",2016-01-08T22:04:36Z,365
"@@ -32,25 +32,27 @@
 /**
  * A state machine for existing models. Supports all {@linkplain Operation operations} except {@link Operation#ADD}.
  * <pre>
- *                             (O)
- *                              |
- *             +--------+       |
- *             |        |     view()
- *             |        |       |
- *          reset()     |       |
- *             |     +--v-------v--+
- *             |     |             |
- *             +-----+  READONLY   <-----+
- *                   |             |     |
- *                   +--+-------^--+     |
- *                      |       |        |
- *                   edit()  cancel()  save()
- *                      |       |        |
- *                   +--v-------+--+     |
- *                   |             |     |
- *  (O)----edit()---->   EDITING   +-----+
- *                   |             |
- *                   +-------------+
+ *            +--------+      (0)
+ *            |        |       |
+ *         clear()     |     view()
+ *         reset()     |       |
+ *            |     +--v-------v--+
+ *            |     |             |
+ *            +-----+  READONLY   <-----+-------+
+ *                  |             |     |       |
+ *                  +--+-------^--+     |       |
+ *                     |       |        |       |
+ *                  edit()  cancel()  save()    |
+ *                     |       |        |       |
+ *                  +--v-------+--+     |       |
+ *                  |             |     |       |
+ *   (0)---edit()--->   EDITING   +-----+     clear()
+ *                  |             |             |
+ *                  +------+------+             |
+ *                         |                    |
+ *                       clear()                |
+ *                         |                    |
+ *                         +--------------------+
  * </pre>
  * (0) Initial states
  *
@@ -59,23 +61,33 @@
 public class ExistingModelStateMachine extends AbstractStateMachine implements StateMachine {
 
     public ExistingModelStateMachine() {
-        super(EnumSet.of(CANCEL, EDIT, RESET, SAVE, VIEW));
+        super(EnumSet.of(VIEW, CLEAR, RESET, EDIT, SAVE, CANCEL));
         this.current = null;
     }
 
     @Override
     public void execute(final Operation operation) {
         switch (operation) {
 
+            case ADD:
+                unsupported(ADD);
+                break;
+
             case VIEW:
                 if (current != null) {
                     assertState(READONLY);
                 }
                 transitionTo(READONLY);
                 break;
 
-            case ADD:
-                unsupported(ADD);
+            case CLEAR:
+                transitionTo(READONLY);
+                break;
+
+            case RESET:
+                assertState(READONLY);
+                transitionTo(READONLY);
+                break;
 
             case EDIT:
                 if (current != null) {
@@ -84,18 +96,13 @@ public void execute(final Operation operation) {
                 transitionTo(EDITING);
                 break;
 
-            case CANCEL:
-                assertState(EDITING);
-                transitionTo(READONLY);
-                break;
-
             case SAVE:
                 assertState(EDITING);
                 transitionTo(READONLY);
                 break;
 
-            case RESET:
-                assertState(READONLY);
+            case CANCEL:
+                assertState(EDITING);
                 transitionTo(READONLY);
                 break;
 ",2016-01-08T22:04:36Z,34
"@@ -40,21 +40,21 @@ enum State {
 
 
     enum Operation {
-        VIEW, ADD, EDIT, CANCEL, SAVE, RESET
+        ADD, VIEW, CLEAR, RESET, EDIT, SAVE, CANCEL
     }
 
 
     @FunctionalInterface
-    interface SaveCallback<T> {
+    interface ResetCallback<T> {
 
-        void onSave(Form<T> form, Map<String, Object> changedValues);
+        void onReset(Form<T> form);
     }
 
 
     @FunctionalInterface
-    interface ResetCallback<T> {
+    interface SaveCallback<T> {
 
-        void onReset(Form<T> form);
+        void onSave(Form<T> form, Map<String, Object> changedValues);
     }
 
 
@@ -65,6 +65,13 @@ interface CancelCallback<T> {
     }
 
 
+    /**
+     * Takes a new transient model and enters the editing state.
+     *
+     * @param model the transient model
+     */
+    void add(T model);
+
     /**
      * Takes the specified model and updates the read-only state with the values from the model.
      *
@@ -73,11 +80,16 @@ interface CancelCallback<T> {
     void view(T model);
 
     /**
-     * Takes a new transient model and enters the editing state.
-     *
-     * @param model the transient model
+     * Clears this form by removing the model reference and by clearing all form fields.
      */
-    void add(T model);
+    void clear();
+
+    /**
+     * Resets the model.
+     */
+    void reset();
+
+    void setResetCallback(ResetCallback<T> resetCallback);
 
     /**
      * Takes the specified model and populates the editing state with the values from the model.
@@ -101,13 +113,6 @@ interface CancelCallback<T> {
 
     void setCancelCallback(CancelCallback<T> cancelCallback);
 
-    /**
-     * Resets the model.
-     */
-    void reset();
-
-    void setResetCallback(ResetCallback<T> resetCallback);
-
     /**
      * @return an unique identifier for this form.
      */",2016-01-08T22:04:36Z,323
"@@ -43,7 +43,7 @@
 /**
  * @author Harald Pehl
  */
-class FormLinks implements IsElement {
+class FormLinks<T> implements IsElement {
 
     private final static Constants CONSTANTS = GWT.create(Constants.class);
 
@@ -57,7 +57,7 @@ class FormLinks implements IsElement {
 
     FormLinks(final String formId,
             final StateMachine stateMachine,
-            final LinkedHashMap<String, String>helpTexts,
+            final LinkedHashMap<String, String> helpTexts,
             final EventListener onEdit,
             final EventListener onReset) {
 
@@ -150,11 +150,13 @@ public Element asElement() {
         return root;
     }
 
-    void switchTo(State state, SecurityContext securityContext) {
+    void switchTo(State state, T model, SecurityContext securityContext) {
         switch (state) {
             case READONLY:
-                Elements.setVisible(editLink, stateMachine.supports(EDIT) && securityContext.isWritable());
-                Elements.setVisible(resetLink, stateMachine.supports(RESET) && securityContext.isWritable());
+                Elements.setVisible(editLink,
+                        model != null && stateMachine.supports(EDIT) && securityContext.isWritable());
+                Elements.setVisible(resetLink,
+                        model != null && stateMachine.supports(RESET) && securityContext.isWritable());
                 Elements.setVisible(helpLink, !helpTexts.isEmpty());
                 break;
 ",2016-01-08T22:04:36Z,180
"@@ -25,6 +25,7 @@
 import jsinterop.annotations.JsOverlay;
 import jsinterop.annotations.JsProperty;
 import jsinterop.annotations.JsType;
+import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.resources.Names;
 
 import java.util.Collections;
@@ -269,4 +270,41 @@ public final List<T> selectedRows() {
         }
         return asList(selection);
     }
-}
+
+    @JsOverlay
+    public final Api<T> bindForm(Form<T> form) {
+        // don't replace this with a lambda - it won't run in super dev mode
+        //noinspection Convert2Lambda
+        return onSelectionChange(new SelectionChangeHandler<T>() {
+            @Override
+            public void onSelectionChanged(final Api<T> api) {
+                if (api.hasSelection()) {
+                    form.view(api.selectedRow());
+                } else {
+                    form.clear();
+                }
+            }
+        });
+    }
+
+    @JsOverlay
+    public final Api<T> bindForms(final Iterable<Form<T>> forms) {
+        // don't replace this with a lambda - it won't run in super dev mode
+        //noinspection Convert2Lambda
+        return onSelectionChange(new SelectionChangeHandler<T>() {
+            @Override
+            public void onSelectionChanged(final Api<T> api) {
+                if (api.hasSelection()) {
+                    T selectedRow = api.selectedRow();
+                    for (Form<T> form : forms) {
+                        form.view(selectedRow);
+                    }
+                } else {
+                    for (Form<T> form : forms) {
+                        form.clear();
+                    }
+                }
+            }
+        });
+    }
+}
\ No newline at end of file",2016-01-08T22:04:36Z,324
"@@ -38,6 +38,7 @@
 import org.jboss.hal.dmr.Property;
 import org.jboss.hal.meta.description.ResourceDescription;
 import org.jboss.hal.meta.security.SecurityContext;
+import org.jetbrains.annotations.NonNls;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -79,7 +80,7 @@ public static class Builder<T extends ModelNode> {
 
         // ------------------------------------------------------ configure required and optional settings
 
-        public Builder(final String id, final SecurityContext securityContext,
+        public Builder(@NonNls final String id, final SecurityContext securityContext,
                 final ResourceDescription resourceDescription) {
             this.id = id;
             this.securityContext = securityContext;",2016-01-08T22:04:36Z,60
"@@ -30,6 +30,7 @@
 import org.jboss.hal.dmr.Property;
 import org.jboss.hal.meta.description.ResourceDescription;
 import org.jboss.hal.meta.security.SecurityContext;
+import org.jetbrains.annotations.NonNls;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -98,7 +99,7 @@ protected void validate() {
 
     private static final Logger logger = LoggerFactory.getLogger(ModelNodeTable.class);
 
-    public ModelNodeTable(final String id, final SecurityContext securityContext, final Options<T> options) {
+    public ModelNodeTable(@NonNls final String id, final SecurityContext securityContext, final Options<T> options) {
         super(id, securityContext, options);
     }
 }",2016-01-08T22:04:36Z,108
"@@ -86,7 +86,7 @@ public static <T> T getOrDefault(final ModelNode modelNode, Provider<T> provider
      * Turns a list of properties into a list of model nodes which contain a {@link
      * org.jboss.hal.resources.Names#NAME_KEY} key with the properties name.
      */
-    public static List<ModelNode> withNames(List<Property> properties) {
+    public static List<ModelNode> asNodesWithNames(List<Property> properties) {
         List<ModelNode> nodes = new ArrayList<>(properties.size());
         for (Property property : properties) {
             property.getValue().get(NAME_KEY).set(property.getName());",2016-01-08T22:04:36Z,110
"@@ -65,6 +65,7 @@ public interface CSS {
     String formHorizontal = ""form-horizontal"";
     String formLinkLabel = ""form-link-label"";
     String formLinks = ""form-links"";
+    String formSection = ""form-section"";
     String hasError = ""has-error"";
     String hasFeedback = ""has-feedback"";
     String helpBlock = ""help-block"";",2016-01-08T22:04:36Z,159
"@@ -23,6 +23,12 @@
  */
 public interface Ids {
 
+    String DATA_SOURCE_ATTRIBUTES_FORM = ""data-source-attributes-form"";
+    String DATA_SOURCE_ATTRIBUTES_TAB = ""data-source-attributes-tab"";
+    String DATA_SOURCE_CONNECTION_FORM = ""data-source-connection-form"";
+    String DATA_SOURCE_CONNECTION_TAB = ""data-source-connection-tab"";
+    String DATA_SOURCE_TABLE = ""data-source-table"";
+
     String ENDPOINT_ADD = ""endpoint-add"";
     String ENDPOINT_PING = ""endpoint-ping"";
     String ENDPOINT_SELECT = ""endpoint-select"";",2016-01-08T22:04:36Z,111
"@@ -28,6 +28,7 @@
  */
 public interface Names {
 
+    String ATTRIBUTES = ""Attributes"";
     String CONFIGURATION = ""Configuration"";
     String CONTROLS = ""controls"";
     String DEPLOYMENTS = ""Deployments"";
@@ -42,6 +43,7 @@ public interface Names {
     String LABEL = ""label"";
     String MANAGEMENT_CONSOLE = ""Management Console"";
     String NAME_KEY = ""name"";
+    String NAME_LABEL = ""Name"";
     String NOT_SUPPORTED = ""not supported"";
     String NYI = ""not yet implemented"";
     String OBJECT = ""Object"";",2016-01-08T22:04:36Z,112
"@@ -29,6 +29,7 @@
 import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Requires;
 
 /**
  * @author Harald Pehl
@@ -39,6 +40,11 @@ public class AccessControlPresenter extends
     // @formatter:off
     @ProxyStandard
     @NameToken(NameTokens.ACCESS_CONTROL)
+    @Requires(value = {
+        ""/core-service=management/access=authorization/role-mapping=*"",
+        ""/core-service=management/access=authorization/host-scoped-role=*"",
+        ""/core-service=management/access=authorization/server-group-scoped-role=*""},
+        recursive = false)
     public interface MyProxy extends ProxyPlace<AccessControlPresenter> {}
 
     public interface MyView extends FinderView {}",2016-08-07T19:17:15Z,366
"@@ -41,6 +41,7 @@
 
 import static java.util.Collections.singletonList;
 import static java.util.Comparator.comparing;
+import static java.util.stream.Collectors.toList;
 import static org.jboss.hal.resources.CSS.fontAwesome;
 
 /**
@@ -154,37 +155,25 @@ public List<ItemAction<Assignment>> actions() {
             callback.onSuccess(assignments);
         });
 
-        // Setup column actions to include *all* roles.
-        // Already included roles will be filtered out later in the ItemsProvider
-        Element include = new Elements.Builder().span()
-                .css(fontAwesome(""plus""))
-                .title(resources.constants().includeRole())
-                .data(UIConstants.TOGGLE, UIConstants.TOOLTIP)
-                .data(UIConstants.PLACEMENT, ""bottom"")
-                .end().build();
-        List<ColumnAction<Assignment>> includeActions = new ArrayList<>();
-        StreamSupport.stream(accessControl.roles().spliterator(), false)
-                .sorted(comparing(Role::getType)
-                        .thenComparing(comparing(Role::getName)))
-                .forEach(role -> includeActions.add(new ColumnAction<Assignment>(includeId(role), role.getName(),
-                        column -> Browser.getWindow().alert(Names.NYI))));
-        addColumnActions(Ids.ASSIGNMENT_INCLUDE, include, includeActions);
-
-        // Setup column actions to exclude *all* roles.
-        // Already excluded roles will be filtered out later in the ItemsProvider
-        Element exclude = new Elements.Builder().span()
-                .css(fontAwesome(""minus""))
-                .title(resources.constants().excludeRole())
-                .data(UIConstants.TOGGLE, UIConstants.TOOLTIP)
-                .data(UIConstants.PLACEMENT, ""bottom"")
-                .end().build();
-        List<ColumnAction<Assignment>> excludeActions = new ArrayList<>();
-        StreamSupport.stream(accessControl.roles().spliterator(), false)
-                .sorted(comparing(Role::getType)
-                        .thenComparing(comparing(Role::getName)))
-                .forEach(role -> excludeActions.add(new ColumnAction<Assignment>(excludeId(role), role.getName(),
-                        column -> Browser.getWindow().alert(Names.NYI))));
-        addColumnActions(Ids.ASSIGNMENT_EXCLUDE, exclude, excludeActions);
+        // Setup column actions to include / exclude *all* roles.
+        // Already included / excluded roles will be filtered out later in the ItemsProvider
+        List<Role> roles = new ArrayList<>();
+        accessControl.roles().standardRoles().stream().sorted(comparing(Role::getName)).forEach(roles::add);
+        accessControl.roles().scopedRoles().stream().sorted(comparing(Role::getName)).forEach(roles::add);
+
+        List<ColumnAction<Assignment>> includeActions = roles.stream()
+                .map(role -> new ColumnAction<Assignment>(includeId(role), role.getName(),
+                        column -> Browser.getWindow().alert(Names.NYI)))
+                .collect(toList());
+        addColumnActions(Ids.ASSIGNMENT_INCLUDE, fontAwesome(""plus""), resources.constants().includeRole(),
+                includeActions);
+
+        List<ColumnAction<Assignment>> excludeActions = roles.stream()
+                .map(role -> new ColumnAction<Assignment>(excludeId(role), role.getName(),
+                        column -> Browser.getWindow().alert(Names.NYI)))
+                .collect(toList());
+        addColumnActions(Ids.ASSIGNMENT_EXCLUDE, fontAwesome(""minus""), resources.constants().excludeRole(),
+                excludeActions);
     }
 
     private String includeId(Role role) {",2016-08-07T19:17:15Z,6
"@@ -41,6 +41,7 @@
 
 import static java.util.Collections.singletonList;
 import static java.util.Comparator.comparing;
+import static java.util.stream.Collectors.toList;
 import static org.jboss.hal.resources.CSS.fontAwesome;
 
 /**
@@ -153,39 +154,25 @@ public List<ItemAction<Assignment>> actions() {
             callback.onSuccess(assignments);
         });
 
-        // Setup column actions to include *all* principals.
-        // Already included principals will be filtered out later in the ItemsProvider
-        Element include = new Elements.Builder().span()
-                .css(fontAwesome(""plus""))
-                .title(resources.constants().includeUserGroup())
-                .data(UIConstants.TOGGLE, UIConstants.TOOLTIP)
-                .data(UIConstants.PLACEMENT, ""bottom"")
-                .end().build();
-        List<ColumnAction<Assignment>> includeActions = new ArrayList<>();
-        StreamSupport.stream(accessControl.principals().spliterator(), false)
-                .sorted(comparing(Principal::getType)
-                        .thenComparing(comparing(Principal::getName)))
-                .forEach(principal -> includeActions.add(new ColumnAction<>(
-                        includeId(principal), typeAndName(principal),
-                        column -> Browser.getWindow().alert(Names.NYI))));
-        addColumnActions(Ids.MEMBERSHIP_INCLUDE, include, includeActions);
-
-        // Setup column actions to exclude *all* principals.
-        // Already excluded principals will be filtered out later in the ItemsProvider
-        Element exclude = new Elements.Builder().span()
-                .css(fontAwesome(""minus""))
-                .title(resources.constants().excludeUserGroup())
-                .data(UIConstants.TOGGLE, UIConstants.TOOLTIP)
-                .data(UIConstants.PLACEMENT, ""bottom"")
-                .end().build();
-        List<ColumnAction<Assignment>> excludeActions = new ArrayList<>();
-        StreamSupport.stream(accessControl.principals().spliterator(), false)
-                .sorted(comparing(Principal::getType)
-                        .thenComparing(comparing(Principal::getName)))
-                .forEach(principal -> excludeActions.add(new ColumnAction<>(
-                        excludeId(principal), typeAndName(principal),
-                        column -> Browser.getWindow().alert(Names.NYI))));
-        addColumnActions(Ids.MEMBERSHIP_EXCLUDE, exclude, excludeActions);
+        // Setup column actions to include / exclude *all* principals.
+        // Already included / excluded principals will be filtered out later in the ItemsProvider
+        List<Principal> principals = new ArrayList<>();
+        accessControl.principals().users().stream().sorted(comparing(Principal::getName)).forEach(principals::add);
+        accessControl.principals().groups().stream().sorted(comparing(Principal::getName)).forEach(principals::add);
+
+        List<ColumnAction<Assignment>> includeActions = principals.stream()
+                .map(principal -> new ColumnAction<Assignment>(includeId(principal), typeAndName(principal),
+                        column -> Browser.getWindow().alert(Names.NYI)))
+                .collect(toList());
+        addColumnActions(Ids.MEMBERSHIP_INCLUDE, fontAwesome(""plus""), resources.constants().includeUserGroup(),
+                includeActions);
+
+        List<ColumnAction<Assignment>> excludeActions = principals.stream()
+                .map(principal -> new ColumnAction<Assignment>(excludeId(principal), typeAndName(principal),
+                        column -> Browser.getWindow().alert(Names.NYI)))
+                .collect(toList());
+        addColumnActions(Ids.MEMBERSHIP_EXCLUDE, fontAwesome(""minus""), resources.constants().excludeUserGroup(),
+                excludeActions);
     }
 
     private String includeId(Principal principal) {",2016-08-07T19:17:15Z,367
"@@ -19,21 +19,35 @@
 import java.util.List;
 import javax.inject.Inject;
 
+import com.google.web.bindery.event.shared.EventBus;
 import elemental.client.Browser;
 import elemental.dom.Element;
 import org.jboss.hal.config.Environment;
+import org.jboss.hal.core.finder.ColumnAction;
 import org.jboss.hal.core.finder.ColumnActionFactory;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderColumn;
 import org.jboss.hal.core.finder.ItemAction;
 import org.jboss.hal.core.finder.ItemActionFactory;
 import org.jboss.hal.core.finder.ItemDisplay;
+import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.dmr.model.Operation;
+import org.jboss.hal.dmr.model.ResourceAddress;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.MetadataRegistry;
+import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
 import org.jboss.hal.spi.AsyncColumn;
+import org.jboss.hal.spi.Message;
+import org.jboss.hal.spi.MessageEvent;
 
 import static java.util.Comparator.comparing;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.ADD;
+import static org.jboss.hal.resources.CSS.pfIcon;
 
 /**
  * @author Harald Pehl
@@ -58,6 +72,10 @@ static List<String> filterData(Role role) {
     public RoleColumn(final Finder finder,
             final ColumnActionFactory columnActionFactory,
             final ItemActionFactory itemActionFactory,
+            final MetadataRegistry metadataRegistry,
+            final StatementContext statementContext,
+            final Dispatcher dispatcher,
+            final EventBus eventBus,
             final AccessControl accessControl,
             final AccessControlTokens tokens,
             final Environment environment,
@@ -126,8 +144,50 @@ public String nextColumn() {
         );
 
         if (!environment.isStandalone()) {
-            addColumnAction(columnActionFactory.add(Ids.ROLE_ADD, resources.constants().role(),
-                    column -> Browser.getWindow().alert(Names.NYI)));
+            // add host scoped role (hsr)
+            AddressTemplate hsrTemplate = AddressTemplate
+                    .of(""/core-service=management/access=authorization/host-scoped-role=*"");
+            Metadata hsrMeta = metadataRegistry.lookup(hsrTemplate);
+            AddResourceDialog hsrDialog = new AddResourceDialog(Ids.ROLE_HOST_SCOPED_FORM,
+                    resources.messages().addResourceTitle(resources.constants().hostScopedRole()),
+                    hsrMeta, (name, model) -> {
+                ResourceAddress address = hsrTemplate.resolve(statementContext, name);
+                Operation operation = new Operation.Builder(ADD, address)
+                        .payload(model)
+                        .build();
+                dispatcher.execute(operation, result -> {
+                    MessageEvent.fire(eventBus, Message.success(
+                            resources.messages().addResourceSuccess(resources.constants().hostScopedRole(), name)));
+                    refresh(name);
+                });
+            });
+            ColumnAction<Role> hsrAction = new ColumnAction<>(Ids.ROLE_HOST_SCOPED_ADD,
+                    resources.constants().hostScopedRole(), column -> hsrDialog.show());
+
+            // add server group scoped role (sgsr)
+            AddressTemplate sgsrTemplate = AddressTemplate
+                    .of(""/core-service=management/access=authorization/server-group-scoped-role=*"");
+            Metadata sgsrMeta = metadataRegistry.lookup(sgsrTemplate);
+            AddResourceDialog sgsrDialog = new AddResourceDialog(Ids.ROLE_SERVER_GROUP_SCOPED_FORM,
+                    resources.messages().addResourceTitle(resources.constants().hostScopedRole()),
+                    sgsrMeta, (name, model) -> {
+                ResourceAddress address = sgsrTemplate.resolve(statementContext, name);
+                Operation operation = new Operation.Builder(ADD, address)
+                        .payload(model)
+                        .build();
+                dispatcher.execute(operation, result -> {
+                    MessageEvent.fire(eventBus, Message.success(resources.messages()
+                            .addResourceSuccess(resources.constants().serverGroupScopedRole(), name)));
+                    refresh(name);
+                });
+            });
+            ColumnAction<Role> sgsrAction = new ColumnAction<>(Ids.ROLE_SERVER_GROUP_SCOPED_ADD,
+                    resources.constants().serverGroupScopedRole(), column -> sgsrDialog.show());
+
+            List<ColumnAction<Role>> actions = new ArrayList<>();
+            actions.add(hsrAction);
+            actions.add(sgsrAction);
+            addColumnActions(Ids.ROLE_ADD, pfIcon(""add-circle-o""), resources.constants().add(), actions);
         }
         addColumnAction(columnActionFactory.refresh(Ids.ROLE_REFRESH,
                 column -> accessControl.reload(() -> refresh(RefreshMode.RESTORE_SELECTION))));",2016-08-07T19:17:15Z,32
"@@ -25,7 +25,6 @@
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
 import elemental.dom.Element;
-import org.jboss.gwt.elemento.core.Elements;
 import org.jboss.gwt.flow.Async;
 import org.jboss.gwt.flow.Function;
 import org.jboss.gwt.flow.FunctionContext;
@@ -57,7 +56,6 @@
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
-import org.jboss.hal.resources.UIConstants;
 import org.jboss.hal.spi.AsyncColumn;
 import org.jboss.hal.spi.Footer;
 import org.jboss.hal.spi.Message;
@@ -121,13 +119,7 @@ public DataSourceColumn(final MetadataRegistry metadataRegistry,
         addActions.add(new ColumnAction<>(Ids.XA_DATA_SOURCE_ADD,
                 resources.messages().addResourceTitle(Names.XA_DATASOURCE),
                 column -> launchNewDataSourceWizard(true)));
-        Element element = new Elements.Builder().span()
-                .css(pfIcon(""add-circle-o""))
-                .title(resources.constants().add())
-                .data(UIConstants.TOGGLE, UIConstants.TOOLTIP)
-                .data(UIConstants.PLACEMENT, ""bottom"")
-                .end().build();
-        addColumnActions(Ids.DATA_SOURCE_ADD_ACTIONS, element, addActions);
+        addColumnActions(Ids.DATA_SOURCE_ADD_ACTIONS, pfIcon(""add-circle-o""), resources.constants().add(), addActions);
         addColumnAction(columnActionFactory.refresh(Ids.DATA_SOURCE_REFRESH));
 
         setItemsProvider((context, callback) -> {",2016-08-07T19:17:15Z,80
"@@ -754,8 +754,14 @@ protected void addColumnAction(ColumnAction<T> columnAction) {
         }
     }
 
-    protected void addColumnActions(String id, Element element, List<ColumnAction<T>> actions) {
+    protected void addColumnActions(String id, String iconsCss, String title, List<ColumnAction<T>> actions) {
         assertNotAsElement(""addColumnActions()"");
+        Element element = new Elements.Builder().span()
+                .css(iconsCss)
+                .title(title)
+                .data(UIConstants.TOGGLE, UIConstants.TOOLTIP)
+                .data(UIConstants.PLACEMENT, ""bottom"")
+                .end().build();
         columnActions.appendChild(newColumnButton(new DropdownColumnAction<>(id, element, actions)));
         if (columnActions.getChildElementCount() > 1) {
             columnActions.getClassList().add(btnGroup);",2016-08-07T19:17:15Z,368
"@@ -198,6 +198,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String homepageHelpWildFlyHomeText();
     String homepageHelpModelReferenceText();
     String homepageHelpLatestNews();
+    String hostScopedRole();
     String hour();
     String hours();
 
@@ -292,6 +293,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String second();
     String seconds();
     String security();
+    String serverGroupScopedRole();
     String serverName();
     String sessions();
     String settings();",2016-08-07T19:17:15Z,100
"@@ -191,6 +191,10 @@ public interface Ids {
 
     String ROLE = ""role"";
     String ROLE_ADD = build(ROLE, ADD_SUFFIX);
+    String ROLE_HOST_SCOPED_ADD = build(ROLE, HOST, ADD_SUFFIX);
+    String ROLE_HOST_SCOPED_FORM = build(ROLE, HOST, FORM_SUFFIX);
+    String ROLE_SERVER_GROUP_SCOPED_ADD = build(ROLE, ""server-group"", ADD_SUFFIX);
+    String ROLE_SERVER_GROUP_SCOPED_FORM = build(ROLE, ""server-group"", FORM_SUFFIX);
     String ROLE_REFRESH = build(ROLE, REFRESH_SUFFIX);
     String ROOT_CONTAINER = ""hal-root-container"";
     String RUNTIME_SUBSYSTEMS = ""runtime-subsystems"";",2016-08-07T19:17:15Z,111
"@@ -48,7 +48,6 @@ public interface Names {
     String JDBC_DRIVER = ""JDBC Driver"";
     String JDBC_DRIVERS = ""JDBC Drivers"";
     String JPA = ""JPA"";
-    String JVM = ""JVM"";
     String LOGGING = ""Logging"";
     String LOGGING_PROFILE = ""Logging Profile"";
     String LOGGING_PROFILES = ""Logging Profiles"";",2016-08-07T19:17:15Z,112
"@@ -152,6 +152,7 @@ homepageRuntimeStandaloneStep2=View log files or JVM usage
 homepageRuntimeStandaloneSubHeader=Monitor server status
 homepageRuntimeStepIntro=View runtime information such as server status, JVM status, and server log files.
 homepageTakeATour=Take a Tour
+hostScopedRole=Host Scoped Role
 hour=hour
 hours=hours
 includeRole=Include Role
@@ -237,6 +238,7 @@ search=Search
 second=second
 seconds=seconds
 security=Security
+serverGroupScopedRole=Server Group Scoped Role
 serverName=Server Name
 sessions=Sessions
 settings=Settings",2016-08-07T19:17:15Z,100
"@@ -29,6 +29,7 @@
 import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Resources;
+import org.jboss.hal.spi.Requires;
 
 /**
  * @author Harald Pehl
@@ -39,6 +40,11 @@ public class AccessControlPresenter extends
     // @formatter:off
     @ProxyStandard
     @NameToken(NameTokens.ACCESS_CONTROL)
+    @Requires(value = {
+        ""/core-service=management/access=authorization/role-mapping=*"",
+        ""/core-service=management/access=authorization/host-scoped-role=*"",
+        ""/core-service=management/access=authorization/server-group-scoped-role=*""},
+        recursive = false)
     public interface MyProxy extends ProxyPlace<AccessControlPresenter> {}
 
     public interface MyView extends FinderView {}",2016-08-07T19:17:15Z,366
"@@ -41,6 +41,7 @@
 
 import static java.util.Collections.singletonList;
 import static java.util.Comparator.comparing;
+import static java.util.stream.Collectors.toList;
 import static org.jboss.hal.resources.CSS.fontAwesome;
 
 /**
@@ -154,37 +155,25 @@ public List<ItemAction<Assignment>> actions() {
             callback.onSuccess(assignments);
         });
 
-        // Setup column actions to include *all* roles.
-        // Already included roles will be filtered out later in the ItemsProvider
-        Element include = new Elements.Builder().span()
-                .css(fontAwesome(""plus""))
-                .title(resources.constants().includeRole())
-                .data(UIConstants.TOGGLE, UIConstants.TOOLTIP)
-                .data(UIConstants.PLACEMENT, ""bottom"")
-                .end().build();
-        List<ColumnAction<Assignment>> includeActions = new ArrayList<>();
-        StreamSupport.stream(accessControl.roles().spliterator(), false)
-                .sorted(comparing(Role::getType)
-                        .thenComparing(comparing(Role::getName)))
-                .forEach(role -> includeActions.add(new ColumnAction<Assignment>(includeId(role), role.getName(),
-                        column -> Browser.getWindow().alert(Names.NYI))));
-        addColumnActions(Ids.ASSIGNMENT_INCLUDE, include, includeActions);
-
-        // Setup column actions to exclude *all* roles.
-        // Already excluded roles will be filtered out later in the ItemsProvider
-        Element exclude = new Elements.Builder().span()
-                .css(fontAwesome(""minus""))
-                .title(resources.constants().excludeRole())
-                .data(UIConstants.TOGGLE, UIConstants.TOOLTIP)
-                .data(UIConstants.PLACEMENT, ""bottom"")
-                .end().build();
-        List<ColumnAction<Assignment>> excludeActions = new ArrayList<>();
-        StreamSupport.stream(accessControl.roles().spliterator(), false)
-                .sorted(comparing(Role::getType)
-                        .thenComparing(comparing(Role::getName)))
-                .forEach(role -> excludeActions.add(new ColumnAction<Assignment>(excludeId(role), role.getName(),
-                        column -> Browser.getWindow().alert(Names.NYI))));
-        addColumnActions(Ids.ASSIGNMENT_EXCLUDE, exclude, excludeActions);
+        // Setup column actions to include / exclude *all* roles.
+        // Already included / excluded roles will be filtered out later in the ItemsProvider
+        List<Role> roles = new ArrayList<>();
+        accessControl.roles().standardRoles().stream().sorted(comparing(Role::getName)).forEach(roles::add);
+        accessControl.roles().scopedRoles().stream().sorted(comparing(Role::getName)).forEach(roles::add);
+
+        List<ColumnAction<Assignment>> includeActions = roles.stream()
+                .map(role -> new ColumnAction<Assignment>(includeId(role), role.getName(),
+                        column -> Browser.getWindow().alert(Names.NYI)))
+                .collect(toList());
+        addColumnActions(Ids.ASSIGNMENT_INCLUDE, fontAwesome(""plus""), resources.constants().includeRole(),
+                includeActions);
+
+        List<ColumnAction<Assignment>> excludeActions = roles.stream()
+                .map(role -> new ColumnAction<Assignment>(excludeId(role), role.getName(),
+                        column -> Browser.getWindow().alert(Names.NYI)))
+                .collect(toList());
+        addColumnActions(Ids.ASSIGNMENT_EXCLUDE, fontAwesome(""minus""), resources.constants().excludeRole(),
+                excludeActions);
     }
 
     private String includeId(Role role) {",2016-08-07T19:17:15Z,6
"@@ -41,6 +41,7 @@
 
 import static java.util.Collections.singletonList;
 import static java.util.Comparator.comparing;
+import static java.util.stream.Collectors.toList;
 import static org.jboss.hal.resources.CSS.fontAwesome;
 
 /**
@@ -153,39 +154,25 @@ public List<ItemAction<Assignment>> actions() {
             callback.onSuccess(assignments);
         });
 
-        // Setup column actions to include *all* principals.
-        // Already included principals will be filtered out later in the ItemsProvider
-        Element include = new Elements.Builder().span()
-                .css(fontAwesome(""plus""))
-                .title(resources.constants().includeUserGroup())
-                .data(UIConstants.TOGGLE, UIConstants.TOOLTIP)
-                .data(UIConstants.PLACEMENT, ""bottom"")
-                .end().build();
-        List<ColumnAction<Assignment>> includeActions = new ArrayList<>();
-        StreamSupport.stream(accessControl.principals().spliterator(), false)
-                .sorted(comparing(Principal::getType)
-                        .thenComparing(comparing(Principal::getName)))
-                .forEach(principal -> includeActions.add(new ColumnAction<>(
-                        includeId(principal), typeAndName(principal),
-                        column -> Browser.getWindow().alert(Names.NYI))));
-        addColumnActions(Ids.MEMBERSHIP_INCLUDE, include, includeActions);
-
-        // Setup column actions to exclude *all* principals.
-        // Already excluded principals will be filtered out later in the ItemsProvider
-        Element exclude = new Elements.Builder().span()
-                .css(fontAwesome(""minus""))
-                .title(resources.constants().excludeUserGroup())
-                .data(UIConstants.TOGGLE, UIConstants.TOOLTIP)
-                .data(UIConstants.PLACEMENT, ""bottom"")
-                .end().build();
-        List<ColumnAction<Assignment>> excludeActions = new ArrayList<>();
-        StreamSupport.stream(accessControl.principals().spliterator(), false)
-                .sorted(comparing(Principal::getType)
-                        .thenComparing(comparing(Principal::getName)))
-                .forEach(principal -> excludeActions.add(new ColumnAction<>(
-                        excludeId(principal), typeAndName(principal),
-                        column -> Browser.getWindow().alert(Names.NYI))));
-        addColumnActions(Ids.MEMBERSHIP_EXCLUDE, exclude, excludeActions);
+        // Setup column actions to include / exclude *all* principals.
+        // Already included / excluded principals will be filtered out later in the ItemsProvider
+        List<Principal> principals = new ArrayList<>();
+        accessControl.principals().users().stream().sorted(comparing(Principal::getName)).forEach(principals::add);
+        accessControl.principals().groups().stream().sorted(comparing(Principal::getName)).forEach(principals::add);
+
+        List<ColumnAction<Assignment>> includeActions = principals.stream()
+                .map(principal -> new ColumnAction<Assignment>(includeId(principal), typeAndName(principal),
+                        column -> Browser.getWindow().alert(Names.NYI)))
+                .collect(toList());
+        addColumnActions(Ids.MEMBERSHIP_INCLUDE, fontAwesome(""plus""), resources.constants().includeUserGroup(),
+                includeActions);
+
+        List<ColumnAction<Assignment>> excludeActions = principals.stream()
+                .map(principal -> new ColumnAction<Assignment>(excludeId(principal), typeAndName(principal),
+                        column -> Browser.getWindow().alert(Names.NYI)))
+                .collect(toList());
+        addColumnActions(Ids.MEMBERSHIP_EXCLUDE, fontAwesome(""minus""), resources.constants().excludeUserGroup(),
+                excludeActions);
     }
 
     private String includeId(Principal principal) {",2016-08-07T19:17:15Z,367
"@@ -19,21 +19,35 @@
 import java.util.List;
 import javax.inject.Inject;
 
+import com.google.web.bindery.event.shared.EventBus;
 import elemental.client.Browser;
 import elemental.dom.Element;
 import org.jboss.hal.config.Environment;
+import org.jboss.hal.core.finder.ColumnAction;
 import org.jboss.hal.core.finder.ColumnActionFactory;
 import org.jboss.hal.core.finder.Finder;
 import org.jboss.hal.core.finder.FinderColumn;
 import org.jboss.hal.core.finder.ItemAction;
 import org.jboss.hal.core.finder.ItemActionFactory;
 import org.jboss.hal.core.finder.ItemDisplay;
+import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.dmr.model.Operation;
+import org.jboss.hal.dmr.model.ResourceAddress;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.MetadataRegistry;
+import org.jboss.hal.meta.StatementContext;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
 import org.jboss.hal.spi.AsyncColumn;
+import org.jboss.hal.spi.Message;
+import org.jboss.hal.spi.MessageEvent;
 
 import static java.util.Comparator.comparing;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.ADD;
+import static org.jboss.hal.resources.CSS.pfIcon;
 
 /**
  * @author Harald Pehl
@@ -58,6 +72,10 @@ static List<String> filterData(Role role) {
     public RoleColumn(final Finder finder,
             final ColumnActionFactory columnActionFactory,
             final ItemActionFactory itemActionFactory,
+            final MetadataRegistry metadataRegistry,
+            final StatementContext statementContext,
+            final Dispatcher dispatcher,
+            final EventBus eventBus,
             final AccessControl accessControl,
             final AccessControlTokens tokens,
             final Environment environment,
@@ -126,8 +144,50 @@ public String nextColumn() {
         );
 
         if (!environment.isStandalone()) {
-            addColumnAction(columnActionFactory.add(Ids.ROLE_ADD, resources.constants().role(),
-                    column -> Browser.getWindow().alert(Names.NYI)));
+            // add host scoped role (hsr)
+            AddressTemplate hsrTemplate = AddressTemplate
+                    .of(""/core-service=management/access=authorization/host-scoped-role=*"");
+            Metadata hsrMeta = metadataRegistry.lookup(hsrTemplate);
+            AddResourceDialog hsrDialog = new AddResourceDialog(Ids.ROLE_HOST_SCOPED_FORM,
+                    resources.messages().addResourceTitle(resources.constants().hostScopedRole()),
+                    hsrMeta, (name, model) -> {
+                ResourceAddress address = hsrTemplate.resolve(statementContext, name);
+                Operation operation = new Operation.Builder(ADD, address)
+                        .payload(model)
+                        .build();
+                dispatcher.execute(operation, result -> {
+                    MessageEvent.fire(eventBus, Message.success(
+                            resources.messages().addResourceSuccess(resources.constants().hostScopedRole(), name)));
+                    refresh(name);
+                });
+            });
+            ColumnAction<Role> hsrAction = new ColumnAction<>(Ids.ROLE_HOST_SCOPED_ADD,
+                    resources.constants().hostScopedRole(), column -> hsrDialog.show());
+
+            // add server group scoped role (sgsr)
+            AddressTemplate sgsrTemplate = AddressTemplate
+                    .of(""/core-service=management/access=authorization/server-group-scoped-role=*"");
+            Metadata sgsrMeta = metadataRegistry.lookup(sgsrTemplate);
+            AddResourceDialog sgsrDialog = new AddResourceDialog(Ids.ROLE_SERVER_GROUP_SCOPED_FORM,
+                    resources.messages().addResourceTitle(resources.constants().hostScopedRole()),
+                    sgsrMeta, (name, model) -> {
+                ResourceAddress address = sgsrTemplate.resolve(statementContext, name);
+                Operation operation = new Operation.Builder(ADD, address)
+                        .payload(model)
+                        .build();
+                dispatcher.execute(operation, result -> {
+                    MessageEvent.fire(eventBus, Message.success(resources.messages()
+                            .addResourceSuccess(resources.constants().serverGroupScopedRole(), name)));
+                    refresh(name);
+                });
+            });
+            ColumnAction<Role> sgsrAction = new ColumnAction<>(Ids.ROLE_SERVER_GROUP_SCOPED_ADD,
+                    resources.constants().serverGroupScopedRole(), column -> sgsrDialog.show());
+
+            List<ColumnAction<Role>> actions = new ArrayList<>();
+            actions.add(hsrAction);
+            actions.add(sgsrAction);
+            addColumnActions(Ids.ROLE_ADD, pfIcon(""add-circle-o""), resources.constants().add(), actions);
         }
         addColumnAction(columnActionFactory.refresh(Ids.ROLE_REFRESH,
                 column -> accessControl.reload(() -> refresh(RefreshMode.RESTORE_SELECTION))));",2016-08-07T19:17:15Z,32
"@@ -25,7 +25,6 @@
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
 import elemental.dom.Element;
-import org.jboss.gwt.elemento.core.Elements;
 import org.jboss.gwt.flow.Async;
 import org.jboss.gwt.flow.Function;
 import org.jboss.gwt.flow.FunctionContext;
@@ -57,7 +56,6 @@
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
-import org.jboss.hal.resources.UIConstants;
 import org.jboss.hal.spi.AsyncColumn;
 import org.jboss.hal.spi.Footer;
 import org.jboss.hal.spi.Message;
@@ -121,13 +119,7 @@ public DataSourceColumn(final MetadataRegistry metadataRegistry,
         addActions.add(new ColumnAction<>(Ids.XA_DATA_SOURCE_ADD,
                 resources.messages().addResourceTitle(Names.XA_DATASOURCE),
                 column -> launchNewDataSourceWizard(true)));
-        Element element = new Elements.Builder().span()
-                .css(pfIcon(""add-circle-o""))
-                .title(resources.constants().add())
-                .data(UIConstants.TOGGLE, UIConstants.TOOLTIP)
-                .data(UIConstants.PLACEMENT, ""bottom"")
-                .end().build();
-        addColumnActions(Ids.DATA_SOURCE_ADD_ACTIONS, element, addActions);
+        addColumnActions(Ids.DATA_SOURCE_ADD_ACTIONS, pfIcon(""add-circle-o""), resources.constants().add(), addActions);
         addColumnAction(columnActionFactory.refresh(Ids.DATA_SOURCE_REFRESH));
 
         setItemsProvider((context, callback) -> {",2016-08-07T19:17:15Z,80
"@@ -754,8 +754,14 @@ protected void addColumnAction(ColumnAction<T> columnAction) {
         }
     }
 
-    protected void addColumnActions(String id, Element element, List<ColumnAction<T>> actions) {
+    protected void addColumnActions(String id, String iconsCss, String title, List<ColumnAction<T>> actions) {
         assertNotAsElement(""addColumnActions()"");
+        Element element = new Elements.Builder().span()
+                .css(iconsCss)
+                .title(title)
+                .data(UIConstants.TOGGLE, UIConstants.TOOLTIP)
+                .data(UIConstants.PLACEMENT, ""bottom"")
+                .end().build();
         columnActions.appendChild(newColumnButton(new DropdownColumnAction<>(id, element, actions)));
         if (columnActions.getChildElementCount() > 1) {
             columnActions.getClassList().add(btnGroup);",2016-08-07T19:17:15Z,368
"@@ -198,6 +198,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String homepageHelpWildFlyHomeText();
     String homepageHelpModelReferenceText();
     String homepageHelpLatestNews();
+    String hostScopedRole();
     String hour();
     String hours();
 
@@ -292,6 +293,7 @@ public interface Constants extends com.google.gwt.i18n.client.Constants {
     String second();
     String seconds();
     String security();
+    String serverGroupScopedRole();
     String serverName();
     String sessions();
     String settings();",2016-08-07T19:17:15Z,100
"@@ -191,6 +191,10 @@ public interface Ids {
 
     String ROLE = ""role"";
     String ROLE_ADD = build(ROLE, ADD_SUFFIX);
+    String ROLE_HOST_SCOPED_ADD = build(ROLE, HOST, ADD_SUFFIX);
+    String ROLE_HOST_SCOPED_FORM = build(ROLE, HOST, FORM_SUFFIX);
+    String ROLE_SERVER_GROUP_SCOPED_ADD = build(ROLE, ""server-group"", ADD_SUFFIX);
+    String ROLE_SERVER_GROUP_SCOPED_FORM = build(ROLE, ""server-group"", FORM_SUFFIX);
     String ROLE_REFRESH = build(ROLE, REFRESH_SUFFIX);
     String ROOT_CONTAINER = ""hal-root-container"";
     String RUNTIME_SUBSYSTEMS = ""runtime-subsystems"";",2016-08-07T19:17:15Z,111
"@@ -48,7 +48,6 @@ public interface Names {
     String JDBC_DRIVER = ""JDBC Driver"";
     String JDBC_DRIVERS = ""JDBC Drivers"";
     String JPA = ""JPA"";
-    String JVM = ""JVM"";
     String LOGGING = ""Logging"";
     String LOGGING_PROFILE = ""Logging Profile"";
     String LOGGING_PROFILES = ""Logging Profiles"";",2016-08-07T19:17:15Z,112
"@@ -152,6 +152,7 @@ homepageRuntimeStandaloneStep2=View log files or JVM usage
 homepageRuntimeStandaloneSubHeader=Monitor server status
 homepageRuntimeStepIntro=View runtime information such as server status, JVM status, and server log files.
 homepageTakeATour=Take a Tour
+hostScopedRole=Host Scoped Role
 hour=hour
 hours=hours
 includeRole=Include Role
@@ -237,6 +238,7 @@ search=Search
 second=second
 seconds=seconds
 security=Security
+serverGroupScopedRole=Server Group Scoped Role
 serverName=Server Name
 sessions=Sessions
 settings=Settings",2016-08-07T19:17:15Z,100
"@@ -48,30 +48,18 @@ public class DeploymentScannerPresenter
         extends MbuiPresenter<DeploymentScannerPresenter.MyView, DeploymentScannerPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    // @formatter:off
-    @ProxyCodeSplit
-    @NameToken(NameTokens.DEPLOYMENT_SCANNERS)
-    @Requires({DEPLOYMENTSCANNER_SUBSYSTEM_ADDRESS, DEPLOYMENTSCANNER_ADDRESS})
-    public interface MyProxy extends ProxyPlace<DeploymentScannerPresenter> {}
-
-    public interface MyView extends MbuiView<DeploymentScannerPresenter> {
-        void updateScanners(List<NamedNode> items);
-    }
-    // @formatter:on
-
-
     private final CrudOperations crud;
     private final FinderPathFactory finderPathFactory;
     private final StatementContext statementContext;
 
     @Inject
-    public DeploymentScannerPresenter(final EventBus eventBus,
-            final MyView view,
-            final MyProxy proxy,
-            final Finder finder,
-            final CrudOperations crud,
-            final FinderPathFactory finderPathFactory,
-            final StatementContext statementContext) {
+    public DeploymentScannerPresenter(EventBus eventBus,
+            MyView view,
+            MyProxy proxy,
+            Finder finder,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext) {
         super(eventBus, view, proxy, finder);
         this.crud = crud;
         this.finderPathFactory = finderPathFactory;
@@ -100,4 +88,17 @@ protected void reload() {
                 getView().updateScanners(
                         asNamedNodes(failSafePropertyList(result, DEPLOYMENTSCANNER_TEMPLATE.lastName()))));
     }
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @NameToken(NameTokens.DEPLOYMENT_SCANNERS)
+    @Requires({DEPLOYMENTSCANNER_SUBSYSTEM_ADDRESS, DEPLOYMENTSCANNER_ADDRESS})
+    public interface MyProxy extends ProxyPlace<DeploymentScannerPresenter> {
+    }
+
+    public interface MyView extends MbuiView<DeploymentScannerPresenter> {
+        void updateScanners(List<NamedNode> items);
+    }
+    // @formatter:on
 }",2017-10-16T13:25:42Z,343
"@@ -67,21 +67,8 @@ public class CacheContainerPresenter
         extends ApplicationFinderPresenter<CacheContainerPresenter.MyView, CacheContainerPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    // @formatter:off
-    @ProxyCodeSplit
-    @Requires({CACHE_CONTAINER_ADDRESS, DISTRIBUTED_CACHE_ADDRESS, INVALIDATION_CACHE_ADDRESS, LOCAL_CACHE_ADDRESS,
-            REPLICATED_CACHE_ADDRESS, THREAD_POOL_ADDRESS, TRANSPORT_JGROUPS_ADDRESS})
-    @NameToken(NameTokens.CACHE_CONTAINER)
-    public interface MyProxy extends ProxyPlace<CacheContainerPresenter> {}
-
-    public interface MyView extends HalView, HasPresenter<CacheContainerPresenter> {
-        void update(CacheContainer cacheContainer, boolean jgroups);
-        void updateCacheBackups(Cache cache, List<NamedNode> backups);
-        void updateCacheStore(Cache cache, List<Property> stores);
-    }
-    // @formatter:on
-
-
+    public static final String EQUALS = ""="";
+    public static final String EQ_WILDCARD = ""=*"";
     private final MetadataRegistry metadataRegistry;
     private final Dispatcher dispatcher;
     private final CrudOperations crud;
@@ -94,16 +81,16 @@ public interface MyView extends HalView, HasPresenter<CacheContainerPresenter> {
     private Store store;
 
     @Inject
-    public CacheContainerPresenter(final EventBus eventBus,
-            final CacheContainerPresenter.MyView view,
-            final CacheContainerPresenter.MyProxy myProxy,
-            final Finder finder,
-            final MetadataRegistry metadataRegistry,
-            final Dispatcher dispatcher,
-            final CrudOperations crud,
-            final FinderPathFactory finderPathFactory,
-            final StatementContext statementContext,
-            final Resources resources) {
+    public CacheContainerPresenter(EventBus eventBus,
+            CacheContainerPresenter.MyView view,
+            CacheContainerPresenter.MyProxy myProxy,
+            Finder finder,
+            MetadataRegistry metadataRegistry,
+            Dispatcher dispatcher,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext,
+            Resources resources) {
         super(eventBus, view, myProxy, finder);
         this.metadataRegistry = metadataRegistry;
         this.dispatcher = dispatcher;
@@ -120,7 +107,7 @@ protected void onBind() {
     }
 
     @Override
-    public void prepareFromRequest(final PlaceRequest request) {
+    public void prepareFromRequest(PlaceRequest request) {
         super.prepareFromRequest(request);
         cacheContainer = request.getParameter(NAME, null);
     }
@@ -177,7 +164,7 @@ void resetCacheContainer(Form<ModelNode> form) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE);
         crud.reset(Names.CACHE_CONTAINER, cacheContainer, address, form, metadata, new FinishReset<ModelNode>(form) {
             @Override
-            public void afterReset(final Form<ModelNode> form) {
+            public void afterReset(Form<ModelNode> form) {
                 reload();
             }
         });
@@ -186,34 +173,34 @@ public void afterReset(final Form<ModelNode> form) {
 
     // ------------------------------------------------------ cache
 
-    void addCache(final Cache cache) {
+    void addCache(Cache cache) {
         Metadata metadata = metadataRegistry.lookup(cache.template);
         AddResourceDialog dialog = new AddResourceDialog(Ids.build(cache.baseId, Ids.ADD),
                 resources.messages().addResourceTitle(cache.type), metadata,
                 (name, model) -> crud.add(cache.type, name, cacheAddress(cache, name), model, (n, a) -> reload()));
         dialog.show();
     }
 
-    void saveCache(final Cache cache, final String name, final Map<String, Object> changedValues) {
+    void saveCache(Cache cache, String name, Map<String, Object> changedValues) {
         Metadata metadata = metadataRegistry.lookup(cache.template);
         crud.save(cache.type, name, cacheAddress(cache, name), changedValues, metadata, this::reload);
     }
 
-    void resetCache(final Cache cache, final String name, final Form<NamedNode> form) {
+    void resetCache(Cache cache, String name, Form<NamedNode> form) {
         Metadata metadata = metadataRegistry.lookup(cache.template);
         crud.reset(cache.type, name, cacheAddress(cache, name), form, metadata, new FinishReset<NamedNode>(form) {
             @Override
-            public void afterReset(final Form<NamedNode> form) {
+            public void afterReset(Form<NamedNode> form) {
                 reload();
             }
         });
     }
 
-    void removeCache(final Cache cache, final String name) {
+    void removeCache(Cache cache, String name) {
         crud.remove(cache.type, name, cacheAddress(cache, name), this::reload);
     }
 
-    void selectCache(final Cache cacheType, final String cacheName) {
+    void selectCache(Cache cacheType, String cacheName) {
         this.cacheType = cacheType;
         this.cacheName = cacheName;
     }
@@ -222,59 +209,59 @@ String cacheSegment() {
         return cacheType.type + "": "" + cacheName;
     }
 
-    private ResourceAddress cacheAddress(final Cache cache, final String name) {
+    private ResourceAddress cacheAddress(Cache cache, String name) {
         // cannot use this.cacheType and this.cacheName here, since they might be null
-        return SELECTED_CACHE_CONTAINER_TEMPLATE.append(cache.resource() + ""="" + name).resolve(statementContext);
+        return SELECTED_CACHE_CONTAINER_TEMPLATE.append(cache.resource() + EQUALS + name).resolve(statementContext);
     }
 
 
     // ------------------------------------------------------ cache component
 
-    void addCacheComponent(final Component component) {
+    void addCacheComponent(Component component) {
         crud.addSingleton(component.type, cacheComponentAddress(component), null, address -> reload());
     }
 
-    Operation readCacheComponent(final Component component) {
+    Operation readCacheComponent(Component component) {
         if (cacheType != null && cacheName != null) {
             return new Operation.Builder(cacheComponentAddress(component), READ_RESOURCE_OPERATION).build();
         } else {
             return null;
         }
     }
 
-    void saveCacheComponent(final Component component, final Map<String, Object> changedValues) {
+    void saveCacheComponent(Component component, Map<String, Object> changedValues) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(COMPONENT + ""="" + component.resource));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(COMPONENT + EQUALS + component.resource));
         crud.saveSingleton(component.type, cacheComponentAddress(component), changedValues, metadata, this::reload);
     }
 
-    void resetCacheComponent(final Component component, final Form<ModelNode> form) {
+    void resetCacheComponent(Component component, Form<ModelNode> form) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(COMPONENT + ""="" + component.resource));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(COMPONENT + EQUALS + component.resource));
         crud.resetSingleton(component.type, cacheComponentAddress(component), form, metadata,
                 new FinishReset<ModelNode>(form) {
                     @Override
-                    public void afterReset(final Form<ModelNode> form) {
+                    public void afterReset(Form<ModelNode> form) {
                         reload();
                     }
                 });
     }
 
-    void removeCacheComponent(final Component component, final Form<ModelNode> form) {
+    void removeCacheComponent(Component component, Form<ModelNode> form) {
         crud.removeSingleton(component.type, cacheComponentAddress(component), new FinishRemove<ModelNode>(form) {
             @Override
-            public void afterRemove(final Form<ModelNode> form) {
+            public void afterRemove(Form<ModelNode> form) {
                 reload();
             }
         });
     }
 
-    private ResourceAddress cacheComponentAddress(final Component component) {
+    private ResourceAddress cacheComponentAddress(Component component) {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
-                .append(COMPONENT + ""="" + component.resource)
+                .append(cacheType.resource() + EQUALS + cacheName)
+                .append(COMPONENT + EQUALS + component.resource)
                 .resolve(statementContext);
     }
 
@@ -283,8 +270,8 @@ private ResourceAddress cacheComponentAddress(final Component component) {
 
     void addCacheBackup() {
         Metadata metadata = metadataRegistry.lookup(cacheType.template
-                .append(COMPONENT + ""="" + BACKUPS)
-                .append(BACKUP + ""=*""));
+                .append(COMPONENT + EQUALS + BACKUPS)
+                .append(BACKUP + EQ_WILDCARD));
         AddResourceDialog dialog = new AddResourceDialog(Ids.build(cacheType.baseId, BACKUPS, Ids.ADD),
                 resources.messages().addResourceTitle(Names.BACKUP), metadata,
                 (name, model) -> {
@@ -296,52 +283,52 @@ void addCacheBackup() {
 
     void showCacheBackup() {
         ResourceAddress address = SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
-                .append(COMPONENT + ""="" + BACKUPS)
+                .append(cacheType.resource() + EQUALS + cacheName)
+                .append(COMPONENT + EQUALS + BACKUPS)
                 .resolve(statementContext);
         crud.readChildren(address, BACKUP,
                 children -> getView().updateCacheBackups(cacheType, asNamedNodes(children)));
     }
 
-    void saveCacheBackup(final String name, final Map<String, Object> changedValues) {
+    void saveCacheBackup(String name, Map<String, Object> changedValues) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(COMPONENT + ""="" + BACKUPS)
-                .append(BACKUP + ""=*""));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(COMPONENT + EQUALS + BACKUPS)
+                .append(BACKUP + EQ_WILDCARD));
         crud.save(Names.BACKUP, name, cacheBackupAddress(name), changedValues, metadata, this::showCacheBackup);
     }
 
-    void resetCacheBackup(final String name, final Form<NamedNode> form) {
+    void resetCacheBackup(String name, Form<NamedNode> form) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(COMPONENT + ""="" + BACKUPS)
-                .append(BACKUP + ""=*""));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(COMPONENT + EQUALS + BACKUPS)
+                .append(BACKUP + EQ_WILDCARD));
         crud.reset(Names.BACKUP, name, cacheBackupAddress(name), form, metadata, new FinishReset<NamedNode>(form) {
             @Override
-            public void afterReset(final Form<NamedNode> form) {
+            public void afterReset(Form<NamedNode> form) {
                 showCacheBackup();
             }
         });
     }
 
-    void removeCacheBackup(final String name) {
+    void removeCacheBackup(String name) {
         crud.remove(Names.BACKUP, name, cacheBackupAddress(name), this::showCacheBackup);
     }
 
-    private ResourceAddress cacheBackupAddress(final String name) {
+    private ResourceAddress cacheBackupAddress(String name) {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
-                .append(COMPONENT + ""="" + BACKUPS)
-                .append(BACKUP + ""="" + name)
+                .append(cacheType.resource() + EQUALS + cacheName)
+                .append(COMPONENT + EQUALS + BACKUPS)
+                .append(BACKUP + EQUALS + name)
                 .resolve(statementContext);
     }
 
 
     // ------------------------------------------------------ cache store
 
-    void addCacheStore(final Store store) {
+    void addCacheStore(Store store) {
         if (store.addWithDialog) {
-            Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + ""="" + store.resource));
+            Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + EQUALS + store.resource));
             String id = Ids.build(cacheType.baseId, store.baseId, Ids.ADD);
             Form<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata) // custom form w/o unbound name item
                     .fromRequestProperties()
@@ -367,7 +354,7 @@ void addCacheStore(final Store store) {
 
     void showCacheStore() {
         ResourceAddress address = SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
+                .append(cacheType.resource() + EQUALS + cacheName)
                 .resolve(statementContext);
         crud.readChildren(address, STORE, 2, children -> {
             if (children.isEmpty()) {
@@ -383,30 +370,30 @@ void showCacheStore() {
         });
     }
 
-    void saveCacheStore(final Store store, final Map<String, Object> changedValues) {
-        Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + ""="" + store.resource));
+    void saveCacheStore(Store store, Map<String, Object> changedValues) {
+        Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + EQUALS + store.resource));
         crud.saveSingleton(store.type, cacheStoreAddress(store), changedValues, metadata, this::showCacheStore);
     }
 
-    void resetCacheStore(final Store store, final Form<ModelNode> form) {
-        Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + ""="" + store.resource));
+    void resetCacheStore(Store store, Form<ModelNode> form) {
+        Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + EQUALS + store.resource));
         crud.resetSingleton(store.type, cacheStoreAddress(store), form, metadata, new FinishReset<ModelNode>(form) {
             @Override
-            public void afterReset(final Form<ModelNode> form) {
+            public void afterReset(Form<ModelNode> form) {
                 showCacheStore();
             }
         });
     }
 
-    void switchStore(final Store newStore) {
+    void switchStore(Store newStore) {
         if (newStore != null && newStore != this.store) {
             List<Operation> operations = new ArrayList<>();
             if (this.store != null) {
                 operations.add(new Operation.Builder(cacheStoreAddress(this.store), REMOVE).build());
             }
 
             if (newStore.addWithDialog) {
-                Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + ""="" + newStore.resource));
+                Metadata metadata = metadataRegistry.lookup(cacheType.template.append(STORE + EQUALS + newStore.resource));
                 String id = Ids.build(cacheType.baseId, newStore.baseId, Ids.ADD);
                 Form<ModelNode> form = new ModelNodeForm.Builder<>(id, metadata) // custom form w/o unbound name item
                         .fromRequestProperties()
@@ -448,42 +435,42 @@ String storeSegment() {
         return builder.toString();
     }
 
-    private ResourceAddress cacheStoreAddress(final Store store) {
+    private ResourceAddress cacheStoreAddress(Store store) {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
-                .append(STORE + ""="" + store.resource)
+                .append(cacheType.resource() + EQUALS + cacheName)
+                .append(STORE + EQUALS + store.resource)
                 .resolve(statementContext);
     }
 
 
     // ------------------------------------------------------ write through / behind
 
-    void addWrite(final Write write) {
+    void addWrite(Write write) {
         crud.addSingleton(write.type, writeAddress(write), null, address -> showCacheStore());
     }
 
-    void saveWrite(final Write write, final Map<String, Object> changedValues) {
+    void saveWrite(Write write, Map<String, Object> changedValues) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(STORE + ""="" + store.resource)
-                .append(WRITE + ""="" + write.resource));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(STORE + EQUALS + store.resource)
+                .append(WRITE + EQUALS + write.resource));
         crud.saveSingleton(Names.WRITE_BEHIND, writeAddress(write), changedValues, metadata, this::showCacheStore);
     }
 
-    void resetWrite(final Write write, final Form<ModelNode> form) {
+    void resetWrite(Write write, Form<ModelNode> form) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(STORE + ""="" + store.resource)
-                .append(WRITE + ""="" + write.resource));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(STORE + EQUALS + store.resource)
+                .append(WRITE + EQUALS + write.resource));
         crud.resetSingleton(Names.WRITE_BEHIND, writeAddress(write), form, metadata, new FinishReset<ModelNode>(form) {
             @Override
-            public void afterReset(final Form<ModelNode> form) {
+            public void afterReset(Form<ModelNode> form) {
                 showCacheStore();
             }
         });
     }
 
-    void switchWrite(final Write currentWrite, final Write newWrite) {
+    void switchWrite(Write currentWrite, Write newWrite) {
         List<Operation> operations = new ArrayList<>();
         operations.add(new Operation.Builder(writeAddress(currentWrite), REMOVE).build());
         operations.add(new Operation.Builder(writeAddress(newWrite), ADD).build());
@@ -494,88 +481,88 @@ void switchWrite(final Write currentWrite, final Write newWrite) {
         });
     }
 
-    private ResourceAddress writeAddress(final Write write) {
+    private ResourceAddress writeAddress(Write write) {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
-                .append(STORE + ""="" + store.resource)
-                .append(WRITE + ""="" + write.resource)
+                .append(cacheType.resource() + EQUALS + cacheName)
+                .append(STORE + EQUALS + store.resource)
+                .append(WRITE + EQUALS + write.resource)
                 .resolve(statementContext);
     }
 
 
     // ------------------------------------------------------ tables of jdbc stores
 
-    void saveStoreTable(final Table table, final Map<String, Object> changedValues) {
+    void saveStoreTable(Table table, Map<String, Object> changedValues) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(STORE + ""="" + store.resource)
-                .append(TABLE + ""="" + table.resource));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(STORE + EQUALS + store.resource)
+                .append(TABLE + EQUALS + table.resource));
         crud.saveSingleton(table.type, storeTableAddress(store, table), changedValues, metadata, this::showCacheStore);
     }
 
-    void resetStoreTable(final Table table, final Form<ModelNode> form) {
+    void resetStoreTable(Table table, Form<ModelNode> form) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""=*"")
-                .append(STORE + ""="" + store.resource)
-                .append(TABLE + ""="" + table.resource));
+                .append(cacheType.resource() + EQ_WILDCARD)
+                .append(STORE + EQUALS + store.resource)
+                .append(TABLE + EQUALS + table.resource));
         crud.resetSingleton(table.type, storeTableAddress(store, table), form, metadata,
                 new FinishReset<ModelNode>(form) {
                     @Override
-                    public void afterReset(final Form<ModelNode> form) {
+                    public void afterReset(Form<ModelNode> form) {
                         showCacheStore();
                     }
                 });
     }
 
-    private ResourceAddress storeTableAddress(final Store store, final Table table) {
+    private ResourceAddress storeTableAddress(Store store, Table table) {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(cacheType.resource() + ""="" + cacheName)
-                .append(STORE + ""="" + store.resource)
-                .append(TABLE + ""="" + table.resource)
+                .append(cacheType.resource() + EQUALS + cacheName)
+                .append(STORE + EQUALS + store.resource)
+                .append(TABLE + EQUALS + table.resource)
                 .resolve(statementContext);
     }
 
 
     // ------------------------------------------------------ thread pool
 
-    void addThreadPool(final ThreadPool threadPool) {
+    void addThreadPool(ThreadPool threadPool) {
         crud.addSingleton(threadPool.type, threadPoolAddress(threadPool), null, address -> reload());
     }
 
-    Operation readThreadPool(final ThreadPool threadPool) {
+    Operation readThreadPool(ThreadPool threadPool) {
         return new Operation.Builder(threadPoolAddress(threadPool), READ_RESOURCE_OPERATION).build();
     }
 
-    void saveThreadPool(final ThreadPool threadPool, final Map<String, Object> changedValues) {
+    void saveThreadPool(ThreadPool threadPool, Map<String, Object> changedValues) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(THREAD_POOL + ""="" + threadPool.resource));
+                .append(THREAD_POOL + EQUALS + threadPool.resource));
         crud.saveSingleton(threadPool.type, threadPoolAddress(threadPool), changedValues, metadata, this::reload);
     }
 
-    void resetThreadPool(final ThreadPool threadPool, final Form<ModelNode> form) {
+    void resetThreadPool(ThreadPool threadPool, Form<ModelNode> form) {
         Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE
-                .append(THREAD_POOL + ""="" + threadPool.resource));
+                .append(THREAD_POOL + EQUALS + threadPool.resource));
         crud.resetSingleton(threadPool.type, threadPoolAddress(threadPool), form, metadata,
                 new FinishReset<ModelNode>(form) {
                     @Override
-                    public void afterReset(final Form<ModelNode> form) {
+                    public void afterReset(Form<ModelNode> form) {
                         reload();
                     }
                 });
     }
 
-    void removeThreadPool(final ThreadPool threadPool, final Form<ModelNode> form) {
+    void removeThreadPool(ThreadPool threadPool, Form<ModelNode> form) {
         crud.removeSingleton(threadPool.type, threadPoolAddress(threadPool), new FinishRemove<ModelNode>(form) {
             @Override
-            public void afterRemove(final Form<ModelNode> form) {
+            public void afterRemove(Form<ModelNode> form) {
                 reload();
             }
         });
     }
 
-    private ResourceAddress threadPoolAddress(final ThreadPool threadPool) {
+    private ResourceAddress threadPoolAddress(ThreadPool threadPool) {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(THREAD_POOL + ""="" + threadPool.resource)
+                .append(THREAD_POOL + EQUALS + threadPool.resource)
                 .resolve(statementContext);
     }
 
@@ -586,24 +573,43 @@ void addJgroups() {
         crud.addSingleton(Names.JGROUPS, jgroupsAddress(), null, address -> reload());
     }
 
-    void saveJgroups(final Map<String, Object> changedValues) {
-        Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE.append(TRANSPORT + ""="" + JGROUPS));
+    void saveJgroups(Map<String, Object> changedValues) {
+        Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE.append(TRANSPORT + EQUALS + JGROUPS));
         crud.saveSingleton(Names.JGROUPS, jgroupsAddress(), changedValues, metadata, this::reload);
     }
 
-    void resetJgroups(final Form<ModelNode> form) {
-        Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE.append(TRANSPORT + ""="" + JGROUPS));
+    void resetJgroups(Form<ModelNode> form) {
+        Metadata metadata = metadataRegistry.lookup(CACHE_CONTAINER_TEMPLATE.append(TRANSPORT + EQUALS + JGROUPS));
         crud.resetSingleton(Names.JGROUPS, jgroupsAddress(), form, metadata, new FinishReset<ModelNode>(form) {
             @Override
-            public void afterReset(final Form<ModelNode> form) {
+            public void afterReset(Form<ModelNode> form) {
                 reload();
             }
         });
     }
 
     private ResourceAddress jgroupsAddress() {
         return SELECTED_CACHE_CONTAINER_TEMPLATE
-                .append(TRANSPORT + ""="" + JGROUPS)
+                .append(TRANSPORT + EQUALS + JGROUPS)
                 .resolve(statementContext);
     }
+
+
+    // ------------------------------------------------------ inner classes
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @Requires({CACHE_CONTAINER_ADDRESS, DISTRIBUTED_CACHE_ADDRESS, INVALIDATION_CACHE_ADDRESS, LOCAL_CACHE_ADDRESS,
+            REPLICATED_CACHE_ADDRESS, THREAD_POOL_ADDRESS, TRANSPORT_JGROUPS_ADDRESS})
+    @NameToken(NameTokens.CACHE_CONTAINER)
+    public interface MyProxy extends ProxyPlace<CacheContainerPresenter> {
+    }
+
+    public interface MyView extends HalView, HasPresenter<CacheContainerPresenter> {
+        void update(CacheContainer cacheContainer, boolean jgroups);
+        void updateCacheBackups(Cache cache, List<NamedNode> backups);
+        void updateCacheStore(Cache cache, List<Property> stores);
+    }
+    // @formatter:on
 }",2017-10-16T13:25:42Z,344
"@@ -56,37 +56,6 @@
  */
 class StoreElement implements IsElement<HTMLElement>, Attachable, HasPresenter<CacheContainerPresenter> {
 
-    private static final class StoreTable {
-
-        final Store store;
-        final Table table;
-
-        private StoreTable(final Store store, final Table table) {
-            this.store = store;
-            this.table = table;
-        }
-
-        @Override
-        public boolean equals(final Object o) {
-            if (this == o) { return true; }
-            if (!(o instanceof StoreTable)) { return false; }
-
-            StoreTable that = (StoreTable) o;
-
-            //noinspection SimplifiableIfStatement
-            if (store != that.store) { return false; }
-            return table == that.table;
-        }
-
-        @Override
-        public int hashCode() {
-            int result = store.hashCode();
-            result = 31 * result + table.hashCode();
-            return result;
-        }
-    }
-
-
     private final EmptyState emptyState;
     private final HTMLElement headerForm;
     private final String selectStoreId;
@@ -286,4 +255,40 @@ private void formMode(Store store) {
         Elements.setVisible(headerForm, true);
         tabs.forEach((s, t) -> Elements.setVisible(t.asElement(), s == store));
     }
+
+
+    private static final class StoreTable {
+
+        final Store store;
+        final Table table;
+
+        private StoreTable(final Store store, final Table table) {
+            this.store = store;
+            this.table = table;
+        }
+
+        @Override
+        public boolean equals(final Object o) {
+            if (this == o) {
+                return true;
+            }
+            if (!(o instanceof StoreTable)) {
+                return false;
+            }
+
+            StoreTable that = (StoreTable) o;
+            //noinspection SimplifiableIfStatement
+            if (store != that.store) {
+                return false;
+            }
+            return table == that.table;
+        }
+
+        @Override
+        public int hashCode() {
+            int result = store.hashCode();
+            result = 31 * result + table.hashCode();
+            return result;
+        }
+    }
 }",2017-10-16T13:25:42Z,300
"@@ -126,6 +126,8 @@ public static HaPolicy fromResourceName(String resourceName) {
             case ModelDescriptionConstants.SHARED_STORE_SLAVE:
                 result = SHARED_STORE_SLAVE;
                 break;
+            default:
+                break;
         }
         return result;
     }",2017-10-16T13:25:42Z,345
"@@ -40,18 +40,6 @@ public class ModclusterPresenter
         extends MbuiPresenter<ModclusterPresenter.MyView, ModclusterPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    // @formatter:off
-    @ProxyCodeSplit
-    @Requires(ROOT_ADDRESS)
-    @NameToken(NameTokens.MODCLUSTER)
-    public interface MyProxy extends ProxyPlace<ModclusterPresenter> {}
-
-    public interface MyView extends MbuiView<ModclusterPresenter> {
-        void updateConfiguration(ModelNode payload);
-    }
-    // @formatter:on
-
-
     static final String ROOT_ADDRESS = ""/{selected.profile}/subsystem=modcluster/mod-cluster-config=configuration"";
     private static final AddressTemplate ROOT_TEMPLATE = AddressTemplate.of(ROOT_ADDRESS);
 
@@ -60,13 +48,13 @@ public interface MyView extends MbuiView<ModclusterPresenter> {
     private final StatementContext statementContext;
 
     @Inject
-    public ModclusterPresenter(final EventBus eventBus,
-            final MyView view,
-            final MyProxy myProxy,
-            final Finder finder,
-            final CrudOperations crud,
-            final FinderPathFactory finderPathFactory,
-            final StatementContext statementContext) {
+    public ModclusterPresenter(EventBus eventBus,
+            MyView view,
+            MyProxy myProxy,
+            Finder finder,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext) {
         super(eventBus, view, myProxy, finder);
         this.crud = crud;
         this.finderPathFactory = finderPathFactory;
@@ -93,4 +81,17 @@ public FinderPath finderPath() {
     protected void reload() {
         crud.read(ROOT_TEMPLATE, 2, result -> getView().updateConfiguration(result));
     }
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @Requires(ROOT_ADDRESS)
+    @NameToken(NameTokens.MODCLUSTER)
+    public interface MyProxy extends ProxyPlace<ModclusterPresenter> {
+    }
+
+    public interface MyView extends MbuiView<ModclusterPresenter> {
+        void updateConfiguration(ModelNode payload);
+    }
+    // @formatter:on
 }",2017-10-16T13:25:42Z,308
"@@ -41,17 +41,6 @@ public class RequestControllerPresenter
         extends MbuiPresenter<RequestControllerPresenter.MyView, RequestControllerPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    // @formatter:off
-    @ProxyCodeSplit
-    @Requires(ROOT_ADDRESS)
-    @NameToken(NameTokens.REQUEST_CONTROLLER)
-    public interface MyProxy extends ProxyPlace<RequestControllerPresenter> {}
-
-    public interface MyView extends MbuiView<RequestControllerPresenter> {
-        void update(ModelNode payload);
-    }
-    // @formatter:on
-
     private static final String ROOT_ADDRESS = ""/{selected.profile}/subsystem=request-controller"";
     private static final AddressTemplate ROOT_TEMPLATE = AddressTemplate.of(ROOT_ADDRESS);
 
@@ -60,13 +49,13 @@ public interface MyView extends MbuiView<RequestControllerPresenter> {
     private final StatementContext statementContext;
 
     @Inject
-    public RequestControllerPresenter(final EventBus eventBus,
-            final RequestControllerPresenter.MyView view,
-            final RequestControllerPresenter.MyProxy proxy,
-            final Finder finder,
-            final CrudOperations crud,
-            final FinderPathFactory finderPathFactory,
-            final StatementContext statementContext) {
+    public RequestControllerPresenter(EventBus eventBus,
+            RequestControllerPresenter.MyView view,
+            RequestControllerPresenter.MyProxy proxy,
+            Finder finder,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext) {
         super(eventBus, view, proxy, finder);
         this.crud = crud;
         this.finderPathFactory = finderPathFactory;
@@ -93,4 +82,17 @@ public FinderPath finderPath() {
     protected void reload() {
         crud.readRecursive(ROOT_TEMPLATE, result -> getView().update(result));
     }
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @Requires(ROOT_ADDRESS)
+    @NameToken(NameTokens.REQUEST_CONTROLLER)
+    public interface MyProxy extends ProxyPlace<RequestControllerPresenter> {
+    }
+
+    public interface MyView extends MbuiView<RequestControllerPresenter> {
+        void update(ModelNode payload);
+    }
+    // @formatter:on
 }",2017-10-16T13:25:42Z,346
"@@ -26,18 +26,6 @@
 
 class ResourceAdapter extends NamedNode {
 
-    enum AdapterType {
-        ARCHIVE(Names.ARCHIVE.toLowerCase()), MODULE(Names.MODULE.toLowerCase()), UNKNOWN(Names.NOT_AVAILABLE);
-
-        private final String text;
-
-        AdapterType(final String text) {this.text = text;}
-
-        public String text() {
-            return text;
-        }
-    }
-
     ResourceAdapter(final Property property) {
         super(property);
     }
@@ -66,5 +54,20 @@ String getArchive() {
     String getModule() {
         return hasDefined(MODULE) ? get(MODULE).asString() : null;
     }
+
+
+    enum AdapterType {
+        ARCHIVE(Names.ARCHIVE.toLowerCase()), MODULE(Names.MODULE.toLowerCase()), UNKNOWN(Names.NOT_AVAILABLE);
+
+        private final String text;
+
+        AdapterType(final String text) {
+            this.text = text;
+        }
+
+        public String text() {
+            return text;
+        }
+    }
 }
 ",2017-10-16T13:25:42Z,347
"@@ -45,31 +45,19 @@ public class ResourceAdapterPresenter
         extends MbuiPresenter<ResourceAdapterPresenter.MyView, ResourceAdapterPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    // @formatter:off
-    @ProxyCodeSplit
-    @NameToken(NameTokens.RESOURCE_ADAPTER)
-    @Requires(AddressTemplates.RESOURCE_ADAPTER_ADDRESS)
-    public interface MyProxy extends ProxyPlace<ResourceAdapterPresenter> {}
-
-    public interface MyView extends MbuiView<ResourceAdapterPresenter> {
-        void update(ResourceAdapter resourceAdapter);
-    }
-    // @formatter:on
-
-
     private final CrudOperations crud;
     private final FinderPathFactory finderPathFactory;
     private final StatementContext statementContext;
     private String resourceAdapter;
 
     @Inject
-    public ResourceAdapterPresenter(final EventBus eventBus,
-            final MyView view,
-            final MyProxy myProxy,
-            final Finder finder,
-            final CrudOperations crud,
-            final FinderPathFactory finderPathFactory,
-            final StatementContext statementContext) {
+    public ResourceAdapterPresenter(EventBus eventBus,
+            MyView view,
+            MyProxy myProxy,
+            Finder finder,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext) {
         super(eventBus, view, myProxy, finder);
         this.crud = crud;
         this.finderPathFactory = finderPathFactory;
@@ -83,7 +71,7 @@ protected void onBind() {
     }
 
     @Override
-    public void prepareFromRequest(final PlaceRequest request) {
+    public void prepareFromRequest(PlaceRequest request) {
         super.prepareFromRequest(request);
         resourceAdapter = request.getParameter(NAME, null);
     }
@@ -109,4 +97,17 @@ protected void reload() {
         ResourceAddress address = SELECTED_RESOURCE_ADAPTER_TEMPLATE.resolve(statementContext);
         crud.readRecursive(address, result -> getView().update(new ResourceAdapter(resourceAdapter, result)));
     }
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @NameToken(NameTokens.RESOURCE_ADAPTER)
+    @Requires(AddressTemplates.RESOURCE_ADAPTER_ADDRESS)
+    public interface MyProxy extends ProxyPlace<ResourceAdapterPresenter> {
+    }
+
+    public interface MyView extends MbuiView<ResourceAdapterPresenter> {
+        void update(ResourceAdapter resourceAdapter);
+    }
+    // @formatter:on
 }",2017-10-16T13:25:42Z,348
"@@ -64,21 +64,10 @@ public class TransactionPresenter
         extends MbuiPresenter<TransactionPresenter.MyView, TransactionPresenter.MyProxy>
         implements SupportsExpertMode {
 
-    // @formatter:off
-    @ProxyCodeSplit
-    @NameToken(NameTokens.TRANSACTIONS)
-    @Requires(TRANSACTIONS_SUBSYSTEM_ADDRESS)
-    public interface MyProxy extends ProxyPlace<TransactionPresenter> {}
-
-    public interface MyView extends MbuiView<TransactionPresenter> {
-        void updateConfiguration(ModelNode conf);
-    }
-    // @formatter:on
-
     private static final String PROCESS_ID_UUID = ""process-id-uuid"";
     private static final String PROCESS_ID_SOCKET_BINDING = ""process-id-socket-binding"";
     private static final String PROCESS_ID_SOCKET_MAX_PORTS = ""process-id-socket-max-ports"";
-    private final static ValidationResult invalid = ValidationResult
+    private static final ValidationResult invalid = ValidationResult
             .invalid(""Validation error, see error messages below."");
 
     private final CrudOperations crud;
@@ -89,16 +78,16 @@ public interface MyView extends MbuiView<TransactionPresenter> {
     private final Resources resources;
 
     @Inject
-    public TransactionPresenter(final EventBus eventBus,
-            final MyView view,
-            final MyProxy proxy,
-            final Finder finder,
-            final CrudOperations crud,
-            final FinderPathFactory finderPathFactory,
-            final StatementContext statementContext,
-            final Dispatcher dispatcher,
-            final MetadataRegistry metadataRegistry,
-            final Resources resources) {
+    public TransactionPresenter(EventBus eventBus,
+            MyView view,
+            MyProxy proxy,
+            Finder finder,
+            CrudOperations crud,
+            FinderPathFactory finderPathFactory,
+            StatementContext statementContext,
+            Dispatcher dispatcher,
+            MetadataRegistry metadataRegistry,
+            Resources resources) {
         super(eventBus, view, proxy, finder);
         this.crud = crud;
         this.finderPathFactory = finderPathFactory;
@@ -177,7 +166,7 @@ void resetProcessForm(Form<ModelNode> form) {
         ResourceAddress address = TRANSACTIONS_SUBSYSTEM_TEMPLATE.resolve(statementContext);
         crud.resetSingleton(""Process"", address, form, metadata, new FinishReset<ModelNode>(form) {
             @Override
-            public void afterReset(final Form<ModelNode> form) {
+            public void afterReset(Form<ModelNode> form) {
                 reload();
             }
         });
@@ -321,4 +310,17 @@ FormValidation<ModelNode> getProcessFormValidation() {
     FormValidation<ModelNode> getJdbcFormValidation() {
         return jdbcFormValidation;
     }
+
+
+    // @formatter:off
+    @ProxyCodeSplit
+    @NameToken(NameTokens.TRANSACTIONS)
+    @Requires(TRANSACTIONS_SUBSYSTEM_ADDRESS)
+    public interface MyProxy extends ProxyPlace<TransactionPresenter> {
+    }
+
+    public interface MyView extends MbuiView<TransactionPresenter> {
+        void updateConfiguration(ModelNode conf);
+    }
+    // @formatter:on
 }",2017-10-16T13:25:42Z,3
"@@ -101,6 +101,8 @@ public String filter(String resource) {
                         return handlerChainType.resource;
                     case HANDLER_CHAIN_NAME:
                         return handlerChain != null ? handlerChain.getName() : null;
+                    default:
+                        break;
                 }
                 return null;
             }
@@ -346,7 +348,8 @@ private void updateHandlers(ModelNode modelNode) {
     @ProxyCodeSplit
     @NameToken(NameTokens.WEBSERVICES)
     @Requires(AddressTemplates.WEBSERVICES_ADDRESS)
-    public interface MyProxy extends ProxyPlace<WebservicePresenter> {}
+    public interface MyProxy extends ProxyPlace<WebservicePresenter> {
+    }
 
     public interface MyView extends HalView, HasPresenter<WebservicePresenter> {
         void update(ModelNode payload);",2017-10-16T13:25:42Z,303
"@@ -32,6 +32,7 @@ interface AddressTemplates {
     String REPLICATED_CACHE_ADDRESS = CACHE_CONTAINER_ADDRESS + ""/replicated-cache=*"";
 
     String TRANSPORT_JGROUPS_ADDRESS = CACHE_CONTAINER_ADDRESS + ""/transport=jgroups"";
+    String THREAD_POOL_ADDRESS = CACHE_CONTAINER_ADDRESS + ""/thread-pool=*"";
 
     AddressTemplate INFINISPAN_SUBSYSTEM_TEMPLATE = AddressTemplate.of(INFINISPAN_SUBSYSTEM_ADDRESS);
 ",2017-09-21T19:09:49Z,369
"@@ -31,17 +31,19 @@
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.spi.AsyncColumn;
+import org.jboss.hal.spi.Requires;
 
 import static java.util.Arrays.asList;
 import static java.util.stream.Collectors.toList;
+import static org.jboss.hal.client.configuration.subsystem.infinispan.AddressTemplates.CACHE_CONTAINER_ADDRESS;
 import static org.jboss.hal.client.configuration.subsystem.infinispan.AddressTemplates.CACHE_CONTAINER_TEMPLATE;
 import static org.jboss.hal.client.configuration.subsystem.infinispan.AddressTemplates.INFINISPAN_SUBSYSTEM_TEMPLATE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.CACHE_CONTAINER;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.DEFAULT_CACHE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.NAME;
 
 @AsyncColumn(Ids.CACHE_CONTAINER)
-// TODO Add @Requires to make the column add action work with RBAC
+@Requires(value = {CACHE_CONTAINER_ADDRESS}, recursive = false)
 public class CacheContainerColumn extends FinderColumn<CacheContainer> {
 
     @Inject",2017-09-21T19:09:49Z,370
"@@ -38,14 +38,14 @@
 import org.jboss.hal.core.mvp.HalView;
 import org.jboss.hal.core.mvp.HasPresenter;
 import org.jboss.hal.core.mvp.SupportsExpertMode;
-import org.jboss.hal.dmr.ModelNode;
-import org.jboss.hal.dmr.Property;
-import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.dmr.Composite;
 import org.jboss.hal.dmr.CompositeResult;
+import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.NamedNode;
 import org.jboss.hal.dmr.Operation;
+import org.jboss.hal.dmr.Property;
 import org.jboss.hal.dmr.ResourceAddress;
+import org.jboss.hal.dmr.dispatch.Dispatcher;
 import org.jboss.hal.meta.Metadata;
 import org.jboss.hal.meta.MetadataRegistry;
 import org.jboss.hal.meta.SelectionAwareStatementContext;
@@ -58,9 +58,7 @@
 import org.jboss.hal.spi.MessageEvent;
 import org.jboss.hal.spi.Requires;
 
-import static org.jboss.hal.client.configuration.subsystem.infinispan.AddressTemplates.CACHE_CONTAINER_ADDRESS;
-import static org.jboss.hal.client.configuration.subsystem.infinispan.AddressTemplates.CACHE_CONTAINER_TEMPLATE;
-import static org.jboss.hal.client.configuration.subsystem.infinispan.AddressTemplates.SELECTED_CACHE_CONTAINER_TEMPLATE;
+import static org.jboss.hal.client.configuration.subsystem.infinispan.AddressTemplates.*;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.*;
 import static org.jboss.hal.dmr.ModelNodeHelper.asNamedNodes;
 
@@ -70,7 +68,8 @@ public class CacheContainerPresenter
 
     // @formatter:off
     @ProxyCodeSplit
-    @Requires(CACHE_CONTAINER_ADDRESS)
+    @Requires({CACHE_CONTAINER_ADDRESS, DISTRIBUTED_CACHE_ADDRESS, INVALIDATION_CACHE_ADDRESS, LOCAL_CACHE_ADDRESS,
+            REPLICATED_CACHE_ADDRESS, THREAD_POOL_ADDRESS, TRANSPORT_JGROUPS_ADDRESS})
     @NameToken(NameTokens.CACHE_CONTAINER)
     public interface MyProxy extends ProxyPlace<CacheContainerPresenter> {}
 ",2017-09-21T19:09:49Z,344
"@@ -17,6 +17,7 @@
 
 import javax.inject.Inject;
 
+import com.google.gwt.core.client.GWT;
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.client.PresenterWidget;
 import com.gwtplatform.mvp.client.proxy.PlaceManager;
@@ -288,7 +289,7 @@ void clearMessages() {
     }
 
     void reconnect() {
-        String url = Endpoints.getBaseUrl() + ""?"" + EndpointManager.CONNECT_PARAMETER;
+        String url = GWT.getModuleBaseURL() + ""?"" + EndpointManager.CONNECT_PARAMETER;
         window.location.assign(url);
     }
 ",2017-07-27T10:35:37Z,95
"@@ -15,14 +15,17 @@
  */
 package org.jboss.hal.client.skeleton;
 
+import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import javax.annotation.PostConstruct;
 
 import com.google.common.base.Strings;
 import com.google.gwt.safehtml.shared.SafeHtmlUtils;
+import com.google.web.bindery.event.shared.HandlerRegistration;
 import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
 import elemental2.dom.Element;
 import elemental2.dom.HTMLElement;
@@ -59,6 +62,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import static java.util.Arrays.asList;
 import static java.util.stream.Collectors.joining;
 import static java.util.stream.StreamSupport.stream;
 import static org.jboss.gwt.elemento.core.Elements.a;
@@ -101,6 +105,9 @@ public static HeaderView create(final Places places, final AccessControl ac, fin
     private HeaderPresenter presenter;
     private MessagePanel messagePanel;
     private MessageSink messageSink;
+    private HandlerRegistration switchModeHandler;
+    private List<HandlerRegistration> handlers;
+    private List<HandlerRegistration> breadcrumbHandlers;
 
     @DataElement HTMLElement logoFirst;
     @DataElement HTMLElement logoLast;
@@ -170,19 +177,35 @@ void init() {
         tlc.put(NameTokens.MANAGEMENT,      (HTMLElement) root.querySelector(""#"" + Ids.TLC_MANAGEMENT));
         // @formatter:on
 
+        handlers = new ArrayList<>();
+        breadcrumbHandlers = new ArrayList<>();
         for (Map.Entry<String, HTMLElement> entry : tlc.entrySet()) {
-            bind(entry.getValue(), click, event -> {
+            handlers.add(bind(entry.getValue(), click, event -> {
                 if (tlcPlaceRequests.containsKey(entry.getKey())) {
                     presenter.goTo(tlcPlaceRequests.get(entry.getKey()));
                 }
-            });
+            }));
         }
-        bind(logoLink, click, event -> presenter.goTo(NameTokens.HOMEPAGE));
-        bind(backLink, click, event -> presenter.goTo(backPlaceRequest));
-        bind(reloadLink, click, event -> presenter.reload());
-        bind(messages, click, event -> messageSink.asElement().classList.toggle(hide));
-        bind(logout, click, event -> presenter.logout());
-        bind(reconnect, click, event -> presenter.reconnect());
+        handlers.addAll(asList(
+                bind(logoLink, click, event -> presenter.goTo(NameTokens.HOMEPAGE)),
+                bind(backLink, click, event -> presenter.goTo(backPlaceRequest)),
+                bind(reloadLink, click, event -> presenter.reload()),
+                bind(messages, click, event -> messageSink.asElement().classList.toggle(hide)),
+                bind(logout, click, event -> presenter.logout()),
+                bind(reconnect, click, event -> presenter.reconnect())));
+    }
+
+    @Override
+    public void detach() {
+        super.detach();
+        for (HandlerRegistration handler : breadcrumbHandlers) {
+            handler.removeHandler();
+        }
+        breadcrumbHandlers.clear();
+        for (HandlerRegistration handler : handlers) {
+            handler.removeHandler();
+        }
+        handlers.clear();
     }
 
     @Override
@@ -379,6 +402,11 @@ public void updateBreadcrumb(final FinderContext finderContext) {
         clearBreadcrumb();
         FinderPath currentPath = new FinderPath();
 
+        for (HandlerRegistration handler : breadcrumbHandlers) {
+            handler.removeHandler();
+        }
+        breadcrumbHandlers.clear();
+
         for (Iterator<FinderSegment> iterator = finderContext.getPath().iterator(); iterator.hasNext(); ) {
             FinderSegment<Object> segment = iterator.next();
             if (segment.getColumnId() == null || segment.getItemId() == null) {
@@ -423,7 +451,7 @@ public void updateBreadcrumb(final FinderContext finderContext) {
                         .aria(UIConstants.EXPANDED, UIConstants.FALSE)
                         .attr(UIConstants.ROLE, UIConstants.BUTTON)
                         .asElement());
-                bind(a, click, event -> {
+                breadcrumbHandlers.add(bind(a, click, event -> {
                     Element ul = a.nextElementSibling;
                     segment.dropdown(finderContext, items -> {
                         Elements.removeChildrenFrom(ul);
@@ -443,7 +471,7 @@ public void updateBreadcrumb(final FinderContext finderContext) {
                             }
                         }
                     });
-                });
+                }));
 
                 String breadcrumbValue = segment.getItemTitle();
                 if (breadcrumbValue.length() > MAX_BREADCRUMB_VALUE_LENGTH) {
@@ -524,7 +552,10 @@ private void clearBreadcrumb() {
 
     @Override
     public void showExpertMode(final ResourceAddress address) {
-        bind(switchModeLink, click, event -> presenter.switchToExpertMode(address));
+        if (switchModeHandler != null) {
+            switchModeHandler.removeHandler();
+        }
+        switchModeHandler = bind(switchModeLink, click, event -> presenter.switchToExpertMode(address));
         switchModeLink.title = resources().constants().expertMode();
         switchModeIcon.className = fontAwesome(""sitemap"", large);
         Elements.setVisible(switchModeLink, true);
@@ -538,7 +569,10 @@ public void showBackToNormalMode() {
             finderContext.reset(disconnected);
             updateBreadcrumb(finderContext);
         }
-        bind(switchModeLink, click, event -> presenter.backToNormalMode());
+        if (switchModeHandler != null) {
+            switchModeHandler.removeHandler();
+        }
+        switchModeHandler = bind(switchModeLink, click, event -> presenter.backToNormalMode());
         switchModeLink.title = resources().constants().backToNormalMode();
         switchModeIcon.className = fontAwesome(""th-list"", large);
         Elements.setVisible(switchModeLink, true);",2017-07-27T10:35:37Z,98
"@@ -27,7 +27,7 @@
     <script src=""../../public/js/external.js""></script>
 </head>
 <body>
-<nav data-element=""header"" class=""navbar navbar-default navbar-pf navbar-fixed-top"" role=""navigation"">
+<nav data-element=""header"" class=""navbar navbar-default navbar-pf navbar-fixed-top"">
     <div class=""navbar-header"">
         <button type=""button"" class=""navbar-toggle"" data-toggle=""collapse"" data-target="".hal-header-collapse"">
             <span class=""sr-only"">{{resources().constants().toggleNavigation()}}</span>
@@ -69,7 +69,7 @@
             </li>
             <li class=""dropdown"" data-element=""connectedToContainer"">
                 <a class=""clickable dropdown-toggle"" data-toggle=""dropdown"">
-                    <span class=""fa fa-globe""></span>
+                    <span class=""fa fa-plug""></span>
                     <b class=""caret""></b>
                 </a>
                 <ul class=""dropdown-menu"">",2017-07-27T10:35:37Z,162
"@@ -160,6 +160,7 @@
 import org.jboss.hal.client.tools.MacroEditorView;
 import org.jboss.hal.client.tools.ModelBrowserPresenter;
 import org.jboss.hal.client.tools.ModelBrowserView;
+import org.jboss.hal.core.ExceptionHandler;
 import org.jboss.hal.core.mvp.HalPlaceManager;
 import org.jboss.hal.meta.token.NameTokens;
 import org.jboss.hal.spi.GinModule;",2018-02-01T16:28:42Z,44
"@@ -20,10 +20,10 @@
 import com.gwtplatform.mvp.client.Bootstrapper;
 import com.gwtplatform.mvp.client.proxy.PlaceManager;
 import elemental2.dom.Event;
-import org.jboss.hal.client.ExceptionHandler;
 import org.jboss.hal.client.bootstrap.endpoint.EndpointManager;
 import org.jboss.hal.client.bootstrap.tasks.BootstrapTasks;
 import org.jboss.hal.config.Endpoints;
+import org.jboss.hal.core.ExceptionHandler;
 import org.jetbrains.annotations.NonNls;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;",2018-02-01T16:28:42Z,22
"@@ -15,13 +15,29 @@
  */
 package org.jboss.hal.client.bootstrap;
 
+import com.google.gwt.core.client.GWT;
 import com.gwtplatform.mvp.client.PreBootstrapper;
-import org.jboss.hal.client.ExceptionHandler;
+import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.hal.config.Endpoints;
+import org.jboss.hal.resources.Names;
+import org.jetbrains.annotations.NonNls;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import static elemental2.dom.DomGlobal.document;
 
 public class HalPreBootstrapper implements PreBootstrapper {
 
+    @NonNls private static final Logger logger = LoggerFactory.getLogger(HalPreBootstrapper.class);
+
     @Override
     public void onPreBootstrap() {
-        ExceptionHandler.beforeBootstrap();
+        GWT.setUncaughtExceptionHandler(e -> {
+            LoadingPanel.get().off();
+            String errorMessage = e != null ? e.getMessage() : Names.NOT_AVAILABLE;
+            logger.error(""Uncaught bootstrap error: {}"", errorMessage);
+            Elements.removeChildrenFrom(document.body);
+            document.body.appendChild(BootstrapFailed.create(errorMessage, Endpoints.INSTANCE).asElement());
+        });
     }
 }",2018-02-01T16:28:42Z,73
"@@ -58,6 +58,12 @@ public class Core {
     @JsIgnore
     public static Core INSTANCE;
 
+    @JsIgnore
+    public static void setPendingLifecycleAction(boolean value) {
+        Dispatcher.setPendingLifecycleAction(value);
+        ExceptionHandler.setPendingLifecycleAction(value);
+    }
+
     private final CrudOperations crud;
     private final Dispatcher dispatcher;
     private final Endpoints endpoints;
@@ -71,16 +77,16 @@ public class Core {
 
     @Inject
     @JsIgnore
-    public Core(final CrudOperations crud,
-            final Dispatcher dispatcher,
-            final Endpoints endpoints,
-            final Environment environment,
-            final EventBus eventBus,
-            final ExtensionRegistry extensionRegistry,
-            final MetadataProcessor metadataProcessor,
-            final MetadataRegistry metadataRegistry,
-            final StatementContext statementContext,
-            final TableButtonFactory tableButtonFactory) {
+    public Core(CrudOperations crud,
+            Dispatcher dispatcher,
+            Endpoints endpoints,
+            Environment environment,
+            EventBus eventBus,
+            ExtensionRegistry extensionRegistry,
+            MetadataProcessor metadataProcessor,
+            MetadataRegistry metadataRegistry,
+            StatementContext statementContext,
+            TableButtonFactory tableButtonFactory) {
         this.crud = crud;
         this.dispatcher = dispatcher;
         this.endpoints = endpoints;
@@ -295,7 +301,7 @@ public void jsSuccess(String message) {
      */
     @JsMethod(name = ""table"")
     @EsReturn(""TableBuilder"")
-    public ModelNodeTable.Builder<ModelNode> jsTable(final Object meta) {
+    public ModelNodeTable.Builder<ModelNode> jsTable(Object meta) {
         return new ModelNodeTable.Builder<>(Ids.build(Ids.uniqueId(), Ids.TAB), jsMetadata(""table"", meta));
     }
 ",2018-02-01T16:28:42Z,203
"@@ -13,17 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.jboss.hal.client;
+package org.jboss.hal.core;
 
 import javax.inject.Inject;
 
 import com.google.gwt.core.client.GWT;
 import com.google.web.bindery.event.shared.EventBus;
 import com.gwtplatform.mvp.client.proxy.PlaceManager;
 import org.jboss.gwt.elemento.core.Elements;
-import org.jboss.hal.client.bootstrap.BootstrapFailed;
-import org.jboss.hal.client.bootstrap.LoadingPanel;
-import org.jboss.hal.config.Endpoints;
 import org.jboss.hal.flow.Progress;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
@@ -40,17 +37,13 @@
 public class ExceptionHandler {
 
     @NonNls private static final Logger logger = LoggerFactory.getLogger(ExceptionHandler.class);
+    private static boolean pendingLifecycleAction = false;
 
-    public static void beforeBootstrap() {
-        GWT.setUncaughtExceptionHandler(e -> {
-            LoadingPanel.get().off();
-            String errorMessage = e != null ? e.getMessage() : Names.NOT_AVAILABLE;
-            logger.error(""Uncaught bootstrap error: {}"", errorMessage);
-            document.body.appendChild(BootstrapFailed.create(errorMessage, Endpoints.INSTANCE).asElement());
-        });
+    public static void setPendingLifecycleAction(boolean value) {
+        pendingLifecycleAction = value;
+        logger.debug(""ExceptionHandler.pendingLifecycleAction = {}"", pendingLifecycleAction);
     }
 
-
     private final EventBus eventBus;
     private final PlaceManager placeManager;
     private final Progress progress;
@@ -69,13 +62,15 @@ public ExceptionHandler(EventBus eventBus,
 
     public void afterBootstrap() {
         GWT.setUncaughtExceptionHandler(e -> {
-            String errorMessage = e != null ? e.getMessage() : Names.NOT_AVAILABLE;
-            logger.error(""Uncaught exception: {}"", errorMessage);
-            placeManager.unlock();
-            progress.finish();
-            stopProgress();
-            MessageEvent.fire(eventBus,
-                    Message.error(resources.messages().unknownError(), errorMessage));
+            if (!pendingLifecycleAction) {
+                String errorMessage = e != null ? e.getMessage() : Names.NOT_AVAILABLE;
+                logger.error(""Uncaught exception: {}"", errorMessage);
+                placeManager.unlock();
+                progress.finish();
+                stopProgress();
+                MessageEvent.fire(eventBus,
+                        Message.error(resources.messages().unknownError(), errorMessage));
+            }
         });
     }
 ",2018-02-01T16:28:42Z,2
"@@ -29,6 +29,7 @@
 import org.jboss.hal.ballroom.dialog.Dialog;
 import org.jboss.hal.ballroom.dialog.DialogFactory;
 import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.core.Core;
 import org.jboss.hal.core.mbui.form.OperationFormBuilder;
 import org.jboss.hal.core.runtime.Action;
 import org.jboss.hal.core.runtime.Result;
@@ -148,7 +149,7 @@ public void suspend(ServerGroup serverGroup) {
         if (!startedServers.isEmpty()) {
             metadataProcessor.lookup(serverGroupTemplate(serverGroup), progress.get(), new MetadataCallback() {
                 @Override
-                public void onMetadata(final Metadata metadata) {
+                public void onMetadata(Metadata metadata) {
                     String id = Ids.build(SUSPEND_SERVERS, serverGroup.getName(), Ids.FORM);
                     Form<ModelNode> form = new OperationFormBuilder<>(id, metadata, SUSPEND_SERVERS).build();
 
@@ -186,7 +187,7 @@ public void onMetadata(final Metadata metadata) {
                 }
 
                 @Override
-                public void onError(final Throwable error) {
+                public void onError(Throwable error) {
                     MessageEvent.fire(eventBus,
                             Message.error(resources.messages().metadataError(), error.getMessage()));
                 }
@@ -223,7 +224,7 @@ public void stop(ServerGroup serverGroup) {
         if (!startedServers.isEmpty()) {
             metadataProcessor.lookup(serverGroupTemplate(serverGroup), progress.get(), new MetadataCallback() {
                 @Override
-                public void onMetadata(final Metadata metadata) {
+                public void onMetadata(Metadata metadata) {
                     String id = Ids.build(STOP_SERVERS, serverGroup.getName(), Ids.FORM);
                     Form<ModelNode> form = new OperationFormBuilder<>(id, metadata, STOP_SERVERS)
                             .include(TIMEOUT).build();
@@ -264,7 +265,7 @@ public void onMetadata(final Metadata metadata) {
                 }
 
                 @Override
-                public void onError(final Throwable error) {
+                public void onError(Throwable error) {
                     MessageEvent
                             .fire(eventBus, Message.error(resources.messages().metadataError(), error.getMessage()));
                 }
@@ -353,13 +354,13 @@ private void finish(ServerGroup serverGroup, List<Server> servers, Result result
     }
 
     private void markAsPending(ServerGroup serverGroup) {
-        Dispatcher.setPendingLifecycleAction(true);
+        Core.setPendingLifecycleAction(true);
         pendingServerGroups.put(serverGroup.getName(), serverGroup);
         logger.debug(""Mark server group {} as pending"", serverGroup.getName());
     }
 
     private void clearPending(ServerGroup serverGroup) {
-        Dispatcher.setPendingLifecycleAction(false);
+        Core.setPendingLifecycleAction(false);
         pendingServerGroups.remove(serverGroup.getName());
         logger.debug(""Clear pending state for server group {}"", serverGroup.getName());
     }
@@ -412,8 +413,8 @@ private class ServerGroupTimeoutCallback implements CompletableSubscriber {
         private final List<Server> servers;
         private final SafeHtml successMessage;
 
-        ServerGroupTimeoutCallback(final ServerGroup serverGroup, final List<Server> servers,
-                final SafeHtml successMessage) {
+        ServerGroupTimeoutCallback(ServerGroup serverGroup, List<Server> servers,
+                SafeHtml successMessage) {
             this.serverGroup = serverGroup;
             this.servers = servers;
             this.successMessage = successMessage;
@@ -442,15 +443,15 @@ private class ServerGroupFailedCallback implements Dispatcher.OnFail {
         private final List<Server> servers;
         private final SafeHtml errorMessage;
 
-        ServerGroupFailedCallback(final ServerGroup serverGroup, final List<Server> servers,
-                final SafeHtml errorMessage) {
+        ServerGroupFailedCallback(ServerGroup serverGroup, List<Server> servers,
+                SafeHtml errorMessage) {
             this.serverGroup = serverGroup;
             this.servers = servers;
             this.errorMessage = errorMessage;
         }
 
         @Override
-        public void onFailed(final Operation operation, final String failure) {
+        public void onFailed(Operation operation, String failure) {
             finish(serverGroup, servers, Result.ERROR, Message.error(errorMessage, failure));
         }
     }
@@ -462,14 +463,14 @@ private class ServerGroupExceptionCallback implements Dispatcher.OnError {
         private final List<Server> servers;
         private final SafeHtml errorMessage;
 
-        ServerGroupExceptionCallback(final ServerGroup serverGroup, final List<Server> servers, SafeHtml errorMessage) {
+        ServerGroupExceptionCallback(ServerGroup serverGroup, List<Server> servers, SafeHtml errorMessage) {
             this.serverGroup = serverGroup;
             this.servers = servers;
             this.errorMessage = errorMessage;
         }
 
         @Override
-        public void onException(final Operation operation, final Throwable exception) {
+        public void onException(Operation operation, Throwable exception) {
             finish(serverGroup, servers, Result.ERROR, Message.error(errorMessage, exception.getMessage()));
         }
     }",2018-02-01T16:28:42Z,96
"@@ -28,6 +28,7 @@
 import org.jboss.hal.ballroom.dialog.Dialog;
 import org.jboss.hal.ballroom.dialog.DialogFactory;
 import org.jboss.hal.ballroom.form.Form;
+import org.jboss.hal.core.Core;
 import org.jboss.hal.core.mbui.form.OperationFormBuilder;
 import org.jboss.hal.core.runtime.Action;
 import org.jboss.hal.core.runtime.Result;
@@ -65,7 +66,7 @@
 public class HostActions {
 
     private static final int RELOAD_TIMEOUT = 10; // seconds w/o servers
-    private static final int RESTART_TIMEOUT = 15; // seconds w/o servers
+    private static final int RESTART_TIMEOUT = 20; // seconds w/o servers
     @NonNls private static final Logger logger = LoggerFactory.getLogger(HostActions.class);
 
     private static AddressTemplate hostTemplate(Host host) {
@@ -100,10 +101,10 @@ public HostActions(EventBus eventBus,
     // ------------------------------------------------------ reload
 
     @SuppressWarnings(""HardCodedStringLiteral"")
-    public void reload(final Host host) {
+    public void reload(Host host) {
         metadataProcessor.lookup(hostTemplate(host), progress.get(), new MetadataCallback() {
             @Override
-            public void onMetadata(final Metadata metadata) {
+            public void onMetadata(Metadata metadata) {
                 Form<ModelNode> form = new OperationFormBuilder<>(
                         Ids.build(RELOAD_HOST, host.getName(), Ids.FORM), metadata, RELOAD)
                         .include(RESTART_SERVERS)
@@ -157,7 +158,7 @@ public void onMetadata(final Metadata metadata) {
             }
 
             @Override
-            public void onError(final Throwable error) {
+            public void onError(Throwable error) {
                 MessageEvent.fire(eventBus,
                         Message.error(resources.messages().metadataError(), error.getMessage()));
             }
@@ -167,14 +168,14 @@ public void onError(final Throwable error) {
 
     // ------------------------------------------------------ restart
 
-    public void restart(final Host host) {
+    public void restart(Host host) {
         SafeHtml question = host.isDomainController()
                 ? resources.messages().restartDomainControllerQuestion(host.getName())
                 : resources.messages().restartHostControllerQuestion(host.getName());
         restart(host, question);
     }
 
-    public void restart(final Host host, SafeHtml question) {
+    public void restart(Host host, SafeHtml question) {
         DialogFactory.showConfirmation(resources.messages().restart(host.getName()), question, () -> {
             // execute the restart with a little delay to ensure the confirmation dialog is closed
             // before the next dialog is opened (only one modal can be open at a time!)
@@ -275,13 +276,13 @@ private void finish(Host host, List<Server> servers, Result result, Message mess
     }
 
     private void markAsPending(Host host) {
-        Dispatcher.setPendingLifecycleAction(true);
+        Core.setPendingLifecycleAction(true);
         pendingHosts.put(host.getName(), host);
         logger.debug(""Mark host {} as pending"", host.getName());
     }
 
     private void clearPending(Host host) {
-        Dispatcher.setPendingLifecycleAction(false);
+        Core.setPendingLifecycleAction(false);
         pendingHosts.remove(host.getName());
         logger.debug(""Clear pending state for host {}"", host.getName());
     }
@@ -324,14 +325,14 @@ private class HostFailedCallback implements Dispatcher.OnFail {
         private final List<Server> servers;
         private final SafeHtml errorMessage;
 
-        HostFailedCallback(final Host host, final List<Server> servers, final SafeHtml errorMessage) {
+        HostFailedCallback(Host host, List<Server> servers, SafeHtml errorMessage) {
             this.host = host;
             this.servers = servers;
             this.errorMessage = errorMessage;
         }
 
         @Override
-        public void onFailed(final Operation operation, final String failure) {
+        public void onFailed(Operation operation, String failure) {
             finish(host, servers, Result.ERROR, Message.error(errorMessage, failure));
         }
     }
@@ -343,14 +344,14 @@ private class HostExceptionCallback implements Dispatcher.OnError {
         private final List<Server> servers;
         private final SafeHtml errorMessage;
 
-        HostExceptionCallback(final Host host, final List<Server> servers, final SafeHtml errorMessage) {
+        HostExceptionCallback(Host host, List<Server> servers, SafeHtml errorMessage) {
             this.host = host;
             this.servers = servers;
             this.errorMessage = errorMessage;
         }
 
         @Override
-        public void onException(final Operation operation, final Throwable exception) {
+        public void onException(Operation operation, Throwable exception) {
             finish(host, servers, Result.ERROR, Message.error(errorMessage, exception.getMessage()));
         }
     }",2018-02-01T16:28:42Z,39
"@@ -39,6 +39,7 @@
 import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.ballroom.form.SingleSelectBoxItem;
 import org.jboss.hal.ballroom.form.TextBoxItem;
+import org.jboss.hal.core.Core;
 import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
 import org.jboss.hal.core.mbui.dialog.NameItem;
 import org.jboss.hal.core.mbui.form.ModelNodeForm;
@@ -361,7 +362,6 @@ private void reloadRestart(Server server, Operation operation, Action action, in
                             .subscribe(new ServerTimeoutCallback(server, action, successMessage)),
                     new ServerFailedCallback(server, errorMessage),
                     new ServerExceptionCallback(server, errorMessage));
-
         });
     }
 
@@ -688,13 +688,13 @@ private void finish(Server server, Result result, Message message) {
     }
 
     public void markAsPending(Server server) {
-        Dispatcher.setPendingLifecycleAction(true);
+        Core.setPendingLifecycleAction(true);
         pendingServers.put(Ids.hostServer(server.getHost(), server.getName()), server);
         logger.debug(""Mark server {} as pending"", server.getName());
     }
 
     public void clearPending(Server server) {
-        Dispatcher.setPendingLifecycleAction(false);
+        Core.setPendingLifecycleAction(false);
         pendingServers.remove(Ids.hostServer(server.getHost(), server.getName()));
         logger.debug(""Clear pending state for server {}"", server.getName());
     }",2018-02-01T16:28:42Z,93
"@@ -15,13 +15,13 @@
  */
 package org.jboss.hal.dmr.dispatch;
 
-import java.util.concurrent.TimeoutException;
 import java.util.function.Predicate;
 
 import org.jboss.hal.dmr.Composite;
 import org.jboss.hal.dmr.CompositeResult;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Operation;
+import org.jetbrains.annotations.NonNls;
 import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -31,15 +31,18 @@
 
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static java.util.concurrent.TimeUnit.SECONDS;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.FAILED;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.FAILURE_DESCRIPTION;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.OUTCOME;
 
 /** Executes a DMR operation until a specific condition is met or a timeout occurs. */
-public interface TimeoutHandler {
+public class TimeoutHandler {
 
-    int INTERVAL = 500;
-    Logger logger = LoggerFactory.getLogger(TimeoutHandler.class);
+    private static int INTERVAL = 500;
+    @NonNls private static Logger logger = LoggerFactory.getLogger(TimeoutHandler.class);
 
     /** Executes the operation until it successfully returns. */
-    static Completable repeatUntilTimeout(Dispatcher dispatcher, int timeout, Operation operation) {
+    public static Completable repeatUntilTimeout(Dispatcher dispatcher, int timeout, Operation operation) {
         return operation instanceof Composite
                 ? TimeoutHandler.repeatCompositeUntil(dispatcher, timeout, (Composite) operation, null)
                 : TimeoutHandler.repeatOperationUntil(dispatcher, timeout, operation, null);
@@ -50,56 +53,63 @@ static Completable repeatUntilTimeout(Dispatcher dispatcher, int timeout, Operat
      * receives the result of the operation.
      */
     @SuppressWarnings(""HardCodedStringLiteral"")
-    static Completable repeatOperationUntil(Dispatcher dispatcher, int timeout, Operation operation,
+    public static Completable repeatOperationUntil(Dispatcher dispatcher, int timeout, Operation operation,
             @Nullable Predicate<ModelNode> until) {
+        logger.debug(""Repeat {} using {} seconds timeout"", operation.asCli(), timeout);
+
         Single<ModelNode> execution = Single.fromEmitter(em -> dispatcher.execute(operation, em::onSuccess,
-                (op, fail) -> em.onError(new RuntimeException(""Dispatcher failure: "" + fail)),
-                (op, ex) -> em.onError(new RuntimeException(""Dispatcher exception: "" + ex, ex))));
+                (op, fail) -> em.onSuccess(operationFailure(""Dispatcher failure: "" + fail)),
+                (op, ex) -> em.onSuccess(operationFailure(""Dispatcher exception: "" + ex.getMessage()))));
         if (until == null) {
             until = r -> !r.isFailure(); // default: until success
         }
 
         return Observable
                 .interval(INTERVAL, MILLISECONDS) // execute a operation each INTERVAL millis
+                .doOnEach(n -> logger.debug(""#{}: execute {}"", n.getValue(), operation.asCli()))
                 .flatMapSingle(n -> execution, false, 1)
                 .takeUntil(until::test) // until succeeded
-                .toCompletable().timeout(timeout, SECONDS) // wait succeeded or stop after timeout seconds
-                .doOnError(e -> {
-                    String msg = ""Operation "" + operation.asCli() + "" ran into "";
-                    if (e instanceof TimeoutException) {
-                        logger.warn(msg + ""a timeout after "" + timeout + "" seconds"");
-                    } else {
-                        logger.error(msg + ""an error"", e);
-                    }
-                });
+                .toCompletable().timeout(timeout, SECONDS); // wait succeeded or stop after timeout seconds
     }
 
     /**
      * Executes the composite operation until the operation successfully returns and the precondition is met.
      * The precondition receives the composite result of the operation.
      */
     @SuppressWarnings(""HardCodedStringLiteral"")
-    static Completable repeatCompositeUntil(Dispatcher dispatcher, int timeout, Composite composite,
+    public static Completable repeatCompositeUntil(Dispatcher dispatcher, int timeout, Composite composite,
             @Nullable Predicate<CompositeResult> until) {
+        logger.debug(""Repeat {} using {} seconds as timeout"", composite, timeout);
+
         Single<CompositeResult> execution = Single.fromEmitter(em -> dispatcher.execute(composite, em::onSuccess,
-                (op, fail) -> em.onError(new RuntimeException(""Dispatcher failure: "" + fail)),
-                (op, ex) -> em.onError(new RuntimeException(""Dispatcher exception: "" + ex, ex))));
+                (op, fail) -> em.onSuccess(compositeFailure(""Dispatcher failure: "" + fail)),
+                (op, ex) -> em.onSuccess(compositeFailure(""Dispatcher exception: "" + ex.getMessage()))));
         if (until == null) {
             until = r -> r.stream().noneMatch(ModelNode::isFailure); // default: until success
         }
 
         return Observable
                 .interval(INTERVAL, MILLISECONDS) // execute a operation each INTERVAL millis
+                .doOnEach(n -> logger.debug(""#{}: execute {}"", n.getValue(), composite))
                 .flatMapSingle(n -> execution, false, 1)
                 .takeUntil(until::test) // until succeeded
-                .toCompletable().timeout(timeout, SECONDS) // wait succeeded or stop after timeout seconds
-                .doOnError(e -> {
-                    String msg = ""Composite operation "" + composite.asCli() + "" ran into "";
-                    if (e instanceof TimeoutException) {
-                        logger.warn(msg + ""a timeout after "" + timeout + "" seconds"");
-                    } else {
-                        logger.error(msg + ""an error"", e);
-                    }
-                });
+                .toCompletable().timeout(timeout, SECONDS); // wait succeeded or stop after timeout seconds
+    }
+
+    private static ModelNode operationFailure(String reason) {
+        ModelNode node = new ModelNode();
+        node.get(OUTCOME).set(FAILED);
+        node.get(FAILURE_DESCRIPTION).set(reason);
+        return node;
+    }
+
+    private static CompositeResult compositeFailure(String reason) {
+        ModelNode node = new ModelNode();
+        node.get(OUTCOME).set(FAILED);
+        node.get(FAILURE_DESCRIPTION).set(reason);
+        return new CompositeResult(node);
+    }
+
+    private TimeoutHandler() {
     }
 }",2018-02-01T16:28:42Z,1
"@@ -16,6 +16,7 @@
 package org.jboss.hal.core.modelbrowser;
 
 import java.util.List;
+import java.util.Optional;
 
 import com.google.gwt.safehtml.shared.SafeHtmlBuilder;
 import elemental2.dom.HTMLElement;
@@ -30,10 +31,17 @@
 import org.jboss.hal.ballroom.table.Scope;
 import org.jboss.hal.ballroom.table.Table;
 import org.jboss.hal.ballroom.tree.Node;
+import org.jboss.hal.config.Environment;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.dmr.Operation;
 import org.jboss.hal.dmr.ResourceAddress;
 import org.jboss.hal.dmr.dispatch.Dispatcher;
+import org.jboss.hal.flow.Progress;
+import org.jboss.hal.meta.AddressTemplate;
+import org.jboss.hal.meta.Metadata;
+import org.jboss.hal.meta.processing.MetadataProcessor;
+import org.jboss.hal.meta.security.AuthorisationDecision;
+import org.jboss.hal.meta.security.Constraint;
 import org.jboss.hal.resources.Ids;
 import org.jboss.hal.resources.Names;
 import org.jboss.hal.resources.Resources;
@@ -43,31 +51,37 @@
 
 import static java.util.stream.Collectors.toList;
 import static org.jboss.gwt.elemento.core.Elements.h;
+import static org.jboss.hal.core.modelbrowser.ModelBrowser.asGenericTemplate;
 import static org.jboss.hal.core.modelbrowser.ReadChildren.uniqueId;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.ADD;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.CHILD_TYPE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.READ_CHILDREN_NAMES_OPERATION;
+import static org.jboss.hal.dmr.ModelDescriptionConstants.REMOVE;
 
 /** Panel which holds the children of the selected resource. */
 class ChildrenPanel implements HasElements, Attachable {
 
     @NonNls private static final Logger logger = LoggerFactory.getLogger(ChildrenPanel.class);
 
+    private final Environment environment;
     private final Dispatcher dispatcher;
+    private final MetadataProcessor metadataProcessor;
     private final ElementsBuilder builder;
     private final HTMLElement header;
     private final Table<String> table;
     private Node<Context> parent;
 
-    ChildrenPanel(ModelBrowser modelBrowser, Dispatcher dispatcher, Resources resources) {
+    ChildrenPanel(ModelBrowser modelBrowser, Environment environment, Dispatcher dispatcher,
+            MetadataProcessor metadataProcessor, Resources resources) {
+        this.environment = environment;
         this.dispatcher = dispatcher;
+        this.metadataProcessor = metadataProcessor;
 
-        //noinspection HardCodedStringLiteral
         Options<String> options = new OptionsBuilder<String>()
                 .column(""resource"", Names.RESOURCE, (cell, type, row, meta) -> row)
                 .column(new InlineAction<>(resources.constants().view(), row -> modelBrowser.tree.openNode(parent.id,
                         () -> modelBrowser.select(uniqueId(parent, row), false))))
                 .button(resources.constants().add(), table -> modelBrowser.add(parent, table.getRows()))
-
                 .button(resources.constants().remove(), table -> {
                             ResourceAddress fq = parent.data.getAddress()
                                     .getParent()
@@ -117,6 +131,25 @@ void update(Node<Context> node, ResourceAddress address) {
             if (node.data.hasSingletons()) {
                 logger.debug(""Read {} / {} singletons"", names.size(), node.data.getSingletons().size());
             }
+
+            AddressTemplate template = asGenericTemplate(node, address);
+            metadataProcessor.lookup(template, Progress.NOOP,
+                    new MetadataProcessor.MetadataCallback() {
+                        @Override
+                        public void onMetadata(Metadata metadata) {
+                            table.enableButton(0, AuthorisationDecision.from(environment,
+                                    constraint -> Optional.of(metadata.getSecurityContext()))
+                                    .isAllowed(Constraint.executable(template, ADD)));
+                            table.enableButton(1, AuthorisationDecision.from(environment,
+                                    constraint -> Optional.of(metadata.getSecurityContext()))
+                                    .isAllowed(Constraint.executable(template, REMOVE)));
+                        }
+
+                        @Override
+                        public void onError(Throwable error) {
+                            logger.warn(""Unable to enable / disable table buttons for {}"", address);
+                        }
+                    });
         });
     }
 ",2018-02-27T15:44:08Z,113
"@@ -37,6 +37,7 @@
 import org.jboss.hal.ballroom.tree.SelectionContext;
 import org.jboss.hal.ballroom.tree.Tree;
 import org.jboss.hal.ballroom.wizard.Wizard;
+import org.jboss.hal.config.Environment;
 import org.jboss.hal.core.CrudOperations;
 import org.jboss.hal.core.mbui.dialog.AddResourceDialog;
 import org.jboss.hal.core.mbui.dialog.NameItem;
@@ -126,6 +127,7 @@ public ModelBrowser(CrudOperations crud,
             MetadataProcessor metadataProcessor,
             @Footer Provider<Progress> progress,
             Dispatcher dispatcher,
+            Environment environment,
             EventBus eventBus,
             Resources resources) {
         this.crud = crud;
@@ -165,7 +167,7 @@ public ModelBrowser(CrudOperations crud,
         }
         resourcePanel.hide();
 
-        childrenPanel = new ChildrenPanel(this, dispatcher, resources);
+        childrenPanel = new ChildrenPanel(this, environment, dispatcher, metadataProcessor, resources);
         for (HTMLElement element : childrenPanel.asElements()) {
             content.appendChild(element);
         }
@@ -281,7 +283,7 @@ public void onSuccess(FlowContext context) {
         }
     }
 
-    private void refresh(final Node<Context> node) {
+    private void refresh(Node<Context> node) {
         if (node != null) {
             updateNode(node);
             tree.refreshNode(node.id);
@@ -340,14 +342,14 @@ private void showResourceView(Node<Context> node, ResourceAddress address) {
         AddressTemplate template = asGenericTemplate(parent, address);
         metadataProcessor.lookup(template, progress.get(), new SuccessfulMetadataCallback(eventBus, resources) {
             @Override
-            public void onMetadata(final Metadata metadata) {
+            public void onMetadata(Metadata metadata) {
                 resourcePanel.update(node, node.data.getAddress(), metadata);
                 resourcePanel.show();
             }
         });
     }
 
-    void add(final Node<Context> parent, final List<String> children) {
+    void add(Node<Context> parent, List<String> children) {
         if (parent.data.hasSingletons()) {
             if (parent.data.getSingletons().size() == children.size()) {
                 MessageEvent.fire(eventBus, Message.warning(resources.messages().allSingletonsExist()));
@@ -453,7 +455,7 @@ void reset(ResourceAddress address, Form<ModelNode> form, Metadata metadata) {
         crud.reset(address.lastName(), address.lastValue(), address, form, metadata,
                 new FinishReset<ModelNode>(form) {
                     @Override
-                    public void afterReset(final Form<ModelNode> form) {
+                    public void afterReset(Form<ModelNode> form) {
                         refresh(tree.getSelected());
                     }
                 });
@@ -469,7 +471,7 @@ public void afterReset(final Form<ModelNode> form) {
      *
      * @param surroundingHeight the sum of the height of all surrounding elements
      */
-    public void setSurroundingHeight(final int surroundingHeight) {
+    public void setSurroundingHeight(int surroundingHeight) {
         this.surroundingHeight = surroundingHeight;
         adjustHeight();
     }
@@ -518,7 +520,7 @@ public void setRoot(ResourceAddress root, boolean updateBreadcrumb) {
                 });
     }
 
-    public void select(final String id, final boolean closeSelected) {
+    public void select(String id, boolean closeSelected) {
         tree.selectNode(id, closeSelected);
     }
 ",2018-02-27T15:44:08Z,114
"@@ -54,8 +54,8 @@ public class AuthorisationDecision {
 
     // ------------------------------------------------------ factory methods
 
-    public static AuthorisationDecision from(final Environment environment,
-            final SecurityContextRegistry securityContextRegistry) {
+    public static AuthorisationDecision from(Environment environment,
+            SecurityContextRegistry securityContextRegistry) {
         return new AuthorisationDecision(environment, constraint -> {
             if (securityContextRegistry.contains(constraint.getTemplate())) {
                 return Optional.of(securityContextRegistry.lookup(constraint.getTemplate()));
@@ -64,11 +64,11 @@ public static AuthorisationDecision from(final Environment environment,
         });
     }
 
-    public static AuthorisationDecision from(final Environment environment, final SecurityContext securityContext) {
+    public static AuthorisationDecision from(Environment environment, SecurityContext securityContext) {
         return new AuthorisationDecision(environment, constraint -> Optional.of(securityContext));
     }
 
-    public static AuthorisationDecision from(final Environment environment, final SecurityContextResolver resolver) {
+    public static AuthorisationDecision from(Environment environment, SecurityContextResolver resolver) {
         return new AuthorisationDecision(environment, resolver);
     }
 
@@ -80,7 +80,7 @@ public static AuthorisationDecision from(final Environment environment, final Se
     private final Environment environment;
     private final SecurityContextResolver resolver;
 
-    private AuthorisationDecision(final Environment environment, final SecurityContextResolver resolver) {
+    private AuthorisationDecision(Environment environment, SecurityContextResolver resolver) {
         this.environment = environment;
         this.resolver = resolver;
     }",2018-02-27T15:44:08Z,115
"@@ -109,18 +109,22 @@ public SafeHtml helpText(Property property) {
         if (!requires.isEmpty()) {
             String textModule;
             if (requires.size() == 1) {
-                textModule = labelBuilder.label(requires.get(0));
+                textModule = ""'"" + labelBuilder.label(requires.get(0)) + ""'"";
             } else {
-                textModule = requires.stream().map(labelBuilder::label).collect(joining("", ""));
+                textModule = requires.stream()
+                        .map((name) -> ""'"" + labelBuilder.label(name) + ""'"")
+                        .collect(joining("", ""));
             }
             textModules.add(MESSAGES.requires(textModule));
         }
         if (!alternatives.isEmpty()) {
             String textModule;
             if (alternatives.size() == 1) {
-                textModule = labelBuilder.label(alternatives.get(0));
+                textModule = ""'"" + labelBuilder.label(alternatives.get(0)) + ""'"";
             } else {
-                textModule = alternatives.stream().map(labelBuilder::label).collect(joining("", ""));
+                textModule = alternatives.stream()
+                        .map((name) -> ""'"" + labelBuilder.label(name) + ""'"")
+                        .collect(joining("", ""));
             }
             textModules.add(MESSAGES.alternativesHelp(textModule));
         }",2017-01-31T14:24:16Z,53
"@@ -37,7 +37,7 @@ public class SingleOperationThreeWildcardsTest {
     public void setUp() throws Exception {
         resultProcessor = new SingleReadChildrenProcessor();
         nodes = ExternalModelNode
-                .read(NamesResultProcessorTest.class.getResourceAsStream(""single_operation_three_wildcards.dmr""));
+                .read(NamesResultProcessorTest.class.getResourceAsStream(""single-operation-three-wildcards.dmr""));
     }
 
     @Test",2017-01-31T14:24:16Z,87
"@@ -84,16 +84,18 @@ public Composite fromChangeSet(final ResourceAddress address, final Map<String,
             if (intersection.isEmpty()) {
 
                 // the easy part: no conflicts
-                logger.debug(""Add undefine operations for alternatives [{}]"", String.join("", "", alternatives));
-                alternatives.forEach(alternative -> {
-                    operations.putIfAbsent(alternative, undefineAttribute(address, alternative));
-                    List<String> requires = metadata.getDescription().findRequires(ATTRIBUTES, alternative);
-                    if (!requires.isEmpty()) {
-                        logger.debug(""Add undefine operations for attributes which require {}: [{}]"", alternative,
-                                String.join("", "", requires));
-                        requires.forEach(r -> operations.putIfAbsent(r, undefineAttribute(address, r)));
-                    }
-                });
+                if (!alternatives.isEmpty()) {
+                    logger.debug(""Add undefine operations for alternatives [{}]"", String.join("", "", alternatives));
+                    alternatives.forEach(alternative -> {
+                        operations.putIfAbsent(alternative, undefineAttribute(address, alternative));
+                        List<String> requires = metadata.getDescription().findRequires(ATTRIBUTES, alternative);
+                        if (!requires.isEmpty()) {
+                            logger.debug(""Add undefine operations for attributes which require {}: [{}]"", alternative,
+                                    String.join("", "", requires));
+                            requires.forEach(r -> operations.putIfAbsent(r, undefineAttribute(address, r)));
+                        }
+                    });
+                }
 
             } else {
                 // possible conflicts: one or more alternatives are also in the change-set",2017-01-31T14:24:16Z,21
"@@ -358,6 +358,22 @@ private ModelNodeForm(final Builder<T> builder) {
                 addHelp(labelBuilder.label(unboundFormItem.formItem.getName()), unboundFormItem.helpText);
             }
         }
+
+        // requires
+        getFormItems().forEach(formItem -> {
+            List<String> requires = builder.metadata.getDescription()
+                    .findRequires(builder.attributePath, formItem.getName());
+            if (!requires.isEmpty()) {
+                //noinspection unchecked
+                formItem.addValueChangeHandler(event ->
+                        requires.forEach(r -> {
+                            FormItem rf = getFormItem(r);
+                            if (rf != null) {
+                                rf.setEnabled(!formItem.isEmpty());
+                            }
+                        }));
+            }
+        });
     }
 
     @Override",2017-01-31T14:24:16Z,60
"@@ -56,7 +56,7 @@ public interface ModelDescriptionConstants {
     String ADMIN_OBJECTS = ""admin-objects"";
     String AJP_LISTENER = ""ajp-listener"";
     String ALLOWED = ""allowed"";
-    String ALTERNATIVES = ""alternativesHelp"";
+    String ALTERNATIVES = ""alternatives"";
     String ANY = ""any"";
     String ARCHIVE = ""archive"";
     String ASYNC_OPERATIONS = ""async-operations"";",2017-01-31T14:24:16Z,109
"@@ -99,9 +99,7 @@ public List<String> findAlternatives(final String path, final String name) {
         Property attribute = findAttribute(path, name);
         if (attribute != null) {
             if (attribute.getValue().hasDefined(ALTERNATIVES)) {
-                return attribute.getValue().get(ALTERNATIVES)
-                        .asList()
-                        .stream()
+                return attribute.getValue().get(ALTERNATIVES).asList().stream()
                         .map(ModelNode::asString)
                         .collect(toList());
             }",2017-01-31T14:24:16Z,24
"@@ -50,7 +50,7 @@ public FinishBootstrap(EventBus eventBus,
     public void execute(final Control<FunctionContext> control) {
         // reset the uncaught exception handler setup in HalPreBootstrapper
         GWT.setUncaughtExceptionHandler(e -> {
-            logger.error(""{}: Uncaught exception: {}"", name(), e.getMessage()); //NON-NLS
+            logger.error(""Uncaught exception: {}"", e.getMessage()); //NON-NLS
             eventBus.fireEvent(new MessageEvent(Message.error(resources.constants().unknownError(), e.getMessage())));
         });
         control.proceed();",2016-01-08T22:04:36Z,362
"@@ -44,7 +44,7 @@
 
 import static org.jboss.hal.dmr.ModelDescriptionConstants.CHILD_TYPE;
 import static org.jboss.hal.dmr.ModelDescriptionConstants.READ_CHILDREN_RESOURCES_OPERATION;
-import static org.jboss.hal.dmr.ModelNodeHelper.withNames;
+import static org.jboss.hal.dmr.ModelNodeHelper.asNodesWithNames;
 import static org.jboss.hal.resources.Names.PROFILE;
 
 /**
@@ -110,7 +110,7 @@ private void loadDataSources() {
                 template.resolve(statementContext))
                 .param(CHILD_TYPE, ""data-source"")
                 .build();
-        dispatcher.execute(operation, result -> getView().update(withNames(result.asPropertyList())));
+        dispatcher.execute(operation, result -> getView().update(asNodesWithNames(result.asPropertyList())));
     }
 }
 ",2016-01-08T22:04:36Z,4
"@@ -24,8 +24,12 @@
 import com.gwtplatform.mvp.client.ViewImpl;
 import elemental.dom.Element;
 import org.jboss.gwt.elemento.core.Elements;
+import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.ballroom.layout.LayoutBuilder;
+import org.jboss.hal.ballroom.tab.Tabs;
+import org.jboss.hal.ballroom.table.DataTable;
 import org.jboss.hal.ballroom.table.Options;
+import org.jboss.hal.core.mbui.form.ModelNodeForm;
 import org.jboss.hal.core.mbui.table.ModelNodeTable;
 import org.jboss.hal.dmr.ModelNode;
 import org.jboss.hal.meta.description.ResourceDescription;
@@ -34,19 +38,20 @@
 import org.jboss.hal.meta.security.SecurityFramework;
 
 import javax.inject.Inject;
+import java.util.ArrayList;
 import java.util.List;
 
 import static org.jboss.hal.ballroom.table.Api.RefreshMode.RESET;
-import static org.jboss.hal.resources.Names.ENABLED;
-import static org.jboss.hal.resources.Names.JNDI_NAME;
+import static org.jboss.hal.resources.Ids.*;
+import static org.jboss.hal.resources.Names.*;
 
 /**
  * @author Harald Pehl
  */
-@SuppressWarnings(""HardCodedStringLiteral"")
 public class DataSourceView extends ViewImpl implements DataSourcePresenter.MyView {
 
-    private final ModelNodeTable<ModelNode> dataSourcesTable;
+    private final DataTable<ModelNode> table;
+    private final List<Form<ModelNode>> forms;
     private DataSourcePresenter presenter;
 
     @Inject
@@ -56,18 +61,35 @@ public DataSourceView(ResourceDescriptions descriptions,
         ResourceDescription description = descriptions.lookup(DataSourcePresenter.ROOT_TEMPLATE);
         SecurityContext securityContext = securityFramework.lookup(DataSourcePresenter.ROOT_TEMPLATE);
 
+        Element info = new Elements.Builder().p().innerText(description.getDescription()).end().build();
         Options<ModelNode> options = new ModelNodeTable.Builder<>(description)
+                .column(NAME_KEY, NAME_LABEL, (cell, type, row, meta) -> row.get(NAME_KEY).asString())
                 .columns(JNDI_NAME, ENABLED)
                 .build();
-        dataSourcesTable = new ModelNodeTable<>(""data-sources-table"", securityContext, options);
+        table = new ModelNodeTable<>(DATA_SOURCE_TABLE, securityContext, options);
+
+        forms = new ArrayList<>();
+        Tabs tabs = new Tabs();
+        ModelNodeForm<ModelNode> currentForm;
+
+        currentForm = new ModelNodeForm.Builder<>(DATA_SOURCE_ATTRIBUTES_FORM, securityContext, description)
+                .include(JNDI_NAME, ENABLED, ""statistics-enabled"", ""driver-name"")
+                .build();
+        forms.add(currentForm);
+        tabs.add(DATA_SOURCE_ATTRIBUTES_TAB, ATTRIBUTES, currentForm.asElement());
+
+        currentForm = new ModelNodeForm.Builder<>(DATA_SOURCE_CONNECTION_FORM, securityContext, description)
+                .include(""connection-url"", ""new-connection-sql"", ""transaction-isolation"", ""jta"", ""use-ccm"")
+                .build();
+        forms.add(currentForm);
+        tabs.add(DATA_SOURCE_CONNECTION_TAB, ""Connection"", currentForm.asElement());
 
-        Element info = new Elements.Builder().p().innerText(description.getDescription()).end().build();
         // @formatter:off
         Element element = new LayoutBuilder()
             .startRow()
                 .header(""DataSources"")
                 .add(info)
-                .add(dataSourcesTable.asElement())
+                .add(table.asElement(), tabs.asElement())
             .endRow()
         .build();
         // @formatter:on
@@ -77,7 +99,8 @@ public DataSourceView(ResourceDescriptions descriptions,
 
     @Override
     public void attach() {
-        dataSourcesTable.attach();
+        table.attach();
+        table.api().bindForms(forms);
     }
 
     @Override
@@ -87,6 +110,6 @@ public void setPresenter(final DataSourcePresenter presenter) {
 
     @Override
     public void update(final List<ModelNode> datasources) {
-        dataSourcesTable.api().clear().add(datasources).refresh(RESET);
+        table.api().clear().add(datasources).refresh(RESET);
     }
 }",2016-01-08T22:04:36Z,29
"@@ -1,3 +1,7 @@
+.form-section {
+  margin-top: 20px;
+}
+
 .form {
 
   &.readonly {",2016-01-08T22:04:36Z,363
"@@ -50,11 +50,11 @@ public void execute(final Form.Operation operation) {
                 transitionTo(EDITING);
                 break;
 
-            case CANCEL:
+            case SAVE:
                 assertState(EDITING);
                 break;
 
-            case SAVE:
+            case CANCEL:
                 assertState(EDITING);
                 break;
 ",2016-01-08T22:04:36Z,89
"@@ -30,9 +30,11 @@ public interface DataMapping<T> {
 
     void newModel(T model, Form<T> form);
 
-    void resetModel(T model, Form<T> form);
-
     void populateFormItems(T model, Form<T> form);
 
+    void clearFormItems(Form<T> form);
+
+    void resetModel(T model, Form<T> form);
+
     void persistModel(T model, Form<T> form);
 }",2016-01-08T22:04:36Z,364
"@@ -79,8 +79,7 @@ public class DefaultForm<T> extends LazyElement implements Form<T>, SecurityCont
     private T model;
     private SecurityContext securityContext;
 
-    private Element buttons;
-    private FormLinks formLinks;
+    private FormLinks<T> formLinks;
     private DivElement errorPanel;
     private SpanElement errorMessage;
     private UListElement errorMessages;
@@ -136,8 +135,9 @@ protected Element createElement() {
 
         Element section = Browser.getDocument().createElement(""section""); //NON-NLS
         section.setId(id);
+        section.getClassList().add(formSection);
 
-        formLinks = new FormLinks(id, stateMachine, helpTexts,
+        formLinks = new FormLinks<>(id, stateMachine, helpTexts,
                 event -> edit(getModel()),
                 event -> reset());
         section.appendChild(formLinks.asElement());
@@ -228,7 +228,7 @@ private Element editPanel() {
         }
 
         // @formatter:off
-        buttons = new Elements.Builder()
+        Element buttons = new Elements.Builder()
             .div().css(formGroup, formButtons)
                 .div().css(offset(labelColumns), column(inputColumns))
                     .div().css(pullRight)
@@ -251,6 +251,25 @@ private Element editPanel() {
 
     // ------------------------------------------------------ form operations
 
+    /**
+     * Executes the {@link org.jboss.hal.ballroom.form.Form.Operation#ADD} operation and calls {@link
+     * DataMapping#newModel(Object, Form)}.
+     *
+     * @param model the transient model
+     */
+    @Override
+    public final void add(final T model) {
+        if (model == null) {
+            throw new NullPointerException(MODEL_MUST_NOT_BE_NULL + formId() + "".add(T)"");
+        }
+        if (!initialized()) {
+            throw new IllegalStateException(NOT_INITIALIZED);
+        }
+        this.model = model;
+        stateExec(ADD); // switch state before data mapping!
+        dataMapping.newModel(model, this);
+    }
+
     /**
      * Executes the {@link org.jboss.hal.ballroom.form.Form.Operation#VIEW} operation and calls {@link
      * DataMapping#populateFormItems(Object, Form)}.
@@ -271,22 +290,36 @@ public final void view(final T model) {
     }
 
     /**
-     * Executes the {@link org.jboss.hal.ballroom.form.Form.Operation#ADD} operation and calls {@link
-     * DataMapping#newModel(Object, Form)}.
-     *
-     * @param model the transient model
+     * Removes the model reference, executes the {@link org.jboss.hal.ballroom.form.Form.Operation#CLEAR} operation and
+     * calls {@link DataMapping#clearFormItems(Form)}.
      */
     @Override
-    public final void add(final T model) {
-        if (model == null) {
-            throw new NullPointerException(MODEL_MUST_NOT_BE_NULL + formId() + "".add(T)"");
-        }
+    public void clear() {
+        this.model = null;
+        stateExec(CLEAR);
+        dataMapping.clearFormItems(this);
+    }
+
+    /**
+     * Executes the {@link org.jboss.hal.ballroom.form.Form.Operation#RESET} operation, calls {@link
+     * DataMapping#resetModel(Object, Form)} and finally calls the registered {@linkplain
+     * org.jboss.hal.ballroom.form.Form.ResetCallback reset callback} (if any).
+     */
+    @Override
+    public final void reset() {
         if (!initialized()) {
             throw new IllegalStateException(NOT_INITIALIZED);
         }
-        this.model = model;
-        stateExec(ADD); // switch state before data mapping!
-        dataMapping.newModel(model, this);
+        stateExec(RESET); // switch state before data mapping!
+        dataMapping.resetModel(model, this);
+        if (resetCallback != null) {
+            resetCallback.onReset(this);
+        }
+    }
+
+    @Override
+    public void setResetCallback(final ResetCallback<T> resetCallback) {
+        this.resetCallback = resetCallback;
     }
 
     /**
@@ -363,28 +396,6 @@ public void setCancelCallback(final CancelCallback<T> cancelCallback) {
         this.cancelCallback = cancelCallback;
     }
 
-    /**
-     * Executes the {@link org.jboss.hal.ballroom.form.Form.Operation#RESET} operation, calls {@link
-     * DataMapping#resetModel(Object, Form)} and finally calls the registered {@linkplain
-     * org.jboss.hal.ballroom.form.Form.ResetCallback reset callback} (if any).
-     */
-    @Override
-    public final void reset() {
-        if (!initialized()) {
-            throw new IllegalStateException(NOT_INITIALIZED);
-        }
-        stateExec(RESET); // switch state before data mapping!
-        dataMapping.resetModel(model, this);
-        if (resetCallback != null) {
-            resetCallback.onReset(this);
-        }
-    }
-
-    @Override
-    public void setResetCallback(final ResetCallback<T> resetCallback) {
-        this.resetCallback = resetCallback;
-    }
-
     protected String formId() {
         return ""form("" + id + "")""; //NON-NLS
     }
@@ -438,7 +449,7 @@ private void flip(State state) {
                 break;
         }
 
-        formLinks.switchTo(state, securityContext);
+        formLinks.switchTo(state, model, securityContext);
         for (Element panel : panels.values()) {
             Elements.setVisible(panel, false);
         }
@@ -458,7 +469,7 @@ private void applySecurity() {
         if (stateMachine.current() == EDITING && !securityContext.isWritable()) {
             stateExec(CANCEL);
         }
-        formLinks.switchTo(stateMachine.current(), securityContext);
+        formLinks.switchTo(stateMachine.current(), model, securityContext);
         for (Map.Entry<String, FormItem> entry : formItems.entrySet()) {
             entry.getValue().setRestricted(!securityContext.isWritable(entry.getKey()));
         }",2016-01-08T22:04:36Z,64
"@@ -37,12 +37,19 @@ public void newModel(final T model, final Form<T> form) {
     }
 
     @Override
-    public void resetModel(final T model, Form<T> form) {
+    public void populateFormItems(final T model, final Form<T> form) {
         // empty
     }
 
     @Override
-    public void populateFormItems(final T model, final Form<T> form) {
+    public void clearFormItems(final Form<T> form) {
+        for (FormItem formItem : form.getFormItems()) {
+            formItem.clearValue();
+        }
+    }
+
+    @Override
+    public void resetModel(final T model, Form<T> form) {
         // empty
     }
 ",2016-01-08T22:04:36Z,365
"@@ -32,25 +32,27 @@
 /**
  * A state machine for existing models. Supports all {@linkplain Operation operations} except {@link Operation#ADD}.
  * <pre>
- *                             (O)
- *                              |
- *             +--------+       |
- *             |        |     view()
- *             |        |       |
- *          reset()     |       |
- *             |     +--v-------v--+
- *             |     |             |
- *             +-----+  READONLY   <-----+
- *                   |             |     |
- *                   +--+-------^--+     |
- *                      |       |        |
- *                   edit()  cancel()  save()
- *                      |       |        |
- *                   +--v-------+--+     |
- *                   |             |     |
- *  (O)----edit()---->   EDITING   +-----+
- *                   |             |
- *                   +-------------+
+ *            +--------+      (0)
+ *            |        |       |
+ *         clear()     |     view()
+ *         reset()     |       |
+ *            |     +--v-------v--+
+ *            |     |             |
+ *            +-----+  READONLY   <-----+-------+
+ *                  |             |     |       |
+ *                  +--+-------^--+     |       |
+ *                     |       |        |       |
+ *                  edit()  cancel()  save()    |
+ *                     |       |        |       |
+ *                  +--v-------+--+     |       |
+ *                  |             |     |       |
+ *   (0)---edit()--->   EDITING   +-----+     clear()
+ *                  |             |             |
+ *                  +------+------+             |
+ *                         |                    |
+ *                       clear()                |
+ *                         |                    |
+ *                         +--------------------+
  * </pre>
  * (0) Initial states
  *
@@ -59,23 +61,33 @@
 public class ExistingModelStateMachine extends AbstractStateMachine implements StateMachine {
 
     public ExistingModelStateMachine() {
-        super(EnumSet.of(CANCEL, EDIT, RESET, SAVE, VIEW));
+        super(EnumSet.of(VIEW, CLEAR, RESET, EDIT, SAVE, CANCEL));
         this.current = null;
     }
 
     @Override
     public void execute(final Operation operation) {
         switch (operation) {
 
+            case ADD:
+                unsupported(ADD);
+                break;
+
             case VIEW:
                 if (current != null) {
                     assertState(READONLY);
                 }
                 transitionTo(READONLY);
                 break;
 
-            case ADD:
-                unsupported(ADD);
+            case CLEAR:
+                transitionTo(READONLY);
+                break;
+
+            case RESET:
+                assertState(READONLY);
+                transitionTo(READONLY);
+                break;
 
             case EDIT:
                 if (current != null) {
@@ -84,18 +96,13 @@ public void execute(final Operation operation) {
                 transitionTo(EDITING);
                 break;
 
-            case CANCEL:
-                assertState(EDITING);
-                transitionTo(READONLY);
-                break;
-
             case SAVE:
                 assertState(EDITING);
                 transitionTo(READONLY);
                 break;
 
-            case RESET:
-                assertState(READONLY);
+            case CANCEL:
+                assertState(EDITING);
                 transitionTo(READONLY);
                 break;
 ",2016-01-08T22:04:36Z,34
"@@ -40,21 +40,21 @@ enum State {
 
 
     enum Operation {
-        VIEW, ADD, EDIT, CANCEL, SAVE, RESET
+        ADD, VIEW, CLEAR, RESET, EDIT, SAVE, CANCEL
     }
 
 
     @FunctionalInterface
-    interface SaveCallback<T> {
+    interface ResetCallback<T> {
 
-        void onSave(Form<T> form, Map<String, Object> changedValues);
+        void onReset(Form<T> form);
     }
 
 
     @FunctionalInterface
-    interface ResetCallback<T> {
+    interface SaveCallback<T> {
 
-        void onReset(Form<T> form);
+        void onSave(Form<T> form, Map<String, Object> changedValues);
     }
 
 
@@ -65,6 +65,13 @@ interface CancelCallback<T> {
     }
 
 
+    /**
+     * Takes a new transient model and enters the editing state.
+     *
+     * @param model the transient model
+     */
+    void add(T model);
+
     /**
      * Takes the specified model and updates the read-only state with the values from the model.
      *
@@ -73,11 +80,16 @@ interface CancelCallback<T> {
     void view(T model);
 
     /**
-     * Takes a new transient model and enters the editing state.
-     *
-     * @param model the transient model
+     * Clears this form by removing the model reference and by clearing all form fields.
      */
-    void add(T model);
+    void clear();
+
+    /**
+     * Resets the model.
+     */
+    void reset();
+
+    void setResetCallback(ResetCallback<T> resetCallback);
 
     /**
      * Takes the specified model and populates the editing state with the values from the model.
@@ -101,13 +113,6 @@ interface CancelCallback<T> {
 
     void setCancelCallback(CancelCallback<T> cancelCallback);
 
-    /**
-     * Resets the model.
-     */
-    void reset();
-
-    void setResetCallback(ResetCallback<T> resetCallback);
-
     /**
      * @return an unique identifier for this form.
      */",2016-01-08T22:04:36Z,323
"@@ -43,7 +43,7 @@
 /**
  * @author Harald Pehl
  */
-class FormLinks implements IsElement {
+class FormLinks<T> implements IsElement {
 
     private final static Constants CONSTANTS = GWT.create(Constants.class);
 
@@ -57,7 +57,7 @@ class FormLinks implements IsElement {
 
     FormLinks(final String formId,
             final StateMachine stateMachine,
-            final LinkedHashMap<String, String>helpTexts,
+            final LinkedHashMap<String, String> helpTexts,
             final EventListener onEdit,
             final EventListener onReset) {
 
@@ -150,11 +150,13 @@ public Element asElement() {
         return root;
     }
 
-    void switchTo(State state, SecurityContext securityContext) {
+    void switchTo(State state, T model, SecurityContext securityContext) {
         switch (state) {
             case READONLY:
-                Elements.setVisible(editLink, stateMachine.supports(EDIT) && securityContext.isWritable());
-                Elements.setVisible(resetLink, stateMachine.supports(RESET) && securityContext.isWritable());
+                Elements.setVisible(editLink,
+                        model != null && stateMachine.supports(EDIT) && securityContext.isWritable());
+                Elements.setVisible(resetLink,
+                        model != null && stateMachine.supports(RESET) && securityContext.isWritable());
                 Elements.setVisible(helpLink, !helpTexts.isEmpty());
                 break;
 ",2016-01-08T22:04:36Z,180
"@@ -25,6 +25,7 @@
 import jsinterop.annotations.JsOverlay;
 import jsinterop.annotations.JsProperty;
 import jsinterop.annotations.JsType;
+import org.jboss.hal.ballroom.form.Form;
 import org.jboss.hal.resources.Names;
 
 import java.util.Collections;
@@ -269,4 +270,41 @@ public final List<T> selectedRows() {
         }
         return asList(selection);
     }
-}
+
+    @JsOverlay
+    public final Api<T> bindForm(Form<T> form) {
+        // don't replace this with a lambda - it won't run in super dev mode
+        //noinspection Convert2Lambda
+        return onSelectionChange(new SelectionChangeHandler<T>() {
+            @Override
+            public void onSelectionChanged(final Api<T> api) {
+                if (api.hasSelection()) {
+                    form.view(api.selectedRow());
+                } else {
+                    form.clear();
+                }
+            }
+        });
+    }
+
+    @JsOverlay
+    public final Api<T> bindForms(final Iterable<Form<T>> forms) {
+        // don't replace this with a lambda - it won't run in super dev mode
+        //noinspection Convert2Lambda
+        return onSelectionChange(new SelectionChangeHandler<T>() {
+            @Override
+            public void onSelectionChanged(final Api<T> api) {
+                if (api.hasSelection()) {
+                    T selectedRow = api.selectedRow();
+                    for (Form<T> form : forms) {
+                        form.view(selectedRow);
+                    }
+                } else {
+                    for (Form<T> form : forms) {
+                        form.clear();
+                    }
+                }
+            }
+        });
+    }
+}
\ No newline at end of file",2016-01-08T22:04:36Z,324
"@@ -38,6 +38,7 @@
 import org.jboss.hal.dmr.Property;
 import org.jboss.hal.meta.description.ResourceDescription;
 import org.jboss.hal.meta.security.SecurityContext;
+import org.jetbrains.annotations.NonNls;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -79,7 +80,7 @@ public static class Builder<T extends ModelNode> {
 
         // ------------------------------------------------------ configure required and optional settings
 
-        public Builder(final String id, final SecurityContext securityContext,
+        public Builder(@NonNls final String id, final SecurityContext securityContext,
                 final ResourceDescription resourceDescription) {
             this.id = id;
             this.securityContext = securityContext;",2016-01-08T22:04:36Z,60
"@@ -30,6 +30,7 @@
 import org.jboss.hal.dmr.Property;
 import org.jboss.hal.meta.description.ResourceDescription;
 import org.jboss.hal.meta.security.SecurityContext;
+import org.jetbrains.annotations.NonNls;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -98,7 +99,7 @@ protected void validate() {
 
     private static final Logger logger = LoggerFactory.getLogger(ModelNodeTable.class);
 
-    public ModelNodeTable(final String id, final SecurityContext securityContext, final Options<T> options) {
+    public ModelNodeTable(@NonNls final String id, final SecurityContext securityContext, final Options<T> options) {
         super(id, securityContext, options);
     }
 }",2016-01-08T22:04:36Z,108
"@@ -86,7 +86,7 @@ public static <T> T getOrDefault(final ModelNode modelNode, Provider<T> provider
      * Turns a list of properties into a list of model nodes which contain a {@link
      * org.jboss.hal.resources.Names#NAME_KEY} key with the properties name.
      */
-    public static List<ModelNode> withNames(List<Property> properties) {
+    public static List<ModelNode> asNodesWithNames(List<Property> properties) {
         List<ModelNode> nodes = new ArrayList<>(properties.size());
         for (Property property : properties) {
             property.getValue().get(NAME_KEY).set(property.getName());",2016-01-08T22:04:36Z,110
"@@ -65,6 +65,7 @@ public interface CSS {
     String formHorizontal = ""form-horizontal"";
     String formLinkLabel = ""form-link-label"";
     String formLinks = ""form-links"";
+    String formSection = ""form-section"";
     String hasError = ""has-error"";
     String hasFeedback = ""has-feedback"";
     String helpBlock = ""help-block"";",2016-01-08T22:04:36Z,159
"@@ -23,6 +23,12 @@
  */
 public interface Ids {
 
+    String DATA_SOURCE_ATTRIBUTES_FORM = ""data-source-attributes-form"";
+    String DATA_SOURCE_ATTRIBUTES_TAB = ""data-source-attributes-tab"";
+    String DATA_SOURCE_CONNECTION_FORM = ""data-source-connection-form"";
+    String DATA_SOURCE_CONNECTION_TAB = ""data-source-connection-tab"";
+    String DATA_SOURCE_TABLE = ""data-source-table"";
+
     String ENDPOINT_ADD = ""endpoint-add"";
     String ENDPOINT_PING = ""endpoint-ping"";
     String ENDPOINT_SELECT = ""endpoint-select"";",2016-01-08T22:04:36Z,111
"@@ -28,6 +28,7 @@
  */
 public interface Names {
 
+    String ATTRIBUTES = ""Attributes"";
     String CONFIGURATION = ""Configuration"";
     String CONTROLS = ""controls"";
     String DEPLOYMENTS = ""Deployments"";
@@ -42,6 +43,7 @@ public interface Names {
     String LABEL = ""label"";
     String MANAGEMENT_CONSOLE = ""Management Console"";
     String NAME_KEY = ""name"";
+    String NAME_LABEL = ""Name"";
     String NOT_SUPPORTED = ""not supported"";
     String NYI = ""not yet implemented"";
     String OBJECT = ""Object"";",2016-01-08T22:04:36Z,112
