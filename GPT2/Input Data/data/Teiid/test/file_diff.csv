file_diff,commit_time,file_diff_id
"@@ -43,6 +43,7 @@ <H2><A NAME=""Highlights""></A>Highlights</H2>
 	<LI><B>Dependent Join Improvements</B> - dependent join analysis and costing in general was improved to consider dependent joins earlier in planning.
 	<LI><B>Memory Management Improvements</B> - maxReserveBatchColumns and maxProcessingBatchesColumns will be default be determined automatically and will more reliably prevent memory issues.  See the admin guide for more.
 	<LI><B>Subquery optimization control</B> - added the MJ and NO_UNNEST hints and the org.teiid.subqueryUnnestDefault system property to control the optimization of subqueries to traditional joins or to a merge join implemenation of a semijoin or antijoin.
+	<LI><B>Local connection threads </B> - local connection calling threads will be used to process work rather than using an engine thread.  This helps decouple the configuration of maxThreads.
 </UL>
 
 <h2><a name=""Compatibility"">Compatibility Issues</a></h2>",2011-03-28T04:17:50Z,45
"@@ -0,0 +1,122 @@
+/*
+ * JBoss, Home of Professional Open Source.
+ * See the COPYRIGHT.txt file distributed with this work for information
+ * regarding copyright ownership.  Some portions may be licensed
+ * to Red Hat, Inc. under one or more contributor license agreements.
+ * 
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ * 
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ * 
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ * 02110-1301 USA.
+ */
+
+package org.teiid.jdbc;
+
+import java.util.TreeSet;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import org.jboss.logging.Logger;
+
+/**
+ * Specialized timer that actively purges tasks in lg(n) time
+ */
+public class CancellationTimer {
+	
+	private static AtomicInteger id = new AtomicInteger();
+	
+	static abstract class CancelTask implements Runnable, Comparable<CancelTask> {
+		long endTime;
+		int seqId = id.get();
+		
+		public CancelTask(long delay) {
+			this.endTime = System.currentTimeMillis() + delay;
+		}
+		
+		@Override
+		public int compareTo(CancelTask o) {
+			int result = Long.signum(this.endTime = o.endTime);
+			if (result == 0) {
+				return seqId = o.seqId;
+			}
+			return result;
+		}
+		@Override
+		public boolean equals(Object obj) {
+			if (obj == this) {
+				return true;
+			}
+			if (!(obj instanceof CancelTask)) {
+				return false;
+			}
+			return this.compareTo((CancelTask)obj) == 0;
+		}
+	}
+	
+	private TreeSet<CancelTask> cancelQueue = new TreeSet<CancelTask>();
+	private Thread thread;
+	
+	public CancellationTimer(String name) {
+		thread = new Thread(new Runnable() {
+			
+			@Override
+			public void run() {
+				while (true) {
+					try {
+						doCancellations();
+					} catch (InterruptedException e) {
+						break;
+					}
+				}
+			}
+		}, name);
+		thread.setDaemon(true);
+		thread.start();
+	}
+
+	private void doCancellations() throws InterruptedException {
+		CancelTask task = null;
+		synchronized (this) {
+			if (cancelQueue.isEmpty()) {
+				this.wait();
+				return;
+			}
+			task = cancelQueue.first();
+			long toWait = task.endTime - System.currentTimeMillis();
+			if (toWait > 0) {
+				this.wait(toWait);
+				return;
+			}
+			cancelQueue.pollFirst();
+		}
+		try {
+			task.run();
+		} catch (Throwable t) {
+			Logger.getLogger(CancellationTimer.class).error(""Unexpected exception running task"", t); //$NON-NLS-1$
+		}
+	}
+	
+	public void add(CancelTask task) {
+		synchronized (this) {
+			this.cancelQueue.add(task);
+			this.notifyAll();
+		}
+	}
+	
+	public void remove(CancelTask task) {
+		synchronized (this) {
+			this.cancelQueue.remove(task);
+			this.notifyAll();
+		}
+	}
+
+}",2011-03-28T04:17:50Z,26
"@@ -86,7 +86,8 @@ public class ConnectionImpl extends WrapperImpl implements TeiidConnection {
     // status of connection object
     private boolean closed = false;
     // determines if a statement executed should be immediately committed.
-    private boolean autoCommitFlag = true;
+    private boolean autoCommitFlag = true;
+    private boolean inLocalTxn;
 
     // collection of all open statements on this connection
     private Collection<StatementImpl> statements = new ArrayList<StatementImpl>();
@@ -125,7 +126,11 @@ public ConnectionImpl(ServerConnection serverConn, Properties info, String url)
         
         this.disableLocalTransactions = Boolean.valueOf(this.propInfo.getProperty(ExecutionProperties.DISABLE_LOCAL_TRANSACTIONS)).booleanValue();
     }
-
+    
+    boolean isInLocalTxn() {
+		return inLocalTxn;
+	}
+    
 	private void setExecutionProperties(Properties info) {
 		this.propInfo = new Properties();
         
@@ -346,39 +351,37 @@ public void commit() throws SQLException {
             try {
                 directCommit();
             } finally {
-                beginLocalTxn(); 
+                inLocalTxn = false; 
             }
         }
     }
 
-    private void directCommit() throws SQLException {
-        try {
-			ResultsFuture<?> future = this.dqp.commit();
-			future.get();
-		} catch (Exception e) {
-			throw TeiidSQLException.create(e);
-		}
-        logger.fine(JDBCPlugin.Util.getString(""MMConnection.Commit_success"")); //$NON-NLS-1$
+    private void directCommit() throws SQLException {
+    	if (inLocalTxn) {
+	        try {
+				ResultsFuture<?> future = this.dqp.commit();
+				future.get();
+			} catch (Exception e) {
+				throw TeiidSQLException.create(e);
+			}
+	        logger.fine(JDBCPlugin.Util.getString(""MMConnection.Commit_success"")); //$NON-NLS-1$
+    	}
     }
 
-    private void beginLocalTxn() throws SQLException {
-        if (this.transactionXid == null) {
-        	if (disableLocalTransactions) {
-        		this.autoCommitFlag = true;
-        		return;
-        	}
-            boolean txnStarted = false;
-            try {
-            	try {
-            		this.dqp.begin();
-        		} catch (XATransactionException e) {
-        			throw TeiidSQLException.create(e);
-        		} 
-                txnStarted = true;
-            } finally {
-                if (!txnStarted) {
-                    autoCommitFlag = true;
-                }
+    void beginLocalTxnIfNeeded() throws SQLException {
+        if (this.transactionXid != null || inLocalTxn || this.autoCommitFlag || disableLocalTransactions) {
+        	return;
+        }
+        try {
+        	try {
+        		this.dqp.begin();
+    		} catch (XATransactionException e) {
+    			throw TeiidSQLException.create(e);
+    		} 
+            inLocalTxn = true;
+        } finally {
+            if (!inLocalTxn) {
+                autoCommitFlag = true;
             }
         }
     }
@@ -654,17 +657,20 @@ public void rollback(boolean startTxn) throws SQLException {
         //Check to see the connection is open
         checkConnection();
         if (!autoCommitFlag) {
-            try {
-            	try {
-            		ResultsFuture<?> future = this.dqp.rollback();
-            		future.get();
-        		} catch (Exception e) {
-        			throw TeiidSQLException.create(e);
-        		}
-                logger.fine(JDBCPlugin.Util.getString(""MMConnection.Rollback_success"")); //$NON-NLS-1$
+            try {
+            	if (this.inLocalTxn) {
+            		this.inLocalTxn = false;
+	            	try {
+	            		ResultsFuture<?> future = this.dqp.rollback();
+	            		future.get();
+	        		} catch (Exception e) {
+	        			throw TeiidSQLException.create(e);
+	        		}
+	                logger.fine(JDBCPlugin.Util.getString(""MMConnection.Rollback_success"")); //$NON-NLS-1$
+            	}
             } finally {
                 if (startTxn) {
-                    beginLocalTxn();
+                    this.inLocalTxn = false;
                 }
                 else {
                     this.autoCommitFlag = true;
@@ -705,9 +711,9 @@ public void setAutoCommit(boolean autoCommit) throws SQLException {
 
         if (autoCommit) {
             directCommit();   
-        } else {
-            beginLocalTxn();
-        }        
+        } else {
+        	inLocalTxn = false;
+        }
     }
 
     /**",2011-03-28T04:17:50Z,46
"@@ -34,8 +34,8 @@
 import org.teiid.net.ServerConnection;
 
 
-final class EmbeddedProfile implements ConnectionProfile {
-    
+public class EmbeddedProfile implements ConnectionProfile {
+	
     /**
      * This method tries to make a connection to the given URL. This class
      * will return a null if this is not the right driver to connect to the given URL.
@@ -46,7 +46,7 @@ final class EmbeddedProfile implements ConnectionProfile {
     public ConnectionImpl connect(String url, Properties info) 
         throws TeiidSQLException {
         try {
-        	ServerConnection sc = (ServerConnection)ReflectionHelper.create(""org.teiid.transport.LocalServerConnection"", Arrays.asList(info), Thread.currentThread().getContextClassLoader()); //$NON-NLS-1$
+        	ServerConnection sc = createServerConnection(info);
 			return new ConnectionImpl(sc, info, url);
 		} catch (TeiidRuntimeException e) {
 			throw TeiidSQLException.create(e);
@@ -58,5 +58,10 @@ public ConnectionImpl connect(String url, Properties info)
 			throw TeiidSQLException.create(e);
 		}
     }
+
+	protected ServerConnection createServerConnection(Properties info)
+			throws TeiidException {
+		return (ServerConnection)ReflectionHelper.create(""org.teiid.transport.LocalServerConnection"", Arrays.asList(info, true), Thread.currentThread().getContextClassLoader()); //$NON-NLS-1$
+	}
     
 }",2011-03-28T04:17:50Z,13
"@@ -23,6 +23,7 @@
 package org.teiid.jdbc;
 
 import java.io.Serializable;
+import java.lang.ref.WeakReference;
 import java.sql.ResultSet;
 import java.sql.ResultSetMetaData;
 import java.sql.SQLException;
@@ -64,14 +65,36 @@
 import org.teiid.core.types.SQLXMLImpl;
 import org.teiid.core.util.SqlUtil;
 import org.teiid.core.util.StringUtil;
+import org.teiid.jdbc.CancellationTimer.CancelTask;
 
 
 public class StatementImpl extends WrapperImpl implements TeiidStatement {
 	private static Logger logger = Logger.getLogger(""org.teiid.jdbc""); //$NON-NLS-1$
+	
+	static CancellationTimer cancellationTimer = new CancellationTimer(""Teiid Statement Timeout""); //$NON-NLS-1$
+	
+	private static final class QueryTimeoutCancelTask extends CancelTask {
+		private WeakReference<StatementImpl> ref;
+		private QueryTimeoutCancelTask(long delay, StatementImpl stmt) {
+			super(delay);
+			this.ref = new WeakReference<StatementImpl>(stmt);
+		}
 
-    // State constants
-    protected static final int TIMED_OUT = 4;
-    protected static final int CANCELLED = 3;
+		@Override
+		public void run() {
+			StatementImpl stmt = ref.get();
+			if (stmt != null) {
+				stmt.timeoutOccurred();
+			}
+		}
+	}
+
+	enum State {
+		RUNNING,
+		DONE,
+		TIMED_OUT,
+		CANCELLED
+	}
     protected static final int NO_TIMEOUT = 0;
 
     // integer indicating no maximum limit - used in some metadata-ish methods.
@@ -97,10 +120,10 @@ public class StatementImpl extends WrapperImpl implements TeiidStatement {
     private boolean isClosed = false;
 
     // Differentiate timeout from cancel in blocking asynch operation
-    protected int commandStatus = -1;
+    protected volatile State commandStatus = State.RUNNING;
 
     // number of seconds for the query to timeout.
-    protected int queryTimeout = NO_TIMEOUT;
+    protected long queryTimeoutMS = NO_TIMEOUT;
 
     //########## Per-execution state ########
 
@@ -136,12 +159,6 @@ public class StatementImpl extends WrapperImpl implements TeiidStatement {
     private int maxRows = NO_LIMIT;
     private int maxFieldSize = NO_LIMIT;
     
-    /** SPIN_TIMEOUT determines how responsive asynch operations will be to
-     *  statement cancellation, closure, or execution timeouts.  
-     *  1/2 second was chosen as default.
-     */
-    private static int SPIN_TIMEOUT = 500;
-    
     //Map<out/inout/return param index --> index in results>
     protected Map outParamIndexMap = new HashMap();
     
@@ -241,7 +258,7 @@ public void cancel() throws SQLException {
          * the statement.executeQuery() call throwing the server's exception instead of the
          * one generated by the conditionalWait() method.
          */
-        commandStatus = CANCELLED;
+        commandStatus = State.CANCELLED;
         cancelRequest();
     }
 
@@ -421,6 +438,7 @@ protected ResultsFuture<Boolean> executeSql(String[] commands, boolean isBatched
         		String command = match.group(1);
         		Boolean commit = null;
         		if (StringUtil.startsWithIgnoreCase(command, ""start"")) { //$NON-NLS-1$
+        			//TODO: this should force a start and through an exception if we're already in a txn
         			this.getConnection().setAutoCommit(false);
         		} else if (command.equalsIgnoreCase(""commit"")) { //$NON-NLS-1$
         			commit = true;
@@ -507,20 +525,70 @@ public void onCompletion(ResultsFuture future) {
         }
         
         final RequestMessage reqMessage = createRequestMessage(commands, isBatchedCommand, resultsMode);
-    	ResultsFuture<ResultsMessage> pendingResult = this.sendRequestMessage(reqMessage);
-    	
+    	ResultsFuture<Boolean> result = execute(reqMessage);
     	if (synch) {
-	    	ResultsMessage resultsMsg = getResults(reqMessage, pendingResult);
-	        postReceiveResults(reqMessage, resultsMsg);
-	        return booleanFuture(hasResultSet());
+    		try {
+    			if (queryTimeoutMS > 0) {
+    				result.get(queryTimeoutMS, TimeUnit.MILLISECONDS);
+    			} else {
+    				result.get();
+    			}
+    			return result;
+    		} catch (ExecutionException e) {
+    			throw TeiidSQLException.create(e);
+    		} catch (InterruptedException e) {
+    			timeoutOccurred();
+    		} catch (TimeoutException e) {
+    			timeoutOccurred();
+			}
+    		throw new TeiidSQLException(JDBCPlugin.Util.getString(""MMStatement.Timeout_before_complete"")); //$NON-NLS-1$
     	}
-    	
+    	return result;
+    }
+
+	private ResultsFuture<Boolean> execute(final RequestMessage reqMsg) throws SQLException,
+			TeiidSQLException {
+		this.getConnection().beginLocalTxnIfNeeded();
+        this.currentRequestID = this.driverConnection.nextRequestID();
+        // Create a request message
+        reqMsg.setExecutionPayload(this.payload);        
+        reqMsg.setCursorType(this.resultSetType);
+        reqMsg.setFetchSize(this.fetchSize);
+        reqMsg.setRowLimit(this.maxRows);
+        reqMsg.setTransactionIsolation(this.driverConnection.getTransactionIsolation());
+
+        // Get connection properties and set them onto request message
+        copyPropertiesToRequest(reqMsg);
+
+        reqMsg.setExecutionId(this.currentRequestID);
+        
+        ResultsFuture.CompletionListener<ResultsMessage> compeletionListener = null;
+		if (queryTimeoutMS > 0) {
+			final CancelTask c = new QueryTimeoutCancelTask(queryTimeoutMS, this);
+			cancellationTimer.add(c);
+			compeletionListener = new ResultsFuture.CompletionListener<ResultsMessage>() {
+				@Override
+				public void onCompletion(ResultsFuture<ResultsMessage> future) {
+					cancellationTimer.remove(c);
+				}
+			};
+		} 
+        
+    	ResultsFuture<ResultsMessage> pendingResult = null;
+		try {
+			pendingResult = this.getDQP().executeRequest(this.currentRequestID, reqMsg);
+		} catch (TeiidException e) {
+			throw TeiidSQLException.create(e);
+		}
+		if (compeletionListener != null) {
+			pendingResult.addCompletionListener(compeletionListener);
+		}
     	final ResultsFuture<Boolean> result = new ResultsFuture<Boolean>();
     	pendingResult.addCompletionListener(new ResultsFuture.CompletionListener<ResultsMessage>() {
     		@Override
     		public void onCompletion(ResultsFuture<ResultsMessage> future) {
     			try {
-					postReceiveResults(reqMessage, future.get());
+					postReceiveResults(reqMsg, future.get());
 					result.getResultsReceiver().receiveResults(hasResultSet());
 				} catch (Throwable t) {
 					result.getResultsReceiver().exceptionOccurred(t);
@@ -535,47 +603,10 @@ public static ResultsFuture<Boolean> booleanFuture(boolean isTrue) {
 		rs.getResultsReceiver().receiveResults(isTrue);
 		return rs;
 	}
-
-	private ResultsMessage getResults(RequestMessage reqMessage,
-			ResultsFuture<ResultsMessage> pendingResult)
-			throws TeiidSQLException {
-		try {
-    		long timeoutMillis = queryTimeout * 1000;
-            long endTime = System.currentTimeMillis() + timeoutMillis;
-            ResultsMessage result = null;        
-            while (result == null) {
-
-            	if (timeoutMillis > 0 && endTime <= System.currentTimeMillis() && commandStatus != TIMED_OUT && commandStatus != CANCELLED) {
-    	            timeoutOccurred();
-            	}
-            	
-                checkStatement();
-    			try {
-    				result = pendingResult.get(SPIN_TIMEOUT, TimeUnit.MILLISECONDS);
-    			} catch (ExecutionException e) {
-    				throw TeiidSQLException.create(e);
-    			} catch (TimeoutException e) {
-    				continue;
-    			}
-            }
-            
-        	if (commandStatus == CANCELLED) {
-                throw new TeiidSQLException(JDBCPlugin.Util.getString(""MMStatement.Cancel_before_execute"")); //$NON-NLS-1$
-            }
-        	 
-        	if (commandStatus == TIMED_OUT) {
-                throw new TeiidSQLException(JDBCPlugin.Util.getString(""MMStatement.Timeout_before_complete"")); //$NON-NLS-1$
-            }    	
-            return result;
-        } catch ( Throwable ex ) {
-        	String msg = JDBCPlugin.Util.getString(""MMStatement.Error_executing_stmt"", reqMessage.getCommandString()); //$NON-NLS-1$ 
-            logger.log(ex instanceof SQLException?Level.WARNING:Level.SEVERE, msg, ex);
-            throw TeiidSQLException.create(ex, msg);
-        }
-	}
-
+	
 	private void postReceiveResults(RequestMessage reqMessage,
 			ResultsMessage resultsMsg) throws TeiidSQLException, SQLException {
+		commandStatus = State.DONE;
 		// warnings thrown
         List resultsWarning = resultsMsg.getWarnings();
 
@@ -726,7 +757,7 @@ public boolean getMoreResults(int current) throws SQLException {
     public int getQueryTimeout() throws SQLException {
         //Check to see the statement is closed and throw an exception
         checkStatement();
-        return this.queryTimeout;
+        return (int)this.queryTimeoutMS/1000;
     }
 
     /**
@@ -858,12 +889,16 @@ public void setQueryTimeout(int seconds) throws SQLException {
         //Check to see the statement is closed and throw an exception
         checkStatement();
         if (seconds >= 0) {
-            queryTimeout = seconds;
+            queryTimeoutMS = seconds*1000;
         }
         else {
             throw new TeiidSQLException(JDBCPlugin.Util.getString(""MMStatement.Bad_timeout_value"")); //$NON-NLS-1$
         }
     }
+    
+    void setQueryTimeoutMS(int queryTimeoutMS) {
+		this.queryTimeoutMS = queryTimeoutMS;
+	}
 
     /**
      * Helper method for copy the connection properties to request message.
@@ -920,11 +955,14 @@ protected void copyPropertiesToRequest(RequestMessage res) throws TeiidSQLExcept
      * Ends the command and sets the status to TIMED_OUT.
      */
     protected void timeoutOccurred() {
+    	if (this.commandStatus != State.RUNNING) {
+    		return;
+    	}
         logger.warning(JDBCPlugin.Util.getString(""MMStatement.Timeout_ocurred_in_Statement."")); //$NON-NLS-1$
         try {
         	cancel();        
-            commandStatus = TIMED_OUT;
-            queryTimeout = NO_TIMEOUT;
+            commandStatus = State.TIMED_OUT;
+            queryTimeoutMS = NO_TIMEOUT;
             currentRequestID = -1;
             if (this.resultSet != null) {
                 this.resultSet.close();
@@ -972,31 +1010,6 @@ public String getExecutionProperty(String name) {
         return this.execProps.getProperty(name);
     }
 
-    /**
-     * Send out request message with necessary states.
-     */
-    protected ResultsFuture<ResultsMessage> sendRequestMessage(RequestMessage reqMsg)
-        throws SQLException {
-        this.currentRequestID = this.driverConnection.nextRequestID();
-        // Create a request message
-        reqMsg.setExecutionPayload(this.payload);        
-        reqMsg.setCursorType(this.resultSetType);
-        reqMsg.setFetchSize(this.fetchSize);
-        reqMsg.setRowLimit(this.maxRows);
-        reqMsg.setTransactionIsolation(this.driverConnection.getTransactionIsolation());
-
-        // Get connection properties and set them onto request message
-        copyPropertiesToRequest(reqMsg);
-
-        reqMsg.setExecutionId(this.currentRequestID);
-    	
-		try {
-			return this.getDQP().executeRequest(this.currentRequestID, reqMsg);
-		} catch (TeiidException e) {
-			throw TeiidSQLException.create(e);
-		}
-    }
-
     long getCurrentRequestID() {
         return this.currentRequestID;
     }",2011-03-28T04:17:50Z,47
"@@ -38,7 +38,6 @@ MMPreparedStatement.Invalid_param_index=The index of a parameter must be a posit
 MMResultSet.Cant_call_closed_resultset=Error trying to operate on a closed ResultSet object.
 MMResultSet.cannot_convert_to_binary_stream=Cannot convert to binary stream
 MMStatement.Error_executing_stmt=Error trying to execute a statement {0}.
-MMStatement.Cancel_before_execute=Request was canceled before it could finish executing.
 MMStatement.Invalid_fetch_size=Fetch size should always be a value of 0 <= fetch size <= max rows.
 MMStatement.Timeout_before_complete=Operation timed out before completion.
 MMResultsImpl.Col_doesnt_exist=Column name ""{0}"" does not exist.",2011-03-28T04:17:50Z,48
"@@ -36,7 +36,7 @@
 import org.teiid.client.ResultsMessage;
 import org.teiid.client.util.ResultsFuture;
 
-
+@SuppressWarnings(""nls"")
 public class TestStatement {
 
 	@Test public void testBatchExecution() throws Exception {
@@ -106,4 +106,17 @@ public class TestStatement {
 		Mockito.verify(conn).submitSetAutoCommitTrue(false);
 	}
 	
+	@Test public void testAsynchTimeout() throws Exception {
+		ConnectionImpl conn = Mockito.mock(ConnectionImpl.class);
+		StatementImpl statement = new StatementImpl(conn, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
+		statement.setQueryTimeoutMS(1);
+		DQP dqp = Mockito.mock(DQP.class);
+		Mockito.stub(statement.getDQP()).toReturn(dqp);
+		ResultsFuture<ResultsMessage> future = new ResultsFuture<ResultsMessage>();
+		Mockito.stub(dqp.executeRequest(Mockito.anyLong(), (RequestMessage) Mockito.anyObject())).toReturn(future);
+		statement.submitExecute(""select 'hello world'"");
+		Thread.sleep(100);
+		Mockito.verify(dqp).cancelRequest(0);
+	}
+	
 }",2011-03-28T04:17:50Z,35
"@@ -450,6 +450,7 @@
            there is a way to make connections that by-pass making a socket based JDBC connection.
            You can use slightly modified data source configuration to make a ""local"" connection, where the JDBC API will lookup a local Teiid runtime in the same VM.</para>
            <warning><para>Since DataSources start before before Teiid VDBs are deployed, leave the min pool size of local connections as the default of 0.  Otherwise errors will occur on the startup of the Teiid DataSource.</para></warning>
+           <note><para>Local connections use their calling thread to perform processing operations rather than using an engine thread while the calling thread is blocked.</para></note>
            <example>
            <title>Local data source</title>
            <programlisting><![CDATA[<datasources>",2011-03-28T04:17:50Z,49
"@@ -13,8 +13,7 @@
     <section id=""default_security"">
         <title>Default Security</title>
         
-        <para>If you are always using a 
-        <link linkend=""local_connection"">local connection</link>, then you do need to secure a channels.</para>
+        <para>If you are using a socket connection, then you may need to secure the channel more completely.</para>
     
         <para>By default all sensitive (non-data) messages between client and server 
         are encrypted using a <ulink url=""http://en.wikipedia.org/wiki/Diffie-Hellman_key_exchange"">Diffy-Hellman</ulink> ",2011-03-28T04:17:50Z,50
"@@ -26,6 +26,7 @@
 import javax.resource.spi.work.WorkEvent;
 import javax.resource.spi.work.WorkListener;
 
+import org.teiid.core.TeiidRuntimeException;
 import org.teiid.logging.LogManager;
 
 
@@ -42,14 +43,23 @@ enum ThreadState {
     
     private ThreadState threadState = ThreadState.MORE_WORK;
     private volatile boolean isProcessing;
+    private boolean useCallingThread;
+    
+    public AbstractWorkItem(boolean useCallingThread) {
+    	this.useCallingThread = useCallingThread;
+    }
     
     public void run() {
-		startProcessing();
-		try {
-			process();
-		} finally {
-			endProcessing();
-		}
+    	do {
+			startProcessing();
+			try {
+				process();
+			} finally {
+				if (!endProcessing()) {
+					break;
+				}
+			}
+    	} while (!isDoneProcessing());
     }
     
     synchronized ThreadState getThreadState() {
@@ -69,7 +79,10 @@ private synchronized void startProcessing() {
     	this.threadState = ThreadState.WORKING;
 	}
     
-    private synchronized void endProcessing() {
+    /**
+     * @return true if processing should be continued
+     */
+    final private synchronized boolean endProcessing() {
     	isProcessing = false;
     	logTrace(""end processing""); //$NON-NLS-1$
     	switch (this.threadState) {
@@ -79,20 +92,21 @@ private synchronized void endProcessing() {
 	        		this.threadState = ThreadState.DONE;
 	        	} else {
 		    		this.threadState = ThreadState.IDLE;
-		    		pauseProcessing();
+		    		return pauseProcessing();
 	        	}
 	    		break;
 	    	case MORE_WORK:
 	    		if (isDoneProcessing()) {
 	    			logTrace(""done processing - ignoring more""); //$NON-NLS-1$
 	        		this.threadState = ThreadState.DONE;
-	        	} else {
-	        		resumeProcessing();
+	        	} else if (!this.useCallingThread) {
+        			resumeProcessing();
 	        	}
 	    		break;
     		default:
     			throw new IllegalStateException(""Should not END on "" + this.threadState); //$NON-NLS-1$
     	}
+    	return useCallingThread;
     }
     
     protected boolean isIdle() {
@@ -103,7 +117,7 @@ public void moreWork() {
     	moreWork(true);
     }
     
-    protected synchronized void moreWork(boolean ignoreDone) {
+    final protected synchronized void moreWork(boolean ignoreDone) {
     	logTrace(""more work""); //$NON-NLS-1$
     	switch (this.threadState) {
 	    	case WORKING:
@@ -113,7 +127,15 @@ protected synchronized void moreWork(boolean ignoreDone) {
 	    		break;
 	    	case IDLE:
 	    		this.threadState = ThreadState.MORE_WORK;
-	    		resumeProcessing();
+        		if (this.useCallingThread) {
+        			if (isProcessing) {
+        				this.notifyAll(); //notify the waiting caller
+        			} else {
+        				run(); //restart with the calling thread
+        			}
+        		} else {
+        			resumeProcessing();
+        		}
 	    		break;
 			default:
 				if (!ignoreDone) {
@@ -129,7 +151,32 @@ private void logTrace(String msg) {
     
     protected abstract void process();
 
-	protected void pauseProcessing() {
+	protected boolean pauseProcessing() {
+		if (useCallingThread && !shouldPause()) {
+			return false;
+		}
+		while (useCallingThread && this.getThreadState() == ThreadState.IDLE) {
+			try {
+				this.wait(); //the lock should already be held
+			} catch (InterruptedException e) {
+				interrupted(e);
+			}
+		}
+		return useCallingThread;
+	}
+	
+	/**
+	 * only called for synch processing
+	 */
+	protected boolean shouldPause() {
+		return false;
+	}
+
+	/**
+	 * only called for synch processing
+	 */
+	protected void interrupted(InterruptedException e) {
+		throw new TeiidRuntimeException(e);
 	}
     
     protected abstract void resumeProcessing();",2011-03-28T04:17:50Z,29
"@@ -358,8 +358,13 @@ void addRequest(RequestID requestID, RequestWorkItem workItem, ClientState state
 
 	private void startActivePlan(RequestWorkItem workItem) {
 		workItem.active = true;
-		this.addWork(workItem);
-		this.currentlyActivePlans++;
+		if (workItem.getDqpWorkContext().useCallingThread()) {
+			this.currentlyActivePlans++;
+			workItem.run();
+		} else {
+			this.addWork(workItem);
+			this.currentlyActivePlans++;
+		}
 	}
 	
     void finishProcessing(final RequestWorkItem workItem) {
@@ -791,7 +796,7 @@ public Integer call() throws Exception {
 		return addWork(processor, 10);
 	}
 
-	<T> ResultsFuture<T> addWork(final Callable<T> processor, int priority) {
+	private <T> ResultsFuture<T> addWork(final Callable<T> processor, int priority) {
 		final ResultsFuture<T> result = new ResultsFuture<T>();
 		final ResultsReceiver<T> receiver = result.getResultsReceiver();
 		Runnable r = new Runnable() {
@@ -806,7 +811,11 @@ public void run() {
 			}
 		};
 		FutureWork<T> work = new FutureWork<T>(r, null, priority);
-		this.addWork(work);
+		if (DQPWorkContext.getWorkContext().useCallingThread()) {
+			work.run();
+		} else {
+			this.addWork(work);
+		}
 		return result;
 	}
 	",2011-03-28T04:17:50Z,36
"@@ -71,9 +71,18 @@ public static void releaseWorkContext() {
     private String clientHostname;
     private SecurityHelper securityHelper;
     private HashMap<String, DataPolicy> policies;
+    private boolean useCallingThread;
     
     public DQPWorkContext() {
 	}
+
+    public boolean useCallingThread() {
+		return useCallingThread;
+	}
+    
+    public void setUseCallingThread(boolean useCallingThread) {
+		this.useCallingThread = useCallingThread;
+	}
     
     public SessionMetadata getSession() {
 		return session;",2011-03-28T04:17:50Z,10
"@@ -46,6 +46,7 @@
 import org.teiid.core.TeiidComponentException;
 import org.teiid.core.TeiidException;
 import org.teiid.core.TeiidProcessingException;
+import org.teiid.core.TeiidRuntimeException;
 import org.teiid.core.types.DataTypeManager;
 import org.teiid.dqp.internal.process.DQPCore.CompletionListener;
 import org.teiid.dqp.internal.process.DQPCore.FutureWork;
@@ -160,6 +161,7 @@ private enum TransactionState {NONE, ACTIVE, DONE}
     private long processingTimestamp = System.currentTimeMillis();
     
     public RequestWorkItem(DQPCore dqpCore, RequestMessage requestMsg, Request request, ResultsReceiver<ResultsMessage> receiver, RequestID requestID, DQPWorkContext workContext) {
+    	super(workContext.useCallingThread());
         this.requestMsg = requestMsg;
         this.requestID = requestID;
         this.processorTimeslice = dqpCore.getProcessorTimeSlice();
@@ -202,6 +204,16 @@ protected void resumeProcessing() {
 		}
 	}
 	
+	@Override
+	protected void interrupted(InterruptedException e) {
+		try {
+			this.requestCancel();
+		} catch (TeiidComponentException e1) {
+			throw new TeiidRuntimeException(e1);
+		}
+		super.interrupted(e);
+	}
+	
 	@Override
 	protected void process() {
         LogManager.logDetail(LogConstants.CTX_DQP, ""Request Thread"", requestID, ""with state"", state); //$NON-NLS-1$ //$NON-NLS-2$
@@ -600,8 +612,11 @@ private void setAnalysisRecords(ResultsMessage response) {
 	}
 
     private void sendError() {
+    	ResultsReceiver<ResultsMessage> receiver = null;
     	synchronized (this) {
-    		if (this.resultsReceiver == null) {
+    		receiver = this.resultsReceiver;
+    		this.resultsReceiver = null;
+    		if (receiver == null) {
     			LogManager.logDetail(LogConstants.CTX_DQP, processingException, ""Unable to send error to client as results were already sent."", requestID); //$NON-NLS-1$
     			return;
     		}
@@ -610,7 +625,13 @@ private void sendError() {
         ResultsMessage response = new ResultsMessage(requestMsg);
         response.setException(processingException);
         setAnalysisRecords(response);
-        resultsReceiver.receiveResults(response);
+        receiver.receiveResults(response);
+    }
+    
+    @Override
+    protected boolean shouldPause() {
+    	//if we are waiting on results it's ok to pause
+    	return this.resultsReceiver != null;
     }
 
     private static List<ParameterInfo> getParameterInfo(StoredProcedure procedure) {
@@ -634,7 +655,11 @@ public void processLobChunkRequest(String id, int streamRequestId, ResultsReceiv
             }
 		}
     	workItem.setResultsReceiver(chunckReceiver);
-        dqpCore.addWork(workItem);
+    	if (this.dqpWorkContext.useCallingThread()) {
+    		workItem.run();
+    	} else {
+    		dqpCore.addWork(workItem);
+    	}
     }
     
     public void removeLobStream(int streamRequestId) {",2011-03-28T04:17:50Z,2
"@@ -22,11 +22,12 @@
 
 package org.teiid.dqp.internal.process;
 
-import org.teiid.dqp.internal.process.AbstractWorkItem;
+import static org.junit.Assert.*;
 
-import junit.framework.TestCase;
+import org.junit.Test;
 
-public class TestWorkItemState extends TestCase {
+
+public class TestWorkItemState {
 	
 	private class TestWorkItem extends AbstractWorkItem {
 
@@ -39,6 +40,7 @@ private TestWorkItem() {
 		}
 		
 		private TestWorkItem(boolean done, boolean callMoreWork) {
+			super(false);
 			this.isDone = done;
 			this.callMoreWork = callMoreWork;
 		}
@@ -86,52 +88,48 @@ private void assertDoneState() {
 	        checkState(ThreadState.DONE);
 	    }
 	}
-	
-    public TestWorkItemState(String name) {
-        super(name);
-    }
 
-    public void testInitialState() {
+    @Test public void testInitialState() {
         TestWorkItem item = new TestWorkItem();
         item.assertMoreWorkState();
     }
     
-    public void testGotoIdleState() {
+    @Test public void testGotoIdleState() {
         TestWorkItem item = new TestWorkItem();
         item.run();
         item.assertIdleState();
     }
     
-    public void testGotoMoreWorkState() {
+    @Test public void testGotoMoreWorkState() {
     	TestWorkItem item = new TestWorkItem();
         item.run();
         item.moreWork();
         item.assertMoreWorkState();
     }
     
-    public void testGotoWorkingState() {
+    @Test public void testGotoWorkingState() {
     	TestWorkItem item = new TestWorkItem();
     	item.run();
     	item.moreWork();
     	item.run();
     }
     
-    public void testResume() {
+    @Test public void testResume() {
     	TestWorkItem item = new TestWorkItem();
     	item.run();
     	assertFalse(item.resumed);
     	item.moreWork();
     	assertTrue(item.resumed);
     }
     
-    public void testResumeDuringWorking() {
+    @Test public void testResumeDuringWorking() {
     	TestWorkItem item = new TestWorkItem(false, true);
     	assertFalse(item.resumed);
     	item.run();
     	assertTrue(item.resumed);
     }
     
-    public void testRunAfterDone() {
+    @Test public void testRunAfterDone() {
     	TestWorkItem item = new TestWorkItem(true, false);
     	item.run();
     	item.assertDoneState();
@@ -143,7 +141,7 @@ public void testRunAfterDone() {
     	}
     }
     
-    public void testRunDuringIdle() {
+    @Test public void testRunDuringIdle() {
     	TestWorkItem item = new TestWorkItem();
     	item.run();
     	item.assertIdleState();",2011-03-28T04:17:50Z,24
"@@ -58,10 +58,11 @@ public class LocalServerConnection implements ServerConnection {
     private Properties connectionProperties;
     private boolean passthrough;
 
-	public LocalServerConnection(Properties connectionProperties) throws CommunicationException, ConnectionException{
+	public LocalServerConnection(Properties connectionProperties, boolean useCallingThread) throws CommunicationException, ConnectionException{
 		this.connectionProperties = connectionProperties;
 		this.csr = getClientServiceRegistry();
 		workContext.setSecurityHelper(csr.getSecurityHelper());
+		workContext.setUseCallingThread(useCallingThread);
 		authenticate();
 		passthrough = Boolean.valueOf(connectionProperties.getProperty(TeiidURL.CONNECTION.PASSTHROUGH_AUTHENTICATION, ""false"")); //$NON-NLS-1$
 	}",2011-03-28T04:17:50Z,23
"@@ -21,25 +21,39 @@
  */
 package org.teiid.transport;
 
+import java.util.Properties;
+
 import javax.net.ssl.SSLEngine;
 
 import org.jboss.netty.channel.ChannelPipeline;
 import org.jboss.netty.channel.DefaultChannelPipeline;
 import org.jboss.netty.handler.ssl.SslHandler;
 import org.teiid.common.buffer.StorageManager;
+import org.teiid.core.TeiidException;
+import org.teiid.jdbc.EmbeddedProfile;
 import org.teiid.jdbc.TeiidDriver;
+import org.teiid.net.ServerConnection;
 import org.teiid.net.socket.ObjectChannel;
 import org.teiid.odbc.ODBCServerRemote;
 
 public class ODBCSocketListener extends SocketListener {
 	private ODBCServerRemote.AuthenticationType authType = ODBCServerRemote.AuthenticationType.CLEARTEXT;
 	private int maxLobSize;
-	private TeiidDriver driver = TeiidDriver.getInstance();
+	private TeiidDriver driver;
 	
 	public ODBCSocketListener(SocketConfiguration config, StorageManager storageManager, int portOffset, int maxLobSize) {
 		//the clientserviceregistry isn't actually used by ODBC 
 		super(config, new ClientServiceRegistryImpl(ClientServiceRegistry.Type.ODBC), storageManager, portOffset);
 		this.maxLobSize = maxLobSize;
+		this.driver = new TeiidDriver();
+		this.driver.setEmbeddedProfile(new EmbeddedProfile() {
+			@Override
+			protected ServerConnection createServerConnection(Properties info)
+					throws TeiidException {
+				//When using the non-blocking api, we don't want to use the calling thread
+				return new LocalServerConnection(info, false);
+			}
+		});
 	}
 	
 	public void setDriver(TeiidDriver driver) {",2011-03-28T04:17:50Z,51
"@@ -68,6 +68,7 @@ public class FakeServer extends ClientServiceRegistryImpl implements ConnectionP
 	DQPCore dqp = new DQPCore();
 	VDBRepository repo = new VDBRepository();
 	private ConnectorManagerRepository cmr;
+	private boolean useCallingThread = true;
 	
 	public FakeServer() {
 		this.logon = new LogonImpl(sessionService, null);
@@ -100,6 +101,10 @@ public SourceCapabilities getCapabilities() {
         registerClientService(DQP.class, dqp, null);
 	}
 	
+	public void setUseCallingThread(boolean useCallingThread) {
+		this.useCallingThread = useCallingThread;
+	}
+	
 	public void deployVDB(String vdbName, String vdbPath) throws Exception {
 		
 		IndexMetadataFactory imf = VDBMetadataFactory.loadMetadata(new File(vdbPath).toURI().toURL());
@@ -171,7 +176,7 @@ public ConnectionImpl connect(String url, Properties info)
 			throws TeiidSQLException {
 		LocalServerConnection conn;
 		try {
-			conn = new LocalServerConnection(info) {
+			conn = new LocalServerConnection(info, useCallingThread) {
 				@Override
 				protected ClientServiceRegistry getClientServiceRegistry() {
 					return FakeServer.this;",2011-03-28T04:17:50Z,52
"@@ -58,6 +58,7 @@ public class TestODBCSocketTransport {
 		odbcTransport = new ODBCSocketListener(config, BufferManagerFactory.getStandaloneBufferManager(), 0, 100000);
 		
 		FakeServer server = new FakeServer();
+		server.setUseCallingThread(false);
 		server.deployVDB(""parts"", UnitTestUtil.getTestDataPath() + ""/PartsSupplier.vdb"");
 		
 		TeiidDriver driver = new TeiidDriver();",2011-03-28T04:17:50Z,53
"@@ -0,0 +1,33 @@
+/*
+ * JBoss, Home of Professional Open Source.
+ * See the COPYRIGHT.txt file distributed with this work for information
+ * regarding copyright ownership.  Some portions may be licensed
+ * to Red Hat, Inc. under one or more contributor license agreements.
+ * 
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ * 
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ * 
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ * 02110-1301 USA.
+ */
+
+package org.teiid.jdbc;
+
+public class AsynchPositioningException extends TeiidSQLException {
+
+	private static final long serialVersionUID = 4965087364648306848L;
+	
+	public AsynchPositioningException() {
+		super(JDBCPlugin.Util.gs(JDBCPlugin.Event.TEIID20030));
+	}
+
+}",2012-09-21T19:08:02Z,54
"@@ -58,6 +58,7 @@ public static enum Event implements BundleUtil.Event {
 		TEIID20023,
 		TEIID20027,
 		TEIID20028,
-		TEIID20029
+		TEIID20029, 
+		TEIID20030
 	}	
 }",2012-09-21T19:08:02Z,31
"@@ -27,6 +27,7 @@
 import java.util.logging.Logger;
 
 import org.teiid.client.util.ResultsFuture;
+import org.teiid.core.TeiidRuntimeException;
 
 /**
  * Handles the future processing logic and makes the appropriate calls to the callback
@@ -52,6 +53,7 @@ public void onCompletion(ResultsFuture<Boolean> future) {
 				return;
 			}
 			final ResultSetImpl resultSet = stmt.getResultSet();
+			resultSet.asynch = true;
 			Runnable rowProcessor = new Runnable() {
 				@Override
 				public void run() {
@@ -109,14 +111,17 @@ boolean processRow(ResultsFuture<Boolean> hasNext) {
 		} catch (Exception e) {
 			onException(e);
 			return false;
+		} catch (Throwable t) {
+			onException(new TeiidRuntimeException(t));
+			return false;	
 		}
 	}
 
 	private void onException(Exception e) {
 		if (e instanceof ExecutionException) {
 			ExecutionException ee = (ExecutionException)e;
 			if (ee.getCause() instanceof Exception) {
-				e = (Exception)ee.getCause();
+				e = (Exception) ee.getCause();
 			}
 		}
 		try {",2012-09-21T19:08:02Z,55
"@@ -0,0 +1,40 @@
+/*
+ * JBoss, Home of Professional Open Source.
+ * See the COPYRIGHT.txt file distributed with this work for information
+ * regarding copyright ownership.  Some portions may be licensed
+ * to Red Hat, Inc. under one or more contributor license agreements.
+ * 
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ * 
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ * 
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ * 02110-1301 USA.
+ */
+
+package org.teiid.jdbc;
+
+import java.sql.ResultSet;
+import java.sql.SQLException;
+
+public interface TeiidResultSet extends ResultSet {
+	
+    /**
+     * Returns an estimate of the minimum number of rows that can be read (after the current) 
+     * without blocking or the end of the ResultSet is reached.  
+     *
+     * @return     an estimate of the minimum number of rows that can be read (after the current) 
+     *             without blocking or the end of the ResultSet is reached.
+     * @exception  SQLException if the statement is closed or another error condition occurs.
+     */
+	int available() throws SQLException;
+
+}",2012-09-21T19:08:02Z,56
"@@ -173,4 +173,5 @@ TEIID20028=data length too big: {0} > max of {1}.  You may need to adjust the ma
 unexpected_element=Unexpected Element {0} encountered, expecting one of {1}
 ambigious_gss_selection=Either configure ""java.security.krb5.conf"" property or combination of ""java.security.krb5.realm"" and ""java.security.krb5.kdc"" properties. Not both.
 no_gss_selection=No KRB5 configuration found. Either configure ""java.security.krb5.conf"" property or combination of ""java.security.krb5.realm"" and ""java.security.krb5.kdc"" properties.
-TEIID20029={0} value outside of 32-bit value range.  Please set the system property org.teiid.longDatesTimes to true to avoid this error.
\ No newline at end of file
+TEIID20029={0} value outside of 32-bit value range.  Please set the system property org.teiid.longDatesTimes to true to avoid this error.
+TEIID20030=The position cannot be set by a blocking call in asynch mode as the results have not yet been formed. 
\ No newline at end of file",2012-09-21T19:08:02Z,48
"@@ -35,8 +35,6 @@
 import java.util.Calendar;
 import java.util.List;
 import java.util.TimeZone;
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.TimeoutException;
 
 import org.junit.Test;
 import org.mockito.Mockito;
@@ -50,7 +48,9 @@
 @SuppressWarnings(""nls"")
 public class TestResultSet {
 
-    /** test next() without walking through */
+    private static final int BATCH_SIZE = 400;
+
+	/** test next() without walking through */
     @Test public void testNext1() throws SQLException {  
         ResultSet cs =  helpExecuteQuery();
         assertEquals("" Actual doesn't match with expected. "", new Integer(0), new Integer(cs.getRow())); //$NON-NLS-1$
@@ -59,12 +59,13 @@ public class TestResultSet {
     
     /** test next() with walking through all the rows and compare records */
     @Test public void testNext2() throws SQLException {  
-        List[] expected = TestAllResultsImpl.exampleResults1(1000);
+        List<?>[] expected = TestAllResultsImpl.exampleResults1(1000);
         ResultSetImpl cs =  helpExecuteQuery();
 
         int i=0;
         while(cs.next()) { 
            assertEquals("" Actual doesn't match with expected. "", expected[i], cs.getCurrentRecord()); //$NON-NLS-1$
+           assertEquals((i < 800?BATCH_SIZE:200) - (i%BATCH_SIZE) - 1, cs.available());
            i++;
         }
 
@@ -204,7 +205,7 @@ public void helpTestNextBeyondResultSet(int fetchSize, int numRows) throws Excep
     /** walk all way through from the end back to first row */
     @Test public void testPrevious1() throws SQLException {  
         ResultSetImpl cs = helpExecuteQuery();
-        List[] expected = TestAllResultsImpl.exampleResults1(1000);
+        List<?>[] expected = TestAllResultsImpl.exampleResults1(1000);
         while(cs.next()) {
             //System.out.println("" rs.next == "" + cs.getCurrentRecord());
         }
@@ -236,7 +237,7 @@ public void helpTestNextBeyondResultSet(int fetchSize, int numRows) throws Excep
     @Test public void testPrevious3() throws Exception {  
         //large batch size
         ResultSetImpl cs = helpExecuteQuery(600, 10000, ResultSet.TYPE_SCROLL_INSENSITIVE);
-        List[] expected = TestAllResultsImpl.exampleResults1(10000);
+        List<?>[] expected = TestAllResultsImpl.exampleResults1(10000);
         while(cs.next()) {
         }
         // cursor is after the last row. getRow() should return 0 when not on a valid row
@@ -256,7 +257,7 @@ public void helpTestNextBeyondResultSet(int fetchSize, int numRows) throws Excep
     @Test public void testPrevious4() throws Exception {  
         //small batch size
         ResultSetImpl cs = helpExecuteQuery(50, 1000, ResultSet.TYPE_SCROLL_INSENSITIVE);
-        List[] expected = TestAllResultsImpl.exampleResults1(1000);
+        List<?>[] expected = TestAllResultsImpl.exampleResults1(1000);
         while(cs.next()) {
             //System.out.println("" rs.next == "" + cs.getCurrentRecord());
         }
@@ -578,9 +579,9 @@ public void helpTestNextBeyondResultSet(int fetchSize, int numRows) throws Excep
         
         // check result set metadata
         // expected column info.
-        List columnName = getBQTRSMetaData1a();
-        List columnType = getBQTRSMetaData1b();
-        List columnTypeName = getBQTRSMetaData1c();
+        List<String> columnName = getBQTRSMetaData1a();
+        List<Integer> columnType = getBQTRSMetaData1b();
+        List<String> columnTypeName = getBQTRSMetaData1c();
 
         ResultSetMetaData rm = cs.getMetaData();
         assertNotNull(rm);
@@ -731,13 +732,13 @@ public void helpTestNextBeyondResultSet(int fetchSize, int numRows) throws Excep
 
     private ResultSetImpl helpExecuteQuery() {
         try {
-			return helpExecuteQuery(400, 1000, ResultSet.TYPE_SCROLL_INSENSITIVE);
+			return helpExecuteQuery(BATCH_SIZE, 1000, ResultSet.TYPE_SCROLL_INSENSITIVE);
 		} catch (Exception e) {
 			throw new RuntimeException(e);
 		}
     }
     
-    private ResultSetImpl helpExecuteQuery(int fetchSize, int totalResults, int cursorType) throws SQLException, TeiidProcessingException, InterruptedException, ExecutionException, TimeoutException {
+    private ResultSetImpl helpExecuteQuery(int fetchSize, int totalResults, int cursorType) throws SQLException, TeiidProcessingException {
         StatementImpl statement = createMockStatement(cursorType);
 		return TestAllResultsImpl.helpTestBatching(statement, fetchSize, Math.min(fetchSize, totalResults), totalResults);
     }
@@ -755,22 +756,22 @@ static StatementImpl createMockStatement(int cursorType) throws SQLException {
 
     ////////////////////////Expected Results////////////////
     /** column name */
-    private List getBQTRSMetaData1a() {
-        List results = new ArrayList();
+    private List<String> getBQTRSMetaData1a() {
+        List<String> results = new ArrayList<String>();
         results.add(""IntKey""); //$NON-NLS-1$
         return results;   
     }
 
     /** column type */
-    private List getBQTRSMetaData1b() {
-        List results = new ArrayList();
-        results.add(new Integer(Types.INTEGER));
+    private List<Integer> getBQTRSMetaData1b() {
+        List<Integer> results = new ArrayList<Integer>();
+        results.add(Types.INTEGER);
         return results;   
     }
 
     /** column type name*/
-    private List getBQTRSMetaData1c() {
-        List results = new ArrayList();
+    private List<String> getBQTRSMetaData1c() {
+        List<String> results = new ArrayList<String>();
         results.add(""integer""); //$NON-NLS-1$
         return results;   
     }               ",2012-09-21T19:08:02Z,39
"@@ -39,9 +39,11 @@
 import org.teiid.client.util.ResultsFuture;
 import org.teiid.core.util.UnitTestUtil;
 import org.teiid.jdbc.AbstractMMQueryTestCase;
+import org.teiid.jdbc.AsynchPositioningException;
 import org.teiid.jdbc.FakeServer;
 import org.teiid.jdbc.RequestOptions;
 import org.teiid.jdbc.StatementCallback;
+import org.teiid.jdbc.TeiidResultSet;
 import org.teiid.jdbc.TeiidStatement;
 import org.teiid.jdbc.TestMMDatabaseMetaData;
 
@@ -161,11 +163,24 @@ protected void checkResult(String testName, String query) throws Exception {
 		Statement stmt = this.internalConnection.createStatement();
 		TeiidStatement ts = stmt.unwrap(TeiidStatement.class);
 		final ResultsFuture<Integer> result = new ResultsFuture<Integer>(); 
-		ts.submitExecute(""select * from SYS.Schemas"", new StatementCallback() {
+		ts.submitExecute(""select * from SYS.columns a, sys.tables b"", new StatementCallback() {
 			int rowCount;
 			@Override
 			public void onRow(Statement s, ResultSet rs) {
 				rowCount++;
+				try {
+					if (!rs.isLast()) {
+						assertTrue(rs.unwrap(TeiidResultSet.class).available() > 0);
+					}
+				} catch (AsynchPositioningException e) {
+					try {
+						assertEquals(0, rs.unwrap(TeiidResultSet.class).available());
+					} catch (SQLException e1) {
+						result.getResultsReceiver().exceptionOccurred(e1);
+					}
+				} catch (SQLException e) {
+					result.getResultsReceiver().exceptionOccurred(e);
+				}
 			}
 			
 			@Override
@@ -178,7 +193,7 @@ public void onComplete(Statement s) {
 				result.getResultsReceiver().receiveResults(rowCount);
 			}
 		}, new RequestOptions());
-		assertEquals(4, result.get().intValue());
+		assertEquals(7905, result.get().intValue());
 	}
 	
 	@Test public void testAsynchContinuous() throws Exception {",2012-09-21T19:08:02Z,32
"@@ -24,11 +24,13 @@
 
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collection;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
 import org.teiid.api.exception.query.QueryMetadataException;
+import org.teiid.api.exception.query.QueryPlannerException;
 import org.teiid.api.exception.query.QueryResolverException;
 import org.teiid.core.TeiidComponentException;
 import org.teiid.core.TeiidProcessingException;
@@ -38,6 +40,7 @@
 import org.teiid.query.metadata.QueryMetadataInterface;
 import org.teiid.query.optimizer.capabilities.CapabilitiesFinder;
 import org.teiid.query.optimizer.relational.rules.RuleChooseJoinStrategy;
+import org.teiid.query.optimizer.relational.rules.RuleMergeCriteria;
 import org.teiid.query.processor.ProcessorPlan;
 import org.teiid.query.processor.proc.ForEachRowPlan;
 import org.teiid.query.processor.proc.ProcedurePlan;
@@ -47,11 +50,17 @@
 import org.teiid.query.rewriter.QueryRewriter;
 import org.teiid.query.sql.LanguageObject;
 import org.teiid.query.sql.lang.*;
+import org.teiid.query.sql.navigator.DeepPostOrderNavigator;
+import org.teiid.query.sql.proc.CommandStatement;
 import org.teiid.query.sql.proc.CreateProcedureCommand;
+import org.teiid.query.sql.proc.Statement;
 import org.teiid.query.sql.proc.TriggerAction;
 import org.teiid.query.sql.symbol.ElementSymbol;
 import org.teiid.query.sql.symbol.Expression;
 import org.teiid.query.sql.symbol.GroupSymbol;
+import org.teiid.query.sql.util.SymbolMap;
+import org.teiid.query.sql.visitor.ExpressionMappingVisitor;
+import org.teiid.query.sql.visitor.GroupCollectorVisitor;
 import org.teiid.query.util.CommandContext;
 
 
@@ -65,6 +74,7 @@ public ProcessorPlan optimize(ProcedureContainer userCommand, TriggerAction ta,
 		QueryCommand query = null;
 		Map<ElementSymbol, Expression> params = new HashMap<ElementSymbol, Expression>();
 		
+		Map<ElementSymbol, Expression> mapping = QueryResolver.getVariableValues(userCommand, false, metadata);
 		if (userCommand instanceof Insert) {
 			Insert insert = (Insert)userCommand;
 			if (insert.getQueryExpression() != null) {
@@ -73,23 +83,23 @@ public ProcessorPlan optimize(ProcedureContainer userCommand, TriggerAction ta,
 				query = new Query();
 				((Query)query).setSelect(new Select(RuleChooseJoinStrategy.createExpressionSymbols(insert.getValues())));
 			}
+			ProcessorPlan plan = rewritePlan(ta, idGenerator, metadata, capFinder, analysisRecord,
+					context, query, mapping, insert);
+			if (plan != null) {
+				return plan;
+			}
 		} else if (userCommand instanceof Delete) {
 			query = createOldQuery(userCommand, ta, metadata, params);
 		} else if (userCommand instanceof Update) {
 			query = createOldQuery(userCommand, ta, metadata, params);
 		} else {
 			throw new AssertionError();
 		}
-		
-		for (Map.Entry<ElementSymbol, Expression> entry : QueryResolver.getVariableValues(userCommand, false, metadata).entrySet()) {
-			if (entry.getKey().getGroupSymbol().getShortName().equalsIgnoreCase(SQLConstants.Reserved.NEW)) {
-				Expression value = entry.getValue();
-				params.put(entry.getKey(), value);
-				if (userCommand instanceof Update) {
-					((Query)query).getSelect().addSymbol(value);
-				}
-			} else {
-				params.put(entry.getKey(), entry.getValue()); 
+		for (Map.Entry<ElementSymbol, Expression> entry : mapping.entrySet()) {
+			Expression value = entry.getValue();
+			params.put(entry.getKey(), value);
+			if (entry.getKey().getGroupSymbol().getShortName().equalsIgnoreCase(SQLConstants.Reserved.NEW) && userCommand instanceof Update) {
+				((Query)query).getSelect().addSymbol(value);
 			}
 		}
 		ForEachRowPlan result = new ForEachRowPlan();
@@ -105,6 +115,79 @@ public ProcessorPlan optimize(ProcedureContainer userCommand, TriggerAction ta,
 		return result;
 	}
 
+	/**
+	 * look for the simple case of a mapping to a single insert statement trigger action - and reconstruct the plan as a single insert
+	 * TODO: need internal primitives for delete/update batching in a loop for delete/update cases
+	 */
+	private ProcessorPlan rewritePlan(TriggerAction ta, IDGenerator idGenerator,
+			QueryMetadataInterface metadata, CapabilitiesFinder capFinder,
+			AnalysisRecord analysisRecord, CommandContext context,
+			QueryCommand query, Map<ElementSymbol, Expression> mapping,
+			Insert insert) throws QueryMetadataException,
+			QueryResolverException, TeiidComponentException,
+			QueryPlannerException {
+		if (ta.getBlock().getStatements().size() != 1) {
+			return null;
+		}
+		Statement s = ta.getBlock().getStatements().get(0);
+		if (!(s instanceof CommandStatement)) {
+			return null;
+		}
+		CommandStatement cs = (CommandStatement)s;
+		if (!(cs.getCommand() instanceof Insert)) {
+			return null;
+		}
+		Insert mapped = (Insert) cs.getCommand();
+		if (mapped.getQueryExpression() != null) {
+			return null;
+		}
+		if (insert.getQueryExpression() != null) {
+			//use a unique inline view name to make the final remapping easier
+			GroupSymbol group = new GroupSymbol(""X"");
+			Collection<GroupSymbol> groups = GroupCollectorVisitor.getGroups(query, true);
+			for (int i = 0; groups.contains(group); i++) {
+				group.setName(""X_"" + i);
+			}
+			
+			List<Expression> projectedSymbols = query.getProjectedSymbols();
+			Query queryExpression = QueryRewriter.createInlineViewQuery(group, query, metadata, projectedSymbols);
+			List<Expression> viewSymbols = new ArrayList<Expression>(queryExpression.getSelect().getSymbols());
+			
+			//switch to the values
+			queryExpression.getSelect().clearSymbols();
+			List<Expression> values = mapped.getValues();
+			queryExpression.getSelect().addSymbols(values);
+			values.clear();
+			//map to the query form - changes references back to element form
+			SymbolMap queryMapping = new SymbolMap();
+			queryMapping.asUpdatableMap().putAll(mapping);
+			ExpressionMappingVisitor visitor = new RuleMergeCriteria.ReferenceReplacementVisitor(queryMapping);
+			DeepPostOrderNavigator.doVisit(queryExpression.getSelect(), visitor);
+			//map to the inline view
+			Map<Expression, Expression> viewMapping = new HashMap<Expression, Expression>();
+			for (int i = 0; i < projectedSymbols.size(); i++) {
+				viewMapping.put(SymbolMap.getExpression(projectedSymbols.get(i)), SymbolMap.getExpression(viewSymbols.get(i)));
+			}
+			ExpressionMappingVisitor.mapExpressions(queryExpression.getSelect(), viewMapping);
+			
+			//now we can return a plan based off a single insert statement
+			mapped.setQueryExpression(queryExpression);
+			return QueryOptimizer.optimizePlan(mapped, metadata, idGenerator, capFinder, analysisRecord, context);
+		}
+		List<Expression> values = mapped.getValues();
+		SymbolMap queryMapping = new SymbolMap();
+		queryMapping.asUpdatableMap().putAll(mapping);
+		ExpressionMappingVisitor visitor = new RuleMergeCriteria.ReferenceReplacementVisitor(queryMapping);
+		Select select = new Select();
+		select.addSymbols(values);
+		DeepPostOrderNavigator.doVisit(select, visitor);
+		values.clear();
+		for (Expression ex : select.getSymbols()) {
+			values.add(SymbolMap.getExpression(ex));
+		}
+		return QueryOptimizer.optimizePlan(mapped, metadata, idGenerator, capFinder, analysisRecord, context);
+	}
+
 	private QueryCommand createOldQuery(ProcedureContainer userCommand,
 			TriggerAction ta, QueryMetadataInterface metadata,
 			Map<ElementSymbol, Expression> params)",2013-08-06T13:37:23Z,57
"@@ -229,6 +229,11 @@ public RelationalPlan optimize(
 		} catch (TeiidProcessingException e) {
 			 throw new QueryPlannerException(e);
 		}
+		
+		if (plan.getType() == NodeConstants.Types.SOURCE) {
+			//this was effectively a rewrite
+			return (RelationalPlan)plan.getProperty(Info.PROCESSOR_PLAN);
+		}
 
 		if(debug) {
             analysisRecord.println(""\nCANONICAL PLAN: \n"" + plan); //$NON-NLS-1$
@@ -689,7 +694,10 @@ PlanNode createUpdatePlan(Command command) throws TeiidComponentException, Teiid
 	            }
         	}
         }
-        
+        if (usingTriggerAction && FrameUtil.getNestedPlan(projectNode) instanceof RelationalPlan) {
+        	sourceNode.removeFromParent();
+        	return sourceNode;
+        }
         return projectNode;
 	}
 ",2013-08-06T13:37:23Z,58
"@@ -475,7 +475,7 @@ static void replaceWithNullNode(PlanNode node) {
      * @param accessNode
      * @return
      */
-    static ProcessorPlan getNestedPlan(PlanNode accessNode) {
+    public static ProcessorPlan getNestedPlan(PlanNode accessNode) {
         PlanNode sourceNode = accessNode.getFirstChild(); 
         if (sourceNode == null) {
         	return null;",2013-08-06T13:37:23Z,59
"@@ -35,7 +35,7 @@ public static class SharedAccessInfo {
 	public SharedAccessInfo info;
 	public boolean doNotCache;
 	public int fetchSize;
-	public boolean selectWithNoFrom;
+	public boolean mustExecute;
 
 	public RegisterRequestParameter(String connectorBindingId, int nodeID,
 			int limit) {",2013-08-06T13:37:23Z,60
"@@ -27,12 +27,17 @@
 import java.util.List;
 import java.util.Map;
 
+import org.teiid.client.xa.XATransactionException;
 import org.teiid.common.buffer.BlockedException;
 import org.teiid.common.buffer.BufferManager;
 import org.teiid.common.buffer.TupleBatch;
 import org.teiid.common.buffer.TupleSource;
 import org.teiid.core.TeiidComponentException;
 import org.teiid.core.TeiidProcessingException;
+import org.teiid.dqp.service.TransactionContext;
+import org.teiid.dqp.service.TransactionContext.Scope;
+import org.teiid.dqp.service.TransactionService;
+import org.teiid.query.QueryPlugin;
 import org.teiid.query.eval.Evaluator;
 import org.teiid.query.processor.BatchCollector;
 import org.teiid.query.processor.ProcessorDataManager;
@@ -58,6 +63,8 @@ public class ForEachRowPlan extends ProcessorPlan {
     private QueryProcessor rowProcessor;
     private List<?> currentTuple;
     private int updateCount;
+    
+    private TransactionContext planContext;
 
 	@Override
 	public ProcessorPlan clone() {
@@ -77,6 +84,16 @@ public void close() throws TeiidComponentException {
 				this.rowProcessor.closeProcessing();
 			}
 		}
+		if (this.planContext != null) {
+			TransactionService ts = this.getContext().getTransactionServer();
+			try {
+				ts.resume(planContext);
+				ts.rollback(planContext);
+				this.planContext = null;
+			} catch (XATransactionException e) {
+				throw new TeiidComponentException(QueryPlugin.Event.TEIID30165, e);
+			}
+		}
 	}
 
 	@Override
@@ -95,41 +112,70 @@ public void initialize(CommandContext context,
 	@Override
 	public TupleBatch nextBatch() throws BlockedException,
 			TeiidComponentException, TeiidProcessingException {
-		while (true) {
-			if (currentTuple == null) {
-				currentTuple = tupleSource.nextTuple();
+		if (planContext != null) {
+			this.getContext().getTransactionServer().resume(planContext);
+		}
+		try {
+			while (true) {
 				if (currentTuple == null) {
-					TupleBatch result = new TupleBatch(1, new List[] {Arrays.asList(updateCount)});
-					result.setTerminationFlag(true);
-					return result;
+					currentTuple = tupleSource.nextTuple();
+					if (currentTuple == null) {
+						if (this.planContext != null) {
+							TransactionService ts = this.getContext().getTransactionServer();
+							ts.commit(this.planContext);
+							this.planContext = null;
+						}
+						TupleBatch result = new TupleBatch(1, new List[] {Arrays.asList(updateCount)});
+						result.setTerminationFlag(true);
+						return result;
+					}
 				}
-			}
-			if (this.rowProcessor == null) {
-				rowProcedure.reset();
-				rowProcedure.setRunInContext(false); //for each row procedures are properly encapsulated
-				CommandContext context = getContext().clone();
-				this.rowProcessor = new QueryProcessor(rowProcedure, context, this.bufferMgr, this.dataMgr);
-				Evaluator eval = new Evaluator(Collections.emptyMap(), dataMgr, context);
-				for (Map.Entry<ElementSymbol, Expression> entry : this.params.entrySet()) {
-					Integer index = this.lookupMap.get(entry.getValue());
-					if (index != null) {
-						rowProcedure.getCurrentVariableContext().setValue(entry.getKey(), this.currentTuple.get(index));
-					} else {
-						rowProcedure.getCurrentVariableContext().setValue(entry.getKey(), eval.evaluate(entry.getValue(), null));
+				if (this.rowProcessor == null) {
+					rowProcedure.reset();
+					rowProcedure.setRunInContext(false); //for each row procedures are properly encapsulated
+					CommandContext context = getContext().clone();
+					this.rowProcessor = new QueryProcessor(rowProcedure, context, this.bufferMgr, this.dataMgr);
+					Evaluator eval = new Evaluator(Collections.emptyMap(), dataMgr, context);
+					for (Map.Entry<ElementSymbol, Expression> entry : this.params.entrySet()) {
+						Integer index = this.lookupMap.get(entry.getValue());
+						if (index != null) {
+							rowProcedure.getCurrentVariableContext().setValue(entry.getKey(), this.currentTuple.get(index));
+						} else {
+							rowProcedure.getCurrentVariableContext().setValue(entry.getKey(), eval.evaluate(entry.getValue(), null));
+						}
 					}
 				}
+				//just getting the next batch is enough
+				this.rowProcessor.nextBatch();
+				this.rowProcessor.closeProcessing();
+				this.rowProcessor = null;
+				this.currentTuple = null;
+				this.updateCount++;
+			} 
+		} finally {
+			if (planContext != null) {
+				this.getContext().getTransactionServer().suspend(planContext);
 			}
-			//just getting the next batch is enough
-			this.rowProcessor.nextBatch();
-			this.rowProcessor.closeProcessing();
-			this.rowProcessor = null;
-			this.currentTuple = null;
-			this.updateCount++;
-		}		
+		}
 	}
 
 	@Override
 	public void open() throws TeiidComponentException, TeiidProcessingException {
+    	TransactionContext tc = this.getContext().getTransactionContext();
+    	if (tc != null && tc.getTransactionType() == Scope.NONE) {
+    		//start a transaction - if not each of the row plans will
+    		//be executed in it's own transaction, which is bad for performance
+    		
+    		//TODO: should probably allow non-atomic row plans
+    		//the parser accepts a trigger block without atomic
+    		//but the spec mandates it - and we treat it as atomic
+    		//either way
+    		
+    		//TODO: for non-transactional environments this will
+    		//trigger an error
+    		this.getContext().getTransactionServer().begin(tc);
+    		this.planContext = tc;
+    	}
 		queryProcessor = new QueryProcessor(queryPlan, getContext(), this.bufferMgr, this.dataMgr);
 		tupleSource = new BatchCollector.BatchProducerTupleSource(queryProcessor);
 	}
@@ -159,6 +205,7 @@ public void reset() {
 		this.rowProcessor = null;
 		this.queryProcessor = null;
 		this.tupleSource = null;
+		this.planContext = null;
 	}
 	
 	@Override",2013-08-06T13:37:23Z,61
"@@ -98,7 +98,6 @@ public void initialize(CommandContext context,
 		@Override
 		public void open() throws TeiidComponentException, TeiidProcessingException {
 			RegisterRequestParameter parameterObject = new RegisterRequestParameter();
-			parameterObject.selectWithNoFrom = true;
 			ts = dataMgr.registerRequest(getContext(), command, fd.getSchema(), parameterObject);
 		}
 ",2013-08-06T13:37:23Z,62
"@@ -108,15 +108,7 @@ public boolean areResultsCachable() {
 	}
 
     public String toString() {
-        StringBuffer val = new StringBuffer(""BatchedUpdate{""); //$NON-NLS-1$
-        if (commands != null && commands.size() > 0) {
-            val.append(getCommandToken(commands.get(0).getType()));
-            for (int i = 1; i < commands.size(); i++) {
-                val.append(',').append(getCommandToken(commands.get(i).getType()));
-            }
-        }
-        val.append('}');
-        return val.toString();
+       return getStringForm(false);
     }
     
 	public void setVariableContexts(List<VariableContext> variableContexts) {
@@ -151,5 +143,32 @@ public void setSingleResult(boolean singleResult) {
 	public boolean isSingleResult() {
 		return singleResult;
 	}
+
+	public String getStringForm(boolean full) {
+		StringBuffer val = new StringBuffer(); 
+		if (!full) {
+			val.append(""BatchedUpdate{""); //$NON-NLS-1$
+		}
+        if (commands != null && commands.size() > 0) {
+            for (int i = 0; i < commands.size(); i++) {
+            	if (i > 0) { 
+            		if (full) {
+            			val.append("";\n""); //$NON-NLS-1$
+            		} else {
+            			val.append("",""); //$NON-NLS-1$
+            		}
+            	}
+            	if (full) {
+            		val.append(commands.get(i));
+            	} else {
+            		val.append(getCommandToken(commands.get(i).getType()));	
+            	}
+            }
+        }
+        if (!full) {
+        	val.append('}');
+        }
+	    return val.toString();
+	}
 	
 }",2013-08-06T13:37:23Z,63
"@@ -30,7 +30,11 @@
 
 import org.junit.Test;
 import org.teiid.cache.DefaultCacheFactory;
+import org.teiid.language.Parameter;
+import org.teiid.language.visitor.CollectorVisitor;
+import org.teiid.metadata.Table;
 import org.teiid.query.metadata.QueryMetadataInterface;
+import org.teiid.query.metadata.TransformationMetadata;
 import org.teiid.query.optimizer.TestOptimizer;
 import org.teiid.query.optimizer.capabilities.BasicSourceCapabilities;
 import org.teiid.query.optimizer.capabilities.FakeCapabilitiesFinder;
@@ -41,6 +45,7 @@
 import org.teiid.query.sql.lang.Update;
 import org.teiid.query.sql.symbol.Constant;
 import org.teiid.query.unittest.RealMetadataFactory;
+import org.teiid.query.validator.TestUpdateValidator;
 
 
 /**
@@ -82,6 +87,47 @@ public class TestPreparedStatementBatchedUpdate {
     	assertTrue(((Constant)update.getChangeList().getClauses().get(0).getValue()).isMultiValued());
     }
     
+    @Test public void testBatchedUpdatePushdown1() throws Exception {
+    	//TODO: just use straight ddl
+    	TransformationMetadata metadata = TestUpdateValidator.example1();
+		TestUpdateValidator.createView(""select 1 as x, 2 as y"", metadata, ""GX"");
+		Table t = metadata.getMetadataStore().getSchemas().get(""VM1"").getTables().get(""GX"");
+		t.setDeletePlan("""");
+		t.setUpdatePlan("""");
+		t.setInsertPlan(""FOR EACH ROW BEGIN insert into pm1.g1 (e1) values (new.x); END"");
+		
+		String preparedSql = ""insert into gx (x, y) values (?,?)""; //$NON-NLS-1$
+        
+		// Create a testable prepared plan cache
+		SessionAwareCache<PreparedPlan> prepPlanCache = new SessionAwareCache<PreparedPlan>(""preparedplan"", DefaultCacheFactory.INSTANCE, SessionAwareCache.Type.PREPAREDPLAN, 0);
+		
+		// Construct data manager with data
+        HardcodedDataManager dataManager = new HardcodedDataManager(metadata);
+		dataManager.addData(""INSERT INTO g1 (e1) VALUES (convert(?, string))"", new List[] {Arrays.asList(2)}); //$NON-NLS-1$
+		// Source capabilities must support batched updates
+        FakeCapabilitiesFinder capFinder = new FakeCapabilitiesFinder();
+        BasicSourceCapabilities caps = TestOptimizer.getTypicalCapabilities();
+        caps.setCapabilitySupport(Capability.BULK_UPDATE, true);
+        capFinder.addCapabilities(""pm1"", caps); //$NON-NLS-1$
+        
+        // batch with two commands
+		ArrayList<ArrayList<Object>> values = new ArrayList<ArrayList<Object>>(2);
+		values.add(new ArrayList<Object>(Arrays.asList(3, 4)));  //$NON-NLS-1$
+    	values.add(new ArrayList<Object>(Arrays.asList(5, 6)));
+    	
+    	List<?>[] expected = new List[] { 
+                Arrays.asList(2)
+        };
+    	
+    	// Create the plan and process the query
+    	TestPreparedStatement.helpTestProcessing(preparedSql, values, expected, dataManager, capFinder, metadata, prepPlanCache, false, false, false,RealMetadataFactory.example1VDB());
+    	org.teiid.language.Insert insert = (org.teiid.language.Insert)dataManager.getPushdownCommands().iterator().next();
+    	Parameter p = CollectorVisitor.collectObjects(Parameter.class, insert).iterator().next();
+    	assertEquals(0, p.getValueIndex());
+    	assertEquals(Arrays.asList(3), insert.getParameterValues().next());
+    	assertTrue(insert.getParameterValues().hasNext());
+    }
+    
     @Test public void testBatchedUpdateNotPushdown() throws Exception {
         // Create query 
 		String preparedSql = ""UPDATE pm1.g1 SET pm1.g1.e1=?, pm1.g1.e3=? WHERE pm1.g1.e2=?""; //$NON-NLS-1$",2013-08-06T13:37:23Z,34
"@@ -34,6 +34,7 @@
 import org.teiid.dqp.internal.datamgr.LanguageBridgeFactory;
 import org.teiid.events.EventDistributor;
 import org.teiid.query.metadata.QueryMetadataInterface;
+import org.teiid.query.sql.lang.BatchedUpdateCommand;
 import org.teiid.query.sql.lang.Command;
 import org.teiid.query.sql.symbol.Expression;
 import org.teiid.query.util.CommandContext;
@@ -54,6 +55,8 @@ public class HardcodedDataManager implements
     
     private boolean mustRegisterCommands = true;
     
+    private boolean fullBatchedUpdate = false;
+    
     private boolean blockOnce;
     
     // Collect all commands run against this class
@@ -141,7 +144,11 @@ public TupleSource registerRequest(CommandContext context,
 
         String commandString = null;
         if (lbf == null) {
-        	commandString = command.toString();
+        	if (command instanceof BatchedUpdateCommand && fullBatchedUpdate) {
+        		commandString = ((BatchedUpdateCommand)command).getStringForm(true);
+        	} else {
+        		commandString = command.toString();
+        	}
         } else {
         	org.teiid.language.Command cmd = lbf.translate(command);
         	this.pushdownCommands.add(cmd);
@@ -181,4 +188,8 @@ public void clearCodeTables() {
 	public EventDistributor getEventDistributor() {
 		return null;
 	}
+	
+	public void setFullBatchedUpdate(boolean fullBatchedUpdate) {
+		this.fullBatchedUpdate = fullBatchedUpdate;
+	}
 }",2013-08-06T13:37:23Z,37
"@@ -126,7 +126,7 @@ public QueryProcessor createQueryProcessor(String query,
         ProcessorPlan plan = helpPlan(sql, tm, null, capFinder, 
                                       new String[] {}, ComparisonMode.EXACT_COMMAND_STRING); //$NON-NLS-1$ 
         
-        HardcodedDataManager dataManager = new HardcodedDataManager();
+        HardcodedDataManager dataManager = new HardcodedDataManager(tm);
         dataManager.addData(""SELECT func(1)"", new List[] {Arrays.asList(2)});
         TestProcessor.helpProcess(plan, cc, dataManager, new List[] {Arrays.asList(2)});
         ",2013-08-06T13:37:23Z,64
"@@ -177,23 +177,25 @@ public RemoteCache getCache(String cacheName) {
 	}	
 
 	/**
-	 * Get the <code>cacheName:className[;pkFieldName[:cacheJavaType]]</code> cache
+	 * Get the <code>cacheName:className[:pkFieldName[:cacheJavaType]]</code> cache
 	 * type mappings.
 	 * 
-	 * @return <code>cacheName:className[;pkFieldName[:cacheJavaType]]</code> cache
+	 * @return <code>cacheName:className[:pkFieldName[:cacheJavaType]]</code> cache
 	 *         type mappings
 	 * @see #setCacheTypeMap(String)
 	 */
 	public String getCacheTypeMap() {
 		return cacheTypes;
 	}
 
+	// 	 TEIID-4582 support all colon separators
 	/**
 	 * Set the cache type mapping
+	 * <code>cacheName:className[:pkFieldName[:cacheJavaType]]</code> or 
 	 * <code>cacheName:className[;pkFieldName[:cacheJavaType]]</code> that represent
 	 * the root node class type for an available cache for access.
 	 * The following is how the string parsed:
-	 * <li>cacheNam = is the name used to retrieve the named cache
+	 * <li>cacheName = is the name used to retrieve the named cache
 	 * <li>className = is the class that is stored in the cache, and will used to create new instances
 	 * <li> [optional] pkFieldName = defined which attribute is defined as the key to the cache, this will be 
 	 * the key used to access the cache for updates.  If not defined, updates will be disabled.
@@ -204,7 +206,7 @@ public String getCacheTypeMap() {
 	 * 
 	 * @param cacheTypeMap
 	 *            the cache type mappings passed in the form of
-	 *            <code>cacheName:className[;pkFieldName[:cacheJavaType]]</code>
+	 *            <code>cacheName:className[:pkFieldName[:cacheJavaType]]</code>
 	 * @see #getCacheTypeMap()
 	 */
 	public void setCacheTypeMap(String cacheTypeMap) {
@@ -531,33 +533,56 @@ protected synchronized ClassLoader loadClasses() throws ResourceException {
 		 * Parsing based on format:  cacheName:className[;pkFieldName[:cacheKeyJavaType]]
 		 * 
 		 */
+		String cacheName = null;
+		String className = null;
+		String pkFieldName = null;
+		String cacheKeyJavaType = null;
 		
-		List<String> parms = StringUtil.getTokens(getCacheTypeMap(), "";""); //$NON-NLS-1$
-		String leftside = parms.get(0);
-		List<String> cacheClassparm = StringUtil.getTokens(leftside, "":"");
-		
-		if (cacheClassparm.size() != 2) {
-			throw new InvalidPropertyException(InfinispanPlugin.Util.gs(InfinispanPlugin.Event.TEIID25022));
-		}
-		
-		String cn = cacheClassparm.get(0);
-		setCacheName(cn);
-		String className = cacheClassparm.get(1);
-		cacheTypeClass = loadClass(className);
-	
-		methodUtil.registerClass(cacheTypeClass);
+		if (getCacheTypeMap().contains("";"")) {
+			List<String> p = StringUtil.getTokens(getCacheTypeMap(), "";""); //$NON-NLS-1$
+			String leftside = p.get(0);
+			List<String> cacheClassparm = StringUtil.getTokens(leftside, "":"");
+						
+			if (cacheClassparm.size() != 2) {
+				throw new InvalidPropertyException(InfinispanPlugin.Util.gs(InfinispanPlugin.Event.TEIID25022));
+			}
+			
+			cacheName = cacheClassparm.get(0);
+			className = cacheClassparm.get(1);
+			
+			if (p.size() == 2) {
+				String rightside = p.get(1);
+				List<String> pkKeyparm = StringUtil.getTokens(rightside, "":"");
+				pkFieldName = pkKeyparm.get(0);
+				if (pkKeyparm.size() == 2) {
+					cacheKeyJavaType = pkKeyparm.get(1);
+				}
+			}
+
+		} else {
+			List<String> parms = StringUtil.getTokens(getCacheTypeMap(), "":""); //$NON-NLS-1$
+			if (parms.size() < 2) {
+				throw new InvalidPropertyException(InfinispanPlugin.Util.gs(InfinispanPlugin.Event.TEIID25022));
+			}
+			
+			cacheName = parms.get(0);
+			className = parms.get(1);
 			
-		if (parms.size() == 2) {
-			String rightside = parms.get(1);
-			List<String> pkKeyparm = StringUtil.getTokens(rightside, "":"");
-			pkKey = pkKeyparm.get(0);
-			if (pkKeyparm.size() == 2) {
-				String pktype = pkKeyparm.get(1);
-				if (pktype != null) {
-					pkCacheKeyJavaType = loadClass(pktype);
+			if (parms.size() > 2) {
+				pkFieldName = parms.get(2);
+				if (parms.size() == 4) {
+					cacheKeyJavaType = parms.get(3);
 				}
 			}
+			
 		}
+		setCacheName(cacheName);
+		cacheTypeClass = loadClass(className);
+	
+		methodUtil.registerClass(cacheTypeClass);
+		
+		if (pkFieldName != null) pkKey = pkFieldName;
+		if (cacheKeyJavaType != null) pkCacheKeyJavaType = getPrimitiveClass(cacheKeyJavaType);
 		
 		cacheSchemaConfigurator.initialize(this, methodUtil);
 
@@ -777,5 +802,34 @@ public void cleanUp() {
 
 	}
 	
+	private Class<?> getPrimitiveClass(String className) throws ResourceException {
+		if (className.contains(""."")) {
+			return loadClass(className);
+		}
+		if (className.equalsIgnoreCase(""int"")) {
+			return int.class;
+		}
+		if (className.equalsIgnoreCase(""long"")) {
+			return long.class;
+		}
+		if (className.equalsIgnoreCase(""double"")) {
+			return double.class;
+		}
+		if (className.equalsIgnoreCase(""short"")) {
+			return short.class;
+		}
+		if (className.equalsIgnoreCase(""char"")) {
+			return char.class;
+		}		
+		if (className.equalsIgnoreCase(""float"")) {
+			return float.class;
+		}
+		if (className.equalsIgnoreCase(""boolean"")) {
+			return boolean.class;
+		}
+		
+		return loadClass(className);
+	}
+	
 }
 ",2016-11-30T21:47:44Z,22
"@@ -102,6 +102,26 @@ public void closeConnection() throws Exception {
 		afactory.setHotRodClientPropertiesFile("""");
 		
 		
+		afactory.createConnectionFactory().getConnection();
+		
+		assertEquals(""CacheClass Type not the same"", AllTypes.class, afactory.getCacheClassType());
+		assertEquals(""Cache name not the same"", ""AllTypesCache"", afactory.getCacheName());
+		
+		assertEquals(""CacheKeyTypeClass not the same"", afactory.getCacheKeyClassType(), Integer.class);
+	}
+	
+	 /**
+	 * TEIID-4582 support all colon delimiters
+     * @throws Exception
+     */
+	@Test public void testtCacheTypeMap11a() throws Exception {
+		afactory.setProtobufDefinitionFile(""allTypes.proto"");
+		afactory.setMessageMarshallers(""org.jboss.teiid.jdg_remote.pojo.AllTypes:org.jboss.teiid.jdg_remote.pojo.marshaller.AllTypesMarshaller"");
+		afactory.setMessageDescriptor(""org.jboss.teiid.jdg_remote.pojo.AllTypes"");
+		afactory.setCacheTypeMap(""AllTypesCache:org.jboss.teiid.jdg_remote.pojo.AllTypes:intKey:"" + Integer.class.getName());
+		afactory.setHotRodClientPropertiesFile("""");
+		
+		
 		afactory.createConnectionFactory().getConnection();
 		
 		assertEquals(""CacheClass Type not the same"", AllTypes.class, afactory.getCacheClassType());
@@ -169,6 +189,26 @@ public void closeConnection() throws Exception {
 		afactory.setHotRodClientPropertiesFile("""");
 		
 		
+		afactory.createConnectionFactory().getConnection();
+		
+		assertEquals(""CacheClass Type not the same"", AllTypes.class, afactory.getCacheClassType());
+		assertEquals(""Cache name not the same"", ""AllTypesCache"", afactory.getCacheName());
+		
+		assertNull(afactory.getCacheKeyClassType());
+	}
+	
+	/**
+	 * Test all colon delimiter for cacheTypeMap
+	 * @throws Exception
+	 */
+	@Test public void testCacheTypeMapNoCacheKeytypeB() throws Exception {
+		afactory.setProtobufDefinitionFile(""allTypes.proto"");
+		afactory.setMessageMarshallers(""org.jboss.teiid.jdg_remote.pojo.AllTypes:org.jboss.teiid.jdg_remote.pojo.marshaller.AllTypesMarshaller"");
+		afactory.setMessageDescriptor(""org.jboss.teiid.jdg_remote.pojo.AllTypes"");
+		afactory.setCacheTypeMap(""AllTypesCache:org.jboss.teiid.jdg_remote.pojo.AllTypes:intKey"");
+		afactory.setHotRodClientPropertiesFile("""");
+		
+		
 		afactory.createConnectionFactory().getConnection();
 		
 		assertEquals(""CacheClass Type not the same"", AllTypes.class, afactory.getCacheClassType());",2016-11-30T21:47:44Z,38
"@@ -46,6 +46,7 @@
 import org.teiid.resource.spi.BasicConnectionFactory;
 import org.teiid.resource.spi.BasicManagedConnectionFactory;
 import org.teiid.translator.TranslatorException;
+import org.teiid.translator.infinispan.libmode.InfinispanPlugin;
 import org.teiid.translator.object.CacheNameProxy;
 import org.teiid.translator.object.ClassRegistry;
 import org.teiid.util.Version;
@@ -107,15 +108,6 @@ public InfinispanCacheRAConnection getConnection()
 
 	}
 	
-//	public String getCacheName() {
-//		// return the cacheName that is mapped as the alias
-//		return cacheNameProxy.getPrimaryCacheAliasName();
-//	}
-//
-//	public String getCacheStagingName() {
-//		return cacheNameProxy.getStageCacheAliasName();
-//	}
-	
 	/** 
 	 * Call to set the name of the cache to access when calling getCache
 	 * @param cacheName
@@ -344,32 +336,56 @@ protected synchronized ClassLoader loadClasses() throws ResourceException {
 		 * 
 		 */
 		
-		List<String> parms = StringUtil.getTokens(getCacheTypeMap(), "";""); //$NON-NLS-1$
-		String leftside = parms.get(0);
-		List<String> cacheClassparm = StringUtil.getTokens(leftside, "":"");
-		
-		if (cacheClassparm.size() != 2) {
-			throw new InvalidPropertyException(UTIL.gs(""TEIID25022""));
-		}
-		
-		String cn = cacheClassparm.get(0);
-		setCacheName(cn);
-		String className = cacheClassparm.get(1);
-		cacheTypeClass = loadClass(className);
+		String cacheName = null;
+		String className = null;
+		String pkFieldName = null;
+		String cacheKeyJavaType = null;
 		
-		methodUtil.registerClass(cacheTypeClass);
+		if (getCacheTypeMap().contains("";"")) {
+			List<String> p = StringUtil.getTokens(getCacheTypeMap(), "";""); //$NON-NLS-1$
+			String leftside = p.get(0);
+			List<String> cacheClassparm = StringUtil.getTokens(leftside, "":"");
+						
+			if (cacheClassparm.size() != 2) {
+				throw new InvalidPropertyException(InfinispanPlugin.Util.gs(InfinispanPlugin.Event.TEIID21522));
+			}
+			
+			cacheName = cacheClassparm.get(0);
+			className = cacheClassparm.get(1);
+			
+			if (p.size() == 2) {
+				String rightside = p.get(1);
+				List<String> pkKeyparm = StringUtil.getTokens(rightside, "":"");
+				pkFieldName = pkKeyparm.get(0);
+				if (pkKeyparm.size() == 2) {
+					cacheKeyJavaType = pkKeyparm.get(1);
+				}
+			}
 
-		if (parms.size() == 2) {
-			String rightside = parms.get(1);
-			List<String> pkKeyparm = StringUtil.getTokens(rightside, "":"");
-			pkKey = pkKeyparm.get(0);
-			if (pkKeyparm.size() == 2) {
-				String pktype = pkKeyparm.get(1);
-				if (pktype != null) {
-					pkCacheKeyJavaType = getPrimitiveClass(pktype);
+		} else {
+			List<String> parms = StringUtil.getTokens(getCacheTypeMap(), "":""); //$NON-NLS-1$
+			if (parms.size() < 2) {
+				throw new InvalidPropertyException(InfinispanPlugin.Util.gs(InfinispanPlugin.Event.TEIID21522));
+			}
+			
+			cacheName = parms.get(0);
+			className = parms.get(1);
+			
+			if (parms.size() > 2) {
+				pkFieldName = parms.get(2);
+				if (parms.size() == 4) {
+					cacheKeyJavaType = parms.get(3);
 				}
 			}
-		}		
+			
+		}
+		setCacheName(cacheName);
+		cacheTypeClass = loadClass(className);
+	
+		methodUtil.registerClass(cacheTypeClass);
+		
+		if (pkFieldName != null) pkKey = pkFieldName;
+		if (cacheKeyJavaType != null) pkCacheKeyJavaType = getPrimitiveClass(cacheKeyJavaType);
 		
 		return cl;
 ",2016-11-30T21:47:44Z,65
"@@ -26,4 +26,6 @@ InfinispanManagedConnectionFactory.invalidServerConfiguration=Must set configura
 InfinispanManagedConnectionFactory.unableToFindCacheUsingJNDI=Unable to find cache using JNDI {0}
 InfinispanManagedConnectionFactory.invalidMaterializationSettings=To configure materialization, the StagingCacheName and AliasCacheName properties must be specified.
 
-InfinispanManagedConnectionFactory.aliasCacheNotDefined=The alias cache '{0}' was not found when asking the cache container.
\ No newline at end of file
+InfinispanManagedConnectionFactory.aliasCacheNotDefined=The alias cache '{0}' was not found when asking the cache container.
+
+TEIID21505=Criteria type {0} is not supported
\ No newline at end of file",2016-11-30T21:47:44Z,66
"@@ -15,7 +15,7 @@
 import org.teiid.language.Command;
 import org.teiid.translator.ExecutionContext;
 import org.teiid.translator.TranslatorException;
-import org.teiid.translator.infinispan.libmode.InfinispanCacheExecutionFactory;
+import org.teiid.translator.infinispan.libmode.InfinispanLibModeExecutionFactory;
 import org.teiid.translator.object.ObjectConnection;
 import org.teiid.translator.object.ObjectUpdateExecution;
 import org.teiid.translator.object.testdata.annotated.Trade;
@@ -30,7 +30,7 @@ public class TestInfinispanUpdateExecution {
 	private static ExecutionContext context;
 	private static ObjectConnection CONNECTION;
 	
-	private static InfinispanCacheExecutionFactory TRANS_FACTORY = null;
+	private static InfinispanLibModeExecutionFactory TRANS_FACTORY = null;
 
 	@BeforeClass
     public static void beforeEachClass() throws Exception {  
@@ -39,10 +39,10 @@ public static void beforeEachClass() throws Exception {
 		factory = new InfinispanManagedConnectionFactory();
 
 		factory.setConfigurationFileNameForLocalCache(""./src/test/resources/infinispan_persistent_config.xml"");
-		factory.setCacheTypeMap(InfinispanTestHelper.TRADE_CACHE_NAME + "":"" + ""org.teiid.translator.object.testdata.annotated.Trade;longValue:long"");
+		factory.setCacheTypeMap(InfinispanTestHelper.TRADE_CACHE_NAME + "":"" + ""org.teiid.translator.object.testdata.annotated.Trade:longValue:long"");
 
 		
-		TRANS_FACTORY = new InfinispanCacheExecutionFactory();
+		TRANS_FACTORY = new InfinispanLibModeExecutionFactory();
 		TRANS_FACTORY.start();
 		
 		CONNECTION = factory.createConnectionFactory().getConnection();",2016-11-30T21:47:44Z,4
"@@ -36,7 +36,7 @@ TEIID25011=The StagingCacheName and AliasCacheName must both be configured to do
 
 TEIID25020=MessageDescriptor must be specified
 TEIID25021=CacheTypeMap has not been set
-TEIID25022=CacheTypeMap incorrectly configured, must be in the form of - cacheName:className[;pkFieldName[:cacheKeyJavaType]]
+TEIID25022=CacheTypeMap incorrectly configured, must be in the form of - cacheName:className[ [; | :]pkFieldName[:cacheKeyJavaType]]
 TEIID25023=Must set configuration as to how the cache will be obtained (i.e., jndi, server list or properties file)
 TEIID25025=Unable to find cache using JNDI {0}
 TEIID25026=Cache Container {0} is not an instance of RemoteCacheManager",2016-11-30T21:47:44Z,67
"@@ -39,32 +39,8 @@ public static enum Event implements BundleUtil.Event{
     	TEIID21502,
     	TEIID21503,
     	TEIID21504,
-    	TEIID21505
-//    	,
-//    	
-//		TEIID25000,
-//		TEIID25001,
-//		TEIID25002,
-//		TEIID25003,
-//		TEIID25004,
-//		TEIID25005,
-//		TEIID25006,
-//		TEIID25007,
-//		TEIID25008,
-//		TEIID25009,
-//		TEIID25010,
-//	
-//		TEIID25020,
-//		TEIID25021,
-//		TEIID25022,
-//		TEIID25023,
-//		TEIID25024,
-//		TEIID25025,
-//		TEIID25026,
-//		TEIID25027,
-//		TEIID25028,
-//		TEIID25029,
-//		TEIID25030,		
-//		TEIID25031	
+    	TEIID21505,
+    	TEIID21522
+
 	}
 }",2016-11-30T21:47:44Z,30
"@@ -29,3 +29,5 @@ TEIID21502=Comparing using a NULL is not currently supported.
 TEIID21503=Unsupported expression of {0} when performing {1}
 TEIID21504=Program error, found more than 1 results for key {0}
 TEIID21505=Criteria type {0} is not supported
+
+TEIID21522=CacheTypeMap incorrectly configured, must be in the form of - cacheName:className[ [; | :]pkFieldName[:cacheKeyJavaType]]",2016-11-30T21:47:44Z,68
"@@ -86,9 +86,6 @@ private enum CACHE_TYPE {
 	private String module;
 	private ClassLoader cl;
 	private CacheNameProxy cacheNameProxy;
-	private Version version = null;
-
-
 
 	@Override
 	public BasicConnectionFactory<InfinispanConnectionImpl> createConnectionFactory()
@@ -432,6 +429,10 @@ protected void setCacheName(String cacheName) throws ResourceException {
 	public CacheNameProxy getCacheNameProxy() {
 		return cacheNameProxy;
 	}
+	
+    public boolean configuredUsingAnnotations() {
+    	return this.usingAnnotations;
+    }
 
 	public boolean isAlive() {
 		return this.cacheContainer != null;",2016-08-24T20:48:07Z,14
"@@ -274,5 +274,16 @@ public void clearCache(String cacheName) throws TranslatorException {
 	public SearchType getSearchType() {
 		return new DSLSearch(this);
 	}
+	
+	/**
+	* Call to determine if the JDG cache is configured using annotation (or using protobuf and marsharllers).
+	* @return true if annotations are used
+	*/
+
+	@Override
+	 public boolean configuredUsingAnnotations() {
+	        return config.configuredUsingAnnotations();
+	}
+
 
 }
\ No newline at end of file",2016-08-24T20:48:07Z,40
"@@ -49,5 +49,11 @@ public interface InfinispanHotRodConnection extends ObjectConnection {
 	 */
 	public Descriptor getDescriptor()  throws TranslatorException;
 	
+	/**
+	* Call to determine if the JDG cache is configured using annotation (or using protobuf and marsharllers).
+	* @return true if annotations are used
+	*/ 
+	public boolean configuredUsingAnnotations();
+	
 }
 ",2016-08-24T20:48:07Z,33
"@@ -26,6 +26,7 @@
 
 import org.teiid.language.Argument;
 import org.teiid.language.Command;
+import org.teiid.metadata.MetadataFactory;
 import org.teiid.metadata.RuntimeMetadata;
 import org.teiid.translator.ExecutionContext;
 import org.teiid.translator.MetadataProcessor;
@@ -81,6 +82,11 @@ public InfinispanHotRodExecutionFactory() {
 	public int getMaxFromGroups() {
 		return 2;
 	}
+	
+	@Override
+	public boolean isSourceRequiredForCapabilities() {
+		return true;
+	}
 
 	/**
 	 * {@inheritDoc}
@@ -94,7 +100,6 @@ public ProcedureExecution createDirectExecution(List<Argument> arguments,
 		return super.createDirectExecution(arguments, command, executionContext,
 				metadata, connection);
 	}
-    
 
 	@Override
     public boolean supportsAliasedTable() {
@@ -156,6 +161,20 @@ public boolean supportsNotCriteria() {
 		return Boolean.FALSE.booleanValue();
 	}
 
+	/**
+	 * {@inheritDoc}
+	 *
+	 * @see org.teiid.translator.ExecutionFactory#getMetadata(org.teiid.metadata.MetadataFactory,
+	 *      java.lang.Object)
+	 */
+//	@Override
+//	public void getMetadata(MetadataFactory metadataFactory, ObjectConnection conn) throws TranslatorException {
+//		InfinispanHotRodConnection dsl = (InfinispanHotRodConnection) conn;
+//		this.setSupportsSearchabilityUsingAnnotations(dsl.configuredUsingAnnotations());
+//
+//		super.getMetadata(metadataFactory, conn);
+//	}
+
 	@Override
     public MetadataProcessor<ObjectConnection> getMetadataProcessor(){
 		if (this.supportsSearchabilityUsingAnnotations()) {
@@ -176,6 +195,10 @@ public void initCapabilities(ObjectConnection connection)
 		if (connection == null) {
 			return;
 		}
+		
+		InfinispanHotRodConnection dsl = (InfinispanHotRodConnection) connection;
+		this.setSupportsSearchabilityUsingAnnotations(dsl.configuredUsingAnnotations());
+
 
 		Version version = connection.getVersion();
 		// with JDG 6.6 supportCompareCriteria no longer needs to be disabled",2016-08-24T20:48:07Z,69
"@@ -25,6 +25,7 @@
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -39,8 +40,8 @@
 import org.teiid.metadata.Table;
 import org.teiid.translator.MetadataProcessor;
 import org.teiid.translator.TranslatorException;
-import org.teiid.translator.TranslatorProperty;
 import org.teiid.translator.TypeFacility;
+import org.teiid.translator.TranslatorProperty;
 import org.teiid.translator.TranslatorProperty.PropertyType;
 import org.teiid.translator.infinispan.hotrod.InfinispanHotRodConnection;
 import org.teiid.translator.infinispan.hotrod.InfinispanPlugin;
@@ -50,8 +51,6 @@
 import protostream.com.google.protobuf.Descriptors;
 
 
-
-
 /**
  * The ProtobufMetadataProcess is the logic for providing metadata to the translator based on
  * the google protobuf Descriptors and the defined class types.
@@ -93,31 +92,31 @@ public class ProtobufMetadataProcessor implements MetadataProcessor<ObjectConnec
 
 	private Table rootTable = null;
 	private Method pkMethod = null;
+	private Map<String, String> repeatableMap = new HashMap<String, String>();
 	protected boolean classObjectColumn = false;
 	
-	@TranslatorProperty(display=""Class Object As Column"", category=PropertyType.IMPORT, description=""If true, and when the translator provides the metadata, a column of object data type will be created that represents the stored object in the cache"", advanced=true)
+	@TranslatorProperty(display = ""Class Object As Column"", category = PropertyType.IMPORT, description = ""If true, and when the translator provides the metadata, a column of object data type will be created that represents the stored object in the cache"", advanced = true)
 	public boolean isClassObjectColumn() {
 		return classObjectColumn;
-	}	
+	} 
 	
 	public void setClassObjectColumn(boolean classObjectAsColumn) {
 		this.classObjectColumn = classObjectAsColumn;
 	}
-	
+
 	@Override
 	public void process(MetadataFactory metadataFactory, ObjectConnection conn) throws TranslatorException {
 			
 			String cacheName = conn.getCacheName();			
 
 			Class<?> type = conn.getCacheClassType();
-			boolean hasInnerClasses = false;
-			if (conn.getDDLHandler().getCacheNameProxy().getAliasCacheName() != null) {
-				
-				hasInnerClasses = createRootTable(metadataFactory, type, ((InfinispanHotRodConnection) conn).getDescriptor(), cacheName,conn);
-				
-				
+			createRootTable(metadataFactory, type, ((InfinispanHotRodConnection) conn).getDescriptor(), cacheName,conn);
+
+			boolean materializied = conn.getDDLHandler().getCacheNameProxy().getAliasCacheName() != null;
+			if (materializied) {
+											
 				Table stageTable = addTable(metadataFactory, type, true, true);
-				
+							
 				stageTable.setColumns(rootTable.getColumns());
 				stageTable.setForiegnKeys(rootTable.getForeignKeys());
 				stageTable.setFunctionBasedIndexes(rootTable.getFunctionBasedIndexes());
@@ -126,46 +125,43 @@ public void process(MetadataFactory metadataFactory, ObjectConnection conn) thro
 				stageTable.setSupportsUpdate(true);
 				stageTable.setUniqueKeys(rootTable.getUniqueKeys());
 				stageTable.setPrimaryKey(rootTable.getPrimaryKey());
-				stageTable.setProperty(JavaBeanMetadataProcessor.PRIMARY_TABLE_PROPERTY, rootTable.getFullName());
-
+				stageTable.setProperty(JavaBeanMetadataProcessor.PRIMARY_TABLE_PROPERTY, rootTable.getFullName());	
+				
 			} else {
-				hasInnerClasses = createRootTable(metadataFactory, type, ((InfinispanHotRodConnection) conn).getDescriptor(), cacheName,conn);
-			}
-			
-			if (hasInnerClasses) {
+				// only define inner classes when the data source is not using materialization.  
+				// do not support materializing to inner classes
 				addInnerClasses(metadataFactory, ((InfinispanHotRodConnection) conn).getDescriptor(), conn );
 			}
 	}
 
 
-	private boolean createRootTable(MetadataFactory mf, Class<?> entity, Descriptor descriptor, String cacheName, ObjectConnection conn) throws TranslatorException {
+	private void createRootTable(MetadataFactory mf, Class<?> entity, Descriptor descriptor, String cacheName, ObjectConnection conn) throws TranslatorException {
 			
 		String pkField = conn.getPkField();
 		boolean updatable = (pkField != null ? true : false);
 		
 		rootTable = addTable(mf, entity, updatable, false);
 		
-		
 		if (classObjectColumn) {
-			// add column for cache Object, set to non-selectable by default so that select * queries don't fail by default
+	    // add column for cache Object, set to non-selectable by default so that select * queries don't fail by default
 			addRootColumn(mf, Object.class, entity, null, null, SearchType.Unsearchable, rootTable.getName(), rootTable, false, false, NullType.Nullable); //$NON-NLS-1$	
 		}
+		
 		pkMethod = null;
 		if (updatable) {
 		    pkMethod = conn.getClassRegistry().getReadClassMethods(entity.getName()).get(pkField);
 		    if (pkMethod == null) {
 				throw new TranslatorException(InfinispanPlugin.Util.gs(InfinispanPlugin.Event.TEIID25008, new Object[] {pkField, cacheName, entity.getName()}));
 		    	
-		    }
-		    
+		    }	    
 		}
 		
 		boolean addKey = false;
 		boolean repeats = false;
 		// the descriptor is needed to determine which fields are defined as searchable.
 		for (FieldDescriptor fd:descriptor.getFields()) {	
 			if (fd.isRepeated() ) {
-				repeats = true;
+				repeatableMap.put(fd.getMessageType().getName(), fd.getName());
 			} else {
 				NullType nt = NullType.Nullable;
 				SearchType st = isSearchable(fd);
@@ -175,7 +171,10 @@ private boolean createRootTable(MetadataFactory mf, Class<?> entity, Descriptor
 					addKey = true;
 					st = SearchType.Searchable;
 					nt = NullType.No_Nulls;
+				} else if (fd.isRequired()) {
+					nt = NullType.No_Nulls;
 				}
+				// dont make primary key updatable, the object must be deleted and readded in order to change the key
 				addRootColumn(mf, returnType, getProtobufNativeType(fd), fd.getFullName(), fd.getName(), st, rootTable.getName(), rootTable, true, true, nt);	
 			}
 		}	
@@ -190,21 +189,17 @@ private boolean createRootTable(MetadataFactory mf, Class<?> entity, Descriptor
 	        ArrayList<String> x = new ArrayList<String>(1) ;
 	        x.add(pkField);
 	        mf.addPrimaryKey(pkName, x , rootTable);		    
-		}
-			
-		return repeats;
+		}			
 	}
-	
+			
 	private void addInnerClasses(MetadataFactory mf, Descriptor descriptor, ObjectConnection conn) throws TranslatorException {
-
-		for (FieldDescriptor fd:descriptor.getFields()) {	
-			if (fd.isRepeated() ) {
-				processRepeatedType(mf,fd, rootTable, pkMethod, conn);	
-			} 
+		for (Descriptor des: descriptor.getNestedTypes()) {
+			createInnerTable(mf, des, rootTable, pkMethod, conn);		
 		}	
 
 	}
 	
+	
 	private Table addTable(MetadataFactory mf, Class<?> entity, boolean updatable, boolean staging) {
 		String tName = entity.getSimpleName();
 		if (staging) {
@@ -215,7 +210,6 @@ private Table addTable(MetadataFactory mf, Class<?> entity, boolean updatable, b
 			//already loaded
 			return t;
 		}
-		
 		t = mf.addTable(tName);
 		t.setSupportsUpdate(updatable);
 
@@ -229,17 +223,74 @@ private static Method findMethod(String className, String methodName, ObjectConn
         Method m = mapMethods.get(methodName);
         if (m!= null) return m;
         
+        m = mapMethods.get(methodName.toLowerCase());
+        if (m!= null) return m;
+        
         // because the class 'methods' contains 2 different references
         //  get'Name'  and 'Name', this will look for the 'Name' version
         for (Iterator<String> it=mapMethods.keySet().iterator(); it.hasNext();) {
-        	String mName = (String) it.next();
+        	String mName = it.next();
         	if (mName.toLowerCase().startsWith(methodName.toLowerCase()) ) {
         		m = mapMethods.get(mName);
         		return m;
         	} 
         }
 		throw new TranslatorException(""Program Error: unable to find method "" + methodName + "" on class "" + className);
 
+    }
+    private void createInnerTable(MetadataFactory mf, Descriptor desc, Table rootTable, Method pkMethod, ObjectConnection conn) throws TranslatorException  {
+
+    	//	Descriptor d = desc.getContainingType();
+		Descriptor parent = desc.getContainingType();
+		// Need to find the method name that corresponds to the repeating attribute
+		// so that the actual method name can be used in defining the NIS
+		// which will provide the correct method to use when retrieving the data at execution time
+
+		Class<?> pc = getRegisteredClass(parent.getName(), conn);
+		Class<?> c = getRegisteredClass(desc.getName(), conn);
+
+//		throw new TranslatorException(InfinispanPlugin.Util.gs(InfinispanPlugin.Event.TEIID25060, new Object[] { colName }));
+
+		Table t = addTable(mf, c, true, false);
+		t.setSupportsUpdate(rootTable.supportsUpdate());
+
+		String fd_Name = repeatableMap.get(desc.getName());
+		List<FieldDescriptor> fields = desc.getFields();
+		for (FieldDescriptor f:fields) {
+
+			
+			final SearchType st = isSearchable(f);
+			
+			if (fd_Name == null) {
+				fd_Name = """";
+			}
+			// need to use the repeated descriptor, fd, as the prefix to the NIS in order to perform query
+			addSubColumn(mf, getJavaType(f, c, conn),  getProtobufNativeType(f), f, st, fd_Name, t, true, true, (f.isRequired() ? NullType.No_Nulls  : NullType.Nullable) );	
+		}
+		
+		if (pkMethod != null) {
+			// if not repeatable, then use the attribute name
+			String mName =  findMethodName(pc.getName(), fd_Name, conn);
+			
+			if (mName == null) {		
+				mName = desc.getName();
+			}
+
+			
+			// use the same parent table primary ke column name in the foreign key tables
+			String methodName = rootTable.getPrimaryKey().getColumns().get(0).getName();
+			List<String> keyColumns = new ArrayList<String>();
+			keyColumns.add(methodName);
+			List<String> referencedKeyColumns = new ArrayList<String>();
+			referencedKeyColumns.add(methodName);
+			String fkName = ""FK_"" + rootTable.getName().toUpperCase();
+    		addRootColumn(mf, pkMethod.getReturnType(), pkMethod.getReturnType(), methodName, methodName, SearchType.Searchable, t.getName(), t, true, true, NullType.No_Nulls);
+			ForeignKey fk = mf.addForiegnKey(fkName, keyColumns, referencedKeyColumns, rootTable.getName(), t);
+			
+			fk.setNameInSource(mName);
+
+		}		
+
     }
     
 	private void processRepeatedType(MetadataFactory mf, FieldDescriptor fd, Table rootTable, Method pkMethod, ObjectConnection conn) throws TranslatorException  {
@@ -370,6 +421,8 @@ private Column addRootColumn(MetadataFactory mf, Class<?> type, Class<?> nativeT
 	private Column addSubColumn(MetadataFactory mf, Class<?> type, Class<?> nativeType, FieldDescriptor fd,
 			 SearchType searchType, String nisPrefix, Table rootTable, boolean selectable, boolean updateable, NullType nt) {
 		String attributeName = fd.getName();
+		
+		// create the combined name to use for a 1-to-many relationship when searching
 		String nis = nisPrefix + ""."" + fd.getName();
 
 		return addColumn(mf, type, nativeType, attributeName, nis, searchType, rootTable, selectable, updateable, nt);
@@ -427,7 +480,7 @@ private Column addColumn(MetadataFactory mf, Class<?> type, Class<?> nativeType,
 //			c.setNativeType(type.getName());
 //		}
 
-		return c;
+		return c; 
 	}	
 	
 	private static SearchType isSearchable(FieldDescriptor fd) {",2016-08-24T20:48:07Z,19
"@@ -43,12 +43,14 @@
  */
 public class TestInfinispanHotRodConnection extends SimpleMapCacheConnection implements InfinispanHotRodConnection {
 	protected Version version;
+	protected boolean useAnnotations;
 	
 	public static ObjectConnection createConnection(Map<Object,Object> map, Version version) {
 		CacheNameProxy proxy = new CacheNameProxy(TradesAnnotatedCacheSource.TRADES_CACHE_NAME);
 
 		TestInfinispanHotRodConnection conn = new TestInfinispanHotRodConnection(map, TradesAnnotatedCacheSource.METHOD_REGISTRY, proxy);
 		conn.setVersion(version);
+		conn.setConfiguredUsingAnnotations(true);
 				
 		return conn;
 	}
@@ -104,4 +106,18 @@ public Version getVersion() {
 	public void setVersion(Version v) {
 		this.version = v;
 	}
+
+	/**
+	 * {@inheritDoc}
+	 *
+	 * @see org.teiid.translator.infinispan.hotrod.InfinispanHotRodConnection#configuredUsingAnnotations()
+	 */
+	@Override
+	public boolean configuredUsingAnnotations() {
+		return useAnnotations;
+	}
+	
+	public void setConfiguredUsingAnnotations(boolean useAnnotations) {
+		this.useAnnotations = useAnnotations;
+	}
 }",2016-08-24T20:48:07Z,25
"@@ -1,7 +1,7 @@
 CREATE FOREIGN TABLE AllTypes (
 	intKey integer NOT NULL OPTIONS (NAMEINSOURCE 'intKey', SEARCHABLE 'Searchable', NATIVE_TYPE 'int'),
 	stringNum string OPTIONS (NAMEINSOURCE 'stringNum', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
-	stringKey string OPTIONS (NAMEINSOURCE 'stringKey', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'java.lang.String'),
+	stringKey string NOT NULL OPTIONS (NAMEINSOURCE 'stringKey', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'java.lang.String'),
 	floatNum float OPTIONS (NAMEINSOURCE 'floatNum', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'float'),
 	bigIntegerValue biginteger OPTIONS (NAMEINSOURCE 'bigIntegerValue', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'long'),
 	shortValue short OPTIONS (NAMEINSOURCE 'shortValue', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'int'),",2016-08-24T20:48:07Z,70
"@@ -1,14 +1,14 @@
 CREATE FOREIGN TABLE Person (
 	PersonObject object OPTIONS (NAMEINSOURCE 'this', SELECTABLE FALSE, UPDATABLE FALSE, SEARCHABLE 'Unsearchable', NATIVE_TYPE 'org.jboss.as.quickstarts.datagrid.hotrod.query.domain.Person'),
-	name string OPTIONS (NAMEINSOURCE 'name', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
+	name string NOT NULL OPTIONS (NAMEINSOURCE 'name', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
 	id integer NOT NULL OPTIONS (NAMEINSOURCE 'id', SEARCHABLE 'Searchable', NATIVE_TYPE 'int'),
 	email string OPTIONS (NAMEINSOURCE 'email', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'java.lang.String'),
 	CONSTRAINT PK_ID PRIMARY KEY(id)
 ) OPTIONS (UPDATABLE TRUE);
 
 CREATE FOREIGN TABLE PhoneNumber (
-	number string OPTIONS (NAMEINSOURCE 'phone.number', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
+	number string NOT NULL OPTIONS (NAMEINSOURCE 'phone.number', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
 	type string OPTIONS (NAMEINSOURCE 'phone.type', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'java.lang.Enum'),
-	id integer NOT NULL OPTIONS (NAMEINSOURCE 'id', SELECTABLE FALSE, UPDATABLE FALSE, SEARCHABLE 'Searchable', NATIVE_TYPE 'int'),
+	id integer NOT NULL OPTIONS (NAMEINSOURCE 'id', SEARCHABLE 'Searchable', NATIVE_TYPE 'int'),
 	CONSTRAINT FK_PERSON FOREIGN KEY(id) REFERENCES Person (id) OPTIONS (NAMEINSOURCE 'phones')
 ) OPTIONS (UPDATABLE TRUE);
\ No newline at end of file",2016-08-24T20:48:07Z,71
"@@ -1,13 +1,13 @@
 CREATE FOREIGN TABLE Person (
-	name string OPTIONS (NAMEINSOURCE 'name', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
+	name string NOT NULL OPTIONS (NAMEINSOURCE 'name', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
 	id integer NOT NULL OPTIONS (NAMEINSOURCE 'id', SEARCHABLE 'Searchable', NATIVE_TYPE 'int'),
 	email string OPTIONS (NAMEINSOURCE 'email', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'java.lang.String'),
 	CONSTRAINT PK_ID PRIMARY KEY(id)
 ) OPTIONS (UPDATABLE TRUE);
 
 CREATE FOREIGN TABLE PhoneNumber (
-	number string OPTIONS (NAMEINSOURCE 'phone.number', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
+	number string NOT NULL OPTIONS (NAMEINSOURCE 'phone.number', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
 	type string OPTIONS (NAMEINSOURCE 'phone.type', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'java.lang.Enum'),
-	id integer NOT NULL OPTIONS (NAMEINSOURCE 'id', SELECTABLE FALSE, UPDATABLE FALSE, SEARCHABLE 'Searchable', NATIVE_TYPE 'int'),
+	id integer NOT NULL OPTIONS (NAMEINSOURCE 'id', SEARCHABLE 'Searchable', NATIVE_TYPE 'int'),
 	CONSTRAINT FK_PERSON FOREIGN KEY(id) REFERENCES Person (id) OPTIONS (NAMEINSOURCE 'phones')
 ) OPTIONS (UPDATABLE TRUE);
\ No newline at end of file",2016-08-24T20:48:07Z,72
"@@ -36,7 +36,6 @@
 import org.teiid.translator.ProcedureExecution;
 import org.teiid.translator.ResultSetExecution;
 import org.teiid.translator.TranslatorException;
-import org.teiid.translator.TranslatorProperty;
 import org.teiid.translator.UpdateExecution;
 import org.teiid.translator.object.metadata.JavaBeanMetadataProcessor;
 
@@ -52,7 +51,7 @@ public abstract class ObjectExecutionFactory extends
 		ExecutionFactory<ConnectionFactory, ObjectConnection> {
 
 	public static final int MAX_SET_SIZE = 10000;
-	private boolean searchabilityBasedOnAnnotations = true;
+	private boolean searchabilityBasedOnAnnotations = false;
 	
 	public ObjectExecutionFactory() {
 		setSourceRequiredForMetadata(false);
@@ -96,7 +95,6 @@ public ProcedureExecution createDirectExecution(List<Argument> arguments, Comman
 		return new ObjectDirectExecution(arguments, command, connection, executionContext, this);
 	}   
 	
-	@TranslatorProperty(display=""SearchabilityBasedOnAnnotations"", description=""If false, will turn off determining column searchability based on hibernate annotations"", advanced=true)
 	public boolean supportsSearchabilityUsingAnnotations() {
 		return searchabilityBasedOnAnnotations;
 	}	",2016-08-24T20:48:07Z,73
"@@ -23,11 +23,12 @@ public class TestAnnotationMetadataProcessor {
 	@Before public void beforeEach() throws Exception{	
 		 
 		TRANSLATOR = new SimpleMapCacheExecutionFactory();
+		TRANSLATOR.setSupportsSearchabilityUsingAnnotations(true);
+
     }
 	
 	@Test
 	public void testPersonMetadata() throws Exception {
-		
 		TRANSLATOR.start();
 
 ",2016-08-24T20:48:07Z,74
"@@ -86,9 +86,6 @@ private enum CACHE_TYPE {
 	private String module;
 	private ClassLoader cl;
 	private CacheNameProxy cacheNameProxy;
-	private Version version = null;
-
-
 
 	@Override
 	public BasicConnectionFactory<InfinispanConnectionImpl> createConnectionFactory()
@@ -432,6 +429,10 @@ protected void setCacheName(String cacheName) throws ResourceException {
 	public CacheNameProxy getCacheNameProxy() {
 		return cacheNameProxy;
 	}
+	
+    public boolean configuredUsingAnnotations() {
+    	return this.usingAnnotations;
+    }
 
 	public boolean isAlive() {
 		return this.cacheContainer != null;",2016-08-24T20:48:07Z,14
"@@ -274,5 +274,16 @@ public void clearCache(String cacheName) throws TranslatorException {
 	public SearchType getSearchType() {
 		return new DSLSearch(this);
 	}
+	
+	/**
+	* Call to determine if the JDG cache is configured using annotation (or using protobuf and marsharllers).
+	* @return true if annotations are used
+	*/
+
+	@Override
+	 public boolean configuredUsingAnnotations() {
+	        return config.configuredUsingAnnotations();
+	}
+
 
 }
\ No newline at end of file",2016-08-24T20:48:07Z,40
"@@ -49,5 +49,11 @@ public interface InfinispanHotRodConnection extends ObjectConnection {
 	 */
 	public Descriptor getDescriptor()  throws TranslatorException;
 	
+	/**
+	* Call to determine if the JDG cache is configured using annotation (or using protobuf and marsharllers).
+	* @return true if annotations are used
+	*/ 
+	public boolean configuredUsingAnnotations();
+	
 }
 ",2016-08-24T20:48:07Z,33
"@@ -26,6 +26,7 @@
 
 import org.teiid.language.Argument;
 import org.teiid.language.Command;
+import org.teiid.metadata.MetadataFactory;
 import org.teiid.metadata.RuntimeMetadata;
 import org.teiid.translator.ExecutionContext;
 import org.teiid.translator.MetadataProcessor;
@@ -81,6 +82,11 @@ public InfinispanHotRodExecutionFactory() {
 	public int getMaxFromGroups() {
 		return 2;
 	}
+	
+	@Override
+	public boolean isSourceRequiredForCapabilities() {
+		return true;
+	}
 
 	/**
 	 * {@inheritDoc}
@@ -94,7 +100,6 @@ public ProcedureExecution createDirectExecution(List<Argument> arguments,
 		return super.createDirectExecution(arguments, command, executionContext,
 				metadata, connection);
 	}
-    
 
 	@Override
     public boolean supportsAliasedTable() {
@@ -156,6 +161,20 @@ public boolean supportsNotCriteria() {
 		return Boolean.FALSE.booleanValue();
 	}
 
+	/**
+	 * {@inheritDoc}
+	 *
+	 * @see org.teiid.translator.ExecutionFactory#getMetadata(org.teiid.metadata.MetadataFactory,
+	 *      java.lang.Object)
+	 */
+//	@Override
+//	public void getMetadata(MetadataFactory metadataFactory, ObjectConnection conn) throws TranslatorException {
+//		InfinispanHotRodConnection dsl = (InfinispanHotRodConnection) conn;
+//		this.setSupportsSearchabilityUsingAnnotations(dsl.configuredUsingAnnotations());
+//
+//		super.getMetadata(metadataFactory, conn);
+//	}
+
 	@Override
     public MetadataProcessor<ObjectConnection> getMetadataProcessor(){
 		if (this.supportsSearchabilityUsingAnnotations()) {
@@ -176,6 +195,10 @@ public void initCapabilities(ObjectConnection connection)
 		if (connection == null) {
 			return;
 		}
+		
+		InfinispanHotRodConnection dsl = (InfinispanHotRodConnection) connection;
+		this.setSupportsSearchabilityUsingAnnotations(dsl.configuredUsingAnnotations());
+
 
 		Version version = connection.getVersion();
 		// with JDG 6.6 supportCompareCriteria no longer needs to be disabled",2016-08-24T20:48:07Z,69
"@@ -25,6 +25,7 @@
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -39,8 +40,8 @@
 import org.teiid.metadata.Table;
 import org.teiid.translator.MetadataProcessor;
 import org.teiid.translator.TranslatorException;
-import org.teiid.translator.TranslatorProperty;
 import org.teiid.translator.TypeFacility;
+import org.teiid.translator.TranslatorProperty;
 import org.teiid.translator.TranslatorProperty.PropertyType;
 import org.teiid.translator.infinispan.hotrod.InfinispanHotRodConnection;
 import org.teiid.translator.infinispan.hotrod.InfinispanPlugin;
@@ -50,8 +51,6 @@
 import protostream.com.google.protobuf.Descriptors;
 
 
-
-
 /**
  * The ProtobufMetadataProcess is the logic for providing metadata to the translator based on
  * the google protobuf Descriptors and the defined class types.
@@ -93,31 +92,31 @@ public class ProtobufMetadataProcessor implements MetadataProcessor<ObjectConnec
 
 	private Table rootTable = null;
 	private Method pkMethod = null;
+	private Map<String, String> repeatableMap = new HashMap<String, String>();
 	protected boolean classObjectColumn = false;
 	
-	@TranslatorProperty(display=""Class Object As Column"", category=PropertyType.IMPORT, description=""If true, and when the translator provides the metadata, a column of object data type will be created that represents the stored object in the cache"", advanced=true)
+	@TranslatorProperty(display = ""Class Object As Column"", category = PropertyType.IMPORT, description = ""If true, and when the translator provides the metadata, a column of object data type will be created that represents the stored object in the cache"", advanced = true)
 	public boolean isClassObjectColumn() {
 		return classObjectColumn;
-	}	
+	} 
 	
 	public void setClassObjectColumn(boolean classObjectAsColumn) {
 		this.classObjectColumn = classObjectAsColumn;
 	}
-	
+
 	@Override
 	public void process(MetadataFactory metadataFactory, ObjectConnection conn) throws TranslatorException {
 			
 			String cacheName = conn.getCacheName();			
 
 			Class<?> type = conn.getCacheClassType();
-			boolean hasInnerClasses = false;
-			if (conn.getDDLHandler().getCacheNameProxy().getAliasCacheName() != null) {
-				
-				hasInnerClasses = createRootTable(metadataFactory, type, ((InfinispanHotRodConnection) conn).getDescriptor(), cacheName,conn);
-				
-				
+			createRootTable(metadataFactory, type, ((InfinispanHotRodConnection) conn).getDescriptor(), cacheName,conn);
+
+			boolean materializied = conn.getDDLHandler().getCacheNameProxy().getAliasCacheName() != null;
+			if (materializied) {
+											
 				Table stageTable = addTable(metadataFactory, type, true, true);
-				
+							
 				stageTable.setColumns(rootTable.getColumns());
 				stageTable.setForiegnKeys(rootTable.getForeignKeys());
 				stageTable.setFunctionBasedIndexes(rootTable.getFunctionBasedIndexes());
@@ -126,46 +125,43 @@ public void process(MetadataFactory metadataFactory, ObjectConnection conn) thro
 				stageTable.setSupportsUpdate(true);
 				stageTable.setUniqueKeys(rootTable.getUniqueKeys());
 				stageTable.setPrimaryKey(rootTable.getPrimaryKey());
-				stageTable.setProperty(JavaBeanMetadataProcessor.PRIMARY_TABLE_PROPERTY, rootTable.getFullName());
-
+				stageTable.setProperty(JavaBeanMetadataProcessor.PRIMARY_TABLE_PROPERTY, rootTable.getFullName());	
+				
 			} else {
-				hasInnerClasses = createRootTable(metadataFactory, type, ((InfinispanHotRodConnection) conn).getDescriptor(), cacheName,conn);
-			}
-			
-			if (hasInnerClasses) {
+				// only define inner classes when the data source is not using materialization.  
+				// do not support materializing to inner classes
 				addInnerClasses(metadataFactory, ((InfinispanHotRodConnection) conn).getDescriptor(), conn );
 			}
 	}
 
 
-	private boolean createRootTable(MetadataFactory mf, Class<?> entity, Descriptor descriptor, String cacheName, ObjectConnection conn) throws TranslatorException {
+	private void createRootTable(MetadataFactory mf, Class<?> entity, Descriptor descriptor, String cacheName, ObjectConnection conn) throws TranslatorException {
 			
 		String pkField = conn.getPkField();
 		boolean updatable = (pkField != null ? true : false);
 		
 		rootTable = addTable(mf, entity, updatable, false);
 		
-		
 		if (classObjectColumn) {
-			// add column for cache Object, set to non-selectable by default so that select * queries don't fail by default
+	    // add column for cache Object, set to non-selectable by default so that select * queries don't fail by default
 			addRootColumn(mf, Object.class, entity, null, null, SearchType.Unsearchable, rootTable.getName(), rootTable, false, false, NullType.Nullable); //$NON-NLS-1$	
 		}
+		
 		pkMethod = null;
 		if (updatable) {
 		    pkMethod = conn.getClassRegistry().getReadClassMethods(entity.getName()).get(pkField);
 		    if (pkMethod == null) {
 				throw new TranslatorException(InfinispanPlugin.Util.gs(InfinispanPlugin.Event.TEIID25008, new Object[] {pkField, cacheName, entity.getName()}));
 		    	
-		    }
-		    
+		    }	    
 		}
 		
 		boolean addKey = false;
 		boolean repeats = false;
 		// the descriptor is needed to determine which fields are defined as searchable.
 		for (FieldDescriptor fd:descriptor.getFields()) {	
 			if (fd.isRepeated() ) {
-				repeats = true;
+				repeatableMap.put(fd.getMessageType().getName(), fd.getName());
 			} else {
 				NullType nt = NullType.Nullable;
 				SearchType st = isSearchable(fd);
@@ -175,7 +171,10 @@ private boolean createRootTable(MetadataFactory mf, Class<?> entity, Descriptor
 					addKey = true;
 					st = SearchType.Searchable;
 					nt = NullType.No_Nulls;
+				} else if (fd.isRequired()) {
+					nt = NullType.No_Nulls;
 				}
+				// dont make primary key updatable, the object must be deleted and readded in order to change the key
 				addRootColumn(mf, returnType, getProtobufNativeType(fd), fd.getFullName(), fd.getName(), st, rootTable.getName(), rootTable, true, true, nt);	
 			}
 		}	
@@ -190,21 +189,17 @@ private boolean createRootTable(MetadataFactory mf, Class<?> entity, Descriptor
 	        ArrayList<String> x = new ArrayList<String>(1) ;
 	        x.add(pkField);
 	        mf.addPrimaryKey(pkName, x , rootTable);		    
-		}
-			
-		return repeats;
+		}			
 	}
-	
+			
 	private void addInnerClasses(MetadataFactory mf, Descriptor descriptor, ObjectConnection conn) throws TranslatorException {
-
-		for (FieldDescriptor fd:descriptor.getFields()) {	
-			if (fd.isRepeated() ) {
-				processRepeatedType(mf,fd, rootTable, pkMethod, conn);	
-			} 
+		for (Descriptor des: descriptor.getNestedTypes()) {
+			createInnerTable(mf, des, rootTable, pkMethod, conn);		
 		}	
 
 	}
 	
+	
 	private Table addTable(MetadataFactory mf, Class<?> entity, boolean updatable, boolean staging) {
 		String tName = entity.getSimpleName();
 		if (staging) {
@@ -215,7 +210,6 @@ private Table addTable(MetadataFactory mf, Class<?> entity, boolean updatable, b
 			//already loaded
 			return t;
 		}
-		
 		t = mf.addTable(tName);
 		t.setSupportsUpdate(updatable);
 
@@ -229,17 +223,74 @@ private static Method findMethod(String className, String methodName, ObjectConn
         Method m = mapMethods.get(methodName);
         if (m!= null) return m;
         
+        m = mapMethods.get(methodName.toLowerCase());
+        if (m!= null) return m;
+        
         // because the class 'methods' contains 2 different references
         //  get'Name'  and 'Name', this will look for the 'Name' version
         for (Iterator<String> it=mapMethods.keySet().iterator(); it.hasNext();) {
-        	String mName = (String) it.next();
+        	String mName = it.next();
         	if (mName.toLowerCase().startsWith(methodName.toLowerCase()) ) {
         		m = mapMethods.get(mName);
         		return m;
         	} 
         }
 		throw new TranslatorException(""Program Error: unable to find method "" + methodName + "" on class "" + className);
 
+    }
+    private void createInnerTable(MetadataFactory mf, Descriptor desc, Table rootTable, Method pkMethod, ObjectConnection conn) throws TranslatorException  {
+
+    	//	Descriptor d = desc.getContainingType();
+		Descriptor parent = desc.getContainingType();
+		// Need to find the method name that corresponds to the repeating attribute
+		// so that the actual method name can be used in defining the NIS
+		// which will provide the correct method to use when retrieving the data at execution time
+
+		Class<?> pc = getRegisteredClass(parent.getName(), conn);
+		Class<?> c = getRegisteredClass(desc.getName(), conn);
+
+//		throw new TranslatorException(InfinispanPlugin.Util.gs(InfinispanPlugin.Event.TEIID25060, new Object[] { colName }));
+
+		Table t = addTable(mf, c, true, false);
+		t.setSupportsUpdate(rootTable.supportsUpdate());
+
+		String fd_Name = repeatableMap.get(desc.getName());
+		List<FieldDescriptor> fields = desc.getFields();
+		for (FieldDescriptor f:fields) {
+
+			
+			final SearchType st = isSearchable(f);
+			
+			if (fd_Name == null) {
+				fd_Name = """";
+			}
+			// need to use the repeated descriptor, fd, as the prefix to the NIS in order to perform query
+			addSubColumn(mf, getJavaType(f, c, conn),  getProtobufNativeType(f), f, st, fd_Name, t, true, true, (f.isRequired() ? NullType.No_Nulls  : NullType.Nullable) );	
+		}
+		
+		if (pkMethod != null) {
+			// if not repeatable, then use the attribute name
+			String mName =  findMethodName(pc.getName(), fd_Name, conn);
+			
+			if (mName == null) {		
+				mName = desc.getName();
+			}
+
+			
+			// use the same parent table primary ke column name in the foreign key tables
+			String methodName = rootTable.getPrimaryKey().getColumns().get(0).getName();
+			List<String> keyColumns = new ArrayList<String>();
+			keyColumns.add(methodName);
+			List<String> referencedKeyColumns = new ArrayList<String>();
+			referencedKeyColumns.add(methodName);
+			String fkName = ""FK_"" + rootTable.getName().toUpperCase();
+    		addRootColumn(mf, pkMethod.getReturnType(), pkMethod.getReturnType(), methodName, methodName, SearchType.Searchable, t.getName(), t, true, true, NullType.No_Nulls);
+			ForeignKey fk = mf.addForiegnKey(fkName, keyColumns, referencedKeyColumns, rootTable.getName(), t);
+			
+			fk.setNameInSource(mName);
+
+		}		
+
     }
     
 	private void processRepeatedType(MetadataFactory mf, FieldDescriptor fd, Table rootTable, Method pkMethod, ObjectConnection conn) throws TranslatorException  {
@@ -370,6 +421,8 @@ private Column addRootColumn(MetadataFactory mf, Class<?> type, Class<?> nativeT
 	private Column addSubColumn(MetadataFactory mf, Class<?> type, Class<?> nativeType, FieldDescriptor fd,
 			 SearchType searchType, String nisPrefix, Table rootTable, boolean selectable, boolean updateable, NullType nt) {
 		String attributeName = fd.getName();
+		
+		// create the combined name to use for a 1-to-many relationship when searching
 		String nis = nisPrefix + ""."" + fd.getName();
 
 		return addColumn(mf, type, nativeType, attributeName, nis, searchType, rootTable, selectable, updateable, nt);
@@ -427,7 +480,7 @@ private Column addColumn(MetadataFactory mf, Class<?> type, Class<?> nativeType,
 //			c.setNativeType(type.getName());
 //		}
 
-		return c;
+		return c; 
 	}	
 	
 	private static SearchType isSearchable(FieldDescriptor fd) {",2016-08-24T20:48:07Z,19
"@@ -43,12 +43,14 @@
  */
 public class TestInfinispanHotRodConnection extends SimpleMapCacheConnection implements InfinispanHotRodConnection {
 	protected Version version;
+	protected boolean useAnnotations;
 	
 	public static ObjectConnection createConnection(Map<Object,Object> map, Version version) {
 		CacheNameProxy proxy = new CacheNameProxy(TradesAnnotatedCacheSource.TRADES_CACHE_NAME);
 
 		TestInfinispanHotRodConnection conn = new TestInfinispanHotRodConnection(map, TradesAnnotatedCacheSource.METHOD_REGISTRY, proxy);
 		conn.setVersion(version);
+		conn.setConfiguredUsingAnnotations(true);
 				
 		return conn;
 	}
@@ -104,4 +106,18 @@ public Version getVersion() {
 	public void setVersion(Version v) {
 		this.version = v;
 	}
+
+	/**
+	 * {@inheritDoc}
+	 *
+	 * @see org.teiid.translator.infinispan.hotrod.InfinispanHotRodConnection#configuredUsingAnnotations()
+	 */
+	@Override
+	public boolean configuredUsingAnnotations() {
+		return useAnnotations;
+	}
+	
+	public void setConfiguredUsingAnnotations(boolean useAnnotations) {
+		this.useAnnotations = useAnnotations;
+	}
 }",2016-08-24T20:48:07Z,25
"@@ -1,7 +1,7 @@
 CREATE FOREIGN TABLE AllTypes (
 	intKey integer NOT NULL OPTIONS (NAMEINSOURCE 'intKey', SEARCHABLE 'Searchable', NATIVE_TYPE 'int'),
 	stringNum string OPTIONS (NAMEINSOURCE 'stringNum', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
-	stringKey string OPTIONS (NAMEINSOURCE 'stringKey', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'java.lang.String'),
+	stringKey string NOT NULL OPTIONS (NAMEINSOURCE 'stringKey', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'java.lang.String'),
 	floatNum float OPTIONS (NAMEINSOURCE 'floatNum', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'float'),
 	bigIntegerValue biginteger OPTIONS (NAMEINSOURCE 'bigIntegerValue', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'long'),
 	shortValue short OPTIONS (NAMEINSOURCE 'shortValue', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'int'),",2016-08-24T20:48:07Z,70
"@@ -1,14 +1,14 @@
 CREATE FOREIGN TABLE Person (
 	PersonObject object OPTIONS (NAMEINSOURCE 'this', SELECTABLE FALSE, UPDATABLE FALSE, SEARCHABLE 'Unsearchable', NATIVE_TYPE 'org.jboss.as.quickstarts.datagrid.hotrod.query.domain.Person'),
-	name string OPTIONS (NAMEINSOURCE 'name', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
+	name string NOT NULL OPTIONS (NAMEINSOURCE 'name', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
 	id integer NOT NULL OPTIONS (NAMEINSOURCE 'id', SEARCHABLE 'Searchable', NATIVE_TYPE 'int'),
 	email string OPTIONS (NAMEINSOURCE 'email', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'java.lang.String'),
 	CONSTRAINT PK_ID PRIMARY KEY(id)
 ) OPTIONS (UPDATABLE TRUE);
 
 CREATE FOREIGN TABLE PhoneNumber (
-	number string OPTIONS (NAMEINSOURCE 'phone.number', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
+	number string NOT NULL OPTIONS (NAMEINSOURCE 'phone.number', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
 	type string OPTIONS (NAMEINSOURCE 'phone.type', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'java.lang.Enum'),
-	id integer NOT NULL OPTIONS (NAMEINSOURCE 'id', SELECTABLE FALSE, UPDATABLE FALSE, SEARCHABLE 'Searchable', NATIVE_TYPE 'int'),
+	id integer NOT NULL OPTIONS (NAMEINSOURCE 'id', SEARCHABLE 'Searchable', NATIVE_TYPE 'int'),
 	CONSTRAINT FK_PERSON FOREIGN KEY(id) REFERENCES Person (id) OPTIONS (NAMEINSOURCE 'phones')
 ) OPTIONS (UPDATABLE TRUE);
\ No newline at end of file",2016-08-24T20:48:07Z,71
"@@ -1,13 +1,13 @@
 CREATE FOREIGN TABLE Person (
-	name string OPTIONS (NAMEINSOURCE 'name', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
+	name string NOT NULL OPTIONS (NAMEINSOURCE 'name', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
 	id integer NOT NULL OPTIONS (NAMEINSOURCE 'id', SEARCHABLE 'Searchable', NATIVE_TYPE 'int'),
 	email string OPTIONS (NAMEINSOURCE 'email', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'java.lang.String'),
 	CONSTRAINT PK_ID PRIMARY KEY(id)
 ) OPTIONS (UPDATABLE TRUE);
 
 CREATE FOREIGN TABLE PhoneNumber (
-	number string OPTIONS (NAMEINSOURCE 'phone.number', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
+	number string NOT NULL OPTIONS (NAMEINSOURCE 'phone.number', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
 	type string OPTIONS (NAMEINSOURCE 'phone.type', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'java.lang.Enum'),
-	id integer NOT NULL OPTIONS (NAMEINSOURCE 'id', SELECTABLE FALSE, UPDATABLE FALSE, SEARCHABLE 'Searchable', NATIVE_TYPE 'int'),
+	id integer NOT NULL OPTIONS (NAMEINSOURCE 'id', SEARCHABLE 'Searchable', NATIVE_TYPE 'int'),
 	CONSTRAINT FK_PERSON FOREIGN KEY(id) REFERENCES Person (id) OPTIONS (NAMEINSOURCE 'phones')
 ) OPTIONS (UPDATABLE TRUE);
\ No newline at end of file",2016-08-24T20:48:07Z,72
"@@ -36,7 +36,6 @@
 import org.teiid.translator.ProcedureExecution;
 import org.teiid.translator.ResultSetExecution;
 import org.teiid.translator.TranslatorException;
-import org.teiid.translator.TranslatorProperty;
 import org.teiid.translator.UpdateExecution;
 import org.teiid.translator.object.metadata.JavaBeanMetadataProcessor;
 
@@ -52,7 +51,7 @@ public abstract class ObjectExecutionFactory extends
 		ExecutionFactory<ConnectionFactory, ObjectConnection> {
 
 	public static final int MAX_SET_SIZE = 10000;
-	private boolean searchabilityBasedOnAnnotations = true;
+	private boolean searchabilityBasedOnAnnotations = false;
 	
 	public ObjectExecutionFactory() {
 		setSourceRequiredForMetadata(false);
@@ -96,7 +95,6 @@ public ProcedureExecution createDirectExecution(List<Argument> arguments, Comman
 		return new ObjectDirectExecution(arguments, command, connection, executionContext, this);
 	}   
 	
-	@TranslatorProperty(display=""SearchabilityBasedOnAnnotations"", description=""If false, will turn off determining column searchability based on hibernate annotations"", advanced=true)
 	public boolean supportsSearchabilityUsingAnnotations() {
 		return searchabilityBasedOnAnnotations;
 	}	",2016-08-24T20:48:07Z,73
"@@ -23,11 +23,12 @@ public class TestAnnotationMetadataProcessor {
 	@Before public void beforeEach() throws Exception{	
 		 
 		TRANSLATOR = new SimpleMapCacheExecutionFactory();
+		TRANSLATOR.setSupportsSearchabilityUsingAnnotations(true);
+
     }
 	
 	@Test
 	public void testPersonMetadata() throws Exception {
-		
 		TRANSLATOR.start();
 
 ",2016-08-24T20:48:07Z,74
"@@ -112,5 +112,10 @@ public ClassRegistry getClassRegistry() {
 	public ObjectMaterializeLifeCycle getMaterializeLifeCycle() {
 		return new ObjectMaterializeLifeCycle(this, getConfig().getCacheNameProxy());
 	}	
+	
+	/**
+	 * Provided for testing purposes
+	 */
+	protected abstract void shutDownCacheManager();
 
 }
\ No newline at end of file",2016-02-05T14:24:39Z,75
"@@ -273,10 +273,9 @@ public void setRemoteServerList(String remoteServerList) {
 	 * Get the name of the configuration resource or file that should be used to
 	 * configure a local cache manager
 	 * 
-	 * @return the name of the resource or file configuration that should be
-	 *         passed to the cache container
+	 * @return the name, and if indicated full path, of the file configuration that is used
+	 *         to configure the cache container
 	 * @see #setConfigurationFileNameForLocalCache(String)
-	 * @deprecated
 	 */
 	
 	public String getConfigurationFileNameForLocalCache() {
@@ -288,10 +287,9 @@ public String getConfigurationFileNameForLocalCache() {
 	 * local cache .
 	 * 
 	 * @param configurationFileName
-	 *            the name of the configuration file that should be used to load
+	 *            the name, and the full path, to the configuration file that should be used to configure
 	 *            the cacheContainer
 	 * @see #getConfigurationFileNameForLocalCache()
-	 * @deprecated
 	 */
 	public void setConfigurationFileNameForLocalCache(
 			String configurationFileName) {",2016-02-05T14:24:39Z,76
"@@ -30,6 +30,8 @@
 import javax.resource.ResourceException;
 
 import org.infinispan.Cache;
+import org.infinispan.configuration.cache.Configuration;
+//import org.infinispan.;
 import org.infinispan.manager.DefaultCacheManager;
 import org.infinispan.manager.EmbeddedCacheManager;
 import org.infinispan.query.Search;
@@ -81,6 +83,20 @@ public void init(InfinispanManagedConnectionFactory config) throws ResourceExcep
 
 				ecm = cc;
 				
+				Configuration conf = cc.getCacheConfiguration(config.getCacheNameProxy().getPrimaryCacheAliasName());
+				if (conf == null) {
+					throw new ResourceException(""Program Error: cache "" +  config.getCacheNameProxy().getPrimaryCacheAliasName() + "" was not configured"");
+				}
+				conf.module(config.getCacheClassType());
+				
+				if (config.getCacheNameProxy().useMaterialization()) {
+					conf = cc.getCacheConfiguration(config.getCacheNameProxy().getStageCacheAliasName());
+					if (conf == null) {
+						throw new ResourceException(""Program Error: cache "" +  config.getCacheNameProxy().getStageCacheAliasName() + "" was not configured"");
+					}
+					
+					conf.module(config.getCacheClassType());
+				}
 			} catch (IOException e) {
 				throw new ResourceException(e);
 			}
@@ -233,5 +249,16 @@ public void update(Object key, Object value) {
 	public void clearCache(String cacheName) throws TranslatorException {		
 		getCache(cacheName).clearAsync();
 	}
+	
+	/**
+	 * Note:  This is used in testing only to enable shutting down the cache so that the next test can recreate it
+	 * {@inheritDoc}
+	 *
+	 * @see org.teiid.resource.adapter.infinispan.InfinispanCacheWrapper#shutDownCacheManager()
+	 */
+	@Override
+	protected void shutDownCacheManager() {
+		ecm.stop();
+	}
 
 }
\ No newline at end of file",2016-02-05T14:24:39Z,77
"@@ -253,6 +253,18 @@ public void clearCache(String cacheName) throws TranslatorException {
 			
 		}
 	}
+	
+	/**
+	 * Note:  This is used in testing only to enable shutting down the cache so that the next test can recreate it
+	 * {@inheritDoc}
+	 *
+	 * @see org.teiid.resource.adapter.infinispan.InfinispanCacheWrapper#shutDownCacheManager()
+	 */
+	@Override
+	protected void shutDownCacheManager() {
+		rcm.stop();
+	}
+
 
 
 }",2016-02-05T14:24:39Z,78
"@@ -55,7 +55,7 @@
             </config-property>  
             
             <config-property>
-               <description>{$display:""[Deprecated] Config File for Local Cache"",$description:""[Deprecated] Infinispan Configuration File for configuring local cache""}</description>
+               <description>{$display:""Config File for Local Cache"",$description:""Infinispan Configuration File for configuring local cache""}</description>
                <config-property-name>ConfigurationFileNameForLocalCache</config-property-name>
                <config-property-type>java.lang.String</config-property-type>
             </config-property>      ",2016-02-05T14:24:39Z,79
"@@ -42,7 +42,7 @@ public static void beforeEachClass() throws Exception {
 		factory = new InfinispanManagedConnectionFactory();
 
 		factory.setConfigurationFileNameForLocalCache(""./src/test/resources/infinispan_persistent_config.xml"");
-		factory.setCacheTypeMap(RemoteInfinispanTestHelper.TEST_CACHE_NAME + "":"" + ""org.teiid.translator.object.testdata.trades.Trade;longValue:long"");
+		factory.setCacheTypeMap(RemoteInfinispanTestHelper.TRADE_CACHE_NAME + "":"" + ""org.teiid.translator.object.testdata.trades.Trade;longValue:long"");
 		
 	}
 	",2016-02-05T14:24:39Z,80
"@@ -26,18 +26,31 @@
 import static org.junit.Assert.assertNull;
 
 import org.junit.Test;
+import org.junit.Before;
+import org.junit.After;
 import org.teiid.translator.object.ObjectConnection;
 import org.teiid.translator.object.testdata.trades.Trade;
 
 @SuppressWarnings(""nls"")
 public class TestInfinispanManagedConnectionFactory {
 	
+	InfinispanManagedConnectionFactory factory;
+	
+	@Before
+	public void before() {
+		factory = new InfinispanManagedConnectionFactory();
+		factory.setConfigurationFileNameForLocalCache(""./src/test/resources/infinispan_persistent_config.xml"");
+	}
+	
+	
+	@After
+	public void after() {
+		factory.getCacheWrapper().shutDownCacheManager();
+	}
+	
     @Test
     public void testCacheTypeMap1() throws Exception {
-    	InfinispanManagedConnectionFactory factory = new InfinispanManagedConnectionFactory();
- 
-		factory.setConfigurationFileNameForLocalCache(""./src/test/resources/infinispan_persistent_config.xml"");
-		factory.setCacheTypeMap(RemoteInfinispanTestHelper.TRADE_CACHE_NAME + "":"" + ""org.teiid.translator.object.testdata.trades.Trade"");
+ 		factory.setCacheTypeMap(RemoteInfinispanTestHelper.TRADE_CACHE_NAME + "":"" + ""org.teiid.translator.object.testdata.trades.Trade"");
     	   	
     		ObjectConnection conn = factory.createConnectionFactory().getConnection();
     		Class<?> clz = conn.getCacheClassType();
@@ -56,15 +69,13 @@ public void testCacheTypeMap1() throws Exception {
     
     @Test
     public void testCacheTypeMap2() throws Exception {
-    	InfinispanManagedConnectionFactory factory = new InfinispanManagedConnectionFactory();
  
-		factory.setConfigurationFileNameForLocalCache(""./src/test/resources/infinispan_persistent_config.xml"");
-		factory.setCacheTypeMap(RemoteInfinispanTestHelper.TEST_CACHE_NAME + "":"" + ""org.teiid.translator.object.testdata.trades.Trade;longValue"");
+		factory.setCacheTypeMap(RemoteInfinispanTestHelper.TRADE_CACHE_NAME + "":"" + ""org.teiid.translator.object.testdata.trades.Trade;longValue"");
     	
     	
     		ObjectConnection conn = factory.createConnectionFactory().getConnection();
     		
-    		assertEquals(conn.getCacheName(), RemoteInfinispanTestHelper.TEST_CACHE_NAME);
+    		assertEquals(conn.getCacheName(), RemoteInfinispanTestHelper.TRADE_CACHE_NAME);
 
     		Class<?> clz = conn.getCacheClassType();
     		
@@ -79,13 +90,11 @@ public void testCacheTypeMap2() throws Exception {
     
     @Test
     public void testCacheTypeMap3() throws Exception {
-    	InfinispanManagedConnectionFactory factory = new InfinispanManagedConnectionFactory();
  
-		factory.setConfigurationFileNameForLocalCache(""./src/test/resources/infinispan_persistent_config.xml"");
-		factory.setCacheTypeMap(RemoteInfinispanTestHelper.TEST_CACHE_NAME + "":"" + ""org.teiid.translator.object.testdata.trades.Trade;longValue:long"");
+		factory.setCacheTypeMap(RemoteInfinispanTestHelper.TRADE_CACHE_NAME + "":"" + ""org.teiid.translator.object.testdata.trades.Trade;longValue:long"");
     	
     		ObjectConnection conn = factory.createConnectionFactory().getConnection();
-    		assertEquals(conn.getCacheName(), RemoteInfinispanTestHelper.TEST_CACHE_NAME);
+    		assertEquals(conn.getCacheName(), RemoteInfinispanTestHelper.TRADE_CACHE_NAME);
 
     		Class<?> clz = conn.getCacheClassType();
     		
@@ -102,15 +111,13 @@ public void testCacheTypeMap3() throws Exception {
     
     @Test
     public void testCacheTypeMap4() throws Exception {
-    	InfinispanManagedConnectionFactory factory = new InfinispanManagedConnectionFactory();
  
-		factory.setConfigurationFileNameForLocalCache(""./src/test/resources/infinispan_persistent_config.xml"");
-		factory.setCacheTypeMap(RemoteInfinispanTestHelper.TEST_CACHE_NAME + "":"" + ""org.teiid.translator.object.testdata.trades.Trade;longValue:java.lang.Long"");
+		factory.setCacheTypeMap(RemoteInfinispanTestHelper.TRADE_CACHE_NAME + "":"" + ""org.teiid.translator.object.testdata.trades.Trade;longValue:java.lang.Long"");
     	
     	
     		ObjectConnection conn = factory.createConnectionFactory().getConnection();
     		
-    		assertEquals(conn.getCacheName(), RemoteInfinispanTestHelper.TEST_CACHE_NAME);
+    		assertEquals(conn.getCacheName(), RemoteInfinispanTestHelper.TRADE_CACHE_NAME);
     		
     		Class<?> clz = conn.getCacheClassType();
     		",2016-02-05T14:24:39Z,81
"@@ -1,8 +1,46 @@
-<infinispan>
-    <global>
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ JBoss, Home of Professional Open Source
+  ~ Copyright 2011 Red Hat Inc. and/or its affiliates and other
+  ~ contributors as indicated by the @author tags. All rights reserved.
+  ~ See the copyright.txt in the distribution for a full listing of
+  ~ individual contributors.
+  ~
+  ~ This is free software; you can redistribute it and/or modify it
+  ~ under the terms of the GNU Lesser General Public License as
+  ~ published by the Free Software Foundation; either version 2.1 of
+  ~ the License, or (at your option) any later version.
+  ~
+  ~ This software is distributed in the hope that it will be useful,
+  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
+  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+  ~ Lesser General Public License for more details.
+  ~
+  ~ You should have received a copy of the GNU Lesser General Public
+  ~ License along with this software; if not, write to the Free
+  ~ Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+  ~ 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+  -->
+<infinispan xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+            xsi:schemaLocation=""urn:infinispan:config:6.0 http://www.infinispan.org/schemas/infinispan-config-6.0.xsd""
+            xmlns=""urn:infinispan:config:6.0"">
+
+ 	<global>
         <globalJmxStatistics enabled=""false"" allowDuplicateDomains=""true""/>
     </global>
-
-  <namedCache name=""Trades"">
-  </namedCache>
+      <namedCache name=""Trades"">
+        <eviction
+                strategy=""LIRS""
+                maxEntries=""1000""/>
+        <persistence passivation=""false"">
+            <singleFile
+                    shared=""false""
+                    fetchPersistentState=""false""
+                    ignoreModifications=""false""
+                    purgeOnStartup=""true""
+                    preload=""false""
+                    location=""./target/localcache/indexing/trades"">
+            </singleFile>
+        </persistence>
+    </namedCache> 
 </infinispan>",2016-02-05T14:24:39Z,82
"@@ -166,6 +166,71 @@
                     </execution>
                 </executions>
             </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-dependency-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>jboss-eap-dist</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>unpack</goal>
+                        </goals>
+                        <configuration>
+                            <artifactItems>
+                                <artifactItem>
+                                    <groupId>org.jboss.as</groupId>
+                                    <artifactId>jboss-as-dist</artifactId>
+                                    <version>${version.org.jboss.as}</version>
+                                    <type>zip</type>
+                                    <overWrite>false</overWrite>
+                                    <outputDirectory>${project.build.directory}/uberzip</outputDirectory>
+                                </artifactItem>
+                            </artifactItems>
+                        </configuration>
+                    </execution>
+                    <execution>
+                        <id>teiid-dist</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>unpack</goal>
+                        </goals>
+                        <configuration>
+                            <artifactItems>
+                                <artifactItem>
+                                    <groupId>org.jboss.teiid</groupId>
+                                    <artifactId>teiid</artifactId>
+                                    <version>${project.version}</version>
+                                    <classifier>jboss-dist</classifier>
+                                    <type>zip</type>
+                                    <overWrite>false</overWrite>
+                                    <outputDirectory>${project.build.directory}/uberzip/jboss-eap-6.3</outputDirectory>
+                                </artifactItem>
+                            </artifactItems>
+                        </configuration>
+                    </execution>
+                    <execution>
+                        <id>console-dist</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>unpack</goal>
+                        </goals>
+                        <configuration>
+                            <artifactItems>
+                                <artifactItem>
+                                    <groupId>org.jboss.teiid.web-console</groupId>
+                                    <artifactId>teiid-console-dist</artifactId>
+                                    <version>1.2.0</version>
+                                    <classifier>jboss-as7</classifier>
+                                    <type>zip</type>
+                                    <overWrite>false</overWrite>
+                                    <outputDirectory>${project.build.directory}/uberzip/jboss-eap-6.3</outputDirectory>
+                                </artifactItem>
+                            </artifactItems>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
         </plugins>
     </build>
     ",2014-10-24T21:40:27Z,83
"@@ -30,6 +30,9 @@
                 <include>**/wsdl4j-*</include>
                 <include>**/neethi-*</include>
                 <include>**/xmlschema-*</include>
+                <include>**/spring-core-*</include>
+                <include>**/spring-context-*</include>
+                <include>**/spring-beans-*</include>
             </includes>           
         </fileSet>        
     </fileSets>",2014-10-24T21:40:27Z,84
"@@ -42,6 +42,15 @@
             <includes>
                 <include>javax.ws.rs:javax.ws.rs-api</include>
             </includes>
-        </dependencySet>        
+        </dependencySet> 
+        <dependencySet>
+            <outputDirectory>${jbossas-module-root}/org/springframework/spring/main</outputDirectory>
+            <useTransitiveDependencies>false</useTransitiveDependencies>
+            <includes>
+                <include>org.springframework:spring-beans</include>
+                <include>org.springframework:spring-context</include>
+                <include>org.springframework:spring-core</include>
+            </includes>
+        </dependencySet>               
     </dependencySets>
 </assembly>",2014-10-24T21:40:27Z,85
"@@ -0,0 +1,16 @@
+<module xmlns=""urn:jboss:module:1.1"" name=""org.springframework.spring"">
+  <resources>
+    <resource-root path=""spring-beans-${version.org.springframework}.jar""/>
+    <resource-root path=""spring-context-${version.org.springframework}.jar""/>    
+    <resource-root path=""spring-core-${version.org.springframework}.jar""/>
+    <!-- 
+    <resource-root path=""spring-asm.jar""/>
+    <resource-root path=""spring-aop.jar""/>    
+    <resource-root path=""spring-expression.jar""/>
+    <resource-root path=""spring-tx.jar""/>
+     -->    
+  </resources>
+  <dependencies>
+    <module name=""javax.api""/>
+  </dependencies>
+</module>",2014-10-24T21:40:27Z,86
"@@ -70,7 +70,19 @@
         <dependency>
             <groupId>javax.ws.rs</groupId>
             <artifactId>javax.ws.rs-api</artifactId>
-        </dependency>        
+        </dependency>
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-beans</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-context</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-core</artifactId>
+        </dependency>
     </dependencies>
     <build>
         <plugins>",2014-10-24T21:40:27Z,87
"@@ -10,11 +10,7 @@
   <name>Gogole API</name>
   <description>The java API for connecting Google services</description>
   <packaging>bundle</packaging>
-
-  <properties>
-    <version.com.google.guava>16.0.1</version.com.google.guava>
-  </properties>
-      
+  
   <dependencies>     
         <dependency>
             <groupId>javax.resource</groupId>
@@ -24,6 +20,7 @@
         <dependency>
 		  <groupId>com.google.guava</groupId>
 		  <artifactId>guava</artifactId>
+		  <scope>provided</scope>
 		</dependency>
 		<dependency>
 		  <groupId>org.apache.httpcomponents</groupId>",2014-10-24T21:40:27Z,88
"@@ -10,17 +10,13 @@ TEIID_DIST=teiid-${TEIID_VERSION}-jboss-dist.zip
 
 SOURCES=(
     ""jboss-eap.zip""
-    ""resteasy-jaxrs.zip""
     ""teiid-console-dist.zip""
 )
 
 declare -A SOURCE_URL SOURCE_SHA1
 
-SOURCE_URL[""jboss-eap.zip""]=""http://download.jboss.org/jbosseap/6/jboss-eap-6.1.0.Alpha/jboss-eap-6.1.0.Alpha.zip""
-SOURCE_SHA1[""jboss-eap.zip""]=""630d81f83b851077e3ad129924502bbdf0c1552a""
-
-SOURCE_URL[""resteasy-jaxrs.zip""]=""http://sourceforge.net/projects/resteasy/files/Resteasy%20JAX-RS/2.3.6.Final/resteasy-jaxrs-2.3.6.Final-all.zip""
-SOURCE_SHA1[""resteasy-jaxrs.zip""]=""cfcb2aaa60cd954d04e73cc7e99509ec38b5538a""
+SOURCE_URL[""jboss-eap.zip""]=""http://maven.repository.redhat.com/techpreview/eap6/6.3.0.Alpha/maven-repository/org/jboss/as/jboss-as-dist/7.4.0.Final-redhat-4/jboss-as-dist-7.4.0.Final-redhat-4.zip""
+SOURCE_SHA1[""jboss-eap.zip""]=""15978363d25acee751afa35af582548dace95480""
 
 SOURCE_URL[""teiid-console-dist.zip""]=""http://sourceforge.net/projects/teiid/files/webconsole/1.2/Final/teiid-console-dist-1.2.0.Final-jboss-as7.zip""
 SOURCE_SHA1[""teiid-console-dist.zip""]=""7b57b77520f2894b0f48a385f7dcff03898bb514""
@@ -81,25 +77,17 @@ echo ""Unpacking JBoss...""
 unzip -q ../jboss-eap.zip
 echo
 
-## Patch JAX-RS.
-echo ""Patching JAX-RS module...""
-rm -rf jboss-eap-6.1/modules/system/layers/base/org/jboss/resteasy/resteasy-jaxrs
-unzip -qo ../resteasy-jaxrs.zip
-unzip -q resteasy-jaxrs-*/resteasy-jboss-modules-*.zip
-mv -f org/jboss/resteasy/resteasy-jaxrs jboss-eap-6.1/modules/system/layers/base/org/jboss/resteasy/resteasy-jaxrs
-echo
-
 ## Install Teiid.
 echo ""Installing Teiid...""
-cd jboss-eap-6.1
+cd jboss-eap-6.3
 unzip -q -o ../../teiid-console-dist.zip
 unzip -q -o ../../$TEIID_DIST
 cd ..
 echo
 
 ## Package server.
 echo ""Zipping up install...""
-mv -f jboss-eap-6.1 teiid-${TEIID_VERSION}
+mv -f jboss-eap-6.3 teiid-${TEIID_VERSION}
 rm -f ../teiid-${TEIID_VERSION}.zip
 zip -r -q ../teiid-${TEIID_VERSION}.zip teiid-${TEIID_VERSION}
 cd ..",2014-10-24T21:40:27Z,89
"@@ -25,6 +25,7 @@
         <version.org.hibernate.search>4.4.0.Final</version.org.hibernate.search> <!-- versions required by infinispan 6.1 --> 
         <version.jaxen>1.1.4</version.jaxen> <!-- NOTE changing to use bom version of 1.1.3 will cause a build issue in teiid-engine -->
         <version.org.mongodb.mongo-java-driver>2.12.3</version.org.mongodb.mongo-java-driver>
+        <version.org.jboss.as>7.4.0.Final-redhat-4</version.org.jboss.as>
         
         <!-- Not in integration BOM; Need to check these jboss-parent BOM-->
         <version.org.jboss.jboss-vfs>3.2.2.Final-redhat-1</version.org.jboss.jboss-vfs>
@@ -1365,7 +1366,22 @@
                 <groupId>javax.ws.rs</groupId>
                 <artifactId>javax.ws.rs-api</artifactId>
                 <version>${version.javax.ws.rs}</version>
-            </dependency>        
+            </dependency>
+            <dependency>
+                <groupId>org.springframework</groupId>
+                <artifactId>spring-beans</artifactId>
+                <version>${version.org.springframework}</version>
+            </dependency>
+            <dependency>
+                <groupId>org.springframework</groupId>
+                <artifactId>spring-context</artifactId>
+                <version>${version.org.springframework}</version>
+            </dependency>
+            <dependency>
+                <groupId>org.springframework</groupId>
+                <artifactId>spring-core</artifactId>
+                <version>${version.org.springframework}</version>
+            </dependency>
         </dependencies>
 	</dependencyManagement>
 	<modules>",2014-10-24T21:40:27Z,90
"@@ -62,8 +62,8 @@ http://maven.apache.org/xsd/settings-1.0.0.xsd"">
       <repositories>
         <repository>
           <id>jboss-eap-alpha</id>
-          <name>JBoss EAP6.1 Alpha</name>
-          <url>http://maven.repository.redhat.com/techpreview/eap6/6.1.0.Alpha1/maven-repository/</url>
+          <name>JBoss EAP 6.3.0.Alpha</name>
+          <url>http://maven.repository.redhat.com/techpreview/eap6/6.3.0.Alpha/maven-repository/</url>
           <layout>default</layout>
           <releases>
             <enabled>true</enabled>",2014-10-24T21:40:27Z,91
"@@ -62,9 +62,6 @@
     <profiles>
     <profile>
         <id>arquillian-tests</id>
-       <activation>
-            <activeByDefault>true</activeByDefault>
-        </activation>        
         <dependencies>
             <dependency>
                 <groupId>org.jboss.spec</groupId>",2014-10-24T21:40:27Z,92
"@@ -86,9 +86,6 @@ private enum CACHE_TYPE {
 	private String module;
 	private ClassLoader cl;
 	private CacheNameProxy cacheNameProxy;
-	private Version version = null;
-
-
 
 	@Override
 	public BasicConnectionFactory<InfinispanConnectionImpl> createConnectionFactory()
@@ -432,6 +429,10 @@ protected void setCacheName(String cacheName) throws ResourceException {
 	public CacheNameProxy getCacheNameProxy() {
 		return cacheNameProxy;
 	}
+	
+    public boolean configuredUsingAnnotations() {
+    	return this.usingAnnotations;
+    }
 
 	public boolean isAlive() {
 		return this.cacheContainer != null;",2016-08-24T20:48:07Z,14
"@@ -274,5 +274,16 @@ public void clearCache(String cacheName) throws TranslatorException {
 	public SearchType getSearchType() {
 		return new DSLSearch(this);
 	}
+	
+	/**
+	* Call to determine if the JDG cache is configured using annotation (or using protobuf and marsharllers).
+	* @return true if annotations are used
+	*/
+
+	@Override
+	 public boolean configuredUsingAnnotations() {
+	        return config.configuredUsingAnnotations();
+	}
+
 
 }
\ No newline at end of file",2016-08-24T20:48:07Z,40
"@@ -49,5 +49,11 @@ public interface InfinispanHotRodConnection extends ObjectConnection {
 	 */
 	public Descriptor getDescriptor()  throws TranslatorException;
 	
+	/**
+	* Call to determine if the JDG cache is configured using annotation (or using protobuf and marsharllers).
+	* @return true if annotations are used
+	*/ 
+	public boolean configuredUsingAnnotations();
+	
 }
 ",2016-08-24T20:48:07Z,33
"@@ -26,6 +26,7 @@
 
 import org.teiid.language.Argument;
 import org.teiid.language.Command;
+import org.teiid.metadata.MetadataFactory;
 import org.teiid.metadata.RuntimeMetadata;
 import org.teiid.translator.ExecutionContext;
 import org.teiid.translator.MetadataProcessor;
@@ -81,6 +82,11 @@ public InfinispanHotRodExecutionFactory() {
 	public int getMaxFromGroups() {
 		return 2;
 	}
+	
+	@Override
+	public boolean isSourceRequiredForCapabilities() {
+		return true;
+	}
 
 	/**
 	 * {@inheritDoc}
@@ -94,7 +100,6 @@ public ProcedureExecution createDirectExecution(List<Argument> arguments,
 		return super.createDirectExecution(arguments, command, executionContext,
 				metadata, connection);
 	}
-    
 
 	@Override
     public boolean supportsAliasedTable() {
@@ -156,6 +161,20 @@ public boolean supportsNotCriteria() {
 		return Boolean.FALSE.booleanValue();
 	}
 
+	/**
+	 * {@inheritDoc}
+	 *
+	 * @see org.teiid.translator.ExecutionFactory#getMetadata(org.teiid.metadata.MetadataFactory,
+	 *      java.lang.Object)
+	 */
+//	@Override
+//	public void getMetadata(MetadataFactory metadataFactory, ObjectConnection conn) throws TranslatorException {
+//		InfinispanHotRodConnection dsl = (InfinispanHotRodConnection) conn;
+//		this.setSupportsSearchabilityUsingAnnotations(dsl.configuredUsingAnnotations());
+//
+//		super.getMetadata(metadataFactory, conn);
+//	}
+
 	@Override
     public MetadataProcessor<ObjectConnection> getMetadataProcessor(){
 		if (this.supportsSearchabilityUsingAnnotations()) {
@@ -176,6 +195,10 @@ public void initCapabilities(ObjectConnection connection)
 		if (connection == null) {
 			return;
 		}
+		
+		InfinispanHotRodConnection dsl = (InfinispanHotRodConnection) connection;
+		this.setSupportsSearchabilityUsingAnnotations(dsl.configuredUsingAnnotations());
+
 
 		Version version = connection.getVersion();
 		// with JDG 6.6 supportCompareCriteria no longer needs to be disabled",2016-08-24T20:48:07Z,69
"@@ -25,6 +25,7 @@
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -39,8 +40,8 @@
 import org.teiid.metadata.Table;
 import org.teiid.translator.MetadataProcessor;
 import org.teiid.translator.TranslatorException;
-import org.teiid.translator.TranslatorProperty;
 import org.teiid.translator.TypeFacility;
+import org.teiid.translator.TranslatorProperty;
 import org.teiid.translator.TranslatorProperty.PropertyType;
 import org.teiid.translator.infinispan.hotrod.InfinispanHotRodConnection;
 import org.teiid.translator.infinispan.hotrod.InfinispanPlugin;
@@ -50,8 +51,6 @@
 import protostream.com.google.protobuf.Descriptors;
 
 
-
-
 /**
  * The ProtobufMetadataProcess is the logic for providing metadata to the translator based on
  * the google protobuf Descriptors and the defined class types.
@@ -93,31 +92,31 @@ public class ProtobufMetadataProcessor implements MetadataProcessor<ObjectConnec
 
 	private Table rootTable = null;
 	private Method pkMethod = null;
+	private Map<String, String> repeatableMap = new HashMap<String, String>();
 	protected boolean classObjectColumn = false;
 	
-	@TranslatorProperty(display=""Class Object As Column"", category=PropertyType.IMPORT, description=""If true, and when the translator provides the metadata, a column of object data type will be created that represents the stored object in the cache"", advanced=true)
+	@TranslatorProperty(display = ""Class Object As Column"", category = PropertyType.IMPORT, description = ""If true, and when the translator provides the metadata, a column of object data type will be created that represents the stored object in the cache"", advanced = true)
 	public boolean isClassObjectColumn() {
 		return classObjectColumn;
-	}	
+	} 
 	
 	public void setClassObjectColumn(boolean classObjectAsColumn) {
 		this.classObjectColumn = classObjectAsColumn;
 	}
-	
+
 	@Override
 	public void process(MetadataFactory metadataFactory, ObjectConnection conn) throws TranslatorException {
 			
 			String cacheName = conn.getCacheName();			
 
 			Class<?> type = conn.getCacheClassType();
-			boolean hasInnerClasses = false;
-			if (conn.getDDLHandler().getCacheNameProxy().getAliasCacheName() != null) {
-				
-				hasInnerClasses = createRootTable(metadataFactory, type, ((InfinispanHotRodConnection) conn).getDescriptor(), cacheName,conn);
-				
-				
+			createRootTable(metadataFactory, type, ((InfinispanHotRodConnection) conn).getDescriptor(), cacheName,conn);
+
+			boolean materializied = conn.getDDLHandler().getCacheNameProxy().getAliasCacheName() != null;
+			if (materializied) {
+											
 				Table stageTable = addTable(metadataFactory, type, true, true);
-				
+							
 				stageTable.setColumns(rootTable.getColumns());
 				stageTable.setForiegnKeys(rootTable.getForeignKeys());
 				stageTable.setFunctionBasedIndexes(rootTable.getFunctionBasedIndexes());
@@ -126,46 +125,43 @@ public void process(MetadataFactory metadataFactory, ObjectConnection conn) thro
 				stageTable.setSupportsUpdate(true);
 				stageTable.setUniqueKeys(rootTable.getUniqueKeys());
 				stageTable.setPrimaryKey(rootTable.getPrimaryKey());
-				stageTable.setProperty(JavaBeanMetadataProcessor.PRIMARY_TABLE_PROPERTY, rootTable.getFullName());
-
+				stageTable.setProperty(JavaBeanMetadataProcessor.PRIMARY_TABLE_PROPERTY, rootTable.getFullName());	
+				
 			} else {
-				hasInnerClasses = createRootTable(metadataFactory, type, ((InfinispanHotRodConnection) conn).getDescriptor(), cacheName,conn);
-			}
-			
-			if (hasInnerClasses) {
+				// only define inner classes when the data source is not using materialization.  
+				// do not support materializing to inner classes
 				addInnerClasses(metadataFactory, ((InfinispanHotRodConnection) conn).getDescriptor(), conn );
 			}
 	}
 
 
-	private boolean createRootTable(MetadataFactory mf, Class<?> entity, Descriptor descriptor, String cacheName, ObjectConnection conn) throws TranslatorException {
+	private void createRootTable(MetadataFactory mf, Class<?> entity, Descriptor descriptor, String cacheName, ObjectConnection conn) throws TranslatorException {
 			
 		String pkField = conn.getPkField();
 		boolean updatable = (pkField != null ? true : false);
 		
 		rootTable = addTable(mf, entity, updatable, false);
 		
-		
 		if (classObjectColumn) {
-			// add column for cache Object, set to non-selectable by default so that select * queries don't fail by default
+	    // add column for cache Object, set to non-selectable by default so that select * queries don't fail by default
 			addRootColumn(mf, Object.class, entity, null, null, SearchType.Unsearchable, rootTable.getName(), rootTable, false, false, NullType.Nullable); //$NON-NLS-1$	
 		}
+		
 		pkMethod = null;
 		if (updatable) {
 		    pkMethod = conn.getClassRegistry().getReadClassMethods(entity.getName()).get(pkField);
 		    if (pkMethod == null) {
 				throw new TranslatorException(InfinispanPlugin.Util.gs(InfinispanPlugin.Event.TEIID25008, new Object[] {pkField, cacheName, entity.getName()}));
 		    	
-		    }
-		    
+		    }	    
 		}
 		
 		boolean addKey = false;
 		boolean repeats = false;
 		// the descriptor is needed to determine which fields are defined as searchable.
 		for (FieldDescriptor fd:descriptor.getFields()) {	
 			if (fd.isRepeated() ) {
-				repeats = true;
+				repeatableMap.put(fd.getMessageType().getName(), fd.getName());
 			} else {
 				NullType nt = NullType.Nullable;
 				SearchType st = isSearchable(fd);
@@ -175,7 +171,10 @@ private boolean createRootTable(MetadataFactory mf, Class<?> entity, Descriptor
 					addKey = true;
 					st = SearchType.Searchable;
 					nt = NullType.No_Nulls;
+				} else if (fd.isRequired()) {
+					nt = NullType.No_Nulls;
 				}
+				// dont make primary key updatable, the object must be deleted and readded in order to change the key
 				addRootColumn(mf, returnType, getProtobufNativeType(fd), fd.getFullName(), fd.getName(), st, rootTable.getName(), rootTable, true, true, nt);	
 			}
 		}	
@@ -190,21 +189,17 @@ private boolean createRootTable(MetadataFactory mf, Class<?> entity, Descriptor
 	        ArrayList<String> x = new ArrayList<String>(1) ;
 	        x.add(pkField);
 	        mf.addPrimaryKey(pkName, x , rootTable);		    
-		}
-			
-		return repeats;
+		}			
 	}
-	
+			
 	private void addInnerClasses(MetadataFactory mf, Descriptor descriptor, ObjectConnection conn) throws TranslatorException {
-
-		for (FieldDescriptor fd:descriptor.getFields()) {	
-			if (fd.isRepeated() ) {
-				processRepeatedType(mf,fd, rootTable, pkMethod, conn);	
-			} 
+		for (Descriptor des: descriptor.getNestedTypes()) {
+			createInnerTable(mf, des, rootTable, pkMethod, conn);		
 		}	
 
 	}
 	
+	
 	private Table addTable(MetadataFactory mf, Class<?> entity, boolean updatable, boolean staging) {
 		String tName = entity.getSimpleName();
 		if (staging) {
@@ -215,7 +210,6 @@ private Table addTable(MetadataFactory mf, Class<?> entity, boolean updatable, b
 			//already loaded
 			return t;
 		}
-		
 		t = mf.addTable(tName);
 		t.setSupportsUpdate(updatable);
 
@@ -229,17 +223,74 @@ private static Method findMethod(String className, String methodName, ObjectConn
         Method m = mapMethods.get(methodName);
         if (m!= null) return m;
         
+        m = mapMethods.get(methodName.toLowerCase());
+        if (m!= null) return m;
+        
         // because the class 'methods' contains 2 different references
         //  get'Name'  and 'Name', this will look for the 'Name' version
         for (Iterator<String> it=mapMethods.keySet().iterator(); it.hasNext();) {
-        	String mName = (String) it.next();
+        	String mName = it.next();
         	if (mName.toLowerCase().startsWith(methodName.toLowerCase()) ) {
         		m = mapMethods.get(mName);
         		return m;
         	} 
         }
 		throw new TranslatorException(""Program Error: unable to find method "" + methodName + "" on class "" + className);
 
+    }
+    private void createInnerTable(MetadataFactory mf, Descriptor desc, Table rootTable, Method pkMethod, ObjectConnection conn) throws TranslatorException  {
+
+    	//	Descriptor d = desc.getContainingType();
+		Descriptor parent = desc.getContainingType();
+		// Need to find the method name that corresponds to the repeating attribute
+		// so that the actual method name can be used in defining the NIS
+		// which will provide the correct method to use when retrieving the data at execution time
+
+		Class<?> pc = getRegisteredClass(parent.getName(), conn);
+		Class<?> c = getRegisteredClass(desc.getName(), conn);
+
+//		throw new TranslatorException(InfinispanPlugin.Util.gs(InfinispanPlugin.Event.TEIID25060, new Object[] { colName }));
+
+		Table t = addTable(mf, c, true, false);
+		t.setSupportsUpdate(rootTable.supportsUpdate());
+
+		String fd_Name = repeatableMap.get(desc.getName());
+		List<FieldDescriptor> fields = desc.getFields();
+		for (FieldDescriptor f:fields) {
+
+			
+			final SearchType st = isSearchable(f);
+			
+			if (fd_Name == null) {
+				fd_Name = """";
+			}
+			// need to use the repeated descriptor, fd, as the prefix to the NIS in order to perform query
+			addSubColumn(mf, getJavaType(f, c, conn),  getProtobufNativeType(f), f, st, fd_Name, t, true, true, (f.isRequired() ? NullType.No_Nulls  : NullType.Nullable) );	
+		}
+		
+		if (pkMethod != null) {
+			// if not repeatable, then use the attribute name
+			String mName =  findMethodName(pc.getName(), fd_Name, conn);
+			
+			if (mName == null) {		
+				mName = desc.getName();
+			}
+
+			
+			// use the same parent table primary ke column name in the foreign key tables
+			String methodName = rootTable.getPrimaryKey().getColumns().get(0).getName();
+			List<String> keyColumns = new ArrayList<String>();
+			keyColumns.add(methodName);
+			List<String> referencedKeyColumns = new ArrayList<String>();
+			referencedKeyColumns.add(methodName);
+			String fkName = ""FK_"" + rootTable.getName().toUpperCase();
+    		addRootColumn(mf, pkMethod.getReturnType(), pkMethod.getReturnType(), methodName, methodName, SearchType.Searchable, t.getName(), t, true, true, NullType.No_Nulls);
+			ForeignKey fk = mf.addForiegnKey(fkName, keyColumns, referencedKeyColumns, rootTable.getName(), t);
+			
+			fk.setNameInSource(mName);
+
+		}		
+
     }
     
 	private void processRepeatedType(MetadataFactory mf, FieldDescriptor fd, Table rootTable, Method pkMethod, ObjectConnection conn) throws TranslatorException  {
@@ -370,6 +421,8 @@ private Column addRootColumn(MetadataFactory mf, Class<?> type, Class<?> nativeT
 	private Column addSubColumn(MetadataFactory mf, Class<?> type, Class<?> nativeType, FieldDescriptor fd,
 			 SearchType searchType, String nisPrefix, Table rootTable, boolean selectable, boolean updateable, NullType nt) {
 		String attributeName = fd.getName();
+		
+		// create the combined name to use for a 1-to-many relationship when searching
 		String nis = nisPrefix + ""."" + fd.getName();
 
 		return addColumn(mf, type, nativeType, attributeName, nis, searchType, rootTable, selectable, updateable, nt);
@@ -427,7 +480,7 @@ private Column addColumn(MetadataFactory mf, Class<?> type, Class<?> nativeType,
 //			c.setNativeType(type.getName());
 //		}
 
-		return c;
+		return c; 
 	}	
 	
 	private static SearchType isSearchable(FieldDescriptor fd) {",2016-08-24T20:48:07Z,19
"@@ -43,12 +43,14 @@
  */
 public class TestInfinispanHotRodConnection extends SimpleMapCacheConnection implements InfinispanHotRodConnection {
 	protected Version version;
+	protected boolean useAnnotations;
 	
 	public static ObjectConnection createConnection(Map<Object,Object> map, Version version) {
 		CacheNameProxy proxy = new CacheNameProxy(TradesAnnotatedCacheSource.TRADES_CACHE_NAME);
 
 		TestInfinispanHotRodConnection conn = new TestInfinispanHotRodConnection(map, TradesAnnotatedCacheSource.METHOD_REGISTRY, proxy);
 		conn.setVersion(version);
+		conn.setConfiguredUsingAnnotations(true);
 				
 		return conn;
 	}
@@ -104,4 +106,18 @@ public Version getVersion() {
 	public void setVersion(Version v) {
 		this.version = v;
 	}
+
+	/**
+	 * {@inheritDoc}
+	 *
+	 * @see org.teiid.translator.infinispan.hotrod.InfinispanHotRodConnection#configuredUsingAnnotations()
+	 */
+	@Override
+	public boolean configuredUsingAnnotations() {
+		return useAnnotations;
+	}
+	
+	public void setConfiguredUsingAnnotations(boolean useAnnotations) {
+		this.useAnnotations = useAnnotations;
+	}
 }",2016-08-24T20:48:07Z,25
"@@ -1,7 +1,7 @@
 CREATE FOREIGN TABLE AllTypes (
 	intKey integer NOT NULL OPTIONS (NAMEINSOURCE 'intKey', SEARCHABLE 'Searchable', NATIVE_TYPE 'int'),
 	stringNum string OPTIONS (NAMEINSOURCE 'stringNum', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
-	stringKey string OPTIONS (NAMEINSOURCE 'stringKey', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'java.lang.String'),
+	stringKey string NOT NULL OPTIONS (NAMEINSOURCE 'stringKey', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'java.lang.String'),
 	floatNum float OPTIONS (NAMEINSOURCE 'floatNum', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'float'),
 	bigIntegerValue biginteger OPTIONS (NAMEINSOURCE 'bigIntegerValue', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'long'),
 	shortValue short OPTIONS (NAMEINSOURCE 'shortValue', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'int'),",2016-08-24T20:48:07Z,70
"@@ -1,14 +1,14 @@
 CREATE FOREIGN TABLE Person (
 	PersonObject object OPTIONS (NAMEINSOURCE 'this', SELECTABLE FALSE, UPDATABLE FALSE, SEARCHABLE 'Unsearchable', NATIVE_TYPE 'org.jboss.as.quickstarts.datagrid.hotrod.query.domain.Person'),
-	name string OPTIONS (NAMEINSOURCE 'name', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
+	name string NOT NULL OPTIONS (NAMEINSOURCE 'name', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
 	id integer NOT NULL OPTIONS (NAMEINSOURCE 'id', SEARCHABLE 'Searchable', NATIVE_TYPE 'int'),
 	email string OPTIONS (NAMEINSOURCE 'email', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'java.lang.String'),
 	CONSTRAINT PK_ID PRIMARY KEY(id)
 ) OPTIONS (UPDATABLE TRUE);
 
 CREATE FOREIGN TABLE PhoneNumber (
-	number string OPTIONS (NAMEINSOURCE 'phone.number', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
+	number string NOT NULL OPTIONS (NAMEINSOURCE 'phone.number', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
 	type string OPTIONS (NAMEINSOURCE 'phone.type', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'java.lang.Enum'),
-	id integer NOT NULL OPTIONS (NAMEINSOURCE 'id', SELECTABLE FALSE, UPDATABLE FALSE, SEARCHABLE 'Searchable', NATIVE_TYPE 'int'),
+	id integer NOT NULL OPTIONS (NAMEINSOURCE 'id', SEARCHABLE 'Searchable', NATIVE_TYPE 'int'),
 	CONSTRAINT FK_PERSON FOREIGN KEY(id) REFERENCES Person (id) OPTIONS (NAMEINSOURCE 'phones')
 ) OPTIONS (UPDATABLE TRUE);
\ No newline at end of file",2016-08-24T20:48:07Z,71
"@@ -1,13 +1,13 @@
 CREATE FOREIGN TABLE Person (
-	name string OPTIONS (NAMEINSOURCE 'name', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
+	name string NOT NULL OPTIONS (NAMEINSOURCE 'name', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
 	id integer NOT NULL OPTIONS (NAMEINSOURCE 'id', SEARCHABLE 'Searchable', NATIVE_TYPE 'int'),
 	email string OPTIONS (NAMEINSOURCE 'email', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'java.lang.String'),
 	CONSTRAINT PK_ID PRIMARY KEY(id)
 ) OPTIONS (UPDATABLE TRUE);
 
 CREATE FOREIGN TABLE PhoneNumber (
-	number string OPTIONS (NAMEINSOURCE 'phone.number', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
+	number string NOT NULL OPTIONS (NAMEINSOURCE 'phone.number', SEARCHABLE 'Searchable', NATIVE_TYPE 'java.lang.String'),
 	type string OPTIONS (NAMEINSOURCE 'phone.type', SEARCHABLE 'Unsearchable', NATIVE_TYPE 'java.lang.Enum'),
-	id integer NOT NULL OPTIONS (NAMEINSOURCE 'id', SELECTABLE FALSE, UPDATABLE FALSE, SEARCHABLE 'Searchable', NATIVE_TYPE 'int'),
+	id integer NOT NULL OPTIONS (NAMEINSOURCE 'id', SEARCHABLE 'Searchable', NATIVE_TYPE 'int'),
 	CONSTRAINT FK_PERSON FOREIGN KEY(id) REFERENCES Person (id) OPTIONS (NAMEINSOURCE 'phones')
 ) OPTIONS (UPDATABLE TRUE);
\ No newline at end of file",2016-08-24T20:48:07Z,72
"@@ -36,7 +36,6 @@
 import org.teiid.translator.ProcedureExecution;
 import org.teiid.translator.ResultSetExecution;
 import org.teiid.translator.TranslatorException;
-import org.teiid.translator.TranslatorProperty;
 import org.teiid.translator.UpdateExecution;
 import org.teiid.translator.object.metadata.JavaBeanMetadataProcessor;
 
@@ -52,7 +51,7 @@ public abstract class ObjectExecutionFactory extends
 		ExecutionFactory<ConnectionFactory, ObjectConnection> {
 
 	public static final int MAX_SET_SIZE = 10000;
-	private boolean searchabilityBasedOnAnnotations = true;
+	private boolean searchabilityBasedOnAnnotations = false;
 	
 	public ObjectExecutionFactory() {
 		setSourceRequiredForMetadata(false);
@@ -96,7 +95,6 @@ public ProcedureExecution createDirectExecution(List<Argument> arguments, Comman
 		return new ObjectDirectExecution(arguments, command, connection, executionContext, this);
 	}   
 	
-	@TranslatorProperty(display=""SearchabilityBasedOnAnnotations"", description=""If false, will turn off determining column searchability based on hibernate annotations"", advanced=true)
 	public boolean supportsSearchabilityUsingAnnotations() {
 		return searchabilityBasedOnAnnotations;
 	}	",2016-08-24T20:48:07Z,73
"@@ -23,11 +23,12 @@ public class TestAnnotationMetadataProcessor {
 	@Before public void beforeEach() throws Exception{	
 		 
 		TRANSLATOR = new SimpleMapCacheExecutionFactory();
+		TRANSLATOR.setSupportsSearchabilityUsingAnnotations(true);
+
     }
 	
 	@Test
 	public void testPersonMetadata() throws Exception {
-		
 		TRANSLATOR.start();
 
 ",2016-08-24T20:48:07Z,74
"@@ -29,6 +29,7 @@ <H2><A NAME=""Highlights""></A>Highlights</H2>
     <li>TEIID-3192 <b>Salesforce Connectivity</b> - connectivity was converted to the partner api provided by Salesforce rather than utilizing CXF.  Please log an issue if you were utilizing features from the CXF config.
     <li>TEIID-3046 <b>Recursive Common Table Expression</b> - engine and push down support was added. 
     <li>TEIID-3163 TEIID-3167 <b>Text Table Enhancements</b> - to support a general no trim option and to use a different row delimiter.
+    <li>TEIID-991 <b>SybaseIQ Translator</b> - for use with SybaseIQ 15.1 and later.
 </ul>
 
 <h2><a name=""Compatibility"">Compatibility Issues</a></h2>",2014-11-21T18:18:14Z,93
"@@ -51,12 +51,18 @@ public class AddDiffModifier extends FunctionModifier {
 	
 	private boolean add;
 	private LanguageFactory factory;
+	private boolean supportsQuarter;
 
 	public AddDiffModifier(boolean add, LanguageFactory factory) {
 		this.add = add;
 		this.factory = factory;
 	}
 	
+	public AddDiffModifier supportsQuarter(boolean b) {
+		this.supportsQuarter = b;
+		return this;
+	}
+	
 	@Override
 	public List<?> translate(Function function) {
 		if (add) {
@@ -71,6 +77,10 @@ public List<?> translate(Function function) {
 			intervalType.setValue(newInterval);
 			return null;
 		}
+		if (supportsQuarter && interval.equals(NonReserved.SQL_TSI_QUARTER)) {
+			intervalType.setValue(""QUARTER""); //$NON-NLS-1$
+			return null;
+		}
 		if (add) {
 			if (interval.equals(NonReserved.SQL_TSI_FRAC_SECOND)) {
 				intervalType.setValue(""MILLISECOND""); //$NON-NLS-1$",2014-11-21T18:18:14Z,94
"@@ -0,0 +1,213 @@
+package org.teiid.translator.jdbc.sybase;
+
+import java.sql.Date;
+import java.sql.Time;
+import java.sql.Timestamp;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.teiid.language.Function;
+import org.teiid.translator.SourceSystemFunctions;
+import org.teiid.translator.Translator;
+import org.teiid.translator.TranslatorException;
+import org.teiid.translator.jdbc.AliasModifier;
+import org.teiid.translator.jdbc.ConvertModifier;
+import org.teiid.translator.jdbc.EscapeSyntaxModifier;
+import org.teiid.translator.jdbc.FunctionModifier;
+import org.teiid.translator.jdbc.Version;
+import org.teiid.translator.jdbc.hsql.AddDiffModifier;
+import org.teiid.translator.jdbc.oracle.ConcatFunctionModifier;
+
+/**
+ * A translator for Sybase IQ 15.1+
+ */
+@Translator(name=""sybaseiq"", description=""A translator for Sybase Database"")
+public class SybaseIQExecutionFactory extends BaseSybaseExecutionFactory {
+	
+	public static final Version FIFTEEN_4 = Version.getVersion(""15.4""); //$NON-NLS-1$
+	
+	protected Map<String, Integer> formatMap = new HashMap<String, Integer>();
+	
+	public SybaseIQExecutionFactory() {
+		setSupportsFullOuterJoins(false);
+		setMaxInCriteriaSize(250);
+		setMaxDependentInPredicates(7);
+	}
+	
+    public void start() throws TranslatorException {
+        super.start();
+        
+    	registerFunctionModifier(SourceSystemFunctions.CONCAT, new ConcatFunctionModifier(getLanguageFactory()) {
+    		@Override
+    		public List<?> translate(Function function) {
+    			function.setName(""||""); //$NON-NLS-1$
+    			return super.translate(function);
+    		}
+    	});
+    	registerFunctionModifier(SourceSystemFunctions.CONCAT2, new AliasModifier(""STRING"")); //$NON-NLS-1$
+        registerFunctionModifier(SourceSystemFunctions.DAYOFWEEK, new EscapeSyntaxModifier());
+        registerFunctionModifier(SourceSystemFunctions.DAYOFYEAR, new EscapeSyntaxModifier());
+        registerFunctionModifier(SourceSystemFunctions.DAYOFMONTH, new EscapeSyntaxModifier());
+        registerFunctionModifier(SourceSystemFunctions.TIMESTAMPADD, new AddDiffModifier(true, this.getLanguageFactory()).supportsQuarter(true));
+        registerFunctionModifier(SourceSystemFunctions.TIMESTAMPDIFF, new AddDiffModifier(false, this.getLanguageFactory()).supportsQuarter(true));
+        registerFunctionModifier(SourceSystemFunctions.IFNULL, new AliasModifier(SourceSystemFunctions.COALESCE));
+        
+        //add in type conversion
+        ConvertModifier convertModifier = new ConvertModifier();
+        convertModifier.setBooleanNullable(booleanNullable());
+        //boolean isn't treated as bit, since it doesn't support null
+        //byte is treated as smallint, since tinyint is unsigned
+    	convertModifier.addTypeMapping(""smallint"", FunctionModifier.BYTE, FunctionModifier.SHORT); //$NON-NLS-1$
+    	convertModifier.addTypeMapping(""bigint"", FunctionModifier.LONG); //$NON-NLS-1$
+    	convertModifier.addTypeMapping(""real"", FunctionModifier.FLOAT); //$NON-NLS-1$
+    	convertModifier.addTypeMapping(""numeric(38, 0)"", FunctionModifier.BIGINTEGER); //$NON-NLS-1$
+    	convertModifier.addTypeMapping(""numeric(38, 19)"", FunctionModifier.BIGDECIMAL); //$NON-NLS-1$
+    	convertModifier.addTypeMapping(""char(1)"", FunctionModifier.CHAR); //$NON-NLS-1$
+    	convertModifier.addTypeMapping(""varchar(40)"", FunctionModifier.STRING); //$NON-NLS-1$
+    }
+    
+    @Override
+    public List<String> getSupportedFunctions() {
+        List<String> supportedFunctions = new ArrayList<String>();
+        supportedFunctions.addAll(super.getSupportedFunctions());
+        supportedFunctions.add(""ABS""); //$NON-NLS-1$
+        supportedFunctions.add(""ACOS""); //$NON-NLS-1$
+        supportedFunctions.add(""ASCII""); //$NON-NLS-1$
+        supportedFunctions.add(""ASIN""); //$NON-NLS-1$
+        supportedFunctions.add(""ATAN""); //$NON-NLS-1$
+        supportedFunctions.add(""ATAN2""); //$NON-NLS-1$
+        supportedFunctions.add(""CHAR""); //$NON-NLS-1$
+        supportedFunctions.add(""COS""); //$NON-NLS-1$
+        supportedFunctions.add(""COT""); //$NON-NLS-1$
+        supportedFunctions.add(SourceSystemFunctions.COALESCE);
+        supportedFunctions.add(SourceSystemFunctions.CONCAT); 
+        supportedFunctions.add(SourceSystemFunctions.CONCAT2);
+        supportedFunctions.add(""DEGREES""); //$NON-NLS-1$
+        supportedFunctions.add(""EXP""); //$NON-NLS-1$
+        supportedFunctions.add(""FLOOR""); //$NON-NLS-1$
+        supportedFunctions.add(""LCASE""); //$NON-NLS-1$
+        supportedFunctions.add(SourceSystemFunctions.LOCATE);
+        supportedFunctions.add(""LEFT""); //$NON-NLS-1$
+        supportedFunctions.add(""LENGTH""); //$NON-NLS-1$
+        supportedFunctions.add(SourceSystemFunctions.LCASE); 
+        supportedFunctions.add(""LTRIM""); //$NON-NLS-1$
+        supportedFunctions.add(""LOG""); //$NON-NLS-1$
+        supportedFunctions.add(""LOG10""); //$NON-NLS-1$
+        supportedFunctions.add(""MOD""); //$NON-NLS-1$
+        supportedFunctions.add(""PI""); //$NON-NLS-1$
+        supportedFunctions.add(""POWER""); //$NON-NLS-1$
+        supportedFunctions.add(""RADIANS""); //$NON-NLS-1$
+        supportedFunctions.add(""SIGN""); //$NON-NLS-1$
+        supportedFunctions.add(""SIN""); //$NON-NLS-1$
+        supportedFunctions.add(""SQRT""); //$NON-NLS-1$
+        supportedFunctions.add(""TAN""); //$NON-NLS-1$
+        
+        supportedFunctions.add(SourceSystemFunctions.REPEAT); 
+        //supportedFunctions.add(""RAND""); //$NON-NLS-1$
+        supportedFunctions.add(""RIGHT""); //$NON-NLS-1$
+        supportedFunctions.add(""RTRIM""); //$NON-NLS-1$
+        supportedFunctions.add(""SPACE""); //$NON-NLS-1$
+        supportedFunctions.add(""SUBSTRING""); //$NON-NLS-1$
+        supportedFunctions.add(SourceSystemFunctions.UCASE);
+        //supportedFunctons.add(""CURDATE""); //$NON-NLS-1$
+        //supportedFunctons.add(""CURTIME""); //$NON-NLS-1$
+        supportedFunctions.add(""DAYNAME""); //$NON-NLS-1$
+        supportedFunctions.add(""DAYOFMONTH""); //$NON-NLS-1$
+        supportedFunctions.add(""DAYOFWEEK""); //$NON-NLS-1$
+        supportedFunctions.add(""DAYOFYEAR""); //$NON-NLS-1$
+        supportedFunctions.add(""HOUR""); //$NON-NLS-1$
+        supportedFunctions.add(""MINUTE""); //$NON-NLS-1$
+        supportedFunctions.add(""MONTH""); //$NON-NLS-1$
+        supportedFunctions.add(""MONTHNAME""); //$NON-NLS-1$
+        //supportedFunctions.add(""NOW""); //$NON-NLS-1$
+        supportedFunctions.add(""QUARTER""); //$NON-NLS-1$
+        supportedFunctions.add(""SECOND""); //$NON-NLS-1$
+        supportedFunctions.add(""TIMESTAMPADD""); //$NON-NLS-1$
+        supportedFunctions.add(""TIMESTAMPDIFF""); //$NON-NLS-1$
+        supportedFunctions.add(""WEEK""); //$NON-NLS-1$
+        supportedFunctions.add(""YEAR""); //$NON-NLS-1$
+        supportedFunctions.add(SourceSystemFunctions.CONVERT);
+        supportedFunctions.add(SourceSystemFunctions.IFNULL);
+        supportedFunctions.add(SourceSystemFunctions.NULLIF);
+        //supportedFunctions.add(""FORMATTIMESTAMP"");   //$NON-NLS-1$
+        supportedFunctions.add(SourceSystemFunctions.TRIM);
+        return supportedFunctions;
+    }
+    
+    @Override
+    public boolean supportsInlineViews() {
+        return true;
+    }
+
+    @Override
+    public boolean supportsFunctionsInGroupBy() {
+        return true;
+    }
+    
+    @Override
+    public int getMaxFromGroups() {
+        return 50;
+    } 
+    
+    @Override
+    public boolean supportsAggregatesEnhancedNumeric() {
+    	return true;
+    }
+    
+    public boolean booleanNullable() {
+    	return false;
+    }
+    
+    @Override
+    public String translateLiteralTime(Time timeValue) {
+    	return ""CAST('"" + formatDateValue(timeValue) +""' AS TIME)""; //$NON-NLS-1$ //$NON-NLS-2$
+    }
+    
+    @Override
+    public String translateLiteralTimestamp(Timestamp timestampValue) {
+    	return ""CAST('"" + formatDateValue(timestampValue) +""' AS TIMESTAMP)""; //$NON-NLS-1$ //$NON-NLS-2$
+    }
+    
+    @Override
+    public String translateLiteralDate(Date dateValue) {
+    	return ""CAST('"" + formatDateValue(dateValue) +""' AS DATE)""; //$NON-NLS-1$ //$NON-NLS-2$
+    }
+    
+	@Override
+	public boolean supportsRowLimit() {
+		return getVersion().compareTo(FIFTEEN_4) >= 0; 
+	}
+
+	@Override
+	protected boolean usesDatabaseVersion() {
+		return true;
+	}
+	
+    @Override
+    public boolean supportsSelectWithoutFrom() {
+    	return true;
+    }
+    
+    @Override
+    public String getHibernateDialectClassName() {
+    	return ""org.hibernate.dialect.SybaseAnywhereDialect""; //$NON-NLS-1$
+    }
+    
+    @Override
+    public boolean supportsGroupByRollup() {
+    	return true;
+    }
+    
+    @Override
+    public boolean useUnicodePrefix() {
+    	return true;
+    }
+    
+    @Override
+    public boolean hasTimeType() {
+    	return true;
+    }
+	
+}",2014-11-21T18:18:14Z,95
"@@ -0,0 +1,70 @@
+/*
+ * JBoss, Home of Professional Open Source.
+ * See the COPYRIGHT.txt file distributed with this work for information
+ * regarding copyright ownership.  Some portions may be licensed
+ * to Red Hat, Inc. under one or more contributor license agreements.
+ * 
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License AS published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ * 
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ * 
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ * 02110-1301 USA.
+ */
+
+
+package org.teiid.translator.jdbc.sybase;
+
+import static org.junit.Assert.*;
+
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mockito;
+import org.teiid.language.Command;
+import org.teiid.translator.ExecutionContext;
+import org.teiid.translator.TranslatorException;
+import org.teiid.translator.jdbc.TranslatedCommand;
+import org.teiid.translator.jdbc.TranslationHelper;
+
+public class TestSybaseIQTranslator {
+	
+    private static SybaseIQExecutionFactory trans = new SybaseIQExecutionFactory();
+    
+    @BeforeClass
+    public static void setup() throws TranslatorException {
+    	trans.setUseBindVariables(false);
+        trans.start();
+    }
+    
+    public void helpTestVisitor(String vdb, String input, String expectedOutput) {
+        // Convert from sql to objects
+        Command obj = TranslationHelper.helpTranslate(vdb, input);
+        
+        TranslatedCommand tc = new TranslatedCommand(Mockito.mock(ExecutionContext.class), trans);
+		try {
+			tc.translateCommand(obj);
+		} catch (TranslatorException e) {
+			throw new RuntimeException(e);
+		}
+        
+        assertEquals(""Did not get correct sql"", expectedOutput, tc.getSql());             //$NON-NLS-1$
+    }
+    
+    @Test public void testTimestampDiff() {
+    	String input = ""SELECT timestampadd(sql_tsi_quarter, 1, timestampvalue), timestampadd(sql_tsi_frac_second, 1000, timestampvalue), timestampdiff(sql_tsi_frac_second, timestampvalue, timestampvalue) from bqt1.smalla""; //$NON-NLS-1$
+        String output = ""SELECT dateadd('QUARTER', 1, SmallA.TimestampValue), dateadd('MILLISECOND', (1000 / 1000000), SmallA.TimestampValue), datediff('MILLISECOND', SmallA.TimestampValue, SmallA.TimestampValue) * 1000000 FROM SmallA"";  //$NON-NLS-1$
+        
+        helpTestVisitor(TranslationHelper.BQT_VDB,
+            input, 
+            output);
+    }
+
+}",2014-11-21T18:18:14Z,96
"@@ -52,13 +52,13 @@
 @Translator(name=""modeshape"")
 public class ModeShapeExecutionFactory extends JDBCExecutionFactory {
 	
-    private String version = ""2.0"";	
+    private String version = ""2.0"";	 //$NON-NLS-1$
 
     @Override
     public void start() throws TranslatorException {
         super.start();
         
-        registerFunctionModifier(""PATH"", new FunctionModifier() {
+        registerFunctionModifier(""PATH"", new FunctionModifier() { //$NON-NLS-1$
             
             @Override
             public List<?> translate(Function function) {
@@ -137,14 +137,14 @@ public List<?> translate(LanguageObject obj, ExecutionContext context) {
 	    NamedTable nt = (NamedTable) obj;
 	    List<String> ntlist = new ArrayList<String>(1);
 
-	    ntlist.add(""["" + nt.getMetadataObject().getNameInSource() + ""]"");
+	    ntlist.add(""["" + nt.getMetadataObject().getNameInSource() + ""]""); //$NON-NLS-1$ //$NON-NLS-2$
 	    return ntlist;
 	}
 
 	if (obj instanceof ColumnReference) {
 	    ColumnReference elem = (ColumnReference) obj;
 	    List<String> ntlist = new ArrayList<String>(1);
-	    ntlist.add(""["" + elem.getMetadataObject().getNameInSource() + ""]"");
+	    ntlist.add(""["" + elem.getMetadataObject().getNameInSource() + ""]""); //$NON-NLS-1$ //$NON-NLS-2$
 	    return ntlist;
 
 	}",2010-06-18T14:27:29Z,97
"@@ -272,4 +272,20 @@
             <parameter class=""java.lang.String"">teradata</parameter>
         </constructor>
     </bean>
+    
+    <!-- MODESHAPE -->
+    <bean name=""translator-modeshape-template"" class=""org.teiid.templates.TranslatorDeploymentTemplate"">
+        <property name=""info""><inject bean=""translator-modeshape"" /> </property>
+        <property name=""managedObjectFactory""> <inject bean=""ManagedObjectFactory"" /> </property>
+    </bean>
+
+    <bean name=""translator-modeshape"" class=""org.teiid.templates.TranslatorTemplateInfo"">
+        <constructor factoryMethod=""createTemplateInfo"">
+            <factory bean=""TranslatorDeploymentTemplateInfoFactory"" />
+            <parameter class=""java.lang.Class"">org.teiid.templates.TranslatorTemplateInfo</parameter>
+            <parameter class=""java.lang.Class"">org.teiid.translator.jdbc.modeshape.ModeShapeExecutionFactory</parameter>
+            <parameter class=""java.lang.String"">translator-modeshape</parameter>
+            <parameter class=""java.lang.String"">Modeshape</parameter>
+        </constructor>
+    </bean>    
 </deployment>
\ No newline at end of file",2010-06-18T14:27:29Z,98
"@@ -214,6 +214,7 @@ private Row nextRow() {
      */
     List<Object> projectRow(Row row) throws TranslatorException {
         ArrayList output = new ArrayList();
+        boolean allNulls = true;
         
         int id = row.getRowNum()+1;
         
@@ -232,7 +233,7 @@ List<Object> projectRow(Row row) throws TranslatorException {
         		output.add(null);
         		continue;
         	}
-
+        	allNulls = false;
         	switch (this.evaluator.evaluateInCell(cell).getCellType()) {
                 case Cell.CELL_TYPE_NUMERIC:
                     output.add(convertFromExcelType(cell.getNumericCellValue(), cell, this.expectedColumnTypes[i]));
@@ -254,6 +255,10 @@ List<Object> projectRow(Row row) throws TranslatorException {
             }   
         }
         
+        if (allNulls) {
+        	return null;
+        }
+        
         return output;    
     }
 ",2014-08-18T15:15:37Z,99
"@@ -234,7 +234,10 @@ public void visit(Literal obj) {
 	
 	@Override
 	public void visit(Limit obj) {
-		this.firstDataRowNumber = new Integer(obj.getRowOffset()-1);
+		int offset = obj.getRowOffset();
+		if (offset != 0) {
+			this.firstDataRowNumber = offset + this.firstDataRowNumber;
+		}
 		this.filters.add(new CompareFilter(this.firstDataRowNumber, Operator.GE));
 		this.filters.add(new CompareFilter(this.firstDataRowNumber+obj.getRowLimit(), Operator.LT));
 	}	",2014-08-18T15:15:37Z,100
"@@ -217,9 +217,18 @@ public void testExecutionLimit() throws Exception {
     	FileConnection connection = Mockito.mock(FileConnection.class);
     	Mockito.stub(connection.getFile(""names.xls"")).toReturn(UnitTestUtil.getTestDataFile(""names.xls""));
 
-    	ArrayList results = helpExecute(commonDDL, connection, ""select FirstName from Sheet1 LIMIT 16,1"");
-    	assertEquals(""[[Matt]]"", results.toString());
+    	ArrayList results = helpExecute(commonDDL, connection, ""select FirstName from Sheet1 LIMIT 3,1"");
+    	assertEquals(""[[Sarah]]"", results.toString());
 	}
+	
+	@Test
+	public void testExecutionLimit2() throws Exception {
+    	FileConnection connection = Mockito.mock(FileConnection.class);
+    	Mockito.stub(connection.getFile(""names.xls"")).toReturn(UnitTestUtil.getTestDataFile(""names.xls""));
+
+    	ArrayList results = helpExecute(commonDDL, connection, ""select FirstName from Sheet1 LIMIT 1"");
+    	assertEquals(""[[John]]"", results.toString());
+	}	
 
 	@Test
 	public void testExecutionAnd() throws Exception {",2014-08-18T15:15:37Z,101
"@@ -1,9 +1,11 @@
-connect
-/extension=org.jboss.teiid:add(module=org.jboss.teiid)
+/server-group=main-server-group:write-attribute(name=profile, value=ha)
+/server-group=main-server-group:write-attribute(name=socket-binding-group,value=ha-sockets)
+
 /socket-binding-group=ha-sockets/socket-binding=teiid-jdbc:add(port=31000)
 /socket-binding-group=ha-sockets/socket-binding=teiid-odbc:add(port=35432)
-/server-group=main-server-group:write-attribute(name=profile, value=ha)
-/server-group=main-server-group:write-attribute(name=socket-binding-group, value=ha-sockets)
+
+/socket-binding-group=full-ha-sockets/socket-binding=teiid-jdbc:add(port=31000)
+/socket-binding-group=full-ha-sockets/socket-binding=teiid-odbc:add(port=35432)
 
 /profile=ha/subsystem=infinispan/cache-container=teiid-cache:add(default-cache=resultset)
 /profile=ha/subsystem=infinispan/cache-container=teiid-cache/transport=TRANSPORT:add(lock-timeout=60000)
@@ -13,28 +15,59 @@ connect
 /profile=ha/subsystem=infinispan/cache-container=teiid-cache/replicated-cache=resultset-repl/eviction=EVICTION:add(max-entries=1024, strategy=LIRS)
 /profile=ha/subsystem=infinispan/cache-container=teiid-cache/replicated-cache=resultset-repl/transaction=TRANSACTION:add(mode=NON_XA)
 
+/profile=full-ha/subsystem=infinispan/cache-container=teiid-cache:add(default-cache=resultset)
+/profile=full-ha/subsystem=infinispan/cache-container=teiid-cache/transport=TRANSPORT:add(lock-timeout=60000)
+/profile=full-ha/subsystem=infinispan/cache-container=teiid-cache/replicated-cache=resultset-repl:add(mode=SYNC, batching=true)
+/profile=full-ha/subsystem=infinispan/cache-container=teiid-cache/replicated-cache=resultset-repl/locking=LOCKING:add(isolation=READ_COMMITTED)
+/profile=full-ha/subsystem=infinispan/cache-container=teiid-cache/replicated-cache=resultset-repl/expiration=EXPIRATION:add(lifespan=7200000)
+/profile=full-ha/subsystem=infinispan/cache-container=teiid-cache/replicated-cache=resultset-repl/eviction=EVICTION:add(max-entries=1024, strategy=LIRS)
+/profile=full-ha/subsystem=infinispan/cache-container=teiid-cache/replicated-cache=resultset-repl/transaction=TRANSACTION:add(mode=NON_XA)
+
 /profile=ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset:add(batching=true)
 /profile=ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset/locking=LOCKING:add(isolation=READ_COMMITTED)
 /profile=ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset/expiration=EXPIRATION:add(lifespan=7200000)
 /profile=ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset/eviction=EVICTION:add(max-entries=1024, strategy=LIRS)
 /profile=ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset/transaction=TRANSACTION:add(mode=NON_XA)
 
+/profile=full-ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset:add(batching=true)
+/profile=full-ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset/locking=LOCKING:add(isolation=READ_COMMITTED)
+/profile=full-ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset/expiration=EXPIRATION:add(lifespan=7200000)
+/profile=full-ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset/eviction=EVICTION:add(max-entries=1024, strategy=LIRS)
+/profile=full-ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset/transaction=TRANSACTION:add(mode=NON_XA)
+
 /profile=ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=preparedplan:add(batching=true)
 /profile=ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=preparedplan/locking=LOCKING:add(isolation=READ_COMMITTED)
 /profile=ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=preparedplan/expiration=EXPIRATION:add(lifespan=28800)
 /profile=ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=preparedplan/eviction=EVICTION:add(max-entries=512, strategy=LIRS)
 
+/profile=full-ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=preparedplan:add(batching=true)
+/profile=full-ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=preparedplan/locking=LOCKING:add(isolation=READ_COMMITTED)
+/profile=full-ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=preparedplan/expiration=EXPIRATION:add(lifespan=28800)
+/profile=full-ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=preparedplan/eviction=EVICTION:add(max-entries=512, strategy=LIRS)
+
 /profile=ha/subsystem=security/security-domain=teiid-security:add(cache-type=default)
 /profile=ha/subsystem=security/security-domain=teiid-security/authentication=classic:add()
 /profile=ha/subsystem=security/security-domain=teiid-security/authentication=classic/login-module=teiid:add(code=org.jboss.security.auth.spi.UsersRolesLoginModule, flag=required, module-options={usersProperties=""${jboss.domain.config.dir}/teiid-security-users.properties"", rolesProperties=""${jboss.domain.config.dir}/teiid-security-roles.properties""}) 
 /profile=ha/subsystem=threads/unbounded-queue-thread-pool=teiid-async:add(max-threads=4)
 
+/profile=full-ha/subsystem=security/security-domain=teiid-security:add(cache-type=default)
+/profile=full-ha/subsystem=security/security-domain=teiid-security/authentication=classic:add()
+/profile=full-ha/subsystem=security/security-domain=teiid-security/authentication=classic/login-module=teiid:add(code=org.jboss.security.auth.spi.UsersRolesLoginModule, flag=required, module-options={usersProperties=""${jboss.domain.config.dir}/teiid-security-users.properties"", rolesProperties=""${jboss.domain.config.dir}/teiid-security-roles.properties""}) 
+/profile=full-ha/subsystem=threads/unbounded-queue-thread-pool=teiid-async:add(max-threads=4)
+
+
 /profile=ha/subsystem=teiid:add(async-thread-pool=teiid-async, distributed-cache-jgroups-stack=udp, resultset-cache-infinispan-container=teiid-cache, preparedplan-cache-infinispan-container=teiid-cache, policy-decider-module=org.jboss.teiid)
 /profile=ha/subsystem=teiid/transport=embedded:add()
 /profile=ha/subsystem=teiid/transport=odata:add(authentication-security-domain=teiid-security)
 /profile=ha/subsystem=teiid/transport=jdbc:add(protocol=teiid, socket-binding=teiid-jdbc, authentication-security-domain=teiid-security)
 /profile=ha/subsystem=teiid/transport=odbc:add(protocol=pg, socket-binding=teiid-odbc, authentication-security-domain=teiid-security) 
 
+/profile=full-ha/subsystem=teiid:add(async-thread-pool=teiid-async, distributed-cache-jgroups-stack=udp, resultset-cache-infinispan-container=teiid-cache, preparedplan-cache-infinispan-container=teiid-cache, policy-decider-module=org.jboss.teiid)
+/profile=full-ha/subsystem=teiid/transport=embedded:add()
+/profile=full-ha/subsystem=teiid/transport=odata:add(authentication-security-domain=teiid-security)
+/profile=full-ha/subsystem=teiid/transport=jdbc:add(protocol=teiid, socket-binding=teiid-jdbc, authentication-security-domain=teiid-security)
+/profile=full-ha/subsystem=teiid/transport=odbc:add(protocol=pg, socket-binding=teiid-odbc, authentication-security-domain=teiid-security) 
+
 /profile=ha/subsystem=teiid/translator=jdbc-simple:add(module=org.jboss.teiid.translator.jdbc)
 /profile=ha/subsystem=teiid/translator=jdbc-ansi:add(module=org.jboss.teiid.translator.jdbc)
 /profile=ha/subsystem=teiid/translator=access:add(module=org.jboss.teiid.translator.jdbc)
@@ -77,9 +110,53 @@ connect
 /profile=ha/subsystem=teiid/translator=impala:add(module=org.jboss.teiid.translator.hive)
 
 
+/profile=full-ha/subsystem=teiid/translator=jdbc-simple:add(module=org.jboss.teiid.translator.jdbc)
+/profile=full-ha/subsystem=teiid/translator=jdbc-ansi:add(module=org.jboss.teiid.translator.jdbc)
+/profile=full-ha/subsystem=teiid/translator=access:add(module=org.jboss.teiid.translator.jdbc)
+/profile=full-ha/subsystem=teiid/translator=db2:add(module=org.jboss.teiid.translator.jdbc)
+/profile=full-ha/subsystem=teiid/translator=derby:add(module=org.jboss.teiid.translator.jdbc)
+/profile=full-ha/subsystem=teiid/translator=h2:add(module=org.jboss.teiid.translator.jdbc)
+/profile=full-ha/subsystem=teiid/translator=hsql:add(module=org.jboss.teiid.translator.jdbc)
+/profile=full-ha/subsystem=teiid/translator=informix:add(module=org.jboss.teiid.translator.jdbc)
+/profile=full-ha/subsystem=teiid/translator=metamatrix:add(module=org.jboss.teiid.translator.jdbc)
+/profile=full-ha/subsystem=teiid/translator=mysql:add(module=org.jboss.teiid.translator.jdbc)
+/profile=full-ha/subsystem=teiid/translator=mysql5:add(module=org.jboss.teiid.translator.jdbc)
+/profile=full-ha/subsystem=teiid/translator=oracle:add(module=org.jboss.teiid.translator.jdbc)
+/profile=full-ha/subsystem=teiid/translator=postgresql:add(module=org.jboss.teiid.translator.jdbc)
+/profile=full-ha/subsystem=teiid/translator=sqlserver:add(module=org.jboss.teiid.translator.jdbc)
+/profile=full-ha/subsystem=teiid/translator=sybase:add(module=org.jboss.teiid.translator.jdbc)
+/profile=full-ha/subsystem=teiid/translator=teiid:add(module=org.jboss.teiid.translator.jdbc)
+/profile=full-ha/subsystem=teiid/translator=teradata:add(module=org.jboss.teiid.translator.jdbc)
+/profile=full-ha/subsystem=teiid/translator=modeshape:add(module=org.jboss.teiid.translator.jdbc)
+/profile=full-ha/subsystem=teiid/translator=ingres:add(module=org.jboss.teiid.translator.jdbc)
+/profile=full-ha/subsystem=teiid/translator=ingres93:add(module=org.jboss.teiid.translator.jdbc)
+/profile=full-ha/subsystem=teiid/translator=intersystems-cache:add(module=org.jboss.teiid.translator.jdbc)
+/profile=full-ha/subsystem=teiid/translator=netezza:add(module=org.jboss.teiid.translator.jdbc)
+/profile=full-ha/subsystem=teiid/translator=file:add(module=org.jboss.teiid.translator.file)
+/profile=full-ha/subsystem=teiid/translator=ldap:add(module=org.jboss.teiid.translator.ldap)
+/profile=full-ha/subsystem=teiid/translator=loopback:add(module=org.jboss.teiid.translator.loopback)
+/profile=full-ha/subsystem=teiid/translator=olap:add(module=org.jboss.teiid.translator.olap)
+/profile=full-ha/subsystem=teiid/translator=ws:add(module=org.jboss.teiid.translator.ws)
+/profile=full-ha/subsystem=teiid/translator=salesforce:add(module=org.jboss.teiid.translator.salesforce)
+/profile=full-ha/subsystem=teiid/translator=hive:add(module=org.jboss.teiid.translator.hive)
+/profile=full-ha/subsystem=teiid/translator=infinispan-cache:add(module=org.jboss.teiid.translator.object)
+/profile=full-ha/subsystem=teiid/translator=map-cache:add(module=org.jboss.teiid.translator.object)
+/profile=full-ha/subsystem=teiid/translator=google-spreadsheet:add(module=org.jboss.teiid.translator.google)
+/profile=full-ha/subsystem=teiid/translator=odata:add(module=org.jboss.teiid.translator.odata)
+/profile=full-ha/subsystem=teiid/translator=sap-nw-gateway:add(module=org.jboss.teiid.translator.odata)
+/profile=full-ha/subsystem=teiid/translator=mongodb:add(module=org.jboss.teiid.translator.mongodb)
+/profile=full-ha/subsystem=teiid/translator=cassandra:add(module=org.jboss.teiid.translator.cassandra)
+/profile=full-ha/subsystem=teiid/translator=accumulo:add(module=org.jboss.teiid.translator.accumulo)
+/profile=full-ha/subsystem=teiid/translator=solr:add(module=org.jboss.teiid.translator.solr)
+/profile=full-ha/subsystem=teiid/translator=excel:add(module=org.jboss.teiid.translator.excel)
+/profile=full-ha/subsystem=teiid/translator=impala:add(module=org.jboss.teiid.translator.hive)
+
 /profile=ha/subsystem=datasources/jdbc-driver=teiid:add(driver-name=teiid, driver-module-name=org.jboss.teiid.client, driver-class-name=org.teiid.jdbc.TeiidDriver, driver-xa-datasource-class-name=org.teiid.jdbc.TeiidDataSource)
 /profile=ha/subsystem=datasources/jdbc-driver=teiid-local:add(driver-name=teiid-local, driver-module-name=org.jboss.teiid, driver-class-name=org.teiid.jdbc.TeiidDriver, driver-xa-datasource-class-name=org.teiid.jdbc.TeiidDataSource)
 
+/profile=full-ha/subsystem=datasources/jdbc-driver=teiid:add(driver-name=teiid, driver-module-name=org.jboss.teiid.client, driver-class-name=org.teiid.jdbc.TeiidDriver, driver-xa-datasource-class-name=org.teiid.jdbc.TeiidDataSource)
+/profile=full-ha/subsystem=datasources/jdbc-driver=teiid-local:add(driver-name=teiid-local, driver-module-name=org.jboss.teiid, driver-class-name=org.teiid.jdbc.TeiidDriver, driver-xa-datasource-class-name=org.teiid.jdbc.TeiidDataSource)
+
 /profile=ha/subsystem=resource-adapters/resource-adapter=file:add(module=org.jboss.teiid.resource-adapter.file)
 /profile=ha/subsystem=resource-adapters/resource-adapter=google:add(module=org.jboss.teiid.resource-adapter.google)
 /profile=ha/subsystem=resource-adapters/resource-adapter=infinispan:add(module=org.jboss.teiid.resource-adapter.infinispan)
@@ -90,4 +167,13 @@ connect
 /profile=ha/subsystem=resource-adapters/resource-adapter=accumulo:add(module=org.jboss.teiid.resource-adapter.accumulo)
 /profile=ha/subsystem=resource-adapters/resource-adapter=solr:add(module=org.jboss.teiid.resource-adapter.solr)
 
-/host=master:reload(restart-servers=true)  
+
+/profile=full-ha/subsystem=resource-adapters/resource-adapter=file:add(module=org.jboss.teiid.resource-adapter.file)
+/profile=full-ha/subsystem=resource-adapters/resource-adapter=google:add(module=org.jboss.teiid.resource-adapter.google)
+/profile=full-ha/subsystem=resource-adapters/resource-adapter=infinispan:add(module=org.jboss.teiid.resource-adapter.infinispan)
+/profile=full-ha/subsystem=resource-adapters/resource-adapter=ldap:add(module=org.jboss.teiid.resource-adapter.ldap)
+/profile=full-ha/subsystem=resource-adapters/resource-adapter=salesforce:add(module=org.jboss.teiid.resource-adapter.salesforce)
+/profile=full-ha/subsystem=resource-adapters/resource-adapter=webservice:add(module=org.jboss.teiid.resource-adapter.webservice)
+/profile=full-ha/subsystem=resource-adapters/resource-adapter=mongodb:add(module=org.jboss.teiid.resource-adapter.mongodb)
+/profile=full-ha/subsystem=resource-adapters/resource-adapter=accumulo:add(module=org.jboss.teiid.resource-adapter.accumulo)
+/profile=full-ha/subsystem=resource-adapters/resource-adapter=solr:add(module=org.jboss.teiid.resource-adapter.solr)",2014-05-23T14:30:22Z,102
"@@ -0,0 +1 @@
+/extension=org.jboss.teiid:add(module=org.jboss.teiid)",2014-05-23T14:30:22Z,103
"@@ -1,5 +1,3 @@
-connect
-/extension=org.jboss.teiid:add(module=org.jboss.teiid)
 /socket-binding-group=standard-sockets/socket-binding=teiid-jdbc:add(port=31000)
 /socket-binding-group=standard-sockets/socket-binding=teiid-odbc:add(port=35432)
 
@@ -84,5 +82,3 @@ connect
 /subsystem=resource-adapters/resource-adapter=webservice:add(module=org.jboss.teiid.resource-adapter.webservice)
 /subsystem=resource-adapters/resource-adapter=mongodb:add(module=org.jboss.teiid.resource-adapter.mongodb)
 /subsystem=resource-adapters/resource-adapter=accumulo:add(module=org.jboss.teiid.resource-adapter.accumulo)
-
-/:reload
\ No newline at end of file",2014-05-23T14:30:22Z,104
"@@ -1,9 +1,9 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
 <module xmlns=""urn:jboss:module:1.0"" name=""org.apache.poi"">
     <resources>
-        <resource-root path=""poi-3.10-FINAL.jar"" />
-        <resource-root path=""poi-ooxml-3.10-FINAL.jar"" />
-        <resource-root path=""poi-ooxml-schemas-3.10-FINAL.jar"" />
+        <resource-root path=""poi-${version.org.apache.poi}.jar"" />
+        <resource-root path=""poi-ooxml-${version.org.apache.poi}.jar"" />
+        <resource-root path=""poi-ooxml-schemas-${version.org.apache.poi}.jar"" />
         <!-- Insert resources here -->
     </resources>
 ",2014-05-23T14:30:22Z,105
"@@ -23,14 +23,18 @@
         <!--version.org.jboss.resteasy>2.3.6.Final</version.org.jboss.resteasy   2.3.7.Final -->
         <!--version.org.hibernate>4.2.10.Final</version.org.hibernate    4.2.12.Final -->
         <!--version.org.hibernate.search>4.2.0.Final</version.org.hibernate.search  4.3.0.Final -->
-        <version.javax.ws.rs>1.1</version.javax.ws.rs> <!-- 1.1.1  -->
+        <!--version.javax.ws.rs>1.1</version.javax.ws.rs--> <!-- 1.1.1  -->
  
         <!-- version.org.infinispan>5.2.8.CR1</version.org.infinispan  5.2.9.Final -->
         <!--version.org.apache.xmlbeans>2.4.0-redhat-2</version.org.apache.xmlbeans  2.4.0 -->
         <!-- ersion.org.apache.lucene>3.6.2</version.org.apache.lucene--> <!--  same -->
         <!--version.asm>3.3.1-redhat-5</version.asm--> <!--  3.3.1 -->
         <!--version.org.apache.cxf>2.7.10.redhat-1</version.org.apache.cxf-->  <!-- 2.7.11 -->
-        
+        <!--version.com.google.guava>13.0.1-redhat-1</version.com.google.guava-->
+        <!-- version.io.netty>3.6.7.Final-redhat-1</version.io.netty>   use from bom, as this is being updated -->
+        <!--version.commons-logging>1.1.3</version.commons-logging   -->
+        <!--version.wsdl4j>1.6.3</version.wsdl4j-->
+      
 	    
         <version.org.jboss.logging.jboss-logging>${version.org.jboss.logging}</version.org.jboss.logging.jboss-logging>
         <version.sun.jaxb>${version.com.sun.xml.bind.jaxb}</version.sun.jaxb>
@@ -43,8 +47,6 @@
 	     
 	    <version.org.apache.cxf-jaxrs>${version.org.apache.cxf}</version.org.apache.cxf-jaxrs>
 
-        <!-- version.io.netty>3.6.7.Final-redhat-1</version.io.netty>   use from bom, as this is being updated -->
-        <!--version.commons-logging>1.1.3</version.commons-logging   -->
 
 		<!-- NOTE changing to use bom version of 1.1.3 will cause a build issue in teiid-engine -->
         <version.jaxen>1.1.3.redhat-3</version.jaxen> <!--  1.1.3  -->
@@ -54,15 +56,15 @@
         <version.org.jboss.integration-platform>6.0.0.CR8</version.org.jboss.integration-platform>
         <version.org.jboss.jboss-common-core>2.2.17.GA-redhat-2</version.org.jboss.jboss-common-core>
         <version.org.jboss.as>7.4.0.Final-redhat-4</version.org.jboss.as>
-        <version.wsdl4j>1.6.3</version.wsdl4j>
         <version.org.jboss.jboss-dmr>1.2.0.Final-redhat-1</version.org.jboss.jboss-dmr>
         <version.org.jboss.msc.jboss-msc>1.1.5.Final</version.org.jboss.msc.jboss-msc>
         <version.org.jboss.jboss-vfs>3.2.2.Final-redhat-1</version.org.jboss.jboss-vfs>
         <version.org.picketbox>4.0.19.SP4-redhat-1</version.org.picketbox>        
        
         <version.xom>1.2.7.redhat-4</version.xom>
-        <version.com.google.guava>13.0.1-redhat-1</version.com.google.guava>
         <version.dom4j>1.6.1.redhat-6</version.dom4j>
+        
+        <!-- NOTE using the CR8 bom version will cause the commons-integration-tests to fail -->
         <version.com.h2database>1.3.152</version.com.h2database>
                 
         <!-- integration stack bom propererties -->
@@ -83,7 +85,7 @@
         <version.nux>1.6</version.nux>
         <version.gdata-spreadsheet>3.0</version.gdata-spreadsheet>
         <version.gdata-core>1.0</version.gdata-core>
-        <version.org.infinispan.6>6.0.0.Final</version.org.infinispan.6>
+        <version.org.infinispan.6>6.0.1.Final</version.org.infinispan.6>
         <version.olap4j>1.1.0</version.olap4j>
         <version.accumulo>1.5.0</version.accumulo>
         <version.hadoop-core>0.20.2</version.hadoop-core>",2014-05-23T14:30:22Z,90
"@@ -15,9 +15,11 @@
         <module name=""org.jboss.teiid.common-core""/>
         <module name=""org.jboss.teiid.api""/>
         <module name=""org.jboss.teiid.translator.object""/>
-        <module name=""org.jboss.teiid.translator.infinispan.cache""/>   
+        <module name=""org.jboss.teiid.translator.infinispan.cache"" export=true/>   
         <module name=""org.jboss.modules""/>
         
 		<module name=""org.infinispan"" slot=""${jdg.slot}"" optional=""true"" services=""export""  export=""true"" />
+		<module name=""org.infinispan.query"" slot=""${jdg.slot}"" optional=""true""  services=""export"" export=""true""  />
+		
     </dependencies>
 </module>",2016-02-18T19:54:37Z,106
"@@ -97,6 +97,11 @@
             <artifactId>connector-api</artifactId>
             <scope>provided</scope>
         </dependency>
+		<dependency>
+			<groupId>javax.transaction</groupId>
+			<artifactId>jta</artifactId>
+			<scope>provided</scope>
+		</dependency>        
 
         <dependency>
             <groupId>org.hibernate</groupId>",2016-02-18T19:54:37Z,107
"@@ -12,28 +12,15 @@
     <dependencies>
         <module name=""javax.api""/>
         <module name=""javax.resource.api""/>
-        <!-->module name=""org.jboss.teiid.common-core"" />
-        <module name=""org.jboss.teiid.api"" /> 
-        <module name=""org.jboss.teiid"" />
-        <module name=""org.jboss.modules"" export=""true""/-->
         
         <module name=""org.jboss.teiid.translator.object"" export=""true"" />        
 
         <module name=""org.infinispan"" slot=""${jdg.slot}"" optional=""true""  export=""true""  services=""import"" />
         <module name=""org.infinispan.query"" slot=""${jdg.slot}"" optional=""true"" export=""true""  services=""import"" />
-        <!-->module name=""org.infinispan.commons"" slot=""${jdg.slot}"" optional=""true""  export=""true"" /-->
         <module name=""org.infinispan.query.dsl"" slot=""${jdg.slot}"" optional=""true""  export=""true"" /> 
           
         <module name=""org.infinispan.lucene-directory"" slot=""${jdg.slot}"" optional=""true""  export=""true"" /> 
       
-        <!--       
-        This ""your.pojo.module"" would be used when the infinispan-cache translator is used.
-		The ""your.pojo.module"" name needs to be replaced with the module name that has
-		the java class(s) that's being stored in the JDG cache  
-		-->
-	
-		<module name=""your.pojo.module""  optional=""true""  export=""true"" />
-
     </dependencies>
 </module>
   
\ No newline at end of file",2016-02-18T19:54:37Z,108
"@@ -121,7 +121,12 @@
             <groupId>javax.resource</groupId>
             <artifactId>connector-api</artifactId>
             <scope>provided</scope>
-        </dependency>   
+        </dependency> 
+ 		<dependency>
+			<groupId>javax.transaction</groupId>
+			<artifactId>jta</artifactId>
+			<scope>provided</scope>
+		</dependency>           
        <dependency>
             <groupId>org.mockito</groupId>
             <artifactId>mockito-all</artifactId>",2016-02-18T19:54:37Z,109
"@@ -27,8 +27,6 @@
 import java.util.Date;
 import java.util.List;
 
-import javax.persistence.Entity;
-
 import org.hibernate.search.annotations.Analyze;
 import org.hibernate.search.annotations.DateBridge;
 import org.hibernate.search.annotations.Field;
@@ -39,7 +37,7 @@
 import org.hibernate.search.annotations.ProvidedId;
 import org.hibernate.search.annotations.Resolution;
 
-@Entity
+
 @Indexed @ProvidedId
 public class Trade  implements Serializable {
 	",2016-02-18T19:54:37Z,110
"@@ -1,26 +1,16 @@
 package org.jboss.teiid.jdg_remote.pojo;
 
-import java.sql.Date;
-import java.sql.Time;
-import java.sql.Timestamp;
 import java.io.Serializable;
-import java.lang.Character;
 import java.math.BigDecimal;
 import java.math.BigInteger;
+import java.sql.Date;
+import java.sql.Time;
+import java.sql.Timestamp;
 
-import javax.persistence.Entity;
-import javax.persistence.Id;
-
-import org.hibernate.search.annotations.Analyze;
-import org.hibernate.search.annotations.DateBridge;
 import org.hibernate.search.annotations.Field;
 import org.hibernate.search.annotations.Index;
 import org.hibernate.search.annotations.Indexed;
-import org.hibernate.search.annotations.IndexedEmbedded;
-import org.hibernate.search.annotations.Resolution;
-import org.hibernate.search.annotations.Store;
 
-@Entity
 @Indexed(index=""AllTypes"")
 public class AllTypes implements Serializable{
 	
@@ -44,7 +34,6 @@ public class AllTypes implements Serializable{
 	private Boolean booleanValue;
 	private Timestamp timeStampValue;
 	
-	@Id 
 	@Field(index=Index.YES)
 	private Integer intKey;
 	private String stringKey;",2016-02-18T19:54:37Z,111
"@@ -84,8 +84,7 @@
 	    
 	    <!-- connector specific dependencies included in kit -->
 	    
-        <version.com.squareup.protoparser>3.1.4.redhat-1</version.com.squareup.protoparser>
-        <version.org.infinispan.protostream>3.0.0.Alpha8-redhat-1</version.org.infinispan.protostream>
+ 
         <version.gdata-spreadsheet>3.0</version.gdata-spreadsheet>
         <version.gdata-core>1.0</version.gdata-core>
         <version.olap4j>1.1.0</version.olap4j>
@@ -97,12 +96,16 @@
         <version.org.apache.phoenix.phoenix-core>4.2.1</version.org.apache.phoenix.phoenix-core>       
   	    
 
-
-        <version.org.infinispan.hibernate.search>4.6.1.Final-redhat-1</version.org.infinispan.hibernate.search> <!-- versions required by infinispan  --> 
-        <version.org.infinispan.6>6.3.0.Final-redhat-5</version.org.infinispan.6>  
+        <version.com.squareup.protoparser>3.1.4.redhat-1</version.com.squareup.protoparser>
+        <version.org.infinispan.protostream>3.0.4.Final-redhat-1</version.org.infinispan.protostream>
+        <!--3.0.0.Alpha8-redhat-1</version.org.infinispan.protostream-->
+        <version.org.infinispan.hibernate.search>4.6.3.Final-redhat-1</version.org.infinispan.hibernate.search> 
+        <!--4.6.1.Final-redhat-1</version.org.infinispan.hibernate.search--> <!-- versions required by infinispan  --> 
+        <version.org.infinispan.6>6.4.0.Final-redhat-4</version.org.infinispan.6>
+        <!-- 6.3.0.Final-redhat-5</version.org.infinispan.6-->  
         <version.org.apache.lucene.infinispan>3.6.2.redhat-8</version.org.apache.lucene.infinispan>
         <!-- JDG module slot to use  -->
-        <jdg.slot>jdg-6.5</jdg.slot>  
+        <jdg.slot>jdg-6.6</jdg.slot>  
  
 	    
 	    <!-- drivers and other external, provided, dependencies -->",2016-02-18T19:54:37Z,90
"@@ -1,5 +1,62 @@
 connect
-deploy --all-server-groups ../standalone/deployments/teiid-connector-file.rar
-deploy --all-server-groups ../standalone/deployments/teiid-connector-ldap.rar      
-deploy --all-server-groups ../standalone/deployments/teiid-connector-salesforce.rar
-deploy --all-server-groups ../standalone/deployments/teiid-connector-ws.rar
+/extension=org.jboss.teiid:add(module=org.jboss.teiid)
+/socket-binding-group=ha-sockets/socket-binding=teiid-jdbc:add(port=31000)
+/socket-binding-group=ha-sockets/socket-binding=teiid-odbc:add(port=35432)
+/server-group=main-server-group:write-attribute(name=profile, value=ha)
+/server-group=main-server-group:write-attribute(name=socket-binding-group, value=ha-sockets)
+
+/profile=ha/subsystem=infinispan/cache-container=teiid-cache:add(default-cache=result-set)
+/profile=ha/subsystem=infinispan/cache-container=teiid-cache/transport=TRANSPORT:add(lock-timeout=60000)
+/profile=ha/subsystem=infinispan/cache-container=teiid-cache/replicated-cache=resultset:add(mode=SYNC, batching=true)
+/profile=ha/subsystem=infinispan/cache-container=teiid-cache/replicated-cache=resultset/locking=LOCKING:add(isolation=READ_COMMITTED)
+/profile=ha/subsystem=infinispan/cache-container=teiid-cache/replicated-cache=resultset/expiration=EXPIRATION:add(lifespan=7200000)
+/profile=ha/subsystem=infinispan/cache-container=teiid-cache/replicated-cache=resultset/eviction=EVICTION:add(max-entries=1024, strategy=LRU)
+
+/profile=ha/subsystem=security/security-domain=teiid-security:add(cache-type=default)
+/profile=ha/subsystem=security/security-domain=teiid-security/authentication=classic:add(login-modules=[{""code""=>""UserRoles"", ""flag""=>""required"", ""module-options""=>[(""userProperties""=>""teiid-security-user.properties""), (""rolesProperties""=>""teiid-security-roles.properties"")]}]) 
+/profile=ha/subsystem=threads/bounded-queue-thread-pool=teiid-async:add(name=teiid-async, max-threads=4, queue-length=100)
+
+/profile=ha/subsystem=teiid:add(async-thread-pool=teiid-async, distributed-cache-jgroups-stack=udp, resultset-cache-infinispan-container=teiid-cache)
+/profile=ha/subsystem=teiid/transport=embedded:add()
+/profile=ha/subsystem=teiid/transport=jdbc:add(protocol=teiid, socket-binding=teiid-jdbc, ssl-mode=login, authentication-security-domain=teiid-security)
+/profile=ha/subsystem=teiid/transport=odbc:add(protocol=pg, socket-binding=teiid-odbc, authentication-security-domain=teiid-security) 
+
+/profile=ha/subsystem=teiid/translator=jdbc-simple:add(module=org.jboss.teiid.translator.jdbc)
+/profile=ha/subsystem=teiid/translator=jdbc-ansi:add(module=org.jboss.teiid.translator.jdbc)
+/profile=ha/subsystem=teiid/translator=access:add(module=org.jboss.teiid.translator.jdbc)
+/profile=ha/subsystem=teiid/translator=db2:add(module=org.jboss.teiid.translator.jdbc)
+/profile=ha/subsystem=teiid/translator=derby:add(module=org.jboss.teiid.translator.jdbc)
+/profile=ha/subsystem=teiid/translator=h2:add(module=org.jboss.teiid.translator.jdbc)
+/profile=ha/subsystem=teiid/translator=hsql:add(module=org.jboss.teiid.translator.jdbc)
+/profile=ha/subsystem=teiid/translator=informix:add(module=org.jboss.teiid.translator.jdbc)
+/profile=ha/subsystem=teiid/translator=metamatrix:add(module=org.jboss.teiid.translator.jdbc)
+/profile=ha/subsystem=teiid/translator=mysql:add(module=org.jboss.teiid.translator.jdbc)
+/profile=ha/subsystem=teiid/translator=mysql5:add(module=org.jboss.teiid.translator.jdbc)
+/profile=ha/subsystem=teiid/translator=oracle:add(module=org.jboss.teiid.translator.jdbc)
+/profile=ha/subsystem=teiid/translator=postgresql:add(module=org.jboss.teiid.translator.jdbc)
+/profile=ha/subsystem=teiid/translator=sqlserver:add(module=org.jboss.teiid.translator.jdbc)
+/profile=ha/subsystem=teiid/translator=sybase:add(module=org.jboss.teiid.translator.jdbc)
+/profile=ha/subsystem=teiid/translator=teiid:add(module=org.jboss.teiid.translator.jdbc)
+/profile=ha/subsystem=teiid/translator=teradata:add(module=org.jboss.teiid.translator.jdbc)
+/profile=ha/subsystem=teiid/translator=modeshape:add(module=org.jboss.teiid.translator.jdbc)
+/profile=ha/subsystem=teiid/translator=ingres:add(module=org.jboss.teiid.translator.jdbc)
+/profile=ha/subsystem=teiid/translator=ingres93:add(module=org.jboss.teiid.translator.jdbc)
+/profile=ha/subsystem=teiid/translator=intersystems-cache:add(module=org.jboss.teiid.translator.jdbc)
+/profile=ha/subsystem=teiid/translator=netezza:add(module=org.jboss.teiid.translator.jdbc)
+/profile=ha/subsystem=teiid/translator=file:add(module=org.jboss.teiid.translator.file)
+/profile=ha/subsystem=teiid/translator=ldap:add(module=org.jboss.teiid.translator.ldap)
+/profile=ha/subsystem=teiid/translator=loopback:add(module=org.jboss.teiid.translator.loopback)
+/profile=ha/subsystem=teiid/translator=olap:add(module=org.jboss.teiid.translator.olap)
+/profile=ha/subsystem=teiid/translator=ws:add(module=org.jboss.teiid.translator.ws)
+/profile=ha/subsystem=teiid/translator=salesforce:add(module=org.jboss.teiid.translator.salesforce)
+/profile=ha/subsystem=teiid/translator=hive:add(module=org.jboss.teiid.translator.hive)
+
+/profile=ha/subsystem=datasources/jdbc-driver=teiid:add(driver-name=teiid, driver-module-name=org.jboss.teiid.client, driver-class-name=org.teiid.jdbc.TeiidDriver, driver-xa-datasource-class-name=org.teiid.jdbc.TeiidDataSource)
+/profile=ha/subsystem=datasources/jdbc-driver=teiid-local:add(driver-name=teiid-local, driver-module-name=org.jboss.teiid, driver-class-name=org.teiid.jdbc.TeiidDriver, driver-xa-datasource-class-name=org.teiid.jdbc.TeiidDataSource)
+
+deploy --server-groups=main-server-group ../standalone/deployments/teiid-connector-file.rar
+deploy --server-groups=main-server-group ../standalone/deployments/teiid-connector-ldap.rar      
+deploy --server-groups=main-server-group ../standalone/deployments/teiid-connector-salesforce.rar
+deploy --server-groups=main-server-group ../standalone/deployments/teiid-connector-ws.rar
+
+/server-group=main-server-group:restart-servers  
\ No newline at end of file",2012-04-11T18:52:57Z,102
"@@ -1,459 +0,0 @@
-<?xml version='1.0' encoding='UTF-8'?>
-
-<domain xmlns=""urn:jboss:domain:1.2"">
-    <extensions>
-        <extension module=""org.jboss.as.clustering.infinispan""/>
-        <extension module=""org.jboss.as.clustering.jgroups""/>
-        <extension module=""org.jboss.as.cmp""/>
-        <extension module=""org.jboss.as.configadmin""/>
-        <extension module=""org.jboss.as.connector""/>
-        <extension module=""org.jboss.as.ee""/>
-        <extension module=""org.jboss.as.ejb3""/>
-        <extension module=""org.jboss.as.jacorb""/>
-        <extension module=""org.jboss.as.jaxr""/>
-        <extension module=""org.jboss.as.jaxrs""/>
-        <extension module=""org.jboss.as.jdr""/>
-        <extension module=""org.jboss.as.jmx""/>
-        <extension module=""org.jboss.as.jpa""/>
-        <extension module=""org.jboss.as.jsr77""/>
-        <extension module=""org.jboss.as.logging""/>
-        <extension module=""org.jboss.as.mail""/>
-        <extension module=""org.jboss.as.messaging""/>
-        <extension module=""org.jboss.as.modcluster""/>
-        <extension module=""org.jboss.as.naming""/>
-        <extension module=""org.jboss.as.osgi""/>
-        <extension module=""org.jboss.as.pojo""/>
-        <extension module=""org.jboss.as.remoting""/>
-        <extension module=""org.jboss.as.sar""/>
-        <extension module=""org.jboss.as.security""/>
-        <extension module=""org.jboss.teiid""/>
-        <extension module=""org.jboss.as.threads""/>
-        <extension module=""org.jboss.as.transactions""/>
-        <extension module=""org.jboss.as.web""/>
-        <extension module=""org.jboss.as.webservices""/>
-        <extension module=""org.jboss.as.weld""/>
-    </extensions>
-    <system-properties>
-        <!-- IPv4 is not required, but setting this helps avoid unintended use of IPv6 -->
-        <property name=""java.net.preferIPv4Stack"" value=""true""/>
-    </system-properties>
-    <profiles>
-        <profile name=""ha"">
-            <subsystem xmlns=""urn:jboss:domain:logging:1.1"">
-                <console-handler name=""CONSOLE"">
-                    <level name=""INFO""/>
-                    <formatter>
-                        <pattern-formatter pattern=""%d{HH:mm:ss,SSS} %-5p [%c] (%t) %s%E%n""/>
-                    </formatter>
-                </console-handler>
-                <periodic-rotating-file-handler name=""FILE"">
-                    <formatter>
-                        <pattern-formatter pattern=""%d{HH:mm:ss,SSS} %-5p [%c] (%t) %s%E%n""/>
-                    </formatter>
-                    <file relative-to=""jboss.server.log.dir"" path=""server.log""/>
-                    <suffix value="".yyyy-MM-dd""/>
-                    <append value=""true""/>
-                </periodic-rotating-file-handler>
-                <logger category=""com.arjuna"">
-                    <level name=""WARN""/>
-                </logger>
-                <logger category=""org.apache.tomcat.util.modeler"">
-                    <level name=""WARN""/>
-                </logger>
-                <logger category=""sun.rmi"">
-                    <level name=""WARN""/>
-                </logger>
-                <logger category=""jacorb"">
-                    <level name=""WARN""/>
-                </logger>
-                <logger category=""jacorb.config"">
-                    <level name=""ERROR""/>
-                </logger>
-                <root-logger>
-                    <level name=""INFO""/>
-                    <handlers>
-                        <handler name=""CONSOLE""/>
-                        <handler name=""FILE""/>
-                    </handlers>
-                </root-logger>
-            </subsystem>
-            <subsystem xmlns=""urn:jboss:domain:configadmin:1.0""/>
-            <subsystem xmlns=""urn:jboss:domain:datasources:1.0"">
-                <datasources>
-                    <datasource jndi-name=""java:jboss/datasources/ExampleDS"" pool-name=""ExampleDS"" enabled=""true"" use-java-context=""true"">
-                        <connection-url>jdbc:h2:mem:test;DB_CLOSE_DELAY=-1</connection-url>
-                        <driver>h2</driver>
-                        <security>
-                            <user-name>sa</user-name>
-                            <password>sa</password>
-                        </security>
-                    </datasource>
-                    <drivers>
-                        <driver name=""h2"" module=""com.h2database.h2"">
-                            <xa-datasource-class>org.h2.jdbcx.JdbcDataSource</xa-datasource-class>
-                        </driver>
-                        <driver name=""teiid-local"" module=""org.jboss.teiid"">
-                            <driver-class>org.teiid.jdbc.TeiidDriver</driver-class>
-                            <xa-datasource-class>org.teiid.jdbc.TeiidDataSource</xa-datasource-class>
-                        </driver>
-                        <driver name=""teiid"" module=""org.jboss.teiid.client"">
-                            <driver-class>org.teiid.jdbc.TeiidDriver</driver-class>
-                            <xa-datasource-class>org.teiid.jdbc.TeiidDataSource</xa-datasource-class>
-                        </driver>                        
-                    </drivers>
-                </datasources>
-            </subsystem>
-            <subsystem xmlns=""urn:jboss:domain:ee:1.0""/>
-            <subsystem xmlns=""urn:jboss:domain:ejb3:1.2"">
-                <session-bean>
-                    <stateless>
-                        <bean-instance-pool-ref pool-name=""slsb-strict-max-pool""/>
-                    </stateless>
-                    <stateful default-access-timeout=""5000"" cache-ref=""simple"" clustered-cache-ref=""clustered""/>
-                    <singleton default-access-timeout=""5000""/>
-                </session-bean>
-                <pools>
-                    <bean-instance-pools>
-                        <strict-max-pool name=""slsb-strict-max-pool"" max-pool-size=""20"" instance-acquisition-timeout=""5"" instance-acquisition-timeout-unit=""MINUTES""/>
-                        <strict-max-pool name=""mdb-strict-max-pool"" max-pool-size=""20"" instance-acquisition-timeout=""5"" instance-acquisition-timeout-unit=""MINUTES""/>
-                    </bean-instance-pools>
-                </pools>
-                <caches>
-                    <cache name=""simple"" aliases=""NoPassivationCache""/>
-                    <cache name=""passivating"" passivation-store-ref=""file"" aliases=""SimpleStatefulCache""/>
-                    <cache name=""clustered"" passivation-store-ref=""infinispan"" aliases=""StatefulTreeCache""/>
-                </caches>
-                <passivation-stores>
-                    <file-passivation-store name=""file""/>
-                    <cluster-passivation-store name=""infinispan"" cache-container=""ejb""/>
-                </passivation-stores>
-                <async thread-pool-name=""default""/>
-                <timer-service thread-pool-name=""default"">
-                    <data-store path=""timer-service-data"" relative-to=""jboss.server.data.dir""/>
-                </timer-service>
-                <remote connector-ref=""remoting-connector"" thread-pool-name=""default""/>
-                <thread-pools>
-                    <thread-pool name=""default"">
-                        <max-threads count=""10""/>
-                        <keepalive-time time=""100"" unit=""milliseconds""/>
-                    </thread-pool>
-                </thread-pools>
-            </subsystem>
-            <subsystem xmlns=""urn:jboss:domain:infinispan:1.2"" default-cache-container=""cluster"">
-                <cache-container name=""cluster"" aliases=""ha-partition"" default-cache=""default"">
-                    <transport lock-timeout=""60000""/>
-                    <replicated-cache name=""default"" mode=""SYNC"" batching=""true"">
-                        <locking isolation=""REPEATABLE_READ""/>
-                    </replicated-cache>
-                </cache-container>
-                <cache-container name=""web"" aliases=""standard-session-cache"" default-cache=""repl"">
-                    <transport lock-timeout=""60000""/>
-                    <replicated-cache name=""repl"" mode=""ASYNC"" batching=""true"">
-                        <file-store/>
-                    </replicated-cache>
-                    <replicated-cache name=""sso"" mode=""SYNC"" batching=""true""/>
-                    <distributed-cache name=""dist"" mode=""ASYNC"" batching=""true"">
-                        <file-store/>
-                    </distributed-cache>
-                </cache-container>
-                <cache-container name=""ejb"" aliases=""sfsb sfsb-cache"" default-cache=""repl"">
-                    <transport lock-timeout=""60000""/>
-                    <replicated-cache name=""repl"" mode=""ASYNC"" batching=""true"">
-                        <eviction strategy=""LRU""/>
-                        <file-store/>
-                    </replicated-cache>
-                    <!--
-                      ~  Clustered cache used internally by EJB subsytem for managing the client-mapping(s) of
-                      ~                 the socketbinding referenced by the EJB remoting connector 
-                      -->
-                    <replicated-cache name=""remote-connector-client-mappings"" mode=""SYNC"" batching=""true""/>
-                    <distributed-cache name=""dist"" mode=""ASYNC"" batching=""true"">
-                        <eviction strategy=""LRU""/>
-                        <file-store/>
-                    </distributed-cache>
-                </cache-container>
-                <cache-container name=""hibernate"" default-cache=""local-query"">
-                    <transport lock-timeout=""60000""/>
-                    <local-cache name=""local-query"">
-                        <transaction mode=""NONE""/>
-                        <eviction strategy=""LRU"" max-entries=""10000""/>
-                        <expiration max-idle=""100000""/>
-                    </local-cache>
-                    <invalidation-cache name=""entity"" mode=""SYNC"">
-                        <transaction mode=""NON_XA""/>
-                        <eviction strategy=""LRU"" max-entries=""10000""/>
-                        <expiration max-idle=""100000""/>
-                    </invalidation-cache>
-                    <replicated-cache name=""timestamps"" mode=""ASYNC"">
-                        <transaction mode=""NONE""/>
-                        <eviction strategy=""NONE""/>
-                    </replicated-cache>
-                </cache-container>
-                <cache-container name=""teiid-cache"" default-cache=""resultset"">
-                    <transport lock-timeout=""60000""/>
-                    <replicated-cache name=""resultset"" mode=""SYNC"" batching=""true"">
-                        <locking isolation=""READ_COMMITTED""/>
-                        <expiration lifespan=""7200000"" />
-                        <eviction max-entries=""1024"" strategy=""LRU""/>
-                    </replicated-cache>
-                </cache-container>                
-            </subsystem>
-            <subsystem xmlns=""urn:jboss:domain:jaxrs:1.0""/>
-            <subsystem xmlns=""urn:jboss:domain:jca:1.1"">
-                <archive-validation enabled=""true"" fail-on-error=""true"" fail-on-warn=""false""/>
-                <bean-validation enabled=""true""/>
-                <default-workmanager>
-                    <short-running-threads>
-                        <core-threads count=""50""/>
-                        <queue-length count=""50""/>
-                        <max-threads count=""50""/>
-                        <keepalive-time time=""10"" unit=""seconds""/>
-                    </short-running-threads>
-                    <long-running-threads>
-                        <core-threads count=""50""/>
-                        <queue-length count=""50""/>
-                        <max-threads count=""50""/>
-                        <keepalive-time time=""10"" unit=""seconds""/>
-                    </long-running-threads>
-                </default-workmanager>
-                <cached-connection-manager/>
-            </subsystem>
-            <subsystem xmlns=""urn:jboss:domain:jdr:1.0""/>
-            <subsystem xmlns=""urn:jboss:domain:jgroups:1.1"" default-stack=""udp"">
-                <stack name=""udp"">
-                    <transport type=""UDP"" socket-binding=""jgroups-udp"" diagnostics-socket-binding=""jgroups-diagnostics""/>
-                    <protocol type=""PING""/>
-                    <protocol type=""MERGE2""/>
-                    <protocol type=""FD_SOCK"" socket-binding=""jgroups-udp-fd""/>
-                    <protocol type=""FD""/>
-                    <protocol type=""VERIFY_SUSPECT""/>
-                    <protocol type=""BARRIER""/>
-                    <protocol type=""pbcast.NAKACK""/>
-                    <protocol type=""UNICAST2""/>
-                    <protocol type=""pbcast.STABLE""/>
-                    <protocol type=""pbcast.GMS""/>
-                    <protocol type=""UFC""/>
-                    <protocol type=""MFC""/>
-                    <protocol type=""FRAG2""/>
-                </stack>
-                <stack name=""tcp"">
-                    <transport type=""TCP"" socket-binding=""jgroups-tcp"" diagnostics-socket-binding=""jgroups-diagnostics""/>
-                    <protocol type=""MPING"" socket-binding=""jgroups-mping""/>
-                    <protocol type=""MERGE2""/>
-                    <protocol type=""FD_SOCK"" socket-binding=""jgroups-tcp-fd""/>
-                    <protocol type=""FD""/>
-                    <protocol type=""VERIFY_SUSPECT""/>
-                    <protocol type=""BARRIER""/>
-                    <protocol type=""pbcast.NAKACK""/>
-                    <protocol type=""UNICAST2""/>
-                    <protocol type=""pbcast.STABLE""/>
-                    <protocol type=""pbcast.GMS""/>
-                    <protocol type=""UFC""/>
-                    <protocol type=""MFC""/>
-                    <protocol type=""FRAG2""/>
-                </stack>
-            </subsystem>
-            <subsystem xmlns=""urn:jboss:domain:jmx:1.1"">
-                <show-model value=""true""/>
-                <!--<remoting-connector use-management-endpoint=""false""/>-->
-            </subsystem>
-            <subsystem xmlns=""urn:jboss:domain:jpa:1.0"">
-                <jpa default-datasource=""""/>
-            </subsystem>
-            <subsystem xmlns=""urn:jboss:domain:mail:1.0"">
-                <mail-session jndi-name=""java:jboss/mail/Default"">
-                    <smtp-server outbound-socket-binding-ref=""mail-smtp""/>
-                </mail-session>
-            </subsystem>
-            <subsystem xmlns=""urn:jboss:domain:modcluster:1.0"">
-                <mod-cluster-config advertise-socket=""modcluster"">
-                    <dynamic-load-provider>
-                        <load-metric type=""busyness""/>
-                    </dynamic-load-provider>
-                </mod-cluster-config>
-            </subsystem>
-            <subsystem xmlns=""urn:jboss:domain:naming:1.1""/>
-            <subsystem xmlns=""urn:jboss:domain:osgi:1.2"" activation=""lazy"">
-                <properties>
-                    <!-- Specifies the beginning start level of the framework -->
-                    <property name=""org.osgi.framework.startlevel.beginning"">1</property>
-                </properties>
-                <capabilities>
-                    <!-- modules registered with the OSGi layer on startup -->
-                    <capability name=""javax.servlet.api:v25""/>
-                    <capability name=""javax.transaction.api""/>
-                    <!-- bundles started in startlevel 1 -->
-                    <capability name=""org.apache.felix.log"" startlevel=""1""/>
-                    <capability name=""org.jboss.osgi.logging"" startlevel=""1""/>
-                    <capability name=""org.apache.felix.configadmin"" startlevel=""1""/>
-                    <capability name=""org.jboss.as.osgi.configadmin"" startlevel=""1""/>
-                </capabilities>
-            </subsystem>
-            <subsystem xmlns=""urn:jboss:domain:pojo:1.0""/>
-            <subsystem xmlns=""urn:jboss:domain:remoting:1.1"">
-                <connector name=""remoting-connector"" socket-binding=""remoting"" security-realm=""ApplicationRealm""/>
-            </subsystem>
-            <subsystem xmlns=""urn:jboss:domain:resource-adapters:1.0""/>
-            <subsystem xmlns=""urn:jboss:domain:sar:1.0""/>
-            <subsystem xmlns=""urn:jboss:domain:security:1.1"">
-                <security-domains>
-                    <security-domain name=""other"" cache-type=""default"">
-                        <authentication>
-                            <login-module code=""Remoting"" flag=""optional"">
-                                <module-option name=""password-stacking"" value=""useFirstPass""/>
-                            </login-module>
-                            <login-module code=""RealmUsersRoles"" flag=""required"">
-                                <module-option name=""usersProperties"" value=""${jboss.domain.config.dir}/application-users.properties""/>
-                                <module-option name=""rolesProperties"" value=""${jboss.domain.config.dir}/application-roles.properties""/>
-                                <module-option name=""realm"" value=""ApplicationRealm""/>
-                                <module-option name=""password-stacking"" value=""useFirstPass""/>
-                            </login-module>
-                        </authentication>
-                    </security-domain>
-                    <security-domain name=""teiid-security"" cache-type=""default"">
-                        <authentication>
-                            <login-module code=""UsersRoles"" flag=""required"">
-                                <module-option name=""usersProperties"" value=""teiid-security-users.properties""/>
-                                <module-option name=""rolesProperties"" value=""teiid-security-roles.properties""/>
-                            </login-module>
-                        </authentication>
-                    </security-domain> 
-                    <security-domain name=""jboss-web-policy"" cache-type=""default"">
-                        <authorization>
-                            <policy-module code=""Delegating"" flag=""required""/>
-                        </authorization>
-                    </security-domain>
-                    <security-domain name=""jboss-ejb-policy"" cache-type=""default"">
-                        <authorization>
-                            <policy-module code=""Delegating"" flag=""required""/>
-                        </authorization>
-                    </security-domain>
-                </security-domains>
-            </subsystem>
-            <subsystem xmlns=""urn:jboss:domain:teiid:1.0"">
-                <async-thread-pool>teiid-async</async-thread-pool>
-                <distributed-cache jgroups-stack=""udp""/>
-                <resultset-cache infinispan-container=""teiid-cache""/>
-                
-                <transport name=""embedded""/>
-                <transport name=""jdbc"" protocol=""teiid"" socket-binding=""teiid-jdbc"">
-                    <ssl mode=""login""/>
-                    <authentication security-domain=""teiid-security""/>
-                </transport>
-                <transport name=""odbc"" protocol=""pg"" socket-binding=""teiid-odbc"">
-                    <authentication security-domain=""teiid-security""/>
-                </transport>
-                
-                <translator name=""jdbc-simple"" module=""org.jboss.teiid.translator.jdbc""/>
-                <translator name=""jdbc-ansi"" module=""org.jboss.teiid.translator.jdbc""/>
-                <translator name=""access"" module=""org.jboss.teiid.translator.jdbc""/>
-                <translator name=""db2"" module=""org.jboss.teiid.translator.jdbc""/>
-                <translator name=""derby"" module=""org.jboss.teiid.translator.jdbc""/>
-                <translator name=""h2"" module=""org.jboss.teiid.translator.jdbc""/>
-                <translator name=""hsql"" module=""org.jboss.teiid.translator.jdbc""/>
-                <translator name=""informix"" module=""org.jboss.teiid.translator.jdbc""/>
-                <translator name=""metamatrix"" module=""org.jboss.teiid.translator.jdbc""/>
-                <translator name=""mysql"" module=""org.jboss.teiid.translator.jdbc""/>
-                <translator name=""mysql5"" module=""org.jboss.teiid.translator.jdbc""/>
-                <translator name=""oracle"" module=""org.jboss.teiid.translator.jdbc""/>
-                <translator name=""postgresql"" module=""org.jboss.teiid.translator.jdbc""/>
-                <translator name=""sqlserver"" module=""org.jboss.teiid.translator.jdbc""/>
-                <translator name=""sybase"" module=""org.jboss.teiid.translator.jdbc""/>
-                <translator name=""teiid"" module=""org.jboss.teiid.translator.jdbc""/>
-                <translator name=""teradata"" module=""org.jboss.teiid.translator.jdbc""/>
-                <translator name=""modeshape"" module=""org.jboss.teiid.translator.jdbc""/>
-                <translator name=""ingres"" module=""org.jboss.teiid.translator.jdbc""/>
-                <translator name=""ingres93"" module=""org.jboss.teiid.translator.jdbc""/>
-                <translator name=""intersystems-cache"" module=""org.jboss.teiid.translator.jdbc""/>
-                <translator name=""netezza"" module=""org.jboss.teiid.translator.jdbc""/>
-                <translator name=""file"" module=""org.jboss.teiid.translator.file""/>
-                <translator name=""ldap"" module=""org.jboss.teiid.translator.ldap""/>
-                <translator name=""loopback"" module=""org.jboss.teiid.translator.loopback""/>
-                <translator name=""olap"" module=""org.jboss.teiid.translator.olap""/>
-                <translator name=""ws"" module=""org.jboss.teiid.translator.ws""/>
-                <translator name=""salesforce"" module=""org.jboss.teiid.translator.salesforce""/>
-                <translator name=""hive"" module=""org.jboss.teiid.translator.hive""/>
-            </subsystem>             
-        <subsystem xmlns=""urn:jboss:domain:threads:1.1"">
-            <bounded-queue-thread-pool name=""teiid-async"">
-                <max-threads count=""4""/>
-                <queue-length count=""100""/>
-            </bounded-queue-thread-pool>
-        </subsystem>        
-            <subsystem xmlns=""urn:jboss:domain:transactions:1.1"">
-                <core-environment>
-                    <process-id>
-                        <uuid/>
-                    </process-id>
-                </core-environment>
-                <recovery-environment socket-binding=""txn-recovery-environment"" status-socket-binding=""txn-status-manager""/>
-                <coordinator-environment default-timeout=""300""/>
-            </subsystem>
-            <subsystem xmlns=""urn:jboss:domain:web:1.1"" default-virtual-server=""default-host"" native=""false"">
-                <connector name=""http"" protocol=""HTTP/1.1"" scheme=""http"" socket-binding=""http""/>
-                <connector name=""ajp"" protocol=""AJP/1.3"" scheme=""http"" socket-binding=""ajp""/>
-                <virtual-server name=""default-host"" enable-welcome-root=""true"">
-                    <alias name=""localhost""/>
-                    <alias name=""example.com""/>
-                </virtual-server>
-            </subsystem>
-            <subsystem xmlns=""urn:jboss:domain:webservices:1.1"">
-                <modify-wsdl-address>true</modify-wsdl-address>
-                <wsdl-host>${jboss.bind.address:127.0.0.1}</wsdl-host>
-                <endpoint-config name=""Standard-Endpoint-Config""/>
-                <endpoint-config name=""Recording-Endpoint-Config"">
-                    <pre-handler-chain name=""recording-handlers"" protocol-bindings=""##SOAP11_HTTP ##SOAP11_HTTP_MTOM ##SOAP12_HTTP ##SOAP12_HTTP_MTOM"">
-                        <handler name=""RecordingHandler"" class=""org.jboss.ws.common.invocation.RecordingServerHandler""/>
-                    </pre-handler-chain>
-                </endpoint-config>
-            </subsystem>
-            <subsystem xmlns=""urn:jboss:domain:weld:1.0""/>
-        </profile>
-    </profiles>
-    <!--
-      ~ 
-      ~          Named interfaces that can be referenced elsewhere in the configuration. The configuration
-      ~          for how to associate these logical names with an actual network interface can either
-      ~          be specified here or can be declared on a per-host basis in the equivalent element in host.xml.
-      ~ 
-      ~          These default configurations require the binding specification to be done in host.xml.
-      ~     
-      -->
-    <interfaces>
-        <interface name=""management""/>
-        <interface name=""public""/>
-        <interface name=""unsecure""/>
-    </interfaces>
-    <socket-binding-groups>
-        <socket-binding-group name=""ha-sockets"" default-interface=""public"">
-            <!-- Needed for server groups using the 'ha' profile  -->
-            <socket-binding name=""ajp"" port=""8009""/>
-            <socket-binding name=""http"" port=""8080""/>
-            <socket-binding name=""https"" port=""8443""/>
-            <socket-binding name=""jgroups-diagnostics"" port=""0"" multicast-address=""224.0.75.75"" multicast-port=""7500""/>
-            <socket-binding name=""jgroups-mping"" port=""0"" multicast-address=""${jboss.default.multicast.address:230.0.0.4}"" multicast-port=""45700""/>
-            <socket-binding name=""jgroups-tcp"" port=""7600""/>
-            <socket-binding name=""jgroups-tcp-fd"" port=""57600""/>
-            <socket-binding name=""jgroups-udp"" port=""55200"" multicast-address=""${jboss.default.multicast.address:230.0.0.4}"" multicast-port=""45688""/>
-            <socket-binding name=""jgroups-udp-fd"" port=""54200""/>
-            <socket-binding name=""modcluster"" port=""0"" multicast-address=""224.0.1.105"" multicast-port=""23364""/>
-            <socket-binding name=""osgi-http"" interface=""management"" port=""8090""/>
-            <socket-binding name=""remoting"" port=""4447""/>
-            <socket-binding name=""txn-recovery-environment"" port=""4712""/>
-            <socket-binding name=""txn-status-manager"" port=""4713""/>
-            <socket-binding name=""teiid-jdbc"" port=""31000""/>
-            <socket-binding name=""teiid-odbc"" port=""35432""/>             
-            <outbound-socket-binding name=""mail-smtp"">
-                <remote-destination host=""localhost"" port=""25""/>
-            </outbound-socket-binding>
-        </socket-binding-group>
-    </socket-binding-groups>
-    <server-groups>
-        <server-group name=""main-server-group"" profile=""ha"">
-            <jvm name=""default"">
-                <heap size=""1024m"" max-size=""2048m""/>
-            </jvm>
-            <socket-binding-group ref=""ha-sockets""/>
-        </server-group>
-    </server-groups>
-</domain>
\ No newline at end of file",2012-04-11T18:52:57Z,112
"@@ -136,13 +136,13 @@
                         </goals>
                         <configuration>
                             <artifactItems>
-                                <artifactItem>
+                                <!--artifactItem>
                                     <groupId>org.jboss.as</groupId>
                                     <artifactId>jboss-as-dist</artifactId>
                                     <version>${version.org.jboss.as}</version>
                                     <type>zip</type>
                                     <outputDirectory>${project.build.directory}</outputDirectory>
-                                </artifactItem>
+                                </artifactItem-->
                                 <artifactItem>
                                     <groupId>org.jboss.teiid.web-console</groupId>
                                     <artifactId>teiid-console-dist</artifactId>",2016-02-01T18:42:32Z,83
"@@ -104,6 +104,10 @@ public Principal getTargetPrincipal(Principal anotherDomainPrincipal, Map<String
 			public Subject getActiveSubject() {
 				return null;
 			}
+			
+			@Override
+			public void logout(Principal principal, Subject subject) {
+			}
 		};
         
         Mockito.stub(securityContext.getAuthenticationManager()).toReturn(authManager);",2016-02-01T18:42:32Z,18
"@@ -21,7 +21,8 @@
 	    <!-- version.org.jboss.resteasy>2.3.7.Final</version.org.jboss.resteasy--> <!-- BOM 30 upgraded to 2.3.10, but breaks odata https://issues.jboss.org/browse/TEIID-3826  -->
 	    <!-- EAP and IP Bom specific and overrides -->
 	    <version.org.jboss.integration-platform>6.0.0.CR30</version.org.jboss.integration-platform>
-        <version.org.jboss.as>7.5.0.Final-redhat-15</version.org.jboss.as>
+        <!--version.org.jboss.as>7.5.0.Final-redhat-15</version.org.jboss.as-->
+        <version.org.jboss.as>7.5.5.Final-redhat-3</version.org.jboss.as>
         <version.com.google.guava>14.0.1</version.com.google.guava>     <!--  bom 13.0.1 -->
         <version.jaxen>1.1.4</version.jaxen> <!-- NOTE changing to use bom version of 1.1.3 will cause a build issue in teiid-engine -->
         <!--version.commons-codec>1.9</version.commons-codec-->   <!-- bom version of 1.4 -->
@@ -114,7 +115,9 @@
  	    
  	    <!--  Test only dependencies -->
 	    	    
-	    <!-- ?? -->        <version.org.picketbox>4.0.19.SP4-redhat-1</version.org.picketbox>     <!-- bom 4.1.1.Final  will cause jboss-integration to fail -->                  
+	    <!-- ?? -->       
+	    <version.org.picketbox>4.1.2.Final-redhat-1</version.org.picketbox>
+	    <!--4.0.19.SP4-redhat-1</version.org.picketbox-->     <!-- bom 4.1.1.Final  will cause jboss-integration to fail -->                  
 
 	</properties>
 	<scm>",2016-02-01T18:42:32Z,90
"@@ -31,13 +31,15 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
 import javax.script.ScriptException;
 
 import org.teiid.core.util.LRUCache;
+import org.teiid.core.util.StringUtil;
 import org.teiid.query.eval.TeiidScriptEngine;
 import org.teiid.translator.TranslatorException;
 
@@ -134,20 +136,23 @@ public Class<?> getRegisteredClassUsingTableName(String tableName) {
      * @throws Exception
      */
 	public static Object executeSetMethod(Method m, Object api, Object arg) throws Exception {
-        
-    	List<Object> args = new ArrayList<Object>(1);
-    	args.add(arg);
+
+		final Class<?> argType = m.getParameterTypes()[0];
+		Object[] params = new Object[] {arg};
+		if (arg != null && !argType.isAssignableFrom(arg.getClass())) {
+			params = new Object[] {StringUtil.valueOf(arg.toString(), argType)};
+		}
+
     	try {
-    		return m.invoke(api, args.toArray());
+    		return m.invoke(api, params);
     	} catch (java.lang.IllegalArgumentException ia) {
-    		String msg = ""Unable to execute method, invalid argument: (api) "" + api.getClass().getName() + "" (method) "" + m.getName() + "" (methodarg) "" +  m.getParameterTypes().toString() + "" (arg) "" + arg.getClass().getName(); 
-    				//ObjectPlugin.Util.gs(ObjectPlugin.Event.TEIID21000, ""write"", ""table:"" + tableName);
-    		throw new TranslatorException(msg);
+    		
+			throw new TranslatorException(ObjectPlugin.Util.gs(ObjectPlugin.Event.TEIID21016, new Object[] {(arg != null ? arg : ""Null""), m.getName(), api.getClass().getName(), argType.getName() }));
     		
     	}
     } 
     
-    private static Map<String, Method> getWriteMethodMap(Class<?> clazz) throws TranslatorException {
+    public  Map<String, Method> getWriteMethodMap(Class<?> clazz) throws TranslatorException {
     	LinkedHashMap<String, Method> methodMap = new LinkedHashMap<String, Method>();
     	
 		try {
@@ -160,32 +165,24 @@ private static Map<String, Method> getWriteMethodMap(Class<?> clazz) throws Tran
 					if (pd.getWriteMethod() == null || pd instanceof IndexedPropertyDescriptor) {
 						continue;
 					}
-					String name = pd.getName();
-						Method m = pd.getWriteMethod();
-						methodMap.put(name, m);
-					if (name.startsWith(""set"")) {
+//					String name = pd.getName();
+					Method m = pd.getWriteMethod();
+						
+					registerWriteMethod(m, methodMap);
 						
-						String nname = name.substring( 3 );
-						methodMap.put(nname.toLowerCase(), m);
-
-					}
 				}
 			}
 			MethodDescriptor[] mds = info.getMethodDescriptors();
 			if (pds != null) {
 				for (int j = 0; j < mds.length; j++) {
 					MethodDescriptor md = mds[j];
-					if (md.getMethod() == null || md.getMethod().getParameterTypes().length !=1 || (md.getMethod().getReturnType() != Void.class && md.getMethod().getReturnType() != void.class)) {
+								
+					if (md.getMethod() == null ) {
 						continue;
 					}
-					String name = md.getName();
-						Method m = md.getMethod();
-						methodMap.put(name, m);
-					if (name.startsWith(""set"")) {
 					
-						String nname = name.substring( 3 );
-						methodMap.put(nname.toLowerCase(), m);
-					}
+					registerWriteMethod(md.getMethod(), methodMap);
+
 				}
 			}
 
@@ -195,6 +192,20 @@ private static Map<String, Method> getWriteMethodMap(Class<?> clazz) throws Tran
 		return methodMap;
 	}
     
+    private void registerWriteMethod(Method method, LinkedHashMap<String, Method> methodMap) {
+		String name = method.getName();
+		
+		if (! name.startsWith(""set"") || method.getParameterTypes().length !=1 || (method.getReturnType() != Void.class && method.getReturnType() != void.class)) {
+			return;
+		}
+
+		methodMap.put(name, method);
+		
+		String nname = name.substring( 3 );
+		methodMap.put(nname.toLowerCase(), method);
+	
+    }
+    
     public void cleanUp() {
     	registeredClasses.clear();
     	tableNameClassMap.clear();
@@ -203,5 +214,18 @@ public void cleanUp() {
 
     }
 
+    /**
+     * Utility method for debugging to print out the key and methods for a class
+     * @param m
+     */
+    public static void print(Map m) {
+    	Iterator<Object> i = m.keySet().iterator();
+    	while (i.hasNext()) {
+    		Object k = (Object) i.next();
+    		Method v = (Method) m.get(k);
+    		System.out.println(""---- "" + k.toString() + "":"" + v.getName());
+    	}
 
+
+    }
 }",2016-06-24T19:44:32Z,113
"@@ -55,6 +55,7 @@ public static enum Event implements BundleUtil.Event{
 		TEIID21013,
 		TEIID21014,
 		TEIID21015,
+		TEIID21016,
 		TEIID21301,
 		TEIID21302,
 		TEIID21303",2016-06-24T19:44:32Z,114
"@@ -38,9 +38,19 @@
 import org.teiid.core.types.TransformationException;
 import org.teiid.core.util.PropertiesUtils;
 import org.teiid.core.util.StringUtil;
-import org.teiid.language.*;
+import org.teiid.language.BatchedUpdates;
+import org.teiid.language.ColumnReference;
+import org.teiid.language.Command;
+import org.teiid.language.Delete;
+import org.teiid.language.Expression;
+import org.teiid.language.ExpressionValueSource;
+import org.teiid.language.Insert;
+import org.teiid.language.Literal;
+import org.teiid.language.SetClause;
+import org.teiid.language.Update;
 import org.teiid.logging.LogConstants;
 import org.teiid.logging.LogManager;
+import org.teiid.logging.MessageLevel;
 import org.teiid.metadata.Column;
 import org.teiid.metadata.ForeignKey;
 import org.teiid.query.eval.TeiidScriptEngine;
@@ -90,8 +100,19 @@ public void execute() throws TranslatorException {
 
 		int index = 0;
 
-		result = new int[1];
-		this.result[index] = executeUpdate(command, classRegistry);
+		if (command instanceof BatchedUpdates) {
+			BatchedUpdates updates = (BatchedUpdates)this.command;
+			result = new int[updates.getUpdateCommands().size()];
+			for (Command cmd:updates.getUpdateCommands()) {
+				
+				this.result[index++] = executeUpdate(cmd, classRegistry);
+			}		
+			
+		} else {
+			result = new int[1];
+			this.result[index] = executeUpdate(command, classRegistry);
+		}
+	
 	}
 
 	@Override
@@ -130,14 +151,14 @@ private int executeUpdate(Command command, ClassRegistry classRegistry ) throws
 	}
 	
 	private Class<?> getRegisteredClass(ClassRegistry classRegistry, ObjectVisitor visitor) throws TranslatorException {
-		String tname = visitor.getTable().getName();
+		String tname = visitor.getTableName();
 		if (tablename != null && tablename.equals(tname) ) {
 			return clz;
 		}
 		tablename = tname;
 		Class<?> clz = classRegistry.getRegisteredClassUsingTableName(tname);
 		if (clz == null) {
-			throw new TranslatorException(ObjectPlugin.Util.gs(ObjectPlugin.Event.TEIID21005, new Object[] {visitor.getTable().getName()}));
+			throw new TranslatorException(ObjectPlugin.Util.gs(ObjectPlugin.Event.TEIID21005, new Object[] {visitor.getTableName()}));
 		}
 		return clz;
 	}
@@ -151,9 +172,7 @@ private int handleInsert(Insert insert, ObjectVisitor visitor,  Class<?> clz, Ma
 			entity = clz.newInstance();
 		} catch (Exception e) {
 			throw new TranslatorException(e);
-		} 
-
-		NamedTable rootTable = visitor.getTable();
+		}  
 
 		// first determine if the table to be inserted into has a foreign key relationship, which
 		// would then be considered a child table, otherwise it must have a primary key
@@ -168,7 +187,7 @@ private int handleInsert(Insert insert, ObjectVisitor visitor,  Class<?> clz, Ma
 		keyCol = visitor.getPrimaryKeyCol();
 		
 		if (keyCol == null) {
-			throw new TranslatorException(ObjectPlugin.Util.gs(ObjectPlugin.Event.TEIID21006, new Object[] {""insert"", rootTable.getName()}));
+			throw new TranslatorException(ObjectPlugin.Util.gs(ObjectPlugin.Event.TEIID21006, new Object[] {""insert"", visitor.getTableName()}));
 		}
 
 		List<ColumnReference> columns = visitor.getInsert().getColumns();
@@ -224,7 +243,6 @@ private int handleInsertChildObject(ObjectVisitor visitor, Object newEntity, Map
 
 		ForeignKey fk = visitor.getForeignKey();
 
-		NamedTable rootTable = visitor.getTable();
 		String fkeyColNIS = visitor.getForeignKeyNameInSource();
 		
 		List<ColumnReference> columns = visitor.getInsert().getColumns();
@@ -267,7 +285,7 @@ private int handleInsertChildObject(ObjectVisitor visitor, Object newEntity, Map
 				//env.performKeySearch(fkeyColNIS, fkeyValue, connection, executionContext);
 
 		if (rootObject == null) {
-			throw new TranslatorException(ObjectPlugin.Util.gs(ObjectPlugin.Event.TEIID21015, new Object[] {fkeyValue, rootTable.getName()}));
+			throw new TranslatorException(ObjectPlugin.Util.gs(ObjectPlugin.Event.TEIID21015, new Object[] {fkeyValue, visitor.getTableName()}));
 		}
 		Object childrenObjects = this.evaluate(rootObject, fk_nis, connection.getClassRegistry().getReadScriptEngine());
 			
@@ -283,7 +301,7 @@ private int handleInsertChildObject(ObjectVisitor visitor, Object newEntity, Map
 				writeColumnData(rootObject, fk_nis, c, rootwriteMethods);
 
 			} else if (Map.class.isAssignableFrom(childrenObjects.getClass())) {
-				throw new TranslatorException(ObjectPlugin.Util.gs(ObjectPlugin.Event.TEIID21008, new Object[] {rootTable.getName()}));
+				throw new TranslatorException(ObjectPlugin.Util.gs(ObjectPlugin.Event.TEIID21008, new Object[] {visitor.getTableName()}));
 
 			} else if (childrenObjects.getClass().isArray()) {
 				Object[] a = (Object[]) childrenObjects;
@@ -306,9 +324,7 @@ private int handleInsertChildObject(ObjectVisitor visitor, Object newEntity, Map
 
 	// Private method to actually do a delete operation. 
 	private int handleDelete(Delete delete, ObjectVisitor visitor) throws TranslatorException {
-		
-		NamedTable rootTable = visitor.getTable();
-		
+				
 		// if this is the root class (no foreign key), then for each object, obtain
 		// the primary key value and use it to be removed from the cache
 
@@ -321,7 +337,7 @@ private int handleDelete(Delete delete, ObjectVisitor visitor) throws Translator
 		List<Object> toDelete = connection.getSearchType().performSearch(visitor, executionContext) ;
 				//env.search(visitor, connection, executionContext);
 		if (toDelete == null || toDelete.isEmpty()) {
-			LogManager.logWarning(LogConstants.CTX_CONNECTOR, ObjectPlugin.Util.gs(ObjectPlugin.Event.TEIID21013, new Object[] {rootTable.getName(), visitor.getWhereCriteria()}));
+			LogManager.logWarning(LogConstants.CTX_CONNECTOR, ObjectPlugin.Util.gs(ObjectPlugin.Event.TEIID21013, new Object[] {visitor.getTableName(), visitor.getWhereCriteria()}));
 			return 0;
 		}
 		int cnt = 0;
@@ -339,9 +355,9 @@ private int handleDelete(Delete delete, ObjectVisitor visitor) throws Translator
 				Object removed = connection.remove(v);
 				if (removed == null) {
 					if (connection.get(v) == null) {
-						LogManager.logWarning(LogConstants.CTX_CONNECTOR, ObjectPlugin.Util.gs(ObjectPlugin.Event.TEIID21013, new Object[] {rootTable.getName(), v}));
+						LogManager.logWarning(LogConstants.CTX_CONNECTOR, ObjectPlugin.Util.gs(ObjectPlugin.Event.TEIID21013, new Object[] {visitor.getTableName(), v}));
 					} 
-					throw new TranslatorException(ObjectPlugin.Util.gs(ObjectPlugin.Event.TEIID21012, new Object[] {rootTable.getName(), v}));
+					throw new TranslatorException(ObjectPlugin.Util.gs(ObjectPlugin.Event.TEIID21012, new Object[] {visitor.getTableName(), v}));
 						
 				}
 				++cnt;
@@ -422,8 +438,6 @@ private int handleDelete(Delete delete, ObjectVisitor visitor) throws Translator
 
 	// Private method to actually do an update operation. 
 	private int handleUpdate(Update update, ObjectVisitor visitor, ClassRegistry classRegistry, Map<String, Method> writeMethods) throws TranslatorException {
-		NamedTable rootTable = visitor.getTable();
-		
 		// Find all the objects that meet the criteria for updating
 		List<Object> toUpdate = connection.getSearchType().performSearch(visitor, executionContext) ;
 				//env.search(visitor, connection, executionContext);
@@ -458,7 +472,7 @@ private int handleUpdate(Update update, ObjectVisitor visitor, ClassRegistry cla
 					Object value = sc.getValue();
 					
 					if ( keyCol.getName().equals(column.getName()) ) {
-						throw new TranslatorException(ObjectPlugin.Util.gs(ObjectPlugin.Event.TEIID21009, new Object[] {keyCol.getName(),rootTable.getName()}));						
+						throw new TranslatorException(ObjectPlugin.Util.gs(ObjectPlugin.Event.TEIID21009, new Object[] {keyCol.getName(),visitor.getTableName()}));						
 					}
 					
 					if (value instanceof Literal) {
@@ -533,6 +547,17 @@ private void writeColumnData(Object entity, String nameInSource, Object value, M
 
 			Method m = writeMethods.get(nameInSource);
 			if (m == null) {
+				m = writeMethods.get(nameInSource.toLowerCase());
+
+			}
+
+			if (m == null) {
+				if (LogManager.isMessageToBeRecorded(LogConstants.CTX_CONNECTOR, MessageLevel.TRACE)) {
+					LogManager.logTrace(LogConstants.CTX_CONNECTOR,
+							""ObjectUpdateExecution API name :"",entity.getClass().getName()); //$NON-NLS-1$ //$NON-NLS-2$
+					ClassRegistry.print(writeMethods);
+				}
+				
 				throw new TranslatorException(ObjectPlugin.Util.gs(ObjectPlugin.Event.TEIID21010, new Object[] {entity.getClass().getSimpleName(), nameInSource}));
 
 			}",2016-06-24T19:44:32Z,115
"@@ -24,6 +24,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import org.teiid.core.util.StringUtil;
 import org.teiid.language.AndOr;
 import org.teiid.language.BaseLanguageObject;
 import org.teiid.language.ColumnReference;
@@ -64,6 +65,7 @@ public class ObjectVisitor extends HierarchyVisitor {
 
 	
 	private NamedTable table;
+	private String tableName;
 	
 	// will be non-null only when a child table is being processed
 	private String rootTableName = null;
@@ -106,9 +108,20 @@ public List<TranslatorException> getExceptions() {
 	public void addException(TranslatorException e) {
 		exceptions.add(e);
 	}
-
-	public NamedTable getTable() {
-		return table;
+	
+	private void setTable(NamedTable t) {
+		String tn = t.getName();
+		// remove any folders that exist within the model (these are not folders that the models rsides in).
+		if (tn.contains(""."")) {
+			tn = StringUtil.getLastToken(tn, ""."");
+		}
+		
+		this.tableName=tn;
+		this.table = t;
+	}
+		
+	public String getTableName() {
+		return this.tableName;
 	}
 	
 	/**
@@ -157,7 +170,7 @@ public void visit(DerivedColumn obj) {
 	@Override
 	public void visit(NamedTable obj) {
 		super.visit(obj);
-		this.table = obj;
+		this.setTable(obj);
 		
 			if (obj.getMetadataObject().getPrimaryKey() != null) {
 				this.pkkeyCol = table.getMetadataObject().getPrimaryKey()",2016-06-24T19:44:32Z,3
"@@ -33,13 +33,14 @@ TEIID21006=Unable to perform {0}, no Primary or Foreign Key defined for table {1
 TEIID21007=Unable to insert duplicate into table {0} with key value {1}
 TEIID21008=Table {0} has defined a container class of type Maps, which is not currently supported
 TEIID21009=Updating primary key column {0} in table {1} is not supported, use delete and insert.
-TEIID21010=Did not find a corresponding write method on entity {0} with NameInSource {1}
+TEIID21010=Did not find a corresponding write method on entity {0} with name {1}
 TEIID21011=Updates are disabled, no Primary key defined for cache {0} 
 
 TEIID21012=Processing error: Unable to delete the object in table {0} with key {1}
 TEIID21013=ObjectUpdateExecution: Warning - The object does not exist when trying to delete from table {0} with key {1}
 TEIID21014=ObjectUpdateException: Delete ALL is not supported, must pass in criteria for what is to be deleted
 TEIID21015=Unable to insert child object, root object key {0} from table {1} couldn't be found
+TEIID21016=ObjectUpdateException: Invalid argument value ""{0}"" when executing (method) {1} on (api) {2} of (argType) {3}
 
 
 TEIID21301=Materialization Life Cycle Issue: invalid arguments on native query ""{0}"", should use format: ""{1}"" ",2016-06-24T19:44:32Z,116
"@@ -84,6 +84,30 @@ public void testInsertRootClass() throws Exception {
 	
 	}
 	
+	@Test
+	public void testInsertUsingFolders() throws Exception {
+		// check the object doesn't exist before inserting
+		Object o = CONNECTION.get(new Long(99).longValue());
+		assertNull(o);
+		
+		Command command = translationUtility
+				.parseCommand(""Insert into Trade_Mat.Trade_Mat.Trade (tradeId, TradeName, settled) VALUES (99, 'TestName', 'true')"");
+
+		// no search required by the UpdateExecution logic
+		@SuppressWarnings(""unchecked"")
+		ObjectUpdateExecution ie = createExecution(command, Collections.EMPTY_LIST);
+
+		ie.execute();
+
+		Trade p = (Trade) CONNECTION.get((new Long(99).longValue()));
+
+		assertNotNull(p);
+		assertTrue(p.getName().equals(""TestName""));
+		assertTrue(p.getTradeId() == 99);
+		assertTrue(p.isSettled());
+	
+	}
+	
 	@Test
 	public void testInsertChildClass() throws Exception {
 		CONNECTION = TradesCacheSource.createConnection();
@@ -100,7 +124,7 @@ private void insertChildClass() throws Exception {
 		assertNotNull(CONNECTION.get((new Long(2).longValue())));
 
 		Command command = translationUtility
-				.parseCommand(""Insert into Leg (tradeID, notational, Name) VALUES (2, 3.456, 'legName 2a')"");
+				.parseCommand(""Insert into Trade_Object.Leg (tradeID, notational, Name) VALUES (2, 3.456, 'legName 2a')"");
 
 		// no search required by the UpdateExecution logic
 		@SuppressWarnings(""unchecked"")
@@ -128,7 +152,7 @@ public void testUpdateRootClass() throws Exception {
 		assertNotNull(o);
 		
 		Command command = translationUtility
-				.parseCommand(""Update Trade  SET TradeName='Person 2 Changed', settled='true' WHERE TradeId=2"");
+				.parseCommand(""Update Trade_Object.Trade  SET TradeName='Person 2 Changed', settled='true' WHERE TradeId=2"");
 
 		// no search required by the UpdateExecution logic
 		List<Object> rows = new ArrayList<Object>();
@@ -153,7 +177,7 @@ public void testDeleteRootByKey() throws Exception {
 		assertNotNull(o);
 
 		Command command = translationUtility
-				.parseCommand(""Delete From Trade Where tradeId = 1"");
+				.parseCommand(""Delete From Trade_Object.Trade Where tradeId = 1"");
 
 		List<Object> rows = new ArrayList<Object>();
 		rows.add(o);",2016-06-24T19:44:32Z,117
"@@ -22,6 +22,7 @@
 package org.teiid.translator.object;
 
 import org.junit.Before;
+import org.junit.Test;
 import org.teiid.language.Select;
 import org.teiid.translator.ExecutionContext;
 import org.teiid.translator.TranslatorException;
@@ -54,4 +55,10 @@ protected ObjectExecution createExecution(Select command) throws TranslatorExcep
 	}
 	
 
+	@Test public void testQueryGetAllTrades() throws Exception {						
+		Select command = (Select)VDBUtility.TRANSLATION_UTILITY.parseCommand(""select * From Trade_Mat.Trade_Mat.Trade as T""); //$NON-NLS-1$
+		
+	
+		performTest(command, 3, 5);
+	}	
 }",2016-06-24T19:44:32Z,21
"@@ -22,6 +22,7 @@
 package org.teiid.translator.object;
 
 import org.junit.Before;
+import org.junit.Test;
 import org.teiid.language.Select;
 import org.teiid.translator.ExecutionContext;
 import org.teiid.translator.TranslatorException;
@@ -54,4 +55,10 @@ protected ObjectExecution createExecution(Select command) throws TranslatorExcep
 	}
 	
 
+	@Test public void testQueryGetAllTrades() throws Exception {						
+		Select command = (Select)VDBUtility.TRANSLATION_UTILITY.parseCommand(""select * From Trade_Mat.Trade_Mat.Trade as T""); //$NON-NLS-1$
+		
+	
+		performTest(command, 3, 5);
+	}	
 }",2016-06-24T19:44:32Z,118
"@@ -0,0 +1,581 @@
+<?xml version=""1.0"" encoding=""ASCII""?>
+<xmi:XMI xmi:version=""2.0"" xmlns:xmi=""http://www.omg.org/XMI"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:diagram=""http://www.metamatrix.com/metamodels/Diagram"" xmlns:mmcore=""http://www.metamatrix.com/metamodels/Core"" xmlns:relational=""http://www.metamatrix.com/metamodels/Relational"">
+  <mmcore:ModelAnnotation xmi:uuid=""mmuuid:5f4d3ef6-026c-4a33-adea-fbf0eda391e7"" primaryMetamodelUri=""http://www.metamatrix.com/metamodels/Relational"" modelType=""PHYSICAL"" ProducerName=""Teiid Designer"" ProducerVersion=""10.0.1.Nightly-v20160622-1945-B8"">
+    <modelImports xmi:uuid=""mmuuid:7f5cf45f-2fe8-41b6-805b-39f26c5f43ad"" name=""SimpleDatatypes-instance"" modelLocation=""http://www.metamatrix.com/metamodels/SimpleDatatypes-instance"" modelType=""TYPE"" primaryMetamodelUri=""http://www.eclipse.org/xsd/2002/XSD""/>
+    <modelImports xmi:uuid=""mmuuid:ae44979e-0fda-4ea5-b499-53d6ff652f11"" name=""XMLSchema"" modelLocation=""http://www.w3.org/2001/XMLSchema"" modelType=""TYPE"" primaryMetamodelUri=""http://www.eclipse.org/xsd/2002/XSD""/>
+  </mmcore:ModelAnnotation>
+  <mmcore:AnnotationContainer xmi:uuid=""mmuuid:db84df50-0cde-4f7c-b70b-ba9f244886de"">
+    <annotations xmi:uuid=""mmuuid:3c743f95-fad6-4450-9496-d472ccd63b37"" annotatedObject=""mmuuid/5f4d3ef6-026c-4a33-adea-fbf0eda391e7"">
+      <tags xmi:uuid=""mmuuid:bd4967a5-064d-4ff5-af57-7a07fc1fb6c9"" key=""modelExtensionDefinition:relational"" value=""relational""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:8d7033f4-45f2-4153-9e1e-69844ccc83a0"" annotatedObject=""mmuuid/bd4967a5-064d-4ff5-af57-7a07fc1fb6c9"">
+      <tags xmi:uuid=""mmuuid:421e0f8b-0301-4b11-a9ad-fa496eb4c4bb"" key=""metamodel"" value=""http://www.metamatrix.com/metamodels/Relational""/>
+      <tags xmi:uuid=""mmuuid:412e8020-cba6-4724-81a0-291aec2d7806"" key=""namespacePrefix"" value=""relational""/>
+      <tags xmi:uuid=""mmuuid:5d199f6e-1b58-4467-bce4-a90c01dd5bb7"" key=""namespaceUri"" value=""http://www.teiid.org/ext/relational/2012""/>
+      <tags xmi:uuid=""mmuuid:737b28ea-3f0a-4a7c-83d8-cecb2f8a7546"" key=""version"" value=""7""/>
+      <tags xmi:uuid=""mmuuid:02049f15-ed64-4399-a492-d58fc791c292"" key=""description"" value=""Relational metamodel extension properties""/>
+      <tags xmi:uuid=""mmuuid:a658debb-e651-4297-a24a-7396ea952396"" key=""modelTypes"" value=""""/>
+      <tags xmi:uuid=""mmuuid:929cfd43-3d77-4988-8692-2fcf093894f7"" key=""extendedMetaclass:org.teiid.designer.metamodels.relational.impl.ProcedureImpl"" value=""org.teiid.designer.metamodels.relational.impl.ProcedureImpl""/>
+      <tags xmi:uuid=""mmuuid:1d1441c0-0d75-4049-86c8-923325f0841d"" key=""extendedMetaclass:org.teiid.designer.metamodels.relational.impl.BaseTableImpl"" value=""org.teiid.designer.metamodels.relational.impl.BaseTableImpl""/>
+      <tags xmi:uuid=""mmuuid:459b7df0-6c0d-4d12-bfdf-ad53509c8507"" key=""extendedMetaclass:org.teiid.designer.metamodels.relational.impl.ForeignKeyImpl"" value=""org.teiid.designer.metamodels.relational.impl.ForeignKeyImpl""/>
+      <tags xmi:uuid=""mmuuid:9c24b20b-56c4-4af7-8af4-28234ab3f90c"" key=""extendedMetaclass:org.teiid.designer.metamodels.relational.impl.ProcedureParameterImpl"" value=""org.teiid.designer.metamodels.relational.impl.ProcedureParameterImpl""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:d98c826b-b40c-4f53-93b7-3d0c08514302"" annotatedObject=""mmuuid/a658debb-e651-4297-a24a-7396ea952396"">
+      <tags xmi:uuid=""mmuuid:17bab860-e073-40a6-8a47-586e6a7e7693"" key=""PHYSICAL"" value=""""/>
+      <tags xmi:uuid=""mmuuid:c17649ca-fbd9-459f-81cf-4c009d4bec7e"" key=""VIRTUAL"" value=""""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:d760a9b2-942d-4649-8a46-a117aae9b052"" annotatedObject=""mmuuid/929cfd43-3d77-4988-8692-2fcf093894f7"">
+      <tags xmi:uuid=""mmuuid:d51017e8-24d1-4e75-820a-ea2cecc59c73"" key=""propertyDefinition:deterministic"" value=""deterministic""/>
+      <tags xmi:uuid=""mmuuid:bfd5669e-feac-44ec-ac3b-ee35fd60a91e"" key=""propertyDefinition:native-query"" value=""native-query""/>
+      <tags xmi:uuid=""mmuuid:8ca161ce-5f68-4a16-94e6-7f5399cf0b11"" key=""propertyDefinition:non-prepared"" value=""non-prepared""/>
+      <tags xmi:uuid=""mmuuid:00a68e28-f1fb-40c3-8072-64a5341beabd"" key=""propertyDefinition:aggregate"" value=""aggregate""/>
+      <tags xmi:uuid=""mmuuid:fc7930ee-3d68-45d0-96ce-8a9aa4c8b15b"" key=""propertyDefinition:analytic"" value=""analytic""/>
+      <tags xmi:uuid=""mmuuid:d20b9f5b-a6a0-44d5-bfed-45b36179fcb1"" key=""propertyDefinition:allows-orderby"" value=""allows-orderby""/>
+      <tags xmi:uuid=""mmuuid:2393f874-e374-4f5e-880d-bcda1ff9679c"" key=""propertyDefinition:uses-distinct-rows"" value=""uses-distinct-rows""/>
+      <tags xmi:uuid=""mmuuid:d7b90eb7-18c1-41de-b1f5-65cd7923b676"" key=""propertyDefinition:allows-distinct"" value=""allows-distinct""/>
+      <tags xmi:uuid=""mmuuid:431c0fcc-d3c3-4131-8300-c24ac7348b1d"" key=""propertyDefinition:decomposable"" value=""decomposable""/>
+      <tags xmi:uuid=""mmuuid:229857e2-4b73-484a-9d03-7a6710699e9e"" key=""propertyDefinition:varargs"" value=""varargs""/>
+      <tags xmi:uuid=""mmuuid:2832458c-4235-4e9b-9883-0f913c776779"" key=""propertyDefinition:null-on-null"" value=""null-on-null""/>
+      <tags xmi:uuid=""mmuuid:25c5440e-8385-4681-8a29-d79fb6a4df5d"" key=""propertyDefinition:function-category"" value=""function-category""/>
+      <tags xmi:uuid=""mmuuid:6d5eef39-4ade-4b5b-8fd5-778d2daacddc"" key=""propertyDefinition:java-class"" value=""java-class""/>
+      <tags xmi:uuid=""mmuuid:47d61a3a-c48e-4670-a7e2-656a25fce712"" key=""propertyDefinition:java-method"" value=""java-method""/>
+      <tags xmi:uuid=""mmuuid:e8ba1b72-362c-4be1-9c33-7c6f449c064d"" key=""propertyDefinition:udfJarPath"" value=""udfJarPath""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:e865aff8-2598-4c92-bbcf-413c3fdd4d2a"" annotatedObject=""mmuuid/d51017e8-24d1-4e75-820a-ea2cecc59c73"">
+      <tags xmi:uuid=""mmuuid:08fd4aa7-7f47-4dd8-b569-6f83cb5e52f6"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:7916cf60-df40-4c5a-aa53-4afd79289fac"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:726ef287-660a-4188-ad3a-afa3c8752c0a"" key=""defaultValue"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:65c8f423-7317-434f-8114-c8d214b7e207"" key=""description"" value=""""/>
+      <tags xmi:uuid=""mmuuid:8b3bc5d2-9799-45c4-94e6-866706fa2f8b"" key=""id"" value=""deterministic""/>
+      <tags xmi:uuid=""mmuuid:f18695d3-10b3-4606-98c5-36bbc434388a"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:ecdd9147-546f-467c-97e1-80e0575e5c2c"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:16fd3968-77ce-4f88-bc1e-ead07696778c"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:122744ab-b910-40dc-b0d3-b7a69744f84d"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:2d37771f-bca0-4e0b-8813-45265e526420"" key=""runtimeType"" value=""boolean""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:ceff43f6-b1fb-4ad2-8cca-aa1613d8bc63"" annotatedObject=""mmuuid/7916cf60-df40-4c5a-aa53-4afd79289fac"">
+      <tags xmi:uuid=""mmuuid:812183e9-72cf-4315-8aeb-43550c54cbd3"" key=""en"" value=""Deterministic""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:4cea85fc-311d-49db-8bbd-c769a024cbf2"" annotatedObject=""mmuuid/65c8f423-7317-434f-8114-c8d214b7e207"">
+      <tags xmi:uuid=""mmuuid:fccb39d3-e455-4021-afeb-3de0c0e9948c"" key=""en"" value=""Specifies that the source function will always return the same result for a specific input value""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:90063567-f5ad-4b45-951c-c0d4182a4b8c"" annotatedObject=""mmuuid/bfd5669e-feac-44ec-ac3b-ee35fd60a91e"">
+      <tags xmi:uuid=""mmuuid:227536ed-ec0f-44fd-99ed-7f462f52b302"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:8fd8b6ad-8099-4a25-a2b7-4455a4ac44b9"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:8835a9b0-dd7b-4483-bbb8-f9e6751d6d07"" key=""id"" value=""native-query""/>
+      <tags xmi:uuid=""mmuuid:9eaadaf6-f70a-45d0-bdd9-4688520f4889"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:2b890026-d42e-46a0-9f7f-22b66ea5128f"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:cc711435-bc2e-4bcd-a157-adb80a03eb52"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:905ada34-c800-4c06-b318-ecaa49872cba"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:065e324e-7ed0-46b1-9bbf-1cf50a2ffb0d"" key=""runtimeType"" value=""string""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:8d86c7a3-be1d-40cf-abad-d2550eb0656a"" annotatedObject=""mmuuid/8fd8b6ad-8099-4a25-a2b7-4455a4ac44b9"">
+      <tags xmi:uuid=""mmuuid:11dcf537-6a67-4a6e-929f-61732a86f209"" key=""en"" value=""Native Query""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:76795de2-3925-4e3d-a84d-f812d742cea2"" annotatedObject=""mmuuid/8ca161ce-5f68-4a16-94e6-7f5399cf0b11"">
+      <tags xmi:uuid=""mmuuid:8293325a-3477-419c-a032-524870d0ef4e"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:21bbf8db-d355-4948-8680-f6bf35c18ba1"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:e2f13a97-a05a-4610-85c1-c3c3ead09bc9"" key=""defaultValue"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:5b884730-3b25-41ed-9012-ce9c21ad63e1"" key=""id"" value=""non-prepared""/>
+      <tags xmi:uuid=""mmuuid:8c419246-4e90-4293-8c89-d9a548ed06cf"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:abb55d2a-528c-45ec-a77d-a31609c6e027"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:67896adb-ca98-44e4-b486-804546149528"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:838ee42d-b310-4fa9-a1d7-740fd77b6d6a"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:ccddfb5f-d238-4b65-b11e-583371587ca8"" key=""runtimeType"" value=""boolean""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:a05e8951-6b8d-426c-b6f7-a32892b90508"" annotatedObject=""mmuuid/21bbf8db-d355-4948-8680-f6bf35c18ba1"">
+      <tags xmi:uuid=""mmuuid:fcb33a9d-ae76-4e1a-88cf-2dca25839c05"" key=""en"" value=""Non-Prepared""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:e81ab865-e331-403b-9dc5-6305251562fd"" annotatedObject=""mmuuid/00a68e28-f1fb-40c3-8072-64a5341beabd"">
+      <tags xmi:uuid=""mmuuid:60c66fb7-9cbf-4598-8dd0-5a9e9184ef91"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:e7fdd62e-fcee-4075-b55d-cb8a1b620bf9"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:43681154-fe84-4d1a-a040-83d50768d103"" key=""defaultValue"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:a98f62fb-3b0a-487c-8edf-6a92b83e35be"" key=""id"" value=""aggregate""/>
+      <tags xmi:uuid=""mmuuid:04fb17b6-6805-4a7a-aade-40139c3aa62e"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:c949f55f-4529-4c0f-8a6f-b18c404b53a8"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:b94bbd43-c82f-4b83-b1f2-7341be84b7d2"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:c00e449a-ee51-408c-ac9c-3ebcb350a8a4"" key=""required"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:1ec33796-75bf-4014-9136-60681152dd52"" key=""runtimeType"" value=""boolean""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:007a30a1-6c65-445d-86e4-88eb2641841d"" annotatedObject=""mmuuid/e7fdd62e-fcee-4075-b55d-cb8a1b620bf9"">
+      <tags xmi:uuid=""mmuuid:1fa09d45-5d02-451f-afc4-cd8644a592d2"" key=""en"" value=""Aggregate""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:56aa56b3-7413-41f0-b50c-b63f366e5051"" annotatedObject=""mmuuid/fc7930ee-3d68-45d0-96ce-8a9aa4c8b15b"">
+      <tags xmi:uuid=""mmuuid:6ab861cd-762c-4794-b285-a70a963fb168"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:a3e45a9f-35d7-4f1b-9211-6fd0da7ded88"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:4bdd8b26-d23d-4dfb-bb39-d4c9df539d51"" key=""defaultValue"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:628893c9-ce27-4cb0-9a66-6f4fc242395f"" key=""id"" value=""analytic""/>
+      <tags xmi:uuid=""mmuuid:db27b53b-b6ee-49a1-880e-cc37b0f52560"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:e1cd9e6a-6935-4aa0-804a-de2117f8cb57"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:9674be9d-0ed2-4c17-a362-be43f60a0fa3"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:9dcf04b9-ea79-4673-a01c-210bfa2a9702"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:0771f14c-82fd-4fd1-874e-34a35b3fcd32"" key=""runtimeType"" value=""boolean""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:2bb4f60e-4b81-4ec4-9d87-b6a636f163a7"" annotatedObject=""mmuuid/a3e45a9f-35d7-4f1b-9211-6fd0da7ded88"">
+      <tags xmi:uuid=""mmuuid:40b6fecf-55db-449c-95a1-0a4a527c9304"" key=""en"" value=""Analytic""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:20be40f1-3ba6-47da-9341-5dddf86b2e6e"" annotatedObject=""mmuuid/d20b9f5b-a6a0-44d5-bfed-45b36179fcb1"">
+      <tags xmi:uuid=""mmuuid:7769b739-2063-48a8-b078-ef19419e04f5"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:0af24ea0-6e43-4ec1-a3a6-d3eafb10cfd2"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:4146b1d5-0ebb-4d00-b1bd-7a31906582c9"" key=""defaultValue"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:01cadbcc-e0d8-407f-ac34-7112b3028195"" key=""id"" value=""allows-orderby""/>
+      <tags xmi:uuid=""mmuuid:88239833-2698-4fd9-b590-5729c531784f"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:0039a2ff-9e9d-4696-b750-723bd027834a"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:1fb0cc6d-cf9a-4940-87a2-b19863050dd9"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:45173af8-22f7-483b-baa5-2a47975bba56"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:e1cfddf4-b71c-494c-9024-3ba372e8935f"" key=""runtimeType"" value=""boolean""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:4f960c0e-4d88-411c-8441-5fc930984fab"" annotatedObject=""mmuuid/0af24ea0-6e43-4ec1-a3a6-d3eafb10cfd2"">
+      <tags xmi:uuid=""mmuuid:410ac01c-8e76-4fc3-bcdb-06aa8bd12ba3"" key=""en"" value=""Allows Order-by""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:b294c4d7-e2c3-4edf-8a19-a548e9c2a8d5"" annotatedObject=""mmuuid/2393f874-e374-4f5e-880d-bcda1ff9679c"">
+      <tags xmi:uuid=""mmuuid:e564c1b9-1024-4634-87f5-2daccd6dc69b"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:fb23649e-0249-46b2-a111-a42e83cd3f61"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:9cffa23c-232d-4134-b4f4-ef58effc5294"" key=""defaultValue"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:59dd1ff8-2223-49d6-8ba2-c2fd2919a06c"" key=""id"" value=""uses-distinct-rows""/>
+      <tags xmi:uuid=""mmuuid:d62d962d-bb32-42f0-931b-554ca7b9d9d8"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:37c32c49-15ac-401f-ad04-fb7191e807cb"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:0b68a148-406e-4ed8-b4c0-6a5ea893fee6"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:f9703efa-6a74-49f2-bb4f-b4d5c80b8393"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:1eb7137e-2782-4896-b800-a9e141f7928e"" key=""runtimeType"" value=""boolean""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:cea38110-9d29-41f3-8c5e-75891c2ce5be"" annotatedObject=""mmuuid/fb23649e-0249-46b2-a111-a42e83cd3f61"">
+      <tags xmi:uuid=""mmuuid:02cd8474-bf4f-4821-82f5-8c05e6893c41"" key=""en"" value=""Uses Distinct Rows""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:2038ffa9-a5da-477e-97ae-c049a57bd886"" annotatedObject=""mmuuid/d7b90eb7-18c1-41de-b1f5-65cd7923b676"">
+      <tags xmi:uuid=""mmuuid:f5a3cf65-f3a7-47df-8ed5-20bee8537f44"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:5a4d51ad-95ac-4cc2-8c36-bea2d19aa356"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:0e686305-f8fe-4c6d-a8be-177dcbc791ec"" key=""defaultValue"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:54188415-e96b-4990-a731-276e0c84eb4c"" key=""id"" value=""allows-distinct""/>
+      <tags xmi:uuid=""mmuuid:310b926b-07a7-426f-899a-e559a632ca02"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:a2ab11c9-1f3c-40fd-af6a-958eb447bb99"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:0c7859f1-f396-4877-b484-1756348ba37a"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:72a44f5d-c478-401e-92b9-c02a0d95d35d"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:62ce4656-3fa1-49ae-b04a-fe996aa193d9"" key=""runtimeType"" value=""boolean""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:dc930103-dcf8-49b6-8e1e-2c978f3db4b4"" annotatedObject=""mmuuid/5a4d51ad-95ac-4cc2-8c36-bea2d19aa356"">
+      <tags xmi:uuid=""mmuuid:cfbcefba-df89-43af-86d8-1ef96823d4b1"" key=""en"" value=""Allows Distinct""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:81a37685-9318-4ec2-9d58-c9102ff86ab2"" annotatedObject=""mmuuid/431c0fcc-d3c3-4131-8300-c24ac7348b1d"">
+      <tags xmi:uuid=""mmuuid:4859b4f6-1108-4550-94ce-ed654cad1477"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:da811371-41af-48e6-a48e-1550ef2e06f3"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:eac0a8fe-34f2-4a71-b323-0c9789114427"" key=""defaultValue"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:bcb9e2fe-229c-4d51-8a20-f0ea2fead4d1"" key=""id"" value=""decomposable""/>
+      <tags xmi:uuid=""mmuuid:40637ad2-d3bd-425e-b6d9-7f963aa1749b"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:0372c8f3-6c96-4a25-8651-d1e23b39f4ea"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:b34ece08-5877-44cd-9129-f87eb9367120"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:22564580-3a49-4d58-bddb-e622aed9a73e"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:e1fdc5e8-cc15-4a7b-a7f2-7ac4eb239898"" key=""runtimeType"" value=""boolean""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:ca83a9b6-7227-49e9-b9fb-a9ac10dd1677"" annotatedObject=""mmuuid/da811371-41af-48e6-a48e-1550ef2e06f3"">
+      <tags xmi:uuid=""mmuuid:da1ead5c-49eb-4485-9a11-26d46c643239"" key=""en"" value=""Decomposable""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:f0bc02d2-9e93-48c5-9a24-ff7824294989"" annotatedObject=""mmuuid/229857e2-4b73-484a-9d03-7a6710699e9e"">
+      <tags xmi:uuid=""mmuuid:d36118eb-441b-4b6d-b9fd-e82bcab11acb"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:d47d9eae-bb22-4a0f-93f6-8272106560e7"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:65af23e6-e46f-40c4-9001-e1d780df1058"" key=""defaultValue"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:db59e471-82c1-4474-8782-ea1540498b8e"" key=""description"" value=""""/>
+      <tags xmi:uuid=""mmuuid:ed832ae1-80ac-4229-9250-ae40085d6f02"" key=""id"" value=""varargs""/>
+      <tags xmi:uuid=""mmuuid:3c62ab5c-1f7f-4370-8216-817367b88b6e"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:333f15df-9280-4676-8ef6-3d8c2aa64812"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:19a45c53-a492-4ccf-9080-0c82121a186b"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:ea55e867-c4de-4717-a5c2-df81eb69476f"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:3f39920b-82a0-4e58-932a-fd7301d564b0"" key=""runtimeType"" value=""boolean""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:bd3c8572-b6aa-459e-a7c2-6a008bc041c6"" annotatedObject=""mmuuid/d47d9eae-bb22-4a0f-93f6-8272106560e7"">
+      <tags xmi:uuid=""mmuuid:239eddd9-7c9e-4153-8198-e2709278f4f8"" key=""en_US"" value=""Variable Arguments""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:901a52f0-1d55-4da6-95c5-f473f5ad072d"" annotatedObject=""mmuuid/db59e471-82c1-4474-8782-ea1540498b8e"">
+      <tags xmi:uuid=""mmuuid:0a2cb4bf-3372-411b-bf93-00e1361f2dcc"" key=""en_US"" value=""Indicates that the last arg may be repeated a variable number of times.""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:3ededfc8-39ee-4ac8-ba40-d116402588f8"" annotatedObject=""mmuuid/2832458c-4235-4e9b-9883-0f913c776779"">
+      <tags xmi:uuid=""mmuuid:1d3ad876-a3e9-484d-936f-0ca162f60f62"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:5ff183c1-4ed2-4035-889c-997612de667b"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:618a69dd-9cfe-468a-aeb2-e9295efdc990"" key=""defaultValue"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:4f628ab9-ef26-4a39-afbf-4d3cc6128251"" key=""description"" value=""""/>
+      <tags xmi:uuid=""mmuuid:f288d03a-1860-4707-80df-9cc2e0c94f5f"" key=""id"" value=""null-on-null""/>
+      <tags xmi:uuid=""mmuuid:b7f9a049-bb26-484a-b242-74e96004ce65"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:f04b2bc9-f5dc-41ac-a115-d0a1c20afd33"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:8df90513-e208-4f4f-b5ee-64b570619f10"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:d4ab0369-b13b-42a6-bc8d-6371ac1592f5"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:a0fe4bcb-4077-4ffa-b0c1-98e9a7a512ca"" key=""runtimeType"" value=""boolean""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:a6835678-9112-41aa-80ed-8f6003a3f3e5"" annotatedObject=""mmuuid/5ff183c1-4ed2-4035-889c-997612de667b"">
+      <tags xmi:uuid=""mmuuid:177b75ec-4d41-4fae-964c-a40a9f135918"" key=""en_US"" value=""Returns null on null""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:47930cca-9c5c-40f5-ba1c-674d88a3af88"" annotatedObject=""mmuuid/4f628ab9-ef26-4a39-afbf-4d3cc6128251"">
+      <tags xmi:uuid=""mmuuid:5bbc430f-78d9-4ae2-93b4-48d9880d866f"" key=""en_US"" value=""indicates that the function will return null.""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:39eefe9a-b597-4032-a2f7-cfdb9942c9ca"" annotatedObject=""mmuuid/25c5440e-8385-4681-8a29-d79fb6a4df5d"">
+      <tags xmi:uuid=""mmuuid:98249be8-9d1d-4a6d-8903-f771b6774581"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:216dd7cd-75e7-4cb7-ad42-28fda2da6479"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:dc6a372b-7a60-420c-8266-034987f602b8"" key=""description"" value=""""/>
+      <tags xmi:uuid=""mmuuid:a834fe37-119e-4293-8ca5-0842f44c2965"" key=""id"" value=""function-category""/>
+      <tags xmi:uuid=""mmuuid:1c3d195e-c038-421c-b95d-6171a1bacff4"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:76189607-9918-4290-be5a-e08c0ffc02e7"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:6eb93181-5763-41c8-b915-e23afd8e0d26"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:7612a5ac-ff13-4af2-868f-cbaaae3c23a3"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:c0f5787b-2737-4bb3-b2b5-3714c927e050"" key=""runtimeType"" value=""string""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:bffcd9a0-5bdd-4b62-a1e7-43ed5eccf38c"" annotatedObject=""mmuuid/216dd7cd-75e7-4cb7-ad42-28fda2da6479"">
+      <tags xmi:uuid=""mmuuid:5aabc69c-7284-4bbd-90d6-f1484f358d99"" key=""en_US"" value=""Function Category""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:9a434e7d-8fb8-4d73-b636-893c755faf56"" annotatedObject=""mmuuid/dc6a372b-7a60-420c-8266-034987f602b8"">
+      <tags xmi:uuid=""mmuuid:621043e4-f349-4539-9869-8b544cbdd309"" key=""en_US"" value=""The category for function procedures""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:100779ad-acf8-4d59-ab06-68f0b19ea76b"" annotatedObject=""mmuuid/6d5eef39-4ade-4b5b-8fd5-778d2daacddc"">
+      <tags xmi:uuid=""mmuuid:05a51fee-eb24-4bf5-9b34-5556ac118210"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:b46a8a16-487e-4ec9-ad95-23f596fbe83b"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:f325248e-abae-426d-becf-eb3e9f28819e"" key=""description"" value=""""/>
+      <tags xmi:uuid=""mmuuid:a7434131-a841-4a86-b98e-b3d0690f4c63"" key=""id"" value=""java-class""/>
+      <tags xmi:uuid=""mmuuid:9513e7ec-084f-4f47-9655-82b40a77a974"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:fe6e70d6-2077-41f9-877f-9dcf489ec3fe"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:c1cdea84-6736-4f89-8866-22db9a9be706"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:5788caba-b15a-4238-b6d7-2c9cf33e67a3"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:ca11b6ac-686b-4901-abe7-b6b2b9171dc5"" key=""runtimeType"" value=""string""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:2350c9ff-ba60-4057-a365-3efc828323ba"" annotatedObject=""mmuuid/b46a8a16-487e-4ec9-ad95-23f596fbe83b"">
+      <tags xmi:uuid=""mmuuid:646a303f-5330-44d5-8210-81d3ccc85f84"" key=""en_US"" value=""Java Class""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:b4019c9f-ead4-4628-a7aa-6319ac691e75"" annotatedObject=""mmuuid/f325248e-abae-426d-becf-eb3e9f28819e"">
+      <tags xmi:uuid=""mmuuid:4c9062ee-53a7-4a18-8412-6827b6090933"" key=""en_US"" value=""The java class containing the user defined function""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:a99e676d-df27-4a08-9923-60797eda566b"" annotatedObject=""mmuuid/47d61a3a-c48e-4670-a7e2-656a25fce712"">
+      <tags xmi:uuid=""mmuuid:4a3efd3f-5f43-4334-be65-cc9e5447f0ac"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:b93e4742-954c-48cd-ac64-60d642d1f3d2"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:00794832-6107-4bcf-b324-8f69d012037c"" key=""description"" value=""""/>
+      <tags xmi:uuid=""mmuuid:60e1952b-3359-4b5d-ab77-2becc0e712f7"" key=""id"" value=""java-method""/>
+      <tags xmi:uuid=""mmuuid:79c6c7cd-b39b-492b-9607-9f46c11f89fc"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:0935ab35-eb61-4840-adbb-999c65488b96"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:00abe745-46f1-499c-8a16-afa78b8529ce"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:333b53ab-18b9-4c54-a72e-c3ed11df5f29"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:660d92c3-d5d0-44a4-ae7b-61e96ddba9d6"" key=""runtimeType"" value=""string""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:dec1713f-34e6-4845-a174-cac118adcbf5"" annotatedObject=""mmuuid/b93e4742-954c-48cd-ac64-60d642d1f3d2"">
+      <tags xmi:uuid=""mmuuid:a10aec9d-f7eb-4855-b712-2f3de5553cf0"" key=""en_US"" value=""Java Method""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:1b00eaff-64e7-4496-9a34-a45e2c047729"" annotatedObject=""mmuuid/00794832-6107-4bcf-b324-8f69d012037c"">
+      <tags xmi:uuid=""mmuuid:e9940925-59fe-41d4-ab8c-24c44535d48f"" key=""en_US"" value=""The java method defining the user defined function""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:fca74c64-6429-4b4f-98a9-68d71cca31f6"" annotatedObject=""mmuuid/e8ba1b72-362c-4be1-9c33-7c6f449c064d"">
+      <tags xmi:uuid=""mmuuid:a7241341-b6c7-4660-8947-4135d1827e4b"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:da8dc450-873e-4e99-8e15-592780c40cf5"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:9af96048-a384-44c6-97c5-ebfe1ab7aa8e"" key=""description"" value=""""/>
+      <tags xmi:uuid=""mmuuid:32681032-994e-47cd-86ff-909b0bf56479"" key=""id"" value=""udfJarPath""/>
+      <tags xmi:uuid=""mmuuid:b81dc4ad-7d85-4083-87c4-39da9f3e7e18"" key=""index"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:fa389f2e-89a0-42b3-a26a-f8ec2384c463"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:0d728abf-369c-4971-a994-a31f2229a6b4"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:19d1b5cc-0a84-4626-98ca-1b3bb1bea309"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:2029de1b-b745-40d1-a429-d9c12cb74b75"" key=""runtimeType"" value=""string""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:59d4d895-f549-499c-a06a-553eb2502b5c"" annotatedObject=""mmuuid/da8dc450-873e-4e99-8e15-592780c40cf5"">
+      <tags xmi:uuid=""mmuuid:5fca9937-32e7-4e51-a4d9-2cb7497f4728"" key=""en"" value=""UDF Jar Path""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:e6b24ba1-7d68-4465-8513-07cd6bb53a87"" annotatedObject=""mmuuid/9af96048-a384-44c6-97c5-ebfe1ab7aa8e"">
+      <tags xmi:uuid=""mmuuid:b90f2c35-90cf-446d-8768-de621d481df4"" key=""en_US"" value=""The project-relative path where the UDF jar is located""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:dbd979f9-5b94-45bb-9489-181441d58239"" annotatedObject=""mmuuid/1d1441c0-0d75-4049-86c8-923325f0841d"">
+      <tags xmi:uuid=""mmuuid:2275e275-a91a-47ed-a3e1-19e97e9671e0"" key=""propertyDefinition:native-query"" value=""native-query""/>
+      <tags xmi:uuid=""mmuuid:5dc6158a-d4ad-4c26-9014-308643bd4c85"" key=""propertyDefinition:global-temp-table"" value=""global-temp-table""/>
+      <tags xmi:uuid=""mmuuid:f20d3478-7626-4834-a505-b605ab9f7112"" key=""propertyDefinition:ALLOW_MATVIEW_MANAGEMENT"" value=""ALLOW_MATVIEW_MANAGEMENT""/>
+      <tags xmi:uuid=""mmuuid:11cc6dfc-6d94-4b06-9118-cecfc2075950"" key=""propertyDefinition:MATVIEW_STATUS_TABLE"" value=""MATVIEW_STATUS_TABLE""/>
+      <tags xmi:uuid=""mmuuid:f1aa7ef4-b818-4ab9-a839-2c8450d3297d"" key=""propertyDefinition:MATVIEW_BEFORE_LOAD_SCRIPT"" value=""MATVIEW_BEFORE_LOAD_SCRIPT""/>
+      <tags xmi:uuid=""mmuuid:f84a6696-d95a-4325-893e-79e1711a4226"" key=""propertyDefinition:MATVIEW_LOAD_SCRIPT"" value=""MATVIEW_LOAD_SCRIPT""/>
+      <tags xmi:uuid=""mmuuid:1e241a46-b208-459f-8784-f9337a81ccf9"" key=""propertyDefinition:MATVIEW_AFTER_LOAD_SCRIPT"" value=""MATVIEW_AFTER_LOAD_SCRIPT""/>
+      <tags xmi:uuid=""mmuuid:139e34d9-859b-4134-8bd7-847b32164fea"" key=""propertyDefinition:MATVIEW_SHARE_SCOPE"" value=""MATVIEW_SHARE_SCOPE""/>
+      <tags xmi:uuid=""mmuuid:ddf01d0b-8e3d-4bcb-8c97-da9f3bd90d2e"" key=""propertyDefinition:MATERIALIZED_STAGE_TABLE"" value=""MATERIALIZED_STAGE_TABLE""/>
+      <tags xmi:uuid=""mmuuid:9506f26a-4aa3-4c5b-b5e8-078e40a3aaa4"" key=""propertyDefinition:ON_VDB_START_SCRIPT"" value=""ON_VDB_START_SCRIPT""/>
+      <tags xmi:uuid=""mmuuid:bd140ec3-c5a1-4e7a-8f57-ee66df46343a"" key=""propertyDefinition:ON_VDB_DROP_SCRIPT"" value=""ON_VDB_DROP_SCRIPT""/>
+      <tags xmi:uuid=""mmuuid:0fd90a01-095b-4bac-a353-fea0274658a3"" key=""propertyDefinition:MATVIEW_ONERROR_ACTION"" value=""MATVIEW_ONERROR_ACTION""/>
+      <tags xmi:uuid=""mmuuid:75446eda-b6b4-4580-9e52-74a3c373952f"" key=""propertyDefinition:MATVIEW_TTL"" value=""MATVIEW_TTL""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:d162b8ff-96a6-41e5-866c-2640efbf4752"" annotatedObject=""mmuuid/2275e275-a91a-47ed-a3e1-19e97e9671e0"">
+      <tags xmi:uuid=""mmuuid:a7e9c5c1-4ee9-4f01-854b-edfd9024ef36"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:4202500b-6502-470c-9314-4e41658e6118"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:ba4fd453-13f0-4958-86b5-0da5616fd55b"" key=""id"" value=""native-query""/>
+      <tags xmi:uuid=""mmuuid:968ab152-c7d0-45d4-bb6d-54b9bf530d60"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:ce131503-acf4-4b21-972f-e43d07778576"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:062bc93a-cc52-42a4-9ffe-ef30c4c19a2d"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:4cf58ef3-2ce7-40e8-9552-c1e9265245c7"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:06da2138-f77f-4e17-acee-20ee6c1f15e9"" key=""runtimeType"" value=""string""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:75099c16-fdd8-4326-a9eb-8f8e946ead69"" annotatedObject=""mmuuid/4202500b-6502-470c-9314-4e41658e6118"">
+      <tags xmi:uuid=""mmuuid:8694eb21-cc37-467a-b6ec-73a0ad53abc5"" key=""en"" value=""Native Query""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:a44d2439-f95f-4aef-96f8-5e49fda6a070"" annotatedObject=""mmuuid/5dc6158a-d4ad-4c26-9014-308643bd4c85"">
+      <tags xmi:uuid=""mmuuid:414c07e1-1c08-447a-af6b-514c5cb7b3ef"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:b038beed-b8e8-444b-9eaa-41274784246f"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:a5a1b16d-96e4-4606-9f4b-ffc786af7c1b"" key=""defaultValue"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:a463f034-c0e1-41ea-b946-17145df1c3d0"" key=""id"" value=""global-temp-table""/>
+      <tags xmi:uuid=""mmuuid:4b1baf57-9308-435e-b3d8-8b6070f09286"" key=""index"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:9cc4008c-330f-4a4b-b06c-cb19e1544081"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:7e2a9409-2b87-410d-99b7-3c61e062d929"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:3bc5674c-b973-4945-bed3-8e1fe5404d48"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:b2e00412-e999-4455-aaec-938edee990d1"" key=""runtimeType"" value=""boolean""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:1ec07c99-9e89-4f89-8892-048e770890cb"" annotatedObject=""mmuuid/b038beed-b8e8-444b-9eaa-41274784246f"">
+      <tags xmi:uuid=""mmuuid:52c39cec-3940-494c-9f86-6ca23453cced"" key=""en_US"" value=""Global Temp Table""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:6b80536e-93c5-424c-8d5e-6a9022ccd751"" annotatedObject=""mmuuid/f20d3478-7626-4834-a505-b605ab9f7112"">
+      <tags xmi:uuid=""mmuuid:ad271277-0ca4-4234-9c5c-9d1508515693"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:4c629309-0805-4b1a-8939-b178095cbe34"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:a2c62ca6-2725-4213-99b6-90e580096890"" key=""defaultValue"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:9faf6c58-b90b-4e10-9938-0265876852e2"" key=""id"" value=""ALLOW_MATVIEW_MANAGEMENT""/>
+      <tags xmi:uuid=""mmuuid:574428f2-c0cb-4b74-9adf-18fd43215336"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:6d08d8f3-09a7-444b-ab94-fe285e6a174c"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:1de304f7-7e2a-4d42-8812-ee75f2806bbd"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:0aa06f19-50a2-446a-92c3-8ec37723c3d0"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:ce87485f-fc8a-4325-8bd9-def5c846f782"" key=""runtimeType"" value=""boolean""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:d436bff4-c0ef-4d98-8f52-a9bc8bcd2b12"" annotatedObject=""mmuuid/4c629309-0805-4b1a-8939-b178095cbe34"">
+      <tags xmi:uuid=""mmuuid:b9fd7d52-a521-4dfd-a987-2f99b979fd0e"" key=""en_US"" value=""Allow Teiid based management""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:0c0810d5-50f3-4444-b65f-f2536f670f8c"" annotatedObject=""mmuuid/11cc6dfc-6d94-4b06-9118-cecfc2075950"">
+      <tags xmi:uuid=""mmuuid:dc8fac5f-a426-49e2-b95d-f763517fa496"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:b92ff848-0a18-4a07-85d2-c6da77d89ebe"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:b185be64-09f3-444a-8884-462c5659c86f"" key=""description"" value=""""/>
+      <tags xmi:uuid=""mmuuid:a5e750dc-429d-436f-a5e3-92af0a148407"" key=""id"" value=""MATVIEW_STATUS_TABLE""/>
+      <tags xmi:uuid=""mmuuid:7e3314ad-de2c-47bd-b55b-df2d9dcea650"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:57a53626-46fb-4279-ad3b-cb227252cbfe"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:c5553596-d1d2-46af-a487-5410fb716866"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:aa7f21f5-b87f-42b2-a8a7-7bde25aca40a"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:ce89ca3e-13c4-4797-ac87-6a316dc07600"" key=""runtimeType"" value=""string""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:61fddac0-931d-4e94-b763-d1008c1e2fe9"" annotatedObject=""mmuuid/b92ff848-0a18-4a07-85d2-c6da77d89ebe"">
+      <tags xmi:uuid=""mmuuid:b9d215ed-ecd3-49b7-a891-a4d6481c5faa"" key=""en_US"" value=""Status Table Name""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:60d30b7c-8085-45a8-a3b6-1218111da45d"" annotatedObject=""mmuuid/b185be64-09f3-444a-8884-462c5659c86f"">
+      <tags xmi:uuid=""mmuuid:dc4cda4c-e3f5-461e-a466-3d59c8140449"" key=""en_US"" value=""fully qualified Status Table Name""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:bcb5835f-55d1-4cd8-b856-2c4321a0e72d"" annotatedObject=""mmuuid/f1aa7ef4-b818-4ab9-a839-2c8450d3297d"">
+      <tags xmi:uuid=""mmuuid:980e7d30-2a01-4eac-9d86-c43a50c772c2"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:8c371bce-62b3-475a-906d-6719622d5b03"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:fcfd665f-aa61-479c-94e1-476cde8ac794"" key=""description"" value=""""/>
+      <tags xmi:uuid=""mmuuid:2534cddf-c3d6-4290-933c-af35aeb4d1db"" key=""id"" value=""MATVIEW_BEFORE_LOAD_SCRIPT""/>
+      <tags xmi:uuid=""mmuuid:2ee7c546-e008-4c74-be58-a7c27eb5bdd8"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:1b8830bb-3a2e-498e-a583-acfe969f5a9f"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:442d478b-0f2a-4f63-a41d-34ed3580c526"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:37b26153-74c7-4950-815d-8fe0a728eaff"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:e37bf238-550a-45f4-87db-4fb790cdddf6"" key=""runtimeType"" value=""string""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:60b75a6e-fa45-40a1-8442-134b89ef2acb"" annotatedObject=""mmuuid/8c371bce-62b3-475a-906d-6719622d5b03"">
+      <tags xmi:uuid=""mmuuid:c2ec97ba-fe61-4f7a-b03e-23f1f0c02a7e"" key=""en_US"" value=""Materialize Before Load Script""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:ae220c10-1fb5-401e-ac7a-9ff4dbb91d25"" annotatedObject=""mmuuid/fcfd665f-aa61-479c-94e1-476cde8ac794"">
+      <tags xmi:uuid=""mmuuid:d30a2906-f526-4c99-b8ac-a15f7639d1d9"" key=""en_US"" value=""semi-colon(;) separated DDL/DML commands to run before the actual load of the cache, typically used to truncate staging table ""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:1a64f7ac-63d9-48a1-8196-35f77b46047b"" annotatedObject=""mmuuid/f84a6696-d95a-4325-893e-79e1711a4226"">
+      <tags xmi:uuid=""mmuuid:9d16b9ee-ef9e-4342-a5f1-eaa72ccb5bf3"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:a42d7824-d92f-4de1-a7a3-3908d76ae80f"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:0e6dcc69-2146-4dfe-bec7-b643ac3dc6d5"" key=""description"" value=""""/>
+      <tags xmi:uuid=""mmuuid:7a585c64-b978-4909-b0d7-56aee9efdc39"" key=""id"" value=""MATVIEW_LOAD_SCRIPT""/>
+      <tags xmi:uuid=""mmuuid:4bac095b-45f3-459f-aced-426c01e63678"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:f4374005-31fc-467f-a7bd-e21844722e2a"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:a1b22c23-b3e4-419c-acad-1a1e360e2f98"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:b8393e7b-e952-4837-966b-69c25817b274"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:70fc90f0-b9d9-4018-b857-bfb0c3c3d4f5"" key=""runtimeType"" value=""string""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:7f886bae-73da-46f9-88e2-3d551e02b1e3"" annotatedObject=""mmuuid/a42d7824-d92f-4de1-a7a3-3908d76ae80f"">
+      <tags xmi:uuid=""mmuuid:2c24c6ca-0dce-4d45-b8aa-f1d85432d947"" key=""en_US"" value=""Materialize Load Script""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:da6a15b0-be08-4304-a13d-07d3b067cbbd"" annotatedObject=""mmuuid/0e6dcc69-2146-4dfe-bec7-b643ac3dc6d5"">
+      <tags xmi:uuid=""mmuuid:28a384ba-879a-4134-8287-d33e85374a29"" key=""en_US"" value=""semi-colon(;) separated DDL/DML commands to run for loading of the cache""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:9c9e75f3-e1a4-479b-86ac-e93a65c9477f"" annotatedObject=""mmuuid/1e241a46-b208-459f-8784-f9337a81ccf9"">
+      <tags xmi:uuid=""mmuuid:33e34b2c-81cb-4520-bd68-f0a9105dca8a"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:ba5ebc25-5608-47e8-9351-8b2adba2658b"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:0ab16db7-1a6e-423c-b1c1-9ac8ed780017"" key=""description"" value=""""/>
+      <tags xmi:uuid=""mmuuid:a3db3251-4d55-4098-84f9-3c7f64cd113f"" key=""id"" value=""MATVIEW_AFTER_LOAD_SCRIPT""/>
+      <tags xmi:uuid=""mmuuid:163dd3c1-4747-4d13-a49c-66ce5bd60189"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:9e68ec67-6942-410f-a39b-f913e9d3486c"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:514bb885-7572-4d01-9e2c-14c5ddff16b6"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:8f694415-9ae3-4103-bf23-47cf7f5d1c5a"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:524f6292-3210-4860-9650-407c86e3883b"" key=""runtimeType"" value=""string""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:68ff4ea8-a736-4a96-9518-456d0dbdb583"" annotatedObject=""mmuuid/ba5ebc25-5608-47e8-9351-8b2adba2658b"">
+      <tags xmi:uuid=""mmuuid:f30e0556-d8c2-45fb-a6a5-7ed1344225fc"" key=""en_US"" value=""Materialize After Load Script""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:b30f9eec-789c-45bf-99e4-efdd285d3a78"" annotatedObject=""mmuuid/0ab16db7-1a6e-423c-b1c1-9ac8ed780017"">
+      <tags xmi:uuid=""mmuuid:a007597c-f045-4bf9-bb4a-26398018fc26"" key=""en_US"" value=""semi-colon(;) separated DDL/DML commands to run after the actual load of the cache. &#xa;        &#x9;&#x9;Typically used to rename staging table to actual cache table. Required when MATVIEW_LOAD_SCRIPT not defined to copy &#xa;        &#x9;&#x9;data from teiid_rel:MATVIEW_STAGE_TABLE to MATVIEW table ""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:d592276e-2d4c-46da-babb-1eb5b50f792b"" annotatedObject=""mmuuid/139e34d9-859b-4134-8bd7-847b32164fea"">
+      <tags xmi:uuid=""mmuuid:6caaa160-ed28-4874-bb51-05a6439e656d"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:a03f66fd-5c36-44dc-91d8-983dca5035e5"" key=""allowedValues"" value=""""/>
+      <tags xmi:uuid=""mmuuid:7eb32d8f-b310-4bf6-aa02-01a6a8d160dc"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:a57a8aed-af4c-4f97-a929-03cea2f23b90"" key=""defaultValue"" value=""NONE""/>
+      <tags xmi:uuid=""mmuuid:1c660c1d-4141-4474-be46-31048533a117"" key=""description"" value=""""/>
+      <tags xmi:uuid=""mmuuid:7d4c3d59-53d3-43b1-88ab-67bd2de81f3a"" key=""id"" value=""MATVIEW_SHARE_SCOPE""/>
+      <tags xmi:uuid=""mmuuid:838f07f5-d46d-420e-9e8e-7cc6b218679e"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:0816509d-aff4-46c9-aaf2-6d2136cc1266"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:a627c470-828c-46ca-8509-d941b2bdac9c"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:a93665c3-5fa9-4375-a3e1-ffb3c198168a"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:ffda01d4-7f36-4cea-980d-8022a837f145"" key=""runtimeType"" value=""string""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:9e48446d-7e36-4052-b7f8-4e3a25d0b7ac"" annotatedObject=""mmuuid/a03f66fd-5c36-44dc-91d8-983dca5035e5"">
+      <tags xmi:uuid=""mmuuid:b2457a2a-f31b-496f-bd84-c3f7f22f2df3"" key=""SCHEMA"" value=""""/>
+      <tags xmi:uuid=""mmuuid:f7257a41-71f3-4fe8-8e51-9c663bfdd4d7"" key=""VDB"" value=""""/>
+      <tags xmi:uuid=""mmuuid:6a3e8471-a6ee-4f30-93f5-6678d5b7395d"" key=""NONE"" value=""""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:9e5f1d42-9b46-4551-8582-b2d3fc449670"" annotatedObject=""mmuuid/7eb32d8f-b310-4bf6-aa02-01a6a8d160dc"">
+      <tags xmi:uuid=""mmuuid:e7c4651c-ef3f-4519-a8e3-ee91174d1ff7"" key=""en_US"" value=""Materialized Share Scope""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:c4accdf1-d120-4608-9fa8-c94449a0a49c"" annotatedObject=""mmuuid/1c660c1d-4141-4474-be46-31048533a117"">
+      <tags xmi:uuid=""mmuuid:8c245c81-b849-496e-a70b-00d84f74dc5c"" key=""en_US"" value="" &#x9;Allowed values are {NONE, VDB, SCHEMA}, which define if the cached contents are shared among &#xa;        &#x9;&#x9;different VDB versions and different VDBs as long as schema names match ""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:f5b40dc2-26ec-4ac5-9d63-fba28b118182"" annotatedObject=""mmuuid/ddf01d0b-8e3d-4bcb-8c97-da9f3bd90d2e"">
+      <tags xmi:uuid=""mmuuid:de8f288a-b68f-4e8a-8cb1-9fbd5d59c11c"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:2679f01a-c02e-469f-b68e-388a1485342f"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:52140e2f-3837-44f6-840c-c75dfcf9fad4"" key=""description"" value=""""/>
+      <tags xmi:uuid=""mmuuid:b32a990a-50da-454c-8f19-df2c94d1b5af"" key=""id"" value=""MATERIALIZED_STAGE_TABLE""/>
+      <tags xmi:uuid=""mmuuid:55674f96-2305-4f86-bde8-a062c3326f1f"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:51f71030-afcb-465c-8d35-650e1ff1f9e7"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:33e50428-cd86-405e-b64b-3561d7d760b5"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:0b8267f2-b54f-4d6c-95a3-ce85858b329c"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:7d67644d-a51b-46c1-846a-be9515e4c052"" key=""runtimeType"" value=""string""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:9ba275bf-9f8d-4491-b370-18d80428b7b3"" annotatedObject=""mmuuid/2679f01a-c02e-469f-b68e-388a1485342f"">
+      <tags xmi:uuid=""mmuuid:02c52ab1-8564-44d0-b2d1-7799a3e50ce9"" key=""en_US"" value=""Materialized Staging Table""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:f896192e-2c3a-4b63-ae1b-d08458236e51"" annotatedObject=""mmuuid/52140e2f-3837-44f6-840c-c75dfcf9fad4"">
+      <tags xmi:uuid=""mmuuid:99e57dbf-0bf7-41ca-be25-eb529879c703"" key=""en_US"" value=""When MATVIEW_LOAD_SCRIPT property not defined, Teiid loads the cache contents &#xa;        &#x9;&#x9;into this table. Required when MATVIEW_LOAD_SCRIPT not defined ""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:c282afd4-cf28-4ec2-9e58-f96688f7eb81"" annotatedObject=""mmuuid/9506f26a-4aa3-4c5b-b5e8-078e40a3aaa4"">
+      <tags xmi:uuid=""mmuuid:453949f8-e8e8-464e-b6ae-c6841cada4f1"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:f9c4b076-e37a-4558-976d-4976b49b03bd"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:93e71313-c2c8-4f80-9a1f-f250ab472b24"" key=""description"" value=""""/>
+      <tags xmi:uuid=""mmuuid:d3871804-47ca-4f9e-afbe-1e3976a3d94c"" key=""id"" value=""ON_VDB_START_SCRIPT""/>
+      <tags xmi:uuid=""mmuuid:a952ad10-d282-4842-952d-c7a04751ad0e"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:4ea57413-5a1e-4cf7-89b3-9d5d4456746e"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:728d6a45-90c2-403f-9e88-1f1ea56c0365"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:9a25358e-21c9-4e84-9df0-9e88fe00be12"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:ed2a39e9-f3a3-4ed8-9656-8bd02ebd8f37"" key=""runtimeType"" value=""string""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:19d7e21a-d796-4ce2-ba2f-612b00856c96"" annotatedObject=""mmuuid/f9c4b076-e37a-4558-976d-4976b49b03bd"">
+      <tags xmi:uuid=""mmuuid:8f485478-40c1-4460-8a76-fa9675fb4704"" key=""en_US"" value=""Commands To Run On VDB Start""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:05a44837-bed6-4dd7-9c38-423f39fb5b68"" annotatedObject=""mmuuid/93e71313-c2c8-4f80-9a1f-f250ab472b24"">
+      <tags xmi:uuid=""mmuuid:d990fbcd-bb66-4476-9d36-43b30f9a55f8"" key=""en_US"" value=""DML commands to run start of vdb ""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:6e2fc62c-843d-4de6-a375-84b5d65bad9e"" annotatedObject=""mmuuid/bd140ec3-c5a1-4e7a-8f57-ee66df46343a"">
+      <tags xmi:uuid=""mmuuid:12d84df4-759a-4e03-872a-ebeab7576239"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:6a93b901-6c0d-4850-a7c4-81a35a4e0377"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:10fafd20-fc46-4e6f-86ed-4201ff962f08"" key=""description"" value=""""/>
+      <tags xmi:uuid=""mmuuid:465cafca-cf3a-4a17-b1a7-82e74a1d5c86"" key=""id"" value=""ON_VDB_DROP_SCRIPT""/>
+      <tags xmi:uuid=""mmuuid:a5b6f0db-da86-4216-8c71-9dd4ecad34c1"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:02a5b0c7-108a-46df-bdaa-d762b6878382"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:a428740d-277b-42d9-9f37-a56065d4cb44"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:5d551c82-46dc-4cf3-a6b3-2ca08eac6773"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:d636cf2b-66a9-484a-a5dc-898ced85cd5e"" key=""runtimeType"" value=""string""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:e95293d1-ca99-439e-9d74-586bf5f9d098"" annotatedObject=""mmuuid/6a93b901-6c0d-4850-a7c4-81a35a4e0377"">
+      <tags xmi:uuid=""mmuuid:59db7baa-418b-4899-8890-82e062b54368"" key=""en_US"" value=""Commands To Run On VDB Drop""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:ad73b8da-64a7-4fe1-abca-5d3482648001"" annotatedObject=""mmuuid/10fafd20-fc46-4e6f-86ed-4201ff962f08"">
+      <tags xmi:uuid=""mmuuid:c24e000f-75bb-49d2-8b79-5d30e5965ea9"" key=""en_US"" value=""DML commands to run at VDB un-deploy; typically used for cleaning the cache/status tables ""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:6593b5ea-fb94-476e-ad69-5a247e6cbd8c"" annotatedObject=""mmuuid/0fd90a01-095b-4bac-a353-fea0274658a3"">
+      <tags xmi:uuid=""mmuuid:a51f6b92-d89b-4383-9133-3ca3c226c79a"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:a1423a37-59a9-40aa-b4ce-1e52dc7518eb"" key=""allowedValues"" value=""""/>
+      <tags xmi:uuid=""mmuuid:b6d49d9a-f089-4c14-8b40-724871ed4fe4"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:6c1a1dea-713e-48fb-8670-970ee4d418d3"" key=""defaultValue"" value=""WAIT""/>
+      <tags xmi:uuid=""mmuuid:c89574ae-0516-4ca9-8575-fd14d324ee07"" key=""description"" value=""""/>
+      <tags xmi:uuid=""mmuuid:f3f48765-53bf-49c8-8720-92fe249107b5"" key=""id"" value=""MATVIEW_ONERROR_ACTION""/>
+      <tags xmi:uuid=""mmuuid:af6ca6d9-d300-4d78-a37c-610b287fa01b"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:81a286db-9a01-4b45-a066-33b616ac107b"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:650c329a-6d0b-485f-8c14-ce83ba0a0579"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:50e4a665-101f-4202-8dd2-cdb25f8adc1e"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:607fa306-5e32-4b06-8cc4-b75ce0a95102"" key=""runtimeType"" value=""string""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:f347f869-3fdb-4ffc-ab8e-3c571d65a290"" annotatedObject=""mmuuid/a1423a37-59a9-40aa-b4ce-1e52dc7518eb"">
+      <tags xmi:uuid=""mmuuid:7ae5f02b-0b82-4a31-b55b-bf795b659b53"" key=""IGNORE"" value=""""/>
+      <tags xmi:uuid=""mmuuid:3917b531-6f27-4071-89a2-11f32c77fa9c"" key=""WAIT"" value=""""/>
+      <tags xmi:uuid=""mmuuid:ae8df6fb-d4f3-426f-a38e-917238ceb772"" key=""THROW_EXCEPTION"" value=""""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:0605edd2-fabf-472a-af99-81cb8d307341"" annotatedObject=""mmuuid/b6d49d9a-f089-4c14-8b40-724871ed4fe4"">
+      <tags xmi:uuid=""mmuuid:3a41d427-46f8-49b7-9c4a-4d0872ed8183"" key=""en_US"" value=""Action On Error""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:7d18a6fc-d745-4f24-bf59-c3deb24d93f7"" annotatedObject=""mmuuid/c89574ae-0516-4ca9-8575-fd14d324ee07"">
+      <tags xmi:uuid=""mmuuid:bf87587f-407f-40d7-b718-d08fe522b5ac"" key=""en_US"" value=""Action to be taken when mat view contents are requested but cache is invalid. Allowed values are &#xa;        &#x9;(THROW_EXCEPTION = throws an exception, &#xa;        &#x9; IGNORE = ignores the warning and supplied invalidated data, &#xa;        &#x9; WAIT = waits until the data is refreshed and valid then provides the updated data) ""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:875d7530-be61-4755-a8d9-74b2cc47958b"" annotatedObject=""mmuuid/75446eda-b6b4-4580-9e52-74a3c373952f"">
+      <tags xmi:uuid=""mmuuid:815bb95f-c034-46f3-b884-5c3bb545e9e6"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:f5fbc4b1-b5a5-4a33-8cbd-fc8a0280b223"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:0aa4084e-d95c-46d9-8f26-305ba6d2e23e"" key=""description"" value=""""/>
+      <tags xmi:uuid=""mmuuid:e5fb0688-5510-403f-9fdc-586b56a81a0e"" key=""id"" value=""MATVIEW_TTL""/>
+      <tags xmi:uuid=""mmuuid:6d51abd2-739d-42cb-8bc4-124cfd87f44a"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:db676186-84e8-4de8-8c61-4749cf061f5d"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:d8d1b040-b788-4eca-afff-6de8b6349968"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:5cfc8439-73cc-4bb2-89d5-67bf4f8d610b"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:4c39fd31-d9ac-4be5-8398-c9cd0b917569"" key=""runtimeType"" value=""integer""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:8725d10e-5357-45e1-9db4-1196d095b0df"" annotatedObject=""mmuuid/f5fbc4b1-b5a5-4a33-8cbd-fc8a0280b223"">
+      <tags xmi:uuid=""mmuuid:82b43cea-18fa-4884-b441-9d93d227c0a6"" key=""en_US"" value=""Time To Live (ms)""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:148e3631-5452-4134-a556-3063f1bd166c"" annotatedObject=""mmuuid/0aa4084e-d95c-46d9-8f26-305ba6d2e23e"">
+      <tags xmi:uuid=""mmuuid:5eaa050a-ac52-45e4-be24-7cc909be0aec"" key=""en_US"" value=""Time to live in milliseconds. Provide property or cache hint on view transformation - property takes precedence. ""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:888e4cfc-b707-4bf8-a12d-243d55a613e0"" annotatedObject=""mmuuid/459b7df0-6c0d-4d12-bfdf-ad53509c8507"">
+      <tags xmi:uuid=""mmuuid:b7e0347f-2264-415a-af89-b0800805d338"" key=""propertyDefinition:allow-join"" value=""allow-join""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:f0744996-a408-41cf-a501-e062b36a3275"" annotatedObject=""mmuuid/b7e0347f-2264-415a-af89-b0800805d338"">
+      <tags xmi:uuid=""mmuuid:bac3199b-51d7-4a45-900b-900262d11eac"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:25d29a25-3c88-441f-bdb0-6075578ee16a"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:206c93e5-ae35-4adf-b326-050b2889c3dc"" key=""defaultValue"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:7272419f-ac4e-4a3d-8446-330fac813cfc"" key=""id"" value=""allow-join""/>
+      <tags xmi:uuid=""mmuuid:fb40d98f-14b3-484b-b6db-93a45e13bbee"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:df21e00c-fcf4-42a3-84f3-a85014d36e93"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:44ee5f51-2edb-484f-b97a-782702225cc4"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:e0369efd-71de-429c-bca6-6556849364ed"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:8df8b56c-c27b-432e-9776-089c368e585a"" key=""runtimeType"" value=""boolean""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:fa5a10c0-cfc3-473b-8d9f-2bad4eebce08"" annotatedObject=""mmuuid/25d29a25-3c88-441f-bdb0-6075578ee16a"">
+      <tags xmi:uuid=""mmuuid:2a608f78-83ab-4f60-8e7a-63bbdd291a54"" key=""en"" value=""Allow Join""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:9f95942c-8d64-4420-80c5-25d530269b83"" annotatedObject=""mmuuid/9c24b20b-56c4-4af7-8af4-28234ab3f90c"">
+      <tags xmi:uuid=""mmuuid:ed536e87-baf1-470e-aa40-f8cbefcb7fdb"" key=""propertyDefinition:native_type"" value=""native_type""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:2e5394fb-bf0d-4622-8e39-d357ec925227"" annotatedObject=""mmuuid/ed536e87-baf1-470e-aa40-f8cbefcb7fdb"">
+      <tags xmi:uuid=""mmuuid:be936d2e-af09-4d2a-a48f-9ffe17a03d40"" key=""advanced"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:489e63ad-bfb4-4d08-9a53-55c534f9aa3f"" key=""displayName"" value=""""/>
+      <tags xmi:uuid=""mmuuid:9971cf31-82f8-4096-9e20-f1da33ad482d"" key=""description"" value=""""/>
+      <tags xmi:uuid=""mmuuid:018ac848-b727-4f0d-9219-c940333b3a0b"" key=""id"" value=""native_type""/>
+      <tags xmi:uuid=""mmuuid:53de7b2d-0c8d-4c66-8619-26908f0f8434"" key=""index"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:3e08b717-a700-422d-be6c-fa3ef32aaafd"" key=""modifiable"" value=""true""/>
+      <tags xmi:uuid=""mmuuid:7e2f4a46-2122-4df8-b5d6-ba70457d3b45"" key=""masked"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:3fda7eaf-0fcc-4653-bd1b-d0b7d2986d0e"" key=""required"" value=""false""/>
+      <tags xmi:uuid=""mmuuid:f9fa126c-eb98-47cd-b488-dbf45e64309a"" key=""runtimeType"" value=""string""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:aeeab1c5-ae0b-4a1b-8c09-701de575c870"" annotatedObject=""mmuuid/489e63ad-bfb4-4d08-9a53-55c534f9aa3f"">
+      <tags xmi:uuid=""mmuuid:b17d9bef-5258-4979-9835-6bb8c7840828"" key=""en"" value=""Native Type""/>
+    </annotations>
+    <annotations xmi:uuid=""mmuuid:04824123-9fb3-404f-88b9-5763c5a328bd"" annotatedObject=""mmuuid/9971cf31-82f8-4096-9e20-f1da33ad482d"">
+      <tags xmi:uuid=""mmuuid:8dbc7402-3bd8-47e2-9973-561b472d4439"" key=""en"" value=""Allows specifying a native type for OUT parameters. Typical value is REF CURSOR""/>
+    </annotations>
+  </mmcore:AnnotationContainer>
+  <relational:Schema xmi:uuid=""mmuuid:1c059e7c-01d4-4c3c-8c24-def3c7d6cfac"" name=""Trade_Mat"" nameInSource=""Trade_Mat"">
+    <tables xsi:type=""relational:BaseTable"" xmi:uuid=""mmuuid:2b5a463d-d34f-4e9e-a22c-6a9b980319bc"" name=""Trade"" nameInSource=""Trades"">
+      <columns xmi:uuid=""mmuuid:52ba1a65-b660-4c3e-b1f3-54840d744906"" name=""TradeObject"" nameInSource=""this"" nativeType=""var_binary"" length=""4000"" nullable=""NULLABLE_UNKNOWN"" defaultValue="""" collationName="""" caseSensitive=""false"" searchability=""UNSEARCHABLE"" radix=""0"" signed=""false"">
+        <type href=""http://www.metamatrix.com/metamodels/SimpleDatatypes-instance#object""/>
+      </columns>
+      <columns xmi:uuid=""mmuuid:acc13615-0e0d-4560-871f-684dab7cc111"" name=""TradeID"" nameInSource=""tradeId"" nativeType=""long"" uniqueKeys=""mmuuid/8d2fe26a-d4a0-4869-9dbf-336c612339a5"">
+        <type href=""http://www.w3.org/2001/XMLSchema#long""/>
+      </columns>
+      <columns xmi:uuid=""mmuuid:a90e61e6-a8c4-4dfb-94fd-e785d7e502aa"" name=""TradeName"" nameInSource=""name"">
+        <nativeType xsi:nil=""true""/>
+        <type href=""http://www.w3.org/2001/XMLSchema#string""/>
+      </columns>
+      <columns xmi:uuid=""mmuuid:92e28e92-d0c9-46e1-a3e0-b5381180a79e"" name=""Settled"" nameInSource=""settled"" nativeType=""boolean"">
+        <type href=""http://www.w3.org/2001/XMLSchema#boolean""/>
+      </columns>
+      <columns xmi:uuid=""mmuuid:e6bac70a-92c2-4e31-812c-832906328257"" name=""TradeDate"" nameInSource=""tradeDate"" nativeType=""java.util.Date"">
+        <type href=""http://www.w3.org/2001/XMLSchema#date""/>
+      </columns>
+      <primaryKey xmi:uuid=""mmuuid:8d2fe26a-d4a0-4869-9dbf-336c612339a5"" name=""PK_ID"" columns=""mmuuid/acc13615-0e0d-4560-871f-684dab7cc111""/>
+    </tables>
+  </relational:Schema>
+  <diagram:DiagramContainer xmi:uuid=""mmuuid:f912d42c-9e40-4d81-93b8-60d97ae659e5"">
+    <diagram xmi:uuid=""mmuuid:c34b047e-c0ef-4c8e-9e58-20461590a8ac"" type=""packageDiagramType"" target=""mmuuid/5f4d3ef6-026c-4a33-adea-fbf0eda391e7"">
+      <diagramEntity xmi:uuid=""mmuuid:ea81cc32-0207-4859-9a25-6219c4ee5668"" modelObject=""mmuuid/1c059e7c-01d4-4c3c-8c24-def3c7d6cfac"" xPosition=""10"" yPosition=""10""/>
+    </diagram>
+  </diagram:DiagramContainer>
+</xmi:XMI>",2016-06-24T19:44:32Z,119
"@@ -1,13 +1,14 @@
 <?xml version=""1.0"" encoding=""ASCII""?>
 <xmi:XMI xmi:version=""2.0"" xmlns:xmi=""http://www.omg.org/XMI"" xmlns:diagram=""http://www.metamatrix.com/metamodels/Diagram"" xmlns:jdbc=""http://www.metamatrix.com/metamodels/JDBC"" xmlns:mmcore=""http://www.metamatrix.com/metamodels/Core"" xmlns:relational=""http://www.metamatrix.com/metamodels/Relational"">
-  <mmcore:ModelAnnotation xmi:uuid=""mmuuid:abbd65a2-2896-4819-9428-fa8ba13a1b71"" primaryMetamodelUri=""http://www.metamatrix.com/metamodels/Relational"" modelType=""PHYSICAL"" ProducerName=""Teiid Designer"" ProducerVersion=""9.1.0.Beta2-v20150624-2132-B3933"">
+  <mmcore:ModelAnnotation xmi:uuid=""mmuuid:abbd65a2-2896-4819-9428-fa8ba13a1b71"" primaryMetamodelUri=""http://www.metamatrix.com/metamodels/Relational"" modelType=""PHYSICAL"" ProducerName=""Teiid Designer"" ProducerVersion=""10.0.1.Nightly-v20160622-1945-B8"">
     <modelImports xmi:uuid=""mmuuid:7c40d324-5eca-472f-a7a8-c20b01f5d848"" name=""SimpleDatatypes-instance"" modelLocation=""http://www.metamatrix.com/metamodels/SimpleDatatypes-instance"" modelType=""TYPE"" primaryMetamodelUri=""http://www.eclipse.org/xsd/2002/XSD""/>
     <modelImports xmi:uuid=""mmuuid:4414223d-d6b6-4300-87ce-4316eeb5ddcb"" name=""XMLSchema"" modelLocation=""http://www.w3.org/2001/XMLSchema"" modelType=""TYPE"" primaryMetamodelUri=""http://www.eclipse.org/xsd/2002/XSD""/>
   </mmcore:ModelAnnotation>
   <diagram:DiagramContainer xmi:uuid=""mmuuid:060329df-f071-436c-91d8-8de84f4a38b3"">
     <diagram xmi:uuid=""mmuuid:0d512295-f6e7-418d-8409-f7e689137c68"" type=""packageDiagramType"" target=""mmuuid/abbd65a2-2896-4819-9428-fa8ba13a1b71"">
       <diagramEntity xmi:uuid=""mmuuid:b81484fc-8676-4c01-a0fb-8c82fdc3744d"" name=""Trade"" modelObject=""mmuuid/e4662c1d-443f-45a8-8623-8a4876ea7539"" xPosition=""20"" yPosition=""20""/>
-      <diagramEntity xmi:uuid=""mmuuid:232a8473-80d4-495b-900e-415be34eef35"" name=""Leg"" modelObject=""mmuuid/e1093478-579b-4a84-ad31-8c2a0bdce936"" xPosition=""204"" yPosition=""163""/>
+      <diagramEntity xmi:uuid=""mmuuid:232a8473-80d4-495b-900e-415be34eef35"" name=""Leg"" modelObject=""mmuuid/e1093478-579b-4a84-ad31-8c2a0bdce936"" xPosition=""429"" yPosition=""164""/>
+      <diagramEntity xmi:uuid=""mmuuid:f7d5db68-5c8b-4be7-ba56-6268d3a328f2"" name=""Trade_Errors"" modelObject=""mmuuid/2404168a-7cde-477e-8b09-dd9263baa7ac"" xPosition=""20"" yPosition=""20""/>
     </diagram>
   </diagram:DiagramContainer>
   <mmcore:AnnotationContainer xmi:uuid=""mmuuid:146acc5c-ec00-4c47-b40f-bcde7a260d72"">
@@ -319,8 +320,8 @@
     </importSettings>
   </jdbc:JdbcSource>
   <relational:BaseTable xmi:uuid=""mmuuid:e4662c1d-443f-45a8-8623-8a4876ea7539"" name=""Trade"" nameInSource=""Trades"">
-    <columns xmi:uuid=""mmuuid:73b0ec15-2abe-4f72-b25e-b9113b528b41"" name=""TradeObject"" nameInSource=""this"" nativeType="""" length=""4000"" nullable=""NULLABLE_UNKNOWN"" caseSensitive=""false"" searchability=""UNSEARCHABLE"" radix=""0"" signed=""false"" distinctValueCount=""0"" nullValueCount=""0"">
-      <type href=""http://www.metamatrix.com/metamodels/SimpleDatatypes-instance#XMLLiteral""/>
+    <columns xmi:uuid=""mmuuid:73b0ec15-2abe-4f72-b25e-b9113b528b41"" name=""TradeObject"" nameInSource=""this"" nativeType=""var_binary"" length=""4000"" nullable=""NULLABLE_UNKNOWN"" defaultValue="""" collationName="""" caseSensitive=""false"" searchability=""UNSEARCHABLE"" radix=""0"" signed=""false"" distinctValueCount=""0"">
+      <type href=""http://www.metamatrix.com/metamodels/SimpleDatatypes-instance#object""/>
     </columns>
     <columns xmi:uuid=""mmuuid:7ad19ea9-1751-49e0-89c7-e759dd50ff46"" name=""TradeID"" nameInSource=""tradeId"" nativeType=""long"" uniqueKeys=""mmuuid/6bee1ce8-0ac1-4ee0-a0a8-d200e2936b86"">
       <type href=""http://www.w3.org/2001/XMLSchema#long""/>
@@ -351,4 +352,25 @@
     </columns>
     <foreignKeys xmi:uuid=""mmuuid:bcc9abfb-bfc4-4102-9505-66f1667e5efd"" name=""FK_TradeId"" nameInSource=""legs"" columns=""mmuuid/3b7be33a-2e50-4c79-9cdc-13d7b166a2d2"" uniqueKey=""mmuuid/6bee1ce8-0ac1-4ee0-a0a8-d200e2936b86""/>
   </relational:BaseTable>
+  <relational:BaseTable xmi:uuid=""mmuuid:2404168a-7cde-477e-8b09-dd9263baa7ac"" name=""Trade_Errors"" nameInSource=""Trade_Errors"">
+    <columns xmi:uuid=""mmuuid:5aafafd0-dcf5-4d1d-9977-d6024d6b0260"" name=""TradeObject"" nameInSource=""this"" nativeType=""var_binary"" length=""4000"" nullable=""NULLABLE_UNKNOWN"" defaultValue="""" collationName="""" caseSensitive=""false"" searchability=""UNSEARCHABLE"" radix=""0"" signed=""false"" distinctValueCount=""0"">
+      <type href=""http://www.metamatrix.com/metamodels/SimpleDatatypes-instance#object""/>
+    </columns>
+    <columns xmi:uuid=""mmuuid:333489ca-63ea-47f9-860f-a0f75573e650"" name=""TradeID"" nameInSource=""tradeId"" nativeType=""long"" uniqueKeys=""mmuuid/7391b873-c70b-40f9-9017-11c28a686a55"">
+      <type href=""http://www.w3.org/2001/XMLSchema#long""/>
+    </columns>
+    <columns xmi:uuid=""mmuuid:b9798e5b-e3aa-492f-93c9-9861f5bfef11"" name=""TradeName"" nameInSource=""name"">
+      <type href=""http://www.w3.org/2001/XMLSchema#string""/>
+    </columns>
+    <columns xmi:uuid=""mmuuid:adbd034d-75ec-498a-8f75-8f386869d23c"" name=""Settled"" nameInSource=""settled"" nativeType=""boolean"">
+      <type href=""http://www.w3.org/2001/XMLSchema#boolean""/>
+    </columns>
+    <columns xmi:uuid=""mmuuid:1529660e-939c-4042-8059-f760545667d7"" name=""TradeDate"" nameInSource=""tradeDate"" nativeType=""java.util.Date"">
+      <type href=""http://www.w3.org/2001/XMLSchema#date""/>
+    </columns>
+    <columns xmi:uuid=""mmuuid:19eb9a3f-4d65-4f5b-a7f9-e5996a365d7c"" name=""CustomerId"" nameInSource=""customerId"">
+      <type href=""http://www.w3.org/2001/XMLSchema#long""/>
+    </columns>
+    <primaryKey xmi:uuid=""mmuuid:7391b873-c70b-40f9-9017-11c28a686a55"" name=""PK_ID"" columns=""mmuuid/333489ca-63ea-47f9-860f-a0f75573e650""/>
+  </relational:BaseTable>
 </xmi:XMI>",2016-06-24T19:44:32Z,120
"@@ -1,13 +1,14 @@
 <?xml version=""1.0"" encoding=""ASCII""?>
 <xmi:XMI xmi:version=""2.0"" xmlns:xmi=""http://www.omg.org/XMI"" xmlns:diagram=""http://www.metamatrix.com/metamodels/Diagram"" xmlns:jdbc=""http://www.metamatrix.com/metamodels/JDBC"" xmlns:mmcore=""http://www.metamatrix.com/metamodels/Core"" xmlns:relational=""http://www.metamatrix.com/metamodels/Relational"">
-  <mmcore:ModelAnnotation xmi:uuid=""mmuuid:abbd65a2-2896-4819-9428-fa8ba13a1b71"" primaryMetamodelUri=""http://www.metamatrix.com/metamodels/Relational"" modelType=""PHYSICAL"" ProducerName=""Teiid Designer"" ProducerVersion=""9.1.0.Beta2-v20150624-2132-B3933"">
+  <mmcore:ModelAnnotation xmi:uuid=""mmuuid:abbd65a2-2896-4819-9428-fa8ba13a1b71"" primaryMetamodelUri=""http://www.metamatrix.com/metamodels/Relational"" modelType=""PHYSICAL"" ProducerName=""Teiid Designer"" ProducerVersion=""10.0.1.Nightly-v20160622-1945-B8"">
     <modelImports xmi:uuid=""mmuuid:7c40d324-5eca-472f-a7a8-c20b01f5d848"" name=""SimpleDatatypes-instance"" modelLocation=""http://www.metamatrix.com/metamodels/SimpleDatatypes-instance"" modelType=""TYPE"" primaryMetamodelUri=""http://www.eclipse.org/xsd/2002/XSD""/>
     <modelImports xmi:uuid=""mmuuid:4414223d-d6b6-4300-87ce-4316eeb5ddcb"" name=""XMLSchema"" modelLocation=""http://www.w3.org/2001/XMLSchema"" modelType=""TYPE"" primaryMetamodelUri=""http://www.eclipse.org/xsd/2002/XSD""/>
   </mmcore:ModelAnnotation>
   <diagram:DiagramContainer xmi:uuid=""mmuuid:060329df-f071-436c-91d8-8de84f4a38b3"">
     <diagram xmi:uuid=""mmuuid:0d512295-f6e7-418d-8409-f7e689137c68"" type=""packageDiagramType"" target=""mmuuid/abbd65a2-2896-4819-9428-fa8ba13a1b71"">
       <diagramEntity xmi:uuid=""mmuuid:b81484fc-8676-4c01-a0fb-8c82fdc3744d"" name=""Trade"" modelObject=""mmuuid/e4662c1d-443f-45a8-8623-8a4876ea7539"" xPosition=""20"" yPosition=""20""/>
-      <diagramEntity xmi:uuid=""mmuuid:232a8473-80d4-495b-900e-415be34eef35"" name=""Leg"" modelObject=""mmuuid/e1093478-579b-4a84-ad31-8c2a0bdce936"" xPosition=""204"" yPosition=""163""/>
+      <diagramEntity xmi:uuid=""mmuuid:232a8473-80d4-495b-900e-415be34eef35"" name=""Leg"" modelObject=""mmuuid/e1093478-579b-4a84-ad31-8c2a0bdce936"" xPosition=""429"" yPosition=""164""/>
+      <diagramEntity xmi:uuid=""mmuuid:f7d5db68-5c8b-4be7-ba56-6268d3a328f2"" name=""Trade_Errors"" modelObject=""mmuuid/2404168a-7cde-477e-8b09-dd9263baa7ac"" xPosition=""20"" yPosition=""20""/>
     </diagram>
   </diagram:DiagramContainer>
   <mmcore:AnnotationContainer xmi:uuid=""mmuuid:146acc5c-ec00-4c47-b40f-bcde7a260d72"">
@@ -319,8 +320,8 @@
     </importSettings>
   </jdbc:JdbcSource>
   <relational:BaseTable xmi:uuid=""mmuuid:e4662c1d-443f-45a8-8623-8a4876ea7539"" name=""Trade"" nameInSource=""Trades"">
-    <columns xmi:uuid=""mmuuid:73b0ec15-2abe-4f72-b25e-b9113b528b41"" name=""TradeObject"" nameInSource=""this"" nativeType="""" length=""4000"" nullable=""NULLABLE_UNKNOWN"" caseSensitive=""false"" searchability=""UNSEARCHABLE"" radix=""0"" signed=""false"" distinctValueCount=""0"" nullValueCount=""0"">
-      <type href=""http://www.metamatrix.com/metamodels/SimpleDatatypes-instance#XMLLiteral""/>
+    <columns xmi:uuid=""mmuuid:73b0ec15-2abe-4f72-b25e-b9113b528b41"" name=""TradeObject"" nameInSource=""this"" nativeType=""var_binary"" length=""4000"" nullable=""NULLABLE_UNKNOWN"" defaultValue="""" collationName="""" caseSensitive=""false"" searchability=""UNSEARCHABLE"" radix=""0"" signed=""false"" distinctValueCount=""0"">
+      <type href=""http://www.metamatrix.com/metamodels/SimpleDatatypes-instance#object""/>
     </columns>
     <columns xmi:uuid=""mmuuid:7ad19ea9-1751-49e0-89c7-e759dd50ff46"" name=""TradeID"" nameInSource=""tradeId"" nativeType=""long"" uniqueKeys=""mmuuid/6bee1ce8-0ac1-4ee0-a0a8-d200e2936b86"">
       <type href=""http://www.w3.org/2001/XMLSchema#long""/>
@@ -351,4 +352,25 @@
     </columns>
     <foreignKeys xmi:uuid=""mmuuid:bcc9abfb-bfc4-4102-9505-66f1667e5efd"" name=""FK_TradeId"" nameInSource=""legs"" columns=""mmuuid/3b7be33a-2e50-4c79-9cdc-13d7b166a2d2"" uniqueKey=""mmuuid/6bee1ce8-0ac1-4ee0-a0a8-d200e2936b86""/>
   </relational:BaseTable>
+  <relational:BaseTable xmi:uuid=""mmuuid:2404168a-7cde-477e-8b09-dd9263baa7ac"" name=""Trade_Errors"" nameInSource=""Trade_Errors"">
+    <columns xmi:uuid=""mmuuid:5aafafd0-dcf5-4d1d-9977-d6024d6b0260"" name=""TradeObject"" nameInSource=""this"" nativeType=""var_binary"" length=""4000"" nullable=""NULLABLE_UNKNOWN"" defaultValue="""" collationName="""" caseSensitive=""false"" searchability=""UNSEARCHABLE"" radix=""0"" signed=""false"" distinctValueCount=""0"">
+      <type href=""http://www.metamatrix.com/metamodels/SimpleDatatypes-instance#object""/>
+    </columns>
+    <columns xmi:uuid=""mmuuid:333489ca-63ea-47f9-860f-a0f75573e650"" name=""TradeID"" nameInSource=""tradeId"" nativeType=""long"" uniqueKeys=""mmuuid/7391b873-c70b-40f9-9017-11c28a686a55"">
+      <type href=""http://www.w3.org/2001/XMLSchema#long""/>
+    </columns>
+    <columns xmi:uuid=""mmuuid:b9798e5b-e3aa-492f-93c9-9861f5bfef11"" name=""TradeName"" nameInSource=""name"">
+      <type href=""http://www.w3.org/2001/XMLSchema#string""/>
+    </columns>
+    <columns xmi:uuid=""mmuuid:adbd034d-75ec-498a-8f75-8f386869d23c"" name=""Settled"" nameInSource=""settled"" nativeType=""boolean"">
+      <type href=""http://www.w3.org/2001/XMLSchema#boolean""/>
+    </columns>
+    <columns xmi:uuid=""mmuuid:1529660e-939c-4042-8059-f760545667d7"" name=""TradeDate"" nameInSource=""tradeDate"" nativeType=""java.util.Date"">
+      <type href=""http://www.w3.org/2001/XMLSchema#date""/>
+    </columns>
+    <columns xmi:uuid=""mmuuid:19eb9a3f-4d65-4f5b-a7f9-e5996a365d7c"" name=""CustomerId"" nameInSource=""customerId"">
+      <type href=""http://www.w3.org/2001/XMLSchema#long""/>
+    </columns>
+    <primaryKey xmi:uuid=""mmuuid:7391b873-c70b-40f9-9017-11c28a686a55"" name=""PK_ID"" columns=""mmuuid/333489ca-63ea-47f9-860f-a0f75573e650""/>
+  </relational:BaseTable>
 </xmi:XMI>",2016-06-24T19:44:32Z,121
"@@ -77,6 +77,10 @@ public ODataProducer getContext(Class<?> arg0) {
 			vdbName = getInitParameters().getProperty(""allow-vdb""); //$NON-NLS-1$		
 		}
 		
+		if (vdbName == null) {
+		    throw new TeiidRuntimeException(ODataPlugin.Util.gs(ODataPlugin.Event.TEIID16008));
+		}
+		
 		int versionIdx = vdbName.indexOf('.');
 		if (versionIdx != -1) {
 			version = Integer.parseInt(vdbName.substring(versionIdx+1));",2015-03-20T15:06:37Z,122
"@@ -21,9 +21,11 @@
  */
 package org.teiid.translator.odata;
 
-import static org.teiid.language.visitor.SQLStringVisitor.getRecordName;
+import static org.teiid.language.visitor.SQLStringVisitor.*;
 
 import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.LinkedHashMap;
 import java.util.List;
 
 import org.odata4j.edm.*;
@@ -120,7 +122,46 @@ static EdmEntityContainer.Builder findEntityContainer(List<Builder> edmSchemas,
 	public static void buildEntityTypes(Schema schema, List<EdmSchema.Builder> edmSchemas, boolean preserveEntityTypeName) {
 		List<EdmEntitySet.Builder> entitySets = new ArrayList<EdmEntitySet.Builder>();
 		List<EdmEntityType.Builder> entityTypes = new ArrayList<EdmEntityType.Builder>();
+		LinkedHashMap<String, EdmComplexType.Builder> complexTypes = new LinkedHashMap<String, EdmComplexType.Builder>();
 	    
+		//first pass, build complex types
+		for (Table table: schema.getTables().values()) {
+			// skip if the table does not have the PK or unique
+			KeyRecord primaryKey = table.getPrimaryKey();
+			List<KeyRecord> uniques = table.getUniqueKeys();
+			if (primaryKey == null && uniques.isEmpty()) {
+				LogManager.logDetail(LogConstants.CTX_ODATA, ODataPlugin.Util.gs(ODataPlugin.Event.TEIID17017, table.getFullName()));
+				continue;
+			}
+			
+			for (Column c : table.getColumns()) {
+				String name = c.getSourceName();
+				String complexType = c.getProperty(ODataMetadataProcessor.COMPLEX_TYPE, false);
+				if (complexType == null) {
+					continue;
+				}
+				EdmComplexType.Builder complexTypeBuilder = complexTypes.get(complexType);
+				if (complexTypeBuilder == null) {
+					complexTypeBuilder = EdmComplexType.newBuilder();
+					complexTypes.put(complexType, complexTypeBuilder); 
+					complexTypeBuilder.setName(complexType);
+					complexTypeBuilder.setNamespace(schema.getName());
+				} else if (complexTypeBuilder.findProperty(name) != null) {
+					continue; //already added
+				}
+				EdmProperty.Builder property = EdmProperty.newBuilder(c.getSourceName())
+						.setType(ODataTypeManager.odataType(c.getRuntimeType()))
+						.setNullable(isPartOfPrimaryKey(table, c.getName())?false:c.getNullType() == NullType.Nullable);
+				if (c.getRuntimeType().equals(DataTypeManager.DefaultDataTypes.STRING)) {
+					property.setFixedLength(c.isFixedLength())
+						.setMaxLength(c.getLength())
+						.setUnicode(true);
+				}
+				complexTypeBuilder.addProperties(property);
+			}
+		}
+		
+		//second pass, add all columns
 		for (Table table: schema.getTables().values()) {
 			
 			// skip if the table does not have the PK or unique
@@ -150,10 +191,22 @@ public static void buildEntityTypes(Schema schema, List<EdmSchema.Builder> edmSc
 					entityType.addKeys(c.getName());
 				}
 	    	}
-			
+	    	
+	    	HashSet<String> columnGroups = new HashSet<String>();
 			// adding properties
 			for (Column c : table.getColumns()) {
-				EdmProperty.Builder property = EdmProperty.newBuilder(c.getName())
+				String complexType = c.getProperty(ODataMetadataProcessor.COMPLEX_TYPE, false);
+				if (complexType != null) {
+					String columnGroup = c.getProperty(ODataMetadataProcessor.COLUMN_GROUP, false);
+					if (!columnGroups.add(columnGroup)) {
+						continue;
+					}
+					EdmProperty.Builder property = EdmProperty.newBuilder(columnGroup)
+							.setType(complexTypes.get(complexType).build());
+					entityType.addProperties(property);
+					continue;
+				}
+				EdmProperty.Builder property = EdmProperty.newBuilder(c.getSourceName())
 						.setType(ODataTypeManager.odataType(c.getRuntimeType()))
 						.setNullable(isPartOfPrimaryKey(table, c.getName())?false:c.getNullType() == NullType.Nullable);
 				if (c.getRuntimeType().equals(DataTypeManager.DefaultDataTypes.STRING)) {
@@ -186,7 +239,8 @@ public static void buildEntityTypes(Schema schema, List<EdmSchema.Builder> edmSc
 		EdmSchema.Builder modelSchema = EdmSchema.newBuilder()
 				.setNamespace(schema.getName())
 				.addEntityTypes(entityTypes)
-				.addEntityContainers(entityContainer);
+				.addEntityContainers(entityContainer)
+				.addComplexTypes(complexTypes.values());
 		
 		edmSchemas.add(modelSchema);
 	}	",2015-06-18T00:36:50Z,12
"@@ -178,7 +178,7 @@ protected Table addEntitySetAsTable(MetadataFactory mf, EdmEntitySet entitySet)
 					        || (property.getType() instanceof EdmCollectionType 
 		                    && ((EdmCollectionType)property.getType()).getItemType().isSimple())) {
 						Column column = addPropertyAsColumn(mf, table, property, entitySet, ep.getName());
-						column.setProperty(COMPLEX_TYPE, embedded.getName()); // complex type
+						column.setProperty(COMPLEX_TYPE, embedded.getFullyQualifiedTypeName()); // complex type
 						column.setProperty(COLUMN_GROUP, ep.getName()); // name of parent column
 					}
 					else {",2015-06-18T00:36:50Z,123
"@@ -151,9 +151,10 @@ public void testSimpleSelectEmbedded() throws Exception {
 		String query = ""SELECT * FROM Customers"";
 		String expectedURL = ""Customers?$select=CustomerID,CompanyName,ContactName,ContactTitle,Mailing,Shipping"";
 		
-		FileReader reader = new FileReader(UnitTestUtil.getTestDataFile(""categories.xml""));
+		FileReader reader = new FileReader(UnitTestUtil.getTestDataFile(""customer.xml""));
 		ResultSetExecution excution = helpExecute(query, ObjectConverterUtil.convertToString(reader), expectedURL);
 		reader.close();
+		assertEquals(18, excution.next().size());
 	}	
 	
 	@Test",2015-06-18T00:36:50Z,124
"@@ -12,18 +12,28 @@
     </author>
     <content type=""application/xml"">
         <m:properties>
+           <d:Shipping m:type=""NorthwindModel.Address"">
+                <d:Address>Obere Str. 57</d:Address>
+                <d:City>Berlin</d:City>
+                <d:Region m:null=""true"" />
+                <d:PostalCode>12209</d:PostalCode>
+                <d:Country>Germany</d:Country>
+                <d:Phone>030-0074321</d:Phone>
+                <d:Fax>030-0076545</d:Fax>
+            </d:Shipping>
+            <d:Mailing m:type=""NorthwindModel.Address"">
+                <d:Address>Obere Str. 57</d:Address>
+                <d:City>Berlin</d:City>
+                <d:Region m:null=""true"" />
+                <d:PostalCode>12209</d:PostalCode>
+                <d:Country>Germany</d:Country>
+                <d:Phone>030-0074321</d:Phone>
+                <d:Fax>030-0076545</d:Fax>
+            </d:Mailing>
             <d:CustomerID>ALFKI</d:CustomerID>
             <d:CompanyName>Alfreds Futterkiste</d:CompanyName>
             <d:ContactName>Maria Anders</d:ContactName>
             <d:ContactTitle>Sales Representative</d:ContactTitle>
-            <d:Address>Obere Str. 57</d:Address>
-            <d:City>Berlin</d:City>
-            <d:Region m:null=""true"" />
-            <d:PostalCode>12209</d:PostalCode>
-            <d:Country>Germany</d:Country>
-            <d:Phone>030-0074321</d:Phone>
-            <d:Fax>030-0076545</d:Fax>
         </m:properties>
     </content>
 </entry>
-F
\ No newline at end of file",2015-06-18T00:36:50Z,125
"@@ -111,6 +111,7 @@ protected Object convertToken(String group) {
 	public static final Version TWO_0 = Version.getVersion(""2.0""); //$NON-NLS-1$
 	
 	private Version postGisVersion = Version.DEFAULT_VERSION;
+	private boolean projSupported = false;
     
 	public PostgreSQLExecutionFactory() {
 		setMaxDependentInPredicates(1);
@@ -239,9 +240,19 @@ public void initCapabilities(Connection connection)
     	ResultSet rs = null;
     	try {
 	    	s = connection.createStatement();
-	    	rs = s.executeQuery(""select PostGIS_Lib_Version()""); //$NON-NLS-1$
+	    	rs = s.executeQuery(""SELECT PostGIS_Full_Version()""); //$NON-NLS-1$
 	    	rs.next();
-	    	this.setPostGisVersion(rs.getString(1));
+	    	String versionInfo = rs.getString(1);
+	    	if (versionInfo != null) {
+	    		if (versionInfo.contains(""PROJ="")) { //$NON-NLS-1$
+	    			projSupported = true;
+	    		}
+	    		int index = versionInfo.indexOf(""POSTGIS="");
+	    		if (index > -1) {
+	    			String version = versionInfo.substring(index+9, versionInfo.indexOf('""', index+9));
+	    	    	this.setPostGisVersion(version);
+	    		}
+	    	}
     	} catch (SQLException e) {
     		LogManager.logDetail(LogConstants.CTX_CONNECTOR, e, ""Could not determine PostGIS version""); //$NON-NLS-1$
     	} finally {
@@ -583,6 +594,10 @@ public List<String> getSupportedFunctions() {
         if (this.postGisVersion.compareTo(TWO_0) >= 0) {
         	supportedFunctions.add(SourceSystemFunctions.ST_GEOMFROMGEOJSON);
         }
+        if (this.projSupported) {
+        	supportedFunctions.add(SourceSystemFunctions.ST_TRANSFORM);
+        	supportedFunctions.add(SourceSystemFunctions.ST_ASKML);
+        }
         return supportedFunctions;
     }
     
@@ -756,6 +771,15 @@ public String getPostGisVersion() {
 		return postGisVersion.toString();
 	}
     
+    public boolean isProjSupported() {
+		return projSupported;
+	}
+    
+    @TranslatorProperty(display=""Proj support enabled"", description=""If PostGIS Proj support is enabled for ST_TRANSFORM"",advanced=true)
+    public void setProjSupported(boolean projSupported) {
+		this.projSupported = projSupported;
+	}
+    
     @Override
     public MetadataProcessor<Connection> getMetadataProcessor() {
     	return new JDBCMetdataProcessor() {",2015-03-16T15:11:59Z,126
"@@ -75,18 +75,18 @@ public static ClobType asGeoJson(GeometryType geometry)
                    category=FunctionCategoryConstants.GEOMETRY,
         		   pushdown=PushDown.CAN_PUSHDOWN,
                    nullOnNull=true)
-    public static ClobType asGml(GeometryType geometry) 
+    public static ClobType asGml(CommandContext context, GeometryType geometry) 
             throws FunctionExecutionException {
-        return GeometryUtils.geometryToGml(geometry, true);
+        return GeometryUtils.geometryToGml(context, geometry, true);
     }
 
     @TeiidFunction(name=SourceSystemFunctions.ST_ASKML,
                    category=FunctionCategoryConstants.GEOMETRY,
                    pushdown=PushDown.CAN_PUSHDOWN,
                    nullOnNull=true)
-    public static ClobType asKml(GeometryType geometry) 
+    public static ClobType asKml(CommandContext context, GeometryType geometry) 
             throws FunctionExecutionException {
-        return GeometryUtils.geometryToGml(geometry, false);
+        return GeometryUtils.geometryToGml(context, geometry, false);
     }
     
     @TeiidFunction(name=SourceSystemFunctions.ST_GEOMFROMTEXT,",2015-03-16T15:11:59Z,127
"@@ -22,19 +22,10 @@
 
 package org.teiid.query.function;
 
-import com.vividsolutions.jts.geom.Coordinate;
-import com.vividsolutions.jts.geom.Geometry;
-import com.vividsolutions.jts.geom.GeometryCollection;
-import com.vividsolutions.jts.geom.LineString;
-import com.vividsolutions.jts.geom.LinearRing;
-import com.vividsolutions.jts.geom.MultiLineString;
-import com.vividsolutions.jts.geom.MultiPoint;
-import com.vividsolutions.jts.geom.MultiPolygon;
-import com.vividsolutions.jts.geom.Point;
-import com.vividsolutions.jts.geom.Polygon;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+
 import org.osgeo.proj4j.CRSFactory;
 import org.osgeo.proj4j.CoordinateReferenceSystem;
 import org.osgeo.proj4j.CoordinateTransform;
@@ -46,6 +37,8 @@
 import org.teiid.jdbc.TeiidConnection;
 import org.teiid.query.QueryPlugin;
 
+import com.vividsolutions.jts.geom.*;
+
 /**
  * Wrapper around proj4j library to transform geometries to different coordinate
  * systems (ST_Transform).
@@ -66,15 +59,29 @@ public static GeometryType transform(CommandContext ctx,
                                          GeometryType geom,
                                          int srid)
             throws FunctionExecutionException {
-        String srcParam = lookupProj4Text(ctx, geom.getSrid());
-        String tgtParam = lookupProj4Text(ctx, srid);
-
         Geometry jtsGeomSrc = GeometryUtils.getGeometry(geom);
-        Geometry jtsGeomTgt = transform(jtsGeomSrc, srcParam, tgtParam);
+
+        Geometry jtsGeomTgt = transform(ctx, jtsGeomSrc, srid);
 
         return GeometryUtils.getGeometryType(jtsGeomTgt, srid);
     }
 
+    /**
+     * Convert the raw geometry to the target srid coordinate system.
+     * @param ctx Command context used to lookup proj4 parameters from table.
+     * @param jtsGeomSrc Geometry to transform.
+     * @param srid Target SRID; must exist in SPATIAL_REF_SYS table.
+     * @return
+     * @throws FunctionExecutionException
+     */
+	static Geometry transform(CommandContext ctx, Geometry jtsGeomSrc, int srid) throws FunctionExecutionException {
+		String srcParam = lookupProj4Text(ctx, jtsGeomSrc.getSRID());
+        String tgtParam = lookupProj4Text(ctx, srid);
+
+        Geometry jtsGeomTgt = transform(jtsGeomSrc, srcParam, tgtParam);
+		return jtsGeomTgt;
+	}
+
     /**
      * Lookup proj4 parameters in SPATIAL_REF_SYS using SRID as key.
      *",2015-03-16T15:11:59Z,9
"@@ -31,6 +31,7 @@
 import javax.xml.parsers.SAXParser;
 import javax.xml.parsers.SAXParserFactory;
 
+import org.teiid.CommandContext;
 import org.teiid.api.exception.query.FunctionExecutionException;
 import org.teiid.core.types.BlobType;
 import org.teiid.core.types.ClobImpl;
@@ -137,15 +138,18 @@ public static GeometryType geometryFromGeoJson(ClobType json, int srid)
         }
     }    
     
-    public static ClobType geometryToGml(GeometryType geometry, 
+    public static ClobType geometryToGml(CommandContext ctx, GeometryType geometry, 
                                          boolean withGmlPrefix) 
             throws FunctionExecutionException {        
         Geometry jtsGeometry = getGeometry(geometry);
         GMLWriter writer = new GMLWriter();
         
         if (!withGmlPrefix) {
         	if (geometry.getSrid() != SRID_4326) {
-        		throw new FunctionExecutionException(QueryPlugin.Util.gs(QueryPlugin.Event.TEIID31161));
+        		if (geometry.getSrid() == GeometryType.UNKNOWN_SRID) {
+        			throw new FunctionExecutionException(QueryPlugin.Util.gs(QueryPlugin.Event.TEIID31161));
+        		}
+        		jtsGeometry = GeometryTransformUtils.transform(ctx, jtsGeometry, SRID_4326);
         	}
             writer.setPrefix(null);
         } else if (geometry.getSrid() != GeometryType.UNKNOWN_SRID) {",2015-03-16T15:11:59Z,128
"@@ -36,6 +36,7 @@
 import org.teiid.core.types.GeometryType;
 import org.teiid.core.types.XMLType;
 import org.teiid.query.eval.Evaluator;
+import org.teiid.query.function.GeometryTransformUtils;
 import org.teiid.query.function.GeometryUtils;
 import org.teiid.query.resolver.TestFunctionResolving;
 import org.teiid.query.sql.symbol.Expression;
@@ -47,7 +48,6 @@
 import com.vividsolutions.jts.io.OutputStreamOutStream;
 import com.vividsolutions.jts.io.WKBWriter;
 import com.vividsolutions.jts.io.WKTReader;
-import org.teiid.query.function.GeometryTransformUtils;
 
 @SuppressWarnings(""nls"")
 public class TestGeometry {
@@ -187,6 +187,11 @@ public void testAsKml() throws Exception {
                    ""</Polygon>\n"");
     }
     
+    @Test(expected=ExpressionEvaluationException.class)
+    public void testAsKmlException() throws Exception {
+        assertEval(""ST_AsKML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))'))"", null);
+    }
+    
     private void assertEval(String expr, String result) 
             throws Exception {
         Expression ex = TestFunctionResolving.getExpression(expr);        ",2015-03-16T15:11:59Z,129
"@@ -39,6 +39,7 @@
  * function uses the command context to lookup values from the SPATIAL_REF_SYS
  * system table.
  */
+@SuppressWarnings(""nls"")
 public class TestGeometryTransform extends AbstractQueryTest {
 
     private static final String VDB = ""PartsSupplier""; //$NON-NLS-1$
@@ -127,4 +128,15 @@ private void assertTransformFail(String wkt, int srcSrid, int tgtSrid, String ex
                 ""POINT (2.1145411092971056 50.345602339855326)""
         );
     }
+    
+    @Test public void testTransformForKml() throws Exception {
+    	String wkt= ""POINT(390084.12 5025551.73)"";
+    	int srcSrid = 32632;
+    	String sql = String.format(""select ST_AsKML(ST_GeomFromText('%s',%d))"", wkt, srcSrid); //$NON-NLS-1$
+        execute(sql);
+        internalResultSet.next();
+        String result = ClobType.getString(internalResultSet.getClob(1));
+        String expectedWkt = ""<Point>\n  <coordinates>\n    7.596214015140495,45.37485400208321 \n  </coordinates>\n</Point>\n"";
+        Assert.assertEquals(expectedWkt, result);
+    }
 }",2015-03-16T15:11:59Z,130
"@@ -7,11 +7,22 @@ TEIID_VERSION=$(xmllint --xpath '/*/*[local-name()=""version""]/text()' pom.xml)
 TEIID_DIST=teiid-${TEIID_VERSION}-jboss-dist.zip
 
 SOURCES=(
-    ""http://download.jboss.org/jbosseap/6/jboss-eap-6.1.0.Alpha/jboss-eap-6.1.0.Alpha.zip""
-    ""http://sourceforge.net/projects/resteasy/files/Resteasy%20JAX-RS/2.3.6.Final/resteasy-jaxrs-2.3.6.Final-all.zip""
-    ""http://sourceforge.net/projects/teiid/files/webconsole/1.2/Final/teiid-console-dist-1.2.0.Final-jboss-as7.zip""
+    ""jboss-eap.zip""
+    ""resteasy-jaxrs.zip""
+    ""teiid-console-dist.zip""
 )
 
+declare -A SOURCE_URL SOURCE_SHA1
+
+SOURCE_URL[""jboss-eap.zip""]=""http://download.jboss.org/jbosseap/6/jboss-eap-6.1.0.Alpha/jboss-eap-6.1.0.Alpha.zip""
+SOURCE_SHA1[""jboss-eap.zip""]=""630d81f83b851077e3ad129924502bbdf0c1552a""
+
+SOURCE_URL[""resteasy-jaxrs.zip""]=""http://sourceforge.net/projects/resteasy/files/Resteasy%20JAX-RS/2.3.6.Final/resteasy-jaxrs-2.3.6.Final-all.zip""
+SOURCE_SHA1[""resteasy-jaxrs.zip""]=""cfcb2aaa60cd954d04e73cc7e99509ec38b5538a""
+
+SOURCE_URL[""teiid-console-dist.zip""]=""http://sourceforge.net/projects/teiid/files/webconsole/1.2/Final/teiid-console-dist-1.2.0.Final-jboss-as7.zip""
+SOURCE_SHA1[""teiid-console-dist.zip""]=""7b57b77520f2894b0f48a385f7dcff03898bb514""
+
 set -e
 
 echo ""Making install for Teiid $TEIID_VERSION...""
@@ -31,10 +42,35 @@ mkdir -p install
 cd install
 
 ## Download extra packages for server.
-echo ""Downloading extra packages...""
-wget -nc ${SOURCES[@]}
-ln -sf ../build/target/$TEIID_DIST .
+echo ""Downloading packages...""
 echo
+for NAME in ""${SOURCES[@]}"";
+do
+    URL=""${SOURCE_URL[$NAME]}""
+    
+    ## Download if doesn't exist.
+    if [ ! -e ""$NAME"" ];
+    then	
+	echo ""Downloading $NAME...""
+	wget -O ""$NAME"" ""$URL""
+	echo
+    fi    
+done
+
+## Verify sources match checksums.
+echo ""Verifying checksums...""
+echo
+for NAME in ""${SOURCES[@]}"";
+do
+    SHA1=""${SOURCE_SHA1[$NAME]}""
+    
+    ## Verify checksum.
+    echo ""$SHA1 $NAME"" | sha1sum -c -
+    echo
+done
+
+## Create softlink for Teiid dist.
+ln -sf ../build/target/$TEIID_DIST .
 
 rm -rf temp
 mkdir temp",2014-10-02T06:53:40Z,89
"@@ -65,21 +65,6 @@ public ResultSetExecution createResultSetExecution(QueryExpression command,
 		return new ObjectExecution((Select) command, metadata, this, connection, executionContext);
 	}
 
-	@Override
-	public boolean supportsInnerJoins() {
-		return false;
-	}
-
-	@Override
-	public boolean supportsOuterJoins() {
-		return false;
-	}
-
-	@Override
-	public boolean supportsFullOuterJoins() {
-		return false;
-	}
-
 	@Override
     public boolean supportsCompareCriteriaEquals() {
 		return true;
@@ -94,6 +79,7 @@ public boolean supportsInCriteria() {
 	public boolean supportsOnlyLiteralComparison() {
 		return true;
 	}
+	
 	public  List<Object> search(Select command, String cacheName, ObjectConnection connection,ExecutionContext executionContext) throws TranslatorException {
 		  SearchByKey sbk = new SearchByKey();
 		  Class<?> type = connection.getType(cacheName);",2014-07-28T21:47:56Z,73
"@@ -45,6 +45,9 @@ public  class SearchByKey  {
 
 	public  List<Object> search(Select command, Class<?> rootClass, String cacheName, CacheContainerWrapper cache)
 			throws TranslatorException {
+		LogManager.logTrace(LogConstants.CTX_CONNECTOR,
+				""Perform search by key.""); //$NON-NLS-1$
+		
 		Condition criterion = command.getWhere();
 		List<Object> results = new ArrayList<Object>();
 ",2014-07-28T21:47:56Z,5
"@@ -80,6 +80,10 @@ public boolean supportsCompareCriteriaOrdered() {
 		return isFullTextSearchingSupported();
 	}
 	
+	@Override
+	public boolean supportsNotCriteria() {
+		return isFullTextSearchingSupported();	}
+
 	@Override
 	public boolean supportsLikeCriteria() {
 		// at this point, i've been unable to get the Like to work.",2014-07-28T21:47:56Z,131
"@@ -56,6 +56,9 @@ public final class LuceneSearch   {
 
 	public static List<Object> performSearch(Select command, Class<?> type, String cacheName, CacheContainerWrapper cache)
 			throws TranslatorException {
+		LogManager.logTrace(LogConstants.CTX_CONNECTOR,
+				""Perform lucene search.""); //$NON-NLS-1$
+		
 		//Map<?, ?> cache, 
 		SearchManager searchManager = Search
 				.getSearchManager((Cache<?, ?>) cache.getCache(cacheName) );",2014-07-28T21:47:56Z,44
"@@ -347,6 +347,12 @@ public List<String> getSupportedFunctions() {
         return supportedFunctions;
     }
 
+    @Deprecated
+    @Override
+    protected JDBCMetdataProcessor createMetadataProcessor() {
+        return (HiveMetadataProcessor)getMetadataProcessor();
+    }
+    
     @Override
     public MetadataProcessor<Connection> getMetadataProcessor(){
         return new HiveMetadataProcessor();",2014-04-01T13:36:58Z,132
"@@ -22,21 +22,30 @@
 
 package org.teiid.translator.jdbc.excel;
 
+import java.sql.Connection;
+
+import org.teiid.translator.MetadataProcessor;
 import org.teiid.translator.Translator;
 import org.teiid.translator.jdbc.JDBCExecutionFactory;
 import org.teiid.translator.jdbc.JDBCMetdataProcessor;
 
 @Translator(name=""excel-odbc"", description=""A translator for Excel using the JDBC-ODBC bridge"")
 public class ExcelExecutionFactory extends JDBCExecutionFactory {
 	
-	@Override
-	protected JDBCMetdataProcessor createMetadataProcessor() {
-		return new JDBCMetdataProcessor() {
-			@Override
-			protected String quoteName(String name) {
-				return '[' + name + ']';
-			}
-		};
-	}
+    @Override
+    @Deprecated
+    protected JDBCMetdataProcessor createMetadataProcessor() {
+        return (JDBCMetdataProcessor)getMetadataProcessor();
+    }    
+    
+    @Override
+    public MetadataProcessor<Connection> getMetadataProcessor() {
+        return new JDBCMetdataProcessor() {
+            @Override
+            protected String quoteName(String name) {
+                return '[' + name + ']';
+            }
+        };
+    }	
 
 }",2014-04-01T13:36:58Z,133
"@@ -22,28 +22,22 @@
 
 package org.teiid.translator.jdbc.modeshape;
 
-import static org.teiid.translator.TypeFacility.RUNTIME_NAMES.*;
+import static org.teiid.translator.TypeFacility.RUNTIME_NAMES.BOOLEAN;
+import static org.teiid.translator.TypeFacility.RUNTIME_NAMES.STRING;
 
+import java.sql.Connection;
 import java.sql.Date;
 import java.sql.Time;
 import java.sql.Timestamp;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
-import org.teiid.language.Comparison;
+import org.teiid.language.*;
 import org.teiid.language.Comparison.Operator;
-import org.teiid.language.Function;
-import org.teiid.language.LanguageObject;
-import org.teiid.language.Literal;
-import org.teiid.language.Not;
 import org.teiid.logging.LogConstants;
 import org.teiid.logging.LogManager;
-import org.teiid.translator.ExecutionContext;
-import org.teiid.translator.SourceSystemFunctions;
-import org.teiid.translator.Translator;
-import org.teiid.translator.TranslatorException;
-import org.teiid.translator.TypeFacility;
+import org.teiid.translator.*;
 import org.teiid.translator.jdbc.AliasModifier;
 import org.teiid.translator.jdbc.JDBCExecutionFactory;
 import org.teiid.translator.jdbc.JDBCMetdataProcessor;
@@ -253,8 +247,14 @@ public boolean supportsSetQueryOrderBy() {
     	return false;
     }
 	
-	protected JDBCMetdataProcessor createMetadataProcessor() {
-		return new ModeShapeJDBCMetdataProcessor();
-	}
-        
+	@Override
+    @Deprecated
+    protected JDBCMetdataProcessor createMetadataProcessor() {
+        return (JDBCMetdataProcessor)getMetadataProcessor();
+    }    
+    
+    @Override
+    public MetadataProcessor<Connection> getMetadataProcessor() {
+        return new ModeShapeJDBCMetdataProcessor();
+    }	   
 }",2014-04-01T13:36:58Z,97
"@@ -22,28 +22,15 @@
 
 package org.teiid.translator.jdbc.mysql;
 
-import java.sql.Connection;
-import java.sql.Date;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.sql.Time;
-import java.sql.Timestamp;
+import java.sql.*;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
 import org.teiid.language.Function;
 import org.teiid.metadata.Table;
-import org.teiid.translator.SourceSystemFunctions;
-import org.teiid.translator.Translator;
-import org.teiid.translator.TranslatorException;
-import org.teiid.translator.TypeFacility;
-import org.teiid.translator.jdbc.ConvertModifier;
-import org.teiid.translator.jdbc.FunctionModifier;
-import org.teiid.translator.jdbc.JDBCExecutionFactory;
-import org.teiid.translator.jdbc.JDBCMetdataProcessor;
-import org.teiid.translator.jdbc.LocateFunctionModifier;
+import org.teiid.translator.*;
+import org.teiid.translator.jdbc.*;
 
 
 /** 
@@ -393,7 +380,7 @@ public String getHibernateDialectClassName() {
     }
     
     @Override
-    protected JDBCMetdataProcessor createMetadataProcessor() {
+    public MetadataProcessor<Connection> getMetadataProcessor() {
     	return new JDBCMetdataProcessor() {
     		@Override
     		protected void getTableStatistics(Connection conn, String catalog, String schema, String name, Table table) throws SQLException {
@@ -426,4 +413,10 @@ protected void getTableStatistics(Connection conn, String catalog, String schema
     		}
     	};
     }
+    
+    @Override
+    @Deprecated
+    protected JDBCMetdataProcessor createMetadataProcessor() {
+        return (JDBCMetdataProcessor)getMetadataProcessor();
+    }    
 }",2014-04-01T13:36:58Z,134
"@@ -22,15 +22,11 @@
 
 package org.teiid.translator.jdbc.oracle;
 
-import static org.teiid.translator.TypeFacility.RUNTIME_NAMES.*;
+import static org.teiid.translator.TypeFacility.RUNTIME_NAMES.INTEGER;
+import static org.teiid.translator.TypeFacility.RUNTIME_NAMES.OBJECT;
+import static org.teiid.translator.TypeFacility.RUNTIME_NAMES.STRING;
 
-import java.sql.CallableStatement;
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.sql.Timestamp;
-import java.sql.Types;
+import java.sql.*;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -42,6 +38,7 @@
 import org.teiid.language.Like.MatchMode;
 import org.teiid.language.SQLConstants.Tokens;
 import org.teiid.language.SetQuery.Operation;
+import org.teiid.language.Array;
 import org.teiid.language.visitor.CollectorVisitor;
 import org.teiid.language.visitor.SQLStringVisitor;
 import org.teiid.logging.LogConstants;
@@ -50,12 +47,7 @@
 import org.teiid.metadata.Column;
 import org.teiid.metadata.ProcedureParameter;
 import org.teiid.metadata.Table;
-import org.teiid.translator.ExecutionContext;
-import org.teiid.translator.SourceSystemFunctions;
-import org.teiid.translator.Translator;
-import org.teiid.translator.TranslatorException;
-import org.teiid.translator.TranslatorProperty;
-import org.teiid.translator.TypeFacility;
+import org.teiid.translator.*;
 import org.teiid.translator.jdbc.*;
 
 
@@ -116,6 +108,7 @@ static final class FixedCharType {}
 	public OracleExecutionFactory() {
 	}
     
+    @Override
     public void start() throws TranslatorException {
         super.start();
         
@@ -575,7 +568,8 @@ private boolean isFixedChar(Expression obj) {
 								|| ""NCHAR"".equalsIgnoreCase(cr.getMetadataObject().getNativeType())); //$NON-NLS-1$
 			}
     		
-    		public void visit(In obj) {
+    		@Override
+            public void visit(In obj) {
     			if (isFixedChar(obj.getLeftExpression())) {
     				for (Expression exp : obj.getRightExpressions()) {
     					if (exp instanceof Literal) {
@@ -590,7 +584,8 @@ public void visit(In obj) {
     			super.visit(obj);
     		}
     		
-    		public void visit(NamedTable table) {
+    		@Override
+            public void visit(NamedTable table) {
     			stripDualAlias(table);
     			super.visit(table);
     		}
@@ -874,7 +869,13 @@ public boolean supportsArrayType() {
     }
     
     @Override
+    @Deprecated
     protected JDBCMetdataProcessor createMetadataProcessor() {
+        return (JDBCMetdataProcessor)getMetadataProcessor();
+    }    
+    
+    @Override
+    public MetadataProcessor<Connection> getMetadataProcessor() {
     	return new JDBCMetdataProcessor() {
     		@Override
     		protected String getRuntimeType(int type, String typeName,",2014-04-01T13:36:58Z,41
"@@ -24,15 +24,9 @@
  */
 package org.teiid.translator.jdbc.sqlserver;
 
+import java.sql.*;
 import java.sql.Date;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.sql.Timestamp;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 
 import org.teiid.core.util.StringUtil;
 import org.teiid.language.AggregateFunction;
@@ -42,10 +36,7 @@
 import org.teiid.metadata.Column;
 import org.teiid.metadata.MetadataFactory;
 import org.teiid.metadata.Table;
-import org.teiid.translator.ExecutionContext;
-import org.teiid.translator.SourceSystemFunctions;
-import org.teiid.translator.Translator;
-import org.teiid.translator.TypeFacility;
+import org.teiid.translator.*;
 import org.teiid.translator.jdbc.JDBCExecutionFactory;
 import org.teiid.translator.jdbc.JDBCMetdataProcessor;
 import org.teiid.translator.jdbc.Version;
@@ -331,22 +322,29 @@ protected boolean setFetchSize() {
     }
     
     @Override
+    @Deprecated
     protected JDBCMetdataProcessor createMetadataProcessor() {
-    	return new JDBCMetdataProcessor() {
-    		@Override
-    		protected Column addColumn(ResultSet columns, Table table,
-    				MetadataFactory metadataFactory, int rsColumns)
-    				throws SQLException {
-    			Column c = super.addColumn(columns, table, metadataFactory, rsColumns);
-    			//The ms jdbc driver does not correctly report the auto incremented column
-    			if (!c.isAutoIncremented() && c.getNativeType() != null && StringUtil.endsWithIgnoreCase(c.getNativeType(), "" identity"")) { //$NON-NLS-1$
-    				c.setAutoIncremented(true);
-    			}
-    			return c;
-    		}
-    	};
+        return (JDBCMetdataProcessor)getMetadataProcessor();
     }
     
+    @Override
+    public MetadataProcessor<Connection> getMetadataProcessor() {
+        return new JDBCMetdataProcessor() {
+            @Override
+            protected Column addColumn(ResultSet columns, Table table,
+                    MetadataFactory metadataFactory, int rsColumns)
+                    throws SQLException {
+                Column c = super.addColumn(columns, table, metadataFactory, rsColumns);
+                //The ms jdbc driver does not correctly report the auto incremented column
+                if (!c.isAutoIncremented() && c.getNativeType() != null && StringUtil.endsWithIgnoreCase(c.getNativeType(), "" identity"")) { //$NON-NLS-1$
+                    c.setAutoIncremented(true);
+                }
+                return c;
+            }
+        };
+    }
+    
+    
 	@Override
 	protected boolean usesDatabaseVersion() {
 		return true;",2014-04-01T13:36:58Z,135
"@@ -590,6 +590,7 @@ public static enum Event implements BundleUtil.Event{
     	TEIID31177, 
     	TEIID31178, 
     	TEIID31179, 
-    	TEIID31190
+    	TEIID31190, 
+    	TEIID31191
 	}
 }",2016-04-22T11:49:54Z,136
"@@ -59,6 +59,16 @@ public VDBKey(String name, Object version) {
         	}
         } else {
         	this.version = version.toString();
+        	
+        	//double check that the vdb is not ambiguous
+        	int index = name.indexOf("".""); //$NON-NLS-1$
+        	if (index > 0 && index < name.length() - 1) {
+        		String possibleVersion = name.substring(index + 1);
+        		Matcher m  = NAME_PATTERN.matcher(possibleVersion);
+    	        if (m.matches()) {
+	        		throw new TeiidRuntimeException(QueryPlugin.Event.TEIID31191, QueryPlugin.Util.gs(QueryPlugin.Event.TEIID31191, this.name));
+    	        }
+        	}
         }
         
         if (this.version != null) {",2016-04-22T11:49:54Z,16
"@@ -1340,4 +1340,5 @@ TEIID31177=Could not find status table for {0} {1}
 TEIID31178=Could not obtain connection for schema {0}, but one is required for metadata load. 
 TEIID31179=Duplicate variable {1} specified for insert/merge against table {0}.
 
-TEIID31190={0} is not a valid version string.
\ No newline at end of file
+TEIID31190={0} is not a valid version string.
+TEIID31191={0} is not a valid vdb name as it appears to end with a version string.
\ No newline at end of file",2016-04-22T11:49:54Z,137
"@@ -85,4 +85,8 @@ public class TestVDBKey {
     	assertEquals(""a.abc.latest"", key.toString());
     }
     
+    @Test(expected=TeiidRuntimeException.class) public void testInvalidName() {
+    	new VDBKey(""a.1"", ""1"");  //$NON-NLS-1$
+    }
+    
 }",2016-04-22T11:49:54Z,20
"@@ -457,14 +457,7 @@ public FunctionMethod addFunction(String name, Method method) {
 			Class<?> clazz = params[i];
 			if (clazz.isPrimitive()) {
 				nullOnNull = true;
-				if      ( clazz == Boolean.TYPE   ) clazz = Boolean.class;
-	            else if ( clazz == Character.TYPE ) clazz = Character.class;
-	            else if ( clazz == Byte.TYPE      ) clazz = Byte.class;
-	            else if ( clazz == Short.TYPE     ) clazz = Short.class;
-	            else if ( clazz == Integer.TYPE   ) clazz = Integer.class;
-	            else if ( clazz == Long.TYPE      ) clazz = Long.class;
-	            else if ( clazz == Float.TYPE     ) clazz = Float.class;
-	            else if ( clazz == Double.TYPE    ) clazz = Double.class;
+				clazz = TypeFacility.convertPrimitiveToObject(clazz);
 			}
 			paramTypes[i] = DataTypeManager.getDataTypeName(clazz);
 		}
@@ -481,7 +474,7 @@ public FunctionMethod addFunction(String name, Method method) {
 		func.setNullOnNull(nullOnNull);
 		return func;
 	}
-	
+
 	/**
 	 * Set to false to disable correcting column and other names to be valid Teiid names.
 	 * @param autoCorrectColumnNames",2012-10-29T16:20:42Z,6
"@@ -114,19 +114,29 @@ public static final class RUNTIME_NAMES {
     }
     
     /**
-     * Get the Class constant for the given String type name
+     * Get the Class constant for the given String runtime type name
      */
     public static Class<?> getDataTypeClass(String type) {
     	return DataTypeManager.getDataTypeClass(type);    	
     }
     
     /**
-     * Get the String constant for the given type class
+     * Get the String constant for the given runtime type class
      */
     public static String getDataTypeName(Class<?> type) {
     	return DataTypeManager.getDataTypeName(type);    	
     }
     
+    /**
+     * Get the String constant for the given class
+     */
+    public static Class<?> getRuntimeType(Class<?> type) {
+    	if (type.isPrimitive()) {
+    		return convertPrimitiveToObject(type);
+    	}
+    	return DataTypeManager.getRuntimeType(type);    	
+    }
+    
     /**
      * Get the SQL type for the given runtime type Class constant
      * @param type
@@ -162,5 +172,25 @@ public Object convertDate(Date date, TimeZone initial, Calendar target,
 			Class<?> targetType) {
 		return TimestampWithTimezone.create(date, initial, target, targetType);
 	}
+	
+	/**
+	 * Convert a primitive class to the corresponding object class
+	 * @param clazz
+	 * @return
+	 */
+	public static Class<?> convertPrimitiveToObject(Class<?> clazz) {
+		if (!clazz.isPrimitive()) {
+			return clazz;
+		}
+		if      ( clazz == Boolean.TYPE   ) clazz = Boolean.class;
+		else if ( clazz == Character.TYPE ) clazz = Character.class;
+		else if ( clazz == Byte.TYPE      ) clazz = Byte.class;
+		else if ( clazz == Short.TYPE     ) clazz = Short.class;
+		else if ( clazz == Integer.TYPE   ) clazz = Integer.class;
+		else if ( clazz == Long.TYPE      ) clazz = Long.class;
+		else if ( clazz == Float.TYPE     ) clazz = Float.class;
+		else if ( clazz == Double.TYPE    ) clazz = Double.class;
+		return clazz;
+	}
 
 }",2012-10-29T16:20:42Z,42
"@@ -800,37 +800,37 @@ public boolean isExplicit() {
 	}
 
 	static void loadSourceConversions() {
-		addSourceTransform(Clob.class, new SourceTransform<Clob, ClobType>() {
+		addSourceTransform(Clob.class, new SourceTransform<Clob, ClobType>(ClobType.class) {
 			@Override
 			public ClobType transform(Clob value) {
 				return new ClobType(value);
 			}
 		});
-		addSourceTransform(char[].class, new SourceTransform<char[], ClobType>() {
+		addSourceTransform(char[].class, new SourceTransform<char[], ClobType>(ClobType.class) {
 			@Override
 			public ClobType transform(char[] value) {
 				return new ClobType(ClobImpl.createClob(value));
 			}
 		});
-		addSourceTransform(Blob.class, new SourceTransform<Blob, BlobType>() {
+		addSourceTransform(Blob.class, new SourceTransform<Blob, BlobType>(BlobType.class) {
 			@Override
 			public BlobType transform(Blob value) {
 				return new BlobType(value);
 			}
 		});
-		addSourceTransform(byte[].class, new SourceTransform<byte[], BinaryType>() {
+		addSourceTransform(byte[].class, new SourceTransform<byte[], BinaryType>(BinaryType.class) {
 			@Override
 			public BinaryType transform(byte[] value) {
 				return new BinaryType(value);
 			}
 		});
-		addSourceTransform(SQLXML.class, new SourceTransform<SQLXML, XMLType>() {
+		addSourceTransform(SQLXML.class, new SourceTransform<SQLXML, XMLType>(XMLType.class) {
 			@Override
 			public XMLType transform(SQLXML value) {
 				return new XMLType(value);
 			}
 		});
-		addSourceTransform(Date.class, new SourceTransform<Date, Timestamp>() {
+		addSourceTransform(Date.class, new SourceTransform<Date, Timestamp>(Timestamp.class) {
 			@Override
 			public Timestamp transform(Date value) {
 				return new Timestamp(value.getTime());
@@ -857,6 +857,25 @@ public static Object convertToRuntimeType(Object value) {
 		}
 		return value; // ""object type""
 	}
+	
+	public static Class<?> getRuntimeType(Class<?> c) {
+		if (c == null) {
+			return DefaultDataClasses.NULL;
+		}
+		if (DATA_TYPE_CLASSES.contains(c)) {
+			return c;
+		}
+		SourceTransform t = sourceConverters.get(c);
+		if (t != null) {
+			return t.getTargetType();
+		}
+		for (Map.Entry<Class<?>, SourceTransform> entry : sourceConverters.entrySet()) {
+			if (entry.getKey().isAssignableFrom(c)) {
+				return entry.getValue().getTargetType();
+			}
+		}
+		return DefaultDataClasses.OBJECT; // ""object type""
+	}
 
 	@SuppressWarnings(""unchecked"")
 	public static <T> T transformValue(Object value, Class<T> targetClass)",2012-10-29T16:20:42Z,17
"@@ -22,7 +22,13 @@
 
 package org.teiid.core.types;
 
-public interface SourceTransform<S, T> {
+public abstract class SourceTransform<S, T> {
+	
+	private Class<T> target;
+	
+	public SourceTransform(Class<T> target) {
+		this.target = target;
+	}
 	
 	/**
 	 * This method transforms a value of the source type into a value
@@ -32,6 +38,10 @@ public interface SourceTransform<S, T> {
 	 * @throws TransformationException if value is an incorrect input type or
 	 * the transformation fails
 	 */
-	public T transform(S value);
+	public abstract T transform(S value);
+	
+	public Class<T> getTargetType() {
+		return target;
+	}
 
 }",2012-10-29T16:20:42Z,28
"@@ -99,5 +99,10 @@ public Class<?> getType(String name) throws TranslatorException {
 	public Map<String, Class<?>> getMapOfCacheTypes() {
 		return this.config.getMapOfCacheTypes();
 	}
+	
+	@Override
+	public String getPkField(String name) {
+		return this.config.getPkMap().get(name);
+	}
 
 }",2012-10-29T16:20:42Z,15
"@@ -63,8 +63,7 @@ public class InfinispanManagedConnectionFactory extends BasicManagedConnectionFa
 	private Map<String, Class<?>> typeMap = null;
 	private String cacheTypes = null;
 	private BasicCacheContainer cacheContainer = null;
-
-
+	private Map<String, String> pkMap;
 	private String module;
 	
 	@Override
@@ -83,6 +82,7 @@ public BasicConnectionFactory<InfinispanConnectionImpl> createConnectionFactory(
 		
 		createCacheContainer();
 
+		pkMap = new HashMap<String, String>();
 		ClassLoader cl = null;
 		if (module != null) {
 			Module m;
@@ -98,10 +98,17 @@ public BasicConnectionFactory<InfinispanConnectionImpl> createConnectionFactory(
 		List<String> types = StringUtil.getTokens(this.cacheTypes, "",""); //$NON-NLS-1$
 		Map<String, Class<?>> tm = new HashMap<String, Class<?>>();
 		for (String type : types) {
-			final List<String> mapped = StringUtil.getTokens(type, "":""); //$NON-NLS-1$
+			List<String> mapped = StringUtil.getTokens(type, "":""); //$NON-NLS-1$
+			if (mapped.size() != 2) {
+				throw new InvalidPropertyException();
+			}
 			final String cacheName = mapped.get(0);
-			final String className = mapped.get(1);
-
+			String className = mapped.get(1);
+			mapped = StringUtil.getTokens(className, "";""); //$NON-NLS-1$
+			if (mapped.size() > 1) {
+				className = mapped.get(0);
+				pkMap.put(cacheName, mapped.get(1));
+			}
 			try {
 				tm.put(cacheName, Class.forName(className, true, cl));
 			} catch (ClassNotFoundException e) {
@@ -122,22 +129,26 @@ public InfinispanConnectionImpl getConnection() throws ResourceException {
 		};
 	}	
 	
+	public Map<String, String> getPkMap() {
+		return pkMap;
+	}
+	
 	/**
-	 * Get the <code>cacheName:ClassName[;cacheName:ClassName...]</code> cache type mappings.
+	 * Get the <code>cacheName:ClassName[,cacheName:ClassName...]</code> cache type mappings.
 	 * 
-	 * @return <code>cacheName:ClassName[;cacheName:ClassName...]</code> cache type mappings
+	 * @return <code>cacheName:ClassName[,cacheName:ClassName...]</code> cache type mappings
 	 * @see #setCacheTypeMap(String)
 	 */
 	public String getCacheTypeMap() {
 		return cacheTypes;
 	}
 
 	/**
-	 * Set the cache type mapping <code>cacheName:ClassName[;cacheName:ClassName...]</code> that represent
+	 * Set the cache type mapping <code>cacheName:ClassName[,cacheName:ClassName...]</code> that represent
 	 * the root node class type for 1 or more caches available for access.
 	 * 
 	 * @param cacheTypeMap
-	 *            the cache type mappings passed in the form of <code>cacheName:ClassName[;cacheName:ClassName...]</code>
+	 *            the cache type mappings passed in the form of <code>cacheName:ClassName[,cacheName:ClassName...]</code>
 	 * @see #getCacheTypeMap()
 	 */
 	public void setCacheTypeMap(
@@ -255,9 +266,8 @@ protected Map<Object,Object> getCache(String cacheName) {
     	if (cacheContainer != null) {
     		if (cacheName == null) {
     			return cacheContainer.getCache();
-    		} else {
-    			return cacheContainer.getCache(cacheName);
-    		}   		
+    		}
+			return cacheContainer.getCache(cacheName);
     	}
     	return null;
     }
@@ -350,8 +360,8 @@ protected synchronized void createLocalCacheContainer() throws ResourceException
 	            } 	
 	            
 				LogManager
-				.logInfo(LogConstants.CTX_CONNECTOR,
-						""=== Using CacheContainer (obtained by JNDI: "" + jndiName + "" ===""); //$NON-NLS-1
+				.logDetail(LogConstants.CTX_CONNECTOR,
+						""=== Using CacheContainer (obtained by JNDI:"", jndiName, ""===""); //$NON-NLS-1 //$NON-NLS-2
 	            
 				
 				cacheContainer  = (EmbeddedCacheManager) cache;",2012-10-29T16:20:42Z,138
"@@ -37,7 +37,7 @@
             <managedconnectionfactory-class>org.teiid.resource.adapter.infinispan.InfinispanManagedConnectionFactory</managedconnectionfactory-class>
   
             <config-property>
-               <description>{$display:""Cache Type Mapping"",$description:""Cache Type Map(cacheName:className[;cacheName:className...])"",$required=""true""}</description>
+               <description>{$display:""Cache Type Mapping"",$description:""Cache Type Map(cacheName:className[;pkFieldName][,cacheName:className[;pkFieldName]...])"",$required=""true""}</description>
                <config-property-name>CacheTypeMap</config-property-name>
                <config-property-type>java.lang.String</config-property-type>
             </config-property>  ",2012-10-29T16:20:42Z,139
"@@ -21,12 +21,10 @@
  */
 package org.teiid.resource.adapter.infinispan;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.*;
 
 import java.util.Map;
 
-import java.lang.Long;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.teiid.translator.object.ObjectConnection;
@@ -42,7 +40,7 @@ public static void beforeEachClass() throws Exception {
 		factory = new InfinispanManagedConnectionFactory();
 
 		factory.setConfigurationFileNameForLocalCache(""./src/test/resources/infinispan_persistent_config.xml"");
-		factory.setCacheTypeMap(RemoteInfinispanTestHelper.CACHE_NAME + "":"" + ""java.lang.Long"");
+		factory.setCacheTypeMap(RemoteInfinispanTestHelper.CACHE_NAME + "":"" + ""java.lang.Long;longValue"");
 		
 		// initialize container and cache
 		factory.createCacheContainer();
@@ -61,5 +59,8 @@ public void testConnection() throws Exception {
     		Class<?> t = conn.getType(RemoteInfinispanTestHelper.CACHE_NAME);
     		
     		assertEquals(Long.class, t);
+    		
+    		assertEquals(""longValue"", conn.getPkField(RemoteInfinispanTestHelper.CACHE_NAME));
+
     }
 }",2012-10-29T16:20:42Z,140
"@@ -45,6 +45,13 @@ public interface ObjectConnection  {
 	 */
 	public Class<?> getType(String name) throws TranslatorException;
 	
+	/**
+	 * Returns the type of the primary key
+	 * @param name
+	 * @return
+	 */
+	public String getPkField(String name);
+	
 	/**
 	 * Returns a map of all defined caches, and their respective root object class type,
 	 * that are accessible using this connection.",2012-10-29T16:20:42Z,141
"@@ -1,206 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source.
- * See the COPYRIGHT.txt file distributed with this work for information
- * regarding copyright ownership.  Some portions may be licensed
- * to Red Hat, Inc. under one or more contributor license agreements.
- * 
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2.1 of the License, or (at your option) any later version.
- * 
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- * 
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
- * 02110-1301 USA.
- */
-
-package org.teiid.translator.object.metadata;
-
-import java.math.BigDecimal;
-import java.math.BigInteger;
-import java.sql.Blob;
-import java.sql.Clob;
-import java.sql.SQLXML;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.Map;
-
-import org.teiid.core.types.BlobType;
-import org.teiid.core.types.ClobType;
-import org.teiid.metadata.Column;
-import org.teiid.metadata.Column.SearchType;
-import org.teiid.metadata.MetadataFactory;
-import org.teiid.metadata.Schema;
-import org.teiid.metadata.Table;
-import org.teiid.metadata.Table.Type;
-import org.teiid.translator.TranslatorException;
-import org.teiid.translator.TypeFacility;
-import org.teiid.translator.object.ObjectConnection;
-import org.teiid.translator.object.ObjectExecutionFactory;
-
-
-/**
- * The BaseMetadataProcess is the core logic for providing metadata to the translator.
- */
-public abstract class BaseMetadataProcessor {
-	public static final String KEY_ASSOSIATED_WITH_FOREIGN_TABLE = ""assosiated_with_table"";  //$NON-NLS-1$
-	public static final String ENTITYCLASS= ""entity_class""; //$NON-NLS-1$
-	
-	public static final String SCHEMA_NAME = ""ObjectModel""; //$NON-NLS-1$
-	
-	public static final String GET = ""get""; //$NON-NLS-1$
-	public static final String IS = ""is""; //$NON-NLS-1$
-		
-	public static final String VIEWTABLE_SUFFIX = ""View""; //$NON-NLS-1$
-	public static final String OBJECT_COL_SUFFIX = ""Object""; //$NON-NLS-1$
-
-
-	final static Map<Class<?>, Class<?>> map = new HashMap<Class<?>, Class<?>>();
-	static {
-	    map.put(boolean.class, Boolean.class);
-	    map.put(byte.class, Byte.class);
-	    map.put(short.class, Short.class);
-	    map.put(char.class, Character.class);
-	    map.put(int.class, Integer.class);
-	    map.put(long.class, Long.class);
-	    map.put(float.class, Float.class);
-	    map.put(double.class, Double.class);
-	    map.put(byte[].class, BlobType.class);
-	    map.put(char[].class, ClobType.class);
-	    map.put(Byte[].class, BlobType.class);
-	    map.put(Character[].class, ClobType.class);
-	    
-	    map.put(Boolean.class, Boolean.class);
-	    map.put(Byte.class, Byte.class);
-	    map.put(Short.class, Short.class);
-	    map.put(Character.class, Character.class);
-	    map.put(Integer.class, Integer.class);
-	    map.put(Long.class, Long.class);
-	    map.put(Float.class, Float.class);
-	    map.put(Double.class, Double.class);
-	    map.put(Calendar.class, java.sql.Timestamp.class);
-	}
-	
-	public void getMetadata(MetadataFactory mf, ObjectConnection conn, ObjectExecutionFactory env) throws TranslatorException {
-		
-		Map<String, Class<?>> cacheTypes = conn.getMapOfCacheTypes();
-		for (String cacheName : cacheTypes.keySet()) {
-			Class<?> type = cacheTypes.get(cacheName);
-			
-			Schema objSource = new Schema();
-			objSource.setName(SCHEMA_NAME); //$NON-NLS-1$
-			
-			mf.setSchema(objSource);
-			
-			Table sourceTable = createSourceTable(mf, type, cacheName);
-			createViewTable(mf, sourceTable, type, cacheName);
-		}
-
-	}
-	
-	private Table createSourceTable(MetadataFactory mf, Class<?> entity, String cacheName) throws TranslatorException {
-		String tableName = getTableName(entity);
-		Table table = mf.getSchema().getTable(tableName);
-		if (table == null) {			
-			table = mf.addTable(tableName);
-			table.setSupportsUpdate(isUpdateable(entity));
-			table.setNameInSource(cacheName);  //$NON-NLS-1$
-
-			table.setProperty(ENTITYCLASS, entity.getName());
-			
-			String columnName = tableName + OBJECT_COL_SUFFIX;
-			Column column = addColumn(mf, entity, columnName, ""this"", SearchType.Unsearchable, TypeFacility.getDataTypeName(getJavaDataType(entity)), isUpdateable(entity, columnName), table);
-			
-			column.setNativeType(entity.getName());
-
-		}
-		return table;
-	}
-	
-	private void createViewTable(MetadataFactory mf, Table sourceTable, Class<?> entity, String cacheName) throws TranslatorException {		
-		String viewName = sourceTable.getName() + VIEWTABLE_SUFFIX;
-		Table vtable = mf.getSchema().getTable(viewName);
-		if (vtable == null) {			
-			vtable = mf.addTable(viewName);
-			vtable.setSupportsUpdate(isUpdateable(entity));
-			vtable.setTableType(Type.View);
-			vtable.setVirtual(true);
-			
-			String transfomation = createViewTransformation(mf, entity, vtable, sourceTable);
-			vtable.setSelectTransformation(transfomation);
-		}
-
-	}	
-	
-	/**
-	 * Call to get the name of table based on the <code>Class</code> entity
-	 * @param entity
-	 * @return String name of table
-	 */
-	protected abstract String getTableName(Class<?> entity);
-	
-	/**
-	 * Call to determine if entity is updateable 
-	 * @param table
-	 * @return boolean true if the table is updateable
-	 */
-	protected abstract boolean isUpdateable(Class<?> entity);
-
-	protected abstract boolean isUpdateable(Class<?> entity, String columnName);
-		
-
-	protected abstract String createViewTransformation(MetadataFactory mf, Class<?> entity, Table vtable, Table sourceTable) throws TranslatorException;
-
-
-	
-	protected Column addColumn(MetadataFactory mf, Class<?> entity, String attributeName, String nis, SearchType searchType, String type, boolean updateable, Table entityTable) throws TranslatorException {
-		if (!columnExists(attributeName, entityTable)) {
-			Column c = mf.addColumn(attributeName, type, entityTable);
-			if (nis != null) {
-				c.setNameInSource(nis);
-			}
-			c.setUpdatable(updateable);
-			c.setSearchType(searchType);
-			return c;
-		}
-		return entityTable.getColumnByName(attributeName);
-	}
-
-	
-	protected boolean isSimpleType(Class<?> type) {
-		return type.isPrimitive() || type.equals(String.class)
-				|| type.equals(BigDecimal.class) || type.equals(Date.class)
-				|| type.equals(BigInteger.class)
-				|| map.containsKey(type);
-	}
-	
-	protected boolean isSupportedObjectType(Object object) {
-		if (object instanceof Blob || object instanceof Clob || object instanceof SQLXML) {
-			return true;
-		}
-		return false;
-	}
-	
-	private boolean columnExists(String name, Table table) {
-		return table.getColumnByName(name) != null;
-	}
-	
-	protected Class<?> getJavaDataType(Class<?> type) {
-		if (type.equals(Date.class)) {
-			return java.sql.Timestamp.class;
-		}
-		
-		if (type.isPrimitive()) {
-			return map.get(type);  // usage			
-		}
-		return type;
-	}
-	
-}",2012-10-29T16:20:42Z,142
"@@ -1,120 +1,167 @@
+/*
+ * JBoss, Home of Professional Open Source.
+ * See the COPYRIGHT.txt file distributed with this work for information
+ * regarding copyright ownership.  Some portions may be licensed
+ * to Red Hat, Inc. under one or more contributor license agreements.
+ * 
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ * 
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ * 
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ * 02110-1301 USA.
+ */
+
 package org.teiid.translator.object.metadata;
 
 import java.lang.reflect.Method;
+import java.util.LinkedHashMap;
+import java.util.Map;
+
+import javax.script.ScriptException;
 
+import org.teiid.metadata.BaseColumn.NullType;
 import org.teiid.metadata.Column;
+import org.teiid.metadata.Column.SearchType;
+import org.teiid.metadata.MetadataException;
 import org.teiid.metadata.MetadataFactory;
 import org.teiid.metadata.Table;
-import org.teiid.metadata.Column.SearchType;
-import org.teiid.translator.TranslatorException;
+import org.teiid.query.eval.TeiidScriptEngine;
 import org.teiid.translator.TypeFacility;
+import org.teiid.translator.object.ObjectConnection;
+import org.teiid.translator.object.ObjectExecutionFactory;
+
 
-public class JavaBeanMetadataProcessor extends BaseMetadataProcessor {
+/**
+ * The BaseMetadataProcess is the core logic for providing metadata to the translator.
+ */
+public class JavaBeanMetadataProcessor {
+	public static final String KEY_ASSOSIATED_WITH_FOREIGN_TABLE = ""assosiated_with_table"";  //$NON-NLS-1$
+	public static final String ENTITYCLASS= ""entity_class""; //$NON-NLS-1$
 	
+	public static final String GET = ""get""; //$NON-NLS-1$
+	public static final String IS = ""is""; //$NON-NLS-1$
+		
+	public static final String VIEWTABLE_SUFFIX = ""View""; //$NON-NLS-1$
+	public static final String OBJECT_COL_SUFFIX = ""Object""; //$NON-NLS-1$
 	
-	private boolean isUpdatable = false;
+	protected boolean isUpdatable = false;
+	private TeiidScriptEngine engine = new TeiidScriptEngine();
 
+	public void getMetadata(MetadataFactory mf, ObjectConnection conn, ObjectExecutionFactory env) {
+		
+		Map<String, Class<?>> cacheTypes = conn.getMapOfCacheTypes();
+		for (String cacheName : cacheTypes.keySet()) {
+			Class<?> type = cacheTypes.get(cacheName);
+			String pkField = conn.getPkField(cacheName);
+			createSourceTable(mf, type, cacheName, pkField);
+		}
+
+	}
 	
-	protected String getTableName(Class<?> entity) {
-		if (entity == null) {
-			return ""tableName"";
+	private Table createSourceTable(MetadataFactory mf, Class<?> entity, String cacheName, String pkField) {
+		String tableName = getTableName(entity);
+		Table table = mf.getSchema().getTable(tableName);
+		if (table != null) {
+			//TODO: probably an error
+			return table;
 		}
-		String name = null;
-		String className = entity.getName();
-		int idx = className.lastIndexOf(""."");
-		if (idx > 0) {
-			name = className.substring(idx + 1);
-		} else {
-			name = className;
+		table = mf.addTable(tableName);
+		table.setSupportsUpdate(isUpdateable(entity));
+		table.setNameInSource(cacheName); 
+
+		table.setProperty(ENTITYCLASS, entity.getName());
+		
+		String columnName = tableName + OBJECT_COL_SUFFIX;
+		addColumn(mf, entity, entity, columnName, ""this"", SearchType.Unsearchable, table); //$NON-NLS-1$
+		Map<String, Method> methods;
+		try {
+			methods = engine.getMethodMap(entity);
+		} catch (ScriptException e) {
+			throw new MetadataException(e);
+		}
+		
+		Method pkMethod = null;
+		if (pkField != null) {
+			pkMethod = methods.get(pkField);
+			if (pkMethod != null) {
+				addColumn(mf, entity, pkMethod.getReturnType(), pkField, pkField, SearchType.Searchable, table);
+			} else {
+				//TODO: warning/error?
+			}
 		}
-		return name;		
 		
+		//we have to filter the duplicate names, isFoo vs. foo
+		Map<Method, String> methodsToAdd = new LinkedHashMap<Method, String>();
+		for (Map.Entry<String, Method> entry : methods.entrySet()) {
+			String name = methodsToAdd.get(entry.getValue());
+			if (name == null || name.length() > entry.getKey().length()) {
+				if (entry.getValue() == pkMethod 
+						|| entry.getValue().getDeclaringClass() == Object.class
+						|| entry.getValue().getName().equals(""toString"") //$NON-NLS-1$
+						|| entry.getValue().getName().equals(""hashCode"") //$NON-NLS-1$
+						|| TypeFacility.getRuntimeType(entry.getValue().getReturnType()) == Object.class) {
+					continue;
+				}				
+				methodsToAdd.put(entry.getValue(), entry.getKey());
+			}
+		}
+		
+		for (Map.Entry<Method, String> entry : methodsToAdd.entrySet()) {
+			addColumn(mf, entity, entry.getKey().getReturnType(), entry.getValue(), entry.getValue(), SearchType.Unsearchable, table);
+		}
+		return table;
+	}
+	
+	/**
+	 * Call to get the name of table based on the <code>Class</code> entity
+	 * @param entity
+	 * @return String name of table
+	 */
+	protected String getTableName(Class<?> entity) {
+		return entity.getSimpleName();
 	}
 	
+	/**
+	 * @param entity  
+	 */
 	protected boolean isUpdateable(Class<?> entity) {
 		return this.isUpdatable;
 	}
 
+	/**
+	 * @param entity  
+	 * @param columnName 
+	 */
 	protected boolean isUpdateable(Class<?> entity, String columnName) {
 		return this.isUpdatable;
 	}
-	
-	protected String createViewTransformation(MetadataFactory mf, Class<?> entity, Table vtable, Table sourceTable) throws TranslatorException {
-		StringBuilder sb = new StringBuilder();
-		sb.append(""SELECT "");
-		
-		StringBuilder sbObjTable = new StringBuilder();
-		
-		
-		Method[] methods = entity.getDeclaredMethods();
-
-		int cnt = 0;
-		for (Method m : methods) {
-			String methodName = m.getName();
-			if (methodName.startsWith(GET)) {
-				methodName=methodName.substring( methodName.indexOf(GET) + 3);
-			} else if (methodName.startsWith(IS)) {
-				methodName=methodName.substring( methodName.indexOf(IS) + 2);
-			} else {
-				continue;
-			}
-			boolean simpleType = isSimpleType(m.getReturnType());
-			boolean returnType = simpleType;
-			if (!simpleType) {
-				returnType = isSupportedObjectType(m.getReturnType());
-			}
-			
-			// if the object type is not supported to be returned as is, then don't include it,
-			// this is an object that will need a chaining OBJECTTABLE specified
-			if (! returnType) continue;
-			
-			if (cnt > 0) {
-				sb.append("", "");
-				sbObjTable.append("", "");
-			}
-			
-			sb.append(""o."");
-			sb.append(methodName);
-			
-			sbObjTable.append(methodName);
-			sbObjTable.append("" "");
-			
-			
-			String simpleName = m.getReturnType().getSimpleName();
-			
-			Column column = addColumn(mf, entity, methodName, """", SearchType.Searchable, TypeFacility.getDataTypeName(getJavaDataType(m.getReturnType())), false, vtable);
-		
-			sbObjTable.append(column.getRuntimeType());
-			sbObjTable.append("" "");
-			sbObjTable.append(""'teiid_row."");
-			sbObjTable.append(methodName);
-			sbObjTable.append(""'"");
-			
-			column.setNativeType(simpleName);
 
-			if (simpleName.equalsIgnoreCase(""string"")) {
-				column.setLength(4000);
-			}
-			if (!simpleType) {
-					column.setSearchType(SearchType.Unsearchable);
-			}
-			++cnt;
+	protected Column addColumn(MetadataFactory mf, Class<?> entity, Class<?> type, String attributeName, String nis, SearchType searchType, Table entityTable) {
+		Column c = entityTable.getColumnByName(attributeName);
+		if (c != null) {
+			//TODO: there should be a log here
+			return c;
 		}
-		
-		Column sourceColumn = sourceTable.getColumns().get(0);
-		
-		sb.append("" FROM "");
-		sb.append(sourceTable.getName());
-		sb.append("" as T, OBJECTTABLE('x' PASSING T."");
-		sb.append(sourceColumn.getName());
-		sb.append("" AS x COLUMNS "");
-		
-		sb.append(sbObjTable.toString());
-		
-		sb.append("") as o;"");
-		
-		return sb.toString();
-		
+		c = mf.addColumn(attributeName, TypeFacility.getDataTypeName(TypeFacility.getRuntimeType(type)), entityTable);
+		if (nis != null) {
+			c.setNameInSource(nis);
+		}
+		c.setUpdatable(isUpdateable(entity, attributeName));
+		c.setSearchType(searchType);
+		c.setNativeType(type.getName());
+		if (type.isPrimitive()) {
+			c.setNullType(NullType.No_Nulls);
+		}
+		return c;
 	}
-
+	
 }",2012-10-29T16:20:42Z,143
"@@ -22,31 +22,26 @@
 package org.teiid.translator.object;
 
 import static org.junit.Assert.*;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
+import static org.mockito.Matchers.*;
+import static org.mockito.Mockito.*;
 
-import java.util.Iterator;
-import java.util.List;
 import java.util.Map;
 import java.util.Properties;
 
 import javax.naming.Context;
 
-import org.apache.commons.lang.StringUtils;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.mockito.Mock;
-import org.teiid.core.util.StringUtil;
 import org.teiid.language.Select;
+import org.teiid.metadata.BaseColumn.NullType;
 import org.teiid.metadata.Datatype;
 import org.teiid.metadata.MetadataFactory;
 import org.teiid.metadata.Table;
 import org.teiid.query.metadata.SystemMetadata;
 import org.teiid.translator.ExecutionContext;
 import org.teiid.translator.TranslatorException;
-import org.teiid.translator.object.metadata.BaseMetadataProcessor;
 import org.teiid.translator.object.testdata.Trade;
 import org.teiid.translator.object.util.TradesCacheSource;
 import org.teiid.translator.object.util.VDBUtility;
@@ -100,7 +95,7 @@ protected ObjectExecution createExecution(Select command) throws TranslatorExcep
 		
 		factory.getMetadata(mfactory, source);
 		
-		assertEquals(mfactory.getSchema().getName(), BaseMetadataProcessor.SCHEMA_NAME);
+		assertEquals(mfactory.getSchema().getName(), ""Trade"");
 		
 		String clzName = Trade.class.getName();
 		clzName = clzName.substring(clzName.lastIndexOf(""."") + 1);
@@ -109,43 +104,14 @@ protected ObjectExecution createExecution(Select command) throws TranslatorExcep
 		assertNotNull(physicalTable);
 		assertTrue(physicalTable.isPhysical());
 		assertTrue(!physicalTable.isVirtual());
-
-		
-		String virClzName = clzName + BaseMetadataProcessor.VIEWTABLE_SUFFIX;
-
-		Table virtualTable = mfactory.getSchema().getTable(virClzName);
-		assertNotNull(virtualTable);
-		assertTrue(virtualTable.isVirtual());
-		assertTrue(!virtualTable.isPhysical());
-		
-//		transform = ""SELECT o.Name, o.TradeId, o.TradeDate, o.Settled FROM Trade as T,"" +
-//		"" OBJECTTABLE('x' PASSING T.TradeObject AS x COLUMNS Name string 'teiid_row.Name',"" + 
-//		"" TradeId long 'teiid_row.TradeId', TradeDate timestamp 'teiid_row.TradeDate',"" + 
-//		"" Settled boolean 'teiid_row.Settled') as o;"";
-
-		
-		//  used the following to validate the transform because the class methods are not 
-		//		guaranteed to be processed in the same order, 
-		//		thereby, the elements in transform statement can be arranged differently each time
-		String transform = virtualTable.getSelectTransformation();	
-		
-		int idx = transform.indexOf(""OBJECTTABLE"");
-		
-		String select = transform.substring(0, idx);
-		String objecttable = transform.substring(idx);
-		assertTrue(select.indexOf(""o.Name"") >-1);
-		assertTrue(select.indexOf(""o.TradeId"") >-1);
-		assertTrue(select.indexOf(""o.TradeDate"") >-1);
-		assertTrue(select.indexOf(""o.Settled"") >-1);
-		assertTrue(select.indexOf(""FROM Trade as T"") >-1);
-
-		assertTrue(objecttable.indexOf(""'x' PASSING T.TradeObject AS x COLUMNS"") >-1);
-		assertTrue(objecttable.indexOf(""Name string 'teiid_row.Name'"") >-1);
-		assertTrue(objecttable.indexOf(""TradeId long 'teiid_row.TradeId'"") >-1);
-		assertTrue(objecttable.indexOf(""TradeDate timestamp 'teiid_row.TradeDate'"") >-1);
-		assertTrue(objecttable.indexOf(""Settled boolean 'teiid_row.Settled'"") >-1);
-
-
+		assertEquals(5, physicalTable.getColumns().size());
+		//this
+		assertEquals(""object"", physicalTable.getColumns().get(0).getRuntimeType());
+		//trade id key
+		assertEquals(""long"", physicalTable.getColumns().get(1).getRuntimeType());
+		assertEquals(NullType.No_Nulls, physicalTable.getColumns().get(1).getNullType());
+		//name
+		assertEquals(""string"", physicalTable.getColumns().get(2).getRuntimeType());
 	}
 
 }",2012-10-29T16:20:42Z,21
"@@ -61,7 +61,11 @@ public Class<?> getType(String name) throws TranslatorException {
 
 		@Override
 		public Map<String, Class<?>> getMapOfCacheTypes() {
-			// TODO Auto-generated method stub
+			return null;
+		}
+		
+		@Override
+		public String getPkField(String name) {
 			return null;
 		}
 	}",2012-10-29T16:20:42Z,1
"@@ -169,5 +169,10 @@ public Map<String, Class<?>> getMapOfCacheTypes() {
 		return mapOfCaches;
 	}
 	
+	@Override
+	public String getPkField(String name) {
+		return ""tradeId"";
+	}
+	
 	
 }",2012-10-29T16:20:42Z,7
"@@ -33,7 +33,7 @@
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.Collections;
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.WeakHashMap;
 import java.util.regex.Pattern;
@@ -117,7 +117,7 @@ public Object eval(ScriptContext sc) throws ScriptException {
 		};
 	}
 	
-	private Map<String, Method> getMethodMap(Class<?> clazz) throws ScriptException {
+	public Map<String, Method> getMethodMap(Class<?> clazz) throws ScriptException {
 		Map<Class<?>, Map<String, Method>> clazzMaps = null;
 		synchronized (properties) {
 			clazzMaps = properties.get(clazz.getClassLoader());
@@ -131,7 +131,7 @@ private Map<String, Method> getMethodMap(Class<?> clazz) throws ScriptException
 			try {
 				BeanInfo info = Introspector.getBeanInfo(clazz);
 				PropertyDescriptor[] pds = info.getPropertyDescriptors();
-				methodMap = new HashMap<String, Method>();
+				methodMap = new LinkedHashMap<String, Method>();
 				if (pds != null) {
 					for (int j = 0; j < pds.length; j++) {
 						PropertyDescriptor pd = pds[j];",2012-10-29T16:20:42Z,144
"@@ -11,15 +11,15 @@ connect
 /profile=ha/subsystem=infinispan/cache-container=teiid-cache/replicated-cache=resultset-repl/locking=LOCKING:add(isolation=READ_COMMITTED)
 /profile=ha/subsystem=infinispan/cache-container=teiid-cache/replicated-cache=resultset-repl/expiration=EXPIRATION:add(lifespan=7200000)
 /profile=ha/subsystem=infinispan/cache-container=teiid-cache/replicated-cache=resultset-repl/eviction=EVICTION:add(max-entries=1024, strategy=LIRS)
-/profile=ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset/transaction=TRANSACTION:add(mode=NON_XA)
+/profile=ha/subsystem=infinispan/cache-container=teiid-cache/replicated-cache=resultset-repl/transaction=TRANSACTION:add(mode=NON_XA)
 
-/profile=ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset:add(mode=SYNC, batching=true)
+/profile=ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset:add(batching=true)
 /profile=ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset/locking=LOCKING:add(isolation=READ_COMMITTED)
 /profile=ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset/expiration=EXPIRATION:add(lifespan=7200000)
 /profile=ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset/eviction=EVICTION:add(max-entries=1024, strategy=LIRS)
 /profile=ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset/transaction=TRANSACTION:add(mode=NON_XA)
 
-/profile=ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=preparedplan:add(mode=SYNC, batching=true)
+/profile=ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=preparedplan:add(batching=true)
 /profile=ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=preparedplan/locking=LOCKING:add(isolation=READ_COMMITTED)
 /profile=ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=preparedplan/expiration=EXPIRATION:add(lifespan=28800)
 /profile=ha/subsystem=infinispan/cache-container=teiid-cache/local-cache=preparedplan/eviction=EVICTION:add(max-entries=512, strategy=LIRS)
@@ -28,7 +28,7 @@ connect
 /profile=ha/subsystem=security/security-domain=teiid-security/authentication=classic:add(login-modules=[{""code""=>""org.jboss.security.auth.spi.UsersRolesLoginModule"", ""flag""=>""required"", ""module-options""=>[(""usersProperties""=>""${jboss.domain.config.dir}/teiid-security-users.properties""), (""rolesProperties""=>""${jboss.domain.config.dir}/teiid-security-roles.properties"")]}]) 
 /profile=ha/subsystem=threads/bounded-queue-thread-pool=teiid-async:add(name=teiid-async, max-threads=4, queue-length=100)
 
-/profile=ha/subsystem=teiid:add(async-thread-pool=teiid-async, distributed-cache-jgroups-stack=udp, resultset-cache-infinispan-container=teiid-cache, policy-decider-module=org.jboss.teiid)
+/profile=ha/subsystem=teiid:add(async-thread-pool=teiid-async, distributed-cache-jgroups-stack=udp, resultset-cache-infinispan-container=teiid-cache, preparedplan-cache-infinispan-container=teiid-cache, policy-decider-module=org.jboss.teiid)
 /profile=ha/subsystem=teiid/transport=embedded:add()
 /profile=ha/subsystem=teiid/transport=jdbc:add(protocol=teiid, socket-binding=teiid-jdbc, authentication-security-domain=teiid-security)
 /profile=ha/subsystem=teiid/transport=odbc:add(protocol=pg, socket-binding=teiid-odbc, authentication-security-domain=teiid-security) 
@@ -64,6 +64,7 @@ connect
 /profile=ha/subsystem=teiid/translator=hive:add(module=org.jboss.teiid.translator.hive)
 /profile=ha/subsystem=teiid/translator=infinispan-cache:add(module=org.jboss.teiid.translator.object)
 /profile=ha/subsystem=teiid/translator=map-cache:add(module=org.jboss.teiid.translator.object)
+/profile=ha/subsystem=teiid/translator=google-spreadsheet:add(module=org.jboss.teiid.translator.google)
 
 
 /profile=ha/subsystem=datasources/jdbc-driver=teiid:add(driver-name=teiid, driver-module-name=org.jboss.teiid.client, driver-class-name=org.teiid.jdbc.TeiidDriver, driver-xa-datasource-class-name=org.teiid.jdbc.TeiidDataSource)",2013-01-08T17:58:19Z,102
"@@ -0,0 +1,71 @@
+connect
+/extension=org.jboss.teiid:add(module=org.jboss.teiid)
+/socket-binding-group=standard-sockets/socket-binding=teiid-jdbc:add(port=31000)
+/socket-binding-group=standard-sockets/socket-binding=teiid-odbc:add(port=35432)
+
+/subsystem=infinispan/cache-container=teiid-cache:add(default-cache=resultset)
+/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset-repl:add(batching=true)
+/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset-repl/locking=LOCKING:add(isolation=READ_COMMITTED)
+/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset-repl/expiration=EXPIRATION:add(lifespan=7200000)
+/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset-repl/eviction=EVICTION:add(max-entries=1024, strategy=LIRS)
+/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset-repl/transaction=TRANSACTION:add(mode=NON_XA)
+
+/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset:add(batching=true)
+/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset/locking=LOCKING:add(isolation=READ_COMMITTED)
+/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset/expiration=EXPIRATION:add(lifespan=7200000)
+/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset/eviction=EVICTION:add(max-entries=1024, strategy=LIRS)
+/subsystem=infinispan/cache-container=teiid-cache/local-cache=resultset/transaction=TRANSACTION:add(mode=NON_XA)
+
+/subsystem=infinispan/cache-container=teiid-cache/local-cache=preparedplan:add(batching=true)
+/subsystem=infinispan/cache-container=teiid-cache/local-cache=preparedplan/locking=LOCKING:add(isolation=READ_COMMITTED)
+/subsystem=infinispan/cache-container=teiid-cache/local-cache=preparedplan/expiration=EXPIRATION:add(lifespan=28800)
+/subsystem=infinispan/cache-container=teiid-cache/local-cache=preparedplan/eviction=EVICTION:add(max-entries=512, strategy=LIRS)
+
+/subsystem=security/security-domain=teiid-security:add(cache-type=default)
+/subsystem=security/security-domain=teiid-security/authentication=classic:add(login-modules=[{""code""=>""org.jboss.security.auth.spi.UsersRolesLoginModule"", ""flag""=>""required"", ""module-options""=>[(""usersProperties""=>""${jboss.domain.config.dir}/teiid-security-users.properties""), (""rolesProperties""=>""${jboss.domain.config.dir}/teiid-security-roles.properties"")]}]) 
+/subsystem=threads/bounded-queue-thread-pool=teiid-async:add(name=teiid-async, max-threads=4, queue-length=100)
+
+/subsystem=teiid:add(async-thread-pool=teiid-async, resultset-cache-infinispan-container=teiid-cache, preparedplan-cache-infinispan-container=teiid-cache, policy-decider-module=org.jboss.teiid)
+/subsystem=teiid/transport=embedded:add()
+/subsystem=teiid/transport=jdbc:add(protocol=teiid, socket-binding=teiid-jdbc, authentication-security-domain=teiid-security)
+/subsystem=teiid/transport=odbc:add(protocol=pg, socket-binding=teiid-odbc, authentication-security-domain=teiid-security) 
+
+/subsystem=teiid/translator=jdbc-simple:add(module=org.jboss.teiid.translator.jdbc)
+/subsystem=teiid/translator=jdbc-ansi:add(module=org.jboss.teiid.translator.jdbc)
+/subsystem=teiid/translator=access:add(module=org.jboss.teiid.translator.jdbc)
+/subsystem=teiid/translator=db2:add(module=org.jboss.teiid.translator.jdbc)
+/subsystem=teiid/translator=derby:add(module=org.jboss.teiid.translator.jdbc)
+/subsystem=teiid/translator=h2:add(module=org.jboss.teiid.translator.jdbc)
+/subsystem=teiid/translator=hsql:add(module=org.jboss.teiid.translator.jdbc)
+/subsystem=teiid/translator=informix:add(module=org.jboss.teiid.translator.jdbc)
+/subsystem=teiid/translator=metamatrix:add(module=org.jboss.teiid.translator.jdbc)
+/subsystem=teiid/translator=mysql:add(module=org.jboss.teiid.translator.jdbc)
+/subsystem=teiid/translator=mysql5:add(module=org.jboss.teiid.translator.jdbc)
+/subsystem=teiid/translator=oracle:add(module=org.jboss.teiid.translator.jdbc)
+/subsystem=teiid/translator=postgresql:add(module=org.jboss.teiid.translator.jdbc)
+/subsystem=teiid/translator=sqlserver:add(module=org.jboss.teiid.translator.jdbc)
+/subsystem=teiid/translator=sybase:add(module=org.jboss.teiid.translator.jdbc)
+/subsystem=teiid/translator=teiid:add(module=org.jboss.teiid.translator.jdbc)
+/subsystem=teiid/translator=teradata:add(module=org.jboss.teiid.translator.jdbc)
+/subsystem=teiid/translator=modeshape:add(module=org.jboss.teiid.translator.jdbc)
+/subsystem=teiid/translator=ingres:add(module=org.jboss.teiid.translator.jdbc)
+/subsystem=teiid/translator=ingres93:add(module=org.jboss.teiid.translator.jdbc)
+/subsystem=teiid/translator=intersystems-cache:add(module=org.jboss.teiid.translator.jdbc)
+/subsystem=teiid/translator=netezza:add(module=org.jboss.teiid.translator.jdbc)
+/subsystem=teiid/translator=file:add(module=org.jboss.teiid.translator.file)
+/subsystem=teiid/translator=ldap:add(module=org.jboss.teiid.translator.ldap)
+/subsystem=teiid/translator=loopback:add(module=org.jboss.teiid.translator.loopback)
+/subsystem=teiid/translator=olap:add(module=org.jboss.teiid.translator.olap)
+/subsystem=teiid/translator=ws:add(module=org.jboss.teiid.translator.ws)
+/subsystem=teiid/translator=salesforce:add(module=org.jboss.teiid.translator.salesforce)
+/subsystem=teiid/translator=hive:add(module=org.jboss.teiid.translator.hive)
+/subsystem=teiid/translator=infinispan-cache:add(module=org.jboss.teiid.translator.object)
+/subsystem=teiid/translator=map-cache:add(module=org.jboss.teiid.translator.object)
+/subsystem=teiid/translator=google-spreadsheet:add(module=org.jboss.teiid.translator.google)
+
+
+/subsystem=datasources/jdbc-driver=teiid:add(driver-name=teiid, driver-module-name=org.jboss.teiid.client, driver-class-name=org.teiid.jdbc.TeiidDriver, driver-xa-datasource-class-name=org.teiid.jdbc.TeiidDataSource)
+/subsystem=datasources/jdbc-driver=teiid-local:add(driver-name=teiid-local, driver-module-name=org.jboss.teiid, driver-class-name=org.teiid.jdbc.TeiidDriver, driver-xa-datasource-class-name=org.teiid.jdbc.TeiidDataSource)
+
+
+/:reload
\ No newline at end of file",2013-01-08T17:58:19Z,104
"@@ -42,11 +42,20 @@
             <useTransitiveDependencies>false</useTransitiveDependencies>
             <includes>
                 <include>org.apache.cxf:cxf-rt-frontend-jaxrs</include>
+                <include>org.apache.cxf:cxf-rt-transports-http-hc</include>
                 <include>org.apache.cxf:cxf-rt-rs-security-oauth</include>
                 <include>org.apache.cxf:cxf-rt-rs-security-oauth2</include>
                 <include>org.apache.cxf:cxf-rt-rs-security-oauth2-saml</include>
             </includes>
         </dependencySet>
+        <dependencySet>
+            <outputDirectory>${jbossas-module-root}/org/apache/httpcomponents/async/main</outputDirectory>
+            <useTransitiveDependencies>false</useTransitiveDependencies>
+            <includes>
+                <include>org.apache.httpcomponents:httpcore-nio</include>
+                <include>org.apache.httpcomponents:httpasyncclient</include>
+            </includes>
+        </dependencySet>        
         <dependencySet>
             <outputDirectory>${jbossas-module-root}/javax/ws/rs/api/2.0</outputDirectory>
             <useTransitiveDependencies>false</useTransitiveDependencies>",2015-10-07T18:23:07Z,85
"@@ -10,6 +10,7 @@
         <resource-root path=""cxf-rt-rs-security-oauth-${version.org.apache.cxf}.jar""/>
         <resource-root path=""cxf-rt-rs-security-oauth2-${version.org.apache.cxf}.jar""/>
         <resource-root path=""cxf-rt-rs-security-oauth2-saml-${version.org.apache.cxf}.jar""/>
+        <resource-root path=""cxf-rt-transports-http-hc-${version.org.apache.cxf}.jar""/>
         <resource-root path="".""/>
         <!-- Insert resources here -->
     </resources>
@@ -21,5 +22,7 @@
         <module name=""org.apache.cxf.impl""/>
         <module name=""javax.ws.rs.api"" services=""export"" export=""true"" slot=""2.0""/>
         <module name=""net.oauth.core""/>
+        <module name=""org.apache.httpcomponents""/>
+        <module name=""org.apache.httpcomponents.async""/>
     </dependencies>
 </module>
\ No newline at end of file",2015-10-07T18:23:07Z,145
"@@ -0,0 +1,18 @@
+<module xmlns=""urn:jboss:module:1.1"" name=""org.apache.httpcomponents.async"">
+    <properties>
+        <property name=""jboss.api"" value=""private""/>
+    </properties>
+
+    <resources>
+        <resource-root path=""httpcore-nio-${version.org.apache.httpcomponents.httpcore-nio}.jar""/>
+        <resource-root path=""httpasyncclient-${version.org.apache.httpcomponents.httpasyncclient}.jar""/>
+        <!-- Insert resources here -->
+    </resources>
+
+    <dependencies>
+        <module name=""javax.api""/>
+        <module name=""org.apache.commons.codec""/>
+        <module name=""org.apache.commons.logging""/>        
+        <module name=""org.apache.httpcomponents""/>
+    </dependencies>
+</module>",2015-10-07T18:23:07Z,146
"@@ -67,6 +67,18 @@
             <groupId>org.apache.cxf</groupId>
             <artifactId>cxf-rt-frontend-jaxrs</artifactId>
         </dependency>
+		<dependency>
+		    <groupId>org.apache.cxf</groupId>
+		    <artifactId>cxf-rt-transports-http-hc</artifactId>
+		</dependency>
+		<dependency>
+		    <groupId>org.apache.httpcomponents</groupId>
+		    <artifactId>httpcore-nio</artifactId>
+		</dependency>
+        <dependency>
+            <groupId>org.apache.httpcomponents</groupId>
+            <artifactId>httpasyncclient</artifactId>            
+        </dependency>				        
         <dependency>
             <groupId>javax.ws.rs</groupId>
             <artifactId>javax.ws.rs-api</artifactId>",2015-10-07T18:23:07Z,87
"@@ -52,13 +52,17 @@
 
 import org.apache.cxf.Bus;
 import org.apache.cxf.BusFactory;
+import org.apache.cxf.bus.spring.SpringBusFactory;
 import org.apache.cxf.configuration.security.AuthorizationPolicy;
 import org.apache.cxf.endpoint.Client;
 import org.apache.cxf.endpoint.Endpoint;
 import org.apache.cxf.interceptor.Interceptor;
+import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;
 import org.apache.cxf.jaxrs.client.WebClient;
 import org.apache.cxf.jaxws.DispatchImpl;
 import org.apache.cxf.transport.http.HTTPConduit;
+import org.apache.cxf.transport.http.HTTPConduitFactory;
+import org.apache.cxf.transport.http.asyncclient.AsyncHTTPConduitFactory;
 import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;
 import org.apache.cxf.ws.security.SecurityConstants;
 import org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor;
@@ -123,23 +127,44 @@ private static final class HttpDispatch implements Dispatch<DataSource> {
 		private HashMap<String, Object> responseContext = new HashMap<String, Object>();
 		private WebClient client;
 		private String endpoint;
+		private String configFile;
 
 		public HttpDispatch(String endpoint, String configFile, @SuppressWarnings(""unused"") String configName) {
-			this.endpoint = endpoint;
-			if (configFile == null) {
-			    this.client = WebClient.create(this.endpoint);
-			}
-			else {
-			    this.client = WebClient.create(this.endpoint, configFile);
-			}
+		    this.endpoint = endpoint;
+		    this.configFile = configFile;
 		}
 
+	    WebClient createWebClient(String baseAddress, Bus bus) {
+	        JAXRSClientFactoryBean bean = new JAXRSClientFactoryBean();
+            bean.setBus(bus);
+	        bean.setAddress(baseAddress);
+	        return bean.createWebClient();
+	    }	
+	    
+	    Bus getBus(String configLocation) {
+            if (configLocation != null) {
+                SpringBusFactory bf = new SpringBusFactory();
+                return bf.createBus(configLocation);
+            } else {
+                return BusFactory.getThreadDefaultBus();
+            }
+        }   	    
+		
 		@Override
 		public DataSource invoke(DataSource msg) {
 			try {
 				final URL url = new URL(this.endpoint);
 				final String httpMethod = (String)this.requestContext.get(MessageContext.HTTP_REQUEST_METHOD);
-				
+
+                // see to use patch
+                // http://stackoverflow.com/questions/32067687/how-to-use-patch-method-in-cxf
+				Bus bus = getBus(this.configFile);
+                if (httpMethod.equals(""PATCH"")) {
+                    bus.setProperty(""use.async.http.conduit"", Boolean.TRUE);
+                    bus.setExtension(new AsyncHTTPConduitFactory(bus), HTTPConduitFactory.class);
+                }
+                this.client = createWebClient(this.endpoint, bus);
+                
 				Map<String, List<String>> header = (Map<String, List<String>>)this.requestContext.get(MessageContext.HTTP_REQUEST_HEADERS);
 				for (Map.Entry<String, List<String>> entry : header.entrySet()) {
 					this.client.header(entry.getKey(), entry.getValue().toArray());",2015-10-07T18:23:07Z,147
"@@ -95,6 +95,8 @@
         <version.proj4j>0.1.0</version.proj4j>
 	    <version.swagger-jaxrs>1.5.2</version.swagger-jaxrs>
 	    <version.narayana>5.0.4.Final</version.narayana>
+	    <version.org.apache.httpcomponents.httpcore-nio>4.2.4</version.org.apache.httpcomponents.httpcore-nio>
+	    <version.org.apache.httpcomponents.httpasyncclient>4.0-beta3</version.org.apache.httpcomponents.httpasyncclient>	    
 	</properties>
 	<scm>
         <connection>scm:git:git://github.com/teiid/teiid.git</connection>
@@ -1135,6 +1137,21 @@
                     </exclusion>                                   
                 </exclusions>                
             </dependency>
+			<dependency>
+			    <groupId>org.apache.cxf</groupId>
+			    <artifactId>cxf-rt-transports-http-hc</artifactId>
+			    <version>${version.org.apache.cxf}</version>
+			</dependency>
+	        <dependency>
+	            <groupId>org.apache.httpcomponents</groupId>
+	            <artifactId>httpcore-nio</artifactId>
+	            <version>${version.org.apache.httpcomponents.httpcore-nio}</version>
+	        </dependency>
+			<dependency>
+			    <groupId>org.apache.httpcomponents</groupId>
+			    <artifactId>httpasyncclient</artifactId>
+			    <version>${version.org.apache.httpcomponents.httpasyncclient}</version>
+			</dependency>
             <dependency>
                 <groupId>org.apache.cxf</groupId>
                 <artifactId>cxf-bundle</artifactId>",2015-10-07T18:23:07Z,90
"@@ -150,16 +150,23 @@ protected boolean prepareNextCommand(Command atomicCommand) throws TeiidComponen
         
         query.setCriteria(dependentCrit);
         
+        //walk up the tree and notify the parent join it is responsible for the sort
         if (sort && query.getOrderBy() != null && criteriaProcessor.hasNextCommand()) {
             RelationalNode parent = this.getParent();
+            RelationalNode child = this;
             while (parent != null && !(parent instanceof JoinNode)) {
+            	child = parent;
                 parent = parent.getParent();
             }
             if (parent != null) {
                 JoinNode joinNode = (JoinNode)parent;
                 if (joinNode.getJoinStrategy() instanceof MergeJoinStrategy) {
                     MergeJoinStrategy mjs = (MergeJoinStrategy)joinNode.getJoinStrategy();
-                    mjs.setProcessingSortRight(true);
+                    if (joinNode.getChildren()[0] == child) {
+                    	mjs.setProcessingSortLeft(true);
+                    } else {
+                    	mjs.setProcessingSortRight(true);
+                    }
                 }
             }
             sort = false;",2016-04-28T11:59:04Z,148
"@@ -365,6 +365,12 @@ public void setProcessingSortRight(boolean processingSortRight) {
     	}
     }
     
+    public void setProcessingSortLeft(boolean processingSortLeft) {
+    	if (processingSortLeft && this.processingSortLeft == SortOption.ALREADY_SORTED) {
+    		this.processingSortLeft = SortOption.SORT;
+    	}
+    }
+    
     public String getName() {
     	return ""MERGE JOIN""; //$NON-NLS-1$
     }",2016-04-28T11:59:04Z,149
"@@ -1426,4 +1426,30 @@ private void helpTestMax(String sql) {
 	    helpProcess(plan, dataManager, expected);
 	}
     
+    @Test public void testNestedLeftDependent() {
+	    String sql = ""SELECT pm1.g1.e1, pm1.g2.e2 from /*+ makeind */ pm1.g1 inner join /*+ preserve */ (/*+ makeind */ pm1.g2 inner join pm1.g3 on pm1.g2.e2 = pm1.g3.e2) on pm1.g1.e1 = pm1.g2.e1""; //$NON-NLS-1$
+	    
+	    List<?>[] expected = new List[] { 
+	    		Arrays.asList(""c"", 0),
+		        Arrays.asList(""a"", 1),
+		        Arrays.asList(""b"", 2),
+	    };    
+	    
+	    HardcodedDataManager hdm = new HardcodedDataManager();
+	    hdm.addData(""SELECT g_0.e1 AS c_0 FROM pm1.g1 AS g_0 ORDER BY c_0"", Arrays.asList(""a""), Arrays.asList(""b""), Arrays.asList(""c""));
+	    hdm.addData(""SELECT g_0.e2 AS c_0, g_0.e1 AS c_1 FROM pm1.g2 AS g_0 WHERE g_0.e1 IN ('a', 'b')"", Arrays.asList(1, ""a""), Arrays.asList(2, ""b""));
+	    hdm.addData(""SELECT g_0.e2 AS c_0, g_0.e1 AS c_1 FROM pm1.g2 AS g_0 WHERE g_0.e1 = 'c'"", Arrays.asList(0, ""c""));
+	    hdm.addData(""SELECT g_0.e2 AS c_0 FROM pm1.g3 AS g_0 WHERE g_0.e2 IN (0, 1)"", Arrays.asList(1), Arrays.asList(0));
+	    hdm.addData(""SELECT g_0.e2 AS c_0 FROM pm1.g3 AS g_0 WHERE g_0.e2 = 2"", Arrays.asList(2));
+	    
+	    BasicSourceCapabilities bsc = TestOptimizer.getTypicalCapabilities();
+	    bsc.setSourceProperty(Capability.MAX_IN_CRITERIA_SIZE, 2);
+	    bsc.setCapabilitySupport(Capability.QUERY_FROM_JOIN_INNER, false);
+	    bsc.setCapabilitySupport(Capability.QUERY_FROM_JOIN_OUTER, false);
+	    
+	    ProcessorPlan plan = TestProcessor.helpGetPlan(helpParse(sql), RealMetadataFactory.example1Cached(), new DefaultCapabilitiesFinder(bsc));
+	    
+	    helpProcess(plan, hdm, expected);
+	}
+    
 }",2016-04-28T11:59:04Z,8
"@@ -287,4 +287,11 @@ public enum Cache {PREPARED_PLAN_CACHE, QUERY_SERVICE_RESULT_SET_CACHE};
      * @throws AdminException 
      */
     Set<String> getDataSourceTemplateNames() throws AdminException;
+    
+    /**
+     * Tell the engine that the given source is available. Pending dynamic vdb metadata loads will be resumed.
+     * @param jndiName
+     * @throws AdminException
+     */
+    void markDataSourceAvailable(String jndiName) throws AdminException;    
 }",2011-10-27T14:44:07Z,43
"@@ -191,41 +191,197 @@ public void close() {
 			}
 		}
 		
-		private void createConnectionFactoryRequest(String deploymentName,	String templateName, Properties properties, DefaultOperationRequestBuilder builder)	throws AdminException {
-			builder.addProperty(""archive"", templateName);
-			builder.addProperty(""transaction-support"", properties.getProperty(""transaction-support"", ""NoTransaction""));
-			properties.remove(""transaction-support"");
+		private void createConnectionFactory(String deploymentName,	String templateName, Properties properties)	throws AdminException {
+			Set<String> resourceAdapters = getDeployedResourceAdapterNames();
+			if (!resourceAdapters.contains(templateName)) {
+				addResourceAdapter(templateName);
+			}
+			
+			///subsystem=resource-adapters/resource-adapter=teiid-connector-file.rar/connection-definitions=fooDS:add(class-name=org.teiid.resource.adapter.file.FileManagedConnectionFactory, jndi-name=java\:\/fooDS, pool-name=foo-pool)
+			DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder();
+	        final ModelNode request;
+
+	        try {
+	            builder.addNode(""subsystem"", ""resource-adapters""); //$NON-NLS-1$ //$NON-NLS-2$
+	            builder.addNode(""resource-adapter"", templateName); //$NON-NLS-1$ //$NON-NLS-2$
+	            builder.addNode(""connection-definitions"", deploymentName); //$NON-NLS-1$ //$NON-NLS-2$
+	            builder.setOperationName(""add""); 
+	            builder.addProperty(""jndi-name"", ""java:/""+deploymentName);
+	            builder.addProperty(""pool-name"", deploymentName);
+	            request = builder.buildRequest();
+	        } catch (OperationFormatException e) {
+	            throw new IllegalStateException(""Failed to build operation"", e); //$NON-NLS-1$
+	        }
+			
+	        try {
+	            ModelNode outcome = this.connection.execute(request);
+	            if (!Util.isSuccess(outcome)) {
+	                throw new AdminProcessingException(Util.getFailureDescription(outcome));
+	            }
+	        } catch (IOException e) {
+	        	throw new AdminProcessingException(e);
+	        }
+	        
+	        // add all the config properties
+            Enumeration keys = properties.propertyNames();
+            while (keys.hasMoreElements()) {
+            	String key = (String)keys.nextElement();
+            	addConfigProperty(templateName, deploymentName, key, properties.getProperty(key));
+            }
 		}
 
+		// /subsystem=resource-adapters/resource-adapter=teiid-connector-file.rar/connection-definitions=fooDS/config-properties=ParentDirectory2:add(value=/home/rareddy/testing)
+		private void addConfigProperty(String templateName, String deploymentName, String key, String value) throws AdminProcessingException {
+			DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder();
+	        final ModelNode request;
+	        try {
+	            builder.addNode(""subsystem"", ""resource-adapters""); //$NON-NLS-1$ //$NON-NLS-2$
+	            builder.addNode(""resource-adapter"", templateName); //$NON-NLS-1$ //$NON-NLS-2$
+	            builder.addNode(""connection-definitions"", deploymentName); //$NON-NLS-1$ //$NON-NLS-2$
+	            builder.addNode(""config-properties"", key); //$NON-NLS-1$ //$NON-NLS-2$
+	            builder.setOperationName(""add""); 
+	            builder.addProperty(""value"", value);
+	            request = builder.buildRequest();
+	        } catch (OperationFormatException e) {
+	            throw new IllegalStateException(""Failed to build operation"", e); //$NON-NLS-1$
+	        }
+			
+	        try {
+	            ModelNode outcome = this.connection.execute(request);
+	            if (!Util.isSuccess(outcome)) {
+	                throw new AdminProcessingException(Util.getFailureDescription(outcome));
+	            }
+	        } catch (IOException e) {
+	        	throw new AdminProcessingException(e);
+	        }
+		}
+
+		// /subsystem=resource-adapters/resource-adapter=teiid-connector-ws.rar:add(archive=teiid-connector-ws.rar, transaction-support=NoTransaction)
+		private void addResourceAdapter(String rarName) throws AdminProcessingException {
+			DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder();
+	        final ModelNode request;
+
+	        try {
+	            builder.addNode(""subsystem"", ""resource-adapters""); //$NON-NLS-1$ //$NON-NLS-2$
+	            builder.addNode(""resource-adapter"", rarName); //$NON-NLS-1$ //$NON-NLS-2$
+	            builder.setOperationName(""add""); 
+	            request = builder.buildRequest();
+	            request.get(""archive"").set(rarName);
+	            request.get(""transaction-support"").set(""NoTransaction"");
+	        } catch (OperationFormatException e) {
+	            throw new IllegalStateException(""Failed to build operation"", e); //$NON-NLS-1$
+	        }
+			
+	        try {
+	            ModelNode outcome = this.connection.execute(request);
+	            if (!Util.isSuccess(outcome)) {
+	                throw new AdminProcessingException(Util.getFailureDescription(outcome));
+	            }
+	        } catch (IOException e) {
+	        	throw new AdminProcessingException(e);
+	        }				
+		}
+		
+		class AbstractMetadatMapper implements MetadataMapper<String>{
+			@Override
+			public ModelNode wrap(String obj, ModelNode node) {
+				return null;
+			}
+			@Override
+			public String unwrap(ModelNode node) {
+				return null;
+			}
+			@Override
+			public ModelNode describe(ModelNode node) {
+				return null;
+			}
+		}
+		
+		public List<String> getInstalledJDBCDrivers() throws AdminException {
+			DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder();
+	        final ModelNode request;
+
+	        try {
+	            builder.addNode(""subsystem"", ""datasources""); //$NON-NLS-1$ //$NON-NLS-2$
+	            builder.setOperationName(""installed-drivers-list""); 
+	            request = builder.buildRequest();
+
+	        } catch (OperationFormatException e) {
+	            throw new IllegalStateException(""Failed to build operation"", e); //$NON-NLS-1$
+	        }
+			
+	        try {
+	            ModelNode outcome = this.connection.execute(request);
+	            if (!Util.isSuccess(outcome)) {
+	                throw new AdminProcessingException(Util.getFailureDescription(outcome));
+	            }
+	            List<String> drivers = getList(outcome, new AbstractMetadatMapper() {
+					@Override
+					public String unwrap(ModelNode node) {
+						if (node.hasDefined(""driver-name"")) {
+							return node.get(""driver-name"").asString();
+						}
+						return null;
+					}
+				});
+	            return drivers;
+	        } catch (IOException e) {
+	        	throw new AdminProcessingException(e);
+	        }	
+		}
+		
 		@Override
 		public void createDataSource(String deploymentName,	String templateName, Properties properties)	throws AdminException {
+			
+			Collection<String> dsNames = getDataSourceNames();
+			if (dsNames.contains(deploymentName) || (deploymentName.startsWith(""java:/"") && dsNames.contains(deploymentName.substring(6)))) {
+				throw new AdminProcessingException(AdminPlugin.Util.getString(""datasource_exists"", deploymentName));
+			}
+			
+			Set<String> resourceAdapters = getAvailableResourceAdapterNames();
+        	if (resourceAdapters.contains(templateName)) {
+	            createConnectionFactory(deploymentName, templateName, properties);
+	            return;
+        	}
+			
+        	List<String> drivers = getInstalledJDBCDrivers();
+        	if (!drivers.contains(templateName)) {
+        		throw new AdminProcessingException(AdminPlugin.Util.getString(""driver_not_defined"", templateName));
+        	}
+        	
 			DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder();
 	        final ModelNode request;
 	        try {
-	        	//	data-source      jdbc-driver      xa-data-source resource-adapters
-	        	if (templateName.equals(""data-source"")) {
-		            builder.addNode(""subsystem"", ""datasources""); //$NON-NLS-1$ //$NON-NLS-2$
-		            builder.addNode(""data-source"", deploymentName); //$NON-NLS-1$	        		
-	        	}
-	        	else if (templateName.equals(""xa-data-source"")) {
-		            builder.addNode(""subsystem"", ""datasources""); //$NON-NLS-1$ //$NON-NLS-2$
-		            builder.addNode(""xa-data-source"", deploymentName); //$NON-NLS-1$	        		
-	        	}
-	        	else if (templateName.equals(""resource-adapters"")) {
-		            builder.addNode(""subsystem"", ""resource-adapters""); //$NON-NLS-1$ //$NON-NLS-2$
-		            builder.addNode(""resource-adapter"", deploymentName); //$NON-NLS-1$
-		            createConnectionFactoryRequest(deploymentName, templateName, properties, builder);
-	        	}
+	            builder.addNode(""subsystem"", ""datasources""); //$NON-NLS-1$ //$NON-NLS-2$
+	            builder.addNode(""data-source"", deploymentName); //$NON-NLS-1$	        		
 	        	
 	            builder.setOperationName(""add""); 
-	            request = builder.buildRequest();
 	            
-	            builder.addProperty(""jndi-name"", ""java:/""+deploymentName);
-	            Enumeration keys = properties.propertyNames();
-	            while (keys.hasMoreElements()) {
-	            	String key = (String)keys.nextElement(); 
-	            	builder.addProperty(key, properties.getProperty(key));
+	            builder.addProperty(""jndi-name"", deploymentName.startsWith(""java:/"")?deploymentName:""java:/""+deploymentName);
+	            builder.addProperty(""driver-name"", templateName);
+	            
+	            builder.addProperty(""pool-name"", deploymentName);
+	            builder.addProperty(""pool-prefill"", ""false"");
+	            builder.addProperty(""max-pool-size"", ""20"");
+	            builder.addProperty(""min-pool-size"", ""10"");
+	            
+	            if (properties != null) {
+		            builder.addProperty(""connection-url"", properties.getProperty(""connection-url""));
+		            if (properties.getProperty(""user-name"") != null) {
+		            	builder.addProperty(""user-name"", properties.getProperty(""user-name""));
+		            }
+		            if (properties.getProperty(""password"") != null) {
+		            	builder.addProperty(""password"", properties.getProperty(""password""));
+		            }
+		            if (properties.getProperty(""check-valid-connection-sql"") != null) {
+		            	builder.addProperty(""check-valid-connection-sql"", properties.getProperty(""check-valid-connection-sql""));
+		            }
 	            }
+	            else {
+	            	throw new AdminProcessingException(AdminPlugin.Util.getString(""connection_url_required""));
+	            }
+	            
+	            request = builder.buildRequest();
 	        } catch (OperationFormatException e) {
 	            throw new IllegalStateException(""Failed to build operation"", e); //$NON-NLS-1$
 	        }
@@ -235,15 +391,60 @@ else if (templateName.equals(""resource-adapters"")) {
 	            if (!Util.isSuccess(outcome)) {
 	                throw new AdminProcessingException(Util.getFailureDescription(outcome));
 	            }
-	        } catch (Exception e) {
+	        } catch (IOException e) {
 	        	throw new AdminProcessingException(e);
 	        }	        
 		}
 
 		@Override
 		public void deleteDataSource(String deployedName) throws AdminException {
-			// rameshTODO Auto-generated method stub
+			Collection<String> dsNames = getDataSourceNames();
+			if (!dsNames.contains(deployedName) || (deployedName.startsWith(""java:/"") && !dsNames.contains(deployedName.substring(6)))) {
+				throw new AdminProcessingException(AdminPlugin.Util.getString(""datasource_doesnot_exists"", deployedName));
+			}
+			
+			boolean deleted = deleteDS(deployedName, false, ""datasources"", ""data-source"");
+			
+			// check xa connections
+			if (!deleted) {
+				deleted = deleteDS(deployedName, false, ""datasources"", ""xa-data-source"");
+			}
+			
+			// check connection factories
+			if (!deleted) {
+				Map<String, String> raDSMap = getResourceAdapterDataSources();
+				String rarName = raDSMap.get(deployedName);
+				if (rarName != null) {
+					deleted = deleteDS(rarName, true, ""resource-adapters"", ""resource-adapter"", deployedName);	
+				}
+			}
+		}
+
+		private boolean deleteDS(String deployedName, boolean connFactory, String... subsystem) throws AdminProcessingException {
+			DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder();
+	        final ModelNode request;
+
+	        try {
+	            builder.addNode(""subsystem"", subsystem[0]); //$NON-NLS-1$ //$NON-NLS-2$
+	            builder.addNode(subsystem[1], deployedName);
+	            if (connFactory) {
+	            	builder.addNode(""connection-definitions"", subsystem[2]);
+	            }
+	            builder.setOperationName(""remove""); 
+	            request = builder.buildRequest();
+	        } catch (OperationFormatException e) {
+	            throw new IllegalStateException(""Failed to build operation"", e); //$NON-NLS-1$
+	        }
 			
+	        try {
+	            ModelNode outcome = this.connection.execute(request);
+	            if (!Util.isSuccess(outcome)) {
+	                return false;
+	            }
+	            return true;
+	        } catch (IOException e) {
+	        	throw new AdminProcessingException(e);
+	        }
 		}
 
 		@Override
@@ -418,35 +619,43 @@ public Collection<String> getDataSourceNames() throws AdminException {
 			datasourceNames.addAll(getChildNodeNames(""datasources"", ""data-source""));
 			datasourceNames.addAll(getChildNodeNames(""datasources"", ""xa-data-source""));
 
-			Set<String> resourceAdapters = getResourceAdapterNames();
+			datasourceNames.addAll(getResourceAdapterDataSources().keySet());
+	        return datasourceNames;	
+		}
+
+		private Map<String, String> getResourceAdapterDataSources() throws AdminException {
+			HashMap<String, String> datasourceNames = new HashMap<String, String>();
+			Set<String> resourceAdapters = getDeployedResourceAdapterNames();
 			for (String resource:resourceAdapters) {
-				
 				DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder();
-		        try {
-		            builder.addNode(""subsystem"", ""resource-adapters""); //$NON-NLS-1$ //$NON-NLS-2$
-		            builder.addNode(""resource-adapter"", resource); //$NON-NLS-1$ //$NON-NLS-2$
-		            builder.setOperationName(""read-resource""); 
-		            ModelNode request = builder.buildRequest();
-		            
-		            ModelNode outcome = this.connection.execute(request);
-		            if (Util.isSuccess(outcome)) {
-		            	if (outcome.hasDefined(""result"")) {
-		            		ModelNode result = outcome.get(""result"");
-			            	if (result.hasDefined(""connection-definitions"")) {
-			            		List<ModelNode> connDefs = result.get(""connection-definitions"").asList();
-			            		for (ModelNode conn:connDefs) {
-			            			datasourceNames.add(conn.get(""jndi-name"").asString());
-			            		}
-			            	}
-		            	}
-		            }
-		        } catch (OperationFormatException e) {
-		            throw new AdminProcessingException(""Failed to build operation"", e); //$NON-NLS-1$
-		        } catch (IOException e) {
-		        	throw new AdminProcessingException(""Failed to build operation"", e); //$NON-NLS-1$
-		        }
+				try {
+				    builder.addNode(""subsystem"", ""resource-adapters""); //$NON-NLS-1$ //$NON-NLS-2$
+				    builder.addNode(""resource-adapter"", resource); //$NON-NLS-1$ //$NON-NLS-2$
+				    builder.setOperationName(""read-resource""); 
+				    ModelNode request = builder.buildRequest();
+				    
+				    ModelNode outcome = this.connection.execute(request);
+				    if (Util.isSuccess(outcome)) {
+				    	if (outcome.hasDefined(""result"")) {
+				    		ModelNode result = outcome.get(""result"");
+				        	if (result.hasDefined(""connection-definitions"")) {
+				        		List<ModelNode> connDefs = result.get(""connection-definitions"").asList();
+				        		for (ModelNode conn:connDefs) {
+				        			Iterator<String> it = conn.keys().iterator();
+				        			if (it.hasNext()) {
+				        				datasourceNames.put(it.next(), resource);
+				        			}
+				        		}
+				        	}
+				    	}
+				    }
+				} catch (OperationFormatException e) {
+				    throw new AdminProcessingException(""Failed to build operation"", e); //$NON-NLS-1$
+				} catch (IOException e) {
+					throw new AdminProcessingException(""Failed to build operation"", e); //$NON-NLS-1$
+				}
 			}
-	        return datasourceNames;	
+			return datasourceNames;
 		}
 		
 		/**
@@ -455,7 +664,7 @@ public Collection<String> getDataSourceNames() throws AdminException {
 		 * @return
 		 * @throws AdminException
 		 */
-		private Set<String> getResourceAdapterNames() throws AdminException {
+		private Set<String> getDeployedResourceAdapterNames() throws AdminException {
 			Set<String> templates = new HashSet<String>();
 	        final ModelNode request = buildRequest(""resource-adapters"", ""read-children-names"", ""child-type"", ""resource-adapter"");//$NON-NLS-1$
 	        try {
@@ -469,14 +678,39 @@ private Set<String> getResourceAdapterNames() throws AdminException {
 	        }
 	        return Collections.emptySet();					
 		}
-		
+
+		// :read-children-names(child-type=deployment)
+		private Set<String> getAvailableResourceAdapterNames() throws AdminException {
+			Set<String> templates = new HashSet<String>();
+			DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder();
+	        final ModelNode request;
+	        try {
+	            builder.setOperationName(""read-children-names""); 
+	            builder.addProperty(""child-type"", ""deployment"");
+	            request = builder.buildRequest();
+	        } catch (OperationFormatException e) {
+	            throw new IllegalStateException(""Failed to build operation"", e); //$NON-NLS-1$
+	        }
+			
+	        try {
+	            ModelNode outcome = this.connection.execute(request);
+	            List<String> deployments = Util.getList(outcome);
+	            for (String deployment:deployments) {
+	            	if (deployment.endsWith("".rar"")) {
+	            		templates.add(deployment);
+	            	}
+	            }
+	        } catch (IOException e) {
+	        	throw new AdminProcessingException(e);
+	        }
+	        return templates;
+		}
 
 		@Override
 		public Set<String> getDataSourceTemplateNames() throws AdminException {
 			Set<String> templates = new HashSet<String>();
-			templates.add(""data-source"");
-			templates.add(""xa-data-source"");
-			templates.addAll(getResourceAdapterNames());
+			templates.addAll(getInstalledJDBCDrivers());
+			templates.addAll(getAvailableResourceAdapterNames());
 			return templates;
 		}
 		
@@ -570,24 +804,27 @@ public Collection<? extends Session> getSessions() throws AdminException {
 		 */
 		@Override		
 		public Collection<PropertyDefinition> getTemplatePropertyDefinitions(String templateName) throws AdminException {
+
+			boolean connectionFactory = false;
+			Set<String> resourceAdapters = getAvailableResourceAdapterNames();
+        	if (resourceAdapters.contains(templateName)) {
+        		connectionFactory = true;
+        	}
+			
 			DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder();
 			ModelNode request = null;
 			try {
-				//	data-source,xa-data-source,resource-adapters
-	        	if (templateName.equals(""data-source"")) {
-		            builder.addNode(""subsystem"", ""datasources""); //$NON-NLS-1$ //$NON-NLS-2$
-		            builder.addNode(""data-source"", ""any""); //$NON-NLS-1$	        		
-	        	}
-	        	else if (templateName.equals(""xa-data-source"")) {
-		            builder.addNode(""subsystem"", ""datasources""); //$NON-NLS-1$ //$NON-NLS-2$
-		            builder.addNode(""xa-data-source"", ""any""); //$NON-NLS-1$	        		
-	        	}
-	        	else {
+				if (connectionFactory) {
 		            builder.addNode(""subsystem"", ""resource-adapters""); //$NON-NLS-1$ //$NON-NLS-2$
 		            builder.addNode(""resource-adapter"", templateName); //$NON-NLS-1$
-	        	}
+		            builder.addNode(""connection-definitions"", ""any""); //$NON-NLS-1$
+				}
+				else {
+		            builder.addNode(""subsystem"", ""datasources""); //$NON-NLS-1$ //$NON-NLS-2$
+		            builder.addNode(""data-source"", ""any""); //$NON-NLS-1$	        		
+				}
 	        	
-	            builder.setOperationName(""read-resource-description""); 
+	            builder.setOperationName(""read-resource-description""); //$NON-NLS-1$
 	            request = builder.buildRequest();
 	        } catch (OperationFormatException e) {
 	            throw new IllegalStateException(""Failed to build operation"", e); //$NON-NLS-1$
@@ -772,29 +1009,6 @@ public Collection<? extends Translator> getTranslators() throws AdminException {
 	        return Collections.emptyList();
 		}
 		
-	    public List<String> getTransports() {
-	        DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder();
-	        final ModelNode request;
-	        try {
-	        	builder.addNode(""subsystem"", ""teiid""); //$NON-NLS-1$ //$NON-NLS-2$
-	            builder.setOperationName(""read-children-names"");
-	            builder.addProperty(""child-type"", ""transport"");
-	            request = builder.buildRequest();
-	        } catch (OperationFormatException e) {
-	            throw new IllegalStateException(""Failed to build operation"", e);
-	        }
-
-	        try {
-	            ModelNode outcome = this.connection.execute(request);
-	            if (Util.isSuccess(outcome)) {
-	                return Util.getList(outcome);
-	            }
-	        } catch (Exception e) {
-	        }
-
-	        return Collections.emptyList();
-	    }		
-		
 		private ModelNode buildRequest(String subsystem, String operationName, String... params) {
 			DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder();
 	        final ModelNode request;
@@ -823,13 +1037,7 @@ private <T> List<T> getList(ModelNode operationResult,  MetadataMapper<T> mapper
 
 	        List<T> list = new ArrayList<T>(nodeList.size());
 	        for(ModelNode node : nodeList) {
-	        	Set<String> keys = node.keys();
-	        	if (!keys.isEmpty()) {
-	        		list.addAll(getList(node.get(0), mapper));
-	        	}
-	        	else {
-	        		list.add(mapper.unwrap(node));
-	        	}
+        		list.add(mapper.unwrap(node));
 	        }
 	        return list;
 	    }		
@@ -994,7 +1202,19 @@ public void assignToModel(String vdbName, int vdbVersion, String modelName, Stri
 	        } catch (Exception e) {
 	        	throw new AdminProcessingException(e);
 	        }				
-		}		
+		}
+		
+	    @Override
+	    public void markDataSourceAvailable(String jndiName) throws AdminException {
+	        final ModelNode request = buildRequest(""teiid"", ""mark-datasource-available"",""ds-name"", jndiName);//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
+	        try {
+	            ModelNode outcome = this.connection.execute(request);
+	            if (!Util.isSuccess(outcome)) {
+	            	throw new AdminProcessingException(Util.getFailureDescription(outcome));
+	            }
+	        } catch (Exception e) {
+	        	throw new AdminProcessingException(e);
+	        }	    	
+	    }		
     }
-    
 }",2011-10-27T14:44:07Z,27
"@@ -69,4 +69,9 @@ allow-read.describe= read allowed
 allow-update.describe = update allowed
 allow-delete.describe = delete allowed
 allow-execute.describe = execute allowed
-allow-alter.describe = alter allowed
\ No newline at end of file
+allow-alter.describe = alter allowed
+
+driver_not_defined=Driver {0} is not configured in the system, install the JDBC driver first
+connection_url_required=connection-url is required property
+datasource_exists=Data source with name {0} already exists; choose a different deployment name
+datasource_doesnot_exists=Data Source with name {0} does not exists in the system. Check the deployment name.
\ No newline at end of file",2011-10-27T14:44:07Z,150
"@@ -20,29 +20,32 @@
   ~ 02110-1301 USA, or see the FSF site: http://www.fsf.org.
   -->
 
-<server xmlns=""urn:jboss:domain:1.0"">
+<server xmlns=""urn:jboss:domain:1.1"">
 
     <extensions>
         <extension module=""org.jboss.as.clustering.infinispan""/>
         <extension module=""org.jboss.as.connector""/>
         <extension module=""org.jboss.as.deployment-scanner""/>
         <extension module=""org.jboss.as.ee""/>
         <extension module=""org.jboss.as.ejb3""/>
+        <extension module=""org.jboss.as.jacorb""/>
         <extension module=""org.jboss.as.jaxrs""/>
         <extension module=""org.jboss.as.jmx""/>
         <extension module=""org.jboss.as.jpa""/>
         <extension module=""org.jboss.as.logging""/>
+        <extension module=""org.jboss.as.mail""/>
+        <extension module=""org.jboss.as.messaging""/>
         <extension module=""org.jboss.as.naming""/>
         <extension module=""org.jboss.as.osgi""/>
-        <extension module=""org.jboss.as.pojo""/>
         <extension module=""org.jboss.as.remoting""/>
         <extension module=""org.jboss.as.sar""/>
         <extension module=""org.jboss.as.security""/>
         <extension module=""org.jboss.teiid""/>
         <extension module=""org.jboss.as.threads""/>
         <extension module=""org.jboss.as.transactions""/>
-        <extension module=""org.jboss.as.web"" />
-        <extension module=""org.jboss.as.weld"" />
+        <extension module=""org.jboss.as.web""/>
+        <extension module=""org.jboss.as.webservices""/>
+        <extension module=""org.jboss.as.weld""/>
     </extensions>
 
     <management>
@@ -86,6 +89,13 @@
             <logger category=""sun.rmi"">
                 <level name=""WARN""/>
             </logger>
+            <logger category=""jacorb"">
+                <level name=""WARN""/>
+            </logger>
+            <!-- set jacorb.config to ERROR to avoid the ""jacorb.properties not found"" messages during startup -->
+            <logger category=""jacorb.config"">
+                <level name=""ERROR""/>
+            </logger>
 
             <root-logger>
                 <level name=""INFO""/>
@@ -97,7 +107,8 @@
         </subsystem>
         <subsystem xmlns=""urn:jboss:domain:datasources:1.0"">
             <datasources>
-                <datasource jndi-name=""java:jboss/datasources/ExampleDS"" enabled=""true"" use-java-context=""true"" pool-name=""H2DS"">
+                <datasource jndi-name=""java:jboss/datasources/ExampleDS"" enabled=""true"" use-java-context=""true""
+                            pool-name=""H2DS"">
                     <connection-url>jdbc:h2:mem:test;DB_CLOSE_DELAY=-1</connection-url>
                     <driver>h2</driver>
                     <pool></pool>
@@ -148,25 +159,47 @@
             </datasources>
         </subsystem>
         <subsystem xmlns=""urn:jboss:domain:deployment-scanner:1.0"">
-            <deployment-scanner scan-interval=""5000"" relative-to=""jboss.server.base.dir"" path=""deployments"" />
+            <deployment-scanner scan-interval=""5000"" relative-to=""jboss.server.base.dir"" path=""deployments""/>
         </subsystem>
         <subsystem xmlns=""urn:jboss:domain:ee:1.0"" />
-        <subsystem xmlns=""urn:jboss:domain:ejb3:1.1"" lite=""true"">
+        <subsystem xmlns=""urn:jboss:domain:ejb3:1.2"" >
+
+            <remote connector-ref=""remoting-connector"" thread-pool-name=""default"" />
+            <async thread-pool-name=""default"" />
+
+            <timer-service thread-pool-name=""default"" >
+                <data-store path=""timer-service-data"" relative-to=""jboss.server.data.dir""/>
+            </timer-service>
+
             <!-- EJB3 pools -->
             <pools>
                 <bean-instance-pools>
                     <strict-max-pool name=""slsb-strict-max-pool"" max-pool-size=""20"" instance-acquisition-timeout=""5""
                                      instance-acquisition-timeout-unit=""MINUTES""/>
+
+                    <strict-max-pool name=""mdb-strict-max-pool"" max-pool-size=""20"" instance-acquisition-timeout=""5""
+                                     instance-acquisition-timeout-unit=""MINUTES""/>
                 </bean-instance-pools>
             </pools>
 
+            <!-- Default MDB configurations -->
+            <mdb>
+                <resource-adapter-ref resource-adapter-name=""hornetq-ra""/>
+                <bean-instance-pool-ref pool-name=""mdb-strict-max-pool""/>
+            </mdb>
+
             <!-- Session bean configurations -->
             <session-bean>
                 <stateless>
                     <bean-instance-pool-ref pool-name=""slsb-strict-max-pool""/>
                 </stateless>
+                <stateful default-access-timeout=""5000""/>
+                <singleton default-access-timeout=""5000""/>
             </session-bean>
 
+            <thread-pools>
+                <thread-pool name=""default"" max-threads=""10"" keepalive-time=""100"" />
+            </thread-pools>
         </subsystem>
         <subsystem xmlns=""urn:jboss:domain:infinispan:1.0"" default-cache-container=""hibernate"">
             <cache-container name=""hibernate"" default-cache=""local-query"">
@@ -189,96 +222,174 @@
                 </local-cache>
             </cache-container>            
         </subsystem>
+        <subsystem xmlns=""urn:jboss:domain:jacorb:1.0"">
+            <orb name=""JBoss"" print-version=""off"" giop-minor-version=""2"">
+                <connection max-managed-buf-size=""24"" outbuf-cache-timeout=""-1""/>
+                <naming root-context=""JBoss/Naming/root"" export-corbaloc=""on""/>
+            </orb>
+            <poa monitoring=""off"" queue-wait=""off"">
+                <request-processors pool-size=""2"" max-threads=""8""/>
+            </poa>
+            <interop sun=""on"" chunk-custom-rmi-valuetypes=""on"" strict-check-on-tc-creation=""off""/>
+        </subsystem>
         <subsystem xmlns=""urn:jboss:domain:jaxrs:1.0""/>
         <subsystem xmlns=""urn:jboss:domain:jca:1.0"">
-            <archive-validation enabled=""false"" />
-            <bean-validation enabled=""false"" />
+            <archive-validation enabled=""false""/>
+            <bean-validation enabled=""false""/>
             <default-workmanager>
                 <short-running-threads blocking=""true"">
-                        <core-threads count=""10"" per-cpu=""20""/>
-                        <queue-length count=""10"" per-cpu=""20""/>
-                        <max-threads count=""10"" per-cpu=""20""/>
-                        <keepalive-time time=""10"" unit=""seconds""/>
+                    <core-threads count=""10"" per-cpu=""20""/>
+                    <queue-length count=""10"" per-cpu=""20""/>
+                    <max-threads count=""10"" per-cpu=""20""/>
+                    <keepalive-time time=""10"" unit=""seconds""/>
                 </short-running-threads>
                 <long-running-threads blocking=""true"">
-                        <core-threads count=""10"" per-cpu=""20""/>
-                        <queue-length count=""10"" per-cpu=""20""/>
-                        <max-threads count=""10"" per-cpu=""20""/>
-                        <keepalive-time time=""10"" unit=""seconds""/>
+                    <core-threads count=""10"" per-cpu=""20""/>
+                    <queue-length count=""10"" per-cpu=""20""/>
+                    <max-threads count=""10"" per-cpu=""20""/>
+                    <keepalive-time time=""10"" unit=""seconds""/>
                 </long-running-threads>
             </default-workmanager>
         </subsystem>
-        <subsystem xmlns=""urn:jboss:domain:jmx:1.0"">
+        <subsystem xmlns=""urn:jboss:domain:jmx:1.1"" show-model=""true"">
             <jmx-connector registry-binding=""jmx-connector-registry"" server-binding=""jmx-connector-server"" />
         </subsystem>
         <subsystem xmlns=""urn:jboss:domain:jpa:1.0"">
             <jpa default-datasource=""""/>
         </subsystem>
-        <subsystem xmlns=""urn:jboss:domain:naming:1.0"" />
-        <subsystem xmlns=""urn:jboss:domain:pojo:1.0"" />
-        <subsystem xmlns=""urn:jboss:domain:osgi:1.0"" activation=""lazy"">
+        <subsystem xmlns=""urn:jboss:domain:mail:1.0"">
+            <mail-session jndi-name=""java:jboss/mail/Default"">
+                <smtp-server address=""localhost"" port=""25""/>
+            </mail-session>
+        </subsystem>
+        <subsystem xmlns=""urn:jboss:domain:messaging:1.1"">
+            <hornetq-server>
+                <!-- Default journal file size is 10Mb, reduced here to 100k for faster first boot -->
+                <journal-file-size>102400</journal-file-size>
+                <journal-min-files>2</journal-min-files>
+                <journal-type>NIO</journal-type>
+                <!-- disable messaging persistence -->
+                <persistence-enabled>false</persistence-enabled>
+
+                <connectors>
+                    <netty-connector name=""netty"" socket-binding=""messaging""/>
+                    <netty-connector name=""netty-throughput"" socket-binding=""messaging-throughput"">
+                        <param key=""batch-delay"" value=""50""/>
+                    </netty-connector>
+                    <in-vm-connector name=""in-vm"" server-id=""0""/>
+                </connectors>
+
+                <acceptors>
+                    <netty-acceptor name=""netty"" socket-binding=""messaging""/>
+                    <netty-acceptor name=""netty-throughput"" socket-binding=""messaging-throughput"">
+                        <param key=""batch-delay"" value=""50""/>
+                        <param key=""direct-deliver"" value=""false""/>
+                    </netty-acceptor>
+                    <in-vm-acceptor name=""in-vm"" server-id=""0""/>
+                </acceptors>
+
+                <security-settings>
+                    <security-setting match=""#"">
+                        <permission type=""createNonDurableQueue"" roles=""guest""/>
+                        <permission type=""deleteNonDurableQueue"" roles=""guest""/>
+                        <permission type=""consume"" roles=""guest""/>
+                        <permission type=""send"" roles=""guest""/>
+                    </security-setting>
+                </security-settings>
+
+                <address-settings>
+                    <!--default for catch all-->
+                    <address-setting match=""#"">
+                        <dead-letter-address>jms.queue.DLQ</dead-letter-address>
+                        <expiry-address>jms.queue.ExpiryQueue</expiry-address>
+                        <redelivery-delay>0</redelivery-delay>
+                        <max-size-bytes>10485760</max-size-bytes>
+                        <message-counter-history-day-limit>10</message-counter-history-day-limit>
+                        <address-full-policy>BLOCK</address-full-policy>
+                    </address-setting>
+                </address-settings>
+
+                <!--JMS Stuff-->
+                <jms-connection-factories>
+                    <connection-factory name=""InVmConnectionFactory"">
+                        <connectors>
+                            <connector-ref connector-name=""in-vm""/>
+                        </connectors>
+                        <entries>
+                            <entry name=""java:/ConnectionFactory""/>
+                        </entries>
+                    </connection-factory>
+                    <connection-factory name=""RemoteConnectionFactory"">
+                        <connectors>
+                            <connector-ref connector-name=""netty""/>
+                        </connectors>
+                        <entries>
+                            <entry name=""RemoteConnectionFactory""/>
+                        </entries>
+                    </connection-factory>
+                    <pooled-connection-factory name=""hornetq-ra"">
+                        <transaction mode=""xa""/>
+                        <connectors>
+                            <connector-ref connector-name=""in-vm""/>
+                        </connectors>
+                        <entries>
+                            <entry name=""java:/JmsXA""/>
+                        </entries>
+                    </pooled-connection-factory>
+                </jms-connection-factories>
+
+                <jms-destinations>
+                    <jms-queue name=""testQueue"">
+                        <entry name=""queue/test""/>
+                    </jms-queue>
+                    <jms-topic name=""testTopic"">
+                        <entry name=""topic/test""/>
+                    </jms-topic>
+                </jms-destinations>
+            </hornetq-server>
+        </subsystem>
+        <subsystem xmlns=""urn:jboss:domain:naming:1.0""/>
+        <subsystem xmlns=""urn:jboss:domain:osgi:1.1"" activation=""lazy"">
             <configuration pid=""org.apache.felix.webconsole.internal.servlet.OsgiManager"">
-                <property name=""manager.root"">jboss-osgi</property>
+                <property name=""manager.root"" value=""jboss-osgi""/>
             </configuration>
             <properties>
-                <!--
-                    A comma seperated list of module identifiers. Each system module
-                    is added as a dependency to the OSGi framework module. The packages
-                    from these system modules can be made visible as framework system packages.
-                    http://www.osgi.org/javadoc/r4v42/org/osgi/framework/Constants.html#FRAMEWORK_SYSTEMPACKAGES_EXTRA
-                -->
-                <property name=""org.jboss.osgi.system.modules"">
-                org.apache.commons.logging,
-                org.apache.log4j,
-                org.jboss.as.osgi,
-                org.slf4j,
-                </property>
-                <!--
-                    Framework environment property identifying extra packages which the system bundle
-                    must export from the current execution environment
-                -->
-                <property name=""org.osgi.framework.system.packages.extra"">
-                org.apache.commons.logging;version=1.1.1,
-                org.apache.log4j;version=1.2,
-                org.jboss.as.osgi.service;version=7.0,
-                org.jboss.osgi.deployment.interceptor;version=1.0,
-                org.jboss.osgi.spi.capability;version=1.0,
-                org.jboss.osgi.spi.util;version=1.0,
-                org.jboss.osgi.testing;version=1.0,
-                org.jboss.osgi.vfs;version=1.0,
-                org.slf4j;version=1.5.10,
-                </property>
                 <!-- Specifies the beginning start level of the framework -->
                 <property name=""org.osgi.framework.startlevel.beginning"">1</property>
             </properties>
-            <modules>
+            <capabilities>
                 <!-- modules registered with the OSGi layer on startup -->
-                <module identifier=""javaee.api""/>
-                <module identifier=""org.jboss.logging""/>
+                <capability name=""javax.api""/>
+                <capability name=""javax.servlet.api""/>
+                <capability name=""javax.transaction.api""/>
                 <!-- bundles installed on startup -->
-                <module identifier=""org.apache.aries.util""/>
-                <module identifier=""org.jboss.osgi.webconsole""/>
-                <module identifier=""org.osgi.compendium""/>
+                <capability name=""org.apache.aries.util""/>
+                <capability name=""org.jboss.osgi.webconsole""/>
+                <capability name=""org.osgi.compendium""/>
                 <!-- bundles started in startlevel 1 -->
-                <module identifier=""org.apache.felix.log"" startlevel=""1""/>
-                <module identifier=""org.jboss.osgi.logging"" startlevel=""1""/>
-                <module identifier=""org.apache.felix.configadmin"" startlevel=""1""/>
-                <module identifier=""org.jboss.as.osgi.configadmin"" startlevel=""1""/>
+                <capability name=""org.apache.felix.log"" startlevel=""1""/>
+                <capability name=""org.jboss.osgi.logging"" startlevel=""1""/>
+                <capability name=""org.apache.felix.configadmin"" startlevel=""1""/>
+                <capability name=""org.jboss.as.osgi.configadmin"" startlevel=""1""/>
                 <!-- bundles started in startlevel 2 -->
-                <module identifier=""org.apache.aries.jmx"" startlevel=""2""/>
-                <module identifier=""org.apache.felix.eventadmin"" startlevel=""2""/>
-                <module identifier=""org.apache.felix.metatype"" startlevel=""2""/>
-                <module identifier=""org.apache.felix.scr"" startlevel=""2""/>
-                <module identifier=""org.apache.felix.webconsole"" startlevel=""2""/>
-                <module identifier=""org.jboss.osgi.jmx"" startlevel=""2""/>
-                <module identifier=""org.jboss.osgi.http"" startlevel=""2""/>
+                <capability name=""org.apache.aries.jmx"" startlevel=""2""/>
+                <capability name=""org.apache.felix.eventadmin"" startlevel=""2""/>
+                <capability name=""org.apache.felix.metatype"" startlevel=""2""/>
+                <capability name=""org.apache.felix.scr"" startlevel=""2""/>
+                <capability name=""org.apache.felix.webconsole"" startlevel=""2""/>
+                <capability name=""org.jboss.netty"" startlevel=""2""/>
+                <capability name=""org.jboss.osgi.jmx"" startlevel=""2""/>
+                <capability name=""org.jboss.osgi.http"" startlevel=""2""/>
+                <capability name=""org.projectodd.stilts"" startlevel=""2""/>
                 <!-- bundles started in startlevel 3 -->
-                <module identifier=""org.jboss.osgi.blueprint"" startlevel=""3""/>
-                <module identifier=""org.jboss.osgi.webapp"" startlevel=""3""/>
-                <module identifier=""org.jboss.osgi.xerces"" startlevel=""3""/>
-            </modules>
+                <capability name=""org.jboss.osgi.blueprint"" startlevel=""3""/>
+                <capability name=""org.jboss.osgi.webapp"" startlevel=""3""/>
+                <capability name=""org.jboss.osgi.xerces"" startlevel=""3""/>
+            </capabilities>
+        </subsystem>
+        <subsystem xmlns=""urn:jboss:domain:remoting:1.0"">
+            <connector name=""remoting-connector"" socket-binding=""remoting""/>
         </subsystem>
-        <subsystem xmlns=""urn:jboss:domain:remoting:1.0""/>
         <subsystem xmlns=""urn:jboss:domain:resource-adapters:1.0"">
             <resource-adapters>
                 <resource-adapter>
@@ -302,9 +413,19 @@
             <security-domains>
                 <security-domain name=""other"" cache-type=""default"">
                     <authentication>
-                        <login-module code=""Disabled"" flag=""required""/>
+                        <login-module code=""UsersRoles"" flag=""required""/>
                     </authentication>
                 </security-domain>
+                <security-domain name=""jboss-web-policy"" cache-type=""default"">
+                    <authorization>
+                        <policy-module code=""Delegating"" flag=""required""/>
+                    </authorization>
+                </security-domain>
+                <security-domain name=""jboss-ejb-policy"" cache-type=""default"">
+                    <authorization>
+                        <policy-module code=""Delegating"" flag=""required""/>
+                    </authorization>
+                </security-domain>
                 <security-domain name=""teiid-security"" cache-type=""default"">
                     <authentication>
                         <login-module code=""UsersRoles"" flag=""required"">
@@ -365,36 +486,64 @@
             <recovery-environment socket-binding=""txn-recovery-environment"" status-socket-binding=""txn-status-manager""/>
             <core-environment>
                 <process-id>
-                    <uuid />
+                    <uuid/>
                 </process-id>
             </core-environment>
             <coordinator-environment default-timeout=""300""/>
         </subsystem>
         <subsystem xmlns=""urn:jboss:domain:web:1.0"" default-virtual-server=""default-host"">
             <connector name=""http"" scheme=""http"" protocol=""HTTP/1.1"" socket-binding=""http""/>
             <virtual-server name=""default-host"" enable-welcome-root=""true"">
-               <alias name=""localhost"" />
-               <alias name=""example.com"" />
+                <alias name=""localhost""/>
+                <alias name=""example.com""/>
             </virtual-server>
         </subsystem>
-        <subsystem xmlns=""urn:jboss:domain:weld:1.0"" />
+        <subsystem xmlns=""urn:jboss:domain:webservices:1.0"">
+            <modify-wsdl-address>true</modify-wsdl-address>
+            <wsdl-host>localhost</wsdl-host>
+            <!--
+            <wsdl-port>8080</wsdl-port>
+            <wsdl-secure-port>8443</wsdl-secure-port>
+            -->
+            <endpoint-config xmlns:ws=""urn:jboss:jbossws-jaxws-config:4.0"">
+                <ws:config-name>Standard-Endpoint-Config</ws:config-name>
+            </endpoint-config>
+            <endpoint-config xmlns:ws=""urn:jboss:jbossws-jaxws-config:4.0"">
+                <ws:config-name>Recording-Endpoint-Config</ws:config-name>
+                <ws:pre-handler-chains>
+                    <handler-chain xmlns=""http://java.sun.com/xml/ns/javaee"">
+                        <protocol-bindings>##SOAP11_HTTP ##SOAP11_HTTP_MTOM ##SOAP12_HTTP ##SOAP12_HTTP_MTOM
+                        </protocol-bindings>
+                        <handler>
+                            <handler-name>RecordingHandler</handler-name>
+                            <handler-class>org.jboss.ws.common.invocation.RecordingServerHandler</handler-class>
+                        </handler>
+                    </handler-chain>
+                </ws:pre-handler-chains>
+            </endpoint-config>
+        </subsystem>
+        <subsystem xmlns=""urn:jboss:domain:weld:1.0""/>
     </profile>
 
     <interfaces>
         <interface name=""management"">
             <inet-address value=""${jboss.bind.address.management:127.0.0.1}""/>
         </interface>
         <interface name=""public"">
-           <inet-address value=""${jboss.bind.address.public:127.0.0.1}""/>
+           <inet-address value=""${jboss.bind.address:127.0.0.1}""/>
         </interface>
     </interfaces>
 
     <socket-binding-group name=""standard-sockets"" default-interface=""public"">
         <socket-binding name=""http"" port=""8080""/>
         <socket-binding name=""https"" port=""8443""/>
+        <socket-binding name=""jacorb"" port=""3528""/>
+        <socket-binding name=""jacorb-ssl"" port=""3529""/>
         <socket-binding name=""jmx-connector-registry"" interface=""management"" port=""1090""/>
         <socket-binding name=""jmx-connector-server"" interface=""management"" port=""1091""/>
         <socket-binding name=""jndi"" port=""1099""/>
+        <socket-binding name=""messaging"" port=""5445""/>
+        <socket-binding name=""messaging-throughput"" port=""5455""/>
         <socket-binding name=""osgi-http"" interface=""management"" port=""8090""/>
         <socket-binding name=""remoting"" port=""4447""/>
         <socket-binding name=""txn-recovery-environment"" port=""4712""/>",2011-10-27T14:44:07Z,151
"@@ -139,6 +139,7 @@ public ModelNode getModelDescription(Locale locale) {
 		new ListTransactions().register(teiidSubsystem);
 		new TerminateTransaction().register(teiidSubsystem);
 		new ExecuteQuery().register(teiidSubsystem);
+		new MarkDataSourceAvailable().register(teiidSubsystem);
 	}
 
 	@Override",2011-10-27T14:44:07Z,152
"@@ -64,6 +64,7 @@
 import org.teiid.client.util.ResultsFuture;
 import org.teiid.core.TeiidComponentException;
 import org.teiid.deployers.VDBRepository;
+import org.teiid.deployers.VDBStatusChecker;
 import org.teiid.dqp.internal.datamgr.TranslatorRepository;
 import org.teiid.dqp.internal.process.DQPCore;
 import org.teiid.dqp.internal.process.DQPWorkContext;
@@ -449,6 +450,29 @@ protected void describeParameters(ModelNode operationNode, ResourceBundle bundle
 	}	
 }
 
+class MarkDataSourceAvailable extends TeiidOperationHandler{
+	protected MarkDataSourceAvailable() {
+		super(""mark-datasource-available""); //$NON-NLS-1$
+	}
+	
+	@Override
+	protected void executeOperation(OperationContext context, DQPCore engine, ModelNode operation) throws OperationFailedException {
+		if (!operation.hasDefined(OperationsConstants.DS_NAME)) {
+			throw new OperationFailedException(new ModelNode().set(IntegrationPlugin.Util.getString(OperationsConstants.DS_NAME+MISSING)));
+		}
+		String dsName = operation.get(OperationsConstants.DS_NAME).asString();
+		ServiceController<?> sc = context.getServiceRegistry(false).getRequiredService(TeiidServiceNames.VDB_STATUS_CHECKER);
+		VDBStatusChecker vsc = VDBStatusChecker.class.cast(sc.getValue());
+		vsc.dataSourceAdded(dsName);
+	}
+	
+	protected void describeParameters(ModelNode operationNode, ResourceBundle bundle) {
+		operationNode.get(REQUEST_PROPERTIES, OperationsConstants.DS_NAME, TYPE).set(ModelType.STRING);
+		operationNode.get(REQUEST_PROPERTIES, OperationsConstants.DS_NAME, REQUIRED).set(true);
+		operationNode.get(REQUEST_PROPERTIES, OperationsConstants.DS_NAME, DESCRIPTION).set(getParameterDescription(bundle, OperationsConstants.DS_NAME));
+	}	
+}
+
 class WorkerPoolStatistics extends TeiidOperationHandler{
 	
 	protected WorkerPoolStatistics() {",2011-10-27T14:44:07Z,11
"@@ -203,10 +203,8 @@ private void dataSourceDependencies(VDBMetaData deployment, DependentServices sv
 				String dsName = model.getSourceConnectionJndiName(sourceName);
 				ServiceName svcName = ServiceName.JBOSS.append(""data-source"", getJndiName(dsName)); //$NON-NLS-1$
 				if (!jdbcSource) {
-					// TODO: add service dependency on connection-factory (this is pending in AS7)
-					svcName = ServiceName.JBOSS.append(""resource-adaptor"", getJndiName(dsName)); //$NON-NLS-1$
+					svcName = ServiceName.JBOSS.append(""connector"", ""connection-factory"", getJndiName(dsName)); //$NON-NLS-1$ //$NON-NLS-2$
 				}
-				
 				svcListener.serviceFound(dsName, svcName);				
 			}
 		}",2011-10-27T14:44:07Z,153
"@@ -450,7 +450,12 @@
                 <groupId>org.jboss.logging</groupId>
                 <artifactId>jboss-logging</artifactId>
                 <version>3.0.0.GA</version>
-            </dependency>               
+            </dependency>   
+            <dependency>
+                <groupId>org.jboss.logging</groupId>
+                <artifactId>jboss-logging-generator</artifactId>
+                <version>1.0.0.CR1</version>            
+            </dependency>            
             <dependency>
               <groupId>org.jboss.as</groupId>
               <artifactId>jboss-as-clustering-jgroups</artifactId>",2011-10-27T14:44:07Z,90
"@@ -76,6 +76,11 @@
         <artifactId>jboss-as-security</artifactId>
         <scope>provided</scope>
     </dependency> 
+    <dependency>
+        <groupId>org.jboss.logging</groupId>
+        <artifactId>jboss-logging-generator</artifactId>
+         <scope>provided</scope>          
+    </dependency>            
     
     <!-- 
     <dependency>",2011-10-27T14:44:07Z,154
